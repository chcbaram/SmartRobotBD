
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000499c  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000030c  20000000  0800499c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000122c  20000400  08004e00  00010400  2**9
                  ALLOC
  3 ._usrstack    00000100  2000162c  0800602c  00010400  2**0
                  ALLOC
  4 .ARM.attributes 00000033  00000000  00000000  0001030c  2**0
                  CONTENTS, READONLY
  5 .debug_info   00009fd8  00000000  00000000  0001033f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003183  00000000  00000000  0001a317  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000a67c  00000000  00000000  0001d49a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000b20  00000000  00000000  00027b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000021b0  00000000  00000000  00028636  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003768  00000000  00000000  0002a7e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002519  00000000  00000000  0002df4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000070  00000000  00000000  00030467  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001b44  00000000  00000000  000304d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 c9 10 00 08                             .P. ....

08000008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800000a:	f241 43ed 	movw	r3, #5357	; 0x14ed
 800000e:	2000      	movs	r0, #0
 8000010:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000014:	4798      	blx	r3
 8000016:	bd08      	pop	{r3, pc}

08000018 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000018:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001a:	4b0a      	ldr	r3, [pc, #40]	; (8000044 <main+0x2c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800001c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001e:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000020:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000022:	4809      	ldr	r0, [pc, #36]	; (8000048 <main+0x30>)
 8000024:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000026:	4d09      	ldr	r5, [pc, #36]	; (800004c <main+0x34>)
 8000028:	2202      	movs	r2, #2
 800002a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800002e:	4b08      	ldr	r3, [pc, #32]	; (8000050 <main+0x38>)
 8000030:	4620      	mov	r0, r4
 8000032:	9400      	str	r4, [sp, #0]
 8000034:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );		
 8000036:	4620      	mov	r0, r4
 8000038:	4906      	ldr	r1, [pc, #24]	; (8000054 <main+0x3c>)
 800003a:	4788      	blx	r1
	
	Main_Init();

	//-- 명령어 처리
	//  
	Ap_GLcdMenu_ExeCmd();    
 800003c:	4a06      	ldr	r2, [pc, #24]	; (8000058 <main+0x40>)
 800003e:	4790      	blx	r2
 8000040:	e7fe      	b.n	8000040 <main+0x28>
 8000042:	bf00      	nop
 8000044:	08001195 	.word	0x08001195
 8000048:	0800005d 	.word	0x0800005d
 800004c:	08001909 	.word	0x08001909
 8000050:	08000009 	.word	0x08000009
 8000054:	08001929 	.word	0x08001929
 8000058:	08000135 	.word	0x08000135

0800005c <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 800005c:	4770      	bx	lr
 800005e:	bf00      	nop

08000060 <Ap_GLcdMenu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
 8000060:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
 8000062:	f244 507c 	movw	r0, #17788	; 0x457c
 8000066:	f640 3425 	movw	r4, #2853	; 0xb25
	Lb_printf("*******************************************************\n");
 800006a:	f244 5580 	movw	r5, #17792	; 0x4580
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 800006e:	f6c0 0400 	movt	r4, #2048	; 0x800
	Lb_printf("*******************************************************\n");
 8000072:	f6c0 0500 	movt	r5, #2048	; 0x800
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 8000076:	f6c0 0000 	movt	r0, #2048	; 0x800
 800007a:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 800007c:	4628      	mov	r0, r5
 800007e:	47a0      	blx	r4
	Lb_printf("                      MPU6050                          \n");
 8000080:	f244 50bc 	movw	r0, #17852	; 0x45bc
 8000084:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000088:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 800008a:	4628      	mov	r0, r5
 800008c:	47a0      	blx	r4
	Lb_printf("* 1. LCD Clear                                        *\n");
 800008e:	f244 50f8 	movw	r0, #17912	; 0x45f8
 8000092:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000096:	47a0      	blx	r4
	Lb_printf("* 2. Show Acc                                         *\n");
 8000098:	f244 6034 	movw	r0, #17972	; 0x4634
 800009c:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000a0:	47a0      	blx	r4
	Lb_printf("* 3. Show MPU6050 Regs                                *\n");
 80000a2:	f244 6070 	movw	r0, #18032	; 0x4670
 80000a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000aa:	47a0      	blx	r4
	Lb_printf("* 4.                                                  *\n");
 80000ac:	f244 60ac 	movw	r0, #18092	; 0x46ac
 80000b0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000b4:	47a0      	blx	r4
	Lb_printf("* 5.                                                  *\n");
 80000b6:	f244 60e8 	movw	r0, #18152	; 0x46e8
 80000ba:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000be:	47a0      	blx	r4
	Lb_printf("* 6.                                                  *\n");
 80000c0:	f244 7024 	movw	r0, #18212	; 0x4724
 80000c4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000c8:	47a0      	blx	r4
	Lb_printf("* 7.                                                  *\n");
 80000ca:	f244 7060 	movw	r0, #18272	; 0x4760
 80000ce:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000d2:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 80000d4:	f244 709c 	movw	r0, #18332	; 0x479c
 80000d8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000dc:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 80000de:	f244 70d8 	movw	r0, #18392	; 0x47d8
 80000e2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000e6:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 80000e8:	f644 0014 	movw	r0, #18452	; 0x4814
 80000ec:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000f0:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80000f2:	4628      	mov	r0, r5
 80000f4:	47a0      	blx	r4
	Lb_printf("\n");
 80000f6:	f644 00e0 	movw	r0, #18656	; 0x48e0
 80000fa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000fe:	47a0      	blx	r4
 8000100:	bd38      	pop	{r3, r4, r5, pc}
 8000102:	bf00      	nop

08000104 <Ap_GLcdMenu_GetCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_GetCmd(void)
{
 8000104:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 8000106:	f644 0050 	movw	r0, #18512	; 0x4850
 800010a:	f640 3425 	movw	r4, #2853	; 0xb25
 800010e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8000112:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000116:	47a0      	blx	r4

    key=get_byte();
 8000118:	f241 33ed 	movw	r3, #5101	; 0x13ed
 800011c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000120:	4798      	blx	r3
 8000122:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 8000124:	f644 00e0 	movw	r0, #18656	; 0x48e0
 8000128:	f6c0 0000 	movt	r0, #2048	; 0x800
 800012c:	47a0      	blx	r4
	
    return key;
}
 800012e:	4628      	mov	r0, r5
 8000130:	bd38      	pop	{r3, r4, r5, pc}
 8000132:	bf00      	nop

08000134 <Ap_GLcdMenu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 8000134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HW_MPU6050_DATA_OBJ MPU6050_Data;


	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		
 8000138:	f240 0361 	movw	r3, #97	; 0x61
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 800013c:	b08b      	sub	sp, #44	; 0x2c
    HW_MPU6050_DATA_OBJ MPU6050_Data;


	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		
 800013e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000142:	4798      	blx	r3

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
 8000144:	2000      	movs	r0, #0
 8000146:	4601      	mov	r1, r0
 8000148:	4a5e      	ldr	r2, [pc, #376]	; (80002c4 <Ap_GLcdMenu_ExeCmd+0x190>)
 800014a:	4c5f      	ldr	r4, [pc, #380]	; (80002c8 <Ap_GLcdMenu_ExeCmd+0x194>)
		Hw_N5110G_DrawRequest();
 800014c:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80002fc <Ap_GLcdMenu_ExeCmd+0x1c8>

	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
 8000150:	47a0      	blx	r4
		Hw_N5110G_DrawRequest();
 8000152:	47d0      	blx	sl
 8000154:	4c5d      	ldr	r4, [pc, #372]	; (80002cc <Ap_GLcdMenu_ExeCmd+0x198>)
 8000156:	4d5e      	ldr	r5, [pc, #376]	; (80002d0 <Ap_GLcdMenu_ExeCmd+0x19c>)
    {
        switch(key)
        {
           case '1':
           		Lb_printf("LCD Clear \n");
           		Hw_N5110G_Clear();
 8000158:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000300 <Ap_GLcdMenu_ExeCmd+0x1cc>

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
		Hw_N5110G_DrawRequest();
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 800015c:	f240 1005 	movw	r0, #261	; 0x105
 8000160:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000164:	4780      	blx	r0
 8000166:	4601      	mov	r1, r0
 8000168:	2800      	cmp	r0, #0
 800016a:	f000 80a8 	beq.w	80002be <Ap_GLcdMenu_ExeCmd+0x18a>
    {
        switch(key)
 800016e:	2933      	cmp	r1, #51	; 0x33
 8000170:	d062      	beq.n	8000238 <Ap_GLcdMenu_ExeCmd+0x104>
 8000172:	d853      	bhi.n	800021c <Ap_GLcdMenu_ExeCmd+0xe8>
 8000174:	2931      	cmp	r1, #49	; 0x31
 8000176:	d05b      	beq.n	8000230 <Ap_GLcdMenu_ExeCmd+0xfc>
 8000178:	2932      	cmp	r1, #50	; 0x32
 800017a:	d1ef      	bne.n	800015c <Ap_GLcdMenu_ExeCmd+0x28>
 800017c:	4f55      	ldr	r7, [pc, #340]	; (80002d4 <Ap_GLcdMenu_ExeCmd+0x1a0>)

           case '2':
                
                while( get_byte_check() == 0 )
                {
                    Ret = Hw_MPU6050_GetData( &MPU6050_Data );
 800017e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8000304 <Ap_GLcdMenu_ExeCmd+0x1d0>
 8000182:	e015      	b.n	80001b0 <Ap_GLcdMenu_ExeCmd+0x7c>
                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
                    if( x < 3 )                x = 3;
                    if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 8000184:	b208      	sxth	r0, r1

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
                    if( x < 3 )                x = 3;
 8000186:	2a02      	cmp	r2, #2
 8000188:	bfd8      	it	le
 800018a:	2603      	movle	r6, #3
                    if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 800018c:	282c      	cmp	r0, #44	; 0x2c
 800018e:	dc42      	bgt.n	8000216 <Ap_GLcdMenu_ExeCmd+0xe2>
                    if( y < 3 )                 y = 3;
 8000190:	2802      	cmp	r0, #2
 8000192:	bfcc      	ite	gt
 8000194:	469b      	movgt	fp, r3
 8000196:	f04f 0b03 	movle.w	fp, #3

                    Hw_N5110G_Clear();                                  
 800019a:	47c0      	blx	r8
                    Hw_N5110G_DrawCircle(  x , y, 3, 0 );                           
 800019c:	4630      	mov	r0, r6
 800019e:	2300      	movs	r3, #0
 80001a0:	4659      	mov	r1, fp
 80001a2:	2203      	movs	r2, #3
 80001a4:	4e4c      	ldr	r6, [pc, #304]	; (80002d8 <Ap_GLcdMenu_ExeCmd+0x1a4>)
 80001a6:	47b0      	blx	r6
                    Hw_N5110G_DrawRequest();
 80001a8:	47d0      	blx	sl
                    Hw_Wait_ms(100);
 80001aa:	2064      	movs	r0, #100	; 0x64
 80001ac:	4b4b      	ldr	r3, [pc, #300]	; (80002dc <Ap_GLcdMenu_ExeCmd+0x1a8>)
 80001ae:	4798      	blx	r3
           		Hw_N5110G_Clear();
               	break;

           case '2':
                
                while( get_byte_check() == 0 )
 80001b0:	47b8      	blx	r7
 80001b2:	2800      	cmp	r0, #0
 80001b4:	d1d2      	bne.n	800015c <Ap_GLcdMenu_ExeCmd+0x28>
                {
                    Ret = Hw_MPU6050_GetData( &MPU6050_Data );
 80001b6:	a801      	add	r0, sp, #4
 80001b8:	47c8      	blx	r9

                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
 80001ba:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80001be:	4848      	ldr	r0, [pc, #288]	; (80002e0 <Ap_GLcdMenu_ExeCmd+0x1ac>)
 80001c0:	47a0      	blx	r4
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
 80001c2:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 80001c6:	4847      	ldr	r0, [pc, #284]	; (80002e4 <Ap_GLcdMenu_ExeCmd+0x1b0>)
 80001c8:	47a0      	blx	r4
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
 80001ca:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80001ce:	4846      	ldr	r0, [pc, #280]	; (80002e8 <Ap_GLcdMenu_ExeCmd+0x1b4>)
 80001d0:	47a0      	blx	r4
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);
 80001d2:	4846      	ldr	r0, [pc, #280]	; (80002ec <Ap_GLcdMenu_ExeCmd+0x1b8>)
 80001d4:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80001d8:	47a0      	blx	r4

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80001da:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 80001de:	f248 531f 	movw	r3, #34079	; 0x851f
 80001e2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80001e6:	fb83 6001 	smull	r6, r0, r3, r1
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80001ea:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80001ee:	fb83 6302 	smull	r6, r3, r3, r2
                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80001f2:	17ce      	asrs	r6, r1, #31
 80001f4:	eba6 11a0 	sub.w	r1, r6, r0, asr #6
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80001f8:	17d2      	asrs	r2, r2, #31
                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80001fa:	312a      	adds	r1, #42	; 0x2a
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80001fc:	eba2 10a3 	sub.w	r0, r2, r3, asr #6
                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 8000200:	b28e      	uxth	r6, r1
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 8000202:	3018      	adds	r0, #24

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 8000204:	b232      	sxth	r2, r6
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 8000206:	b283      	uxth	r3, r0

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 8000208:	2a50      	cmp	r2, #80	; 0x50
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 800020a:	b299      	uxth	r1, r3

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 800020c:	ddba      	ble.n	8000184 <Ap_GLcdMenu_ExeCmd+0x50>
                    if( x < 3 )                x = 3;
                    if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 800020e:	b208      	sxth	r0, r1
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 8000210:	2650      	movs	r6, #80	; 0x50
                    if( x < 3 )                x = 3;
                    if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 8000212:	282c      	cmp	r0, #44	; 0x2c
 8000214:	ddbc      	ble.n	8000190 <Ap_GLcdMenu_ExeCmd+0x5c>
 8000216:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 800021a:	e7be      	b.n	800019a <Ap_GLcdMenu_ExeCmd+0x66>
		Hw_N5110G_DrawRequest();
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
 800021c:	294d      	cmp	r1, #77	; 0x4d
 800021e:	d001      	beq.n	8000224 <Ap_GLcdMenu_ExeCmd+0xf0>
 8000220:	296d      	cmp	r1, #109	; 0x6d
 8000222:	d19b      	bne.n	800015c <Ap_GLcdMenu_ExeCmd+0x28>
           case '0':
               break;

			case 'm':
			case 'M':
				Ap_GLcdMenu_ShowMenu();
 8000224:	f240 0661 	movw	r6, #97	; 0x61
 8000228:	f6c0 0600 	movt	r6, #2048	; 0x800
 800022c:	47b0      	blx	r6
				break;
 800022e:	e795      	b.n	800015c <Ap_GLcdMenu_ExeCmd+0x28>
    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		Lb_printf("LCD Clear \n");
 8000230:	482f      	ldr	r0, [pc, #188]	; (80002f0 <Ap_GLcdMenu_ExeCmd+0x1bc>)
 8000232:	47a0      	blx	r4
           		Hw_N5110G_Clear();
 8000234:	47c0      	blx	r8
               	break;
 8000236:	e791      	b.n	800015c <Ap_GLcdMenu_ExeCmd+0x28>
		Hw_N5110G_DrawRequest();
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
 8000238:	f04f 0900 	mov.w	r9, #0
				break;

           case '3':
           		for( i=0; i<=0x75; i++ )
           		{
           			if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 800023c:	f64c 46cd 	movw	r6, #52429	; 0xcccd
 8000240:	f6cc 46cc 	movt	r6, #52428	; 0xcccc

           			I2C_Data[0] = 0x00;
 8000244:	464f      	mov	r7, r9
 8000246:	e024      	b.n	8000292 <Ap_GLcdMenu_ExeCmd+0x15e>
           			Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8000248:	a905      	add	r1, sp, #20
 800024a:	fa5f f089 	uxtb.w	r0, r9
           case '3':
           		for( i=0; i<=0x75; i++ )
           		{
           			if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);

           			I2C_Data[0] = 0x00;
 800024e:	f88d 7014 	strb.w	r7, [sp, #20]
           			Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8000252:	47a8      	blx	r5
           			Lb_printf("%02x ", I2C_Data[0]);
 8000254:	4827      	ldr	r0, [pc, #156]	; (80002f4 <Ap_GLcdMenu_ExeCmd+0x1c0>)
 8000256:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800025a:	47a0      	blx	r4
				break;

           case '3':
           		for( i=0; i<=0x75; i++ )
           		{
           			if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 800025c:	fa1f f08b 	uxth.w	r0, fp
 8000260:	fba6 3200 	umull	r3, r2, r6, r0
 8000264:	08d3      	lsrs	r3, r2, #3
 8000266:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800026a:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 800026e:	b282      	uxth	r2, r0
 8000270:	b30a      	cbz	r2, 80002b6 <Ap_GLcdMenu_ExeCmd+0x182>

           			I2C_Data[0] = 0x00;
           			Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8000272:	a905      	add	r1, sp, #20
 8000274:	fa5f f08b 	uxtb.w	r0, fp
           case '3':
           		for( i=0; i<=0x75; i++ )
           		{
           			if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);

           			I2C_Data[0] = 0x00;
 8000278:	f88d 7014 	strb.w	r7, [sp, #20]
 800027c:	f10b 0901 	add.w	r9, fp, #1
           			Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8000280:	47a8      	blx	r5
           			Lb_printf("%02x ", I2C_Data[0]);
 8000282:	481c      	ldr	r0, [pc, #112]	; (80002f4 <Ap_GLcdMenu_ExeCmd+0x1c0>)
 8000284:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8000288:	47a0      	blx	r4
                }
           		
				break;

           case '3':
           		for( i=0; i<=0x75; i++ )
 800028a:	f1b9 0f76 	cmp.w	r9, #118	; 0x76
 800028e:	f43f af65 	beq.w	800015c <Ap_GLcdMenu_ExeCmd+0x28>
           		{
           			if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 8000292:	fa1f f289 	uxth.w	r2, r9
 8000296:	fba6 3102 	umull	r3, r1, r6, r2
 800029a:	08c8      	lsrs	r0, r1, #3
 800029c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80002a0:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
 80002a4:	b291      	uxth	r1, r2
 80002a6:	f109 0b01 	add.w	fp, r9, #1
 80002aa:	2900      	cmp	r1, #0
 80002ac:	d1cc      	bne.n	8000248 <Ap_GLcdMenu_ExeCmd+0x114>
 80002ae:	4649      	mov	r1, r9
 80002b0:	4811      	ldr	r0, [pc, #68]	; (80002f8 <Ap_GLcdMenu_ExeCmd+0x1c4>)
 80002b2:	47a0      	blx	r4
 80002b4:	e7c8      	b.n	8000248 <Ap_GLcdMenu_ExeCmd+0x114>
 80002b6:	4810      	ldr	r0, [pc, #64]	; (80002f8 <Ap_GLcdMenu_ExeCmd+0x1c4>)
 80002b8:	4659      	mov	r1, fp
 80002ba:	47a0      	blx	r4
 80002bc:	e7d9      	b.n	8000272 <Ap_GLcdMenu_ExeCmd+0x13e>
               break;
        }
    }
    
    return key;
}
 80002be:	b00b      	add	sp, #44	; 0x2c
 80002c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80002c4:	08004854 	.word	0x08004854
 80002c8:	08001ee5 	.word	0x08001ee5
 80002cc:	08000b25 	.word	0x08000b25
 80002d0:	0800274d 	.word	0x0800274d
 80002d4:	080013fd 	.word	0x080013fd
 80002d8:	08001f55 	.word	0x08001f55
 80002dc:	0800126d 	.word	0x0800126d
 80002e0:	08004870 	.word	0x08004870
 80002e4:	08004878 	.word	0x08004878
 80002e8:	08004880 	.word	0x08004880
 80002ec:	08004888 	.word	0x08004888
 80002f0:	08004864 	.word	0x08004864
 80002f4:	0800489c 	.word	0x0800489c
 80002f8:	08004890 	.word	0x08004890
 80002fc:	08001f45 	.word	0x08001f45
 8000300:	08001d95 	.word	0x08001d95
 8000304:	08002985 	.word	0x08002985

08000308 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 8000308:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 800030c:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800030e:	7819      	ldrb	r1, [r3, #0]
 8000310:	b151      	cbz	r1, 8000328 <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8000312:	4a08      	ldr	r2, [pc, #32]	; (8000334 <print_byte_out+0x2c>)
 8000314:	4908      	ldr	r1, [pc, #32]	; (8000338 <print_byte_out+0x30>)
 8000316:	6814      	ldr	r4, [r2, #0]
 8000318:	6808      	ldr	r0, [r1, #0]
 800031a:	1c63      	adds	r3, r4, #1
 800031c:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800031e:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8000320:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8000322:	2200      	movs	r2, #0
 8000324:	54ca      	strb	r2, [r1, r3]
 8000326:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <print_byte_out+0x34>)
 800032a:	4798      	blx	r3
 800032c:	bd38      	pop	{r3, r4, r5, pc}
 800032e:	bf00      	nop
 8000330:	20000404 	.word	0x20000404
 8000334:	20000400 	.word	0x20000400
 8000338:	200004b8 	.word	0x200004b8
 800033c:	080013b1 	.word	0x080013b1

08000340 <PrintString>:
        }
        return;
}

void PrintString(char *fmt, char *s)
{
 8000340:	b538      	push	{r3, r4, r5, lr}
        if (!fmt || !s) return;
 8000342:	b148      	cbz	r0, 8000358 <PrintString+0x18>
 8000344:	b141      	cbz	r1, 8000358 <PrintString+0x18>
        while (*s) print_byte_out(*s++);
 8000346:	7808      	ldrb	r0, [r1, #0]
 8000348:	b130      	cbz	r0, 8000358 <PrintString+0x18>
 800034a:	4d04      	ldr	r5, [pc, #16]	; (800035c <PrintString+0x1c>)
 800034c:	460c      	mov	r4, r1
 800034e:	47a8      	blx	r5
 8000350:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000354:	2800      	cmp	r0, #0
 8000356:	d1fa      	bne.n	800034e <PrintString+0xe>
 8000358:	bd38      	pop	{r3, r4, r5, pc}
 800035a:	bf00      	nop
 800035c:	08000309 	.word	0x08000309

08000360 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 8000360:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 8000362:	b1c8      	cbz	r0, 8000398 <DecToLong+0x38>
 8000364:	7803      	ldrb	r3, [r0, #0]
 8000366:	b1cb      	cbz	r3, 800039c <DecToLong+0x3c>


        for (*retval=0; *s; s++){
 8000368:	2300      	movs	r3, #0
 800036a:	600b      	str	r3, [r1, #0]
 800036c:	7802      	ldrb	r2, [r0, #0]
 800036e:	b192      	cbz	r2, 8000396 <DecToLong+0x36>
                if (*s < '0' || *s > '9') return false;
 8000370:	3a30      	subs	r2, #48	; 0x30
 8000372:	b2d4      	uxtb	r4, r2
 8000374:	2c09      	cmp	r4, #9
 8000376:	d902      	bls.n	800037e <DecToLong+0x1e>
 8000378:	e012      	b.n	80003a0 <DecToLong+0x40>
 800037a:	2d09      	cmp	r5, #9
 800037c:	d810      	bhi.n	80003a0 <DecToLong+0x40>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 800037e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8000382:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 8000386:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 8000388:	f810 4f01 	ldrb.w	r4, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 800038c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8000390:	b2d5      	uxtb	r5, r2
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 8000392:	2c00      	cmp	r4, #0
 8000394:	d1f1      	bne.n	800037a <DecToLong+0x1a>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 8000396:	2001      	movs	r0, #1
}        // DecToLong.
 8000398:	bc30      	pop	{r4, r5}
 800039a:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 800039c:	4618      	mov	r0, r3
 800039e:	e7fb      	b.n	8000398 <DecToLong+0x38>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 80003a0:	2000      	movs	r0, #0
 80003a2:	e7f9      	b.n	8000398 <DecToLong+0x38>

080003a4 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 80003a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a8:	4682      	mov	sl, r0
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80003aa:	7800      	ldrb	r0, [r0, #0]
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80003ac:	2300      	movs	r3, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 80003ae:	b084      	sub	sp, #16
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
 80003b0:	f1b1 0800 	subs.w	r8, r1, #0
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80003b4:	9300      	str	r3, [sp, #0]
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
		l = -l;	
 80003b6:	bfba      	itte	lt
 80003b8:	f1c8 0800 	rsblt	r8, r8, #0
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
 80003bc:	f04f 0901 	movlt.w	r9, #1
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;
 80003c0:	4699      	movge	r9, r3
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80003c2:	2800      	cmp	r0, #0
 80003c4:	f000 8140 	beq.w	8000648 <PrintDec+0x2a4>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 80003c8:	2500      	movs	r5, #0


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 80003ca:	2864      	cmp	r0, #100	; 0x64
 80003cc:	d029      	beq.n	8000422 <PrintDec+0x7e>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 80003ce:	4ea1      	ldr	r6, [pc, #644]	; (8000654 <PrintDec+0x2b0>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 80003d0:	462c      	mov	r4, r5
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 80003d2:	462f      	mov	r7, r5

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 80003d4:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
 80003d8:	2a08      	cmp	r2, #8
 80003da:	f200 808e 	bhi.w	80004fa <PrintDec+0x156>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80003de:	f81a 2004 	ldrb.w	r2, [sl, r4]
 80003e2:	eb0a 0104 	add.w	r1, sl, r4
 80003e6:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 80003ea:	2809      	cmp	r0, #9
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	a801      	add	r0, sp, #4
 80003f2:	d809      	bhi.n	8000408 <PrintDec+0x64>
			{
				tol[j] = s[i++];
 80003f4:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80003f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
			{
				tol[j] = s[i++];
 80003fa:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80003fc:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8000400:	3301      	adds	r3, #1
 8000402:	f1be 0f09 	cmp.w	lr, #9
 8000406:	d9f5      	bls.n	80003f4 <PrintDec+0x50>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8000408:	a904      	add	r1, sp, #16
 800040a:	18ca      	adds	r2, r1, r3
			i--;
			DecToLong(tol, &flagcnt);
 800040c:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800040e:	f802 7c0c 	strb.w	r7, [r2, #-12]
			i--;
 8000412:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 8000414:	47b0      	blx	r6
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000416:	3401      	adds	r4, #1
 8000418:	f81a 0004 	ldrb.w	r0, [sl, r4]
 800041c:	b108      	cbz	r0, 8000422 <PrintDec+0x7e>
	{
		if (c=='d') break;
 800041e:	2864      	cmp	r0, #100	; 0x64
 8000420:	d1d8      	bne.n	80003d4 <PrintDec+0x30>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 8000422:	f1b9 0f00 	cmp.w	r9, #0
 8000426:	f040 810b 	bne.w	8000640 <PrintDec+0x29c>
 800042a:	4e8b      	ldr	r6, [pc, #556]	; (8000658 <PrintDec+0x2b4>)


	// 위의 flag에 따라 출력.
	if (flagcnt)
 800042c:	9800      	ldr	r0, [sp, #0]
 800042e:	2800      	cmp	r0, #0
 8000430:	d067      	beq.n	8000502 <PrintDec+0x15e>
	{
                if (flagcnt>9) flagcnt=9;
 8000432:	2809      	cmp	r0, #9
 8000434:	f300 80ff 	bgt.w	8000636 <PrintDec+0x292>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 8000438:	1e44      	subs	r4, r0, #1


        while (cnt--){
 800043a:	1e81      	subs	r1, r0, #2
 800043c:	1ec7      	subs	r7, r0, #3
 800043e:	2c00      	cmp	r4, #0
 8000440:	f000 8104 	beq.w	800064c <PrintDec+0x2a8>
 8000444:	f001 0401 	and.w	r4, r1, #1
                retval *= num;
 8000448:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 800044a:	1e4a      	subs	r2, r1, #1
 800044c:	b171      	cbz	r1, 800046c <PrintDec+0xc8>
 800044e:	b124      	cbz	r4, 800045a <PrintDec+0xb6>
 8000450:	3a01      	subs	r2, #1
 8000452:	1c51      	adds	r1, r2, #1
                retval *= num;
 8000454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000458:	d008      	beq.n	800046c <PrintDec+0xc8>
                retval *= num;
 800045a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800045e:	00e1      	lsls	r1, r4, #3
 8000460:	eb01 0344 	add.w	r3, r1, r4, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000464:	3a02      	subs	r2, #2
                retval *= num;
 8000466:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000468:	1c51      	adds	r1, r2, #1
 800046a:	d1f6      	bne.n	800045a <PrintDec+0xb6>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 800046c:	fb98 f2f3 	sdiv	r2, r8, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000470:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000472:	fb03 8812 	mls	r8, r3, r2, r8
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000476:	f000 80eb 	beq.w	8000650 <PrintDec+0x2ac>
 800047a:	f007 0001 	and.w	r0, r7, #1
                retval *= num;
 800047e:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000480:	1e79      	subs	r1, r7, #1
 8000482:	b177      	cbz	r7, 80004a2 <PrintDec+0xfe>
 8000484:	b120      	cbz	r0, 8000490 <PrintDec+0xec>
 8000486:	3901      	subs	r1, #1
 8000488:	1c48      	adds	r0, r1, #1
                retval *= num;
 800048a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 800048e:	d008      	beq.n	80004a2 <PrintDec+0xfe>
                retval *= num;
 8000490:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8000494:	00fc      	lsls	r4, r7, #3
 8000496:	eb04 0347 	add.w	r3, r4, r7, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800049a:	3902      	subs	r1, #2
                retval *= num;
 800049c:	005c      	lsls	r4, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800049e:	1c4f      	adds	r7, r1, #1
 80004a0:	d1f6      	bne.n	8000490 <PrintDec+0xec>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80004a2:	f246 6767 	movw	r7, #26215	; 0x6667
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80004a6:	f04f 0901 	mov.w	r9, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80004aa:	f2c6 6766 	movt	r7, #26214	; 0x6666
 80004ae:	e00f      	b.n	80004d0 <PrintDec+0x12c>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 80004b0:	2c01      	cmp	r4, #1
 80004b2:	d015      	beq.n	80004e0 <PrintDec+0x13c>


                        if (leading_zero==true){
 80004b4:	f1b9 0f00 	cmp.w	r9, #0
 80004b8:	d012      	beq.n	80004e0 <PrintDec+0x13c>
                                if (flag0)        print_byte_out('0');
 80004ba:	2030      	movs	r0, #48	; 0x30
 80004bc:	b905      	cbnz	r5, 80004c0 <PrintDec+0x11c>
                                else                print_byte_out(' ');
 80004be:	2020      	movs	r0, #32
 80004c0:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80004c2:	fb87 2004 	smull	r2, r0, r7, r4
 80004c6:	17e1      	asrs	r1, r4, #31
 80004c8:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 80004cc:	2c00      	cmp	r4, #0
 80004ce:	dd11      	ble.n	80004f4 <PrintDec+0x150>
                        result = remainder/divisor;
 80004d0:	fb98 f2f4 	sdiv	r2, r8, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80004d4:	b2d0      	uxtb	r0, r2
 80004d6:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80004d8:	fb04 8812 	mls	r8, r4, r2, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 80004dc:	2a00      	cmp	r2, #0
 80004de:	d0e7      	beq.n	80004b0 <PrintDec+0x10c>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80004e0:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80004e2:	fb87 2004 	smull	r2, r0, r7, r4
 80004e6:	17e1      	asrs	r1, r4, #31
 80004e8:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 80004ec:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80004ee:	f04f 0900 	mov.w	r9, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80004f2:	dced      	bgt.n	80004d0 <PrintDec+0x12c>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 80004f4:	b004      	add	sp, #16
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 80004fa:	2830      	cmp	r0, #48	; 0x30
 80004fc:	bf08      	it	eq
 80004fe:	2501      	moveq	r5, #1
 8000500:	e789      	b.n	8000416 <PrintDec+0x72>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000502:	f642 73a1 	movw	r3, #12193	; 0x2fa1
 8000506:	f2c4 43b8 	movt	r3, #17592	; 0x44b8
 800050a:	fb83 2408 	smull	r2, r4, r3, r8
 800050e:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 8000512:	f44f 424a 	mov.w	r2, #51712	; 0xca00
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000516:	ebc1 7024 	rsb	r0, r1, r4, asr #28
                        remainder %= divisor;
 800051a:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
 800051e:	fb02 8810 	mls	r8, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 8000522:	2800      	cmp	r0, #0
 8000524:	f000 809a 	beq.w	800065c <PrintDec+0x2b8>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000528:	b2c0      	uxtb	r0, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800052a:	f643 3489 	movw	r4, #15241	; 0x3b89
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800052e:	3030      	adds	r0, #48	; 0x30
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000530:	f2c5 54e6 	movt	r4, #21990	; 0x55e6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000534:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000536:	fb84 2008 	smull	r2, r0, r4, r8
 800053a:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 800053e:	f44f 4261 	mov.w	r2, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000542:	ebc1 6060 	rsb	r0, r1, r0, asr #25
                        remainder %= divisor;
 8000546:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
 800054a:	fb02 8410 	mls	r4, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800054e:	3030      	adds	r0, #48	; 0x30
 8000550:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000552:	f64c 236b 	movw	r3, #51819	; 0xca6b
 8000556:	f6c6 335f 	movt	r3, #27487	; 0x6b5f
 800055a:	fb83 2004 	smull	r2, r0, r3, r4
 800055e:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 8000560:	f249 6280 	movw	r2, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000564:	ebc1 50a0 	rsb	r0, r1, r0, asr #22
                        remainder %= divisor;
 8000568:	f2c0 0298 	movt	r2, #152	; 0x98
 800056c:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000570:	3030      	adds	r0, #48	; 0x30
 8000572:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000574:	f64d 6383 	movw	r3, #56963	; 0xde83
 8000578:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800057c:	fb83 2004 	smull	r2, r0, r3, r4
 8000580:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 8000582:	f244 2240 	movw	r2, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000586:	ebc1 40a0 	rsb	r0, r1, r0, asr #18
                        remainder %= divisor;
 800058a:	f2c0 020f 	movt	r2, #15
 800058e:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000592:	3030      	adds	r0, #48	; 0x30
 8000594:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000596:	f24b 5389 	movw	r3, #46473	; 0xb589
 800059a:	f2c1 43f8 	movt	r3, #5368	; 0x14f8
 800059e:	fb83 2004 	smull	r2, r0, r3, r4
 80005a2:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 80005a4:	f248 62a0 	movw	r2, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80005a8:	ebc1 3060 	rsb	r0, r1, r0, asr #13
                        remainder %= divisor;
 80005ac:	f2c0 0201 	movt	r2, #1
 80005b0:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80005b4:	3030      	adds	r0, #48	; 0x30
 80005b6:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80005b8:	f648 33ad 	movw	r3, #35757	; 0x8bad
 80005bc:	f6c6 03db 	movt	r3, #26843	; 0x68db
 80005c0:	fb83 2004 	smull	r2, r0, r3, r4
 80005c4:	17e1      	asrs	r1, r4, #31
 80005c6:	ebc1 3020 	rsb	r0, r1, r0, asr #12
                        remainder %= divisor;
 80005ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80005ce:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80005d2:	3030      	adds	r0, #48	; 0x30
 80005d4:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80005d6:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80005da:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80005de:	fb83 2004 	smull	r2, r0, r3, r4
 80005e2:	17e1      	asrs	r1, r4, #31
 80005e4:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
                        remainder %= divisor;
 80005e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ec:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80005f0:	3030      	adds	r0, #48	; 0x30
 80005f2:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80005f4:	f248 531f 	movw	r3, #34079	; 0x851f
 80005f8:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80005fc:	fb83 2004 	smull	r2, r0, r3, r4
 8000600:	17e1      	asrs	r1, r4, #31
 8000602:	ebc1 1060 	rsb	r0, r1, r0, asr #5
                        remainder %= divisor;
 8000606:	2264      	movs	r2, #100	; 0x64
 8000608:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800060c:	3030      	adds	r0, #48	; 0x30
 800060e:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000610:	f246 6367 	movw	r3, #26215	; 0x6667
 8000614:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8000618:	fb83 2004 	smull	r2, r0, r3, r4
 800061c:	17e1      	asrs	r1, r4, #31
 800061e:	ebc1 00a0 	rsb	r0, r1, r0, asr #2
                        remainder %= divisor;
 8000622:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8000626:	eba4 0442 	sub.w	r4, r4, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800062a:	3030      	adds	r0, #48	; 0x30
 800062c:	47b0      	blx	r6
 800062e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000632:	47b0      	blx	r6
 8000634:	e75e      	b.n	80004f4 <PrintDec+0x150>


	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 8000636:	2009      	movs	r0, #9
 8000638:	9000      	str	r0, [sp, #0]
 800063a:	2706      	movs	r7, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 800063c:	2107      	movs	r1, #7
 800063e:	e701      	b.n	8000444 <PrintDec+0xa0>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 8000640:	202d      	movs	r0, #45	; 0x2d
 8000642:	4e05      	ldr	r6, [pc, #20]	; (8000658 <PrintDec+0x2b4>)
 8000644:	47b0      	blx	r6
 8000646:	e6f1      	b.n	800042c <PrintDec+0x88>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 8000648:	4605      	mov	r5, r0
 800064a:	e6ea      	b.n	8000422 <PrintDec+0x7e>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 800064c:	230a      	movs	r3, #10
 800064e:	e70d      	b.n	800046c <PrintDec+0xc8>
 8000650:	240a      	movs	r4, #10
 8000652:	e726      	b.n	80004a2 <PrintDec+0xfe>
 8000654:	08000361 	.word	0x08000361
 8000658:	08000309 	.word	0x08000309
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800065c:	f643 3389 	movw	r3, #15241	; 0x3b89
 8000660:	f2c5 53e6 	movt	r3, #21990	; 0x55e6
 8000664:	fb83 2108 	smull	r2, r1, r3, r8
                        remainder %= divisor;
 8000668:	f44f 4461 	mov.w	r4, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800066c:	ea4f 72e8 	mov.w	r2, r8, asr #31
 8000670:	ebc2 6061 	rsb	r0, r2, r1, asr #25
                        remainder %= divisor;
 8000674:	f2c0 54f5 	movt	r4, #1525	; 0x5f5
 8000678:	fb04 8410 	mls	r4, r4, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 800067c:	2800      	cmp	r0, #0
 800067e:	f47f af66 	bne.w	800054e <PrintDec+0x1aa>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000682:	f64c 206b 	movw	r0, #51819	; 0xca6b
 8000686:	f6c6 305f 	movt	r0, #27487	; 0x6b5f
 800068a:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 800068e:	f249 6380 	movw	r3, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000692:	17e2      	asrs	r2, r4, #31
 8000694:	ebc2 50a1 	rsb	r0, r2, r1, asr #22
                        remainder %= divisor;
 8000698:	f2c0 0398 	movt	r3, #152	; 0x98
 800069c:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 80006a0:	2800      	cmp	r0, #0
 80006a2:	f47f af65 	bne.w	8000570 <PrintDec+0x1cc>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006a6:	f64d 6083 	movw	r0, #56963	; 0xde83
 80006aa:	f2c4 301b 	movt	r0, #17179	; 0x431b
 80006ae:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 80006b2:	f244 2340 	movw	r3, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006b6:	17e2      	asrs	r2, r4, #31
 80006b8:	ebc2 40a1 	rsb	r0, r2, r1, asr #18
                        remainder %= divisor;
 80006bc:	f2c0 030f 	movt	r3, #15
 80006c0:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 80006c4:	2800      	cmp	r0, #0
 80006c6:	f47f af64 	bne.w	8000592 <PrintDec+0x1ee>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006ca:	f24b 5089 	movw	r0, #46473	; 0xb589
 80006ce:	f2c1 40f8 	movt	r0, #5368	; 0x14f8
 80006d2:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 80006d6:	f248 63a0 	movw	r3, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006da:	17e2      	asrs	r2, r4, #31
 80006dc:	ebc2 3061 	rsb	r0, r2, r1, asr #13
                        remainder %= divisor;
 80006e0:	f2c0 0301 	movt	r3, #1
 80006e4:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 80006e8:	2800      	cmp	r0, #0
 80006ea:	f47f af63 	bne.w	80005b4 <PrintDec+0x210>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006ee:	f648 30ad 	movw	r0, #35757	; 0x8bad
 80006f2:	f6c6 00db 	movt	r0, #26843	; 0x68db
 80006f6:	fb80 2104 	smull	r2, r1, r0, r4
 80006fa:	17e2      	asrs	r2, r4, #31
 80006fc:	ebc2 3021 	rsb	r0, r2, r1, asr #12
                        remainder %= divisor;
 8000700:	f242 7310 	movw	r3, #10000	; 0x2710
 8000704:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8000708:	2800      	cmp	r0, #0
 800070a:	f47f af62 	bne.w	80005d2 <PrintDec+0x22e>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800070e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
 8000712:	f2c1 0062 	movt	r0, #4194	; 0x1062
 8000716:	fb80 2104 	smull	r2, r1, r0, r4
 800071a:	17e2      	asrs	r2, r4, #31
 800071c:	ebc2 10a1 	rsb	r0, r2, r1, asr #6
                        remainder %= divisor;
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8000728:	2800      	cmp	r0, #0
 800072a:	f47f af61 	bne.w	80005f0 <PrintDec+0x24c>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800072e:	f248 501f 	movw	r0, #34079	; 0x851f
 8000732:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
 8000736:	fb80 2104 	smull	r2, r1, r0, r4
 800073a:	17e2      	asrs	r2, r4, #31
 800073c:	ebc2 1061 	rsb	r0, r2, r1, asr #5
                        remainder %= divisor;
 8000740:	2364      	movs	r3, #100	; 0x64
 8000742:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8000746:	2800      	cmp	r0, #0
 8000748:	f47f af60 	bne.w	800060c <PrintDec+0x268>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800074c:	f246 6067 	movw	r0, #26215	; 0x6667
 8000750:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8000754:	fb80 2104 	smull	r2, r1, r0, r4
 8000758:	17e2      	asrs	r2, r4, #31
 800075a:	ebc2 00a1 	rsb	r0, r2, r1, asr #2
                        remainder %= divisor;
 800075e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8000762:	eba4 0443 	sub.w	r4, r4, r3, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 8000766:	2800      	cmp	r0, #0
 8000768:	f43f af61 	beq.w	800062e <PrintDec+0x28a>
 800076c:	e75d      	b.n	800062a <PrintDec+0x286>
 800076e:	bf00      	nop

08000770 <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000774:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000776:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000778:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800077a:	4681      	mov	r9, r0
 800077c:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800077e:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000780:	2b00      	cmp	r3, #0
 8000782:	f000 80b7 	beq.w	80008f4 <PrintHex+0x184>
                if (c=='x') break;
 8000786:	2b78      	cmp	r3, #120	; 0x78
 8000788:	f000 80b4 	beq.w	80008f4 <PrintHex+0x184>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 800078c:	4fb4      	ldr	r7, [pc, #720]	; (8000a60 <PrintHex+0x2f0>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 800078e:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000790:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 8000792:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000796:	2a08      	cmp	r2, #8
 8000798:	f200 80a8 	bhi.w	80008ec <PrintHex+0x17c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800079c:	f819 2004 	ldrb.w	r2, [r9, r4]
 80007a0:	eb09 0104 	add.w	r1, r9, r4
 80007a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80007a8:	2b09      	cmp	r3, #9
 80007aa:	a803      	add	r0, sp, #12
 80007ac:	f04f 0300 	mov.w	r3, #0
 80007b0:	d808      	bhi.n	80007c4 <PrintHex+0x54>
                                tol[j] = s[i++];
 80007b2:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80007b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 80007b8:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80007ba:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80007be:	3301      	adds	r3, #1
 80007c0:	2d09      	cmp	r5, #9
 80007c2:	d9f6      	bls.n	80007b2 <PrintHex+0x42>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80007c4:	a906      	add	r1, sp, #24
 80007c6:	18ca      	adds	r2, r1, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 80007c8:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80007ca:	f802 8c0c 	strb.w	r8, [r2, #-12]
                        i--;
 80007ce:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 80007d0:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80007d2:	3401      	adds	r4, #1
 80007d4:	f819 3004 	ldrb.w	r3, [r9, r4]
 80007d8:	b10b      	cbz	r3, 80007de <PrintHex+0x6e>
                if (c=='x') break;
 80007da:	2b78      	cmp	r3, #120	; 0x78
 80007dc:	d1d9      	bne.n	8000792 <PrintHex+0x22>
 80007de:	9901      	ldr	r1, [sp, #4]
 80007e0:	9b02      	ldr	r3, [sp, #8]
 80007e2:	ba0a      	rev	r2, r1
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 80007e4:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	f000 8087 	beq.w	80008fa <PrintHex+0x18a>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 80007ec:	07d8      	lsls	r0, r3, #31
 80007ee:	f100 810f 	bmi.w	8000a10 <PrintHex+0x2a0>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 80007f2:	2101      	movs	r1, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 80007f4:	f1c3 0208 	rsb	r2, r3, #8
 80007f8:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
 80007fc:	105a      	asrs	r2, r3, #1
 80007fe:	2a03      	cmp	r2, #3
 8000800:	f300 80c9 	bgt.w	8000996 <PrintHex+0x226>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000804:	ac01      	add	r4, sp, #4
 8000806:	18a5      	adds	r5, r4, r2
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000808:	462c      	mov	r4, r5
 800080a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800080e:	43ef      	mvns	r7, r5
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000810:	0903      	lsrs	r3, r0, #4
 8000812:	f007 0901 	and.w	r9, r7, #1
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000816:	f10d 0808 	add.w	r8, sp, #8
 800081a:	4d92      	ldr	r5, [pc, #584]	; (8000a64 <PrintHex+0x2f4>)
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800081c:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000820:	f000 8131 	beq.w	8000a86 <PrintHex+0x316>
                        if (uHex<10) uHex+='0';
 8000824:	2b09      	cmp	r3, #9
 8000826:	f240 816e 	bls.w	8000b06 <PrintHex+0x396>
                        else         uHex+='A'-10;
 800082a:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 800082e:	47a8      	blx	r5
 8000830:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000832:	2f00      	cmp	r7, #0
 8000834:	f000 8130 	beq.w	8000a98 <PrintHex+0x328>
                        if (lHex<10) lHex+='0';
 8000838:	2f09      	cmp	r7, #9
 800083a:	f240 8152 	bls.w	8000ae2 <PrintHex+0x372>
                        else         lHex+='A'-10;
 800083e:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000842:	47a8      	blx	r5
 8000844:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000846:	4544      	cmp	r4, r8
 8000848:	f000 80a5 	beq.w	8000996 <PrintHex+0x226>
 800084c:	f1b9 0f00 	cmp.w	r9, #0
 8000850:	d017      	beq.n	8000882 <PrintHex+0x112>
                        c = s[i];
 8000852:	f814 0b01 	ldrb.w	r0, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000856:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000858:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800085c:	d031      	beq.n	80008c2 <PrintHex+0x152>
                        if (uHex<10) uHex+='0';
 800085e:	2b09      	cmp	r3, #9
 8000860:	f240 8142 	bls.w	8000ae8 <PrintHex+0x378>
                        else         uHex+='A'-10;
 8000864:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000868:	47a8      	blx	r5
 800086a:	2200      	movs	r2, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800086c:	b3a7      	cbz	r7, 80008d8 <PrintHex+0x168>
                        if (lHex<10) lHex+='0';
 800086e:	2f09      	cmp	r7, #9
 8000870:	f240 813d 	bls.w	8000aee <PrintHex+0x37e>
                        else         lHex+='A'-10;
 8000874:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000878:	47a8      	blx	r5
 800087a:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800087c:	4544      	cmp	r4, r8
 800087e:	f000 808a 	beq.w	8000996 <PrintHex+0x226>
                        c = s[i];
 8000882:	f814 3b01 	ldrb.w	r3, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000886:	091a      	lsrs	r2, r3, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000888:	f003 070f 	and.w	r7, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800088c:	f000 80d4 	beq.w	8000a38 <PrintHex+0x2c8>
                        if (uHex<10) uHex+='0';
 8000890:	2a09      	cmp	r2, #9
                        else         uHex+='A'-10;
 8000892:	bf88      	it	hi
 8000894:	f102 0037 	addhi.w	r0, r2, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000898:	f240 812c 	bls.w	8000af4 <PrintHex+0x384>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 800089c:	47a8      	blx	r5
 800089e:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80008a0:	2f00      	cmp	r7, #0
 80008a2:	f000 80d2 	beq.w	8000a4a <PrintHex+0x2da>
                        if (lHex<10) lHex+='0';
 80008a6:	2f09      	cmp	r7, #9
                        else         lHex+='A'-10;
 80008a8:	bf88      	it	hi
 80008aa:	f107 0037 	addhi.w	r0, r7, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80008ae:	f240 8124 	bls.w	8000afa <PrintHex+0x38a>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80008b2:	47a8      	blx	r5
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 80008b4:	f814 0b01 	ldrb.w	r0, [r4], #1
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80008b8:	2100      	movs	r1, #0
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80008ba:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80008bc:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80008c0:	d1cd      	bne.n	800085e <PrintHex+0xee>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 80008c2:	2900      	cmp	r1, #0
 80008c4:	f000 8110 	beq.w	8000ae8 <PrintHex+0x378>
                                if (flag0) print_byte_out('0');
 80008c8:	2e00      	cmp	r6, #0
 80008ca:	f040 80cd 	bne.w	8000a68 <PrintHex+0x2f8>
                                else       print_byte_out(' ');
 80008ce:	2020      	movs	r0, #32
 80008d0:	47a8      	blx	r5
 80008d2:	2201      	movs	r2, #1
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80008d4:	2f00      	cmp	r7, #0
 80008d6:	d1ca      	bne.n	800086e <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 80008d8:	2a00      	cmp	r2, #0
 80008da:	f000 8108 	beq.w	8000aee <PrintHex+0x37e>
                                if (flag0) print_byte_out('0');
 80008de:	2e00      	cmp	r6, #0
 80008e0:	f040 80ba 	bne.w	8000a58 <PrintHex+0x2e8>
                                else       print_byte_out(' ');
 80008e4:	2020      	movs	r0, #32
 80008e6:	47a8      	blx	r5
 80008e8:	2101      	movs	r1, #1
 80008ea:	e7c7      	b.n	800087c <PrintHex+0x10c>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 80008ec:	2b30      	cmp	r3, #48	; 0x30
 80008ee:	bf08      	it	eq
 80008f0:	2601      	moveq	r6, #1
 80008f2:	e76e      	b.n	80007d2 <PrintHex+0x62>
 80008f4:	9c01      	ldr	r4, [sp, #4]
 80008f6:	ba25      	rev	r5, r4
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 80008f8:	9501      	str	r5, [sp, #4]
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80008fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80008fe:	091a      	lsrs	r2, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000900:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000904:	d04a      	beq.n	800099c <PrintHex+0x22c>
                        if (uHex<10) uHex+='0';
 8000906:	2a09      	cmp	r2, #9
 8000908:	f240 80fa 	bls.w	8000b00 <PrintHex+0x390>
                        else         uHex+='A'-10;
 800090c:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000910:	4d54      	ldr	r5, [pc, #336]	; (8000a64 <PrintHex+0x2f4>)
 8000912:	47a8      	blx	r5
 8000914:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000916:	2c00      	cmp	r4, #0
 8000918:	d144      	bne.n	80009a4 <PrintHex+0x234>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 800091a:	2201      	movs	r2, #1
 800091c:	2900      	cmp	r1, #0
 800091e:	f000 80fb 	beq.w	8000b18 <PrintHex+0x3a8>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000922:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000926:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000928:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800092c:	d047      	beq.n	80009be <PrintHex+0x24e>
                        if (uHex<10) uHex+='0';
 800092e:	2909      	cmp	r1, #9
 8000930:	f240 80ec 	bls.w	8000b0c <PrintHex+0x39c>
                        else         uHex+='A'-10;
 8000934:	f101 0037 	add.w	r0, r1, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000938:	47a8      	blx	r5
 800093a:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 800093c:	2c00      	cmp	r4, #0
 800093e:	d144      	bne.n	80009ca <PrintHex+0x25a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000940:	2201      	movs	r2, #1
 8000942:	2b00      	cmp	r3, #0
 8000944:	f000 80e5 	beq.w	8000b12 <PrintHex+0x3a2>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000948:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800094c:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800094e:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000952:	d047      	beq.n	80009e4 <PrintHex+0x274>
                        if (uHex<10) uHex+='0';
 8000954:	2b09      	cmp	r3, #9
 8000956:	f240 80be 	bls.w	8000ad6 <PrintHex+0x366>
                        else         uHex+='A'-10;
 800095a:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 800095e:	47a8      	blx	r5
 8000960:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000962:	2c00      	cmp	r4, #0
 8000964:	d143      	bne.n	80009ee <PrintHex+0x27e>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000966:	2201      	movs	r2, #1
 8000968:	2900      	cmp	r1, #0
 800096a:	f000 80b7 	beq.w	8000adc <PrintHex+0x36c>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 800096e:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000972:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000974:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000978:	d045      	beq.n	8000a06 <PrintHex+0x296>
                        if (uHex<10) uHex+='0';
 800097a:	2909      	cmp	r1, #9
                        else         uHex+='A'-10;
 800097c:	bf88      	it	hi
 800097e:	f101 0037 	addhi.w	r0, r1, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000982:	d942      	bls.n	8000a0a <PrintHex+0x29a>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000984:	47a8      	blx	r5
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000986:	2c00      	cmp	r4, #0
 8000988:	d07a      	beq.n	8000a80 <PrintHex+0x310>
                        if (lHex<10) lHex+='0';
 800098a:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 800098c:	bf88      	it	hi
 800098e:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000992:	d975      	bls.n	8000a80 <PrintHex+0x310>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000994:	47a8      	blx	r5
                }
        }
        return;
}
 8000996:	b007      	add	sp, #28
 8000998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800099c:	2101      	movs	r1, #1
 800099e:	4d31      	ldr	r5, [pc, #196]	; (8000a64 <PrintHex+0x2f4>)
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d0ba      	beq.n	800091a <PrintHex+0x1aa>
                        if (lHex<10) lHex+='0';
 80009a4:	2c09      	cmp	r4, #9
 80009a6:	f240 80b7 	bls.w	8000b18 <PrintHex+0x3a8>
                        else         lHex+='A'-10;
 80009aa:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 80009ae:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80009b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80009b4:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80009b6:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80009b8:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80009bc:	d1b7      	bne.n	800092e <PrintHex+0x1be>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80009be:	2a00      	cmp	r2, #0
 80009c0:	f000 80a4 	beq.w	8000b0c <PrintHex+0x39c>
 80009c4:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80009c6:	2c00      	cmp	r4, #0
 80009c8:	d0ba      	beq.n	8000940 <PrintHex+0x1d0>
                        if (lHex<10) lHex+='0';
 80009ca:	2c09      	cmp	r4, #9
 80009cc:	f240 80a1 	bls.w	8000b12 <PrintHex+0x3a2>
                        else         lHex+='A'-10;
 80009d0:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 80009d4:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80009d6:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80009da:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80009dc:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80009de:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80009e2:	d1b7      	bne.n	8000954 <PrintHex+0x1e4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80009e4:	2a00      	cmp	r2, #0
 80009e6:	d076      	beq.n	8000ad6 <PrintHex+0x366>
 80009e8:	2101      	movs	r1, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d0bb      	beq.n	8000966 <PrintHex+0x1f6>
                        if (lHex<10) lHex+='0';
 80009ee:	2c09      	cmp	r4, #9
 80009f0:	d974      	bls.n	8000adc <PrintHex+0x36c>
                        else         lHex+='A'-10;
 80009f2:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 80009f6:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80009f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80009fc:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80009fe:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a00:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a04:	d1b9      	bne.n	800097a <PrintHex+0x20a>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000a06:	2a00      	cmp	r2, #0
 8000a08:	d1bd      	bne.n	8000986 <PrintHex+0x216>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000a0a:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000a0e:	e7b9      	b.n	8000984 <PrintHex+0x214>
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8000a10:	43d8      	mvns	r0, r3
 8000a12:	3008      	adds	r0, #8
 8000a14:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8000a18:	aa06      	add	r2, sp, #24
 8000a1a:	eb02 0163 	add.w	r1, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 8000a1e:	f811 0c14 	ldrb.w	r0, [r1, #-20]
                        if (lHex!=0) leading_zero=false;
 8000a22:	f010 030f 	ands.w	r3, r0, #15
 8000a26:	d045      	beq.n	8000ab4 <PrintHex+0x344>
                        if (lHex<10) lHex+='0';
 8000a28:	2b09      	cmp	r3, #9
 8000a2a:	d951      	bls.n	8000ad0 <PrintHex+0x360>
                        else         lHex+='A'-10;
 8000a2c:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <PrintHex+0x2f4>)
 8000a32:	4798      	blx	r3
 8000a34:	2100      	movs	r1, #0
 8000a36:	e042      	b.n	8000abe <PrintHex+0x34e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000a38:	2900      	cmp	r1, #0
 8000a3a:	d05b      	beq.n	8000af4 <PrintHex+0x384>
                                if (flag0) print_byte_out('0');
 8000a3c:	b1e6      	cbz	r6, 8000a78 <PrintHex+0x308>
 8000a3e:	2030      	movs	r0, #48	; 0x30
 8000a40:	47a8      	blx	r5
 8000a42:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000a44:	2f00      	cmp	r7, #0
 8000a46:	f47f af2e 	bne.w	80008a6 <PrintHex+0x136>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d055      	beq.n	8000afa <PrintHex+0x38a>
                                if (flag0) print_byte_out('0');
 8000a4e:	b17e      	cbz	r6, 8000a70 <PrintHex+0x300>
 8000a50:	2030      	movs	r0, #48	; 0x30
 8000a52:	47a8      	blx	r5
 8000a54:	2101      	movs	r1, #1
 8000a56:	e6fc      	b.n	8000852 <PrintHex+0xe2>
 8000a58:	2030      	movs	r0, #48	; 0x30
 8000a5a:	47a8      	blx	r5
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	e70d      	b.n	800087c <PrintHex+0x10c>
 8000a60:	08000361 	.word	0x08000361
 8000a64:	08000309 	.word	0x08000309
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000a68:	2030      	movs	r0, #48	; 0x30
 8000a6a:	47a8      	blx	r5
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	e6fd      	b.n	800086c <PrintHex+0xfc>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000a70:	2020      	movs	r0, #32
 8000a72:	47a8      	blx	r5
 8000a74:	2101      	movs	r1, #1
 8000a76:	e6ec      	b.n	8000852 <PrintHex+0xe2>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000a78:	2020      	movs	r0, #32
 8000a7a:	47a8      	blx	r5
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	e70f      	b.n	80008a0 <PrintHex+0x130>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000a80:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000a84:	e786      	b.n	8000994 <PrintHex+0x224>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000a86:	2900      	cmp	r1, #0
 8000a88:	d03d      	beq.n	8000b06 <PrintHex+0x396>
                                if (flag0) print_byte_out('0');
 8000a8a:	b17e      	cbz	r6, 8000aac <PrintHex+0x33c>
 8000a8c:	2030      	movs	r0, #48	; 0x30
 8000a8e:	47a8      	blx	r5
 8000a90:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	f47f aed0 	bne.w	8000838 <PrintHex+0xc8>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000a98:	b319      	cbz	r1, 8000ae2 <PrintHex+0x372>
                                if (flag0) print_byte_out('0');
 8000a9a:	b11e      	cbz	r6, 8000aa4 <PrintHex+0x334>
 8000a9c:	2030      	movs	r0, #48	; 0x30
 8000a9e:	47a8      	blx	r5
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	e6d0      	b.n	8000846 <PrintHex+0xd6>
                                else       print_byte_out(' ');
 8000aa4:	2020      	movs	r0, #32
 8000aa6:	47a8      	blx	r5
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	e6cc      	b.n	8000846 <PrintHex+0xd6>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000aac:	2020      	movs	r0, #32
 8000aae:	47a8      	blx	r5
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	e6be      	b.n	8000832 <PrintHex+0xc2>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000ab4:	b13e      	cbz	r6, 8000ac6 <PrintHex+0x356>
 8000ab6:	491a      	ldr	r1, [pc, #104]	; (8000b20 <PrintHex+0x3b0>)
 8000ab8:	2030      	movs	r0, #48	; 0x30
 8000aba:	4788      	blx	r1
 8000abc:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 8000abe:	9802      	ldr	r0, [sp, #8]
 8000ac0:	1e43      	subs	r3, r0, #1
 8000ac2:	9302      	str	r3, [sp, #8]
 8000ac4:	e696      	b.n	80007f4 <PrintHex+0x84>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000ac6:	2020      	movs	r0, #32
 8000ac8:	4a15      	ldr	r2, [pc, #84]	; (8000b20 <PrintHex+0x3b0>)
 8000aca:	4790      	blx	r2
 8000acc:	2101      	movs	r1, #1
 8000ace:	e7f6      	b.n	8000abe <PrintHex+0x34e>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8000ad0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000ad4:	e7ac      	b.n	8000a30 <PrintHex+0x2c0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000ad6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000ada:	e740      	b.n	800095e <PrintHex+0x1ee>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000adc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000ae0:	e789      	b.n	80009f6 <PrintHex+0x286>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000ae2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000ae6:	e6ac      	b.n	8000842 <PrintHex+0xd2>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000ae8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000aec:	e6bc      	b.n	8000868 <PrintHex+0xf8>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000aee:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000af2:	e6c1      	b.n	8000878 <PrintHex+0x108>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000af4:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8000af8:	e6d0      	b.n	800089c <PrintHex+0x12c>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000afa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000afe:	e6d8      	b.n	80008b2 <PrintHex+0x142>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000b00:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8000b04:	e704      	b.n	8000910 <PrintHex+0x1a0>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000b06:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000b0a:	e690      	b.n	800082e <PrintHex+0xbe>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000b0c:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000b10:	e712      	b.n	8000938 <PrintHex+0x1c8>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000b12:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000b16:	e75d      	b.n	80009d4 <PrintHex+0x264>
 8000b18:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000b1c:	e747      	b.n	80009ae <PrintHex+0x23e>
 8000b1e:	bf00      	nop
 8000b20:	08000309 	.word	0x08000309

08000b24 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 8000b24:	b40f      	push	{r0, r1, r2, r3}
 8000b26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b2a:	b085      	sub	sp, #20
	int		i;
	va_list args;
	char	*s=fmt;
 8000b2c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000b30:	4bac      	ldr	r3, [pc, #688]	; (8000de4 <Lb_printf+0x2c0>)
 8000b32:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 8000b34:	f859 4b04 	ldr.w	r4, [r9], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000b38:	4dab      	ldr	r5, [pc, #684]	; (8000de8 <Lb_printf+0x2c4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000b3a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8000df4 <Lb_printf+0x2d0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000b3e:	4fab      	ldr	r7, [pc, #684]	; (8000dec <Lb_printf+0x2c8>)
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000b40:	4eab      	ldr	r6, [pc, #684]	; (8000df0 <Lb_printf+0x2cc>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000b42:	701a      	strb	r2, [r3, #0]
	
	while (*s)
 8000b44:	7820      	ldrb	r0, [r4, #0]
 8000b46:	2800      	cmp	r0, #0
 8000b48:	f000 80be 	beq.w	8000cc8 <Lb_printf+0x1a4>
	{
		if (*s=='%')
 8000b4c:	2825      	cmp	r0, #37	; 0x25
 8000b4e:	f040 80c0 	bne.w	8000cd2 <Lb_printf+0x1ae>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000b52:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8000b54:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000b56:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8000b5a:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8000b5c:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000b60:	f240 80d6 	bls.w	8000d10 <Lb_printf+0x1ec>
 8000b64:	2a78      	cmp	r2, #120	; 0x78
 8000b66:	f000 80dd 	beq.w	8000d24 <Lb_printf+0x200>
 8000b6a:	2a73      	cmp	r2, #115	; 0x73
 8000b6c:	f000 80dd 	beq.w	8000d2a <Lb_printf+0x206>
 8000b70:	2a25      	cmp	r2, #37	; 0x25
 8000b72:	f000 80dd 	beq.w	8000d30 <Lb_printf+0x20c>
 8000b76:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000b78:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000b7c:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000b80:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000b82:	2a01      	cmp	r2, #1
 8000b84:	f240 80d6 	bls.w	8000d34 <Lb_printf+0x210>
 8000b88:	2978      	cmp	r1, #120	; 0x78
 8000b8a:	f000 80d6 	beq.w	8000d3a <Lb_printf+0x216>
 8000b8e:	2973      	cmp	r1, #115	; 0x73
 8000b90:	f000 80d6 	beq.w	8000d40 <Lb_printf+0x21c>
 8000b94:	2925      	cmp	r1, #37	; 0x25
 8000b96:	f000 80d6 	beq.w	8000d46 <Lb_printf+0x222>
 8000b9a:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000b9c:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ba0:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ba4:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ba6:	2901      	cmp	r1, #1
 8000ba8:	f240 80cf 	bls.w	8000d4a <Lb_printf+0x226>
 8000bac:	2a78      	cmp	r2, #120	; 0x78
 8000bae:	f000 80cf 	beq.w	8000d50 <Lb_printf+0x22c>
 8000bb2:	2a73      	cmp	r2, #115	; 0x73
 8000bb4:	f000 80cf 	beq.w	8000d56 <Lb_printf+0x232>
 8000bb8:	2a25      	cmp	r2, #37	; 0x25
 8000bba:	f000 80cf 	beq.w	8000d5c <Lb_printf+0x238>
 8000bbe:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000bc0:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000bc4:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000bc8:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000bca:	2a01      	cmp	r2, #1
 8000bcc:	f240 80c8 	bls.w	8000d60 <Lb_printf+0x23c>
 8000bd0:	2978      	cmp	r1, #120	; 0x78
 8000bd2:	f000 80c8 	beq.w	8000d66 <Lb_printf+0x242>
 8000bd6:	2973      	cmp	r1, #115	; 0x73
 8000bd8:	f000 80c8 	beq.w	8000d6c <Lb_printf+0x248>
 8000bdc:	2925      	cmp	r1, #37	; 0x25
 8000bde:	f000 80c8 	beq.w	8000d72 <Lb_printf+0x24e>
 8000be2:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000be4:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000be8:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000bec:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000bee:	2901      	cmp	r1, #1
 8000bf0:	f240 80c1 	bls.w	8000d76 <Lb_printf+0x252>
 8000bf4:	2a78      	cmp	r2, #120	; 0x78
 8000bf6:	f000 80c1 	beq.w	8000d7c <Lb_printf+0x258>
 8000bfa:	2a73      	cmp	r2, #115	; 0x73
 8000bfc:	f000 80c1 	beq.w	8000d82 <Lb_printf+0x25e>
 8000c00:	2a25      	cmp	r2, #37	; 0x25
 8000c02:	f000 80c1 	beq.w	8000d88 <Lb_printf+0x264>
 8000c06:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c08:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c0c:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c10:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c12:	2a01      	cmp	r2, #1
 8000c14:	f240 80ba 	bls.w	8000d8c <Lb_printf+0x268>
 8000c18:	2978      	cmp	r1, #120	; 0x78
 8000c1a:	f000 80ba 	beq.w	8000d92 <Lb_printf+0x26e>
 8000c1e:	2973      	cmp	r1, #115	; 0x73
 8000c20:	f000 80ba 	beq.w	8000d98 <Lb_printf+0x274>
 8000c24:	2925      	cmp	r1, #37	; 0x25
 8000c26:	f000 80ba 	beq.w	8000d9e <Lb_printf+0x27a>
 8000c2a:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c2c:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c30:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c34:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c36:	2901      	cmp	r1, #1
 8000c38:	f240 80b3 	bls.w	8000da2 <Lb_printf+0x27e>
 8000c3c:	2a78      	cmp	r2, #120	; 0x78
 8000c3e:	f000 80b3 	beq.w	8000da8 <Lb_printf+0x284>
 8000c42:	2a73      	cmp	r2, #115	; 0x73
 8000c44:	f000 80b3 	beq.w	8000dae <Lb_printf+0x28a>
 8000c48:	2a25      	cmp	r2, #37	; 0x25
 8000c4a:	f000 80b3 	beq.w	8000db4 <Lb_printf+0x290>
 8000c4e:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c50:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c54:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 8000c58:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c5a:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c5e:	f240 80ab 	bls.w	8000db8 <Lb_printf+0x294>
 8000c62:	2978      	cmp	r1, #120	; 0x78
 8000c64:	f000 80ab 	beq.w	8000dbe <Lb_printf+0x29a>
 8000c68:	2973      	cmp	r1, #115	; 0x73
 8000c6a:	f000 80ab 	beq.w	8000dc4 <Lb_printf+0x2a0>
 8000c6e:	2925      	cmp	r1, #37	; 0x25
 8000c70:	f000 80ab 	beq.w	8000dca <Lb_printf+0x2a6>
 8000c74:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c76:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c7a:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8000c7e:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c80:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c84:	f240 80a3 	bls.w	8000dce <Lb_printf+0x2aa>
 8000c88:	2a78      	cmp	r2, #120	; 0x78
 8000c8a:	f000 80a3 	beq.w	8000dd4 <Lb_printf+0x2b0>
 8000c8e:	2a73      	cmp	r2, #115	; 0x73
 8000c90:	f000 80a3 	beq.w	8000dda <Lb_printf+0x2b6>
 8000c94:	2a25      	cmp	r2, #37	; 0x25
 8000c96:	f000 80a3 	beq.w	8000de0 <Lb_printf+0x2bc>
 8000c9a:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c9c:	f88d 200d 	strb.w	r2, [sp, #13]
 8000ca0:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000ca4:	1c5c      	adds	r4, r3, #1
 8000ca6:	2864      	cmp	r0, #100	; 0x64
 8000ca8:	d02b      	beq.n	8000d02 <Lb_printf+0x1de>
 8000caa:	d815      	bhi.n	8000cd8 <Lb_printf+0x1b4>
 8000cac:	2825      	cmp	r0, #37	; 0x25
 8000cae:	d01f      	beq.n	8000cf0 <Lb_printf+0x1cc>
 8000cb0:	2863      	cmp	r0, #99	; 0x63
 8000cb2:	f47f af47 	bne.w	8000b44 <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000cb6:	f899 0000 	ldrb.w	r0, [r9]
 8000cba:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000cbc:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000cbe:	f109 0904 	add.w	r9, r9, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	f47f af42 	bne.w	8000b4c <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 8000cc8:	b005      	add	sp, #20
 8000cca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cce:	b004      	add	sp, #16
 8000cd0:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000cd2:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8000cd4:	3401      	adds	r4, #1
 8000cd6:	e735      	b.n	8000b44 <Lb_printf+0x20>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000cd8:	2873      	cmp	r0, #115	; 0x73
 8000cda:	d00b      	beq.n	8000cf4 <Lb_printf+0x1d0>
 8000cdc:	2878      	cmp	r0, #120	; 0x78
 8000cde:	f47f af31 	bne.w	8000b44 <Lb_printf+0x20>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000ce2:	f8d9 1000 	ldr.w	r1, [r9]
 8000ce6:	a801      	add	r0, sp, #4
 8000ce8:	f109 0904 	add.w	r9, r9, #4
 8000cec:	47b0      	blx	r6
					break;
 8000cee:	e729      	b.n	8000b44 <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000cf0:	47a8      	blx	r5
 8000cf2:	e727      	b.n	8000b44 <Lb_printf+0x20>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000cf4:	f8d9 1000 	ldr.w	r1, [r9]
 8000cf8:	a801      	add	r0, sp, #4
 8000cfa:	f109 0904 	add.w	r9, r9, #4
 8000cfe:	47b8      	blx	r7
 					break;
 8000d00:	e720      	b.n	8000b44 <Lb_printf+0x20>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000d02:	f8d9 1000 	ldr.w	r1, [r9]
 8000d06:	a801      	add	r0, sp, #4
 8000d08:	f109 0904 	add.w	r9, r9, #4
 8000d0c:	47c0      	blx	r8
					break;
 8000d0e:	e719      	b.n	8000b44 <Lb_printf+0x20>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d10:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000d12:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000d14:	aa04      	add	r2, sp, #16
 8000d16:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 8000d18:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000d1a:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 8000d1e:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8000d22:	e7bf      	b.n	8000ca4 <Lb_printf+0x180>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000d24:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d26:	2078      	movs	r0, #120	; 0x78
 8000d28:	e7f4      	b.n	8000d14 <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000d2a:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d2c:	2073      	movs	r0, #115	; 0x73
 8000d2e:	e7f1      	b.n	8000d14 <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000d30:	2401      	movs	r4, #1
 8000d32:	e7ef      	b.n	8000d14 <Lb_printf+0x1f0>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d34:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d36:	2402      	movs	r4, #2
 8000d38:	e7ec      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d3a:	2402      	movs	r4, #2
 8000d3c:	2078      	movs	r0, #120	; 0x78
 8000d3e:	e7e9      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d40:	2402      	movs	r4, #2
 8000d42:	2073      	movs	r0, #115	; 0x73
 8000d44:	e7e6      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d46:	2402      	movs	r4, #2
 8000d48:	e7e4      	b.n	8000d14 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d4a:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d4c:	2403      	movs	r4, #3
 8000d4e:	e7e1      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d50:	2403      	movs	r4, #3
 8000d52:	2078      	movs	r0, #120	; 0x78
 8000d54:	e7de      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d56:	2403      	movs	r4, #3
 8000d58:	2073      	movs	r0, #115	; 0x73
 8000d5a:	e7db      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d5c:	2403      	movs	r4, #3
 8000d5e:	e7d9      	b.n	8000d14 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d60:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d62:	2404      	movs	r4, #4
 8000d64:	e7d6      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d66:	2404      	movs	r4, #4
 8000d68:	2078      	movs	r0, #120	; 0x78
 8000d6a:	e7d3      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d6c:	2404      	movs	r4, #4
 8000d6e:	2073      	movs	r0, #115	; 0x73
 8000d70:	e7d0      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d72:	2404      	movs	r4, #4
 8000d74:	e7ce      	b.n	8000d14 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d76:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d78:	2405      	movs	r4, #5
 8000d7a:	e7cb      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d7c:	2405      	movs	r4, #5
 8000d7e:	2078      	movs	r0, #120	; 0x78
 8000d80:	e7c8      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d82:	2405      	movs	r4, #5
 8000d84:	2073      	movs	r0, #115	; 0x73
 8000d86:	e7c5      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d88:	2405      	movs	r4, #5
 8000d8a:	e7c3      	b.n	8000d14 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d8c:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d8e:	2406      	movs	r4, #6
 8000d90:	e7c0      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d92:	2406      	movs	r4, #6
 8000d94:	2078      	movs	r0, #120	; 0x78
 8000d96:	e7bd      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d98:	2406      	movs	r4, #6
 8000d9a:	2073      	movs	r0, #115	; 0x73
 8000d9c:	e7ba      	b.n	8000d14 <Lb_printf+0x1f0>
 8000d9e:	2406      	movs	r4, #6
 8000da0:	e7b8      	b.n	8000d14 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000da2:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000da4:	2407      	movs	r4, #7
 8000da6:	e7b5      	b.n	8000d14 <Lb_printf+0x1f0>
 8000da8:	2407      	movs	r4, #7
 8000daa:	2078      	movs	r0, #120	; 0x78
 8000dac:	e7b2      	b.n	8000d14 <Lb_printf+0x1f0>
 8000dae:	2407      	movs	r4, #7
 8000db0:	2073      	movs	r0, #115	; 0x73
 8000db2:	e7af      	b.n	8000d14 <Lb_printf+0x1f0>
 8000db4:	2407      	movs	r4, #7
 8000db6:	e7ad      	b.n	8000d14 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000db8:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000dba:	2408      	movs	r4, #8
 8000dbc:	e7aa      	b.n	8000d14 <Lb_printf+0x1f0>
 8000dbe:	2408      	movs	r4, #8
 8000dc0:	2078      	movs	r0, #120	; 0x78
 8000dc2:	e7a7      	b.n	8000d14 <Lb_printf+0x1f0>
 8000dc4:	2408      	movs	r4, #8
 8000dc6:	2073      	movs	r0, #115	; 0x73
 8000dc8:	e7a4      	b.n	8000d14 <Lb_printf+0x1f0>
 8000dca:	2408      	movs	r4, #8
 8000dcc:	e7a2      	b.n	8000d14 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000dce:	4610      	mov	r0, r2
 8000dd0:	2409      	movs	r4, #9
 8000dd2:	e79f      	b.n	8000d14 <Lb_printf+0x1f0>
 8000dd4:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000dd6:	2078      	movs	r0, #120	; 0x78
 8000dd8:	e79c      	b.n	8000d14 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000dda:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ddc:	2073      	movs	r0, #115	; 0x73
 8000dde:	e799      	b.n	8000d14 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000de0:	2409      	movs	r4, #9
 8000de2:	e797      	b.n	8000d14 <Lb_printf+0x1f0>
 8000de4:	20000404 	.word	0x20000404
 8000de8:	08000309 	.word	0x08000309
 8000dec:	08000341 	.word	0x08000341
 8000df0:	08000771 	.word	0x08000771
 8000df4:	080003a5 	.word	0x080003a5

08000df8 <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8000df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8000dfc:	4cab      	ldr	r4, [pc, #684]	; (80010ac <Lb_vsprintf+0x2b4>)
	StrPrintBufIndex = 0;
 8000dfe:	4eac      	ldr	r6, [pc, #688]	; (80010b0 <Lb_vsprintf+0x2b8>)
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8000e00:	6020      	str	r0, [r4, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8000e02:	4bac      	ldr	r3, [pc, #688]	; (80010b4 <Lb_vsprintf+0x2bc>)
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8000e04:	2000      	movs	r0, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8000e06:	4615      	mov	r5, r2
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8000e08:	6030      	str	r0, [r6, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8000e0a:	2201      	movs	r2, #1



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000e0c:	4eaa      	ldr	r6, [pc, #680]	; (80010b8 <Lb_vsprintf+0x2c0>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000e0e:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 80010c0 <Lb_vsprintf+0x2c8>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000e12:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 80010c4 <Lb_vsprintf+0x2cc>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000e16:	4fa9      	ldr	r7, [pc, #676]	; (80010bc <Lb_vsprintf+0x2c4>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8000e18:	b085      	sub	sp, #20
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8000e1a:	701a      	strb	r2, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
	int		i;
	char	*s=fmt;
 8000e1c:	460c      	mov	r4, r1
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8000e1e:	7820      	ldrb	r0, [r4, #0]
 8000e20:	2800      	cmp	r0, #0
 8000e22:	f000 80bc 	beq.w	8000f9e <Lb_vsprintf+0x1a6>
	{
		if (*s=='%')
 8000e26:	2825      	cmp	r0, #37	; 0x25
 8000e28:	f040 80bc 	bne.w	8000fa4 <Lb_vsprintf+0x1ac>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e2c:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8000e2e:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e30:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8000e34:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8000e36:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e3a:	f240 80cc 	bls.w	8000fd6 <Lb_vsprintf+0x1de>
 8000e3e:	2a78      	cmp	r2, #120	; 0x78
 8000e40:	f000 80d3 	beq.w	8000fea <Lb_vsprintf+0x1f2>
 8000e44:	2a73      	cmp	r2, #115	; 0x73
 8000e46:	f000 80d3 	beq.w	8000ff0 <Lb_vsprintf+0x1f8>
 8000e4a:	2a25      	cmp	r2, #37	; 0x25
 8000e4c:	f000 80d3 	beq.w	8000ff6 <Lb_vsprintf+0x1fe>
 8000e50:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e52:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e56:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e5a:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e5c:	2a01      	cmp	r2, #1
 8000e5e:	f240 80cc 	bls.w	8000ffa <Lb_vsprintf+0x202>
 8000e62:	2978      	cmp	r1, #120	; 0x78
 8000e64:	f000 80cc 	beq.w	8001000 <Lb_vsprintf+0x208>
 8000e68:	2973      	cmp	r1, #115	; 0x73
 8000e6a:	f000 80cc 	beq.w	8001006 <Lb_vsprintf+0x20e>
 8000e6e:	2925      	cmp	r1, #37	; 0x25
 8000e70:	f000 80cc 	beq.w	800100c <Lb_vsprintf+0x214>
 8000e74:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e76:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e7a:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e7e:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e80:	2901      	cmp	r1, #1
 8000e82:	f240 80c5 	bls.w	8001010 <Lb_vsprintf+0x218>
 8000e86:	2a78      	cmp	r2, #120	; 0x78
 8000e88:	f000 80c5 	beq.w	8001016 <Lb_vsprintf+0x21e>
 8000e8c:	2a73      	cmp	r2, #115	; 0x73
 8000e8e:	f000 80c5 	beq.w	800101c <Lb_vsprintf+0x224>
 8000e92:	2a25      	cmp	r2, #37	; 0x25
 8000e94:	f000 80c5 	beq.w	8001022 <Lb_vsprintf+0x22a>
 8000e98:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e9a:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e9e:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ea2:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ea4:	2a01      	cmp	r2, #1
 8000ea6:	f240 80be 	bls.w	8001026 <Lb_vsprintf+0x22e>
 8000eaa:	2978      	cmp	r1, #120	; 0x78
 8000eac:	f000 80be 	beq.w	800102c <Lb_vsprintf+0x234>
 8000eb0:	2973      	cmp	r1, #115	; 0x73
 8000eb2:	f000 80be 	beq.w	8001032 <Lb_vsprintf+0x23a>
 8000eb6:	2925      	cmp	r1, #37	; 0x25
 8000eb8:	f000 80be 	beq.w	8001038 <Lb_vsprintf+0x240>
 8000ebc:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ebe:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ec2:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ec6:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ec8:	2901      	cmp	r1, #1
 8000eca:	f240 80b7 	bls.w	800103c <Lb_vsprintf+0x244>
 8000ece:	2a78      	cmp	r2, #120	; 0x78
 8000ed0:	f000 80b7 	beq.w	8001042 <Lb_vsprintf+0x24a>
 8000ed4:	2a73      	cmp	r2, #115	; 0x73
 8000ed6:	f000 80b7 	beq.w	8001048 <Lb_vsprintf+0x250>
 8000eda:	2a25      	cmp	r2, #37	; 0x25
 8000edc:	f000 80b7 	beq.w	800104e <Lb_vsprintf+0x256>
 8000ee0:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ee2:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ee6:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000eea:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000eec:	2a01      	cmp	r2, #1
 8000eee:	f240 80b0 	bls.w	8001052 <Lb_vsprintf+0x25a>
 8000ef2:	2978      	cmp	r1, #120	; 0x78
 8000ef4:	f000 80b0 	beq.w	8001058 <Lb_vsprintf+0x260>
 8000ef8:	2973      	cmp	r1, #115	; 0x73
 8000efa:	f000 80b0 	beq.w	800105e <Lb_vsprintf+0x266>
 8000efe:	2925      	cmp	r1, #37	; 0x25
 8000f00:	f000 80b0 	beq.w	8001064 <Lb_vsprintf+0x26c>
 8000f04:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f06:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f0a:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f0e:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f10:	2901      	cmp	r1, #1
 8000f12:	f240 80a9 	bls.w	8001068 <Lb_vsprintf+0x270>
 8000f16:	2a78      	cmp	r2, #120	; 0x78
 8000f18:	f000 80a9 	beq.w	800106e <Lb_vsprintf+0x276>
 8000f1c:	2a73      	cmp	r2, #115	; 0x73
 8000f1e:	f000 80a9 	beq.w	8001074 <Lb_vsprintf+0x27c>
 8000f22:	2a25      	cmp	r2, #37	; 0x25
 8000f24:	f000 80a9 	beq.w	800107a <Lb_vsprintf+0x282>
 8000f28:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f2a:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f2e:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 8000f32:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f34:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f38:	f240 80a1 	bls.w	800107e <Lb_vsprintf+0x286>
 8000f3c:	2978      	cmp	r1, #120	; 0x78
 8000f3e:	f000 80a1 	beq.w	8001084 <Lb_vsprintf+0x28c>
 8000f42:	2973      	cmp	r1, #115	; 0x73
 8000f44:	f000 80a1 	beq.w	800108a <Lb_vsprintf+0x292>
 8000f48:	2925      	cmp	r1, #37	; 0x25
 8000f4a:	f000 80a1 	beq.w	8001090 <Lb_vsprintf+0x298>
 8000f4e:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f50:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f54:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8000f58:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f5a:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f5e:	f240 8099 	bls.w	8001094 <Lb_vsprintf+0x29c>
 8000f62:	2a78      	cmp	r2, #120	; 0x78
 8000f64:	f000 8099 	beq.w	800109a <Lb_vsprintf+0x2a2>
 8000f68:	2a73      	cmp	r2, #115	; 0x73
 8000f6a:	f000 8099 	beq.w	80010a0 <Lb_vsprintf+0x2a8>
 8000f6e:	2a25      	cmp	r2, #37	; 0x25
 8000f70:	f000 8099 	beq.w	80010a6 <Lb_vsprintf+0x2ae>
 8000f74:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f76:	f88d 200d 	strb.w	r2, [sp, #13]
 8000f7a:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000f7e:	1c5c      	adds	r4, r3, #1
 8000f80:	2864      	cmp	r0, #100	; 0x64
 8000f82:	d023      	beq.n	8000fcc <Lb_vsprintf+0x1d4>
 8000f84:	d811      	bhi.n	8000faa <Lb_vsprintf+0x1b2>
 8000f86:	2825      	cmp	r0, #37	; 0x25
 8000f88:	d019      	beq.n	8000fbe <Lb_vsprintf+0x1c6>
 8000f8a:	2863      	cmp	r0, #99	; 0x63
 8000f8c:	f47f af47 	bne.w	8000e1e <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000f90:	7828      	ldrb	r0, [r5, #0]
 8000f92:	47b0      	blx	r6
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8000f94:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000f96:	3504      	adds	r5, #4
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	f47f af44 	bne.w	8000e26 <Lb_vsprintf+0x2e>
			s++;
		}
	}
	
	return;
}
 8000f9e:	b005      	add	sp, #20
 8000fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000fa4:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8000fa6:	3401      	adds	r4, #1
 8000fa8:	e739      	b.n	8000e1e <Lb_vsprintf+0x26>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000faa:	2873      	cmp	r0, #115	; 0x73
 8000fac:	d009      	beq.n	8000fc2 <Lb_vsprintf+0x1ca>
 8000fae:	2878      	cmp	r0, #120	; 0x78
 8000fb0:	f47f af35 	bne.w	8000e1e <Lb_vsprintf+0x26>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000fb4:	6829      	ldr	r1, [r5, #0]
 8000fb6:	a801      	add	r0, sp, #4
 8000fb8:	3504      	adds	r5, #4
 8000fba:	47b8      	blx	r7
					break;
 8000fbc:	e72f      	b.n	8000e1e <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000fbe:	47b0      	blx	r6
 8000fc0:	e72d      	b.n	8000e1e <Lb_vsprintf+0x26>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000fc2:	6829      	ldr	r1, [r5, #0]
 8000fc4:	a801      	add	r0, sp, #4
 8000fc6:	3504      	adds	r5, #4
 8000fc8:	47c0      	blx	r8
 					break;
 8000fca:	e728      	b.n	8000e1e <Lb_vsprintf+0x26>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000fcc:	6829      	ldr	r1, [r5, #0]
 8000fce:	a801      	add	r0, sp, #4
 8000fd0:	3504      	adds	r5, #4
 8000fd2:	47c8      	blx	r9
					break;
 8000fd4:	e723      	b.n	8000e1e <Lb_vsprintf+0x26>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000fd6:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000fd8:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000fda:	aa04      	add	r2, sp, #16
 8000fdc:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 8000fde:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000fe0:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 8000fe4:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8000fe8:	e7c9      	b.n	8000f7e <Lb_vsprintf+0x186>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000fea:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000fec:	2078      	movs	r0, #120	; 0x78
 8000fee:	e7f4      	b.n	8000fda <Lb_vsprintf+0x1e2>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000ff0:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ff2:	2073      	movs	r0, #115	; 0x73
 8000ff4:	e7f1      	b.n	8000fda <Lb_vsprintf+0x1e2>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000ff6:	2401      	movs	r4, #1
 8000ff8:	e7ef      	b.n	8000fda <Lb_vsprintf+0x1e2>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ffa:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ffc:	2402      	movs	r4, #2
 8000ffe:	e7ec      	b.n	8000fda <Lb_vsprintf+0x1e2>
 8001000:	2402      	movs	r4, #2
 8001002:	2078      	movs	r0, #120	; 0x78
 8001004:	e7e9      	b.n	8000fda <Lb_vsprintf+0x1e2>
 8001006:	2402      	movs	r4, #2
 8001008:	2073      	movs	r0, #115	; 0x73
 800100a:	e7e6      	b.n	8000fda <Lb_vsprintf+0x1e2>
 800100c:	2402      	movs	r4, #2
 800100e:	e7e4      	b.n	8000fda <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001010:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001012:	2403      	movs	r4, #3
 8001014:	e7e1      	b.n	8000fda <Lb_vsprintf+0x1e2>
 8001016:	2403      	movs	r4, #3
 8001018:	2078      	movs	r0, #120	; 0x78
 800101a:	e7de      	b.n	8000fda <Lb_vsprintf+0x1e2>
 800101c:	2403      	movs	r4, #3
 800101e:	2073      	movs	r0, #115	; 0x73
 8001020:	e7db      	b.n	8000fda <Lb_vsprintf+0x1e2>
 8001022:	2403      	movs	r4, #3
 8001024:	e7d9      	b.n	8000fda <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001026:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001028:	2404      	movs	r4, #4
 800102a:	e7d6      	b.n	8000fda <Lb_vsprintf+0x1e2>
 800102c:	2404      	movs	r4, #4
 800102e:	2078      	movs	r0, #120	; 0x78
 8001030:	e7d3      	b.n	8000fda <Lb_vsprintf+0x1e2>
 8001032:	2404      	movs	r4, #4
 8001034:	2073      	movs	r0, #115	; 0x73
 8001036:	e7d0      	b.n	8000fda <Lb_vsprintf+0x1e2>
 8001038:	2404      	movs	r4, #4
 800103a:	e7ce      	b.n	8000fda <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800103c:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800103e:	2405      	movs	r4, #5
 8001040:	e7cb      	b.n	8000fda <Lb_vsprintf+0x1e2>
 8001042:	2405      	movs	r4, #5
 8001044:	2078      	movs	r0, #120	; 0x78
 8001046:	e7c8      	b.n	8000fda <Lb_vsprintf+0x1e2>
 8001048:	2405      	movs	r4, #5
 800104a:	2073      	movs	r0, #115	; 0x73
 800104c:	e7c5      	b.n	8000fda <Lb_vsprintf+0x1e2>
 800104e:	2405      	movs	r4, #5
 8001050:	e7c3      	b.n	8000fda <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001052:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001054:	2406      	movs	r4, #6
 8001056:	e7c0      	b.n	8000fda <Lb_vsprintf+0x1e2>
 8001058:	2406      	movs	r4, #6
 800105a:	2078      	movs	r0, #120	; 0x78
 800105c:	e7bd      	b.n	8000fda <Lb_vsprintf+0x1e2>
 800105e:	2406      	movs	r4, #6
 8001060:	2073      	movs	r0, #115	; 0x73
 8001062:	e7ba      	b.n	8000fda <Lb_vsprintf+0x1e2>
 8001064:	2406      	movs	r4, #6
 8001066:	e7b8      	b.n	8000fda <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001068:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800106a:	2407      	movs	r4, #7
 800106c:	e7b5      	b.n	8000fda <Lb_vsprintf+0x1e2>
 800106e:	2407      	movs	r4, #7
 8001070:	2078      	movs	r0, #120	; 0x78
 8001072:	e7b2      	b.n	8000fda <Lb_vsprintf+0x1e2>
 8001074:	2407      	movs	r4, #7
 8001076:	2073      	movs	r0, #115	; 0x73
 8001078:	e7af      	b.n	8000fda <Lb_vsprintf+0x1e2>
 800107a:	2407      	movs	r4, #7
 800107c:	e7ad      	b.n	8000fda <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800107e:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001080:	2408      	movs	r4, #8
 8001082:	e7aa      	b.n	8000fda <Lb_vsprintf+0x1e2>
 8001084:	2408      	movs	r4, #8
 8001086:	2078      	movs	r0, #120	; 0x78
 8001088:	e7a7      	b.n	8000fda <Lb_vsprintf+0x1e2>
 800108a:	2408      	movs	r4, #8
 800108c:	2073      	movs	r0, #115	; 0x73
 800108e:	e7a4      	b.n	8000fda <Lb_vsprintf+0x1e2>
 8001090:	2408      	movs	r4, #8
 8001092:	e7a2      	b.n	8000fda <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001094:	4610      	mov	r0, r2
 8001096:	2409      	movs	r4, #9
 8001098:	e79f      	b.n	8000fda <Lb_vsprintf+0x1e2>
 800109a:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800109c:	2078      	movs	r0, #120	; 0x78
 800109e:	e79c      	b.n	8000fda <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80010a0:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80010a2:	2073      	movs	r0, #115	; 0x73
 80010a4:	e799      	b.n	8000fda <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80010a6:	2409      	movs	r4, #9
 80010a8:	e797      	b.n	8000fda <Lb_vsprintf+0x1e2>
 80010aa:	bf00      	nop
 80010ac:	200004b8 	.word	0x200004b8
 80010b0:	20000400 	.word	0x20000400
 80010b4:	20000404 	.word	0x20000404
 80010b8:	08000309 	.word	0x08000309
 80010bc:	08000771 	.word	0x08000771
 80010c0:	080003a5 	.word	0x080003a5
 80010c4:	08000341 	.word	0x08000341

080010c8 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 80010c8:	4668      	mov	r0, sp
 80010ca:	f020 0107 	bic.w	r1, r0, #7
 80010ce:	468d      	mov	sp, r1
 80010d0:	b579      	push	{r0, r3, r4, r5, r6, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80010d2:	492a      	ldr	r1, [pc, #168]	; (800117c <zero_loop+0x62>)
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <zero_loop+0x66>)
 80010d6:	4299      	cmp	r1, r3
 80010d8:	d21b      	bcs.n	8001112 <Hw_StartUp_Init+0x4a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 80010da:	1cda      	adds	r2, r3, #3
 80010dc:	1d0c      	adds	r4, r1, #4
 80010de:	1b15      	subs	r5, r2, r4
 80010e0:	4828      	ldr	r0, [pc, #160]	; (8001184 <zero_loop+0x6a>)
 80010e2:	f025 0203 	bic.w	r2, r5, #3
 80010e6:	1d16      	adds	r6, r2, #4
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 80010e8:	6805      	ldr	r5, [r0, #0]
 80010ea:	2304      	movs	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80010ec:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 80010ee:	600d      	str	r5, [r1, #0]
 80010f0:	f3c2 0280 	ubfx	r2, r2, #2, #1
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80010f4:	d00d      	beq.n	8001112 <Hw_StartUp_Init+0x4a>
 80010f6:	b122      	cbz	r2, 8001102 <Hw_StartUp_Init+0x3a>
	{
		*(pulDest++) = *(pulSrc++);
 80010f8:	6842      	ldr	r2, [r0, #4]
 80010fa:	2308      	movs	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80010fc:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 80010fe:	6022      	str	r2, [r4, #0]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001100:	d007      	beq.n	8001112 <Hw_StartUp_Init+0x4a>
	{
		*(pulDest++) = *(pulSrc++);
 8001102:	581d      	ldr	r5, [r3, r0]
 8001104:	1d1a      	adds	r2, r3, #4
 8001106:	505d      	str	r5, [r3, r1]
 8001108:	5884      	ldr	r4, [r0, r2]
 800110a:	3308      	adds	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800110c:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 800110e:	508c      	str	r4, [r1, r2]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001110:	d1f7      	bne.n	8001102 <Hw_StartUp_Init+0x3a>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 8001112:	481e      	ldr	r0, [pc, #120]	; (800118c <zero_loop+0x72>)
 8001114:	491e      	ldr	r1, [pc, #120]	; (8001190 <zero_loop+0x76>)
 8001116:	f04f 0200 	mov.w	r2, #0

0800111a <zero_loop>:
 800111a:	4288      	cmp	r0, r1
 800111c:	bfb8      	it	lt
 800111e:	f840 2b04 	strlt.w	r2, [r0], #4
 8001122:	f6ff affa 	blt.w	800111a <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8001126:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800112a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800112e:	6811      	ldr	r1, [r2, #0]
 8001130:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001134:	f441 3080 	orr.w	r0, r1, #65536	; 0x10000
 8001138:	6010      	str	r0, [r2, #0]
 800113a:	e004      	b.n	8001146 <zero_loop+0x2c>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 800113c:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800113e:	0381      	lsls	r1, r0, #14
 8001140:	d405      	bmi.n	800114e <zero_loop+0x34>
 8001142:	3b01      	subs	r3, #1
 8001144:	d003      	beq.n	800114e <zero_loop+0x34>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8001146:	6811      	ldr	r1, [r2, #0]
 8001148:	3b01      	subs	r3, #1
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800114a:	0388      	lsls	r0, r1, #14
 800114c:	d5f6      	bpl.n	800113c <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 800114e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001152:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001156:	680a      	ldr	r2, [r1, #0]
 8001158:	f042 0010 	orr.w	r0, r2, #16
 800115c:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 800115e:	680b      	ldr	r3, [r1, #0]
 8001160:	f023 0203 	bic.w	r2, r3, #3
 8001164:	600a      	str	r2, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 8001166:	6808      	ldr	r0, [r1, #0]
 8001168:	f040 0302 	orr.w	r3, r0, #2
 800116c:	600b      	str	r3, [r1, #0]


    main();
 800116e:	4906      	ldr	r1, [pc, #24]	; (8001188 <zero_loop+0x6e>)
 8001170:	4788      	blx	r1

}
 8001172:	e8bd 4079 	ldmia.w	sp!, {r0, r3, r4, r5, r6, lr}
 8001176:	4685      	mov	sp, r0
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000000 	.word	0x20000000
 8001180:	2000030c 	.word	0x2000030c
 8001184:	0800499c 	.word	0x0800499c
 8001188:	08000019 	.word	0x08000019
 800118c:	20000400 	.word	0x20000400
 8001190:	2000162c 	.word	0x2000162c

08001194 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8001194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 8001196:	f241 4315 	movw	r3, #5141	; 0x1415
 800119a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800119e:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 80011a0:	f241 6051 	movw	r0, #5713	; 0x1651
 80011a4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80011a8:	4780      	blx	r0
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80011aa:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80011ae:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80011b2:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 80011b6:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 80011ba:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80011be:	f241 0104 	movw	r1, #4100	; 0x1004
 80011c2:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80011c6:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 80011ca:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80011ce:	f2c3 3044 	movt	r0, #13124	; 0x3344
 80011d2:	f2c4 0101 	movt	r1, #16385	; 0x4001
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80011d6:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80011da:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 80011de:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 80011e2:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 80011e6:	f242 23f9 	movw	r3, #8953	; 0x22f9
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80011ea:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 80011ee:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80011f2:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 80011f4:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 80011f6:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80011f8:	6008      	str	r0, [r1, #0]
	
	Hw_DMA_Init();
 80011fa:	4798      	blx	r3
	Hw_Uart_Init();
 80011fc:	f241 3145 	movw	r1, #4933	; 0x1345
 8001200:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001204:	4788      	blx	r1
	Hw_Led_Init();
 8001206:	f241 40a9 	movw	r0, #5289	; 0x14a9
 800120a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800120e:	4780      	blx	r0
	Hw_Timer_Init();
 8001210:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8001214:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001218:	4790      	blx	r2
	Hw_Si47xx_Init();
 800121a:	f641 2389 	movw	r3, #6793	; 0x1a89
 800121e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001222:	4798      	blx	r3
	Hw_N5110G_Init();
 8001224:	f641 41b1 	movw	r1, #7345	; 0x1cb1
 8001228:	f6c0 0100 	movt	r1, #2048	; 0x800
 800122c:	4788      	blx	r1
	Hw_I2C_Init();
 800122e:	f641 107d 	movw	r0, #6525	; 0x197d
 8001232:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001236:	4780      	blx	r0
	
	Hw_VCom_Init();
 8001238:	f641 1251 	movw	r2, #6481	; 0x1951
 800123c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001240:	4790      	blx	r2

	Hw_MPU6050_Init();
 8001242:	f642 1319 	movw	r3, #10521	; 0x2919
 8001246:	f6c0 0300 	movt	r3, #2048	; 0x800
 800124a:	4798      	blx	r3
 800124c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800124e:	bf00      	nop

08001250 <Hw_Wait>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
 8001250:	b082      	sub	sp, #8
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8001252:	2300      	movs	r3, #0
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	9901      	ldr	r1, [sp, #4]
 8001258:	4288      	cmp	r0, r1
 800125a:	d905      	bls.n	8001268 <Hw_Wait+0x18>
 800125c:	9a01      	ldr	r2, [sp, #4]
 800125e:	1c53      	adds	r3, r2, #1
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	9901      	ldr	r1, [sp, #4]
 8001264:	4281      	cmp	r1, r0
 8001266:	d3f9      	bcc.n	800125c <Hw_Wait+0xc>
}
 8001268:	b002      	add	sp, #8
 800126a:	4770      	bx	lr

0800126c <Hw_Wait_ms>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 800126c:	f241 7370 	movw	r3, #6000	; 0x1770
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
 8001270:	b082      	sub	sp, #8
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8001272:	2100      	movs	r1, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 8001274:	fb03 f000 	mul.w	r0, r3, r0
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8001278:	9101      	str	r1, [sp, #4]
 800127a:	9a01      	ldr	r2, [sp, #4]
 800127c:	4290      	cmp	r0, r2
 800127e:	d905      	bls.n	800128c <Hw_Wait_ms+0x20>
 8001280:	9b01      	ldr	r3, [sp, #4]
 8001282:	1c59      	adds	r1, r3, #1
 8001284:	9101      	str	r1, [sp, #4]
 8001286:	9a01      	ldr	r2, [sp, #4]
 8001288:	4290      	cmp	r0, r2
 800128a:	d8f9      	bhi.n	8001280 <Hw_Wait_ms+0x14>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
    Hw_Wait_Usec( msec*1000 );
}
 800128c:	b002      	add	sp, #8
 800128e:	4770      	bx	lr

08001290 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8001290:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8001292:	f643 0304 	movw	r3, #14340	; 0x3804
 8001296:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800129a:	6818      	ldr	r0, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 800129c:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 800129e:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 80012a0:	f241 5261 	movw	r2, #5473	; 0x1561
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80012a4:	f801 0d01 	strb.w	r0, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 80012a8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80012ac:	2000      	movs	r0, #0
 80012ae:	4790      	blx	r2
}
 80012b0:	b003      	add	sp, #12
 80012b2:	bd00      	pop	{pc}

080012b4 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 80012b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80012b8:	f241 0618 	movw	r6, #4120	; 0x1018
 80012bc:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80012c0:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 80012c2:	f240 43bc 	movw	r3, #1212	; 0x4bc
 80012c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80012ca:	f643 040c 	movw	r4, #14348	; 0x380c
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80012ce:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 80012d2:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80012d6:	f643 0708 	movw	r7, #14344	; 0x3808
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 80012da:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 80012dc:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80012de:	f2c4 0401 	movt	r4, #16385	; 0x4001
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80012e2:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80012e4:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80012e8:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 80012ec:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80012f0:	200c      	movs	r0, #12
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80012f2:	f240 2171 	movw	r1, #625	; 0x271
 80012f6:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80012fa:	f24e 1504 	movw	r5, #57604	; 0xe104
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80012fe:	f8c6 8000 	str.w	r8, [r6]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8001302:	f2ce 0500 	movt	r5, #57344	; 0xe000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8001306:	6020      	str	r0, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8001308:	f8cc 2000 	str.w	r2, [ip]
	REG_USART1_CR3  = 0;
 800130c:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8001310:	6039      	str	r1, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8001312:	682b      	ldr	r3, [r5, #0]
 8001314:	f043 0020 	orr.w	r0, r3, #32
 8001318:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800131a:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800131c:	f241 6365 	movw	r3, #5733	; 0x1665
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8001320:	f041 0020 	orr.w	r0, r1, #32
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8001324:	f241 2191 	movw	r1, #4753	; 0x1291
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8001328:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800132a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800132e:	2025      	movs	r0, #37	; 0x25
 8001330:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001334:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8001336:	6822      	ldr	r2, [r4, #0]
 8001338:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 800133c:	6021      	str	r1, [r4, #0]
 800133e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001342:	bf00      	nop

08001344 <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 8001344:	f241 5301 	movw	r3, #5377	; 0x1501
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8001348:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 800134a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800134e:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001350:	f240 43bc 	movw	r3, #1212	; 0x4bc
 8001354:	2200      	movs	r2, #0
 8001356:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 800135a:	f241 24b5 	movw	r4, #4789	; 0x12b5
 800135e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001362:	4611      	mov	r1, r2
 8001364:	f6c0 0400 	movt	r4, #2048	; 0x800
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001368:	605a      	str	r2, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800136a:	609a      	str	r2, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800136c:	611a      	str	r2, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800136e:	615a      	str	r2, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001370:	61da      	str	r2, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001372:	621a      	str	r2, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800137a:	639a      	str	r2, [r3, #56]	; 0x38
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 800137c:	47a0      	blx	r4
 800137e:	bd10      	pop	{r4, pc}

08001380 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8001380:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 8001382:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8001384:	b083      	sub	sp, #12
 8001386:	4d08      	ldr	r5, [pc, #32]	; (80013a8 <Hw_Uart_Getch+0x28>)
 8001388:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 800138a:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 800138e:	4620      	mov	r0, r4
 8001390:	47a8      	blx	r5
 8001392:	2800      	cmp	r0, #0
 8001394:	d0fb      	beq.n	800138e <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 8001396:	4620      	mov	r0, r4
 8001398:	f10d 0107 	add.w	r1, sp, #7
 800139c:	4a03      	ldr	r2, [pc, #12]	; (80013ac <Hw_Uart_Getch+0x2c>)
 800139e:	4790      	blx	r2

	return Uart_GetData;
}
 80013a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80013a4:	b003      	add	sp, #12
 80013a6:	bd30      	pop	{r4, r5, pc}
 80013a8:	08001531 	.word	0x08001531
 80013ac:	080015d9 	.word	0x080015d9

080013b0 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 80013b0:	280a      	cmp	r0, #10
 80013b2:	d00d      	beq.n	80013d0 <print_byte+0x20>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80013b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80013b8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80013bc:	6813      	ldr	r3, [r2, #0]
 80013be:	0619      	lsls	r1, r3, #24
 80013c0:	d5fc      	bpl.n	80013bc <print_byte+0xc>
    
    REG_USART1_DR = Uart_PutData;
 80013c2:	f643 0104 	movw	r1, #14340	; 0x3804
 80013c6:	b2c0      	uxtb	r0, r0
 80013c8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80013cc:	6008      	str	r0, [r1, #0]
 80013ce:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80013d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80013d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80013d8:	6813      	ldr	r3, [r2, #0]
 80013da:	061b      	lsls	r3, r3, #24
 80013dc:	d5fc      	bpl.n	80013d8 <print_byte+0x28>
    
    REG_USART1_DR = Uart_PutData;
 80013de:	f643 0104 	movw	r1, #14340	; 0x3804
 80013e2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80013e6:	220d      	movs	r2, #13
 80013e8:	600a      	str	r2, [r1, #0]
 80013ea:	e7e3      	b.n	80013b4 <print_byte+0x4>

080013ec <get_byte>:
#endif    
}


char get_byte(void)
{
 80013ec:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 80013ee:	f241 3381 	movw	r3, #4993	; 0x1381
 80013f2:	2000      	movs	r0, #0
 80013f4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80013f8:	4798      	blx	r3
#endif
	
	return Ch;
}
 80013fa:	bd08      	pop	{r3, pc}

080013fc <get_byte_check>:


char get_byte_check(void)
{
 80013fc:	b508      	push	{r3, lr}
	char Ch = FALSE;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 ) Ch = TRUE;	
 80013fe:	f241 5331 	movw	r3, #5425	; 0x1531
 8001402:	2000      	movs	r0, #0
 8001404:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001408:	4798      	blx	r3
#endif
	
	return Ch;
}
 800140a:	3000      	adds	r0, #0
 800140c:	bf18      	it	ne
 800140e:	2001      	movne	r0, #1
 8001410:	bd08      	pop	{r3, pc}
 8001412:	bf00      	nop

08001414 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8001414:	f241 0304 	movw	r3, #4100	; 0x1004
 8001418:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800141c:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800141e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8001422:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 8001426:	f020 02f0 	bic.w	r2, r0, #240	; 0xf0
 800142a:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 800142c:	6818      	ldr	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800142e:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8001432:	f440 12e8 	orr.w	r2, r0, #1900544	; 0x1d0000
 8001436:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8001438:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800143a:	4608      	mov	r0, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800143c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001440:	600a      	str	r2, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8001442:	6801      	ldr	r1, [r0, #0]
 8001444:	018b      	lsls	r3, r1, #6
 8001446:	d5fc      	bpl.n	8001442 <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8001448:	f241 0304 	movw	r3, #4100	; 0x1004
 800144c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001450:	6818      	ldr	r0, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8001452:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8001454:	f020 0103 	bic.w	r1, r0, #3
 8001458:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	f040 0102 	orr.w	r1, r0, #2
 8001460:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 8001468:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 8001470:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 8001478:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 8001480:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	6018      	str	r0, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8001486:	6813      	ldr	r3, [r2, #0]
 8001488:	f003 010c 	and.w	r1, r3, #12
 800148c:	2908      	cmp	r1, #8
 800148e:	d1fa      	bne.n	8001486 <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 8001490:	f241 0018 	movw	r0, #4120	; 0x1018
 8001494:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001498:	6802      	ldr	r2, [r0, #0]
 800149a:	f442 4380 	orr.w	r3, r2, #16384	; 0x4000
 800149e:	f043 011d 	orr.w	r1, r3, #29
 80014a2:	6001      	str	r1, [r0, #0]
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80014a8:	2204      	movs	r2, #4
 80014aa:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80014ae:	6811      	ldr	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80014b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80014b4:	f021 60e0 	bic.w	r0, r1, #117440512	; 0x7000000
 80014b8:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 80014ba:	6811      	ldr	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80014bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
 80014c0:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 80014c4:	6010      	str	r0, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80014c6:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80014c8:	f640 420c 	movw	r2, #3084	; 0xc0c
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80014cc:	f421 4070 	bic.w	r0, r1, #61440	; 0xf000
 80014d0:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 80014d2:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80014d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 80014d8:	f441 5040 	orr.w	r0, r1, #12288	; 0x3000
 80014dc:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 80014de:	6819      	ldr	r1, [r3, #0]
 80014e0:	6019      	str	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	f043 0008 	orr.w	r0, r3, #8
 80014e8:	6010      	str	r0, [r2, #0]
 80014ea:	4770      	bx	lr

080014ec <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 80014ec:	b938      	cbnz	r0, 80014fe <Hw_Led_Toggle+0x12>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 80014ee:	f640 430c 	movw	r3, #3084	; 0xc0c
 80014f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	f082 0008 	eor.w	r0, r2, #8
 80014fc:	6018      	str	r0, [r3, #0]
 80014fe:	4770      	bx	lr

08001500 <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8001500:	f240 51f0 	movw	r1, #1520	; 0x5f0
 8001504:	f240 6200 	movw	r2, #1536	; 0x600
 8001508:	2300      	movs	r3, #0
 800150a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800150e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001512:	800b      	strh	r3, [r1, #0]
 8001514:	8013      	strh	r3, [r2, #0]
 8001516:	804b      	strh	r3, [r1, #2]
 8001518:	8053      	strh	r3, [r2, #2]
 800151a:	808b      	strh	r3, [r1, #4]
 800151c:	8093      	strh	r3, [r2, #4]
 800151e:	80cb      	strh	r3, [r1, #6]
 8001520:	80d3      	strh	r3, [r2, #6]
 8001522:	810b      	strh	r3, [r1, #8]
 8001524:	8113      	strh	r3, [r2, #8]
 8001526:	814b      	strh	r3, [r1, #10]
 8001528:	8153      	strh	r3, [r2, #10]
 800152a:	818b      	strh	r3, [r1, #12]
 800152c:	8193      	strh	r3, [r2, #12]
 800152e:	4770      	bx	lr

08001530 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HW_UART_Q_VAILD+0x28>)
 8001532:	490a      	ldr	r1, [pc, #40]	; (800155c <HW_UART_Q_VAILD+0x2c>)
 8001534:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8001538:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
 800153c:	201f      	movs	r0, #31
 800153e:	1ad2      	subs	r2, r2, r3
 8001540:	3220      	adds	r2, #32
 8001542:	f2c8 0000 	movt	r0, #32768	; 0x8000
 8001546:	4010      	ands	r0, r2
 8001548:	2800      	cmp	r0, #0
 800154a:	db00      	blt.n	800154e <HW_UART_Q_VAILD+0x1e>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 800154c:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800154e:	3801      	subs	r0, #1
 8001550:	f060 011f 	orn	r1, r0, #31
 8001554:	1c48      	adds	r0, r1, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8001556:	4770      	bx	lr
 8001558:	20000600 	.word	0x20000600
 800155c:	200005f0 	.word	0x200005f0

08001560 <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001560:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <Hw_Uart_Q_Push+0x6c>)
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <Hw_Uart_Q_Push+0x70>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8001564:	b4f0      	push	{r4, r5, r6, r7}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001566:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 800156a:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 800156e:	b22c      	sxth	r4, r5
 8001570:	231f      	movs	r3, #31
 8001572:	1ba6      	subs	r6, r4, r6
 8001574:	3620      	adds	r6, #32
 8001576:	f2c8 0300 	movt	r3, #32768	; 0x8000
 800157a:	4033      	ands	r3, r6
 800157c:	2b00      	cmp	r3, #0
 800157e:	db18      	blt.n	80015b2 <Hw_Uart_Q_Push+0x52>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8001580:	2b1f      	cmp	r3, #31
 8001582:	d01c      	beq.n	80015be <Hw_Uart_Q_Push+0x5e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8001584:	3501      	adds	r5, #1
 8001586:	b2ad      	uxth	r5, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8001588:	231f      	movs	r3, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800158a:	780e      	ldrb	r6, [r1, #0]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800158c:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8001590:	b229      	sxth	r1, r5
 8001592:	400b      	ands	r3, r1
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8001594:	eb00 1740 	add.w	r7, r0, r0, lsl #5
 8001598:	490e      	ldr	r1, [pc, #56]	; (80015d4 <Hw_Uart_Q_Push+0x74>)
 800159a:	193c      	adds	r4, r7, r4
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800159c:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800159e:	550e      	strb	r6, [r1, r4]
 80015a0:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80015a4:	db0d      	blt.n	80015c2 <Hw_Uart_Q_Push+0x62>
 80015a6:	4909      	ldr	r1, [pc, #36]	; (80015cc <Hw_Uart_Q_Push+0x6c>)
 80015a8:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

	return TRUE;
 80015ac:	2001      	movs	r0, #1
}
 80015ae:	bcf0      	pop	{r4, r5, r6, r7}
 80015b0:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f063 031f 	orn	r3, r3, #31
 80015b8:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 80015ba:	2b1f      	cmp	r3, #31
 80015bc:	d1e2      	bne.n	8001584 <Hw_Uart_Q_Push+0x24>
 80015be:	2000      	movs	r0, #0
 80015c0:	e7f5      	b.n	80015ae <Hw_Uart_Q_Push+0x4e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	f062 031f 	orn	r3, r2, #31
 80015c8:	3301      	adds	r3, #1
 80015ca:	e7ec      	b.n	80015a6 <Hw_Uart_Q_Push+0x46>
 80015cc:	20000600 	.word	0x20000600
 80015d0:	200005f0 	.word	0x200005f0
 80015d4:	200004f8 	.word	0x200004f8

080015d8 <Hw_Uart_Q_Pop>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80015d8:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <Hw_Uart_Q_Pop+0x6c>)
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <Hw_Uart_Q_Pop+0x70>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 80015dc:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80015de:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 80015e2:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 80015e6:	b22c      	sxth	r4, r5
 80015e8:	231f      	movs	r3, #31
 80015ea:	1b36      	subs	r6, r6, r4
 80015ec:	3620      	adds	r6, #32
 80015ee:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80015f2:	4033      	ands	r3, r6
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db17      	blt.n	8001628 <Hw_Uart_Q_Pop+0x50>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 80015f8:	b1e3      	cbz	r3, 8001634 <Hw_Uart_Q_Pop+0x5c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80015fa:	eb00 1640 	add.w	r6, r0, r0, lsl #5
 80015fe:	3501      	adds	r5, #1
 8001600:	1934      	adds	r4, r6, r4
 8001602:	4e12      	ldr	r6, [pc, #72]	; (800164c <Hw_Uart_Q_Pop+0x74>)
 8001604:	b2ad      	uxth	r5, r5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8001606:	231f      	movs	r3, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8001608:	5d34      	ldrb	r4, [r6, r4]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800160a:	f2c8 0300 	movt	r3, #32768	; 0x8000
 800160e:	b22e      	sxth	r6, r5
 8001610:	4033      	ands	r3, r6
 8001612:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8001614:	700c      	strb	r4, [r1, #0]
 8001616:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800161a:	db0d      	blt.n	8001638 <Hw_Uart_Q_Pop+0x60>
 800161c:	4909      	ldr	r1, [pc, #36]	; (8001644 <Hw_Uart_Q_Pop+0x6c>)
 800161e:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

    return TRUE;
 8001622:	2001      	movs	r0, #1
}
 8001624:	bc70      	pop	{r4, r5, r6}
 8001626:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001628:	3b01      	subs	r3, #1
 800162a:	f063 031f 	orn	r3, r3, #31
 800162e:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e2      	bne.n	80015fa <Hw_Uart_Q_Pop+0x22>
 8001634:	4618      	mov	r0, r3
 8001636:	e7f5      	b.n	8001624 <Hw_Uart_Q_Pop+0x4c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	f061 021f 	orn	r2, r1, #31
 800163e:	1c53      	adds	r3, r2, #1
 8001640:	e7ec      	b.n	800161c <Hw_Uart_Q_Pop+0x44>
 8001642:	bf00      	nop
 8001644:	200005f0 	.word	0x200005f0
 8001648:	20000600 	.word	0x20000600
 800164c:	200004f8 	.word	0x200004f8

08001650 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8001650:	f640 0300 	movw	r3, #2048	; 0x800
 8001654:	f64e 5208 	movw	r2, #60680	; 0xed08
 8001658:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800165c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4770      	bx	lr

08001664 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8001664:	f640 0300 	movw	r3, #2048	; 0x800
 8001668:	3010      	adds	r0, #16
 800166a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800166e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8001672:	4770      	bx	lr

08001674 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8001674:	f640 0300 	movw	r3, #2048	; 0x800
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8001678:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 800167a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800167e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8001682:	4770      	bx	lr

08001684 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 8001684:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8001686:	f641 01f9 	movw	r1, #6393	; 0x18f9
 800168a:	f241 6375 	movw	r3, #5749	; 0x1675
 800168e:	203c      	movs	r0, #60	; 0x3c
 8001690:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001694:	2200      	movs	r2, #0
 8001696:	f6c0 0300 	movt	r3, #2048	; 0x800
 800169a:	4798      	blx	r3
 800169c:	bd08      	pop	{r3, pc}
 800169e:	bf00      	nop

080016a0 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 80016a0:	b538      	push	{r3, r4, r5, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 80016a2:	4d28      	ldr	r5, [pc, #160]	; (8001744 <Hw_Timer_Init+0xa4>)
 80016a4:	782b      	ldrb	r3, [r5, #0]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d04a      	beq.n	8001740 <Hw_Timer_Init+0xa0>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80016aa:	4827      	ldr	r0, [pc, #156]	; (8001748 <Hw_Timer_Init+0xa8>)
 80016ac:	2400      	movs	r4, #0
 80016ae:	7004      	strb	r4, [r0, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80016b0:	8044      	strh	r4, [r0, #2]
		Timer_Tbl[i].Timer_Init = 0;
 80016b2:	8084      	strh	r4, [r0, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 80016b4:	6084      	str	r4, [r0, #8]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80016b6:	7404      	strb	r4, [r0, #16]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80016b8:	8244      	strh	r4, [r0, #18]
		Timer_Tbl[i].Timer_Init = 0;
 80016ba:	8284      	strh	r4, [r0, #20]
		Timer_Tbl[i].TmrFnct    = NULL;
 80016bc:	6184      	str	r4, [r0, #24]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80016be:	f880 4020 	strb.w	r4, [r0, #32]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80016c2:	8444      	strh	r4, [r0, #34]	; 0x22
		Timer_Tbl[i].Timer_Init = 0;
 80016c4:	8484      	strh	r4, [r0, #36]	; 0x24
		Timer_Tbl[i].TmrFnct    = NULL;
 80016c6:	6284      	str	r4, [r0, #40]	; 0x28
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80016c8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
		Timer_Tbl[i].Timer_Ctn  = 0;
 80016cc:	8644      	strh	r4, [r0, #50]	; 0x32
		Timer_Tbl[i].Timer_Init = 0;
 80016ce:	8684      	strh	r4, [r0, #52]	; 0x34
		Timer_Tbl[i].TmrFnct    = NULL;
 80016d0:	6384      	str	r4, [r0, #56]	; 0x38
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80016d2:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
		Timer_Tbl[i].Timer_Ctn  = 0;
 80016d6:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
		Timer_Tbl[i].Timer_Init = 0;
 80016da:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
		Timer_Tbl[i].TmrFnct    = NULL;
 80016de:	6484      	str	r4, [r0, #72]	; 0x48
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80016e0:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
		Timer_Tbl[i].Timer_Ctn  = 0;
 80016e4:	f8a0 4052 	strh.w	r4, [r0, #82]	; 0x52
		Timer_Tbl[i].Timer_Init = 0;
 80016e8:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
		Timer_Tbl[i].TmrFnct    = NULL;
 80016ec:	6584      	str	r4, [r0, #88]	; 0x58
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80016ee:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
		Timer_Tbl[i].Timer_Ctn  = 0;
 80016f2:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
		Timer_Tbl[i].Timer_Init = 0;
 80016f6:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		Timer_Tbl[i].TmrFnct    = NULL;
 80016fa:	6684      	str	r4, [r0, #104]	; 0x68
	}	                   
	
	
	Hw_Timer_SetupISR();
 80016fc:	4913      	ldr	r1, [pc, #76]	; (800174c <Hw_Timer_Init+0xac>)
 80016fe:	4788      	blx	r1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8001700:	f24e 0114 	movw	r1, #57364	; 0xe014
 8001704:	f641 103f 	movw	r0, #6463	; 0x193f
	
	REG_STK_VAL  = 0;	
 8001708:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800170c:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8001710:	f2c0 0001 	movt	r0, #1
	
	REG_STK_VAL  = 0;	
 8001714:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8001718:	f24e 0310 	movw	r3, #57360	; 0xe010
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800171c:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800171e:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8001722:	6014      	str	r4, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8001724:	6819      	ldr	r1, [r3, #0]
 8001726:	f041 0004 	orr.w	r0, r1, #4
 800172a:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	f042 0102 	orr.w	r1, r2, #2
 8001732:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	f040 0201 	orr.w	r2, r0, #1
 800173a:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 800173c:	2301      	movs	r3, #1
 800173e:	702b      	strb	r3, [r5, #0]
 8001740:	bd38      	pop	{r3, r4, r5, pc}
 8001742:	bf00      	nop
 8001744:	2000047e 	.word	0x2000047e
 8001748:	20000408 	.word	0x20000408
 800174c:	08001685 	.word	0x08001685

08001750 <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8001750:	4b66      	ldr	r3, [pc, #408]	; (80018ec <Hw_Timer_Tick+0x19c>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 8001752:	4a67      	ldr	r2, [pc, #412]	; (80018f0 <Hw_Timer_Tick+0x1a0>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8001754:	6819      	ldr	r1, [r3, #0]
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8001756:	b510      	push	{r4, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8001758:	1c48      	adds	r0, r1, #1
 800175a:	6018      	str	r0, [r3, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 800175c:	8814      	ldrh	r4, [r2, #0]
 800175e:	b2a3      	uxth	r3, r4
 8001760:	b11b      	cbz	r3, 800176a <Hw_Timer_Tick+0x1a>
 8001762:	8811      	ldrh	r1, [r2, #0]
 8001764:	1e48      	subs	r0, r1, #1
 8001766:	b284      	uxth	r4, r0
 8001768:	8014      	strh	r4, [r2, #0]
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 800176a:	4c62      	ldr	r4, [pc, #392]	; (80018f4 <Hw_Timer_Tick+0x1a4>)
 800176c:	7822      	ldrb	r2, [r4, #0]
 800176e:	2a01      	cmp	r2, #1
 8001770:	d01d      	beq.n	80017ae <Hw_Timer_Tick+0x5e>
 8001772:	7c20      	ldrb	r0, [r4, #16]
 8001774:	4a5f      	ldr	r2, [pc, #380]	; (80018f4 <Hw_Timer_Tick+0x1a4>)
 8001776:	2801      	cmp	r0, #1
 8001778:	d02b      	beq.n	80017d2 <Hw_Timer_Tick+0x82>
 800177a:	f894 0020 	ldrb.w	r0, [r4, #32]
 800177e:	4a5d      	ldr	r2, [pc, #372]	; (80018f4 <Hw_Timer_Tick+0x1a4>)
 8001780:	2801      	cmp	r0, #1
 8001782:	d038      	beq.n	80017f6 <Hw_Timer_Tick+0xa6>
 8001784:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8001788:	4a5a      	ldr	r2, [pc, #360]	; (80018f4 <Hw_Timer_Tick+0x1a4>)
 800178a:	2801      	cmp	r0, #1
 800178c:	d046      	beq.n	800181c <Hw_Timer_Tick+0xcc>
 800178e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8001792:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <Hw_Timer_Tick+0x1a4>)
 8001794:	2801      	cmp	r0, #1
 8001796:	d054      	beq.n	8001842 <Hw_Timer_Tick+0xf2>
 8001798:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 800179c:	4a55      	ldr	r2, [pc, #340]	; (80018f4 <Hw_Timer_Tick+0x1a4>)
 800179e:	2801      	cmp	r0, #1
 80017a0:	d066      	beq.n	8001870 <Hw_Timer_Tick+0x120>
 80017a2:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 80017a6:	4a53      	ldr	r2, [pc, #332]	; (80018f4 <Hw_Timer_Tick+0x1a4>)
 80017a8:	2801      	cmp	r0, #1
 80017aa:	d078      	beq.n	800189e <Hw_Timer_Tick+0x14e>
 80017ac:	bd10      	pop	{r4, pc}
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80017ae:	8863      	ldrh	r3, [r4, #2]
 80017b0:	1e59      	subs	r1, r3, #1
 80017b2:	b288      	uxth	r0, r1
 80017b4:	8060      	strh	r0, [r4, #2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80017b6:	2800      	cmp	r0, #0
 80017b8:	d1db      	bne.n	8001772 <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80017ba:	7862      	ldrb	r2, [r4, #1]
 80017bc:	2a01      	cmp	r2, #1
 80017be:	f000 8086 	beq.w	80018ce <Hw_Timer_Tick+0x17e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80017c2:	88a1      	ldrh	r1, [r4, #4]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80017c4:	68a3      	ldr	r3, [r4, #8]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80017c6:	8061      	strh	r1, [r4, #2]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80017c8:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80017ca:	7c20      	ldrb	r0, [r4, #16]
 80017cc:	4a49      	ldr	r2, [pc, #292]	; (80018f4 <Hw_Timer_Tick+0x1a4>)
 80017ce:	2801      	cmp	r0, #1
 80017d0:	d1d3      	bne.n	800177a <Hw_Timer_Tick+0x2a>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80017d2:	8a51      	ldrh	r1, [r2, #18]
 80017d4:	1e4b      	subs	r3, r1, #1
 80017d6:	b298      	uxth	r0, r3
 80017d8:	8250      	strh	r0, [r2, #18]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80017da:	2800      	cmp	r0, #0
 80017dc:	d1cd      	bne.n	800177a <Hw_Timer_Tick+0x2a>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80017de:	7c51      	ldrb	r1, [r2, #17]
 80017e0:	2901      	cmp	r1, #1
 80017e2:	d072      	beq.n	80018ca <Hw_Timer_Tick+0x17a>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80017e4:	8aa2      	ldrh	r2, [r4, #20]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80017e6:	69a3      	ldr	r3, [r4, #24]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80017e8:	8262      	strh	r2, [r4, #18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80017ea:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80017ec:	f894 0020 	ldrb.w	r0, [r4, #32]
 80017f0:	4a40      	ldr	r2, [pc, #256]	; (80018f4 <Hw_Timer_Tick+0x1a4>)
 80017f2:	2801      	cmp	r0, #1
 80017f4:	d1c6      	bne.n	8001784 <Hw_Timer_Tick+0x34>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80017f6:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 80017f8:	1e4b      	subs	r3, r1, #1
 80017fa:	b298      	uxth	r0, r3
 80017fc:	8450      	strh	r0, [r2, #34]	; 0x22

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80017fe:	2800      	cmp	r0, #0
 8001800:	d1c0      	bne.n	8001784 <Hw_Timer_Tick+0x34>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001802:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8001806:	2901      	cmp	r1, #1
 8001808:	d06c      	beq.n	80018e4 <Hw_Timer_Tick+0x194>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800180a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800180c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800180e:	8462      	strh	r2, [r4, #34]	; 0x22

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001810:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001812:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8001816:	4a37      	ldr	r2, [pc, #220]	; (80018f4 <Hw_Timer_Tick+0x1a4>)
 8001818:	2801      	cmp	r0, #1
 800181a:	d1b8      	bne.n	800178e <Hw_Timer_Tick+0x3e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800181c:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 800181e:	1e4b      	subs	r3, r1, #1
 8001820:	b298      	uxth	r0, r3
 8001822:	8650      	strh	r0, [r2, #50]	; 0x32

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001824:	2800      	cmp	r0, #0
 8001826:	d1b2      	bne.n	800178e <Hw_Timer_Tick+0x3e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001828:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800182c:	2901      	cmp	r1, #1
 800182e:	d056      	beq.n	80018de <Hw_Timer_Tick+0x18e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001830:	8ea2      	ldrh	r2, [r4, #52]	; 0x34

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001832:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001834:	8662      	strh	r2, [r4, #50]	; 0x32

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001836:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001838:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800183c:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <Hw_Timer_Tick+0x1a4>)
 800183e:	2801      	cmp	r0, #1
 8001840:	d1aa      	bne.n	8001798 <Hw_Timer_Tick+0x48>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001842:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
 8001846:	1e4b      	subs	r3, r1, #1
 8001848:	b298      	uxth	r0, r3
 800184a:	f8a2 0042 	strh.w	r0, [r2, #66]	; 0x42

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800184e:	2800      	cmp	r0, #0
 8001850:	d1a2      	bne.n	8001798 <Hw_Timer_Tick+0x48>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001852:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
 8001856:	2901      	cmp	r1, #1
 8001858:	d03e      	beq.n	80018d8 <Hw_Timer_Tick+0x188>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800185a:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800185e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001860:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001864:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001866:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 800186a:	4a22      	ldr	r2, [pc, #136]	; (80018f4 <Hw_Timer_Tick+0x1a4>)
 800186c:	2801      	cmp	r0, #1
 800186e:	d198      	bne.n	80017a2 <Hw_Timer_Tick+0x52>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001870:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
 8001874:	1e4b      	subs	r3, r1, #1
 8001876:	b298      	uxth	r0, r3
 8001878:	f8a2 0052 	strh.w	r0, [r2, #82]	; 0x52

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800187c:	2800      	cmp	r0, #0
 800187e:	d190      	bne.n	80017a2 <Hw_Timer_Tick+0x52>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001880:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
 8001884:	2901      	cmp	r1, #1
 8001886:	d024      	beq.n	80018d2 <Hw_Timer_Tick+0x182>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001888:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800188c:	6da3      	ldr	r3, [r4, #88]	; 0x58
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800188e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001892:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001894:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8001898:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <Hw_Timer_Tick+0x1a4>)
 800189a:	2801      	cmp	r0, #1
 800189c:	d186      	bne.n	80017ac <Hw_Timer_Tick+0x5c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800189e:	f8b2 1062 	ldrh.w	r1, [r2, #98]	; 0x62
 80018a2:	1e4b      	subs	r3, r1, #1
 80018a4:	b298      	uxth	r0, r3
 80018a6:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80018aa:	2800      	cmp	r0, #0
 80018ac:	f47f af7e 	bne.w	80017ac <Hw_Timer_Tick+0x5c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80018b0:	f892 1061 	ldrb.w	r1, [r2, #97]	; 0x61

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80018b4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80018b6:	2901      	cmp	r1, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 80018b8:	bf08      	it	eq
 80018ba:	f882 0060 	strbeq.w	r0, [r2, #96]	; 0x60

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80018be:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80018c2:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80018c6:	4798      	blx	r3
 80018c8:	bd10      	pop	{r4, pc}

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 80018ca:	7410      	strb	r0, [r2, #16]
 80018cc:	e78a      	b.n	80017e4 <Hw_Timer_Tick+0x94>
 80018ce:	7020      	strb	r0, [r4, #0]
 80018d0:	e777      	b.n	80017c2 <Hw_Timer_Tick+0x72>
 80018d2:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 80018d6:	e7d7      	b.n	8001888 <Hw_Timer_Tick+0x138>
 80018d8:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
 80018dc:	e7bd      	b.n	800185a <Hw_Timer_Tick+0x10a>
 80018de:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
 80018e2:	e7a5      	b.n	8001830 <Hw_Timer_Tick+0xe0>
 80018e4:	f882 0020 	strb.w	r0, [r2, #32]
 80018e8:	e78f      	b.n	800180a <Hw_Timer_Tick+0xba>
 80018ea:	bf00      	nop
 80018ec:	20000478 	.word	0x20000478
 80018f0:	2000047c 	.word	0x2000047c
 80018f4:	20000408 	.word	0x20000408

080018f8 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 80018f8:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 80018fa:	f241 7351 	movw	r3, #5969	; 0x1751
 80018fe:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001902:	4798      	blx	r3
 8001904:	bd08      	pop	{r3, pc}
 8001906:	bf00      	nop

08001908 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8001908:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 800190a:	f240 4408 	movw	r4, #1032	; 0x408
 800190e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001912:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8001916:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8001918:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 800191a:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 800191c:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 800191e:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 8001920:	8081      	strh	r1, [r0, #4]
}
 8001922:	bc10      	pop	{r4}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop

08001928 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8001928:	2806      	cmp	r0, #6
 800192a:	d803      	bhi.n	8001934 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 800192c:	4b02      	ldr	r3, [pc, #8]	; (8001938 <Hw_Timer_Start+0x10>)
 800192e:	0100      	lsls	r0, r0, #4
 8001930:	2201      	movs	r2, #1
 8001932:	541a      	strb	r2, [r3, r0]
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000408 	.word	0x20000408

0800193c <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 800193c:	4a03      	ldr	r2, [pc, #12]	; (800194c <Hw_Timer_Delay_ms+0x10>)
 800193e:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 8001940:	8813      	ldrh	r3, [r2, #0]
 8001942:	b298      	uxth	r0, r3
 8001944:	2800      	cmp	r0, #0
 8001946:	d1fb      	bne.n	8001940 <Hw_Timer_Delay_ms+0x4>
}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	2000047c 	.word	0x2000047c

08001950 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8001950:	b508      	push	{r3, lr}
	Set_System();
 8001952:	f243 3389 	movw	r3, #13193	; 0x3389
 8001956:	f6c0 0300 	movt	r3, #2048	; 0x800
 800195a:	4798      	blx	r3
	Set_USBClock();
 800195c:	f243 30a9 	movw	r0, #13225	; 0x33a9
 8001960:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001964:	4780      	blx	r0
	USB_Interrupts_Config();
 8001966:	f243 31ed 	movw	r1, #13293	; 0x33ed
 800196a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800196e:	4788      	blx	r1
	USB_Init();	
 8001970:	f643 72d5 	movw	r2, #16341	; 0x3fd5
 8001974:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001978:	4790      	blx	r2
 800197a:	bd08      	pop	{r3, pc}

0800197c <Hw_I2C_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_Init( void )
{
 800197c:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	#if HW_I2C_USE_SW_I2C == 1
	Hw_I2C_SW_Init();	
	#else
	Hw_I2C_HW_Init();		
 800197e:	f641 13d5 	movw	r3, #6613	; 0x19d5
 8001982:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001986:	4798      	blx	r3
 8001988:	bd08      	pop	{r3, pc}
 800198a:	bf00      	nop

0800198c <Hw_I2C_HW_IO_Setup>:
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 800198c:	2204      	movs	r2, #4
 800198e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001992:	6811      	ldr	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8001994:	f640 4304 	movw	r3, #3076	; 0xc04
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8001998:	f041 0002 	orr.w	r0, r1, #2
 800199c:	6010      	str	r0, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 800199e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f022 010f 	bic.w	r1, r2, #15
 80019a8:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	f040 0203 	orr.w	r2, r0, #3
 80019b0:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 80019b2:	6819      	ldr	r1, [r3, #0]
 80019b4:	f041 000c 	orr.w	r0, r1, #12
 80019b8:	6018      	str	r0, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 80019c0:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	f040 0230 	orr.w	r2, r0, #48	; 0x30
 80019c8:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 80019ca:	6819      	ldr	r1, [r3, #0]
 80019cc:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 80019d0:	6018      	str	r0, [r3, #0]
 80019d2:	4770      	bx	lr

080019d4 <Hw_I2C_HW_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_HW_Init( void )
{
 80019d4:	b538      	push	{r3, r4, r5, lr}
	u32 SR;


	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	
 80019d6:	f641 138d 	movw	r3, #6541	; 0x198d
 80019da:	f6c0 0300 	movt	r3, #2048	; 0x800
 80019de:	4798      	blx	r3


	REG_I2C1_CR1 = 0;
 80019e0:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80019e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80019e8:	2500      	movs	r5, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 80019ea:	f245 4404 	movw	r4, #21508	; 0x5404
	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	


	REG_I2C1_CR1 = 0;
 80019ee:	601d      	str	r5, [r3, #0]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 80019f0:	f2c4 0400 	movt	r4, #16384	; 0x4000
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 80019f4:	f245 401c 	movw	r0, #21532	; 0x541c

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 80019f8:	2524      	movs	r5, #36	; 0x24
 80019fa:	6025      	str	r5, [r4, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 80019fc:	f2c4 0000 	movt	r0, #16384	; 0x4000
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8001a00:	f245 4120 	movw	r1, #21536	; 0x5420
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8001a04:	f248 041e 	movw	r4, #32798	; 0x801e
 8001a08:	6004      	str	r4, [r0, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8001a0a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8001a0e:	2004      	movs	r0, #4


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8001a10:	f241 021c 	movw	r2, #4124	; 0x101c
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8001a14:	6008      	str	r0, [r1, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8001a16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a1a:	6810      	ldr	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8001a1c:	f245 4114 	movw	r1, #21524	; 0x5414
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8001a20:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8001a24:	6010      	str	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8001a26:	6818      	ldr	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8001a28:	f245 4218 	movw	r2, #21528	; 0x5418
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8001a2c:	f020 0002 	bic.w	r0, r0, #2
 8001a30:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8001a32:	6818      	ldr	r0, [r3, #0]

	SR = REG_I2C1_SR1;
 8001a34:	f2c4 0100 	movt	r1, #16384	; 0x4000
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8001a38:	f040 0001 	orr.w	r0, r0, #1
 8001a3c:	6018      	str	r0, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8001a3e:	f2c4 0200 	movt	r2, #16384	; 0x4000


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8001a42:	680b      	ldr	r3, [r1, #0]
	SR = REG_I2C1_SR2;
 8001a44:	6813      	ldr	r3, [r2, #0]
 8001a46:	bd38      	pop	{r3, r4, r5, pc}

08001a48 <Hw_Si47xx_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
 8001a48:	b538      	push	{r3, r4, r5, lr}
	Hw_Wait(100);
 8001a4a:	f241 2551 	movw	r5, #4689	; 0x1251
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8001a4e:	f640 440c 	movw	r4, #3084	; 0xc0c
 8001a52:	f2c4 0401 	movt	r4, #16385	; 0x4001
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
 8001a56:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001a5a:	2064      	movs	r0, #100	; 0x64
 8001a5c:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8001a5e:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(100);
 8001a60:	2064      	movs	r0, #100	; 0x64
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8001a62:	f043 0120 	orr.w	r1, r3, #32
 8001a66:	6021      	str	r1, [r4, #0]
	Hw_Wait(100);
 8001a68:	47a8      	blx	r5
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8001a6a:	6822      	ldr	r2, [r4, #0]
	Hw_Wait(500);	
 8001a6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8001a70:	f022 0320 	bic.w	r3, r2, #32
 8001a74:	6023      	str	r3, [r4, #0]
	Hw_Wait(500);	
 8001a76:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8001a78:	6821      	ldr	r1, [r4, #0]
	Hw_Wait(100);
 8001a7a:	2064      	movs	r0, #100	; 0x64
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
	Hw_Wait(500);	
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8001a7c:	f041 0220 	orr.w	r2, r1, #32
 8001a80:	6022      	str	r2, [r4, #0]
	Hw_Wait(100);
 8001a82:	47a8      	blx	r5
 8001a84:	bd38      	pop	{r3, r4, r5, pc}
 8001a86:	bf00      	nop

08001a88 <Hw_Si47xx_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Init( void )
{
 8001a88:	b508      	push	{r3, lr}
	Hw_I2C_Init();
 8001a8a:	f641 137d 	movw	r3, #6525	; 0x197d
 8001a8e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a92:	4798      	blx	r3

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 8001a94:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001a98:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001a9c:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 8001a9e:	f641 2249 	movw	r2, #6729	; 0x1a49

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 8001aa2:	f421 0370 	bic.w	r3, r1, #15728640	; 0xf00000
 8001aa6:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8001aa8:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 8001aaa:	f6c0 0200 	movt	r2, #2048	; 0x800
	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8001aae:	f441 1340 	orr.w	r3, r1, #3145728	; 0x300000
 8001ab2:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 8001ab4:	6801      	ldr	r1, [r0, #0]
 8001ab6:	6001      	str	r1, [r0, #0]
	

	Hw_Si47xx_Reset();
 8001ab8:	4790      	blx	r2
 8001aba:	bd08      	pop	{r3, pc}

08001abc <Hw_SPI_Ch2_Init>:

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8001abc:	f640 4304 	movw	r3, #3076	; 0xc04
 8001ac0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001ac4:	6819      	ldr	r1, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001ac6:	f44f 5260 	mov.w	r2, #14336	; 0x3800

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8001aca:	f421 2070 	bic.w	r0, r1, #983040	; 0xf0000
 8001ace:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 8001ad0:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8001ad2:	f643 0104 	movw	r1, #14340	; 0x3804
	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 8001ad6:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8001ada:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 8001adc:	6818      	ldr	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001ade:	f2c4 0200 	movt	r2, #16384	; 0x4000
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 8001ae2:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8001ae6:	6018      	str	r0, [r3, #0]
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8001ae8:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8001aea:	f2c4 0100 	movt	r1, #16384	; 0x4000
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8001aee:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 8001af2:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (20));	// MODE   - Output mode, max speed 50Mhz
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 8001afa:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (22));	// CNF    - Alternate function output Push-pull
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001b02:	6018      	str	r0, [r3, #0]

	// PB15 - SPI2_MOSI
	REG_GPIOB_CRH &= ~(0x0F << (28));	// Clear
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8001b0a:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (28));	// MODE   - Output mode, max speed 50Mhz
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
 8001b12:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (30));	// CNF    - Alternate function output Push-pull
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001b1a:	6018      	str	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001b1c:	f244 031c 	movw	r3, #16412	; 0x401c
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8001b20:	2004      	movs	r0, #4



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001b22:	6013      	str	r3, [r2, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8001b24:	6008      	str	r0, [r1, #0]
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR1, 6 );
 8001b26:	6811      	ldr	r1, [r2, #0]
 8001b28:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4770      	bx	lr

08001b30 <Hw_SPI_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Init(void)
{
 8001b30:	b510      	push	{r4, lr}
	static u8 Called = 0;


	if( Called == 1 ) return;
 8001b32:	4c08      	ldr	r4, [pc, #32]	; (8001b54 <Hw_SPI_Init+0x24>)
 8001b34:	7823      	ldrb	r3, [r4, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d00b      	beq.n	8001b52 <Hw_SPI_Init+0x22>


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 8001b3a:	f241 001c 	movw	r0, #4124	; 0x101c
 8001b3e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001b42:	6802      	ldr	r2, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <Hw_SPI_Init+0x28>)
	if( Called == 1 ) return;


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 8001b46:	f442 4180 	orr.w	r1, r2, #16384	; 0x4000
 8001b4a:	6001      	str	r1, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 8001b4c:	4798      	blx	r3

	Called = 1;	
 8001b4e:	2001      	movs	r0, #1
 8001b50:	7020      	strb	r0, [r4, #0]
 8001b52:	bd10      	pop	{r4, pc}
 8001b54:	2000047f 	.word	0x2000047f
 8001b58:	08001abd 	.word	0x08001abd

08001b5c <Hw_SPI_StartDMA>:
              
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_StartDMA( u8 Ch )
{
	switch( Ch )
 8001b5c:	2801      	cmp	r0, #1
 8001b5e:	d10b      	bne.n	8001b78 <Hw_SPI_StartDMA+0x1c>
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR2, 1 );	// TX DMA Enable
 8001b60:	f643 0304 	movw	r3, #14340	; 0x3804
 8001b64:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	f042 0002 	orr.w	r0, r2, #2
 8001b6e:	6018      	str	r0, [r3, #0]
			SET_BIT( REG_SPI2_CR2, 0 );	// RX DMA Enable
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	f041 0201 	orr.w	r2, r1, #1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop

08001b7c <Hw_SPI_Write8Bit>:
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8001b7c:	2801      	cmp	r0, #1
 8001b7e:	d001      	beq.n	8001b84 <Hw_SPI_Write8Bit+0x8>
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8001b80:	2000      	movs	r0, #0
}
 8001b82:	4770      	bx	lr
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8001b84:	f643 0208 	movw	r2, #14344	; 0x3808
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8001b88:	f242 730f 	movw	r3, #9999	; 0x270f
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8001b8c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001b90:	e006      	b.n	8001ba0 <Hw_SPI_Write8Bit+0x24>
 8001b92:	6810      	ldr	r0, [r2, #0]
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 8001b94:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8001b96:	0780      	lsls	r0, r0, #30
 8001b98:	d405      	bmi.n	8001ba6 <Hw_SPI_Write8Bit+0x2a>
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 8001b9a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8001b9e:	d305      	bcc.n	8001bac <Hw_SPI_Write8Bit+0x30>
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8001ba0:	6810      	ldr	r0, [r2, #0]
 8001ba2:	0780      	lsls	r0, r0, #30
 8001ba4:	d5f5      	bpl.n	8001b92 <Hw_SPI_Write8Bit+0x16>
			}
			if( TimeOut == 0 ) return 1;
 8001ba6:	b90b      	cbnz	r3, 8001bac <Hw_SPI_Write8Bit+0x30>
 8001ba8:	2001      	movs	r0, #1
 8001baa:	4770      	bx	lr
			REG_SPI2_DR = WriteData;
 8001bac:	f643 000c 	movw	r0, #14348	; 0x380c
 8001bb0:	f2c4 0000 	movt	r0, #16384	; 0x4000

			
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8001bb4:	f643 0208 	movw	r2, #14344	; 0x3808
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
			}
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;
 8001bb8:	6001      	str	r1, [r0, #0]

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8001bba:	f242 730f 	movw	r3, #9999	; 0x270f
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8001bbe:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001bc2:	e006      	b.n	8001bd2 <Hw_SPI_Write8Bit+0x56>
 8001bc4:	6810      	ldr	r0, [r2, #0]
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8001bc6:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8001bc8:	07c1      	lsls	r1, r0, #31
 8001bca:	d405      	bmi.n	8001bd8 <Hw_SPI_Write8Bit+0x5c>
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8001bcc:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8001bd0:	d304      	bcc.n	8001bdc <Hw_SPI_Write8Bit+0x60>
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8001bd2:	6811      	ldr	r1, [r2, #0]
 8001bd4:	07c8      	lsls	r0, r1, #31
 8001bd6:	d5f5      	bpl.n	8001bc4 <Hw_SPI_Write8Bit+0x48>
			}
			if( TimeOut == 0 ) return 1;
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0e5      	beq.n	8001ba8 <Hw_SPI_Write8Bit+0x2c>
		
			ReadData = REG_SPI2_DR;
 8001bdc:	f643 020c 	movw	r2, #14348	; 0x380c
 8001be0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001be4:	6813      	ldr	r3, [r2, #0]
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8001be6:	2000      	movs	r0, #0
			}
			if( TimeOut == 0 ) return 1;
		
			ReadData = REG_SPI2_DR;
			
			break;
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop

08001bec <Hw_N5100G_FrameTick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5100G_FrameTick( void )
{
 8001bec:	b508      	push	{r3, lr}
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <Hw_N5100G_FrameTick+0x38>)
 8001bf0:	4798      	blx	r3
 8001bf2:	2801      	cmp	r0, #1
 8001bf4:	d00d      	beq.n	8001c12 <Hw_N5100G_FrameTick+0x26>
 8001bf6:	480c      	ldr	r0, [pc, #48]	; (8001c28 <Hw_N5100G_FrameTick+0x3c>)
 8001bf8:	6803      	ldr	r3, [r0, #0]
		{
			Hw_N5110G_Frame_DrawReq--;
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 8001bfa:	b903      	cbnz	r3, 8001bfe <Hw_N5100G_FrameTick+0x12>
 8001bfc:	bd08      	pop	{r3, pc}
	{
		Hw_DMA_SPI2_Setup( (u32)Hw_N5110G_TxFrameBuf, (u32)Hw_N5110G_RxFrameBuf, HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT );				
 8001bfe:	480b      	ldr	r0, [pc, #44]	; (8001c2c <Hw_N5100G_FrameTick+0x40>)
 8001c00:	490b      	ldr	r1, [pc, #44]	; (8001c30 <Hw_N5100G_FrameTick+0x44>)
 8001c02:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <Hw_N5100G_FrameTick+0x48>)
 8001c08:	4798      	blx	r3
		Hw_SPI_StartDMA( HW_SPI_CH2 );			
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <Hw_N5100G_FrameTick+0x4c>)
 8001c0e:	4790      	blx	r2
 8001c10:	bd08      	pop	{r3, pc}
{
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
	{
		if( Hw_N5110G_Frame_DrawReq > 0 )
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <Hw_N5100G_FrameTick+0x3c>)
 8001c14:	6811      	ldr	r1, [r2, #0]
 8001c16:	2900      	cmp	r1, #0
 8001c18:	d0f0      	beq.n	8001bfc <Hw_N5100G_FrameTick+0x10>
		{
			Hw_N5110G_Frame_DrawReq--;
 8001c1a:	1e4b      	subs	r3, r1, #1
 8001c1c:	6013      	str	r3, [r2, #0]
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0ec      	beq.n	8001bfc <Hw_N5100G_FrameTick+0x10>
 8001c22:	e7ec      	b.n	8001bfe <Hw_N5100G_FrameTick+0x12>
 8001c24:	08002395 	.word	0x08002395
 8001c28:	20000b8c 	.word	0x20000b8c
 8001c2c:	20000990 	.word	0x20000990
 8001c30:	20000b90 	.word	0x20000b90
 8001c34:	0800231d 	.word	0x0800231d
 8001c38:	08001b5d 	.word	0x08001b5d

08001c3c <Hw_N5110G_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
 8001c3c:	b510      	push	{r4, lr}
	HW_N5110G_RESET_ON();
 8001c3e:	f640 440c 	movw	r4, #3084	; 0xc0c
 8001c42:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001c46:	6822      	ldr	r2, [r4, #0]
	Hw_Timer_Delay_ms(10);
 8001c48:	f641 133d 	movw	r3, #6461	; 0x193d
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
	HW_N5110G_RESET_ON();
 8001c4c:	f422 6080 	bic.w	r0, r2, #1024	; 0x400
 8001c50:	6020      	str	r0, [r4, #0]
	Hw_Timer_Delay_ms(10);
 8001c52:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001c56:	200a      	movs	r0, #10
 8001c58:	4798      	blx	r3
	HW_N5110G_RESET_OFF();
 8001c5a:	6821      	ldr	r1, [r4, #0]
 8001c5c:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 8001c60:	6022      	str	r2, [r4, #0]
 8001c62:	bd10      	pop	{r4, pc}

08001c64 <Hw_N5110G_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 8001c64:	b510      	push	{r4, lr}
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8001c66:	f640 440c 	movw	r4, #3084	; 0xc0c
 8001c6a:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001c6e:	6823      	ldr	r3, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 8001c70:	4601      	mov	r1, r0
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8001c72:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 8001c76:	f641 337d 	movw	r3, #7037	; 0x1b7d
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8001c7a:	6022      	str	r2, [r4, #0]
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001c82:	4798      	blx	r3
	HW_N5110G_SEL_DATA();
 8001c84:	6821      	ldr	r1, [r4, #0]
 8001c86:	f441 6200 	orr.w	r2, r1, #2048	; 0x800
 8001c8a:	6022      	str	r2, [r4, #0]
	
	return Ret;
}
 8001c8c:	bd10      	pop	{r4, pc}
 8001c8e:	bf00      	nop

08001c90 <Hw_N5110G_Goto>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 8001c90:	b570      	push	{r4, r5, r6, lr}
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 8001c92:	f641 4465 	movw	r4, #7269	; 0x1c65
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 8001c96:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 8001c98:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001c9c:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 8001ca0:	47a0      	blx	r4
 8001ca2:	4606      	mov	r6, r0
	Ret |= Hw_N5110G_WriteCmd( 0x80|x );
 8001ca4:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 8001ca8:	47a0      	blx	r4
 8001caa:	4330      	orrs	r0, r6

	return Ret;
}
 8001cac:	b280      	uxth	r0, r0
 8001cae:	bd70      	pop	{r4, r5, r6, pc}

08001cb0 <Hw_N5110G_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 8001cb2:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <Hw_N5110G_Init+0xbc>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8001cb4:	b083      	sub	sp, #12
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 8001cb6:	4798      	blx	r3
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8001cb8:	f640 4004 	movw	r0, #3076	; 0xc04
 8001cbc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001cc0:	6802      	ldr	r2, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 8001cc2:	f640 440c 	movw	r4, #3084	; 0xc0c
	
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8001cc6:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 8001cca:	6001      	str	r1, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 8001ccc:	6805      	ldr	r5, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 8001cce:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 8001cd2:	f445 7640 	orr.w	r6, r5, #768	; 0x300
 8001cd6:	6006      	str	r6, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8001cd8:	6807      	ldr	r7, [r0, #0]
	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
	
	Hw_N5110G_Reset();
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8001cda:	4d25      	ldr	r5, [pc, #148]	; (8001d70 <Hw_N5110G_Init+0xc0>)
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8001cdc:	6007      	str	r7, [r0, #0]

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8001cde:	6803      	ldr	r3, [r0, #0]
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8001ce0:	2600      	movs	r6, #0
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8001ce2:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8001ce6:	6002      	str	r2, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
 8001ce8:	6801      	ldr	r1, [r0, #0]
 8001cea:	f441 5740 	orr.w	r7, r1, #12288	; 0x3000
 8001cee:	6007      	str	r7, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 8001cf0:	6803      	ldr	r3, [r0, #0]
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
 8001cf2:	4f20      	ldr	r7, [pc, #128]	; (8001d74 <Hw_N5110G_Init+0xc4>)

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 8001cf4:	6003      	str	r3, [r0, #0]


	HW_N5110G_RESET_OFF();
 8001cf6:	6820      	ldr	r0, [r4, #0]
 8001cf8:	f440 6280 	orr.w	r2, r0, #1024	; 0x400
 8001cfc:	6022      	str	r2, [r4, #0]
	HW_N5110G_SEL_CMD();
 8001cfe:	6821      	ldr	r1, [r4, #0]
	
	Hw_N5110G_Reset();
 8001d00:	481d      	ldr	r0, [pc, #116]	; (8001d78 <Hw_N5110G_Init+0xc8>)
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
 8001d02:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 8001d06:	6023      	str	r3, [r4, #0]
	
	Hw_N5110G_Reset();
 8001d08:	4780      	blx	r0
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8001d0a:	2021      	movs	r0, #33	; 0x21
 8001d0c:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0xC6);	// Write Vop
 8001d0e:	20c6      	movs	r0, #198	; 0xc6
 8001d10:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x06);	// Set Temperature Coefficient
 8001d12:	2006      	movs	r0, #6
 8001d14:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x13);	// Set Bias System
 8001d16:	2013      	movs	r0, #19
 8001d18:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x20);	// H = 0
 8001d1a:	2020      	movs	r0, #32
 8001d1c:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
 8001d1e:	200c      	movs	r0, #12
 8001d20:	47a8      	blx	r5
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
 8001d22:	4631      	mov	r1, r6
 8001d24:	4a15      	ldr	r2, [pc, #84]	; (8001d7c <Hw_N5110G_Init+0xcc>)
 8001d26:	4630      	mov	r0, r6
 8001d28:	4790      	blx	r2
	
	
	HW_N5110G_SEL_DATA();
 8001d2a:	6821      	ldr	r1, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8001d2c:	2003      	movs	r0, #3
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
 8001d2e:	f441 6300 	orr.w	r3, r1, #2048	; 0x800
 8001d32:	6023      	str	r3, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
 8001d34:	4c12      	ldr	r4, [pc, #72]	; (8001d80 <Hw_N5110G_Init+0xd0>)
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8001d36:	2121      	movs	r1, #33	; 0x21
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <Hw_N5110G_Init+0xd4>)
 8001d3a:	9600      	str	r6, [sp, #0]
 8001d3c:	2202      	movs	r2, #2
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8001d3e:	8026      	strh	r6, [r4, #0]
	Hw_N5110G_Frame_DrawReq	= 0;						
 8001d40:	603e      	str	r6, [r7, #0]
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8001d42:	4c11      	ldr	r4, [pc, #68]	; (8001d88 <Hw_N5110G_Init+0xd8>)
 8001d44:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
 8001d46:	2003      	movs	r0, #3
 8001d48:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <Hw_N5110G_Init+0xdc>)
 8001d4a:	4790      	blx	r2
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <Hw_N5110G_Init+0xe0>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001d4e:	4631      	mov	r1, r6
     TITLE   : Hw_5110G_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
 8001d50:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8001d54:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001d56:	7059      	strb	r1, [r3, #1]
 8001d58:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8001d5a:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001d5c:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8001d5e:	d1f9      	bne.n	8001d54 <Hw_N5110G_Init+0xa4>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001d60:	6839      	ldr	r1, [r7, #0]
 8001d62:	1c88      	adds	r0, r1, #2
 8001d64:	6038      	str	r0, [r7, #0]
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
	
	
	Hw_N5110G_Clear();	
	Hw_N5110G_DrawRequest();
}
 8001d66:	b003      	add	sp, #12
 8001d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	08001b31 	.word	0x08001b31
 8001d70:	08001c65 	.word	0x08001c65
 8001d74:	20000b8c 	.word	0x20000b8c
 8001d78:	08001c3d 	.word	0x08001c3d
 8001d7c:	08001c91 	.word	0x08001c91
 8001d80:	20000b88 	.word	0x20000b88
 8001d84:	08001bed 	.word	0x08001bed
 8001d88:	08001909 	.word	0x08001909
 8001d8c:	08001929 	.word	0x08001929
 8001d90:	2000098f 	.word	0x2000098f

08001d94 <Hw_N5110G_Clear>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
{
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <Hw_N5110G_Clear+0x20>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001d96:	2100      	movs	r1, #0
     TITLE   : Hw_N5110G_Clear
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
 8001d98:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8001d9c:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001d9e:	7059      	strb	r1, [r3, #1]
 8001da0:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8001da2:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001da4:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8001da6:	d1f9      	bne.n	8001d9c <Hw_N5110G_Clear+0x8>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001da8:	4903      	ldr	r1, [pc, #12]	; (8001db8 <Hw_N5110G_Clear+0x24>)
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 8001daa:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001dac:	680a      	ldr	r2, [r1, #0]
 8001dae:	1c53      	adds	r3, r2, #1
 8001db0:	600b      	str	r3, [r1, #0]
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 8001db2:	4770      	bx	lr
 8001db4:	2000098f 	.word	0x2000098f
 8001db8:	20000b8c 	.word	0x20000b8c

08001dbc <Hw_N5110G_WriteStr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 8001dbc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8001dc0:	7807      	ldrb	r7, [r0, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 8001dc2:	b086      	sub	sp, #24
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8001dc4:	2f00      	cmp	r7, #0
 8001dc6:	f000 8085 	beq.w	8001ed4 <Hw_N5110G_WriteStr+0x118>
 8001dca:	f640 3188 	movw	r1, #2952	; 0xb88
 8001dce:	f2c2 0100 	movt	r1, #8192	; 0x2000
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001dd2:	f640 0c21 	movw	ip, #2081	; 0x821
 8001dd6:	f8b1 9000 	ldrh.w	r9, [r1]
 8001dda:	f8df a104 	ldr.w	sl, [pc, #260]	; 8001ee0 <Hw_N5110G_WriteStr+0x124>
 8001dde:	f2c2 0c82 	movt	ip, #8322	; 0x2082
 8001de2:	9001      	str	r0, [sp, #4]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001de4:	f109 0301 	add.w	r3, r9, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001de8:	b298      	uxth	r0, r3
 8001dea:	08c2      	lsrs	r2, r0, #3
 8001dec:	fbac 2402 	umull	r2, r4, ip, r2
 8001df0:	08e5      	lsrs	r5, r4, #3
 8001df2:	ebc5 1685 	rsb	r6, r5, r5, lsl #6
 8001df6:	eba0 01c6 	sub.w	r1, r0, r6, lsl #3
 8001dfa:	b289      	uxth	r1, r1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001dfc:	1c4b      	adds	r3, r1, #1
 8001dfe:	b298      	uxth	r0, r3
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001e00:	08c2      	lsrs	r2, r0, #3
 8001e02:	fbac 4502 	umull	r4, r5, ip, r2
 8001e06:	08ec      	lsrs	r4, r5, #3
 8001e08:	ebc4 1684 	rsb	r6, r4, r4, lsl #6
 8001e0c:	eba0 03c6 	sub.w	r3, r0, r6, lsl #3
 8001e10:	b29a      	uxth	r2, r3
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001e12:	1c50      	adds	r0, r2, #1
 8001e14:	b284      	uxth	r4, r0
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001e16:	08e5      	lsrs	r5, r4, #3
 8001e18:	fbac 5605 	umull	r5, r6, ip, r5
 8001e1c:	08f3      	lsrs	r3, r6, #3
 8001e1e:	ebc3 1083 	rsb	r0, r3, r3, lsl #6
 8001e22:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
 8001e26:	fa1f f884 	uxth.w	r8, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001e2a:	f108 0501 	add.w	r5, r8, #1
 8001e2e:	b2ae      	uxth	r6, r5
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001e30:	08f3      	lsrs	r3, r6, #3
 8001e32:	fbac 4003 	umull	r4, r0, ip, r3
 8001e36:	08c4      	lsrs	r4, r0, #3
 8001e38:	ebc4 1584 	rsb	r5, r4, r4, lsl #6
 8001e3c:	eba6 06c5 	sub.w	r6, r6, r5, lsl #3
 8001e40:	b2b6      	uxth	r6, r6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001e42:	1c73      	adds	r3, r6, #1
 8001e44:	b29c      	uxth	r4, r3
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001e46:	08e0      	lsrs	r0, r4, #3
 8001e48:	fbac 5300 	umull	r5, r3, ip, r0
 8001e4c:	08dd      	lsrs	r5, r3, #3
 8001e4e:	ebc5 1085 	rsb	r0, r5, r5, lsl #6
 8001e52:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
 8001e56:	b2a5      	uxth	r5, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001e58:	1c6b      	adds	r3, r5, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001e5a:	b298      	uxth	r0, r3
 8001e5c:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
 8001e60:	fbac 340b 	umull	r3, r4, ip, fp
 8001e64:	3f20      	subs	r7, #32
 8001e66:	ea4f 0bd4 	mov.w	fp, r4, lsr #3
	u16 i;
	u8  Ch;
	
	for( i=0; i<6; i++ )
	{
		Ch = Hw_N5110G_Font6_8[CharData-32][i];
 8001e6a:	f240 0400 	movw	r4, #0
 8001e6e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001e72:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8001e76:	eb04 0347 	add.w	r3, r4, r7, lsl #1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001e7a:	f814 7017 	ldrb.w	r7, [r4, r7, lsl #1]
 8001e7e:	789c      	ldrb	r4, [r3, #2]
 8001e80:	9702      	str	r7, [sp, #8]
 8001e82:	9403      	str	r4, [sp, #12]
 8001e84:	78dc      	ldrb	r4, [r3, #3]
 8001e86:	785f      	ldrb	r7, [r3, #1]
 8001e88:	9404      	str	r4, [sp, #16]
 8001e8a:	791c      	ldrb	r4, [r3, #4]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001e8c:	ebcb 1b8b 	rsb	fp, fp, fp, lsl #6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001e90:	9405      	str	r4, [sp, #20]
 8001e92:	9c02      	ldr	r4, [sp, #8]
 8001e94:	795b      	ldrb	r3, [r3, #5]
 8001e96:	f80a 4009 	strb.w	r4, [sl, r9]
 8001e9a:	f80a 7001 	strb.w	r7, [sl, r1]
 8001e9e:	9f03      	ldr	r7, [sp, #12]
 8001ea0:	9c05      	ldr	r4, [sp, #20]
 8001ea2:	f80a 7002 	strb.w	r7, [sl, r2]
 8001ea6:	9a04      	ldr	r2, [sp, #16]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001ea8:	eba0 00cb 	sub.w	r0, r0, fp, lsl #3
 8001eac:	f640 3188 	movw	r1, #2952	; 0xb88
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001eb0:	f80a 2008 	strb.w	r2, [sl, r8]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001eb4:	fa1f f980 	uxth.w	r9, r0
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001eb8:	f80a 4006 	strb.w	r4, [sl, r6]
 8001ebc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001ec0:	f80a 3005 	strb.w	r3, [sl, r5]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8001ec4:	9d01      	ldr	r5, [sp, #4]
 8001ec6:	f8a1 9000 	strh.w	r9, [r1]
 8001eca:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 8001ece:	9501      	str	r5, [sp, #4]
 8001ed0:	2f00      	cmp	r7, #0
 8001ed2:	d187      	bne.n	8001de4 <Hw_N5110G_WriteStr+0x28>
		Ret |= Hw_N5110G_WriteChar( *pStr );
		pStr++;
	}
		
	return Ret;
}
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	b006      	add	sp, #24
 8001ed8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000990 	.word	0x20000990

08001ee4 <Hw_N5110G_Print>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 8001ee4:	b40c      	push	{r2, r3}
 8001ee6:	b530      	push	{r4, r5, lr}
 8001ee8:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8001eea:	aa36      	add	r2, sp, #216	; 0xd8
 8001eec:	f640 53f9 	movw	r3, #3577	; 0xdf9
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 8001ef0:	460d      	mov	r5, r1
 8001ef2:	4604      	mov	r4, r0
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8001ef4:	f852 1b04 	ldr.w	r1, [r2], #4
 8001ef8:	4668      	mov	r0, sp
 8001efa:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001efe:	4798      	blx	r3

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8001f00:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8001f04:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8001f08:	004c      	lsls	r4, r1, #1
 8001f0a:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 8001f0e:	f640 3288 	movw	r2, #2952	; 0xb88

	Hw_N5110G_WriteStr( Str );		
 8001f12:	f641 53bd 	movw	r3, #7613	; 0x1dbd

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8001f16:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001f1a:	eb04 0585 	add.w	r5, r4, r5, lsl #2

	Hw_N5110G_WriteStr( Str );		
 8001f1e:	4668      	mov	r0, sp
 8001f20:	f6c0 0300 	movt	r3, #2048	; 0x800

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8001f24:	8015      	strh	r5, [r2, #0]

	Hw_N5110G_WriteStr( Str );		
 8001f26:	4798      	blx	r3
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001f28:	f640 318c 	movw	r1, #2956	; 0xb8c
 8001f2c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001f30:	680a      	ldr	r2, [r1, #0]
	Hw_N5110G_DrawRequest();
	
	Lb_va_end(ap);		
	
	return Ret;
}
 8001f32:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001f34:	1c53      	adds	r3, r2, #1
 8001f36:	600b      	str	r3, [r1, #0]
	Hw_N5110G_DrawRequest();
	
	Lb_va_end(ap);		
	
	return Ret;
}
 8001f38:	b033      	add	sp, #204	; 0xcc
 8001f3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001f3e:	b002      	add	sp, #8
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop

08001f44 <Hw_N5110G_DrawRequest>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001f44:	f640 338c 	movw	r3, #2956	; 0xb8c
 8001f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	1c50      	adds	r0, r2, #1
 8001f50:	6018      	str	r0, [r3, #0]
 8001f52:	4770      	bx	lr

08001f54 <Hw_N5110G_DrawCircle>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8001f54:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f58:	b088      	sub	sp, #32
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8001f5a:	0054      	lsls	r4, r2, #1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8001f5c:	9005      	str	r0, [sp, #20]
 8001f5e:	9106      	str	r1, [sp, #24]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8001f60:	f1c4 0003 	rsb	r0, r4, #3
 8001f64:	9d05      	ldr	r5, [sp, #20]
 8001f66:	9c06      	ldr	r4, [sp, #24]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8001f68:	9304      	str	r3, [sp, #16]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8001f6a:	b283      	uxth	r3, r0
 8001f6c:	9303      	str	r3, [sp, #12]
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];
 8001f6e:	49a0      	ldr	r1, [pc, #640]	; (80021f0 <Hw_N5110G_DrawCircle+0x29c>)
{
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8001f70:	4620      	mov	r0, r4
 8001f72:	9501      	str	r5, [sp, #4]
 8001f74:	9502      	str	r5, [sp, #8]
	CurX = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e0a5      	b.n	80020c6 <Hw_N5110G_DrawCircle+0x172>
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8001f7a:	f8dd b018 	ldr.w	fp, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001f7e:	f04f 0901 	mov.w	r9, #1
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
 8001f82:	ebc2 060b 	rsb	r6, r2, fp
 8001f86:	b2b6      	uxth	r6, r6
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001f88:	f006 0807 	and.w	r8, r6, #7
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8001f8c:	eb02 050b 	add.w	r5, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001f90:	fa09 fb08 	lsl.w	fp, r9, r8
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8001f94:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001f96:	f007 0a07 	and.w	sl, r7, #7
 8001f9a:	f000 0507 	and.w	r5, r0, #7
 8001f9e:	fa09 fc0a 	lsl.w	ip, r9, sl
 8001fa2:	f04f 0801 	mov.w	r8, #1
 8001fa6:	fa09 fa05 	lsl.w	sl, r9, r5
 8001faa:	f004 0907 	and.w	r9, r4, #7
 8001fae:	f8cd b01c 	str.w	fp, [sp, #28]
 8001fb2:	fa08 fb09 	lsl.w	fp, r8, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001fb6:	2554      	movs	r5, #84	; 0x54
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001fb8:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001fba:	fb05 f707 	mul.w	r7, r5, r7
 8001fbe:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001fc2:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001fc4:	eb07 0809 	add.w	r8, r7, r9
 8001fc8:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001fcc:	f8cd b000 	str.w	fp, [sp]
 8001fd0:	f811 b008 	ldrb.w	fp, [r1, r8]
 8001fd4:	fa5f fc8c 	uxtb.w	ip, ip
 8001fd8:	ea4b 050c 	orr.w	r5, fp, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001fdc:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001fe0:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001fe4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8001fe8:	f811 b008 	ldrb.w	fp, [r1, r8]
 8001fec:	fa5f f589 	uxtb.w	r5, r9
 8001ff0:	ea4b 0b05 	orr.w	fp, fp, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001ff4:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001ff8:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001ffc:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002000:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002002:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002006:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800200a:	ea49 0c0c 	orr.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800200e:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002012:	2754      	movs	r7, #84	; 0x54
 8002014:	4446      	add	r6, r8
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 8002016:	f8dd 9014 	ldr.w	r9, [sp, #20]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800201a:	fb07 f80b 	mul.w	r8, r7, fp
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800201e:	f811 b006 	ldrb.w	fp, [r1, r6]
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 8002022:	eb02 0709 	add.w	r7, r2, r9
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002026:	ea4b 0505 	orr.w	r5, fp, r5
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800202a:	b2bf      	uxth	r7, r7
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800202c:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002030:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002034:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002036:	eb08 0607 	add.w	r6, r8, r7
 800203a:	fb0b f50c 	mul.w	r5, fp, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800203e:	f811 9006 	ldrb.w	r9, [r1, r6]
 8002042:	fa5f fa8a 	uxtb.w	sl, sl
 8002046:	f8dd b000 	ldr.w	fp, [sp]
 800204a:	ea49 0c0a 	orr.w	ip, r9, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800204e:	f801 c006 	strb.w	ip, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002052:	19ef      	adds	r7, r5, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002054:	fa5f f98b 	uxtb.w	r9, fp
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 8002058:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800205c:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 800205e:	ebc2 0c0b 	rsb	ip, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002062:	ea46 0609 	orr.w	r6, r6, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002066:	fa1f fc8c 	uxth.w	ip, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800206a:	55ce      	strb	r6, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800206c:	44e0      	add	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800206e:	f811 7008 	ldrb.w	r7, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002072:	4465      	add	r5, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002074:	ea47 0a0a 	orr.w	sl, r7, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002078:	f801 a008 	strb.w	sl, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800207c:	5d4e      	ldrb	r6, [r1, r5]
 800207e:	ea46 0909 	orr.w	r9, r6, r9
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002082:	f801 9005 	strb.w	r9, [r1, r5]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002086:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800208a:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 800208e:	f040 80a8 	bne.w	80021e2 <Hw_N5110G_DrawCircle+0x28e>
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8002092:	9f03      	ldr	r7, [sp, #12]
 8002094:	1a9d      	subs	r5, r3, r2
 8002096:	370a      	adds	r7, #10
 8002098:	eb07 0685 	add.w	r6, r7, r5, lsl #2
			CurY--;
 800209c:	3a01      	subs	r2, #1
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 800209e:	b2b7      	uxth	r7, r6
 80020a0:	9703      	str	r7, [sp, #12]
			CurY--;
 80020a2:	b292      	uxth	r2, r2
 80020a4:	9d02      	ldr	r5, [sp, #8]
 80020a6:	9f01      	ldr	r7, [sp, #4]
		}
		CurX++;
 80020a8:	3301      	adds	r3, #1
 80020aa:	1c6e      	adds	r6, r5, #1
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	1e7d      	subs	r5, r7, #1
 80020b0:	3001      	adds	r0, #1
 80020b2:	3c01      	subs	r4, #1
 80020b4:	b2b6      	uxth	r6, r6
 80020b6:	b2ad      	uxth	r5, r5
  
	D    = 3 - (Radius << 1);
	CurX = 0;
	CurY = Radius;
	
	while (CurX <= CurY)
 80020b8:	429a      	cmp	r2, r3
 80020ba:	9602      	str	r6, [sp, #8]
 80020bc:	9501      	str	r5, [sp, #4]
 80020be:	b280      	uxth	r0, r0
 80020c0:	b2a4      	uxth	r4, r4
 80020c2:	f0c0 8115 	bcc.w	80022f0 <Hw_N5110G_DrawCircle+0x39c>
	{
		if( Mode == 0 )
 80020c6:	9e04      	ldr	r6, [sp, #16]
 80020c8:	2e00      	cmp	r6, #0
 80020ca:	f43f af56 	beq.w	8001f7a <Hw_N5110G_DrawCircle+0x26>
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
 80020ce:	9d04      	ldr	r5, [sp, #16]
 80020d0:	2d01      	cmp	r5, #1
 80020d2:	f000 808f 	beq.w	80021f4 <Hw_N5110G_DrawCircle+0x2a0>
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
 80020d6:	9f04      	ldr	r7, [sp, #16]
 80020d8:	2f02      	cmp	r7, #2
 80020da:	d1d4      	bne.n	8002086 <Hw_N5110G_DrawCircle+0x132>
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 80020dc:	9e06      	ldr	r6, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80020de:	f04f 0901 	mov.w	r9, #1
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 80020e2:	1995      	adds	r5, r2, r6
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
 80020e4:	1ab6      	subs	r6, r6, r2
 80020e6:	b2b6      	uxth	r6, r6
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 80020e8:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80020ea:	f006 0507 	and.w	r5, r6, #7
 80020ee:	fa09 fa05 	lsl.w	sl, r9, r5
 80020f2:	f007 0c07 	and.w	ip, r7, #7
 80020f6:	f04f 0801 	mov.w	r8, #1
 80020fa:	fa08 fb0c 	lsl.w	fp, r8, ip
 80020fe:	f004 0c07 	and.w	ip, r4, #7
 8002102:	fa09 f80c 	lsl.w	r8, r9, ip
 8002106:	f000 0507 	and.w	r5, r0, #7
 800210a:	f8cd a01c 	str.w	sl, [sp, #28]
 800210e:	fa09 fa05 	lsl.w	sl, r9, r5
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002112:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002114:	2554      	movs	r5, #84	; 0x54
 8002116:	fb05 f707 	mul.w	r7, r5, r7
 800211a:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800211e:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002120:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002124:	f8cd 8000 	str.w	r8, [sp]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002128:	eb07 0809 	add.w	r8, r7, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800212c:	f811 5008 	ldrb.w	r5, [r1, r8]
 8002130:	fa5f fc8b 	uxtb.w	ip, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002134:	f8dd 9008 	ldr.w	r9, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002138:	ea85 0b0c 	eor.w	fp, r5, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800213c:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002140:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002144:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8002148:	f811 9008 	ldrb.w	r9, [r1, r8]
 800214c:	fa5f f58b 	uxtb.w	r5, fp
 8002150:	ea89 0905 	eor.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002154:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002158:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800215c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002160:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002162:	f811 b007 	ldrb.w	fp, [r1, r7]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002166:	ea4f 08d0 	mov.w	r8, r0, lsr #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800216a:	ea8b 0c0c 	eor.w	ip, fp, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800216e:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002172:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002176:	444e      	add	r6, r9
 8002178:	fb0b f808 	mul.w	r8, fp, r8
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 800217c:	f8dd c014 	ldr.w	ip, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002180:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 8002182:	eb02 090c 	add.w	r9, r2, ip
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002186:	407d      	eors	r5, r7
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002188:	fa1f f989 	uxth.w	r9, r9
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800218c:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002190:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002192:	fb0b fc07 	mul.w	ip, fp, r7
 8002196:	eb08 0509 	add.w	r5, r8, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800219a:	5d4f      	ldrb	r7, [r1, r5]
 800219c:	fa5f f68a 	uxtb.w	r6, sl
 80021a0:	4077      	eors	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80021a2:	554f      	strb	r7, [r1, r5]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80021a4:	44e1      	add	r9, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80021a6:	9d00      	ldr	r5, [sp, #0]
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 80021a8:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80021ac:	f811 a009 	ldrb.w	sl, [r1, r9]
 80021b0:	b2ed      	uxtb	r5, r5
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 80021b2:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80021b6:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80021b8:	ea8a 0a05 	eor.w	sl, sl, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80021bc:	f801 a009 	strb.w	sl, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80021c0:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80021c2:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80021c6:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80021c8:	ea89 0606 	eor.w	r6, r9, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80021cc:	f801 6008 	strb.w	r6, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80021d0:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 80021d2:	f8dd c00c 	ldr.w	ip, [sp, #12]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80021d6:	4075      	eors	r5, r6
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 80021d8:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80021dc:	55cd      	strb	r5, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 80021de:	f43f af58 	beq.w	8002092 <Hw_N5110G_DrawCircle+0x13e>
		{ 
			D += (CurX << 2) + 6;
 80021e2:	eb0c 0583 	add.w	r5, ip, r3, lsl #2
 80021e6:	1dae      	adds	r6, r5, #6
 80021e8:	b2b7      	uxth	r7, r6
 80021ea:	9703      	str	r7, [sp, #12]
 80021ec:	e75a      	b.n	80020a4 <Hw_N5110G_DrawCircle+0x150>
 80021ee:	bf00      	nop
 80021f0:	20000990 	.word	0x20000990
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 80021f4:	9e06      	ldr	r6, [sp, #24]
 80021f6:	1997      	adds	r7, r2, r6
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 80021f8:	ebc2 0806 	rsb	r8, r2, r6
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 80021fc:	b2bf      	uxth	r7, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 80021fe:	fa1f f988 	uxth.w	r9, r8
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002202:	f007 0b07 	and.w	fp, r7, #7
 8002206:	9e04      	ldr	r6, [sp, #16]
 8002208:	fa05 fc0b 	lsl.w	ip, r5, fp
 800220c:	f009 0507 	and.w	r5, r9, #7
 8002210:	fa06 fa05 	lsl.w	sl, r6, r5
 8002214:	9d04      	ldr	r5, [sp, #16]
 8002216:	f000 0607 	and.w	r6, r0, #7
 800221a:	fa05 fb06 	lsl.w	fp, r5, r6
 800221e:	f004 0607 	and.w	r6, r4, #7
 8002222:	40b5      	lsls	r5, r6
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002224:	08ff      	lsrs	r7, r7, #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002226:	9507      	str	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002228:	2554      	movs	r5, #84	; 0x54
 800222a:	fb05 f707 	mul.w	r7, r5, r7
 800222e:	f8dd 8008 	ldr.w	r8, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002232:	ea4f 06d9 	mov.w	r6, r9, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002236:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002238:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800223c:	2554      	movs	r5, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800223e:	ea6f 0c0c 	mvn.w	ip, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002242:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002246:	fa5f fc8c 	uxtb.w	ip, ip
 800224a:	ea09 050c 	and.w	r5, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800224e:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002252:	f8dd 8008 	ldr.w	r8, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002256:	ea6f 050a 	mvn.w	r5, sl
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800225a:	44b0      	add	r8, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800225c:	f811 9008 	ldrb.w	r9, [r1, r8]
 8002260:	b2ed      	uxtb	r5, r5
 8002262:	ea09 0a05 	and.w	sl, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002266:	f801 a008 	strb.w	sl, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800226a:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800226e:	ea4f 0ad0 	mov.w	sl, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002272:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002274:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002278:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800227c:	ea09 0c0c 	and.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002280:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002284:	f04f 0754 	mov.w	r7, #84	; 0x54
 8002288:	4446      	add	r6, r8
 800228a:	fb07 fa0a 	mul.w	sl, r7, sl
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 800228e:	f8dd 9014 	ldr.w	r9, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002292:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 8002294:	eb02 0c09 	add.w	ip, r2, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002298:	fa1f f88c 	uxth.w	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800229c:	403d      	ands	r5, r7
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800229e:	558d      	strb	r5, [r1, r6]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80022a0:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80022a4:	eb0a 0508 	add.w	r5, sl, r8
 80022a8:	2654      	movs	r6, #84	; 0x54
 80022aa:	fb06 fc07 	mul.w	ip, r6, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80022ae:	5d4f      	ldrb	r7, [r1, r5]
 80022b0:	ea6f 060b 	mvn.w	r6, fp
 80022b4:	b2f6      	uxtb	r6, r6
 80022b6:	4037      	ands	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80022b8:	554f      	strb	r7, [r1, r5]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80022ba:	9d07      	ldr	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80022bc:	44e0      	add	r8, ip
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 80022be:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80022c2:	f811 9008 	ldrb.w	r9, [r1, r8]
 80022c6:	43ef      	mvns	r7, r5
 80022c8:	b2fd      	uxtb	r5, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 80022ca:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80022ce:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80022d0:	ea09 0905 	and.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80022d4:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80022d8:	44ba      	add	sl, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80022da:	f811 800a 	ldrb.w	r8, [r1, sl]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80022de:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80022e0:	ea08 0606 	and.w	r6, r8, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80022e4:	f801 600a 	strb.w	r6, [r1, sl]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80022e8:	5dce      	ldrb	r6, [r1, r7]
 80022ea:	4035      	ands	r5, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80022ec:	55cd      	strb	r5, [r1, r7]
 80022ee:	e6ca      	b.n	8002086 <Hw_N5110G_DrawCircle+0x132>
			D += ((CurX - CurY) << 2) + 10;
			CurY--;
		}
		CurX++;
	}
}
 80022f0:	b008      	add	sp, #32
 80022f2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80022f6:	4770      	bx	lr

080022f8 <Hw_DMA_Init>:
void Hw_DMA_Init(void)
{
	static u8 Called = 0;


	if( Called == 1 ) return;
 80022f8:	4a07      	ldr	r2, [pc, #28]	; (8002318 <Hw_DMA_Init+0x20>)
 80022fa:	7813      	ldrb	r3, [r2, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d009      	beq.n	8002314 <Hw_DMA_Init+0x1c>


	// 1. Clock Enable
	//
	REG_RCC_AHBENR |= (1<<0);		// DMA1 Clock enable
 8002300:	f241 0014 	movw	r0, #4116	; 0x1014
 8002304:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002308:	6801      	ldr	r1, [r0, #0]
 800230a:	f041 0301 	orr.w	r3, r1, #1
 800230e:	6003      	str	r3, [r0, #0]
	

	Called = 1;	
 8002310:	2001      	movs	r0, #1
 8002312:	7010      	strb	r0, [r2, #0]
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000480 	.word	0x20000480

0800231c <Hw_DMA_SPI2_Setup>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
 800231c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8002320:	2344      	movs	r3, #68	; 0x44
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8002322:	274c      	movs	r7, #76	; 0x4c
 8002324:	f643 040c 	movw	r4, #14348	; 0x380c
	REG_DMA1_CMAR(4)  = ReadAddress;
 8002328:	2650      	movs	r6, #80	; 0x50
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 800232a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800232e:	f04f 0c00 	mov.w	ip, #0
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8002332:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002336:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(4)  = ReadAddress;
 800233a:	f2c4 0602 	movt	r6, #16386	; 0x4002
	REG_DMA1_CNDTR(4) = BufSize;
 800233e:	2548      	movs	r5, #72	; 0x48
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8002340:	f8c3 c000 	str.w	ip, [r3]
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 8002344:	f2c4 0502 	movt	r5, #16386	; 0x4002
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8002348:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(4)  = ReadAddress;
 800234a:	6031      	str	r1, [r6, #0]
	REG_DMA1_CNDTR(4) = BufSize;
	
	
	
	REG_DMA1_CCR(4) = 0
 800234c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 8002350:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(4) = 0
 8002352:	6019      	str	r1, [r3, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8002354:	f8d3 8000 	ldr.w	r8, [r3]
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 8002358:	2158      	movs	r1, #88	; 0x58
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 800235a:	2760      	movs	r7, #96	; 0x60
	REG_DMA1_CMAR(5)  = WriteAddress;
 800235c:	2664      	movs	r6, #100	; 0x64
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 800235e:	f2c4 0102 	movt	r1, #16386	; 0x4002
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 8002362:	255c      	movs	r5, #92	; 0x5c
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8002364:	f048 0801 	orr.w	r8, r8, #1
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 8002368:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(5)  = WriteAddress;
 800236c:	f2c4 0602 	movt	r6, #16386	; 0x4002
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8002370:	f8c3 8000 	str.w	r8, [r3]
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 8002374:	f2c4 0502 	movt	r5, #16386	; 0x4002
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 8002378:	f8c1 c000 	str.w	ip, [r1]
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 800237c:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(5)  = WriteAddress;
 800237e:	6030      	str	r0, [r6, #0]
	REG_DMA1_CNDTR(5) = BufSize;
	
	
	
	REG_DMA1_CCR(5) = 0
 8002380:	2090      	movs	r0, #144	; 0x90
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 8002382:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(5) = 0
 8002384:	6008      	str	r0, [r1, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(5) |= (1<<0);	// Channel enable
 8002386:	680a      	ldr	r2, [r1, #0]
 8002388:	f042 0301 	orr.w	r3, r2, #1
 800238c:	600b      	str	r3, [r1, #0]
}
 800238e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8002392:	4770      	bx	lr

08002394 <Hw_DMA_SPI2_IsTransFinished>:
---------------------------------------------------------------------------*/
u8 Hw_DMA_SPI2_IsTransFinished( void )
{
	u8 Ret = 0;
	
	if( REG_DMA1_ISR & (1<<13) )
 8002394:	2300      	movs	r3, #0
 8002396:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 80023a0:	d00a      	beq.n	80023b8 <Hw_DMA_SPI2_IsTransFinished+0x24>
	{
		if( REG_DMA1_ISR & (1<<17) )
 80023a2:	6819      	ldr	r1, [r3, #0]
 80023a4:	f411 3000 	ands.w	r0, r1, #131072	; 0x20000
 80023a8:	d006      	beq.n	80023b8 <Hw_DMA_SPI2_IsTransFinished+0x24>
		{
			REG_DMA1_IFCR = (1<<17) | (1<<13);
 80023aa:	2304      	movs	r3, #4
 80023ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023b0:	f44f 3208 	mov.w	r2, #139264	; 0x22000
 80023b4:	601a      	str	r2, [r3, #0]
			Ret = 1;
 80023b6:	2001      	movs	r0, #1
		}
	}
	return Ret;
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <Hw_I2C_IMU_IO_Setup>:
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 80023bc:	2204      	movs	r2, #4
 80023be:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80023c2:	6811      	ldr	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 80023c4:	f640 4304 	movw	r3, #3076	; 0xc04
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 80023c8:	f041 0002 	orr.w	r0, r1, #2
 80023cc:	6010      	str	r0, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 80023ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	f022 010f 	bic.w	r1, r2, #15
 80023d8:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	f040 0203 	orr.w	r2, r0, #3
 80023e0:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	f041 000c 	orr.w	r0, r1, #12
 80023e8:	6018      	str	r0, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 80023f0:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	f040 0230 	orr.w	r2, r0, #48	; 0x30
 80023f8:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 80023fa:	6819      	ldr	r1, [r3, #0]
 80023fc:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 8002400:	6018      	str	r0, [r3, #0]
 8002402:	4770      	bx	lr

08002404 <Hw_I2C_IMU_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_IMU_Init( void )
{
 8002404:	b570      	push	{r4, r5, r6, lr}
	static u8 power_on = FALSE;
	u32 SR;



	if( power_on == TRUE ) return;
 8002406:	4c1e      	ldr	r4, [pc, #120]	; (8002480 <Hw_I2C_IMU_Init+0x7c>)
 8002408:	7823      	ldrb	r3, [r4, #0]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d036      	beq.n	800247c <Hw_I2C_IMU_Init+0x78>


	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	
 800240e:	481d      	ldr	r0, [pc, #116]	; (8002484 <Hw_I2C_IMU_Init+0x80>)
 8002410:	4780      	blx	r0


	REG_I2C1_CR1 = 0;
 8002412:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8002416:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800241a:	2600      	movs	r6, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 800241c:	f245 4504 	movw	r5, #21508	; 0x5404
	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	


	REG_I2C1_CR1 = 0;
 8002420:	601e      	str	r6, [r3, #0]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8002422:	f2c4 0500 	movt	r5, #16384	; 0x4000
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8002426:	f245 401c 	movw	r0, #21532	; 0x541c

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 800242a:	2624      	movs	r6, #36	; 0x24
 800242c:	602e      	str	r6, [r5, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 800242e:	f2c4 0000 	movt	r0, #16384	; 0x4000
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 8002432:	f245 4120 	movw	r1, #21536	; 0x5420
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8002436:	f248 051e 	movw	r5, #32798	; 0x801e
 800243a:	6005      	str	r5, [r0, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 800243c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002440:	200b      	movs	r0, #11


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8002442:	f241 021c 	movw	r2, #4124	; 0x101c
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 8002446:	6008      	str	r0, [r1, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8002448:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800244c:	6810      	ldr	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 800244e:	f245 4114 	movw	r1, #21524	; 0x5414
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8002452:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8002456:	6010      	str	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8002458:	6818      	ldr	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 800245a:	f245 4218 	movw	r2, #21528	; 0x5418
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 800245e:	f020 0002 	bic.w	r0, r0, #2
 8002462:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8002464:	6818      	ldr	r0, [r3, #0]

	SR = REG_I2C1_SR1;
 8002466:	f2c4 0100 	movt	r1, #16384	; 0x4000
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 800246a:	f040 0001 	orr.w	r0, r0, #1
 800246e:	6018      	str	r0, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8002470:	f2c4 0200 	movt	r2, #16384	; 0x4000


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8002474:	680b      	ldr	r3, [r1, #0]
	SR = REG_I2C1_SR2;
 8002476:	6813      	ldr	r3, [r2, #0]


	power_on = TRUE;
 8002478:	2301      	movs	r3, #1
 800247a:	7023      	strb	r3, [r4, #0]
 800247c:	bd70      	pop	{r4, r5, r6, pc}
 800247e:	bf00      	nop
 8002480:	20000481 	.word	0x20000481
 8002484:	080023bd 	.word	0x080023bd

08002488 <Hw_I2C_IMU_GetErrStatus>:
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
 8002488:	f245 4314 	movw	r3, #21524	; 0x5414
 800248c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002490:	681a      	ldr	r2, [r3, #0]
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 8002492:	6819      	ldr	r1, [r3, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
 8002494:	f412 6f00 	tst.w	r2, #2048	; 0x800

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 8002498:	681a      	ldr	r2, [r3, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
 800249a:	bf14      	ite	ne
 800249c:	200b      	movne	r0, #11
 800249e:	2000      	moveq	r0, #0

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 80024a0:	681b      	ldr	r3, [r3, #0]
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 80024a2:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80024a6:	bf18      	it	ne
 80024a8:	200a      	movne	r0, #10
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 80024aa:	f412 7f00 	tst.w	r2, #512	; 0x200
 80024ae:	bf18      	it	ne
 80024b0:	2009      	movne	r0, #9
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 80024b2:	f413 7f80 	tst.w	r3, #256	; 0x100

	return Err;
}
 80024b6:	bf18      	it	ne
 80024b8:	2008      	movne	r0, #8
 80024ba:	4770      	bx	lr

080024bc <Hw_I2C_IMU_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_ReadRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_reg, u16 len )
{
 80024bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024be:	b08d      	sub	sp, #52	; 0x34
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;


	if( len > 0 ) LastIndex = len - 1;
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8118 	beq.w	80026f6 <Hw_I2C_IMU_ReadRegs+0x23a>
 80024c6:	1e5f      	subs	r7, r3, #1
 80024c8:	b2ff      	uxtb	r7, r7
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 80024ca:	f245 4514 	movw	r5, #21524	; 0x5414
 80024ce:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80024d2:	682e      	ldr	r6, [r5, #0]
			SR2 = REG_I2C1_SR2;
 80024d4:	f245 4418 	movw	r4, #21528	; 0x5418
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 80024d8:	9601      	str	r6, [sp, #4]
			SR2 = REG_I2C1_SR2;
 80024da:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80024de:	6824      	ldr	r4, [r4, #0]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80024e0:	f44f 46a8 	mov.w	r6, #21504	; 0x5400
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
			SR2 = REG_I2C1_SR2;
 80024e4:	9402      	str	r4, [sp, #8]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80024e6:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80024ea:	f8d6 c000 	ldr.w	ip, [r6]
 80024ee:	f242 7410 	movw	r4, #10000	; 0x2710
 80024f2:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 80024f6:	f8c6 c000 	str.w	ip, [r6]
 80024fa:	e008      	b.n	800250e <Hw_I2C_IMU_ReadRegs+0x52>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80024fc:	682e      	ldr	r6, [r5, #0]
 80024fe:	9603      	str	r6, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002500:	9e03      	ldr	r6, [sp, #12]
 8002502:	f016 0f01 	tst.w	r6, #1
 8002506:	d108      	bne.n	800251a <Hw_I2C_IMU_ReadRegs+0x5e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002508:	3c01      	subs	r4, #1
 800250a:	f000 80f6 	beq.w	80026fa <Hw_I2C_IMU_ReadRegs+0x23e>
	{
		Reg = *reg_addr;
 800250e:	682e      	ldr	r6, [r5, #0]
 8002510:	3c01      	subs	r4, #1
 8002512:	9603      	str	r6, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002514:	9e03      	ldr	r6, [sp, #12]
 8002516:	07f6      	lsls	r6, r6, #31
 8002518:	d5f0      	bpl.n	80024fc <Hw_I2C_IMU_ReadRegs+0x40>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800251a:	f245 4518 	movw	r5, #21528	; 0x5418

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800251e:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002522:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002526:	e008      	b.n	800253a <Hw_I2C_IMU_ReadRegs+0x7e>
 8002528:	682e      	ldr	r6, [r5, #0]
 800252a:	9604      	str	r6, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800252c:	9e04      	ldr	r6, [sp, #16]
 800252e:	f016 0f01 	tst.w	r6, #1
 8002532:	d108      	bne.n	8002546 <Hw_I2C_IMU_ReadRegs+0x8a>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002534:	3c01      	subs	r4, #1
 8002536:	f000 80e0 	beq.w	80026fa <Hw_I2C_IMU_ReadRegs+0x23e>
	{
		Reg = *reg_addr;
 800253a:	682e      	ldr	r6, [r5, #0]
 800253c:	3c01      	subs	r4, #1
 800253e:	9604      	str	r6, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002540:	9e04      	ldr	r6, [sp, #16]
 8002542:	07f6      	lsls	r6, r6, #31
 8002544:	d5f0      	bpl.n	8002528 <Hw_I2C_IMU_ReadRegs+0x6c>



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8002546:	f245 4410 	movw	r4, #21520	; 0x5410
 800254a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800254e:	0040      	lsls	r0, r0, #1
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002550:	f245 4514 	movw	r5, #21524	; 0x5414



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8002554:	6020      	str	r0, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002556:	f2c4 0500 	movt	r5, #16384	; 0x4000



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 800255a:	f242 7410 	movw	r4, #10000	; 0x2710
 800255e:	e008      	b.n	8002572 <Hw_I2C_IMU_ReadRegs+0xb6>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002560:	682e      	ldr	r6, [r5, #0]
 8002562:	9605      	str	r6, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002564:	9e05      	ldr	r6, [sp, #20]
 8002566:	f016 0f02 	tst.w	r6, #2
 800256a:	d108      	bne.n	800257e <Hw_I2C_IMU_ReadRegs+0xc2>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800256c:	3c01      	subs	r4, #1
 800256e:	f000 80c7 	beq.w	8002700 <Hw_I2C_IMU_ReadRegs+0x244>
	{
		Reg = *reg_addr;
 8002572:	682e      	ldr	r6, [r5, #0]
 8002574:	3c01      	subs	r4, #1
 8002576:	9605      	str	r6, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002578:	9e05      	ldr	r6, [sp, #20]
 800257a:	07b6      	lsls	r6, r6, #30
 800257c:	d5f0      	bpl.n	8002560 <Hw_I2C_IMU_ReadRegs+0xa4>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 800257e:	f245 4518 	movw	r5, #21528	; 0x5418
 8002582:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002586:	682c      	ldr	r4, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002588:	f245 4514 	movw	r5, #21524	; 0x5414
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 800258c:	9402      	str	r4, [sp, #8]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800258e:	f2c4 0500 	movt	r5, #16384	; 0x4000
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8002592:	f242 7410 	movw	r4, #10000	; 0x2710
 8002596:	e008      	b.n	80025aa <Hw_I2C_IMU_ReadRegs+0xee>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002598:	682e      	ldr	r6, [r5, #0]
 800259a:	9606      	str	r6, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800259c:	9e06      	ldr	r6, [sp, #24]
 800259e:	f016 0f80 	tst.w	r6, #128	; 0x80
 80025a2:	d108      	bne.n	80025b6 <Hw_I2C_IMU_ReadRegs+0xfa>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80025a4:	3c01      	subs	r4, #1
 80025a6:	f000 80b3 	beq.w	8002710 <Hw_I2C_IMU_ReadRegs+0x254>
	{
		Reg = *reg_addr;
 80025aa:	682e      	ldr	r6, [r5, #0]
 80025ac:	3c01      	subs	r4, #1
 80025ae:	9606      	str	r6, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80025b0:	9e06      	ldr	r6, [sp, #24]
 80025b2:	0636      	lsls	r6, r6, #24
 80025b4:	d5f0      	bpl.n	8002598 <Hw_I2C_IMU_ReadRegs+0xdc>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80025b6:	f245 4514 	movw	r5, #21524	; 0x5414

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80025ba:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80025be:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80025c2:	e008      	b.n	80025d6 <Hw_I2C_IMU_ReadRegs+0x11a>
 80025c4:	682e      	ldr	r6, [r5, #0]
 80025c6:	9607      	str	r6, [sp, #28]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80025c8:	9e07      	ldr	r6, [sp, #28]
 80025ca:	f016 0f80 	tst.w	r6, #128	; 0x80
 80025ce:	d109      	bne.n	80025e4 <Hw_I2C_IMU_ReadRegs+0x128>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80025d0:	3c01      	subs	r4, #1
 80025d2:	f000 809d 	beq.w	8002710 <Hw_I2C_IMU_ReadRegs+0x254>
	{
		Reg = *reg_addr;
 80025d6:	682e      	ldr	r6, [r5, #0]
 80025d8:	3c01      	subs	r4, #1
 80025da:	9607      	str	r6, [sp, #28]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80025dc:	9e07      	ldr	r6, [sp, #28]
 80025de:	f016 0f80 	tst.w	r6, #128	; 0x80
 80025e2:	d0ef      	beq.n	80025c4 <Hw_I2C_IMU_ReadRegs+0x108>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 80025e4:	f245 4510 	movw	r5, #21520	; 0x5410
 80025e8:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80025ec:	f245 4414 	movw	r4, #21524	; 0x5414
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 80025f0:	6029      	str	r1, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80025f2:	f2c4 0400 	movt	r4, #16384	; 0x4000
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 80025f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80025fa:	e008      	b.n	800260e <Hw_I2C_IMU_ReadRegs+0x152>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80025fc:	6825      	ldr	r5, [r4, #0]
 80025fe:	9508      	str	r5, [sp, #32]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002600:	9d08      	ldr	r5, [sp, #32]
 8002602:	f015 0f04 	tst.w	r5, #4
 8002606:	d108      	bne.n	800261a <Hw_I2C_IMU_ReadRegs+0x15e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002608:	3901      	subs	r1, #1
 800260a:	f000 808d 	beq.w	8002728 <Hw_I2C_IMU_ReadRegs+0x26c>
	{
		Reg = *reg_addr;
 800260e:	6825      	ldr	r5, [r4, #0]
 8002610:	3901      	subs	r1, #1
 8002612:	9508      	str	r5, [sp, #32]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002614:	9d08      	ldr	r5, [sp, #32]
 8002616:	076d      	lsls	r5, r5, #29
 8002618:	d5f0      	bpl.n	80025fc <Hw_I2C_IMU_ReadRegs+0x140>



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 800261a:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 800261e:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002622:	680d      	ldr	r5, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002624:	f245 4414 	movw	r4, #21524	; 0x5414



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8002628:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 800262c:	600d      	str	r5, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800262e:	f2c4 0400 	movt	r4, #16384	; 0x4000



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8002632:	f242 7110 	movw	r1, #10000	; 0x2710
 8002636:	e007      	b.n	8002648 <Hw_I2C_IMU_ReadRegs+0x18c>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002638:	6825      	ldr	r5, [r4, #0]
 800263a:	9509      	str	r5, [sp, #36]	; 0x24

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800263c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800263e:	f015 0f01 	tst.w	r5, #1
 8002642:	d108      	bne.n	8002656 <Hw_I2C_IMU_ReadRegs+0x19a>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002644:	3901      	subs	r1, #1
 8002646:	d058      	beq.n	80026fa <Hw_I2C_IMU_ReadRegs+0x23e>
	{
		Reg = *reg_addr;
 8002648:	6825      	ldr	r5, [r4, #0]
 800264a:	3901      	subs	r1, #1
 800264c:	9509      	str	r5, [sp, #36]	; 0x24

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800264e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002650:	f015 0f01 	tst.w	r5, #1
 8002654:	d0f0      	beq.n	8002638 <Hw_I2C_IMU_ReadRegs+0x17c>
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 8002656:	f245 4110 	movw	r1, #21520	; 0x5410
 800265a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800265e:	f040 0001 	orr.w	r0, r0, #1
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002662:	f245 4414 	movw	r4, #21524	; 0x5414
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 8002666:	6008      	str	r0, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002668:	f2c4 0400 	movt	r4, #16384	; 0x4000
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 800266c:	f242 7110 	movw	r1, #10000	; 0x2710
 8002670:	e006      	b.n	8002680 <Hw_I2C_IMU_ReadRegs+0x1c4>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002672:	6820      	ldr	r0, [r4, #0]
 8002674:	900a      	str	r0, [sp, #40]	; 0x28

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002676:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002678:	0780      	lsls	r0, r0, #30
 800267a:	d407      	bmi.n	800268c <Hw_I2C_IMU_ReadRegs+0x1d0>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800267c:	3901      	subs	r1, #1
 800267e:	d03f      	beq.n	8002700 <Hw_I2C_IMU_ReadRegs+0x244>
	{
		Reg = *reg_addr;
 8002680:	6820      	ldr	r0, [r4, #0]
 8002682:	3901      	subs	r1, #1
 8002684:	900a      	str	r0, [sp, #40]	; 0x28

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002686:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002688:	0780      	lsls	r0, r0, #30
 800268a:	d5f2      	bpl.n	8002672 <Hw_I2C_IMU_ReadRegs+0x1b6>
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 800268c:	f245 4018 	movw	r0, #21528	; 0x5418
 8002690:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002694:	6801      	ldr	r1, [r0, #0]
 8002696:	9102      	str	r1, [sp, #8]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8002698:	b353      	cbz	r3, 80026f0 <Hw_I2C_IMU_ReadRegs+0x234>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 800269a:	f44f 45a8 	mov.w	r5, #21504	; 0x5400
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800269e:	f245 4014 	movw	r0, #21524	; 0x5414


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 80026a2:	f245 4c10 	movw	ip, #21520	; 0x5410
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80026a6:	2600      	movs	r6, #0
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 80026a8:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80026ac:	f2c4 0000 	movt	r0, #16384	; 0x4000


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 80026b0:	f2c4 0c00 	movt	ip, #16384	; 0x4000

			//-- Read DATA
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
 80026b4:	42b7      	cmp	r7, r6
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 80026b6:	682c      	ldr	r4, [r5, #0]

			//-- Read DATA
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
 80026b8:	d92c      	bls.n	8002714 <Hw_I2C_IMU_ReadRegs+0x258>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 80026ba:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80026be:	602c      	str	r4, [r5, #0]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80026c0:	f242 7110 	movw	r1, #10000	; 0x2710
 80026c4:	e007      	b.n	80026d6 <Hw_I2C_IMU_ReadRegs+0x21a>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80026c6:	6804      	ldr	r4, [r0, #0]
 80026c8:	940b      	str	r4, [sp, #44]	; 0x2c

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80026ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80026cc:	f014 0f40 	tst.w	r4, #64	; 0x40
 80026d0:	d107      	bne.n	80026e2 <Hw_I2C_IMU_ReadRegs+0x226>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80026d2:	3901      	subs	r1, #1
 80026d4:	d026      	beq.n	8002724 <Hw_I2C_IMU_ReadRegs+0x268>
	{
		Reg = *reg_addr;
 80026d6:	6804      	ldr	r4, [r0, #0]
 80026d8:	3901      	subs	r1, #1
 80026da:	940b      	str	r4, [sp, #44]	; 0x2c

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80026dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80026de:	0664      	lsls	r4, r4, #25
 80026e0:	d5f1      	bpl.n	80026c6 <Hw_I2C_IMU_ReadRegs+0x20a>


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 80026e2:	f8dc 4000 	ldr.w	r4, [ip]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80026e6:	1c71      	adds	r1, r6, #1


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 80026e8:	5594      	strb	r4, [r2, r6]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80026ea:	b2ce      	uxtb	r6, r1
 80026ec:	42b3      	cmp	r3, r6
 80026ee:	d8e1      	bhi.n	80026b4 <Hw_I2C_IMU_ReadRegs+0x1f8>
	}


	if( Err == 0 )
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <Hw_I2C_IMU_ReadRegs+0x270>)
 80026f2:	4798      	blx	r3
 80026f4:	e002      	b.n	80026fc <Hw_I2C_IMU_ReadRegs+0x240>
    u16 Err = 0;
	u8  i;
	u32 TimeOut;
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;
 80026f6:	461f      	mov	r7, r3
 80026f8:	e6e7      	b.n	80024ca <Hw_I2C_IMU_ReadRegs+0xe>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 80026fa:	2002      	movs	r0, #2
	}
	

    return Err;

}
 80026fc:	b00d      	add	sp, #52	; 0x34
 80026fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8002700:	f245 4318 	movw	r3, #21528	; 0x5418
 8002704:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002708:	681a      	ldr	r2, [r3, #0]

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 800270a:	2003      	movs	r0, #3
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 800270c:	9202      	str	r2, [sp, #8]
 800270e:	e7f5      	b.n	80026fc <Hw_I2C_IMU_ReadRegs+0x240>

			
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 8002710:	2004      	movs	r0, #4
 8002712:	e7f3      	b.n	80026fc <Hw_I2C_IMU_ReadRegs+0x240>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 8002714:	f424 6180 	bic.w	r1, r4, #1024	; 0x400
 8002718:	6029      	str	r1, [r5, #0]
					SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 800271a:	682c      	ldr	r4, [r5, #0]
 800271c:	f444 7100 	orr.w	r1, r4, #512	; 0x200
 8002720:	6029      	str	r1, [r5, #0]
 8002722:	e7cd      	b.n	80026c0 <Hw_I2C_IMU_ReadRegs+0x204>
				{
					ptr_reg[i] = REG_I2C1_DR;
				}
				else
				{
					Err = HW_I2C_ERR_RXE;
 8002724:	2005      	movs	r0, #5
 8002726:	e7e9      	b.n	80026fc <Hw_I2C_IMU_ReadRegs+0x240>


			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, 10000 );	// BTF
			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_STOP;
 8002728:	2006      	movs	r0, #6
 800272a:	e7e7      	b.n	80026fc <Hw_I2C_IMU_ReadRegs+0x240>
 800272c:	08002489 	.word	0x08002489

08002730 <Hw_I2C_IMU_MPU6050_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	4606      	mov	r6, r0
 8002734:	460d      	mov	r5, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, len );
 8002736:	f242 44bd 	movw	r4, #9405	; 0x24bd
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 800273a:	4613      	mov	r3, r2
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, len );
 800273c:	2068      	movs	r0, #104	; 0x68
 800273e:	4631      	mov	r1, r6
 8002740:	462a      	mov	r2, r5
 8002742:	f6c0 0400 	movt	r4, #2048	; 0x800
 8002746:	47a0      	blx	r4
}
 8002748:	bd70      	pop	{r4, r5, r6, pc}
 800274a:	bf00      	nop

0800274c <Hw_I2C_IMU_MPU6050_ReadReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 800274c:	4603      	mov	r3, r0
 800274e:	b510      	push	{r4, lr}
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, 1 );
 8002750:	f242 44bd 	movw	r4, #9405	; 0x24bd
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 8002754:	460a      	mov	r2, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, 1 );
 8002756:	2068      	movs	r0, #104	; 0x68
 8002758:	4619      	mov	r1, r3
 800275a:	f6c0 0400 	movt	r4, #2048	; 0x800
 800275e:	2301      	movs	r3, #1
 8002760:	47a0      	blx	r4
}
 8002762:	bd10      	pop	{r4, pc}

08002764 <Hw_I2C_IMU_WriteRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 8002764:	b570      	push	{r4, r5, r6, lr}

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8002766:	f44f 44a8 	mov.w	r4, #21504	; 0x5400
 800276a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800276e:	6826      	ldr	r6, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002770:	f245 4514 	movw	r5, #21524	; 0x5414

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8002774:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 8002778:	6026      	str	r6, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 800277a:	b086      	sub	sp, #24

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 800277c:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002780:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002784:	e007      	b.n	8002796 <Hw_I2C_IMU_WriteRegs+0x32>
 8002786:	682e      	ldr	r6, [r5, #0]
 8002788:	9600      	str	r6, [sp, #0]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800278a:	9e00      	ldr	r6, [sp, #0]
 800278c:	f016 0f01 	tst.w	r6, #1
 8002790:	d108      	bne.n	80027a4 <Hw_I2C_IMU_WriteRegs+0x40>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002792:	3c01      	subs	r4, #1
 8002794:	d07d      	beq.n	8002892 <Hw_I2C_IMU_WriteRegs+0x12e>
	{
		Reg = *reg_addr;
 8002796:	682e      	ldr	r6, [r5, #0]
 8002798:	3c01      	subs	r4, #1
 800279a:	9600      	str	r6, [sp, #0]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800279c:	9e00      	ldr	r6, [sp, #0]
 800279e:	f016 0f01 	tst.w	r6, #1
 80027a2:	d0f0      	beq.n	8002786 <Hw_I2C_IMU_WriteRegs+0x22>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 80027a4:	f245 4510 	movw	r5, #21520	; 0x5410
 80027a8:	0040      	lsls	r0, r0, #1
 80027aa:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80027ae:	f245 4414 	movw	r4, #21524	; 0x5414
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 80027b2:	6028      	str	r0, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80027b4:	f2c4 0400 	movt	r4, #16384	; 0x4000
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 80027b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80027bc:	e007      	b.n	80027ce <Hw_I2C_IMU_WriteRegs+0x6a>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80027be:	6825      	ldr	r5, [r4, #0]
 80027c0:	9501      	str	r5, [sp, #4]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80027c2:	9d01      	ldr	r5, [sp, #4]
 80027c4:	f015 0f02 	tst.w	r5, #2
 80027c8:	d107      	bne.n	80027da <Hw_I2C_IMU_WriteRegs+0x76>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80027ca:	3801      	subs	r0, #1
 80027cc:	d059      	beq.n	8002882 <Hw_I2C_IMU_WriteRegs+0x11e>
	{
		Reg = *reg_addr;
 80027ce:	6825      	ldr	r5, [r4, #0]
 80027d0:	3801      	subs	r0, #1
 80027d2:	9501      	str	r5, [sp, #4]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80027d4:	9d01      	ldr	r5, [sp, #4]
 80027d6:	07ad      	lsls	r5, r5, #30
 80027d8:	d5f1      	bpl.n	80027be <Hw_I2C_IMU_WriteRegs+0x5a>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80027da:	f245 4518 	movw	r5, #21528	; 0x5418
 80027de:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80027e2:	f245 4414 	movw	r4, #21524	; 0x5414
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80027e6:	6828      	ldr	r0, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80027e8:	f2c4 0400 	movt	r4, #16384	; 0x4000
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80027ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80027f0:	e007      	b.n	8002802 <Hw_I2C_IMU_WriteRegs+0x9e>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80027f2:	6825      	ldr	r5, [r4, #0]
 80027f4:	9502      	str	r5, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80027f6:	9d02      	ldr	r5, [sp, #8]
 80027f8:	f015 0f80 	tst.w	r5, #128	; 0x80
 80027fc:	d107      	bne.n	800280e <Hw_I2C_IMU_WriteRegs+0xaa>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80027fe:	3801      	subs	r0, #1
 8002800:	d06b      	beq.n	80028da <Hw_I2C_IMU_WriteRegs+0x176>
	{
		Reg = *reg_addr;
 8002802:	6825      	ldr	r5, [r4, #0]
 8002804:	3801      	subs	r0, #1
 8002806:	9502      	str	r5, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002808:	9d02      	ldr	r5, [sp, #8]
 800280a:	062d      	lsls	r5, r5, #24
 800280c:	d5f1      	bpl.n	80027f2 <Hw_I2C_IMU_WriteRegs+0x8e>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800280e:	f245 4414 	movw	r4, #21524	; 0x5414

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002812:	f242 7010 	movw	r0, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002816:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800281a:	e007      	b.n	800282c <Hw_I2C_IMU_WriteRegs+0xc8>
 800281c:	6825      	ldr	r5, [r4, #0]
 800281e:	9503      	str	r5, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002820:	9d03      	ldr	r5, [sp, #12]
 8002822:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002826:	d108      	bne.n	800283a <Hw_I2C_IMU_WriteRegs+0xd6>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002828:	3801      	subs	r0, #1
 800282a:	d056      	beq.n	80028da <Hw_I2C_IMU_WriteRegs+0x176>
	{
		Reg = *reg_addr;
 800282c:	6825      	ldr	r5, [r4, #0]
 800282e:	3801      	subs	r0, #1
 8002830:	9503      	str	r5, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002832:	9d03      	ldr	r5, [sp, #12]
 8002834:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002838:	d0f0      	beq.n	800281c <Hw_I2C_IMU_WriteRegs+0xb8>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;	
 800283a:	f245 4610 	movw	r6, #21520	; 0x5410
 800283e:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8002842:	6031      	str	r1, [r6, #0]



			for( i=0; i<len; i++ )
 8002844:	2b00      	cmp	r3, #0
 8002846:	d04a      	beq.n	80028de <Hw_I2C_IMU_WriteRegs+0x17a>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002848:	f245 4414 	movw	r4, #21524	; 0x5414

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 800284c:	2500      	movs	r5, #0
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800284e:	f2c4 0400 	movt	r4, #16384	; 0x4000

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002852:	f242 7110 	movw	r1, #10000	; 0x2710
 8002856:	e006      	b.n	8002866 <Hw_I2C_IMU_WriteRegs+0x102>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002858:	6820      	ldr	r0, [r4, #0]
 800285a:	9004      	str	r0, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800285c:	9804      	ldr	r0, [sp, #16]
 800285e:	0600      	lsls	r0, r0, #24
 8002860:	d407      	bmi.n	8002872 <Hw_I2C_IMU_WriteRegs+0x10e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002862:	3901      	subs	r1, #1
 8002864:	d017      	beq.n	8002896 <Hw_I2C_IMU_WriteRegs+0x132>
	{
		Reg = *reg_addr;
 8002866:	6820      	ldr	r0, [r4, #0]
 8002868:	3901      	subs	r1, #1
 800286a:	9004      	str	r0, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800286c:	9804      	ldr	r0, [sp, #16]
 800286e:	0600      	lsls	r0, r0, #24
 8002870:	d5f2      	bpl.n	8002858 <Hw_I2C_IMU_WriteRegs+0xf4>
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 8002872:	5d50      	ldrb	r0, [r2, r5]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 8002874:	3501      	adds	r5, #1
 8002876:	b2ed      	uxtb	r5, r5
 8002878:	429d      	cmp	r5, r3
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 800287a:	6030      	str	r0, [r6, #0]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 800287c:	d3e9      	bcc.n	8002852 <Hw_I2C_IMU_WriteRegs+0xee>
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
    u16 Ret = 0;
    u16 Err = 0;
 800287e:	2000      	movs	r0, #0
 8002880:	e00a      	b.n	8002898 <Hw_I2C_IMU_WriteRegs+0x134>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8002882:	f245 4318 	movw	r3, #21528	; 0x5418
 8002886:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800288a:	681b      	ldr	r3, [r3, #0]

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 800288c:	2003      	movs	r0, #3
		Err = Hw_I2C_IMU_GetErrStatus();
	}
	

    return Err;
}
 800288e:	b006      	add	sp, #24
 8002890:	bd70      	pop	{r4, r5, r6, pc}
			SET_BIT( REG_I2C1_CR1, 8 );

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 0, 10000 );
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 8002892:	2002      	movs	r0, #2
 8002894:	e7fb      	b.n	800288e <Hw_I2C_IMU_WriteRegs+0x12a>
			for( i=0; i<len; i++ )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
				if( Ret != 0 )
				{
					Err = HW_I2C_ERR_TXE;
 8002896:	2004      	movs	r0, #4
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002898:	f245 4214 	movw	r2, #21524	; 0x5414
			for( i=0; i<len; i++ )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
				if( Ret != 0 )
				{
					Err = HW_I2C_ERR_TXE;
 800289c:	f242 7310 	movw	r3, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80028a0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80028a4:	e006      	b.n	80028b4 <Hw_I2C_IMU_WriteRegs+0x150>
 80028a6:	6811      	ldr	r1, [r2, #0]
 80028a8:	9105      	str	r1, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80028aa:	9905      	ldr	r1, [sp, #20]
 80028ac:	0749      	lsls	r1, r1, #29
 80028ae:	d407      	bmi.n	80028c0 <Hw_I2C_IMU_WriteRegs+0x15c>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80028b0:	3b01      	subs	r3, #1
 80028b2:	d01d      	beq.n	80028f0 <Hw_I2C_IMU_WriteRegs+0x18c>
	{
		Reg = *reg_addr;
 80028b4:	6811      	ldr	r1, [r2, #0]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	9105      	str	r1, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80028ba:	9905      	ldr	r1, [sp, #20]
 80028bc:	0749      	lsls	r1, r1, #29
 80028be:	d5f2      	bpl.n	80028a6 <Hw_I2C_IMU_WriteRegs+0x142>
					Err = HW_I2C_ERR_STOP;
					break;
				}
			}

			SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 80028c0:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 80028c4:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80028c8:	680a      	ldr	r2, [r1, #0]
 80028ca:	f442 7300 	orr.w	r3, r2, #512	; 0x200
 80028ce:	600b      	str	r3, [r1, #0]
			break;
	}


	if( Err == 0 )
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d1dc      	bne.n	800288e <Hw_I2C_IMU_WriteRegs+0x12a>
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 80028d4:	4807      	ldr	r0, [pc, #28]	; (80028f4 <Hw_I2C_IMU_WriteRegs+0x190>)
 80028d6:	4780      	blx	r0
 80028d8:	e7d9      	b.n	800288e <Hw_I2C_IMU_WriteRegs+0x12a>
			//Lb_printf("S2 %x\n", REG_I2C1_SR2);
				
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 80028da:	2004      	movs	r0, #4
 80028dc:	e7d7      	b.n	800288e <Hw_I2C_IMU_WriteRegs+0x12a>
					Err = HW_I2C_ERR_STOP;
					break;
				}
			}

			SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 80028de:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 80028e2:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80028e6:	680a      	ldr	r2, [r1, #0]
 80028e8:	f442 7300 	orr.w	r3, r2, #512	; 0x200
 80028ec:	600b      	str	r3, [r1, #0]
 80028ee:	e7f1      	b.n	80028d4 <Hw_I2C_IMU_WriteRegs+0x170>
			if( len > 0 )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, 10000 );	// BTF
				if( Ret != 0 ) 
				{
					Err = HW_I2C_ERR_STOP;
 80028f0:	2006      	movs	r0, #6
 80028f2:	e7cc      	b.n	800288e <Hw_I2C_IMU_WriteRegs+0x12a>
 80028f4:	08002489 	.word	0x08002489

080028f8 <Hw_I2C_IMU_MPU6050_WriteReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_WriteReg( u8 reg_addr, u8 reg_data )
{
 80028f8:	b510      	push	{r4, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	4603      	mov	r3, r0
 80028fe:	aa02      	add	r2, sp, #8
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, &reg_data, 1 );
 8002900:	f242 7465 	movw	r4, #10085	; 0x2765
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_WriteReg( u8 reg_addr, u8 reg_data )
{
 8002904:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, &reg_data, 1 );
 8002908:	2068      	movs	r0, #104	; 0x68
 800290a:	4619      	mov	r1, r3
 800290c:	f6c0 0400 	movt	r4, #2048	; 0x800
 8002910:	2301      	movs	r3, #1
 8002912:	47a0      	blx	r4
}
 8002914:	b002      	add	sp, #8
 8002916:	bd10      	pop	{r4, pc}

08002918 <Hw_MPU6050_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_MPU6050_Init( void )
{
 8002918:	b510      	push	{r4, lr}
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE ) return TRUE;
 800291a:	4c12      	ldr	r4, [pc, #72]	; (8002964 <Hw_MPU6050_Init+0x4c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_MPU6050_Init( void )
{
 800291c:	b086      	sub	sp, #24
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE ) return TRUE;
 800291e:	7820      	ldrb	r0, [r4, #0]
 8002920:	2801      	cmp	r0, #1
 8002922:	d010      	beq.n	8002946 <Hw_MPU6050_Init+0x2e>


	Hw_Wait_ms(36);
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <Hw_MPU6050_Init+0x50>)
 8002926:	2024      	movs	r0, #36	; 0x24
 8002928:	4798      	blx	r3


	//-- I2C 초기화
	//
	Hw_I2C_IMU_Init();	
 800292a:	4810      	ldr	r0, [pc, #64]	; (800296c <Hw_MPU6050_Init+0x54>)
 800292c:	4780      	blx	r0


	while(1)
	{

		Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_WHO_AM_I, RegData );
 800292e:	a901      	add	r1, sp, #4
 8002930:	2075      	movs	r0, #117	; 0x75
 8002932:	4a0f      	ldr	r2, [pc, #60]	; (8002970 <Hw_MPU6050_Init+0x58>)
 8002934:	4790      	blx	r2
		if( Err != 0 )
 8002936:	4601      	mov	r1, r0
 8002938:	b138      	cbz	r0, 800294a <Hw_MPU6050_Init+0x32>
		{
			Lb_printf("Can't find MPU6050 \n");
 800293a:	480e      	ldr	r0, [pc, #56]	; (8002974 <Hw_MPU6050_Init+0x5c>)
 800293c:	490e      	ldr	r1, [pc, #56]	; (8002978 <Hw_MPU6050_Init+0x60>)
 800293e:	4788      	blx	r1
		}

		break;
	}

	power_on = TRUE;
 8002940:	2001      	movs	r0, #1
 8002942:	7020      	strb	r0, [r4, #0]


	if( Err != 0 ) Ret = FALSE;
 8002944:	2000      	movs	r0, #0


	return Ret;
}
 8002946:	b006      	add	sp, #24
 8002948:	bd10      	pop	{r4, pc}
			Lb_printf("Can't find MPU6050 \n");
			break;
		}


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
 800294a:	206b      	movs	r0, #107	; 0x6b
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <Hw_MPU6050_Init+0x64>)
 800294e:	4798      	blx	r3
		if( Err != 0 )
 8002950:	4601      	mov	r1, r0
 8002952:	b910      	cbnz	r0, 800295a <Hw_MPU6050_Init+0x42>
		}

		break;
	}

	power_on = TRUE;
 8002954:	2001      	movs	r0, #1
 8002956:	7020      	strb	r0, [r4, #0]
 8002958:	e7f5      	b.n	8002946 <Hw_MPU6050_Init+0x2e>


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
		if( Err != 0 )
		{
			Lb_printf("Err write MPU6050_RA_PWR_MGMT_1 : %d\n", Err);
 800295a:	4809      	ldr	r0, [pc, #36]	; (8002980 <Hw_MPU6050_Init+0x68>)
 800295c:	4a06      	ldr	r2, [pc, #24]	; (8002978 <Hw_MPU6050_Init+0x60>)
 800295e:	4790      	blx	r2
			break;
 8002960:	e7ee      	b.n	8002940 <Hw_MPU6050_Init+0x28>
 8002962:	bf00      	nop
 8002964:	20000482 	.word	0x20000482
 8002968:	0800126d 	.word	0x0800126d
 800296c:	08002405 	.word	0x08002405
 8002970:	0800274d 	.word	0x0800274d
 8002974:	080048a4 	.word	0x080048a4
 8002978:	08000b25 	.word	0x08000b25
 800297c:	080028f9 	.word	0x080028f9
 8002980:	080048bc 	.word	0x080048bc

08002984 <Hw_MPU6050_GetData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_GetData( HW_MPU6050_DATA_OBJ *ptr_data )
{
 8002984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002988:	b089      	sub	sp, #36	; 0x24
 800298a:	4604      	mov	r4, r0
	s16 Temp;

	HW_MPU6050_RAW_DATA_OBJ raw_data;


	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );
 800298c:	a904      	add	r1, sp, #16
 800298e:	203b      	movs	r0, #59	; 0x3b
 8002990:	220e      	movs	r2, #14
 8002992:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <Hw_MPU6050_GetData+0xa8>)
 8002994:	4798      	blx	r3

	if( Err == 0 )
 8002996:	2800      	cmp	r0, #0
 8002998:	d145      	bne.n	8002a26 <Hw_MPU6050_GetData+0xa2>

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
 800299a:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800299e:	f89d 1017 	ldrb.w	r1, [sp, #23]
		Temp = Temp/340 + 36;
 80029a2:	f246 0b61 	movw	fp, #24673	; 0x6061

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
 80029a6:	ea41 2502 	orr.w	r5, r1, r2, lsl #8
		Temp = Temp/340 + 36;
 80029aa:	b22b      	sxth	r3, r5
 80029ac:	f2c6 0b60 	movt	fp, #24672	; 0x6060
 80029b0:	fb8b 2b03 	smull	r2, fp, fp, r3
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 80029b4:	f89d 2019 	ldrb.w	r2, [sp, #25]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 80029b8:	f89d 101a 	ldrb.w	r1, [sp, #26]
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 80029bc:	9201      	str	r2, [sp, #4]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 80029be:	f89d 201b 	ldrb.w	r2, [sp, #27]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 80029c2:	f89d a010 	ldrb.w	sl, [sp, #16]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 80029c6:	f89d 8012 	ldrb.w	r8, [sp, #18]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 80029ca:	f89d 7014 	ldrb.w	r7, [sp, #20]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 80029ce:	f89d 9011 	ldrb.w	r9, [sp, #17]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 80029d2:	f89d c013 	ldrb.w	ip, [sp, #19]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 80029d6:	f89d 6015 	ldrb.w	r6, [sp, #21]

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 80029da:	9102      	str	r1, [sp, #8]
 80029dc:	9203      	str	r2, [sp, #12]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 80029de:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 80029e2:	ea4c 2e08 	orr.w	lr, ip, r8, lsl #8
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 80029e6:	ea46 2607 	orr.w	r6, r6, r7, lsl #8

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 80029ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80029ee:	9f01      	ldr	r7, [sp, #4]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 80029f0:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80029f4:	f89d 201d 	ldrb.w	r2, [sp, #29]

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 80029f8:	17db      	asrs	r3, r3, #31
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 80029fa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80029fe:	f8dd a008 	ldr.w	sl, [sp, #8]
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8002a02:	ebc3 13eb 	rsb	r3, r3, fp, asr #7
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8002a06:	ea47 2505 	orr.w	r5, r7, r5, lsl #8
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8002a0a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8002a0e:	ea48 270a 	orr.w	r7, r8, sl, lsl #8
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8002a12:	3324      	adds	r3, #36	; 0x24

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 8002a14:	f8a4 9000 	strh.w	r9, [r4]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8002a18:	f8a4 e002 	strh.w	lr, [r4, #2]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 8002a1c:	80a6      	strh	r6, [r4, #4]

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8002a1e:	8125      	strh	r5, [r4, #8]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8002a20:	8167      	strh	r7, [r4, #10]
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8002a22:	81a1      	strh	r1, [r4, #12]

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
		ptr_data->Temp = Temp;
 8002a24:	80e3      	strh	r3, [r4, #6]
	}

	return Err;
}
 8002a26:	b009      	add	sp, #36	; 0x24
 8002a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a2c:	08002731 	.word	0x08002731

08002a30 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8002a30:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <EP1_IN_Callback+0x58>)
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	2a01      	cmp	r2, #1
 8002a38:	d000      	beq.n	8002a3c <EP1_IN_Callback+0xc>
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 8002a3c:	4c13      	ldr	r4, [pc, #76]	; (8002a8c <EP1_IN_Callback+0x5c>)
 8002a3e:	6820      	ldr	r0, [r4, #0]
 8002a40:	b300      	cbz	r0, 8002a84 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8002a42:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002a44:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8002a46:	d814      	bhi.n	8002a72 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002a48:	6811      	ldr	r1, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 8002a4a:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 8002a4c:	1808      	adds	r0, r1, r0
 8002a4e:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 8002a50:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002a52:	b28b      	uxth	r3, r1
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8002a54:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8002a56:	480f      	ldr	r0, [pc, #60]	; (8002a94 <EP1_IN_Callback+0x64>)
 8002a58:	21c0      	movs	r1, #192	; 0xc0
 8002a5a:	18c0      	adds	r0, r0, r3
 8002a5c:	462a      	mov	r2, r5
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <EP1_IN_Callback+0x68>)
 8002a60:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8002a62:	2001      	movs	r0, #1
 8002a64:	4629      	mov	r1, r5
 8002a66:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <EP1_IN_Callback+0x6c>)
 8002a68:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	490c      	ldr	r1, [pc, #48]	; (8002aa0 <EP1_IN_Callback+0x70>)
 8002a6e:	4788      	blx	r1
 8002a70:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002a72:	6815      	ldr	r5, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8002a74:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8002a76:	f105 0140 	add.w	r1, r5, #64	; 0x40
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002a7a:	b2ab      	uxth	r3, r5
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8002a7c:	6020      	str	r0, [r4, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8002a7e:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8002a80:	2540      	movs	r5, #64	; 0x40
 8002a82:	e7e8      	b.n	8002a56 <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8002a84:	7018      	strb	r0, [r3, #0]
 8002a86:	bd38      	pop	{r3, r4, r5, pc}
 8002a88:	200004a4 	.word	0x200004a4
 8002a8c:	200004b0 	.word	0x200004b0
 8002a90:	200004ac 	.word	0x200004ac
 8002a94:	20000df0 	.word	0x20000df0
 8002a98:	08004019 	.word	0x08004019
 8002a9c:	080042c9 	.word	0x080042c9
 8002aa0:	0800418d 	.word	0x0800418d

08002aa4 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8002aa4:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8002aa6:	f640 5488 	movw	r4, #3464	; 0xd88
 8002aaa:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002aae:	f244 3389 	movw	r3, #17289	; 0x4389
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002ab8:	2003      	movs	r0, #3
 8002aba:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 8002abc:	f243 42b9 	movw	r2, #13497	; 0x34b9
 8002ac0:	b2c1      	uxtb	r1, r0
 8002ac2:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	4790      	blx	r2
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 8002aca:	f244 11b1 	movw	r1, #16817	; 0x41b1
 8002ace:	2003      	movs	r0, #3
 8002ad0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002ad4:	4788      	blx	r1
 8002ad6:	bd10      	pop	{r4, pc}

08002ad8 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 8002ad8:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <SOF_Callback+0x24>)
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	2805      	cmp	r0, #5
 8002ae0:	d000      	beq.n	8002ae4 <SOF_Callback+0xc>
 8002ae2:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <SOF_Callback+0x28>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	1c51      	adds	r1, r2, #1
 8002aea:	2a05      	cmp	r2, #5
 8002aec:	6019      	str	r1, [r3, #0]
 8002aee:	d1f8      	bne.n	8002ae2 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8002af0:	2000      	movs	r0, #0
 8002af2:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <SOF_Callback+0x2c>)
 8002af6:	4798      	blx	r3
 8002af8:	e7f3      	b.n	8002ae2 <SOF_Callback+0xa>
 8002afa:	bf00      	nop
 8002afc:	20000498 	.word	0x20000498
 8002b00:	20000484 	.word	0x20000484
 8002b04:	08003529 	.word	0x08003529

08002b08 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8002b08:	f645 4244 	movw	r2, #23620	; 0x5c44
 8002b0c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002b10:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8002b12:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8002b14:	4c8f      	ldr	r4, [pc, #572]	; (8002d54 <USB_Istr+0x24c>)
 8002b16:	b298      	uxth	r0, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8002b18:	4d8f      	ldr	r5, [pc, #572]	; (8002d58 <USB_Istr+0x250>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8002b1a:	8020      	strh	r0, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8002b1c:	8821      	ldrh	r1, [r4, #0]
 8002b1e:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8002b20:	b089      	sub	sp, #36	; 0x24
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8002b22:	4019      	ands	r1, r3
 8002b24:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8002b28:	b281      	uxth	r1, r0
 8002b2a:	2900      	cmp	r1, #0
 8002b2c:	d168      	bne.n	8002c00 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8002b2e:	8822      	ldrh	r2, [r4, #0]
 8002b30:	f402 4100 	and.w	r1, r2, #32768	; 0x8000
 8002b34:	420b      	tst	r3, r1
 8002b36:	d15f      	bne.n	8002bf8 <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8002b38:	8822      	ldrh	r2, [r4, #0]
 8002b3a:	f402 6180 	and.w	r1, r2, #1024	; 0x400
 8002b3e:	420b      	tst	r3, r1
 8002b40:	d14e      	bne.n	8002be0 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8002b42:	8820      	ldrh	r0, [r4, #0]
 8002b44:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
 8002b48:	4213      	tst	r3, r2
 8002b4a:	d006      	beq.n	8002b5a <USB_Istr+0x52>
  {
    _SetISTR((uint16_t)CLR_ERR);
 8002b4c:	f645 4044 	movw	r0, #23620	; 0x5c44
 8002b50:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002b54:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8002b58:	6001      	str	r1, [r0, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8002b5a:	8822      	ldrh	r2, [r4, #0]
 8002b5c:	f402 5080 	and.w	r0, r2, #4096	; 0x1000
 8002b60:	4203      	tst	r3, r0
 8002b62:	d131      	bne.n	8002bc8 <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8002b64:	8820      	ldrh	r0, [r4, #0]
 8002b66:	f400 6100 	and.w	r1, r0, #2048	; 0x800
 8002b6a:	420b      	tst	r3, r1
 8002b6c:	d00e      	beq.n	8002b8c <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 8002b6e:	4b7b      	ldr	r3, [pc, #492]	; (8002d5c <USB_Istr+0x254>)
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	2a00      	cmp	r2, #0
 8002b74:	d125      	bne.n	8002bc2 <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8002b76:	2002      	movs	r0, #2
 8002b78:	4979      	ldr	r1, [pc, #484]	; (8002d60 <USB_Istr+0x258>)
 8002b7a:	4788      	blx	r1
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8002b7c:	f645 4244 	movw	r2, #23620	; 0x5c44
 8002b80:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002b84:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8002b88:	882b      	ldrh	r3, [r5, #0]
 8002b8a:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8002b8c:	8820      	ldrh	r0, [r4, #0]
 8002b8e:	f400 7280 	and.w	r2, r0, #256	; 0x100
 8002b92:	4213      	tst	r3, r2
 8002b94:	d013      	beq.n	8002bbe <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8002b96:	f645 4344 	movw	r3, #23620	; 0x5c44
 8002b9a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8002b9e:	f645 4048 	movw	r0, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8002ba2:	f64f 61ff 	movw	r1, #65279	; 0xfeff
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8002ba6:	f2c4 0000 	movt	r0, #16384	; 0x4000

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8002baa:	6019      	str	r1, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8002bac:	6802      	ldr	r2, [r0, #0]
 8002bae:	0410      	lsls	r0, r2, #16
 8002bb0:	d432      	bmi.n	8002c18 <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8002bb2:	4b6c      	ldr	r3, [pc, #432]	; (8002d64 <USB_Istr+0x25c>)
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	6018      	str	r0, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8002bb8:	2007      	movs	r0, #7
 8002bba:	4b69      	ldr	r3, [pc, #420]	; (8002d60 <USB_Istr+0x258>)
 8002bbc:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8002bbe:	b009      	add	sp, #36	; 0x24
 8002bc0:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 8002bc2:	4869      	ldr	r0, [pc, #420]	; (8002d68 <USB_Istr+0x260>)
 8002bc4:	4780      	blx	r0
 8002bc6:	e7d9      	b.n	8002b7c <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8002bc8:	f645 4344 	movw	r3, #23620	; 0x5c44
 8002bcc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002bd0:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8002bd4:	6019      	str	r1, [r3, #0]
    Resume(RESUME_EXTERNAL);
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	4a61      	ldr	r2, [pc, #388]	; (8002d60 <USB_Istr+0x258>)
 8002bda:	4790      	blx	r2
 8002bdc:	882b      	ldrh	r3, [r5, #0]
 8002bde:	e7c1      	b.n	8002b64 <USB_Istr+0x5c>
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
    Device_Property.Reset();
 8002be0:	4a62      	ldr	r2, [pc, #392]	; (8002d6c <USB_Istr+0x264>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8002be2:	f645 4344 	movw	r3, #23620	; 0x5c44
 8002be6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002bea:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8002bee:	6018      	str	r0, [r3, #0]
    Device_Property.Reset();
 8002bf0:	6851      	ldr	r1, [r2, #4]
 8002bf2:	4788      	blx	r1
 8002bf4:	882b      	ldrh	r3, [r5, #0]
 8002bf6:	e7a4      	b.n	8002b42 <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8002bf8:	485d      	ldr	r0, [pc, #372]	; (8002d70 <USB_Istr+0x268>)
 8002bfa:	4780      	blx	r0
 8002bfc:	882b      	ldrh	r3, [r5, #0]
 8002bfe:	e79b      	b.n	8002b38 <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8002c00:	4b5c      	ldr	r3, [pc, #368]	; (8002d74 <USB_Istr+0x26c>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8002c02:	f64f 50ff 	movw	r0, #65023	; 0xfdff
 8002c06:	6010      	str	r0, [r2, #0]
    bIntPackSOF++;
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	1c51      	adds	r1, r2, #1
 8002c0c:	b2c8      	uxtb	r0, r1
 8002c0e:	7018      	strb	r0, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8002c10:	4b59      	ldr	r3, [pc, #356]	; (8002d78 <USB_Istr+0x270>)
 8002c12:	4798      	blx	r3
 8002c14:	882b      	ldrh	r3, [r5, #0]
 8002c16:	e78a      	b.n	8002b2e <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8002c18:	4852      	ldr	r0, [pc, #328]	; (8002d64 <USB_Istr+0x25c>)
 8002c1a:	6801      	ldr	r1, [r0, #0]
 8002c1c:	1c4a      	adds	r2, r1, #1
 8002c1e:	6002      	str	r2, [r0, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8002c20:	6801      	ldr	r1, [r0, #0]
 8002c22:	2903      	cmp	r1, #3
 8002c24:	d9c8      	bls.n	8002bb8 <USB_Istr+0xb0>
 8002c26:	f645 4240 	movw	r2, #23616	; 0x5c40
 8002c2a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002c2e:	6811      	ldr	r1, [r2, #0]
 8002c30:	0709      	lsls	r1, r1, #28
 8002c32:	d4c1      	bmi.n	8002bb8 <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8002c34:	6815      	ldr	r5, [r2, #0]
 8002c36:	4951      	ldr	r1, [pc, #324]	; (8002d7c <USB_Istr+0x274>)
 8002c38:	b2ad      	uxth	r5, r5
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002c3a:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8002c3e:	600d      	str	r5, [r1, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002c40:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002c44:	6825      	ldr	r5, [r4, #0]
 8002c46:	f645 4404 	movw	r4, #23556	; 0x5c04
 8002c4a:	b2ad      	uxth	r5, r5
 8002c4c:	9500      	str	r5, [sp, #0]
 8002c4e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002c52:	6825      	ldr	r5, [r4, #0]
 8002c54:	f645 4408 	movw	r4, #23560	; 0x5c08
 8002c58:	b2ad      	uxth	r5, r5
 8002c5a:	9501      	str	r5, [sp, #4]
 8002c5c:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002c60:	6825      	ldr	r5, [r4, #0]
 8002c62:	f645 440c 	movw	r4, #23564	; 0x5c0c
 8002c66:	b2ad      	uxth	r5, r5
 8002c68:	9502      	str	r5, [sp, #8]
 8002c6a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002c6e:	6825      	ldr	r5, [r4, #0]
 8002c70:	f645 4410 	movw	r4, #23568	; 0x5c10
 8002c74:	b2ad      	uxth	r5, r5
 8002c76:	9503      	str	r5, [sp, #12]
 8002c78:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002c7c:	6825      	ldr	r5, [r4, #0]
 8002c7e:	f645 4414 	movw	r4, #23572	; 0x5c14
 8002c82:	b2ad      	uxth	r5, r5
 8002c84:	9504      	str	r5, [sp, #16]
 8002c86:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002c8a:	6825      	ldr	r5, [r4, #0]
 8002c8c:	f645 4418 	movw	r4, #23576	; 0x5c18
 8002c90:	b2ad      	uxth	r5, r5
 8002c92:	9505      	str	r5, [sp, #20]
 8002c94:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002c98:	6825      	ldr	r5, [r4, #0]
 8002c9a:	f645 441c 	movw	r4, #23580	; 0x5c1c
 8002c9e:	b2ad      	uxth	r5, r5
 8002ca0:	9506      	str	r5, [sp, #24]
 8002ca2:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002ca6:	6824      	ldr	r4, [r4, #0]
 8002ca8:	b2a4      	uxth	r4, r4
 8002caa:	9407      	str	r4, [sp, #28]
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8002cac:	680c      	ldr	r4, [r1, #0]
 8002cae:	f044 0401 	orr.w	r4, r4, #1
 8002cb2:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 8002cb4:	680c      	ldr	r4, [r1, #0]
 8002cb6:	b2a4      	uxth	r4, r4
 8002cb8:	6014      	str	r4, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8002cba:	680c      	ldr	r4, [r1, #0]
 8002cbc:	f024 0401 	bic.w	r4, r4, #1
 8002cc0:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 8002cc2:	6809      	ldr	r1, [r1, #0]
 8002cc4:	b289      	uxth	r1, r1
 8002cc6:	6011      	str	r1, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8002cc8:	6819      	ldr	r1, [r3, #0]
 8002cca:	f645 4244 	movw	r2, #23620	; 0x5c44
 8002cce:	0549      	lsls	r1, r1, #21
 8002cd0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002cd4:	d5f8      	bpl.n	8002cc8 <USB_Istr+0x1c0>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8002cd6:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8002cda:	6013      	str	r3, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8002cdc:	9900      	ldr	r1, [sp, #0]
 8002cde:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8002ce2:	b28a      	uxth	r2, r1
 8002ce4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	9901      	ldr	r1, [sp, #4]
 8002cec:	f645 4304 	movw	r3, #23556	; 0x5c04
 8002cf0:	b28a      	uxth	r2, r1
 8002cf2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	9902      	ldr	r1, [sp, #8]
 8002cfa:	f645 4308 	movw	r3, #23560	; 0x5c08
 8002cfe:	b28a      	uxth	r2, r1
 8002d00:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	9903      	ldr	r1, [sp, #12]
 8002d08:	f645 430c 	movw	r3, #23564	; 0x5c0c
 8002d0c:	b28a      	uxth	r2, r1
 8002d0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	9904      	ldr	r1, [sp, #16]
 8002d16:	f645 4310 	movw	r3, #23568	; 0x5c10
 8002d1a:	b28a      	uxth	r2, r1
 8002d1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	9905      	ldr	r1, [sp, #20]
 8002d24:	f645 4314 	movw	r3, #23572	; 0x5c14
 8002d28:	b28a      	uxth	r2, r1
 8002d2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	9906      	ldr	r1, [sp, #24]
 8002d32:	f645 4318 	movw	r3, #23576	; 0x5c18
 8002d36:	b28a      	uxth	r2, r1
 8002d38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	9907      	ldr	r1, [sp, #28]
 8002d40:	f645 431c 	movw	r3, #23580	; 0x5c1c
 8002d44:	b28a      	uxth	r2, r1
 8002d46:	f2c4 0300 	movt	r3, #16384	; 0x4000
      
        esof_counter = 0;
 8002d4a:	2100      	movs	r1, #0
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8002d4c:	601a      	str	r2, [r3, #0]
      
        esof_counter = 0;
 8002d4e:	6001      	str	r1, [r0, #0]
 8002d50:	e732      	b.n	8002bb8 <USB_Istr+0xb0>
 8002d52:	bf00      	nop
 8002d54:	20000dc8 	.word	0x20000dc8
 8002d58:	20001624 	.word	0x20001624
 8002d5c:	2000049c 	.word	0x2000049c
 8002d60:	08003235 	.word	0x08003235
 8002d64:	20000490 	.word	0x20000490
 8002d68:	08003065 	.word	0x08003065
 8002d6c:	20000284 	.word	0x20000284
 8002d70:	080043c1 	.word	0x080043c1
 8002d74:	2000048c 	.word	0x2000048c
 8002d78:	08002ad9 	.word	0x08002ad9
 8002d7c:	20000488 	.word	0x20000488

08002d80 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <Virtual_Com_Port_SetConfiguration+0x10>)
 8002d82:	7a98      	ldrb	r0, [r3, #10]
 8002d84:	b110      	cbz	r0, 8002d8c <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8002d86:	4903      	ldr	r1, [pc, #12]	; (8002d94 <Virtual_Com_Port_SetConfiguration+0x14>)
 8002d88:	2205      	movs	r2, #5
 8002d8a:	600a      	str	r2, [r1, #0]
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20001600 	.word	0x20001600
 8002d94:	20000498 	.word	0x20000498

08002d98 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8002d98:	f240 4398 	movw	r3, #1176	; 0x498
 8002d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002da0:	2204      	movs	r2, #4
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop

08002da8 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <Virtual_Com_Port_Status_In+0x10>)
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	2a20      	cmp	r2, #32
 8002dae:	d101      	bne.n	8002db4 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8002db0:	2000      	movs	r0, #0
 8002db2:	7018      	strb	r0, [r3, #0]
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000494 	.word	0x20000494

08002dbc <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop

08002dc0 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8002dc0:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8002dc2:	b510      	push	{r4, lr}
 8002dc4:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8002dc6:	d003      	beq.n	8002dd0 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8002dc8:	2820      	cmp	r0, #32
 8002dca:	d011      	beq.n	8002df0 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8002dcc:	2002      	movs	r0, #2
 8002dce:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002dd0:	4a0f      	ldr	r2, [pc, #60]	; (8002e10 <Virtual_Com_Port_Data_Setup+0x50>)
 8002dd2:	6813      	ldr	r3, [r2, #0]
 8002dd4:	7818      	ldrb	r0, [r3, #0]
 8002dd6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8002dda:	2921      	cmp	r1, #33	; 0x21
 8002ddc:	d1f6      	bne.n	8002dcc <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8002dde:	490d      	ldr	r1, [pc, #52]	; (8002e14 <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002de0:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8002de2:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 8002de4:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002de6:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8002de8:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8002dea:	4788      	blx	r1
  return USB_SUCCESS;
 8002dec:	4620      	mov	r0, r4
 8002dee:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002df0:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <Virtual_Com_Port_Data_Setup+0x50>)
 8002df2:	6811      	ldr	r1, [r2, #0]
 8002df4:	7808      	ldrb	r0, [r1, #0]
 8002df6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8002dfa:	2921      	cmp	r1, #33	; 0x21
 8002dfc:	d003      	beq.n	8002e06 <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8002dfe:	4a06      	ldr	r2, [pc, #24]	; (8002e18 <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8002e00:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8002e02:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8002e04:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8002e06:	4c04      	ldr	r4, [pc, #16]	; (8002e18 <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8002e08:	4904      	ldr	r1, [pc, #16]	; (8002e1c <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 8002e0a:	7023      	strb	r3, [r4, #0]
 8002e0c:	e7e8      	b.n	8002de0 <Virtual_Com_Port_Data_Setup+0x20>
 8002e0e:	bf00      	nop
 8002e10:	20001620 	.word	0x20001620
 8002e14:	08002e55 	.word	0x08002e55
 8002e18:	20000494 	.word	0x20000494
 8002e1c:	08002e6d 	.word	0x08002e6d

08002e20 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002e20:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <Virtual_Com_Port_NoData_Setup+0x20>)
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	780a      	ldrb	r2, [r1, #0]
 8002e26:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8002e2a:	2b21      	cmp	r3, #33	; 0x21
 8002e2c:	d001      	beq.n	8002e32 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8002e2e:	2002      	movs	r0, #2
}
 8002e30:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8002e32:	2802      	cmp	r0, #2
 8002e34:	d001      	beq.n	8002e3a <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 8002e36:	2822      	cmp	r0, #34	; 0x22
 8002e38:	d1f9      	bne.n	8002e2e <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20001620 	.word	0x20001620

08002e44 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8002e44:	b109      	cbz	r1, 8002e4a <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 8002e46:	2002      	movs	r0, #2
 8002e48:	4770      	bx	lr
  }
  else if (Interface > 1)
 8002e4a:	2801      	cmp	r0, #1
 8002e4c:	d8fb      	bhi.n	8002e46 <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8002e4e:	4608      	mov	r0, r1
}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop

08002e54 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002e54:	b108      	cbz	r0, 8002e5a <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8002e56:	4803      	ldr	r0, [pc, #12]	; (8002e64 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8002e58:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002e5a:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <Virtual_Com_Port_GetLineCoding+0x14>)
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	6819      	ldr	r1, [r3, #0]
 8002e60:	820a      	strh	r2, [r1, #16]
    return NULL;
 8002e62:	4770      	bx	lr
 8002e64:	20000300 	.word	0x20000300
 8002e68:	20001620 	.word	0x20001620

08002e6c <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002e6c:	b108      	cbz	r0, 8002e72 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8002e6e:	4803      	ldr	r0, [pc, #12]	; (8002e7c <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8002e70:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002e72:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <Virtual_Com_Port_SetLineCoding+0x14>)
 8002e74:	2208      	movs	r2, #8
 8002e76:	6819      	ldr	r1, [r3, #0]
 8002e78:	820a      	strh	r2, [r1, #16]
    return NULL;
 8002e7a:	4770      	bx	lr
 8002e7c:	20000300 	.word	0x20000300
 8002e80:	20001620 	.word	0x20001620

08002e84 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8002e84:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8002e88:	6819      	ldr	r1, [r3, #0]
 8002e8a:	78ca      	ldrb	r2, [r1, #3]
  if (wValue0 > 4)
 8002e8c:	2a04      	cmp	r2, #4
 8002e8e:	d805      	bhi.n	8002e9c <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8002e92:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8002e96:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8002e98:	4790      	blx	r2
 8002e9a:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 8002e9c:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 8002e9e:	bd08      	pop	{r3, pc}
 8002ea0:	20001620 	.word	0x20001620
 8002ea4:	200002e0 	.word	0x200002e0
 8002ea8:	080039e1 	.word	0x080039e1

08002eac <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8002eac:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8002eae:	f240 217c 	movw	r1, #636	; 0x27c
 8002eb2:	f643 13e1 	movw	r3, #14817	; 0x39e1
 8002eb6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002eba:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002ebe:	4798      	blx	r3
}
 8002ec0:	bd08      	pop	{r3, pc}
 8002ec2:	bf00      	nop

08002ec4 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8002ec4:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8002ec6:	f240 21d8 	movw	r1, #728	; 0x2d8
 8002eca:	f643 13e1 	movw	r3, #14817	; 0x39e1
 8002ece:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002ed2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002ed6:	4798      	blx	r3
}
 8002ed8:	bd08      	pop	{r3, pc}
 8002eda:	bf00      	nop

08002edc <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002edc:	f241 6220 	movw	r2, #5664	; 0x1620

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002ee0:	f644 1358 	movw	r3, #18776	; 0x4958
 8002ee4:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002ee8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002eec:	6810      	ldr	r0, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002eee:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8002ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002ef4:	2400      	movs	r4, #0
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8002ef6:	f244 05e1 	movw	r5, #16609	; 0x40e1
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002efa:	7241      	strb	r1, [r0, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002efc:	7284      	strb	r4, [r0, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8002efe:	72c4      	strb	r4, [r0, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8002f00:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002f04:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8002f06:	f244 06f5 	movw	r6, #16629	; 0x40f5
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8002f0a:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8002f0c:	f6c0 0600 	movt	r6, #2048	; 0x800
 8002f10:	4620      	mov	r0, r4
 8002f12:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8002f16:	f244 150d 	movw	r5, #16653	; 0x410d
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8002f1a:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8002f1c:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002f20:	2110      	movs	r1, #16
 8002f22:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8002f24:	f244 2a61 	movw	sl, #16993	; 0x4261

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8002f28:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8002f2a:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8002f2e:	2140      	movs	r1, #64	; 0x40
 8002f30:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002f32:	f244 283d 	movw	r8, #16957	; 0x423d
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8002f36:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002f38:	f6c0 0800 	movt	r8, #2048	; 0x800
 8002f3c:	2180      	movs	r1, #128	; 0x80
 8002f3e:	4620      	mov	r0, r4
  Clear_Status_Out(ENDP0);
 8002f40:	f244 17d5 	movw	r7, #16853	; 0x41d5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002f44:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8002f46:	f6c0 0700 	movt	r7, #2048	; 0x800
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	47b8      	blx	r7
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8002f4e:	f240 2284 	movw	r2, #644	; 0x284
 8002f52:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002f56:	f244 29e9 	movw	r9, #17129	; 0x42e9
 8002f5a:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8002f5e:	f6c0 0900 	movt	r9, #2048	; 0x800
 8002f62:	4620      	mov	r0, r4
 8002f64:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8002f66:	f244 13b1 	movw	r3, #16817	; 0x41b1
 8002f6a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002f6e:	4620      	mov	r0, r4
 8002f70:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8002f72:	2001      	movs	r0, #1
 8002f74:	4621      	mov	r1, r4
 8002f76:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8002f78:	2001      	movs	r0, #1
 8002f7a:	21c0      	movs	r1, #192	; 0xc0
 8002f7c:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8002f7e:	f244 174d 	movw	r7, #16717	; 0x414d
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8002f82:	2001      	movs	r0, #1
 8002f84:	2120      	movs	r1, #32
 8002f86:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8002f88:	f6c0 0700 	movt	r7, #2048	; 0x800
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	4621      	mov	r1, r4
 8002f90:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8002f92:	2002      	movs	r0, #2
 8002f94:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f98:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8002f9a:	2002      	movs	r0, #2
 8002f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fa0:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8002fa8:	2002      	movs	r0, #2
 8002faa:	2120      	movs	r1, #32
 8002fac:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8002fae:	2003      	movs	r0, #3
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8002fb4:	2003      	movs	r0, #3
 8002fb6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002fba:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	2140      	movs	r1, #64	; 0x40
 8002fc0:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8002fc2:	2003      	movs	r0, #3
 8002fc4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002fc8:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8002fca:	4621      	mov	r1, r4
 8002fcc:	2003      	movs	r0, #3
 8002fce:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8002fd0:	f643 61bd 	movw	r1, #16061	; 0x3ebd
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002fda:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 8002fdc:	f240 4098 	movw	r0, #1176	; 0x498
 8002fe0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	6002      	str	r2, [r0, #0]
 8002fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002fec <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8002fec:	f243 53cd 	movw	r3, #13773	; 0x35cd
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8002ff0:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8002ff2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002ff6:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 8002ff8:	f241 6020 	movw	r0, #5664	; 0x1620
 8002ffc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003000:	6802      	ldr	r2, [r0, #0]
 8003002:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 8003004:	f243 0129 	movw	r1, #12329	; 0x3029

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8003008:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 800300a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800300e:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8003010:	f244 335d 	movw	r3, #17245	; 0x435d
 8003014:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003018:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 800301a:	f240 4098 	movw	r0, #1176	; 0x498
 800301e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003022:	6004      	str	r4, [r0, #0]
 8003024:	bd10      	pop	{r4, pc}
 8003026:	bf00      	nop

08003028 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8003028:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800302a:	f243 439d 	movw	r3, #13469	; 0x349d
 800302e:	2001      	movs	r0, #1
 8003030:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003034:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8003036:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800303a:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800303e:	f241 6224 	movw	r2, #5668	; 0x1624
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8003042:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8003046:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8003048:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800304c:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800304e:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8003052:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8003056:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8003058:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 800305a:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800305c:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800305e:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 8003060:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 8003062:	bd38      	pop	{r3, r4, r5, pc}

08003064 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8003064:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8003066:	2100      	movs	r1, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8003068:	b083      	sub	sp, #12
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800306a:	f645 4340 	movw	r3, #23616	; 0x5c40

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800306e:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8003072:	9101      	str	r1, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8003074:	f2c4 0300 	movt	r3, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003078:	f2c4 0200 	movt	r2, #16384	; 0x4000
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800307c:	6818      	ldr	r0, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800307e:	6814      	ldr	r4, [r2, #0]
 8003080:	4960      	ldr	r1, [pc, #384]	; (8003204 <Suspend+0x1a0>)
 8003082:	b2a5      	uxth	r5, r4
 8003084:	f645 4604 	movw	r6, #23556	; 0x5c04
 8003088:	600d      	str	r5, [r1, #0]
 800308a:	f2c4 0600 	movt	r6, #16384	; 0x4000
 800308e:	6837      	ldr	r7, [r6, #0]
 8003090:	f645 4208 	movw	r2, #23560	; 0x5c08
 8003094:	b2bc      	uxth	r4, r7
 8003096:	604c      	str	r4, [r1, #4]
 8003098:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800309c:	6815      	ldr	r5, [r2, #0]
 800309e:	f645 460c 	movw	r6, #23564	; 0x5c0c
 80030a2:	b2af      	uxth	r7, r5
 80030a4:	608f      	str	r7, [r1, #8]
 80030a6:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80030aa:	6834      	ldr	r4, [r6, #0]
 80030ac:	f645 4210 	movw	r2, #23568	; 0x5c10
 80030b0:	b2a5      	uxth	r5, r4
 80030b2:	60cd      	str	r5, [r1, #12]
 80030b4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80030b8:	6816      	ldr	r6, [r2, #0]
 80030ba:	f645 4714 	movw	r7, #23572	; 0x5c14
 80030be:	b2b4      	uxth	r4, r6
 80030c0:	610c      	str	r4, [r1, #16]
 80030c2:	f2c4 0700 	movt	r7, #16384	; 0x4000
 80030c6:	683d      	ldr	r5, [r7, #0]
 80030c8:	f645 4218 	movw	r2, #23576	; 0x5c18
 80030cc:	b2ae      	uxth	r6, r5
 80030ce:	614e      	str	r6, [r1, #20]
 80030d0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80030d4:	6817      	ldr	r7, [r2, #0]
 80030d6:	f645 451c 	movw	r5, #23580	; 0x5c1c
 80030da:	b2bc      	uxth	r4, r7
 80030dc:	618c      	str	r4, [r1, #24]
 80030de:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80030e2:	682e      	ldr	r6, [r5, #0]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80030e4:	b282      	uxth	r2, r0
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80030e6:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80030ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80030ee:	4004      	ands	r4, r0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80030f0:	b2b7      	uxth	r7, r6
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80030f2:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 80030f6:	f042 0601 	orr.w	r6, r2, #1
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 80030fa:	f645 4044 	movw	r0, #23620	; 0x5c44
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80030fe:	61cf      	str	r7, [r1, #28]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8003100:	f2c4 0000 	movt	r0, #16384	; 0x4000
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8003104:	601a      	str	r2, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8003106:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8003108:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800310a:	6802      	ldr	r2, [r0, #0]
 800310c:	f645 4344 	movw	r3, #23620	; 0x5c44
 8003110:	0552      	lsls	r2, r2, #21
 8003112:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003116:	d5f8      	bpl.n	800310a <Suspend+0xa6>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8003118:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 800311c:	6018      	str	r0, [r3, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 800311e:	6808      	ldr	r0, [r1, #0]
 8003120:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8003124:	b280      	uxth	r0, r0
 8003126:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800312a:	6010      	str	r0, [r2, #0]
 800312c:	6848      	ldr	r0, [r1, #4]
 800312e:	f645 4204 	movw	r2, #23556	; 0x5c04
 8003132:	b280      	uxth	r0, r0
 8003134:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003138:	6010      	str	r0, [r2, #0]
 800313a:	6888      	ldr	r0, [r1, #8]
 800313c:	f645 4208 	movw	r2, #23560	; 0x5c08
 8003140:	b280      	uxth	r0, r0
 8003142:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003146:	6010      	str	r0, [r2, #0]
 8003148:	68c8      	ldr	r0, [r1, #12]
 800314a:	f645 420c 	movw	r2, #23564	; 0x5c0c
 800314e:	b280      	uxth	r0, r0
 8003150:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003154:	6010      	str	r0, [r2, #0]
 8003156:	6908      	ldr	r0, [r1, #16]
 8003158:	f645 4210 	movw	r2, #23568	; 0x5c10
 800315c:	b280      	uxth	r0, r0
 800315e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003162:	6010      	str	r0, [r2, #0]
 8003164:	6948      	ldr	r0, [r1, #20]
 8003166:	f645 4214 	movw	r2, #23572	; 0x5c14
 800316a:	b280      	uxth	r0, r0
 800316c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003170:	6010      	str	r0, [r2, #0]
 8003172:	6988      	ldr	r0, [r1, #24]
 8003174:	f645 4218 	movw	r2, #23576	; 0x5c18
 8003178:	b280      	uxth	r0, r0
 800317a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800317e:	6010      	str	r0, [r2, #0]
 8003180:	69c8      	ldr	r0, [r1, #28]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8003182:	f645 4240 	movw	r2, #23616	; 0x5c40
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8003186:	f645 411c 	movw	r1, #23580	; 0x5c1c
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800318a:	f2c4 0200 	movt	r2, #16384	; 0x4000
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 800318e:	b280      	uxth	r0, r0
 8003190:	f2c4 0100 	movt	r1, #16384	; 0x4000
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 8003194:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8003198:	6008      	str	r0, [r1, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800319a:	6014      	str	r4, [r2, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 800319c:	6810      	ldr	r0, [r2, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800319e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 80031a2:	b284      	uxth	r4, r0
 80031a4:	f044 0004 	orr.w	r0, r4, #4
 80031a8:	6010      	str	r0, [r2, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80031aa:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80031ae:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80031b0:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80031b4:	9001      	str	r0, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 80031b6:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80031b8:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 80031bc:	f020 0003 	bic.w	r0, r0, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 80031c0:	f040 0001 	orr.w	r0, r0, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 80031c4:	6008      	str	r0, [r1, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80031c6:	6820      	ldr	r0, [r4, #0]
 80031c8:	f040 0004 	orr.w	r0, r0, #4
 80031cc:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	04c0      	lsls	r0, r0, #19
 80031d2:	d50f      	bpl.n	80031f4 <Suspend+0x190>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 80031d4:	f64e 70ff 	movw	r0, #61439	; 0xefff
 80031d8:	6018      	str	r0, [r3, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 80031da:	6810      	ldr	r0, [r2, #0]
        wCNTR&=~CNTR_FSUSP;
 80031dc:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80031e0:	4003      	ands	r3, r0
        _SetCNTR(wCNTR);
 80031e2:	6013      	str	r3, [r2, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 80031e4:	9a01      	ldr	r2, [sp, #4]
 80031e6:	600a      	str	r2, [r1, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 80031e8:	6821      	ldr	r1, [r4, #0]
 80031ea:	f021 0004 	bic.w	r0, r1, #4
 80031ee:	6020      	str	r0, [r4, #0]
#endif
    }
}
 80031f0:	b003      	add	sp, #12
 80031f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <Suspend+0x1a4>)
 80031f6:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 80031f8:	6822      	ldr	r2, [r4, #0]
 80031fa:	f022 0104 	bic.w	r1, r2, #4
 80031fe:	6021      	str	r1, [r4, #0]
 8003200:	e7f6      	b.n	80031f0 <Suspend+0x18c>
 8003202:	bf00      	nop
 8003204:	20000dd0 	.word	0x20000dd0
 8003208:	08003611 	.word	0x08003611

0800320c <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 800320c:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800320e:	f645 4440 	movw	r4, #23616	; 0x5c40
 8003212:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003216:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 8003218:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800321c:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800321e:	f243 30cd 	movw	r0, #13261	; 0x33cd
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8003222:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8003224:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003228:	4780      	blx	r0

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 800322a:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 800322e:	6021      	str	r1, [r4, #0]
 8003230:	bd10      	pop	{r4, pc}
 8003232:	bf00      	nop

08003234 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8003234:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 8003236:	4c2b      	ldr	r4, [pc, #172]	; (80032e4 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8003238:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 800323a:	bf18      	it	ne
 800323c:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 800323e:	7823      	ldrb	r3, [r4, #0]
 8003240:	2b05      	cmp	r3, #5
 8003242:	d819      	bhi.n	8003278 <Resume+0x44>
 8003244:	e8df f003 	tbb	[pc, r3]
 8003248:	2f2a221b 	.word	0x2f2a221b
 800324c:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 800324e:	7860      	ldrb	r0, [r4, #1]
 8003250:	1e41      	subs	r1, r0, #1
 8003252:	b2ca      	uxtb	r2, r1
 8003254:	7062      	strb	r2, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8003256:	7863      	ldrb	r3, [r4, #1]
 8003258:	b983      	cbnz	r3, 800327c <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 800325a:	f645 4240 	movw	r2, #23616	; 0x5c40
 800325e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003262:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 8003264:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003268:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 800326a:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 800326c:	4a1d      	ldr	r2, [pc, #116]	; (80032e4 <Resume+0xb0>)
        remotewakeupon = 0;
 800326e:	491e      	ldr	r1, [pc, #120]	; (80032e8 <Resume+0xb4>)
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 8003270:	2006      	movs	r0, #6
 8003272:	7010      	strb	r0, [r2, #0]
        remotewakeupon = 0;
 8003274:	600b      	str	r3, [r1, #0]
 8003276:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8003278:	2106      	movs	r1, #6
 800327a:	7021      	strb	r1, [r4, #0]
 800327c:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 800327e:	4a1a      	ldr	r2, [pc, #104]	; (80032e8 <Resume+0xb4>)
 8003280:	6811      	ldr	r1, [r2, #0]
 8003282:	2900      	cmp	r1, #0
 8003284:	d028      	beq.n	80032d8 <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8003286:	2005      	movs	r0, #5
 8003288:	7020      	strb	r0, [r4, #0]
 800328a:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 800328c:	4a17      	ldr	r2, [pc, #92]	; (80032ec <Resume+0xb8>)
 800328e:	4790      	blx	r2
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <Resume+0xb4>)
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8003292:	2104      	movs	r1, #4
      remotewakeupon = 1;
 8003294:	2001      	movs	r0, #1
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8003296:	7021      	strb	r1, [r4, #0]
      remotewakeupon = 1;
 8003298:	6018      	str	r0, [r3, #0]
      break;
 800329a:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 800329c:	2302      	movs	r3, #2
      ResumeS.eState = RESUME_WAIT;
 800329e:	2003      	movs	r0, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 80032a0:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 80032a2:	7020      	strb	r0, [r4, #0]
      break;
 80032a4:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 80032a6:	7862      	ldrb	r2, [r4, #1]
 80032a8:	1e51      	subs	r1, r2, #1
 80032aa:	b2cb      	uxtb	r3, r1
 80032ac:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 80032ae:	7860      	ldrb	r0, [r4, #1]
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d1e3      	bne.n	800327c <Resume+0x48>
        ResumeS.eState = RESUME_START;
 80032b4:	490b      	ldr	r1, [pc, #44]	; (80032e4 <Resume+0xb0>)
 80032b6:	2204      	movs	r2, #4
 80032b8:	700a      	strb	r2, [r1, #0]
 80032ba:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 80032bc:	f645 4340 	movw	r3, #23616	; 0x5c40
 80032c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80032c4:	6818      	ldr	r0, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 80032c6:	b282      	uxth	r2, r0
 80032c8:	f042 0110 	orr.w	r1, r2, #16
 80032cc:	6019      	str	r1, [r3, #0]
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 80032ce:	200a      	movs	r0, #10
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 80032d0:	2305      	movs	r3, #5
 80032d2:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 80032d4:	7060      	strb	r0, [r4, #1]
      break;
 80032d6:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 80032d8:	4b04      	ldr	r3, [pc, #16]	; (80032ec <Resume+0xb8>)
 80032da:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 80032dc:	2206      	movs	r2, #6
 80032de:	7022      	strb	r2, [r4, #0]
 80032e0:	bd10      	pop	{r4, pc}
 80032e2:	bf00      	nop
 80032e4:	20000dcc 	.word	0x20000dcc
 80032e8:	200004a0 	.word	0x200004a0
 80032ec:	0800320d 	.word	0x0800320d

080032f0 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 80032f0:	f240 4314 	movw	r3, #1044	; 0x414
 80032f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80032f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	4770      	bx	lr

08003300 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8003300:	b470      	push	{r4, r5, r6}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003302:	b38a      	cbz	r2, 8003368 <IntToUnicode+0x68>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8003304:	1e56      	subs	r6, r2, #1
 8003306:	b2f2      	uxtb	r2, r6
 8003308:	1c53      	adds	r3, r2, #1
 800330a:	005e      	lsls	r6, r3, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 800330c:	0f03      	lsrs	r3, r0, #28
 800330e:	1eb2      	subs	r2, r6, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003310:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003312:	2b09      	cmp	r3, #9
 8003314:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8003318:	d928      	bls.n	800336c <IntToUnicode+0x6c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800331a:	3337      	adds	r3, #55	; 0x37
 800331c:	700b      	strb	r3, [r1, #0]
 800331e:	2302      	movs	r3, #2
    }
    
    value = value << 4;
 8003320:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003322:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003324:	704c      	strb	r4, [r1, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003326:	d01f      	beq.n	8003368 <IntToUnicode+0x68>
 8003328:	b152      	cbz	r2, 8003340 <IntToUnicode+0x40>
  {
    if( ((value >> 28)) < 0xA )
 800332a:	0f02      	lsrs	r2, r0, #28
 800332c:	2a09      	cmp	r2, #9
 800332e:	d913      	bls.n	8003358 <IntToUnicode+0x58>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8003330:	3237      	adds	r2, #55	; 0x37
 8003332:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8003334:	18ca      	adds	r2, r1, r3
 8003336:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8003338:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800333a:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800333c:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800333e:	d013      	beq.n	8003368 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8003340:	0f05      	lsrs	r5, r0, #28
 8003342:	2d09      	cmp	r5, #9
 8003344:	d815      	bhi.n	8003372 <IntToUnicode+0x72>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8003346:	3530      	adds	r5, #48	; 0x30
 8003348:	54cd      	strb	r5, [r1, r3]
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 800334a:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 800334c:	0f02      	lsrs	r2, r0, #28
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800334e:	18cd      	adds	r5, r1, r3
 8003350:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003352:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003354:	706c      	strb	r4, [r5, #1]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003356:	d8eb      	bhi.n	8003330 <IntToUnicode+0x30>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8003358:	3230      	adds	r2, #48	; 0x30
 800335a:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800335c:	18ca      	adds	r2, r1, r3
 800335e:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8003360:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003362:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003364:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003366:	d1eb      	bne.n	8003340 <IntToUnicode+0x40>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8003368:	bc70      	pop	{r4, r5, r6}
 800336a:	4770      	bx	lr
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800336c:	3330      	adds	r3, #48	; 0x30
 800336e:	700b      	strb	r3, [r1, #0]
 8003370:	e7d5      	b.n	800331e <IntToUnicode+0x1e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8003372:	3537      	adds	r5, #55	; 0x37
 8003374:	54cd      	strb	r5, [r1, r3]
 8003376:	e7e8      	b.n	800334a <IntToUnicode+0x4a>

08003378 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8003378:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 800337a:	f642 3309 	movw	r3, #11017	; 0x2b09
 800337e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003382:	4798      	blx	r3
 8003384:	bd08      	pop	{r3, pc}
 8003386:	bf00      	nop

08003388 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8003388:	f241 0304 	movw	r3, #4100	; 0x1004
 800338c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	f422 0070 	bic.w	r0, r2, #15728640	; 0xf00000
 8003396:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 8003398:	6819      	ldr	r1, [r3, #0]
 800339a:	f441 1200 	orr.w	r2, r1, #2097152	; 0x200000
 800339e:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	6018      	str	r0, [r3, #0]
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop

080033a8 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 80033a8:	f241 0204 	movw	r2, #4100	; 0x1004
 80033ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80033b0:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 80033b2:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 80033b6:	f421 0080 	bic.w	r0, r1, #4194304	; 0x400000
 80033ba:	6010      	str	r0, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 80033bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	f442 0100 	orr.w	r1, r2, #8388608	; 0x800000
 80033c6:	6019      	str	r1, [r3, #0]
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop

080033cc <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <Leave_LowPowerMode+0x18>)
 80033ce:	7a98      	ldrb	r0, [r3, #10]
 80033d0:	b918      	cbnz	r0, 80033da <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 80033d2:	4905      	ldr	r1, [pc, #20]	; (80033e8 <Leave_LowPowerMode+0x1c>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	600a      	str	r2, [r1, #0]
 80033d8:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 80033da:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <Leave_LowPowerMode+0x1c>)
 80033dc:	2005      	movs	r0, #5
 80033de:	6018      	str	r0, [r3, #0]
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20001600 	.word	0x20001600
 80033e8:	20000498 	.word	0x20000498

080033ec <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 80033ec:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 80033f0:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 80033f2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80033f6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 80033fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 80033fe:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8003400:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003404:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8003406:	f240 4404 	movw	r4, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800340a:	f420 2580 	bic.w	r5, r0, #262144	; 0x40000
 800340e:	601d      	str	r5, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8003410:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003414:	6822      	ldr	r2, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8003416:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 800341a:	f422 2080 	bic.w	r0, r2, #262144	; 0x40000
 800341e:	6020      	str	r0, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8003420:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8003424:	680c      	ldr	r4, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8003426:	f240 450c 	movw	r5, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800342a:	f444 2280 	orr.w	r2, r4, #262144	; 0x40000
 800342e:	600a      	str	r2, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8003430:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8003434:	6829      	ldr	r1, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003436:	f241 6475 	movw	r4, #5749	; 0x1675
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800343a:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 800343e:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003440:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003442:	f243 3179 	movw	r1, #13177	; 0x3379
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003446:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800344a:	2090      	movs	r0, #144	; 0x90
 800344c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003450:	2200      	movs	r2, #0
 8003452:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003456:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003458:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 800345a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800345e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003462:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8003464:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8003466:	f442 1180 	orr.w	r1, r2, #1048576	; 0x100000
 800346a:	6019      	str	r1, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 800346c:	f243 21f1 	movw	r1, #13041	; 0x32f1
 8003470:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003474:	2200      	movs	r2, #0
 8003476:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8003478:	f24e 1004 	movw	r0, #57604	; 0xe104
 800347c:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8003480:	6802      	ldr	r2, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8003482:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8003486:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 800348a:	6001      	str	r1, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 800348c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	f440 2280 	orr.w	r2, r0, #262144	; 0x40000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	bd38      	pop	{r3, r4, r5, pc}
 800349a:	bf00      	nop

0800349c <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 800349c:	f241 030c 	movw	r3, #4108	; 0x100c
 80034a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80034a4:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 80034a6:	b918      	cbnz	r0, 80034b0 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 80034a8:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 80034ac:	6018      	str	r0, [r3, #0]
 80034ae:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 80034b0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80034b4:	6019      	str	r1, [r3, #0]
 80034b6:	4770      	bx	lr

080034b8 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80034b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80034bc:	460f      	mov	r7, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80034be:	b082      	sub	sp, #8
 80034c0:	4605      	mov	r5, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80034c2:	b361      	cbz	r1, 800351e <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80034c4:	7803      	ldrb	r3, [r0, #0]
 80034c6:	1e4a      	subs	r2, r1, #1
    Hw_Uart_Q_Push( 5, &UartData );	//
 80034c8:	2005      	movs	r0, #5
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80034ca:	2401      	movs	r4, #1
 80034cc:	4e15      	ldr	r6, [pc, #84]	; (8003524 <USB_To_USART_Send_Data+0x6c>)
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 80034ce:	f10d 0107 	add.w	r1, sp, #7
 80034d2:	ea02 0804 	and.w	r8, r2, r4
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80034d6:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80034da:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80034dc:	42bc      	cmp	r4, r7
 80034de:	d21e      	bcs.n	800351e <USB_To_USART_Send_Data+0x66>
 80034e0:	f1b8 0f00 	cmp.w	r8, #0
 80034e4:	d009      	beq.n	80034fa <USB_To_USART_Send_Data+0x42>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80034e6:	786b      	ldrb	r3, [r5, #1]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80034e8:	2005      	movs	r0, #5
 80034ea:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80034ee:	2402      	movs	r4, #2
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80034f0:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80034f4:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80034f6:	42bc      	cmp	r4, r7
 80034f8:	d211      	bcs.n	800351e <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80034fa:	5d2a      	ldrb	r2, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80034fc:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003500:	3401      	adds	r4, #1
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003502:	2005      	movs	r0, #5
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003504:	f88d 2007 	strb.w	r2, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003508:	47b0      	blx	r6
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800350a:	5d2b      	ldrb	r3, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800350c:	2005      	movs	r0, #5
 800350e:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003512:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003514:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003518:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800351a:	42bc      	cmp	r4, r7
 800351c:	d3ed      	bcc.n	80034fa <USB_To_USART_Send_Data+0x42>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 800351e:	b002      	add	sp, #8
 8003520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003524:	08001561 	.word	0x08001561

08003528 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8003528:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 800352a:	4c20      	ldr	r4, [pc, #128]	; (80035ac <Handle_USBAsynchXfer+0x84>)
 800352c:	7823      	ldrb	r3, [r4, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d023      	beq.n	800357a <Handle_USBAsynchXfer+0x52>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8003532:	4d1f      	ldr	r5, [pc, #124]	; (80035b0 <Handle_USBAsynchXfer+0x88>)
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800353a:	d02c      	beq.n	8003596 <Handle_USBAsynchXfer+0x6e>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800353c:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <Handle_USBAsynchXfer+0x8c>)
 800353e:	6811      	ldr	r1, [r2, #0]
 8003540:	428b      	cmp	r3, r1
 8003542:	d02f      	beq.n	80035a4 <Handle_USBAsynchXfer+0x7c>
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8003544:	d81a      	bhi.n	800357c <Handle_USBAsynchXfer+0x54>
 8003546:	b298      	uxth	r0, r3
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8003548:	1ace      	subs	r6, r1, r3
 800354a:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800354c:	2e40      	cmp	r6, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800354e:	6016      	str	r6, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003550:	d91b      	bls.n	800358a <Handle_USBAsynchXfer+0x62>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8003552:	3e40      	subs	r6, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8003554:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8003556:	6016      	str	r6, [r2, #0]
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8003558:	602b      	str	r3, [r5, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800355a:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800355c:	4b17      	ldr	r3, [pc, #92]	; (80035bc <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 800355e:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8003560:	1818      	adds	r0, r3, r0
 8003562:	4632      	mov	r2, r6
 8003564:	21c0      	movs	r1, #192	; 0xc0
 8003566:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8003568:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800356a:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 800356c:	4628      	mov	r0, r5
 800356e:	4631      	mov	r1, r6
 8003570:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <Handle_USBAsynchXfer+0x9c>)
 8003572:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 8003574:	4628      	mov	r0, r5
 8003576:	4914      	ldr	r1, [pc, #80]	; (80035c8 <Handle_USBAsynchXfer+0xa0>)
 8003578:	4788      	blx	r1
 800357a:	bd70      	pop	{r4, r5, r6, pc}
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800357c:	f5c3 6600 	rsb	r6, r3, #2048	; 0x800
 8003580:	4a0d      	ldr	r2, [pc, #52]	; (80035b8 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003582:	2e40      	cmp	r6, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8003584:	6016      	str	r6, [r2, #0]
 8003586:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003588:	d8e3      	bhi.n	8003552 <Handle_USBAsynchXfer+0x2a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 800358a:	18f1      	adds	r1, r6, r3
 800358c:	6029      	str	r1, [r5, #0]
      USART_Rx_length = 0;
 800358e:	2500      	movs	r5, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 8003590:	b2b6      	uxth	r6, r6
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8003592:	6015      	str	r5, [r2, #0]
 8003594:	e7e2      	b.n	800355c <Handle_USBAsynchXfer+0x34>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8003596:	4907      	ldr	r1, [pc, #28]	; (80035b4 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8003598:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800359a:	6809      	ldr	r1, [r1, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 800359c:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800359e:	b109      	cbz	r1, 80035a4 <Handle_USBAsynchXfer+0x7c>
 80035a0:	4603      	mov	r3, r0
 80035a2:	e7d1      	b.n	8003548 <Handle_USBAsynchXfer+0x20>
    {
      USB_Tx_State = 0; 
 80035a4:	2000      	movs	r0, #0
 80035a6:	7020      	strb	r0, [r4, #0]
      return;
 80035a8:	bd70      	pop	{r4, r5, r6, pc}
 80035aa:	bf00      	nop
 80035ac:	200004a4 	.word	0x200004a4
 80035b0:	200004ac 	.word	0x200004ac
 80035b4:	200004a8 	.word	0x200004a8
 80035b8:	200004b0 	.word	0x200004b0
 80035bc:	20000df0 	.word	0x20000df0
 80035c0:	08004019 	.word	0x08004019
 80035c4:	080042c9 	.word	0x080042c9
 80035c8:	0800418d 	.word	0x0800418d

080035cc <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 80035cc:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80035ce:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80035d2:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80035d6:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80035da:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80035de:	6810      	ldr	r0, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 80035e0:	681a      	ldr	r2, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 80035e2:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 80035e6:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80035ea:	1880      	adds	r0, r0, r2
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 80035ec:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80035ee:	d007      	beq.n	8003600 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 80035f0:	4904      	ldr	r1, [pc, #16]	; (8003604 <Get_SerialNum+0x38>)
 80035f2:	2208      	movs	r2, #8
 80035f4:	4d04      	ldr	r5, [pc, #16]	; (8003608 <Get_SerialNum+0x3c>)
 80035f6:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 80035f8:	4620      	mov	r0, r4
 80035fa:	4904      	ldr	r1, [pc, #16]	; (800360c <Get_SerialNum+0x40>)
 80035fc:	2204      	movs	r2, #4
 80035fe:	47a8      	blx	r5
 8003600:	bd38      	pop	{r3, r4, r5, pc}
 8003602:	bf00      	nop
 8003604:	2000022a 	.word	0x2000022a
 8003608:	08003301 	.word	0x08003301
 800360c:	2000023a 	.word	0x2000023a

08003610 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8003610:	bf30      	wfi
 8003612:	4770      	bx	lr

08003614 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8003614:	b508      	push	{r3, lr}
  if (Length == 0)
 8003616:	b138      	cbz	r0, 8003628 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <Standard_GetConfiguration+0x20>)
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	6801      	ldr	r1, [r0, #0]
 800361e:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_Configuration;
 8003620:	4a05      	ldr	r2, [pc, #20]	; (8003638 <Standard_GetConfiguration+0x24>)
 8003622:	6810      	ldr	r0, [r2, #0]
 8003624:	300a      	adds	r0, #10
}
 8003626:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <Standard_GetConfiguration+0x24>)
 800362a:	2201      	movs	r2, #1
 800362c:	6819      	ldr	r1, [r3, #0]
 800362e:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8003630:	bd08      	pop	{r3, pc}
 8003632:	bf00      	nop
 8003634:	2000161c 	.word	0x2000161c
 8003638:	20001620 	.word	0x20001620

0800363c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800363c:	b508      	push	{r3, lr}
  if (Length == 0)
 800363e:	b138      	cbz	r0, 8003650 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <Standard_GetInterface+0x20>)
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	6881      	ldr	r1, [r0, #8]
 8003646:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8003648:	4a05      	ldr	r2, [pc, #20]	; (8003660 <Standard_GetInterface+0x24>)
 800364a:	6810      	ldr	r0, [r2, #0]
 800364c:	300c      	adds	r0, #12
}
 800364e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <Standard_GetInterface+0x24>)
 8003652:	2201      	movs	r2, #1
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8003658:	bd08      	pop	{r3, pc}
 800365a:	bf00      	nop
 800365c:	2000161c 	.word	0x2000161c
 8003660:	20001620 	.word	0x20001620

08003664 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8003664:	b508      	push	{r3, lr}
  if (Length == 0)
 8003666:	2800      	cmp	r0, #0
 8003668:	d03b      	beq.n	80036e2 <Standard_GetStatus+0x7e>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <Standard_GetStatus+0x94>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800366c:	4823      	ldr	r0, [pc, #140]	; (80036fc <Standard_GetStatus+0x98>)
 800366e:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003670:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8003672:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003674:	7813      	ldrb	r3, [r2, #0]
 8003676:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800367a:	d112      	bne.n	80036a2 <Standard_GetStatus+0x3e>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 800367c:	7a53      	ldrb	r3, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800367e:	f003 0220 	and.w	r2, r3, #32
 8003682:	b2d1      	uxtb	r1, r2
 8003684:	bb59      	cbnz	r1, 80036de <Standard_GetStatus+0x7a>
 8003686:	7802      	ldrb	r2, [r0, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	b2d9      	uxtb	r1, r3
 800368e:	b311      	cbz	r1, 80036d6 <Standard_GetStatus+0x72>
    {
      SetBit(StatusInfo0, 0);
 8003690:	f042 0301 	orr.w	r3, r2, #1
 8003694:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8003696:	481a      	ldr	r0, [pc, #104]	; (8003700 <Standard_GetStatus+0x9c>)
 8003698:	6801      	ldr	r1, [r0, #0]
 800369a:	690a      	ldr	r2, [r1, #16]
 800369c:	4790      	blx	r2
  return (uint8_t *)&StatusInfo;
 800369e:	4817      	ldr	r0, [pc, #92]	; (80036fc <Standard_GetStatus+0x98>)
 80036a0:	bd08      	pop	{r3, pc}
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d016      	beq.n	80036d4 <Standard_GetStatus+0x70>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d113      	bne.n	80036d2 <Standard_GetStatus+0x6e>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 80036aa:	7951      	ldrb	r1, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 80036ac:	f001 020f 	and.w	r2, r1, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80036b0:	0093      	lsls	r3, r2, #2
 80036b2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80036b6:	f502 43b8 	add.w	r3, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80036ba:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80036be:	6819      	ldr	r1, [r3, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80036c0:	d114      	bne.n	80036ec <Standard_GetStatus+0x88>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80036c2:	f401 5240 	and.w	r2, r1, #12288	; 0x3000
 80036c6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80036ca:	d1e4      	bne.n	8003696 <Standard_GetStatus+0x32>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 80036cc:	2101      	movs	r1, #1
 80036ce:	7001      	strb	r1, [r0, #0]
 80036d0:	e7e1      	b.n	8003696 <Standard_GetStatus+0x32>
    }

  }
  else
  {
    return NULL;
 80036d2:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 80036d4:	bd08      	pop	{r3, pc}
    {
      SetBit(StatusInfo0, 0);
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	7002      	strb	r2, [r0, #0]
 80036dc:	e7db      	b.n	8003696 <Standard_GetStatus+0x32>
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 80036de:	2202      	movs	r2, #2
 80036e0:	e7d2      	b.n	8003688 <Standard_GetStatus+0x24>
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <Standard_GetStatus+0x94>)
 80036e4:	2202      	movs	r2, #2
 80036e6:	6819      	ldr	r1, [r3, #0]
 80036e8:	820a      	strh	r2, [r1, #16]
    return 0;
 80036ea:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80036ec:	f001 0330 	and.w	r3, r1, #48	; 0x30
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d1d0      	bne.n	8003696 <Standard_GetStatus+0x32>
 80036f4:	e7ea      	b.n	80036cc <Standard_GetStatus+0x68>
 80036f6:	bf00      	nop
 80036f8:	20001620 	.word	0x20001620
 80036fc:	200015f0 	.word	0x200015f0
 8003700:	2000161c 	.word	0x2000161c

08003704 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8003704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8003708:	4e27      	ldr	r6, [pc, #156]	; (80037a8 <DataStageIn+0xa4>)
 800370a:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 800370c:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 800370e:	7a27      	ldrb	r7, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8003710:	b923      	cbnz	r3, 800371c <DataStageIn+0x18>
 8003712:	2f04      	cmp	r7, #4
 8003714:	d02a      	beq.n	800376c <DataStageIn+0x68>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8003716:	8aa5      	ldrh	r5, [r4, #20]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8003718:	2704      	movs	r7, #4
 800371a:	e003      	b.n	8003724 <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 800371c:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800371e:	42ab      	cmp	r3, r5
 8003720:	d9fa      	bls.n	8003718 <DataStageIn+0x14>
 8003722:	2702      	movs	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8003724:	429d      	cmp	r5, r3
 8003726:	bf28      	it	cs
 8003728:	461d      	movcs	r5, r3
 800372a:	69a1      	ldr	r1, [r4, #24]
 800372c:	4628      	mov	r0, r5
 800372e:	4788      	blx	r1
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8003730:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <DataStageIn+0xa8>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8003732:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8003734:	2000      	movs	r0, #0
 8003736:	4790      	blx	r2
 8003738:	462a      	mov	r2, r5
 800373a:	4601      	mov	r1, r0
 800373c:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <DataStageIn+0xac>)
 800373e:	4640      	mov	r0, r8
 8003740:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8003742:	4629      	mov	r1, r5
 8003744:	2000      	movs	r0, #0
 8003746:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <DataStageIn+0xb0>)
 8003748:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 800374a:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800374c:	8a61      	ldrh	r1, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800374e:	1b43      	subs	r3, r0, r5
 8003750:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8003752:	186d      	adds	r5, r5, r1
  vSetEPTxStatus(EP_TX_VALID);
 8003754:	4818      	ldr	r0, [pc, #96]	; (80037b8 <DataStageIn+0xb4>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8003756:	4b19      	ldr	r3, [pc, #100]	; (80037bc <DataStageIn+0xb8>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8003758:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 800375a:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800375c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003760:	6834      	ldr	r4, [r6, #0]

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8003762:	8002      	strh	r2, [r0, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8003764:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8003766:	7227      	strb	r7, [r4, #8]
 8003768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 800376c:	4a14      	ldr	r2, [pc, #80]	; (80037c0 <DataStageIn+0xbc>)
 800376e:	7810      	ldrb	r0, [r2, #0]
 8003770:	2801      	cmp	r0, #1
 8003772:	d006      	beq.n	8003782 <DataStageIn+0x7e>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8003774:	4910      	ldr	r1, [pc, #64]	; (80037b8 <DataStageIn+0xb4>)
 8003776:	2710      	movs	r7, #16
 8003778:	800f      	strh	r7, [r1, #0]
 800377a:	2707      	movs	r7, #7
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800377c:	7227      	strb	r7, [r4, #8]
 800377e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8003782:	f645 4050 	movw	r0, #23632	; 0x5c50
 8003786:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800378a:	6800      	ldr	r0, [r0, #0]
 800378c:	f243 0102 	movw	r1, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8003790:	b280      	uxth	r0, r0
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8003792:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003796:	1841      	adds	r1, r0, r1
 8003798:	0048      	lsls	r0, r1, #1
 800379a:	4907      	ldr	r1, [pc, #28]	; (80037b8 <DataStageIn+0xb4>)
 800379c:	6003      	str	r3, [r0, #0]
 800379e:	2030      	movs	r0, #48	; 0x30
 80037a0:	8008      	strh	r0, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80037a2:	7013      	strb	r3, [r2, #0]
 80037a4:	e7df      	b.n	8003766 <DataStageIn+0x62>
 80037a6:	bf00      	nop
 80037a8:	20001620 	.word	0x20001620
 80037ac:	08004289 	.word	0x08004289
 80037b0:	08004019 	.word	0x08004019
 80037b4:	080042c9 	.word	0x080042c9
 80037b8:	20001628 	.word	0x20001628
 80037bc:	20001626 	.word	0x20001626
 80037c0:	200004b4 	.word	0x200004b4

080037c4 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 80037c4:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <Standard_SetConfiguration+0x30>)
 80037c8:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <Standard_SetConfiguration+0x34>)
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	7851      	ldrb	r1, [r2, #1]
 80037ce:	78c3      	ldrb	r3, [r0, #3]
 80037d0:	4299      	cmp	r1, r3
 80037d2:	d201      	bcs.n	80037d8 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 80037d4:	2002      	movs	r0, #2
  }
}
 80037d6:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80037d8:	7882      	ldrb	r2, [r0, #2]
 80037da:	2a00      	cmp	r2, #0
 80037dc:	d1fa      	bne.n	80037d4 <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 80037de:	8884      	ldrh	r4, [r0, #4]
 80037e0:	2c00      	cmp	r4, #0
 80037e2:	d1f7      	bne.n	80037d4 <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 80037e4:	7283      	strb	r3, [r0, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 80037e6:	4805      	ldr	r0, [pc, #20]	; (80037fc <Standard_SetConfiguration+0x38>)
 80037e8:	6801      	ldr	r1, [r0, #0]
 80037ea:	684b      	ldr	r3, [r1, #4]
 80037ec:	4798      	blx	r3
    return USB_SUCCESS;
 80037ee:	4620      	mov	r0, r4
 80037f0:	bd10      	pop	{r4, pc}
 80037f2:	bf00      	nop
 80037f4:	20001620 	.word	0x20001620
 80037f8:	20000308 	.word	0x20000308
 80037fc:	2000161c 	.word	0x2000161c

08003800 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8003800:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8003802:	4a10      	ldr	r2, [pc, #64]	; (8003844 <Standard_SetInterface+0x44>)
 8003804:	4c10      	ldr	r4, [pc, #64]	; (8003848 <Standard_SetInterface+0x48>)
 8003806:	6811      	ldr	r1, [r2, #0]
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	698a      	ldr	r2, [r1, #24]
 800380c:	7958      	ldrb	r0, [r3, #5]
 800380e:	78d9      	ldrb	r1, [r3, #3]
 8003810:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	7a99      	ldrb	r1, [r3, #10]
 8003816:	b909      	cbnz	r1, 800381c <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8003818:	2002      	movs	r0, #2
}
 800381a:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 800381c:	2800      	cmp	r0, #0
 800381e:	d1fb      	bne.n	8003818 <Standard_SetInterface+0x18>
 8003820:	7918      	ldrb	r0, [r3, #4]
 8003822:	2800      	cmp	r0, #0
 8003824:	d1f8      	bne.n	8003818 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 8003826:	789d      	ldrb	r5, [r3, #2]
 8003828:	2d00      	cmp	r5, #0
 800382a:	d1f5      	bne.n	8003818 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800382c:	4a07      	ldr	r2, [pc, #28]	; (800384c <Standard_SetInterface+0x4c>)
 800382e:	6813      	ldr	r3, [r2, #0]
 8003830:	68d9      	ldr	r1, [r3, #12]
 8003832:	4788      	blx	r1
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003834:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8003836:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003838:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800383a:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800383c:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800383e:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8003840:	bd38      	pop	{r3, r4, r5, pc}
 8003842:	bf00      	nop
 8003844:	200015f8 	.word	0x200015f8
 8003848:	20001620 	.word	0x20001620
 800384c:	2000161c 	.word	0x2000161c

08003850 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8003850:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8003852:	4b35      	ldr	r3, [pc, #212]	; (8003928 <Standard_ClearFeature+0xd8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003858:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800385c:	d003      	beq.n	8003866 <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800385e:	2802      	cmp	r0, #2
 8003860:	d006      	beq.n	8003870 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 8003862:	2002      	movs	r0, #2
}
 8003864:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8003866:	7a59      	ldrb	r1, [r3, #9]
 8003868:	f021 0220 	bic.w	r2, r1, #32
 800386c:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800386e:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8003870:	885a      	ldrh	r2, [r3, #2]
 8003872:	2a00      	cmp	r2, #0
 8003874:	d1f6      	bne.n	8003864 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8003876:	7919      	ldrb	r1, [r3, #4]
 8003878:	2900      	cmp	r1, #0
 800387a:	d1f3      	bne.n	8003864 <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 800387c:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 800387e:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8003882:	0081      	lsls	r1, r0, #2
 8003884:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8003888:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800388a:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800388e:	bf56      	itet	pl
 8003890:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8003892:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8003894:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8003898:	4c24      	ldr	r4, [pc, #144]	; (800392c <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800389a:	bf48      	it	mi
 800389c:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80038a0:	7824      	ldrb	r4, [r4, #0]
 80038a2:	42a0      	cmp	r0, r4
 80038a4:	d2dd      	bcs.n	8003862 <Standard_ClearFeature+0x12>
 80038a6:	2d00      	cmp	r5, #0
 80038a8:	d0db      	beq.n	8003862 <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 80038aa:	7a9b      	ldrb	r3, [r3, #10]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0d8      	beq.n	8003862 <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80038b0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80038b4:	b2d3      	uxtb	r3, r2
 80038b6:	b173      	cbz	r3, 80038d6 <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80038b8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80038bc:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 80038c0:	6813      	ldr	r3, [r2, #0]
 80038c2:	f003 0130 	and.w	r1, r3, #48	; 0x30
 80038c6:	2910      	cmp	r1, #16
 80038c8:	d021      	beq.n	800390e <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 80038ca:	4819      	ldr	r0, [pc, #100]	; (8003930 <Standard_ClearFeature+0xe0>)
 80038cc:	6801      	ldr	r1, [r0, #0]
 80038ce:	694a      	ldr	r2, [r1, #20]
 80038d0:	4790      	blx	r2
    return USB_SUCCESS;
 80038d2:	2000      	movs	r0, #0
 80038d4:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80038d6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80038da:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 80038de:	6822      	ldr	r2, [r4, #0]
 80038e0:	f402 5340 	and.w	r3, r2, #12288	; 0x3000
 80038e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e8:	d1ef      	bne.n	80038ca <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 80038ea:	b9c8      	cbnz	r0, 8003920 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 80038ec:	4a11      	ldr	r2, [pc, #68]	; (8003934 <Standard_ClearFeature+0xe4>)
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <Standard_ClearFeature+0xe8>)
 80038f0:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 80038f4:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 80038f6:	6820      	ldr	r0, [r4, #0]
 80038f8:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 80038fc:	4001      	ands	r1, r0
 80038fe:	f481 5240 	eor.w	r2, r1, #12288	; 0x3000
 8003902:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003906:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 800390a:	6020      	str	r0, [r4, #0]
 800390c:	e7dd      	b.n	80038ca <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 800390e:	b2c4      	uxtb	r4, r0
 8003910:	4620      	mov	r0, r4
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <Standard_ClearFeature+0xec>)
 8003914:	4790      	blx	r2
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8003916:	4620      	mov	r0, r4
 8003918:	2130      	movs	r1, #48	; 0x30
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <Standard_ClearFeature+0xf0>)
 800391c:	4798      	blx	r3
 800391e:	e7d4      	b.n	80038ca <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8003920:	4908      	ldr	r1, [pc, #32]	; (8003944 <Standard_ClearFeature+0xf4>)
 8003922:	4788      	blx	r1
 8003924:	e7e7      	b.n	80038f6 <Standard_ClearFeature+0xa6>
 8003926:	bf00      	nop
 8003928:	20001620 	.word	0x20001620
 800392c:	20000308 	.word	0x20000308
 8003930:	2000161c 	.word	0x2000161c
 8003934:	20000284 	.word	0x20000284
 8003938:	080042e9 	.word	0x080042e9
 800393c:	08004219 	.word	0x08004219
 8003940:	0800410d 	.word	0x0800410d
 8003944:	080041f5 	.word	0x080041f5

08003948 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8003948:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <Standard_SetEndPointFeature+0x8c>)
 800394c:	6819      	ldr	r1, [r3, #0]
 800394e:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 8003950:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8003954:	0090      	lsls	r0, r2, #2
 8003956:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 800395a:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800395c:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8003960:	bf56      	itet	pl
 8003962:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8003964:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8003966:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800396a:	4c1b      	ldr	r4, [pc, #108]	; (80039d8 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800396c:	bf48      	it	mi
 800396e:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8003972:	7824      	ldrb	r4, [r4, #0]
 8003974:	42a2      	cmp	r2, r4
 8003976:	d301      	bcc.n	800397c <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8003978:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 800397a:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 800397c:	884a      	ldrh	r2, [r1, #2]
 800397e:	2a00      	cmp	r2, #0
 8003980:	d1fa      	bne.n	8003978 <Standard_SetEndPointFeature+0x30>
 8003982:	2d00      	cmp	r5, #0
 8003984:	d0f8      	beq.n	8003978 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 8003986:	7a89      	ldrb	r1, [r1, #10]
 8003988:	2900      	cmp	r1, #0
 800398a:	d0f5      	beq.n	8003978 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800398c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8003990:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003994:	f500 42b8 	add.w	r2, r0, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8003998:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800399a:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800399c:	b17b      	cbz	r3, 80039be <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800399e:	f648 70bf 	movw	r0, #36799	; 0x8fbf
 80039a2:	4008      	ands	r0, r1
 80039a4:	f080 0110 	eor.w	r1, r0, #16
 80039a8:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 80039ac:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 80039b0:	6010      	str	r0, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 80039b2:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <Standard_SetEndPointFeature+0x94>)
 80039b4:	6811      	ldr	r1, [r2, #0]
 80039b6:	698b      	ldr	r3, [r1, #24]
 80039b8:	4798      	blx	r3
  return USB_SUCCESS;
 80039ba:	2000      	movs	r0, #0
 80039bc:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 80039be:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80039c2:	400b      	ands	r3, r1
 80039c4:	f483 5080 	eor.w	r0, r3, #4096	; 0x1000
 80039c8:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 80039cc:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e7ee      	b.n	80039b2 <Standard_SetEndPointFeature+0x6a>
 80039d4:	20001620 	.word	0x20001620
 80039d8:	20000308 	.word	0x20000308
 80039dc:	2000161c 	.word	0x2000161c

080039e0 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <Standard_GetDescriptorData+0x18>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 80039e6:	b110      	cbz	r0, 80039ee <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 80039e8:	6808      	ldr	r0, [r1, #0]
 80039ea:	1880      	adds	r0, r0, r2
}
 80039ec:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 80039ee:	8889      	ldrh	r1, [r1, #4]
 80039f0:	1a8a      	subs	r2, r1, r2
 80039f2:	821a      	strh	r2, [r3, #16]
    return 0;
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20001620 	.word	0x20001620

080039fc <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 80039fc:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80039fe:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <Post0_Process+0x34>)
 8003a00:	2000      	movs	r0, #0
 8003a02:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8003a06:	4a0b      	ldr	r2, [pc, #44]	; (8003a34 <Post0_Process+0x38>)
 8003a08:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 8003a0a:	480b      	ldr	r0, [pc, #44]	; (8003a38 <Post0_Process+0x3c>)
 8003a0c:	6801      	ldr	r1, [r0, #0]
 8003a0e:	7a08      	ldrb	r0, [r1, #8]
 8003a10:	2808      	cmp	r0, #8
 8003a12:	d106      	bne.n	8003a22 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8003a14:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <Post0_Process+0x40>)
 8003a16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a1a:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8003a1c:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <Post0_Process+0x44>)
 8003a1e:	2110      	movs	r1, #16
 8003a20:	8011      	strh	r1, [r2, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8003a22:	f1b0 0c09 	subs.w	ip, r0, #9
 8003a26:	f1dc 0000 	rsbs	r0, ip, #0
 8003a2a:	eb50 000c 	adcs.w	r0, r0, ip
 8003a2e:	bd08      	pop	{r3, pc}
 8003a30:	20000284 	.word	0x20000284
 8003a34:	080042e9 	.word	0x080042e9
 8003a38:	20001620 	.word	0x20001620
 8003a3c:	20001626 	.word	0x20001626
 8003a40:	20001628 	.word	0x20001628

08003a44 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 8003a46:	4d33      	ldr	r5, [pc, #204]	; (8003b14 <Out0_Process+0xd0>)
 8003a48:	682c      	ldr	r4, [r5, #0]
 8003a4a:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d007      	beq.n	8003a60 <Out0_Process+0x1c>
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d005      	beq.n	8003a60 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d008      	beq.n	8003a6a <Out0_Process+0x26>
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	d006      	beq.n	8003a6a <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8003a5c:	2b07      	cmp	r3, #7
 8003a5e:	d00d      	beq.n	8003a7c <Out0_Process+0x38>
 8003a60:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8003a62:	7222      	strb	r2, [r4, #8]

  return Post0_Process();
 8003a64:	4b2c      	ldr	r3, [pc, #176]	; (8003b18 <Out0_Process+0xd4>)
 8003a66:	4798      	blx	r3
 8003a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8003a6a:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8003a6c:	8a20      	ldrh	r0, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8003a6e:	b311      	cbz	r1, 8003ab6 <Out0_Process+0x72>
 8003a70:	b958      	cbnz	r0, 8003a8a <Out0_Process+0x46>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8003a72:	8aa4      	ldrh	r4, [r4, #20]
 8003a74:	2c00      	cmp	r4, #0
 8003a76:	d045      	beq.n	8003b04 <Out0_Process+0xc0>
 8003a78:	4a28      	ldr	r2, [pc, #160]	; (8003b1c <Out0_Process+0xd8>)
 8003a7a:	e02e      	b.n	8003ada <Out0_Process+0x96>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8003a7c:	4828      	ldr	r0, [pc, #160]	; (8003b20 <Out0_Process+0xdc>)
 8003a7e:	6801      	ldr	r1, [r0, #0]
 8003a80:	68ca      	ldr	r2, [r1, #12]
 8003a82:	4790      	blx	r2
 8003a84:	682c      	ldr	r4, [r5, #0]
 8003a86:	2208      	movs	r2, #8
 8003a88:	e7eb      	b.n	8003a62 <Out0_Process+0x1e>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8003a8a:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8003a8c:	4286      	cmp	r6, r0
 8003a8e:	bf28      	it	cs
 8003a90:	4606      	movcs	r6, r0
 8003a92:	4630      	mov	r0, r6
 8003a94:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8003a96:	8a63      	ldrh	r3, [r4, #18]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8003a98:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 8003a9a:	8a20      	ldrh	r0, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8003a9c:	18f1      	adds	r1, r6, r3
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8003a9e:	1b82      	subs	r2, r0, r6
 8003aa0:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8003aa2:	8261      	strh	r1, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <Out0_Process+0xe0>)
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	4798      	blx	r3
 8003aaa:	4632      	mov	r2, r6
 8003aac:	4601      	mov	r1, r0
 8003aae:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <Out0_Process+0xe4>)
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	4798      	blx	r3
 8003ab4:	8a20      	ldrh	r0, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d0db      	beq.n	8003a72 <Out0_Process+0x2e>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8003aba:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <Out0_Process+0xe8>)
    SetEPTxCount(ENDP0, 0);
 8003abc:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8003abe:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8003ac2:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8003ac4:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8003ac6:	4a1a      	ldr	r2, [pc, #104]	; (8003b30 <Out0_Process+0xec>)
 8003ac8:	4790      	blx	r2
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8003aca:	8a23      	ldrh	r3, [r4, #16]
 8003acc:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8003ace:	4a13      	ldr	r2, [pc, #76]	; (8003b1c <Out0_Process+0xd8>)
 8003ad0:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8003ad2:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8003ad4:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8003ad6:	d915      	bls.n	8003b04 <Out0_Process+0xc0>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8003ad8:	b9c3      	cbnz	r3, 8003b0c <Out0_Process+0xc8>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8003ada:	682c      	ldr	r4, [r5, #0]
 8003adc:	2106      	movs	r1, #6
      USB_StatusIn();
 8003ade:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8003ae2:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 8003ae4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8003aee:	b281      	uxth	r1, r0
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8003af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003af4:	18c8      	adds	r0, r1, r3
 8003af6:	0043      	lsls	r3, r0, #1
 8003af8:	2100      	movs	r1, #0
 8003afa:	6019      	str	r1, [r3, #0]
 8003afc:	2030      	movs	r0, #48	; 0x30
 8003afe:	8010      	strh	r0, [r2, #0]
 8003b00:	7a22      	ldrb	r2, [r4, #8]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8003b02:	e7ae      	b.n	8003a62 <Out0_Process+0x1e>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 8003b04:	682c      	ldr	r4, [r5, #0]
 8003b06:	2203      	movs	r2, #3
 8003b08:	7222      	strb	r2, [r4, #8]
 8003b0a:	e7aa      	b.n	8003a62 <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8003b0c:	682c      	ldr	r4, [r5, #0]
 8003b0e:	2205      	movs	r2, #5
 8003b10:	7222      	strb	r2, [r4, #8]
 8003b12:	e7a6      	b.n	8003a62 <Out0_Process+0x1e>
 8003b14:	20001620 	.word	0x20001620
 8003b18:	080039fd 	.word	0x080039fd
 8003b1c:	20001628 	.word	0x20001628
 8003b20:	200015f8 	.word	0x200015f8
 8003b24:	080042a9 	.word	0x080042a9
 8003b28:	08004091 	.word	0x08004091
 8003b2c:	20001626 	.word	0x20001626
 8003b30:	080042c9 	.word	0x080042c9

08003b34 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8003b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003b36:	f645 4350 	movw	r3, #23632	; 0x5c50

  if (pInformation->ControlState != PAUSE)
 8003b3a:	4d9e      	ldr	r5, [pc, #632]	; (8003db4 <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003b3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b40:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8003b42:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003b44:	f243 0004 	movw	r0, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8003b48:	b291      	uxth	r1, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003b4a:	f2c2 0000 	movt	r0, #8192	; 0x2000

  if (pInformation->ControlState != PAUSE)
 8003b4e:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003b50:	180e      	adds	r6, r1, r0
 8003b52:	0073      	lsls	r3, r6, #1

  if (pInformation->ControlState != PAUSE)
 8003b54:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8003b56:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003b58:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8003b5a:	d044      	beq.n	8003be6 <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8003b5c:	b2b7      	uxth	r7, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003b5e:	0078      	lsls	r0, r7, #1
 8003b60:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 8003b64:	f501 46c0 	add.w	r6, r1, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8003b68:	7832      	ldrb	r2, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8003b6a:	4f93      	ldr	r7, [pc, #588]	; (8003db8 <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8003b6c:	7022      	strb	r2, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8003b6e:	7873      	ldrb	r3, [r6, #1]
 8003b70:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8003b72:	88b0      	ldrh	r0, [r6, #4]
 8003b74:	47b8      	blx	r7
 8003b76:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8003b78:	8930      	ldrh	r0, [r6, #8]
 8003b7a:	682c      	ldr	r4, [r5, #0]
 8003b7c:	47b8      	blx	r7
 8003b7e:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8003b80:	89b0      	ldrh	r0, [r6, #12]
 8003b82:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 8003b84:	2101      	movs	r1, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8003b86:	80e0      	strh	r0, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8003b88:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	d030      	beq.n	8003bf0 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 8003b8e:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8003b90:	2906      	cmp	r1, #6
 8003b92:	f000 8087 	beq.w	8003ca4 <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8003b96:	2900      	cmp	r1, #0
 8003b98:	d15e      	bne.n	8003c58 <Setup0_Process+0x124>
 8003b9a:	8863      	ldrh	r3, [r4, #2]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8094 	beq.w	8003cca <Setup0_Process+0x196>
 8003ba2:	4e86      	ldr	r6, [pc, #536]	; (8003dbc <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8003ba4:	6833      	ldr	r3, [r6, #0]
 8003ba6:	4608      	mov	r0, r1
 8003ba8:	6919      	ldr	r1, [r3, #16]
 8003baa:	4788      	blx	r1
    if (Result == USB_NOT_READY)
 8003bac:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 8003bae:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 8003bb0:	d062      	beq.n	8003c78 <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8003bb2:	8a1a      	ldrh	r2, [r3, #16]
 8003bb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003bb8:	428a      	cmp	r2, r1
 8003bba:	d05d      	beq.n	8003c78 <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8003bbc:	2802      	cmp	r0, #2
 8003bbe:	d00c      	beq.n	8003bda <Setup0_Process+0xa6>
 8003bc0:	b15a      	cbz	r2, 8003bda <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8003bc2:	f993 1000 	ldrsb.w	r1, [r3]
 8003bc6:	2900      	cmp	r1, #0
 8003bc8:	f2c0 80b5 	blt.w	8003d36 <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8003bcc:	2203      	movs	r2, #3
 8003bce:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8003bd0:	4b7b      	ldr	r3, [pc, #492]	; (8003dc0 <Setup0_Process+0x28c>)
 8003bd2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8003bd6:	8018      	strh	r0, [r3, #0]
 8003bd8:	e001      	b.n	8003bde <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8003bda:	2008      	movs	r0, #8
 8003bdc:	7218      	strb	r0, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8003bde:	4b79      	ldr	r3, [pc, #484]	; (8003dc4 <Setup0_Process+0x290>)
 8003be0:	4798      	blx	r3
}
 8003be2:	b003      	add	sp, #12
 8003be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003be6:	88e0      	ldrh	r0, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8003be8:	2101      	movs	r1, #1
 8003bea:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d1ce      	bne.n	8003b8e <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003bf0:	7822      	ldrb	r2, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8003bf2:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003bf4:	f012 037f 	ands.w	r3, r2, #127	; 0x7f
 8003bf8:	d141      	bne.n	8003c7e <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8003bfa:	2e09      	cmp	r6, #9
 8003bfc:	f000 8108 	beq.w	8003e10 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8003c00:	2e05      	cmp	r6, #5
 8003c02:	f000 80bf 	beq.w	8003d84 <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8003c06:	2e03      	cmp	r6, #3
 8003c08:	f000 80f0 	beq.w	8003dec <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8003c0c:	2e01      	cmp	r6, #1
 8003c0e:	d13b      	bne.n	8003c88 <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8003c10:	78e1      	ldrb	r1, [r4, #3]
 8003c12:	2901      	cmp	r1, #1
 8003c14:	d138      	bne.n	8003c88 <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 8003c16:	88a2      	ldrh	r2, [r4, #4]
 8003c18:	2a00      	cmp	r2, #0
 8003c1a:	d135      	bne.n	8003c88 <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 8003c1c:	7a63      	ldrb	r3, [r4, #9]
 8003c1e:	f003 0420 	and.w	r4, r3, #32
 8003c22:	b2e0      	uxtb	r0, r4
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d02f      	beq.n	8003c88 <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8003c28:	4967      	ldr	r1, [pc, #412]	; (8003dc8 <Setup0_Process+0x294>)
 8003c2a:	4788      	blx	r1
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8003c2c:	bb60      	cbnz	r0, 8003c88 <Setup0_Process+0x154>
 8003c2e:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8003c30:	f645 4050 	movw	r0, #23632	; 0x5c50
 8003c34:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003c38:	6801      	ldr	r1, [r0, #0]
 8003c3a:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8003c3e:	b28a      	uxth	r2, r1
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8003c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c44:	18d0      	adds	r0, r2, r3
 8003c46:	0041      	lsls	r1, r0, #1
 8003c48:	2300      	movs	r3, #0
 8003c4a:	4a60      	ldr	r2, [pc, #384]	; (8003dcc <Setup0_Process+0x298>)
 8003c4c:	600b      	str	r3, [r1, #0]
 8003c4e:	2030      	movs	r0, #48	; 0x30
 8003c50:	2106      	movs	r1, #6
 8003c52:	8010      	strh	r0, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8003c54:	7221      	strb	r1, [r4, #8]
 8003c56:	e7c2      	b.n	8003bde <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8003c58:	2908      	cmp	r1, #8
 8003c5a:	d148      	bne.n	8003cee <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003c5c:	7820      	ldrb	r0, [r4, #0]
 8003c5e:	0643      	lsls	r3, r0, #25
 8003c60:	d19f      	bne.n	8003ba2 <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 8003c62:	4a5b      	ldr	r2, [pc, #364]	; (8003dd0 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8003c64:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8003c66:	61a2      	str	r2, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8003c68:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8003c6a:	4790      	blx	r2
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003c72:	8a1a      	ldrh	r2, [r3, #16]
 8003c74:	4282      	cmp	r2, r0
 8003c76:	d1a3      	bne.n	8003bc0 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8003c78:	2109      	movs	r1, #9
 8003c7a:	7219      	strb	r1, [r3, #8]
 8003c7c:	e7af      	b.n	8003bde <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d071      	beq.n	8003d66 <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	f000 808d 	beq.w	8003da2 <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8003c88:	494c      	ldr	r1, [pc, #304]	; (8003dbc <Setup0_Process+0x288>)
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	680a      	ldr	r2, [r1, #0]
 8003c8e:	6953      	ldr	r3, [r2, #20]
 8003c90:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8003c92:	2803      	cmp	r0, #3
 8003c94:	f000 80c5 	beq.w	8003e22 <Setup0_Process+0x2ee>
 8003c98:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d0c8      	beq.n	8003c30 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 8003c9e:	2108      	movs	r1, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8003ca0:	7221      	strb	r1, [r4, #8]
 8003ca2:	e79c      	b.n	8003bde <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003ca4:	7826      	ldrb	r6, [r4, #0]
 8003ca6:	0673      	lsls	r3, r6, #25
 8003ca8:	f47f af7b 	bne.w	8003ba2 <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8003cac:	78a2      	ldrb	r2, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8003cae:	4e43      	ldr	r6, [pc, #268]	; (8003dbc <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 8003cb0:	2a01      	cmp	r2, #1
 8003cb2:	f000 80b0 	beq.w	8003e16 <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8003cb6:	2a02      	cmp	r2, #2
 8003cb8:	d05e      	beq.n	8003d78 <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8003cba:	2a03      	cmp	r2, #3
 8003cbc:	f47f af72 	bne.w	8003ba4 <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8003cc0:	6830      	ldr	r0, [r6, #0]
 8003cc2:	6a42      	ldr	r2, [r0, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8003cc4:	2a00      	cmp	r2, #0
 8003cc6:	d1cd      	bne.n	8003c64 <Setup0_Process+0x130>
 8003cc8:	e76c      	b.n	8003ba4 <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8003cca:	6860      	ldr	r0, [r4, #4]
 8003ccc:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8003cd0:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8003cd4:	f47f af65 	bne.w	8003ba2 <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003cd8:	7823      	ldrb	r3, [r4, #0]
 8003cda:	f013 007f 	ands.w	r0, r3, #127	; 0x7f
 8003cde:	f040 80a4 	bne.w	8003e2a <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 8003ce2:	88a3      	ldrh	r3, [r4, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f47f af5c 	bne.w	8003ba2 <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8003cea:	4a3a      	ldr	r2, [pc, #232]	; (8003dd4 <Setup0_Process+0x2a0>)
 8003cec:	e7ba      	b.n	8003c64 <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8003cee:	290a      	cmp	r1, #10
 8003cf0:	f47f af57 	bne.w	8003ba2 <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8003cf4:	7826      	ldrb	r6, [r4, #0]
 8003cf6:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8003cfa:	2a01      	cmp	r2, #1
 8003cfc:	f47f af51 	bne.w	8003ba2 <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8003d00:	7aa3      	ldrb	r3, [r4, #10]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f43f af4d 	beq.w	8003ba2 <Setup0_Process+0x6e>
 8003d08:	8863      	ldrh	r3, [r4, #2]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f47f af49 	bne.w	8003ba2 <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8003d10:	6860      	ldr	r0, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8003d12:	4e2a      	ldr	r6, [pc, #168]	; (8003dbc <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8003d14:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8003d18:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003d1c:	f47f af42 	bne.w	8003ba4 <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8003d20:	6832      	ldr	r2, [r6, #0]
 8003d22:	4619      	mov	r1, r3
 8003d24:	7960      	ldrb	r0, [r4, #5]
 8003d26:	6993      	ldr	r3, [r2, #24]
 8003d28:	4798      	blx	r3
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	f040 80b8 	bne.w	8003ea0 <Setup0_Process+0x36c>
 8003d30:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8003d32:	4a29      	ldr	r2, [pc, #164]	; (8003dd8 <Setup0_Process+0x2a4>)
 8003d34:	e796      	b.n	8003c64 <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8003d36:	88d9      	ldrh	r1, [r3, #6]
 8003d38:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8003d3a:	9801      	ldr	r0, [sp, #4]
 8003d3c:	4282      	cmp	r2, r0
 8003d3e:	d817      	bhi.n	8003d70 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8003d40:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8003d42:	491e      	ldr	r1, [pc, #120]	; (8003dbc <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8003d44:	d208      	bcs.n	8003d58 <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8003d46:	6808      	ldr	r0, [r1, #0]
 8003d48:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8003d4c:	4282      	cmp	r2, r0
 8003d4e:	f080 808f 	bcs.w	8003e70 <Setup0_Process+0x33c>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8003d52:	4a22      	ldr	r2, [pc, #136]	; (8003ddc <Setup0_Process+0x2a8>)
 8003d54:	2000      	movs	r0, #0
 8003d56:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8003d58:	6809      	ldr	r1, [r1, #0]
 8003d5a:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 8003d5e:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8003d60:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <Setup0_Process+0x2ac>)
 8003d62:	4798      	blx	r3
 8003d64:	e73b      	b.n	8003bde <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8003d66:	2e0b      	cmp	r6, #11
 8003d68:	d18e      	bne.n	8003c88 <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 8003d6a:	481e      	ldr	r0, [pc, #120]	; (8003de4 <Setup0_Process+0x2b0>)
 8003d6c:	4780      	blx	r0
 8003d6e:	e75d      	b.n	8003c2c <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8003d70:	9801      	ldr	r0, [sp, #4]
 8003d72:	4912      	ldr	r1, [pc, #72]	; (8003dbc <Setup0_Process+0x288>)
 8003d74:	8218      	strh	r0, [r3, #16]
 8003d76:	e7ef      	b.n	8003d58 <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8003d78:	6833      	ldr	r3, [r6, #0]
 8003d7a:	6a1a      	ldr	r2, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8003d7c:	2a00      	cmp	r2, #0
 8003d7e:	f47f af71 	bne.w	8003c64 <Setup0_Process+0x130>
 8003d82:	e70f      	b.n	8003ba4 <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8003d84:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	db88      	blt.n	8003c9e <Setup0_Process+0x16a>
 8003d8c:	78a1      	ldrb	r1, [r4, #2]
 8003d8e:	2900      	cmp	r1, #0
 8003d90:	d185      	bne.n	8003c9e <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 8003d92:	88a2      	ldrh	r2, [r4, #4]
 8003d94:	2a00      	cmp	r2, #0
 8003d96:	d182      	bne.n	8003c9e <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 8003d98:	7aa3      	ldrb	r3, [r4, #10]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f43f af48 	beq.w	8003c30 <Setup0_Process+0xfc>
 8003da0:	e77d      	b.n	8003c9e <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8003da2:	2e01      	cmp	r6, #1
 8003da4:	f43f af40 	beq.w	8003c28 <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8003da8:	2e03      	cmp	r6, #3
 8003daa:	f47f af6d 	bne.w	8003c88 <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 8003dae:	4c0e      	ldr	r4, [pc, #56]	; (8003de8 <Setup0_Process+0x2b4>)
 8003db0:	47a0      	blx	r4
 8003db2:	e73b      	b.n	8003c2c <Setup0_Process+0xf8>
 8003db4:	20001620 	.word	0x20001620
 8003db8:	08004351 	.word	0x08004351
 8003dbc:	200015f8 	.word	0x200015f8
 8003dc0:	20001626 	.word	0x20001626
 8003dc4:	080039fd 	.word	0x080039fd
 8003dc8:	08003851 	.word	0x08003851
 8003dcc:	20001628 	.word	0x20001628
 8003dd0:	08003615 	.word	0x08003615
 8003dd4:	08003665 	.word	0x08003665
 8003dd8:	0800363d 	.word	0x0800363d
 8003ddc:	200004b4 	.word	0x200004b4
 8003de0:	08003705 	.word	0x08003705
 8003de4:	08003801 	.word	0x08003801
 8003de8:	08003949 	.word	0x08003949
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8003dec:	78e2      	ldrb	r2, [r4, #3]
 8003dee:	2a01      	cmp	r2, #1
 8003df0:	f47f af4a 	bne.w	8003c88 <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 8003df4:	88a3      	ldrh	r3, [r4, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f47f af46 	bne.w	8003c88 <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8003dfc:	7a60      	ldrb	r0, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8003dfe:	4a2a      	ldr	r2, [pc, #168]	; (8003ea8 <Setup0_Process+0x374>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8003e00:	f040 0120 	orr.w	r1, r0, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8003e04:	6813      	ldr	r3, [r2, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8003e06:	7261      	strb	r1, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8003e08:	69dc      	ldr	r4, [r3, #28]
 8003e0a:	47a0      	blx	r4
 8003e0c:	682c      	ldr	r4, [r5, #0]
 8003e0e:	e70f      	b.n	8003c30 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8003e10:	4c26      	ldr	r4, [pc, #152]	; (8003eac <Setup0_Process+0x378>)
 8003e12:	47a0      	blx	r4
 8003e14:	e70a      	b.n	8003c2c <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8003e16:	6832      	ldr	r2, [r6, #0]
 8003e18:	69d2      	ldr	r2, [r2, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8003e1a:	2a00      	cmp	r2, #0
 8003e1c:	f47f af22 	bne.w	8003c64 <Setup0_Process+0x130>
 8003e20:	e6c0      	b.n	8003ba4 <Setup0_Process+0x70>
 8003e22:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 8003e24:	2109      	movs	r1, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8003e26:	7221      	strb	r1, [r4, #8]
 8003e28:	e6d9      	b.n	8003bde <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8003e2a:	2801      	cmp	r0, #1
 8003e2c:	d02b      	beq.n	8003e86 <Setup0_Process+0x352>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8003e2e:	2802      	cmp	r0, #2
 8003e30:	f47f aeb7 	bne.w	8003ba2 <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8003e34:	7963      	ldrb	r3, [r4, #5]
 8003e36:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8003e3a:	0096      	lsls	r6, r2, #2
 8003e3c:	f106 4080 	add.w	r0, r6, #1073741824	; 0x40000000
 8003e40:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8003e44:	061e      	lsls	r6, r3, #24
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8003e46:	bf56      	itet	pl
 8003e48:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8003e4a:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8003e4c:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8003e50:	4817      	ldr	r0, [pc, #92]	; (8003eb0 <Setup0_Process+0x37c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8003e52:	bf48      	it	mi
 8003e54:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8003e58:	7800      	ldrb	r0, [r0, #0]
 8003e5a:	4282      	cmp	r2, r0
 8003e5c:	f4bf aea1 	bcs.w	8003ba2 <Setup0_Process+0x6e>
 8003e60:	f013 0f70 	tst.w	r3, #112	; 0x70
 8003e64:	f47f ae9d 	bne.w	8003ba2 <Setup0_Process+0x6e>
          && (Status != 0))
 8003e68:	2e00      	cmp	r6, #0
 8003e6a:	f47f af3e 	bne.w	8003cea <Setup0_Process+0x1b6>
 8003e6e:	e698      	b.n	8003ba2 <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8003e70:	fb92 f4f0 	sdiv	r4, r2, r0
 8003e74:	fb00 2214 	mls	r2, r0, r4, r2
 8003e78:	2a00      	cmp	r2, #0
 8003e7a:	f47f af6d 	bne.w	8003d58 <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8003e7e:	4a0d      	ldr	r2, [pc, #52]	; (8003eb4 <Setup0_Process+0x380>)
 8003e80:	2001      	movs	r0, #1
 8003e82:	7010      	strb	r0, [r2, #0]
 8003e84:	e768      	b.n	8003d58 <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8003e86:	4e0c      	ldr	r6, [pc, #48]	; (8003eb8 <Setup0_Process+0x384>)
 8003e88:	7960      	ldrb	r0, [r4, #5]
 8003e8a:	6833      	ldr	r3, [r6, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	4790      	blx	r2
 8003e90:	b930      	cbnz	r0, 8003ea0 <Setup0_Process+0x36c>
          && (pInformation->Current_Configuration != 0))
 8003e92:	682c      	ldr	r4, [r5, #0]
 8003e94:	7aa0      	ldrb	r0, [r4, #10]
 8003e96:	2800      	cmp	r0, #0
 8003e98:	f47f af27 	bne.w	8003cea <Setup0_Process+0x1b6>
 8003e9c:	7861      	ldrb	r1, [r4, #1]
 8003e9e:	e681      	b.n	8003ba4 <Setup0_Process+0x70>
 8003ea0:	6829      	ldr	r1, [r5, #0]
 8003ea2:	7849      	ldrb	r1, [r1, #1]
 8003ea4:	e67e      	b.n	8003ba4 <Setup0_Process+0x70>
 8003ea6:	bf00      	nop
 8003ea8:	2000161c 	.word	0x2000161c
 8003eac:	080037c5 	.word	0x080037c5
 8003eb0:	20000308 	.word	0x20000308
 8003eb4:	200004b4 	.word	0x200004b4
 8003eb8:	200015f8 	.word	0x200015f8

08003ebc <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8003ebc:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8003ebe:	4b28      	ldr	r3, [pc, #160]	; (8003f60 <SetDeviceAddress+0xa4>)
 8003ec0:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003ec2:	2e00      	cmp	r6, #0
 8003ec4:	d043      	beq.n	8003f4e <SetDeviceAddress+0x92>
 8003ec6:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8003eca:	f2c4 0200 	movt	r2, #16384	; 0x4000
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003ece:	6814      	ldr	r4, [r2, #0]
 8003ed0:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003ed4:	4021      	ands	r1, r4
 8003ed6:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8003eda:	f043 0180 	orr.w	r1, r3, #128	; 0x80
 8003ede:	6011      	str	r1, [r2, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	1e74      	subs	r4, r6, #1
 8003ee4:	f645 4304 	movw	r3, #23556	; 0x5c04
 8003ee8:	4296      	cmp	r6, r2
 8003eea:	f004 0401 	and.w	r4, r4, #1
 8003eee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ef2:	d92c      	bls.n	8003f4e <SetDeviceAddress+0x92>
 8003ef4:	b17c      	cbz	r4, 8003f16 <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003ef6:	6819      	ldr	r1, [r3, #0]
 8003ef8:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003efc:	400a      	ands	r2, r1
 8003efe:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8003f02:	f041 0281 	orr.w	r2, r1, #129	; 0x81
 8003f06:	601a      	str	r2, [r3, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003f08:	2202      	movs	r2, #2
 8003f0a:	f645 4308 	movw	r3, #23560	; 0x5c08
 8003f0e:	4296      	cmp	r6, r2
 8003f10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f14:	d91b      	bls.n	8003f4e <SetDeviceAddress+0x92>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003f16:	681f      	ldr	r7, [r3, #0]
 8003f18:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8003f1c:	f640 740f 	movw	r4, #3855	; 0xf0f
 8003f20:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003f24:	403c      	ands	r4, r7
 8003f26:	ea45 0704 	orr.w	r7, r5, r4
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f841 7b04 	str.w	r7, [r1], #4
 8003f30:	685f      	ldr	r7, [r3, #4]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003f32:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003f34:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8003f38:	f640 740f 	movw	r4, #3855	; 0xf0f
 8003f3c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003f40:	403c      	ands	r4, r7
 8003f42:	432c      	orrs	r4, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003f44:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003f46:	605c      	str	r4, [r3, #4]
 8003f48:	1d0b      	adds	r3, r1, #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003f4a:	4296      	cmp	r6, r2
 8003f4c:	d8e3      	bhi.n	8003f16 <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8003f4e:	f645 434c 	movw	r3, #23628	; 0x5c4c
 8003f52:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003f56:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f5a:	6018      	str	r0, [r3, #0]
}
 8003f5c:	bcf0      	pop	{r4, r5, r6, r7}
 8003f5e:	4770      	bx	lr
 8003f60:	20000308 	.word	0x20000308

08003f64 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8003f64:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8003f66:	4c14      	ldr	r4, [pc, #80]	; (8003fb8 <In0_Process+0x54>)
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8003f6c:	2a02      	cmp	r2, #2
 8003f6e:	d012      	beq.n	8003f96 <In0_Process+0x32>
 8003f70:	2a04      	cmp	r2, #4
 8003f72:	d010      	beq.n	8003f96 <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8003f74:	2a06      	cmp	r2, #6
 8003f76:	d004      	beq.n	8003f82 <In0_Process+0x1e>
 8003f78:	2008      	movs	r0, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8003f7a:	7218      	strb	r0, [r3, #8]

  return Post0_Process();
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <In0_Process+0x58>)
 8003f7e:	4798      	blx	r3
}
 8003f80:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8003f82:	7859      	ldrb	r1, [r3, #1]
 8003f84:	2905      	cmp	r1, #5
 8003f86:	d00b      	beq.n	8003fa0 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <In0_Process+0x5c>)
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	6881      	ldr	r1, [r0, #8]
 8003f8e:	4788      	blx	r1
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	2008      	movs	r0, #8
 8003f94:	e7f1      	b.n	8003f7a <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8003f96:	4a0b      	ldr	r2, [pc, #44]	; (8003fc4 <In0_Process+0x60>)
 8003f98:	4790      	blx	r2
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	7a18      	ldrb	r0, [r3, #8]
 8003f9e:	e7ec      	b.n	8003f7a <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8003fa0:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8003fa2:	0652      	lsls	r2, r2, #25
 8003fa4:	d1f0      	bne.n	8003f88 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8003fa6:	78d8      	ldrb	r0, [r3, #3]
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <In0_Process+0x64>)
 8003faa:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8003fac:	4807      	ldr	r0, [pc, #28]	; (8003fcc <In0_Process+0x68>)
 8003fae:	6801      	ldr	r1, [r0, #0]
 8003fb0:	6a0a      	ldr	r2, [r1, #32]
 8003fb2:	4790      	blx	r2
 8003fb4:	e7e8      	b.n	8003f88 <In0_Process+0x24>
 8003fb6:	bf00      	nop
 8003fb8:	20001620 	.word	0x20001620
 8003fbc:	080039fd 	.word	0x080039fd
 8003fc0:	200015f8 	.word	0x200015f8
 8003fc4:	08003705 	.word	0x08003705
 8003fc8:	08003ebd 	.word	0x08003ebd
 8003fcc:	2000161c 	.word	0x2000161c

08003fd0 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop

08003fd4 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8003fd4:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 8003fd6:	f241 6200 	movw	r2, #5632	; 0x1600
 8003fda:	f241 6420 	movw	r4, #5664	; 0x1620
 8003fde:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003fe2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003fe6:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 8003fe8:	2402      	movs	r4, #2
 8003fea:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 8003fec:	f241 50f8 	movw	r0, #5624	; 0x15f8
 8003ff0:	f240 2384 	movw	r3, #644	; 0x284
  pUser_Standard_Requests = &User_Standard_Requests;
 8003ff4:	f241 611c 	movw	r1, #5660	; 0x161c
 8003ff8:	f240 22b4 	movw	r2, #692	; 0x2b4
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8003ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004000:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 8004004:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004008:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 800400c:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800400e:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	4780      	blx	r0
 8004014:	bd10      	pop	{r4, pc}
 8004016:	bf00      	nop

08004018 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8004018:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800401c:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8004020:	1c53      	adds	r3, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8004022:	004a      	lsls	r2, r1, #1
  for (i = n; i != 0; i--)
 8004024:	1059      	asrs	r1, r3, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004026:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004028:	d02f      	beq.n	800408a <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800402a:	7845      	ldrb	r5, [r0, #1]
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 800402c:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800402e:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8004032:	3901      	subs	r1, #1
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004034:	ea44 2305 	orr.w	r3, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8004038:	f822 3b04 	strh.w	r3, [r2], #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800403c:	460b      	mov	r3, r1
 800403e:	3204      	adds	r2, #4
 8004040:	f001 0101 	and.w	r1, r1, #1
 8004044:	3002      	adds	r0, #2
 8004046:	b303      	cbz	r3, 800408a <UserToPMABufferCopy+0x72>
 8004048:	b159      	cbz	r1, 8004062 <UserToPMABufferCopy+0x4a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800404a:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800404e:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8004052:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004054:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8004058:	f822 1c04 	strh.w	r1, [r2, #-4]
 800405c:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800405e:	3b01      	subs	r3, #1
 8004060:	d013      	beq.n	800408a <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004062:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004066:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 800406a:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    *pdwVal++ = temp2;
 800406e:	f822 4c04 	strh.w	r4, [r2, #-4]
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004072:	7844      	ldrb	r4, [r0, #1]
 8004074:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004076:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 800407a:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800407c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8004080:	f822 1b04 	strh.w	r1, [r2], #4
 8004084:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004086:	3b02      	subs	r3, #2
 8004088:	d1eb      	bne.n	8004062 <UserToPMABufferCopy+0x4a>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800408a:	bc30      	pop	{r4, r5}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop

08004090 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8004090:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8004094:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8004098:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800409a:	0059      	lsls	r1, r3, #1
  for (i = n; i != 0; i--)
 800409c:	1052      	asrs	r2, r2, #1
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800409e:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80040a0:	d01c      	beq.n	80040dc <PMAToUserBufferCopy+0x4c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80040a2:	680b      	ldr	r3, [r1, #0]
 80040a4:	3a01      	subs	r2, #1
 80040a6:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80040aa:	4613      	mov	r3, r2
 80040ac:	3002      	adds	r0, #2
 80040ae:	f002 0201 	and.w	r2, r2, #1
 80040b2:	b19b      	cbz	r3, 80040dc <PMAToUserBufferCopy+0x4c>
 80040b4:	b132      	cbz	r2, 80040c4 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80040b6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80040ba:	f820 2c02 	strh.w	r2, [r0, #-2]
 80040be:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80040c0:	3b01      	subs	r3, #1
 80040c2:	d00b      	beq.n	80040dc <PMAToUserBufferCopy+0x4c>
 80040c4:	1d0c      	adds	r4, r1, #4
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80040c6:	684d      	ldr	r5, [r1, #4]
 80040c8:	6889      	ldr	r1, [r1, #8]
 80040ca:	4602      	mov	r2, r0
 80040cc:	f820 5c02 	strh.w	r5, [r0, #-2]
 80040d0:	f822 1b02 	strh.w	r1, [r2], #2
 80040d4:	1c90      	adds	r0, r2, #2
 80040d6:	1d21      	adds	r1, r4, #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80040d8:	3b02      	subs	r3, #2
 80040da:	d1f3      	bne.n	80040c4 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 80040dc:	bc30      	pop	{r4, r5}
 80040de:	4770      	bx	lr

080040e0 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 80040e0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80040e4:	f645 4250 	movw	r2, #23632	; 0x5c50
 80040e8:	4003      	ands	r3, r0
 80040ea:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop

080040f4 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 80040f4:	0080      	lsls	r0, r0, #2
 80040f6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80040fa:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80040fe:	6810      	ldr	r0, [r2, #0]
 8004100:	f648 138f 	movw	r3, #35215	; 0x898f
 8004104:	4003      	ands	r3, r0
 8004106:	4319      	orrs	r1, r3
 8004108:	6011      	str	r1, [r2, #0]
 800410a:	4770      	bx	lr

0800410c <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800410c:	0080      	lsls	r0, r0, #2
 800410e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8004112:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8004116:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8004118:	f001 0010 	and.w	r0, r1, #16
 800411c:	6814      	ldr	r4, [r2, #0]
 800411e:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8004122:	b280      	uxth	r0, r0
 8004124:	4023      	ands	r3, r4
 8004126:	b968      	cbnz	r0, 8004144 <SetEPTxStatus+0x38>
 8004128:	b29b      	uxth	r3, r3
 800412a:	f001 0120 	and.w	r1, r1, #32
 800412e:	b288      	uxth	r0, r1
 8004130:	b108      	cbz	r0, 8004136 <SetEPTxStatus+0x2a>
 8004132:	f083 0320 	eor.w	r3, r3, #32
 8004136:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800413a:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 800413e:	6010      	str	r0, [r2, #0]
}
 8004140:	bc10      	pop	{r4}
 8004142:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8004144:	f083 0310 	eor.w	r3, r3, #16
 8004148:	e7ef      	b.n	800412a <SetEPTxStatus+0x1e>
 800414a:	bf00      	nop

0800414c <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800414c:	0080      	lsls	r0, r0, #2
 800414e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8004152:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8004156:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8004158:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 800415c:	6814      	ldr	r4, [r2, #0]
 800415e:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8004162:	b280      	uxth	r0, r0
 8004164:	4023      	ands	r3, r4
 8004166:	b968      	cbnz	r0, 8004184 <SetEPRxStatus+0x38>
 8004168:	b29b      	uxth	r3, r3
 800416a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800416e:	b288      	uxth	r0, r1
 8004170:	b108      	cbz	r0, 8004176 <SetEPRxStatus+0x2a>
 8004172:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004176:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800417a:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 800417e:	6010      	str	r0, [r2, #0]
}
 8004180:	bc10      	pop	{r4}
 8004182:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8004184:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004188:	e7ef      	b.n	800416a <SetEPRxStatus+0x1e>
 800418a:	bf00      	nop

0800418c <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800418c:	0080      	lsls	r0, r0, #2
 800418e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8004192:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8004196:	6801      	ldr	r1, [r0, #0]
 8004198:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800419c:	400b      	ands	r3, r1
 800419e:	f083 0230 	eor.w	r2, r3, #48	; 0x30
 80041a2:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 80041a6:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 80041aa:	6003      	str	r3, [r0, #0]
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop

080041b0 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 80041b0:	0080      	lsls	r0, r0, #2
 80041b2:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80041b6:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 80041ba:	6801      	ldr	r1, [r0, #0]
 80041bc:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80041c0:	400b      	ands	r3, r1
 80041c2:	f483 5240 	eor.w	r2, r3, #12288	; 0x3000
 80041c6:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 80041ca:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 80041ce:	6003      	str	r3, [r0, #0]
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop

080041d4 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 80041d4:	0080      	lsls	r0, r0, #2
 80041d6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80041da:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 80041de:	6801      	ldr	r1, [r0, #0]
 80041e0:	f640 630f 	movw	r3, #3599	; 0xe0f
 80041e4:	400b      	ands	r3, r1
 80041e6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80041ea:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 80041ee:	6001      	str	r1, [r0, #0]
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop

080041f4 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 80041f4:	0080      	lsls	r0, r0, #2
 80041f6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80041fa:	f503 40b8 	add.w	r0, r3, #23552	; 0x5c00
 80041fe:	6802      	ldr	r2, [r0, #0]
 8004200:	0451      	lsls	r1, r2, #17
 8004202:	d508      	bpl.n	8004216 <ClearDTOG_RX+0x22>
 8004204:	6801      	ldr	r1, [r0, #0]
 8004206:	f640 730f 	movw	r3, #3855	; 0xf0f
 800420a:	400b      	ands	r3, r1
 800420c:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8004210:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8004214:	6001      	str	r1, [r0, #0]
 8004216:	4770      	bx	lr

08004218 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8004218:	0080      	lsls	r0, r0, #2
 800421a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800421e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	0650      	lsls	r0, r2, #25
 8004226:	d508      	bpl.n	800423a <ClearDTOG_TX+0x22>
 8004228:	6819      	ldr	r1, [r3, #0]
 800422a:	f640 700f 	movw	r0, #3855	; 0xf0f
 800422e:	4008      	ands	r0, r1
 8004230:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 8004234:	f042 01c0 	orr.w	r1, r2, #192	; 0xc0
 8004238:	6019      	str	r1, [r3, #0]
 800423a:	4770      	bx	lr

0800423c <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800423c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8004240:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800424a:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800424c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8004250:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8004254:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 8004258:	0042      	lsls	r2, r0, #1
 800425a:	400b      	ands	r3, r1
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	4770      	bx	lr

08004260 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8004260:	f645 4350 	movw	r3, #23632	; 0x5c50
 8004264:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800426e:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8004270:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8004274:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004278:	18c3      	adds	r3, r0, r3
 800427a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800427e:	0058      	lsls	r0, r3, #1
 8004280:	400a      	ands	r2, r1
 8004282:	6002      	str	r2, [r0, #0]
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop

08004288 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8004288:	f645 4350 	movw	r3, #23632	; 0x5c50
 800428c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004290:	6819      	ldr	r1, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8004292:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8004294:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8004298:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800429c:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 80042a0:	004a      	lsls	r2, r1, #1
}
 80042a2:	8810      	ldrh	r0, [r2, #0]
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop

080042a8 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 80042a8:	f645 4350 	movw	r3, #23632	; 0x5c50
 80042ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	f243 0104 	movw	r1, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80042b6:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 80042b8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80042bc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80042c0:	1842      	adds	r2, r0, r1
 80042c2:	0051      	lsls	r1, r2, #1
}
 80042c4:	8808      	ldrh	r0, [r1, #0]
 80042c6:	4770      	bx	lr

080042c8 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80042c8:	f645 4350 	movw	r3, #23632	; 0x5c50
 80042cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80042d6:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80042d8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80042dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042e0:	18c3      	adds	r3, r0, r3
 80042e2:	005a      	lsls	r2, r3, #1
 80042e4:	6011      	str	r1, [r2, #0]
 80042e6:	4770      	bx	lr

080042e8 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80042e8:	f645 4350 	movw	r3, #23632	; 0x5c50
 80042ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80042f6:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80042f8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80042fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004300:	18c3      	adds	r3, r0, r3
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	293e      	cmp	r1, #62	; 0x3e
 8004306:	d909      	bls.n	800431c <SetEPRxCount+0x34>
 8004308:	094a      	lsrs	r2, r1, #5
 800430a:	06c9      	lsls	r1, r1, #27
 800430c:	d101      	bne.n	8004312 <SetEPRxCount+0x2a>
 800430e:	1e50      	subs	r0, r2, #1
 8004310:	b282      	uxth	r2, r0
 8004312:	0291      	lsls	r1, r2, #10
 8004314:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8004318:	6018      	str	r0, [r3, #0]
 800431a:	4770      	bx	lr
 800431c:	084a      	lsrs	r2, r1, #1
 800431e:	07c8      	lsls	r0, r1, #31
 8004320:	bf48      	it	mi
 8004322:	3201      	addmi	r2, #1
 8004324:	0291      	lsls	r1, r2, #10
 8004326:	6019      	str	r1, [r3, #0]
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop

0800432c <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800432c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8004330:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	f243 0106 	movw	r1, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800433a:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800433c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004340:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004344:	1842      	adds	r2, r0, r1
 8004346:	0051      	lsls	r1, r2, #1
 8004348:	680b      	ldr	r3, [r1, #0]
}
 800434a:	0598      	lsls	r0, r3, #22
 800434c:	0d80      	lsrs	r0, r0, #22
 800434e:	4770      	bx	lr

08004350 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8004350:	b2c3      	uxtb	r3, r0
 8004352:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8004354:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop

0800435c <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 800435c:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800435e:	f241 6324 	movw	r3, #5668	; 0x1624
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8004362:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8004366:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800436a:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800436e:	2000      	movs	r0, #0
 8004370:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 8004374:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8004378:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800437c:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 800437e:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8004380:	6011      	str	r1, [r2, #0]
  return 0;
}
 8004382:	bc10      	pop	{r4}
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop

08004388 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8004388:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800438a:	f244 332d 	movw	r3, #17197	; 0x432d
 800438e:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8004392:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004396:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8004398:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800439a:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800439c:	f244 21a9 	movw	r1, #17065	; 0x42a9
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80043a0:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 80043a2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80043a6:	4628      	mov	r0, r5
 80043a8:	4788      	blx	r1
 80043aa:	f244 0391 	movw	r3, #16529	; 0x4091
 80043ae:	4601      	mov	r1, r0
 80043b0:	4622      	mov	r2, r4
 80043b2:	4630      	mov	r0, r6
 80043b4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80043b8:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 80043ba:	4620      	mov	r0, r4
 80043bc:	bd70      	pop	{r4, r5, r6, pc}
 80043be:	bf00      	nop

080043c0 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 80043c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8004574 <CTR_LP+0x1b4>
 80043c8:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80043ca:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80043ce:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80043d0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8004578 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80043d4:	4d62      	ldr	r5, [pc, #392]	; (8004560 <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80043d6:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80043da:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 80043de:	46d0      	mov	r8, sl
 80043e0:	f8db 0000 	ldr.w	r0, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80043e4:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80043e8:	b282      	uxth	r2, r0
 80043ea:	0403      	lsls	r3, r0, #16
 80043ec:	f8aa 2000 	strh.w	r2, [sl]
 80043f0:	f140 80ab 	bpl.w	800454a <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80043f4:	f8b8 3000 	ldrh.w	r3, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80043f8:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80043fc:	f003 020f 	and.w	r2, r3, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8004400:	0090      	lsls	r0, r2, #2
 8004402:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 8004406:	4e57      	ldr	r6, [pc, #348]	; (8004564 <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8004408:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800440c:	4f54      	ldr	r7, [pc, #336]	; (8004560 <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 800440e:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8004410:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8004414:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 8004418:	2a00      	cmp	r2, #0
 800441a:	d133      	bne.n	8004484 <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800441c:	6822      	ldr	r2, [r4, #0]
 800441e:	b290      	uxth	r0, r2
 8004420:	8028      	strh	r0, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8004422:	882b      	ldrh	r3, [r5, #0]
 8004424:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004428:	8032      	strh	r2, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 800442a:	8828      	ldrh	r0, [r5, #0]
 800442c:	f400 5340 	and.w	r3, r0, #12288	; 0x3000
 8004430:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8004432:	6822      	ldr	r2, [r4, #0]
 8004434:	4011      	ands	r1, r2
 8004436:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800443a:	f081 0020 	eor.w	r0, r1, #32
 800443e:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8004442:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004446:	6022      	str	r2, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8004448:	f8b8 1000 	ldrh.w	r1, [r8]
 800444c:	f001 0010 	and.w	r0, r1, #16
 8004450:	b283      	uxth	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d049      	beq.n	80044ea <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	b291      	uxth	r1, r2
 800445a:	f8ad 1006 	strh.w	r1, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 800445e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004462:	f400 6300 	and.w	r3, r0, #2048	; 0x800
 8004466:	b29a      	uxth	r2, r3
 8004468:	2a00      	cmp	r2, #0
 800446a:	d171      	bne.n	8004550 <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 800446c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8004470:	b208      	sxth	r0, r1
 8004472:	2800      	cmp	r0, #0
 8004474:	dab4      	bge.n	80043e0 <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 8004476:	6822      	ldr	r2, [r4, #0]
 8004478:	f640 738f 	movw	r3, #3983	; 0xf8f
 800447c:	4013      	ands	r3, r2
 800447e:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8004480:	4939      	ldr	r1, [pc, #228]	; (8004568 <CTR_LP+0x1a8>)
 8004482:	e038      	b.n	80044f6 <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8004484:	6804      	ldr	r4, [r0, #0]
 8004486:	b2a1      	uxth	r1, r4
 8004488:	f8ad 1006 	strh.w	r1, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 800448c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004490:	b214      	sxth	r4, r2
 8004492:	2c00      	cmp	r4, #0
 8004494:	db1b      	blt.n	80044ce <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8004496:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800449a:	f001 0280 	and.w	r2, r1, #128	; 0x80
 800449e:	b293      	uxth	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d09d      	beq.n	80043e0 <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80044a4:	f899 4000 	ldrb.w	r4, [r9]
 80044a8:	f648 730f 	movw	r3, #36623	; 0x8f0f
 80044ac:	00a0      	lsls	r0, r4, #2
 80044ae:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 80044b2:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 80044b6:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80044b8:	3c01      	subs	r4, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80044ba:	4003      	ands	r3, r0
 80044bc:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80044be:	f240 2344 	movw	r3, #580	; 0x244
 80044c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044c6:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80044ca:	4788      	blx	r1
 80044cc:	e788      	b.n	80043e0 <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 80044ce:	6801      	ldr	r1, [r0, #0]
 80044d0:	f640 728f 	movw	r2, #3983	; 0xf8f
 80044d4:	400a      	ands	r2, r1
 80044d6:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80044d8:	f240 2060 	movw	r0, #608	; 0x260
 80044dc:	3b01      	subs	r3, #1
 80044de:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80044e2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80044e6:	47a0      	blx	r4
 80044e8:	e7d5      	b.n	8004496 <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80044ea:	6821      	ldr	r1, [r4, #0]
 80044ec:	f648 730f 	movw	r3, #36623	; 0x8f0f
 80044f0:	400b      	ands	r3, r1
        In0_Process();
 80044f2:	491e      	ldr	r1, [pc, #120]	; (800456c <CTR_LP+0x1ac>)
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80044f4:	6023      	str	r3, [r4, #0]
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 80044f6:	4788      	blx	r1
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80044f8:	6820      	ldr	r0, [r4, #0]
 80044fa:	883a      	ldrh	r2, [r7, #0]
 80044fc:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8004500:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 8004504:	b28a      	uxth	r2, r1
 8004506:	4003      	ands	r3, r0
 8004508:	b10a      	cbz	r2, 800450e <CTR_LP+0x14e>
 800450a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800450e:	8838      	ldrh	r0, [r7, #0]
 8004510:	f400 5100 	and.w	r1, r0, #8192	; 0x2000
 8004514:	b28a      	uxth	r2, r1
 8004516:	b10a      	cbz	r2, 800451c <CTR_LP+0x15c>
 8004518:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800451c:	8830      	ldrh	r0, [r6, #0]
 800451e:	f000 0110 	and.w	r1, r0, #16
 8004522:	b28a      	uxth	r2, r1
 8004524:	b10a      	cbz	r2, 800452a <CTR_LP+0x16a>
 8004526:	f083 0310 	eor.w	r3, r3, #16
 800452a:	8830      	ldrh	r0, [r6, #0]
 800452c:	f000 0120 	and.w	r1, r0, #32
 8004530:	b28a      	uxth	r2, r1
 8004532:	b10a      	cbz	r2, 8004538 <CTR_LP+0x178>
 8004534:	f083 0320 	eor.w	r3, r3, #32
 8004538:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 800453c:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8004540:	f040 0280 	orr.w	r2, r0, #128	; 0x80
 8004544:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8004548:	600a      	str	r2, [r1, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800454a:	b003      	add	sp, #12
 800454c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8004550:	6820      	ldr	r0, [r4, #0]
 8004552:	f640 728f 	movw	r2, #3983	; 0xf8f
 8004556:	4002      	ands	r2, r0
 8004558:	6022      	str	r2, [r4, #0]
          Setup0_Process();
 800455a:	4905      	ldr	r1, [pc, #20]	; (8004570 <CTR_LP+0x1b0>)
 800455c:	e7cb      	b.n	80044f6 <CTR_LP+0x136>
 800455e:	bf00      	nop
 8004560:	20001626 	.word	0x20001626
 8004564:	20001628 	.word	0x20001628
 8004568:	08003a45 	.word	0x08003a45
 800456c:	08003f65 	.word	0x08003f65
 8004570:	08003b35 	.word	0x08003b35
 8004574:	20000dc8 	.word	0x20000dc8
 8004578:	200015fc 	.word	0x200015fc
 800457c:	00000a0a 	.word	0x00000a0a
 8004580:	2a2a2a2a 	.word	0x2a2a2a2a
 8004584:	2a2a2a2a 	.word	0x2a2a2a2a
 8004588:	2a2a2a2a 	.word	0x2a2a2a2a
 800458c:	2a2a2a2a 	.word	0x2a2a2a2a
 8004590:	2a2a2a2a 	.word	0x2a2a2a2a
 8004594:	2a2a2a2a 	.word	0x2a2a2a2a
 8004598:	2a2a2a2a 	.word	0x2a2a2a2a
 800459c:	2a2a2a2a 	.word	0x2a2a2a2a
 80045a0:	2a2a2a2a 	.word	0x2a2a2a2a
 80045a4:	2a2a2a2a 	.word	0x2a2a2a2a
 80045a8:	2a2a2a2a 	.word	0x2a2a2a2a
 80045ac:	2a2a2a2a 	.word	0x2a2a2a2a
 80045b0:	2a2a2a2a 	.word	0x2a2a2a2a
 80045b4:	0a2a2a2a 	.word	0x0a2a2a2a
 80045b8:	00000000 	.word	0x00000000
 80045bc:	20202020 	.word	0x20202020
 80045c0:	20202020 	.word	0x20202020
 80045c4:	20202020 	.word	0x20202020
 80045c8:	20202020 	.word	0x20202020
 80045cc:	20202020 	.word	0x20202020
 80045d0:	504d2020 	.word	0x504d2020
 80045d4:	35303655 	.word	0x35303655
 80045d8:	20202030 	.word	0x20202030
 80045dc:	20202020 	.word	0x20202020
 80045e0:	20202020 	.word	0x20202020
 80045e4:	20202020 	.word	0x20202020
 80045e8:	20202020 	.word	0x20202020
 80045ec:	20202020 	.word	0x20202020
 80045f0:	0a202020 	.word	0x0a202020
 80045f4:	00000000 	.word	0x00000000
 80045f8:	2e31202a 	.word	0x2e31202a
 80045fc:	44434c20 	.word	0x44434c20
 8004600:	656c4320 	.word	0x656c4320
 8004604:	20207261 	.word	0x20207261
 8004608:	20202020 	.word	0x20202020
 800460c:	20202020 	.word	0x20202020
 8004610:	20202020 	.word	0x20202020
 8004614:	20202020 	.word	0x20202020
 8004618:	20202020 	.word	0x20202020
 800461c:	20202020 	.word	0x20202020
 8004620:	20202020 	.word	0x20202020
 8004624:	20202020 	.word	0x20202020
 8004628:	20202020 	.word	0x20202020
 800462c:	0a2a2020 	.word	0x0a2a2020
 8004630:	00000000 	.word	0x00000000
 8004634:	2e32202a 	.word	0x2e32202a
 8004638:	6f685320 	.word	0x6f685320
 800463c:	63412077 	.word	0x63412077
 8004640:	20202063 	.word	0x20202063
 8004644:	20202020 	.word	0x20202020
 8004648:	20202020 	.word	0x20202020
 800464c:	20202020 	.word	0x20202020
 8004650:	20202020 	.word	0x20202020
 8004654:	20202020 	.word	0x20202020
 8004658:	20202020 	.word	0x20202020
 800465c:	20202020 	.word	0x20202020
 8004660:	20202020 	.word	0x20202020
 8004664:	20202020 	.word	0x20202020
 8004668:	0a2a2020 	.word	0x0a2a2020
 800466c:	00000000 	.word	0x00000000
 8004670:	2e33202a 	.word	0x2e33202a
 8004674:	6f685320 	.word	0x6f685320
 8004678:	504d2077 	.word	0x504d2077
 800467c:	35303655 	.word	0x35303655
 8004680:	65522030 	.word	0x65522030
 8004684:	20207367 	.word	0x20207367
 8004688:	20202020 	.word	0x20202020
 800468c:	20202020 	.word	0x20202020
 8004690:	20202020 	.word	0x20202020
 8004694:	20202020 	.word	0x20202020
 8004698:	20202020 	.word	0x20202020
 800469c:	20202020 	.word	0x20202020
 80046a0:	20202020 	.word	0x20202020
 80046a4:	0a2a2020 	.word	0x0a2a2020
 80046a8:	00000000 	.word	0x00000000
 80046ac:	2e34202a 	.word	0x2e34202a
 80046b0:	20202020 	.word	0x20202020
 80046b4:	20202020 	.word	0x20202020
 80046b8:	20202020 	.word	0x20202020
 80046bc:	20202020 	.word	0x20202020
 80046c0:	20202020 	.word	0x20202020
 80046c4:	20202020 	.word	0x20202020
 80046c8:	20202020 	.word	0x20202020
 80046cc:	20202020 	.word	0x20202020
 80046d0:	20202020 	.word	0x20202020
 80046d4:	20202020 	.word	0x20202020
 80046d8:	20202020 	.word	0x20202020
 80046dc:	20202020 	.word	0x20202020
 80046e0:	0a2a2020 	.word	0x0a2a2020
 80046e4:	00000000 	.word	0x00000000
 80046e8:	2e35202a 	.word	0x2e35202a
 80046ec:	20202020 	.word	0x20202020
 80046f0:	20202020 	.word	0x20202020
 80046f4:	20202020 	.word	0x20202020
 80046f8:	20202020 	.word	0x20202020
 80046fc:	20202020 	.word	0x20202020
 8004700:	20202020 	.word	0x20202020
 8004704:	20202020 	.word	0x20202020
 8004708:	20202020 	.word	0x20202020
 800470c:	20202020 	.word	0x20202020
 8004710:	20202020 	.word	0x20202020
 8004714:	20202020 	.word	0x20202020
 8004718:	20202020 	.word	0x20202020
 800471c:	0a2a2020 	.word	0x0a2a2020
 8004720:	00000000 	.word	0x00000000
 8004724:	2e36202a 	.word	0x2e36202a
 8004728:	20202020 	.word	0x20202020
 800472c:	20202020 	.word	0x20202020
 8004730:	20202020 	.word	0x20202020
 8004734:	20202020 	.word	0x20202020
 8004738:	20202020 	.word	0x20202020
 800473c:	20202020 	.word	0x20202020
 8004740:	20202020 	.word	0x20202020
 8004744:	20202020 	.word	0x20202020
 8004748:	20202020 	.word	0x20202020
 800474c:	20202020 	.word	0x20202020
 8004750:	20202020 	.word	0x20202020
 8004754:	20202020 	.word	0x20202020
 8004758:	0a2a2020 	.word	0x0a2a2020
 800475c:	00000000 	.word	0x00000000
 8004760:	2e37202a 	.word	0x2e37202a
 8004764:	20202020 	.word	0x20202020
 8004768:	20202020 	.word	0x20202020
 800476c:	20202020 	.word	0x20202020
 8004770:	20202020 	.word	0x20202020
 8004774:	20202020 	.word	0x20202020
 8004778:	20202020 	.word	0x20202020
 800477c:	20202020 	.word	0x20202020
 8004780:	20202020 	.word	0x20202020
 8004784:	20202020 	.word	0x20202020
 8004788:	20202020 	.word	0x20202020
 800478c:	20202020 	.word	0x20202020
 8004790:	20202020 	.word	0x20202020
 8004794:	0a2a2020 	.word	0x0a2a2020
 8004798:	00000000 	.word	0x00000000
 800479c:	2e38202a 	.word	0x2e38202a
 80047a0:	20202020 	.word	0x20202020
 80047a4:	20202020 	.word	0x20202020
 80047a8:	20202020 	.word	0x20202020
 80047ac:	20202020 	.word	0x20202020
 80047b0:	20202020 	.word	0x20202020
 80047b4:	20202020 	.word	0x20202020
 80047b8:	20202020 	.word	0x20202020
 80047bc:	20202020 	.word	0x20202020
 80047c0:	20202020 	.word	0x20202020
 80047c4:	20202020 	.word	0x20202020
 80047c8:	20202020 	.word	0x20202020
 80047cc:	20202020 	.word	0x20202020
 80047d0:	0a2a2020 	.word	0x0a2a2020
 80047d4:	00000000 	.word	0x00000000
 80047d8:	2e39202a 	.word	0x2e39202a
 80047dc:	20202020 	.word	0x20202020
 80047e0:	20202020 	.word	0x20202020
 80047e4:	20202020 	.word	0x20202020
 80047e8:	20202020 	.word	0x20202020
 80047ec:	20202020 	.word	0x20202020
 80047f0:	20202020 	.word	0x20202020
 80047f4:	20202020 	.word	0x20202020
 80047f8:	20202020 	.word	0x20202020
 80047fc:	20202020 	.word	0x20202020
 8004800:	20202020 	.word	0x20202020
 8004804:	20202020 	.word	0x20202020
 8004808:	20202020 	.word	0x20202020
 800480c:	0a2a2020 	.word	0x0a2a2020
 8004810:	00000000 	.word	0x00000000
 8004814:	2e6d202a 	.word	0x2e6d202a
 8004818:	654d2020 	.word	0x654d2020
 800481c:	2020756e 	.word	0x2020756e
 8004820:	20202020 	.word	0x20202020
 8004824:	20202020 	.word	0x20202020
 8004828:	20202020 	.word	0x20202020
 800482c:	20202020 	.word	0x20202020
 8004830:	20202020 	.word	0x20202020
 8004834:	20202020 	.word	0x20202020
 8004838:	20202020 	.word	0x20202020
 800483c:	20202020 	.word	0x20202020
 8004840:	20202020 	.word	0x20202020
 8004844:	20202020 	.word	0x20202020
 8004848:	0a2a2020 	.word	0x0a2a2020
 800484c:	00000000 	.word	0x00000000
 8004850:	00203e3e 	.word	0x00203e3e
 8004854:	72616d53 	.word	0x72616d53
 8004858:	626f5274 	.word	0x626f5274
 800485c:	4220746f 	.word	0x4220746f
 8004860:	00000044 	.word	0x00000044
 8004864:	2044434c 	.word	0x2044434c
 8004868:	61656c43 	.word	0x61656c43
 800486c:	000a2072 	.word	0x000a2072
 8004870:	25205841 	.word	0x25205841
 8004874:	00002064 	.word	0x00002064
 8004878:	25205941 	.word	0x25205941
 800487c:	00002064 	.word	0x00002064
 8004880:	25205a41 	.word	0x25205a41
 8004884:	00002064 	.word	0x00002064
 8004888:	64252054 	.word	0x64252054
 800488c:	00000a20 	.word	0x00000a20
 8004890:	7830200a 	.word	0x7830200a
 8004894:	78323025 	.word	0x78323025
 8004898:	0000203a 	.word	0x0000203a
 800489c:	78323025 	.word	0x78323025
 80048a0:	00000020 	.word	0x00000020
 80048a4:	276e6143 	.word	0x276e6143
 80048a8:	69662074 	.word	0x69662074
 80048ac:	4d20646e 	.word	0x4d20646e
 80048b0:	30365550 	.word	0x30365550
 80048b4:	0a203035 	.word	0x0a203035
 80048b8:	00000000 	.word	0x00000000
 80048bc:	20727245 	.word	0x20727245
 80048c0:	74697277 	.word	0x74697277
 80048c4:	504d2065 	.word	0x504d2065
 80048c8:	35303655 	.word	0x35303655
 80048cc:	41525f30 	.word	0x41525f30
 80048d0:	5257505f 	.word	0x5257505f
 80048d4:	4d474d5f 	.word	0x4d474d5f
 80048d8:	20315f54 	.word	0x20315f54
 80048dc:	6425203a 	.word	0x6425203a
 80048e0:	0000000a 	.word	0x0000000a

080048e4 <Virtual_Com_Port_StringVendor>:
 80048e4:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 80048f4:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8004904:	00630069 00000073                       i.c.s...

0800490c <Virtual_Com_Port_DeviceDescriptor>:
 800490c:	02000112 40000002 57400483 02010200     .......@..@W....
 800491c:	00000103                                ....

08004920 <Virtual_Com_Port_StringLangID>:
 8004920:	04090304                                ....

08004924 <Virtual_Com_Port_StringProduct>:
 8004924:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8004934:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8004944:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8004954:	00000020                                 ...

08004958 <Virtual_Com_Port_ConfigDescriptor>:
 8004958:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8004968:	24050001 05011000 01000124 02022404     ...$....$....$..
 8004978:	00062405 82050701 ff000803 00010409     .$..............
 8004988:	00000a02 03050700 00004002 02810507     .........@......
 8004998:	00000040                                @...
