
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046dc  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  20000000  080046dc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000122c  20000200  08004a00  00010200  2**9
                  ALLOC
  3 ._usrstack    00000100  2000142c  08005c2c  00010200  2**0
                  ALLOC
  4 .ARM.attributes 00000033  00000000  00000000  000100e8  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000a133  00000000  00000000  0001011b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000319d  00000000  00000000  0001a24e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000a6af  00000000  00000000  0001d3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000b30  00000000  00000000  00027a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000021a8  00000000  00000000  000285ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000037ad  00000000  00000000  0002a772  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002557  00000000  00000000  0002df1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000070  00000000  00000000  00030476  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001b84  00000000  00000000  000304e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 ed 0e 00 08                             .P. ....

08000008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800000a:	f241 3311 	movw	r3, #4881	; 0x1311
 800000e:	2000      	movs	r0, #0
 8000010:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000014:	4798      	blx	r3
 8000016:	bd08      	pop	{r3, pc}

08000018 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000018:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001a:	4b0a      	ldr	r3, [pc, #40]	; (8000044 <main+0x2c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800001c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001e:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000020:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000022:	4809      	ldr	r0, [pc, #36]	; (8000048 <main+0x30>)
 8000024:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000026:	4d09      	ldr	r5, [pc, #36]	; (800004c <main+0x34>)
 8000028:	2202      	movs	r2, #2
 800002a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800002e:	4b08      	ldr	r3, [pc, #32]	; (8000050 <main+0x38>)
 8000030:	4620      	mov	r0, r4
 8000032:	9400      	str	r4, [sp, #0]
 8000034:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );		
 8000036:	4620      	mov	r0, r4
 8000038:	4906      	ldr	r1, [pc, #24]	; (8000054 <main+0x3c>)
 800003a:	4788      	blx	r1
	Main_Init();

	//-- 명령어 처리
	//
	//Ap_RadioMenu_ExeCmd();    
	Ap_GLcdMenu_ExeCmd();    
 800003c:	4a06      	ldr	r2, [pc, #24]	; (8000058 <main+0x40>)
 800003e:	4790      	blx	r2
 8000040:	e7fe      	b.n	8000040 <main+0x28>
 8000042:	bf00      	nop
 8000044:	08000fb9 	.word	0x08000fb9
 8000048:	0800005d 	.word	0x0800005d
 800004c:	0800172d 	.word	0x0800172d
 8000050:	08000009 	.word	0x08000009
 8000054:	0800174d 	.word	0x0800174d
 8000058:	0800021d 	.word	0x0800021d

0800005c <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 800005c:	4770      	bx	lr
 800005e:	bf00      	nop

08000060 <Ap_GCldMenu_MoveCircleTick_2nd>:
	cnt++;
}

    
void Ap_GCldMenu_MoveCircleTick_2nd( void )
{
 8000060:	b538      	push	{r3, r4, r5, lr}
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 35, HW_N5110G_WIDTH, 45 );           						
	Hw_N5110G_DrawCircle( 10 + x, 40, 3, 0 ); 							
 8000062:	4c16      	ldr	r4, [pc, #88]	; (80000bc <Ap_GCldMenu_MoveCircleTick_2nd+0x5c>)
{
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 35, HW_N5110G_WIDTH, 45 );           						
 8000064:	2000      	movs	r0, #0
 8000066:	2123      	movs	r1, #35	; 0x23
 8000068:	2254      	movs	r2, #84	; 0x54
 800006a:	232d      	movs	r3, #45	; 0x2d
 800006c:	4d14      	ldr	r5, [pc, #80]	; (80000c0 <Ap_GCldMenu_MoveCircleTick_2nd+0x60>)
 800006e:	47a8      	blx	r5
	Hw_N5110G_DrawCircle( 10 + x, 40, 3, 0 ); 							
 8000070:	f994 0000 	ldrsb.w	r0, [r4]
 8000074:	2128      	movs	r1, #40	; 0x28
 8000076:	300a      	adds	r0, #10
 8000078:	2203      	movs	r2, #3
 800007a:	2300      	movs	r3, #0
 800007c:	b280      	uxth	r0, r0
 800007e:	4d11      	ldr	r5, [pc, #68]	; (80000c4 <Ap_GCldMenu_MoveCircleTick_2nd+0x64>)
 8000080:	47a8      	blx	r5
 	Hw_N5110G_DrawRequest();
 8000082:	4b11      	ldr	r3, [pc, #68]	; (80000c8 <Ap_GCldMenu_MoveCircleTick_2nd+0x68>)
 8000084:	4798      	blx	r3
 	
 	x += dir;
 8000086:	4911      	ldr	r1, [pc, #68]	; (80000cc <Ap_GCldMenu_MoveCircleTick_2nd+0x6c>)
 8000088:	7822      	ldrb	r2, [r4, #0]
 800008a:	7808      	ldrb	r0, [r1, #0]
 800008c:	1883      	adds	r3, r0, r2
 800008e:	b2d8      	uxtb	r0, r3
 8000090:	b2c3      	uxtb	r3, r0
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 8000092:	b25a      	sxtb	r2, r3
 8000094:	2a44      	cmp	r2, #68	; 0x44
	
	Hw_N5110G_DrawClearRect( 0, 35, HW_N5110G_WIDTH, 45 );           						
	Hw_N5110G_DrawCircle( 10 + x, 40, 3, 0 ); 							
 	Hw_N5110G_DrawRequest();
 	
 	x += dir;
 8000096:	7023      	strb	r3, [r4, #0]
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 8000098:	dd05      	ble.n	80000a6 <Ap_GCldMenu_MoveCircleTick_2nd+0x46>
 	{
 		dir = -1;
 		x += dir;
 800009a:	1e42      	subs	r2, r0, #1
 800009c:	b2d3      	uxtb	r3, r2
 	
 	x += dir;
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 	{
 		dir = -1;
 800009e:	20ff      	movs	r0, #255	; 0xff
 80000a0:	7008      	strb	r0, [r1, #0]
 		x += dir;
 80000a2:	7023      	strb	r3, [r4, #0]
 80000a4:	b25a      	sxtb	r2, r3
 	}

 	if( x < 0 ) 
 80000a6:	2a00      	cmp	r2, #0
 80000a8:	da03      	bge.n	80000b2 <Ap_GCldMenu_MoveCircleTick_2nd+0x52>
 	{
 		dir = 1; 		
 		x  += dir;
 80000aa:	3301      	adds	r3, #1
 		x += dir;
 	}

 	if( x < 0 ) 
 	{
 		dir = 1; 		
 80000ac:	2001      	movs	r0, #1
 80000ae:	7008      	strb	r0, [r1, #0]
 		x  += dir;
 80000b0:	7023      	strb	r3, [r4, #0]
 	}

	cnt++;
 80000b2:	4907      	ldr	r1, [pc, #28]	; (80000d0 <Ap_GCldMenu_MoveCircleTick_2nd+0x70>)
 80000b4:	780a      	ldrb	r2, [r1, #0]
 80000b6:	1c53      	adds	r3, r2, #1
 80000b8:	700b      	strb	r3, [r1, #0]
 80000ba:	bd38      	pop	{r3, r4, r5, pc}
 80000bc:	20000202 	.word	0x20000202
 80000c0:	08001bf1 	.word	0x08001bf1
 80000c4:	08001ca5 	.word	0x08001ca5
 80000c8:	08001be1 	.word	0x08001be1
 80000cc:	20000001 	.word	0x20000001
 80000d0:	20000203 	.word	0x20000203

080000d4 <Ap_GCldMenu_MoveCircleTick_1st>:


  

void Ap_GCldMenu_MoveCircleTick_1st( void )
{
 80000d4:	b538      	push	{r3, r4, r5, lr}
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 25, HW_N5110G_WIDTH, 35 );           						
	Hw_N5110G_DrawCircle( 10 + x, 30, 5, 0 ); 								
 80000d6:	4c16      	ldr	r4, [pc, #88]	; (8000130 <Ap_GCldMenu_MoveCircleTick_1st+0x5c>)
{
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 25, HW_N5110G_WIDTH, 35 );           						
 80000d8:	2000      	movs	r0, #0
 80000da:	2119      	movs	r1, #25
 80000dc:	2254      	movs	r2, #84	; 0x54
 80000de:	2323      	movs	r3, #35	; 0x23
 80000e0:	4d14      	ldr	r5, [pc, #80]	; (8000134 <Ap_GCldMenu_MoveCircleTick_1st+0x60>)
 80000e2:	47a8      	blx	r5
	Hw_N5110G_DrawCircle( 10 + x, 30, 5, 0 ); 								
 80000e4:	f994 0000 	ldrsb.w	r0, [r4]
 80000e8:	211e      	movs	r1, #30
 80000ea:	300a      	adds	r0, #10
 80000ec:	2205      	movs	r2, #5
 80000ee:	2300      	movs	r3, #0
 80000f0:	b280      	uxth	r0, r0
 80000f2:	4d11      	ldr	r5, [pc, #68]	; (8000138 <Ap_GCldMenu_MoveCircleTick_1st+0x64>)
 80000f4:	47a8      	blx	r5
 	Hw_N5110G_DrawRequest();
 80000f6:	4b11      	ldr	r3, [pc, #68]	; (800013c <Ap_GCldMenu_MoveCircleTick_1st+0x68>)
 80000f8:	4798      	blx	r3
 	
 	x += dir;
 80000fa:	4911      	ldr	r1, [pc, #68]	; (8000140 <Ap_GCldMenu_MoveCircleTick_1st+0x6c>)
 80000fc:	7822      	ldrb	r2, [r4, #0]
 80000fe:	7808      	ldrb	r0, [r1, #0]
 8000100:	1883      	adds	r3, r0, r2
 8000102:	b2d8      	uxtb	r0, r3
 8000104:	b2c3      	uxtb	r3, r0
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 8000106:	b25a      	sxtb	r2, r3
 8000108:	2a44      	cmp	r2, #68	; 0x44
	
	Hw_N5110G_DrawClearRect( 0, 25, HW_N5110G_WIDTH, 35 );           						
	Hw_N5110G_DrawCircle( 10 + x, 30, 5, 0 ); 								
 	Hw_N5110G_DrawRequest();
 	
 	x += dir;
 800010a:	7023      	strb	r3, [r4, #0]
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 800010c:	dd05      	ble.n	800011a <Ap_GCldMenu_MoveCircleTick_1st+0x46>
 	{
 		dir = -1;
 		x += dir;
 800010e:	1e42      	subs	r2, r0, #1
 8000110:	b2d3      	uxtb	r3, r2
 	
 	x += dir;
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 	{
 		dir = -1;
 8000112:	20ff      	movs	r0, #255	; 0xff
 8000114:	7008      	strb	r0, [r1, #0]
 		x += dir;
 8000116:	7023      	strb	r3, [r4, #0]
 8000118:	b25a      	sxtb	r2, r3
 	}

 	if( x < 0 ) 
 800011a:	2a00      	cmp	r2, #0
 800011c:	da03      	bge.n	8000126 <Ap_GCldMenu_MoveCircleTick_1st+0x52>
 	{
 		dir = 1; 		
 		x  += dir;
 800011e:	3301      	adds	r3, #1
 		x += dir;
 	}

 	if( x < 0 ) 
 	{
 		dir = 1; 		
 8000120:	2001      	movs	r0, #1
 8000122:	7008      	strb	r0, [r1, #0]
 		x  += dir;
 8000124:	7023      	strb	r3, [r4, #0]
 	}

	cnt++;
 8000126:	4907      	ldr	r1, [pc, #28]	; (8000144 <Ap_GCldMenu_MoveCircleTick_1st+0x70>)
 8000128:	780a      	ldrb	r2, [r1, #0]
 800012a:	1c53      	adds	r3, r2, #1
 800012c:	700b      	strb	r3, [r1, #0]
 800012e:	bd38      	pop	{r3, r4, r5, pc}
 8000130:	20000201 	.word	0x20000201
 8000134:	08001bf1 	.word	0x08001bf1
 8000138:	08001ca5 	.word	0x08001ca5
 800013c:	08001be1 	.word	0x08001be1
 8000140:	20000000 	.word	0x20000000
 8000144:	20000200 	.word	0x20000200

08000148 <Ap_GLcdMenu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
 8000148:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
 800014a:	f244 20cc 	movw	r0, #17100	; 0x42cc
 800014e:	f640 4419 	movw	r4, #3097	; 0xc19
	Lb_printf("*******************************************************\n");
 8000152:	f244 25d0 	movw	r5, #17104	; 0x42d0
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 8000156:	f6c0 0400 	movt	r4, #2048	; 0x800
	Lb_printf("*******************************************************\n");
 800015a:	f6c0 0500 	movt	r5, #2048	; 0x800
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 800015e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000162:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000164:	4628      	mov	r0, r5
 8000166:	47a0      	blx	r4
	Lb_printf("                      MPU6050                          \n");
 8000168:	f244 300c 	movw	r0, #17164	; 0x430c
 800016c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000170:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000172:	4628      	mov	r0, r5
 8000174:	47a0      	blx	r4
	Lb_printf("* 1. LCD Clear                                        *\n");
 8000176:	f244 3048 	movw	r0, #17224	; 0x4348
 800017a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800017e:	47a0      	blx	r4
	Lb_printf("* 2. Show Acc                                         *\n");
 8000180:	f244 3084 	movw	r0, #17284	; 0x4384
 8000184:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000188:	47a0      	blx	r4
	Lb_printf("* 3.                                                  *\n");
 800018a:	f244 30c0 	movw	r0, #17344	; 0x43c0
 800018e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000192:	47a0      	blx	r4
	Lb_printf("* 4.                                                  *\n");
 8000194:	f244 30fc 	movw	r0, #17404	; 0x43fc
 8000198:	f6c0 0000 	movt	r0, #2048	; 0x800
 800019c:	47a0      	blx	r4
	Lb_printf("* 5.                                                  *\n");
 800019e:	f244 4038 	movw	r0, #17464	; 0x4438
 80001a2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001a6:	47a0      	blx	r4
	Lb_printf("* 6.                                                  *\n");
 80001a8:	f244 4074 	movw	r0, #17524	; 0x4474
 80001ac:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001b0:	47a0      	blx	r4
	Lb_printf("* 7.                                                  *\n");
 80001b2:	f244 40b0 	movw	r0, #17584	; 0x44b0
 80001b6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001ba:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 80001bc:	f244 40ec 	movw	r0, #17644	; 0x44ec
 80001c0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001c4:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 80001c6:	f244 5028 	movw	r0, #17704	; 0x4528
 80001ca:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001ce:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 80001d0:	f244 5064 	movw	r0, #17764	; 0x4564
 80001d4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001d8:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80001da:	4628      	mov	r0, r5
 80001dc:	47a0      	blx	r4
	Lb_printf("\n");
 80001de:	f244 6020 	movw	r0, #17952	; 0x4620
 80001e2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001e6:	47a0      	blx	r4
 80001e8:	bd38      	pop	{r3, r4, r5, pc}
 80001ea:	bf00      	nop

080001ec <Ap_GLcdMenu_GetCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_GetCmd(void)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 80001ee:	f244 50a0 	movw	r0, #17824	; 0x45a0
 80001f2:	f640 4419 	movw	r4, #3097	; 0xc19
 80001f6:	f6c0 0400 	movt	r4, #2048	; 0x800
 80001fa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001fe:	47a0      	blx	r4

    key=get_byte();
 8000200:	f241 2311 	movw	r3, #4625	; 0x1211
 8000204:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000208:	4798      	blx	r3
 800020a:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 800020c:	f244 6020 	movw	r0, #17952	; 0x4620
 8000210:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000214:	47a0      	blx	r4
	
    return key;
}
 8000216:	4628      	mov	r0, r5
 8000218:	bd38      	pop	{r3, r4, r5, pc}
 800021a:	bf00      	nop

0800021c <Ap_GLcdMenu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 800021c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HW_MPU6050_DATA_OBJ MPU6050_Data;


	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();	
 8000220:	f240 1349 	movw	r3, #329	; 0x149
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 8000224:	b08d      	sub	sp, #52	; 0x34

	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();	
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
 8000226:	2400      	movs	r4, #0
    HW_MPU6050_DATA_OBJ MPU6050_Data;


	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();	
 8000228:	f6c0 0300 	movt	r3, #2048	; 0x800
 800022c:	4798      	blx	r3
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
 800022e:	4d60      	ldr	r5, [pc, #384]	; (80003b0 <Ap_GLcdMenu_ExeCmd+0x194>)
 8000230:	2001      	movs	r0, #1
 8000232:	2132      	movs	r1, #50	; 0x32
 8000234:	2202      	movs	r2, #2
 8000236:	4b5f      	ldr	r3, [pc, #380]	; (80003b4 <Ap_GLcdMenu_ExeCmd+0x198>)
 8000238:	9400      	str	r4, [sp, #0]
 800023a:	47a8      	blx	r5
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
 800023c:	2002      	movs	r0, #2
 800023e:	9400      	str	r4, [sp, #0]
 8000240:	2164      	movs	r1, #100	; 0x64
 8000242:	4602      	mov	r2, r0
 8000244:	4b5c      	ldr	r3, [pc, #368]	; (80003b8 <Ap_GLcdMenu_ExeCmd+0x19c>)
 8000246:	47a8      	blx	r5
 8000248:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 80003f0 <Ap_GLcdMenu_ExeCmd+0x1d4>
 800024c:	4d5b      	ldr	r5, [pc, #364]	; (80003bc <Ap_GLcdMenu_ExeCmd+0x1a0>)
 800024e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80003f4 <Ap_GLcdMenu_ExeCmd+0x1d8>
    {
        switch(key)
        {
           case '1':
           		Lb_printf("LCD Clear \n");
           		Hw_N5110G_Clear();
 8000252:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80003f8 <Ap_GLcdMenu_ExeCmd+0x1dc>
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 8000256:	47d0      	blx	sl
 8000258:	4601      	mov	r1, r0
 800025a:	2800      	cmp	r0, #0
 800025c:	d063      	beq.n	8000326 <Ap_GLcdMenu_ExeCmd+0x10a>
    {
        switch(key)
 800025e:	2938      	cmp	r1, #56	; 0x38
 8000260:	d068      	beq.n	8000334 <Ap_GLcdMenu_ExeCmd+0x118>
 8000262:	d853      	bhi.n	800030c <Ap_GLcdMenu_ExeCmd+0xf0>
 8000264:	2931      	cmp	r1, #49	; 0x31
 8000266:	d061      	beq.n	800032c <Ap_GLcdMenu_ExeCmd+0x110>
 8000268:	2932      	cmp	r1, #50	; 0x32
 800026a:	d1f4      	bne.n	8000256 <Ap_GLcdMenu_ExeCmd+0x3a>
 800026c:	4c54      	ldr	r4, [pc, #336]	; (80003c0 <Ap_GLcdMenu_ExeCmd+0x1a4>)

           case '2':
                
                while( get_byte_check() == 0 )
                {
                    Ret = Hw_MPU6050_GetData( &MPU6050_Data );
 800026e:	4e55      	ldr	r6, [pc, #340]	; (80003c4 <Ap_GLcdMenu_ExeCmd+0x1a8>)
 8000270:	e016      	b.n	80002a0 <Ap_GLcdMenu_ExeCmd+0x84>
                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
                    if( x < 3 )                x = 3;
                    if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 8000272:	b208      	sxth	r0, r1

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
                    if( x < 3 )                x = 3;
 8000274:	2a02      	cmp	r2, #2
 8000276:	bfd8      	it	le
 8000278:	2703      	movle	r7, #3
                    if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 800027a:	282c      	cmp	r0, #44	; 0x2c
 800027c:	dc43      	bgt.n	8000306 <Ap_GLcdMenu_ExeCmd+0xea>
                    if( y < 3 )                 y = 3;
 800027e:	2802      	cmp	r0, #2
 8000280:	bfcc      	ite	gt
 8000282:	469b      	movgt	fp, r3
 8000284:	f04f 0b03 	movle.w	fp, #3

                    Hw_N5110G_Clear();                                  
 8000288:	47c8      	blx	r9
                    Hw_N5110G_DrawCircle(  x , y, 3, 0 );                           
 800028a:	4638      	mov	r0, r7
 800028c:	2203      	movs	r2, #3
 800028e:	4659      	mov	r1, fp
 8000290:	2300      	movs	r3, #0
 8000292:	4f4d      	ldr	r7, [pc, #308]	; (80003c8 <Ap_GLcdMenu_ExeCmd+0x1ac>)
 8000294:	47b8      	blx	r7
                    Hw_N5110G_DrawRequest();
 8000296:	4b4d      	ldr	r3, [pc, #308]	; (80003cc <Ap_GLcdMenu_ExeCmd+0x1b0>)
 8000298:	4798      	blx	r3
                    Hw_Wait_ms(100);
 800029a:	2064      	movs	r0, #100	; 0x64
 800029c:	4a4c      	ldr	r2, [pc, #304]	; (80003d0 <Ap_GLcdMenu_ExeCmd+0x1b4>)
 800029e:	4790      	blx	r2
           		Hw_N5110G_Clear();
               	break;

           case '2':
                
                while( get_byte_check() == 0 )
 80002a0:	47a0      	blx	r4
 80002a2:	2800      	cmp	r0, #0
 80002a4:	d1d7      	bne.n	8000256 <Ap_GLcdMenu_ExeCmd+0x3a>
                {
                    Ret = Hw_MPU6050_GetData( &MPU6050_Data );
 80002a6:	a803      	add	r0, sp, #12
 80002a8:	47b0      	blx	r6

                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
 80002aa:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80002ae:	4849      	ldr	r0, [pc, #292]	; (80003d4 <Ap_GLcdMenu_ExeCmd+0x1b8>)
 80002b0:	47a8      	blx	r5
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
 80002b2:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 80002b6:	4848      	ldr	r0, [pc, #288]	; (80003d8 <Ap_GLcdMenu_ExeCmd+0x1bc>)
 80002b8:	47a8      	blx	r5
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
 80002ba:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80002be:	4847      	ldr	r0, [pc, #284]	; (80003dc <Ap_GLcdMenu_ExeCmd+0x1c0>)
 80002c0:	47a8      	blx	r5
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);
 80002c2:	4847      	ldr	r0, [pc, #284]	; (80003e0 <Ap_GLcdMenu_ExeCmd+0x1c4>)
 80002c4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80002c8:	47a8      	blx	r5

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80002ca:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 80002ce:	f248 531f 	movw	r3, #34079	; 0x851f
 80002d2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80002d6:	fb83 7001 	smull	r7, r0, r3, r1
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80002da:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80002de:	fb83 7302 	smull	r7, r3, r3, r2
                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80002e2:	17cf      	asrs	r7, r1, #31
 80002e4:	eba7 11a0 	sub.w	r1, r7, r0, asr #6
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80002e8:	17d2      	asrs	r2, r2, #31
                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80002ea:	312a      	adds	r1, #42	; 0x2a
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80002ec:	eba2 10a3 	sub.w	r0, r2, r3, asr #6
                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80002f0:	b28f      	uxth	r7, r1
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80002f2:	3018      	adds	r0, #24

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80002f4:	b23a      	sxth	r2, r7
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80002f6:	b283      	uxth	r3, r0

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80002f8:	2a50      	cmp	r2, #80	; 0x50
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80002fa:	b299      	uxth	r1, r3

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80002fc:	ddb9      	ble.n	8000272 <Ap_GLcdMenu_ExeCmd+0x56>
                    if( x < 3 )                x = 3;
                    if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 80002fe:	b208      	sxth	r0, r1
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 8000300:	2750      	movs	r7, #80	; 0x50
                    if( x < 3 )                x = 3;
                    if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 8000302:	282c      	cmp	r0, #44	; 0x2c
 8000304:	ddbb      	ble.n	800027e <Ap_GLcdMenu_ExeCmd+0x62>
 8000306:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 800030a:	e7bd      	b.n	8000288 <Ap_GLcdMenu_ExeCmd+0x6c>
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
 800030c:	294d      	cmp	r1, #77	; 0x4d
 800030e:	d001      	beq.n	8000314 <Ap_GLcdMenu_ExeCmd+0xf8>
 8000310:	296d      	cmp	r1, #109	; 0x6d
 8000312:	d1a0      	bne.n	8000256 <Ap_GLcdMenu_ExeCmd+0x3a>
           case '0':
               break;

			case 'm':
			case 'M':
				Ap_GLcdMenu_ShowMenu();
 8000314:	f240 1749 	movw	r7, #329	; 0x149
 8000318:	f6c0 0700 	movt	r7, #2048	; 0x800
 800031c:	47b8      	blx	r7
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 800031e:	47d0      	blx	sl
 8000320:	4601      	mov	r1, r0
 8000322:	2800      	cmp	r0, #0
 8000324:	d19b      	bne.n	800025e <Ap_GLcdMenu_ExeCmd+0x42>
               break;
        }
    }
    
    return key;
}
 8000326:	b00d      	add	sp, #52	; 0x34
 8000328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		Lb_printf("LCD Clear \n");
 800032c:	482d      	ldr	r0, [pc, #180]	; (80003e4 <Ap_GLcdMenu_ExeCmd+0x1c8>)
 800032e:	47a8      	blx	r5
           		Hw_N5110G_Clear();
 8000330:	47c8      	blx	r9
               	break;
 8000332:	e790      	b.n	8000256 <Ap_GLcdMenu_ExeCmd+0x3a>
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
 8000334:	2400      	movs	r4, #0
               break;  

           case '8':
           		for( int i=0; i<=0x75; i++ )
           		{
           			if( i%10 == 0 ) Lb_printf("\n %03d: ", i);
 8000336:	f246 6667 	movw	r6, #26215	; 0x6667
 800033a:	f2c6 6666 	movt	r6, #26214	; 0x6666

           			I2C_Data[0] = 0x00;
 800033e:	4627      	mov	r7, r4
 8000340:	e022      	b.n	8000388 <Ap_GLcdMenu_ExeCmd+0x16c>
           			Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8000342:	b2e0      	uxtb	r0, r4
               break;  

           case '8':
           		for( int i=0; i<=0x75; i++ )
           		{
           			if( i%10 == 0 ) Lb_printf("\n %03d: ", i);
 8000344:	fb86 340b 	smull	r3, r4, r6, fp

           			I2C_Data[0] = 0x00;
           			Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8000348:	a907      	add	r1, sp, #28
           case '8':
           		for( int i=0; i<=0x75; i++ )
           		{
           			if( i%10 == 0 ) Lb_printf("\n %03d: ", i);

           			I2C_Data[0] = 0x00;
 800034a:	f88d 701c 	strb.w	r7, [sp, #28]
           			Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 800034e:	47c0      	blx	r8
           			Lb_printf("%02x ", I2C_Data[0]);
 8000350:	4825      	ldr	r0, [pc, #148]	; (80003e8 <Ap_GLcdMenu_ExeCmd+0x1cc>)
 8000352:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8000356:	47a8      	blx	r5
               break;  

           case '8':
           		for( int i=0; i<=0x75; i++ )
           		{
           			if( i%10 == 0 ) Lb_printf("\n %03d: ", i);
 8000358:	ea4f 71eb 	mov.w	r1, fp, asr #31
 800035c:	ebc1 00a4 	rsb	r0, r1, r4, asr #2
 8000360:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8000364:	ebbb 0f43 	cmp.w	fp, r3, lsl #1
 8000368:	d01e      	beq.n	80003a8 <Ap_GLcdMenu_ExeCmd+0x18c>

           			I2C_Data[0] = 0x00;
           			Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 800036a:	a907      	add	r1, sp, #28
 800036c:	fa5f f08b 	uxtb.w	r0, fp
           case '8':
           		for( int i=0; i<=0x75; i++ )
           		{
           			if( i%10 == 0 ) Lb_printf("\n %03d: ", i);

           			I2C_Data[0] = 0x00;
 8000370:	f88d 701c 	strb.w	r7, [sp, #28]

           case '7':
               break;  

           case '8':
           		for( int i=0; i<=0x75; i++ )
 8000374:	f10b 0401 	add.w	r4, fp, #1
           		{
           			if( i%10 == 0 ) Lb_printf("\n %03d: ", i);

           			I2C_Data[0] = 0x00;
           			Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8000378:	47c0      	blx	r8
           			Lb_printf("%02x ", I2C_Data[0]);
 800037a:	481b      	ldr	r0, [pc, #108]	; (80003e8 <Ap_GLcdMenu_ExeCmd+0x1cc>)
 800037c:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8000380:	47a8      	blx	r5

           case '7':
               break;  

           case '8':
           		for( int i=0; i<=0x75; i++ )
 8000382:	2c76      	cmp	r4, #118	; 0x76
 8000384:	f43f af67 	beq.w	8000256 <Ap_GLcdMenu_ExeCmd+0x3a>
           		{
           			if( i%10 == 0 ) Lb_printf("\n %03d: ", i);
 8000388:	fb86 3104 	smull	r3, r1, r6, r4
 800038c:	17e0      	asrs	r0, r4, #31
 800038e:	ebc0 03a1 	rsb	r3, r0, r1, asr #2
 8000392:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000396:	ebb4 0f42 	cmp.w	r4, r2, lsl #1

           case '7':
               break;  

           case '8':
           		for( int i=0; i<=0x75; i++ )
 800039a:	f104 0b01 	add.w	fp, r4, #1
           		{
           			if( i%10 == 0 ) Lb_printf("\n %03d: ", i);
 800039e:	d1d0      	bne.n	8000342 <Ap_GLcdMenu_ExeCmd+0x126>
 80003a0:	4621      	mov	r1, r4
 80003a2:	4812      	ldr	r0, [pc, #72]	; (80003ec <Ap_GLcdMenu_ExeCmd+0x1d0>)
 80003a4:	47a8      	blx	r5
 80003a6:	e7cc      	b.n	8000342 <Ap_GLcdMenu_ExeCmd+0x126>
 80003a8:	4810      	ldr	r0, [pc, #64]	; (80003ec <Ap_GLcdMenu_ExeCmd+0x1d0>)
 80003aa:	4659      	mov	r1, fp
 80003ac:	47a8      	blx	r5
 80003ae:	e7dc      	b.n	800036a <Ap_GLcdMenu_ExeCmd+0x14e>
 80003b0:	0800172d 	.word	0x0800172d
 80003b4:	080000d5 	.word	0x080000d5
 80003b8:	08000061 	.word	0x08000061
 80003bc:	08000c19 	.word	0x08000c19
 80003c0:	08001221 	.word	0x08001221
 80003c4:	080026d5 	.word	0x080026d5
 80003c8:	08001ca5 	.word	0x08001ca5
 80003cc:	08001be1 	.word	0x08001be1
 80003d0:	08001091 	.word	0x08001091
 80003d4:	080045b0 	.word	0x080045b0
 80003d8:	080045b8 	.word	0x080045b8
 80003dc:	080045c0 	.word	0x080045c0
 80003e0:	080045c8 	.word	0x080045c8
 80003e4:	080045a4 	.word	0x080045a4
 80003e8:	080045dc 	.word	0x080045dc
 80003ec:	080045d0 	.word	0x080045d0
 80003f0:	080001ed 	.word	0x080001ed
 80003f4:	0800249d 	.word	0x0800249d
 80003f8:	08001bb9 	.word	0x08001bb9

080003fc <print_byte_out>:




void print_byte_out(unsigned int c)
{
 80003fc:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 8000400:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 8000402:	7819      	ldrb	r1, [r3, #0]
 8000404:	b151      	cbz	r1, 800041c <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8000406:	4a08      	ldr	r2, [pc, #32]	; (8000428 <print_byte_out+0x2c>)
 8000408:	4908      	ldr	r1, [pc, #32]	; (800042c <print_byte_out+0x30>)
 800040a:	6814      	ldr	r4, [r2, #0]
 800040c:	6808      	ldr	r0, [r1, #0]
 800040e:	1c63      	adds	r3, r4, #1
 8000410:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8000412:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8000414:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8000416:	2200      	movs	r2, #0
 8000418:	54ca      	strb	r2, [r1, r3]
 800041a:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <print_byte_out+0x34>)
 800041e:	4798      	blx	r3
 8000420:	bd38      	pop	{r3, r4, r5, pc}
 8000422:	bf00      	nop
 8000424:	20000208 	.word	0x20000208
 8000428:	20000204 	.word	0x20000204
 800042c:	200002bc 	.word	0x200002bc
 8000430:	080011d5 	.word	0x080011d5

08000434 <PrintString>:
        }
        return;
}

void PrintString(char *fmt, char *s)
{
 8000434:	b538      	push	{r3, r4, r5, lr}
        if (!fmt || !s) return;
 8000436:	b148      	cbz	r0, 800044c <PrintString+0x18>
 8000438:	b141      	cbz	r1, 800044c <PrintString+0x18>
        while (*s) print_byte_out(*s++);
 800043a:	7808      	ldrb	r0, [r1, #0]
 800043c:	b130      	cbz	r0, 800044c <PrintString+0x18>
 800043e:	4d04      	ldr	r5, [pc, #16]	; (8000450 <PrintString+0x1c>)
 8000440:	460c      	mov	r4, r1
 8000442:	47a8      	blx	r5
 8000444:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000448:	2800      	cmp	r0, #0
 800044a:	d1fa      	bne.n	8000442 <PrintString+0xe>
 800044c:	bd38      	pop	{r3, r4, r5, pc}
 800044e:	bf00      	nop
 8000450:	080003fd 	.word	0x080003fd

08000454 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 8000454:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 8000456:	b1c8      	cbz	r0, 800048c <DecToLong+0x38>
 8000458:	7803      	ldrb	r3, [r0, #0]
 800045a:	b1cb      	cbz	r3, 8000490 <DecToLong+0x3c>


        for (*retval=0; *s; s++){
 800045c:	2300      	movs	r3, #0
 800045e:	600b      	str	r3, [r1, #0]
 8000460:	7802      	ldrb	r2, [r0, #0]
 8000462:	b192      	cbz	r2, 800048a <DecToLong+0x36>
                if (*s < '0' || *s > '9') return false;
 8000464:	3a30      	subs	r2, #48	; 0x30
 8000466:	b2d4      	uxtb	r4, r2
 8000468:	2c09      	cmp	r4, #9
 800046a:	d902      	bls.n	8000472 <DecToLong+0x1e>
 800046c:	e012      	b.n	8000494 <DecToLong+0x40>
 800046e:	2d09      	cmp	r5, #9
 8000470:	d810      	bhi.n	8000494 <DecToLong+0x40>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 8000472:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8000476:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 800047a:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 800047c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 8000480:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8000484:	b2d5      	uxtb	r5, r2
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 8000486:	2c00      	cmp	r4, #0
 8000488:	d1f1      	bne.n	800046e <DecToLong+0x1a>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 800048a:	2001      	movs	r0, #1
}        // DecToLong.
 800048c:	bc30      	pop	{r4, r5}
 800048e:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 8000490:	4618      	mov	r0, r3
 8000492:	e7fb      	b.n	800048c <DecToLong+0x38>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 8000494:	2000      	movs	r0, #0
 8000496:	e7f9      	b.n	800048c <DecToLong+0x38>

08000498 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 8000498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800049c:	4682      	mov	sl, r0
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800049e:	7800      	ldrb	r0, [r0, #0]
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80004a0:	2300      	movs	r3, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 80004a2:	b084      	sub	sp, #16
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
 80004a4:	f1b1 0800 	subs.w	r8, r1, #0
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80004a8:	9300      	str	r3, [sp, #0]
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
		l = -l;	
 80004aa:	bfba      	itte	lt
 80004ac:	f1c8 0800 	rsblt	r8, r8, #0
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
 80004b0:	f04f 0901 	movlt.w	r9, #1
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;
 80004b4:	4699      	movge	r9, r3
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80004b6:	2800      	cmp	r0, #0
 80004b8:	f000 8140 	beq.w	800073c <PrintDec+0x2a4>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 80004bc:	2500      	movs	r5, #0


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 80004be:	2864      	cmp	r0, #100	; 0x64
 80004c0:	d029      	beq.n	8000516 <PrintDec+0x7e>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 80004c2:	4ea1      	ldr	r6, [pc, #644]	; (8000748 <PrintDec+0x2b0>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 80004c4:	462c      	mov	r4, r5
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 80004c6:	462f      	mov	r7, r5

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 80004c8:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
 80004cc:	2a08      	cmp	r2, #8
 80004ce:	f200 808e 	bhi.w	80005ee <PrintDec+0x156>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80004d2:	f81a 2004 	ldrb.w	r2, [sl, r4]
 80004d6:	eb0a 0104 	add.w	r1, sl, r4
 80004da:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 80004de:	2809      	cmp	r0, #9
 80004e0:	f04f 0300 	mov.w	r3, #0
 80004e4:	a801      	add	r0, sp, #4
 80004e6:	d809      	bhi.n	80004fc <PrintDec+0x64>
			{
				tol[j] = s[i++];
 80004e8:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80004ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
			{
				tol[j] = s[i++];
 80004ee:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80004f0:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80004f4:	3301      	adds	r3, #1
 80004f6:	f1be 0f09 	cmp.w	lr, #9
 80004fa:	d9f5      	bls.n	80004e8 <PrintDec+0x50>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 80004fc:	a904      	add	r1, sp, #16
 80004fe:	18ca      	adds	r2, r1, r3
			i--;
			DecToLong(tol, &flagcnt);
 8000500:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8000502:	f802 7c0c 	strb.w	r7, [r2, #-12]
			i--;
 8000506:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 8000508:	47b0      	blx	r6
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800050a:	3401      	adds	r4, #1
 800050c:	f81a 0004 	ldrb.w	r0, [sl, r4]
 8000510:	b108      	cbz	r0, 8000516 <PrintDec+0x7e>
	{
		if (c=='d') break;
 8000512:	2864      	cmp	r0, #100	; 0x64
 8000514:	d1d8      	bne.n	80004c8 <PrintDec+0x30>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 8000516:	f1b9 0f00 	cmp.w	r9, #0
 800051a:	f040 810b 	bne.w	8000734 <PrintDec+0x29c>
 800051e:	4e8b      	ldr	r6, [pc, #556]	; (800074c <PrintDec+0x2b4>)


	// 위의 flag에 따라 출력.
	if (flagcnt)
 8000520:	9800      	ldr	r0, [sp, #0]
 8000522:	2800      	cmp	r0, #0
 8000524:	d067      	beq.n	80005f6 <PrintDec+0x15e>
	{
                if (flagcnt>9) flagcnt=9;
 8000526:	2809      	cmp	r0, #9
 8000528:	f300 80ff 	bgt.w	800072a <PrintDec+0x292>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 800052c:	1e44      	subs	r4, r0, #1


        while (cnt--){
 800052e:	1e81      	subs	r1, r0, #2
 8000530:	1ec7      	subs	r7, r0, #3
 8000532:	2c00      	cmp	r4, #0
 8000534:	f000 8104 	beq.w	8000740 <PrintDec+0x2a8>
 8000538:	f001 0401 	and.w	r4, r1, #1
                retval *= num;
 800053c:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 800053e:	1e4a      	subs	r2, r1, #1
 8000540:	b171      	cbz	r1, 8000560 <PrintDec+0xc8>
 8000542:	b124      	cbz	r4, 800054e <PrintDec+0xb6>
 8000544:	3a01      	subs	r2, #1
 8000546:	1c51      	adds	r1, r2, #1
                retval *= num;
 8000548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 800054c:	d008      	beq.n	8000560 <PrintDec+0xc8>
                retval *= num;
 800054e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8000552:	00e1      	lsls	r1, r4, #3
 8000554:	eb01 0344 	add.w	r3, r1, r4, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000558:	3a02      	subs	r2, #2
                retval *= num;
 800055a:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800055c:	1c51      	adds	r1, r2, #1
 800055e:	d1f6      	bne.n	800054e <PrintDec+0xb6>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000560:	fb98 f2f3 	sdiv	r2, r8, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000564:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000566:	fb03 8812 	mls	r8, r3, r2, r8
{
        long retval=num;
        cnt--;


        while (cnt--){
 800056a:	f000 80eb 	beq.w	8000744 <PrintDec+0x2ac>
 800056e:	f007 0001 	and.w	r0, r7, #1
                retval *= num;
 8000572:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000574:	1e79      	subs	r1, r7, #1
 8000576:	b177      	cbz	r7, 8000596 <PrintDec+0xfe>
 8000578:	b120      	cbz	r0, 8000584 <PrintDec+0xec>
 800057a:	3901      	subs	r1, #1
 800057c:	1c48      	adds	r0, r1, #1
                retval *= num;
 800057e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000582:	d008      	beq.n	8000596 <PrintDec+0xfe>
                retval *= num;
 8000584:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8000588:	00fc      	lsls	r4, r7, #3
 800058a:	eb04 0347 	add.w	r3, r4, r7, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800058e:	3902      	subs	r1, #2
                retval *= num;
 8000590:	005c      	lsls	r4, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000592:	1c4f      	adds	r7, r1, #1
 8000594:	d1f6      	bne.n	8000584 <PrintDec+0xec>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000596:	f246 6767 	movw	r7, #26215	; 0x6667
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 800059a:	f04f 0901 	mov.w	r9, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800059e:	f2c6 6766 	movt	r7, #26214	; 0x6666
 80005a2:	e00f      	b.n	80005c4 <PrintDec+0x12c>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 80005a4:	2c01      	cmp	r4, #1
 80005a6:	d015      	beq.n	80005d4 <PrintDec+0x13c>


                        if (leading_zero==true){
 80005a8:	f1b9 0f00 	cmp.w	r9, #0
 80005ac:	d012      	beq.n	80005d4 <PrintDec+0x13c>
                                if (flag0)        print_byte_out('0');
 80005ae:	2030      	movs	r0, #48	; 0x30
 80005b0:	b905      	cbnz	r5, 80005b4 <PrintDec+0x11c>
                                else                print_byte_out(' ');
 80005b2:	2020      	movs	r0, #32
 80005b4:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80005b6:	fb87 2004 	smull	r2, r0, r7, r4
 80005ba:	17e1      	asrs	r1, r4, #31
 80005bc:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 80005c0:	2c00      	cmp	r4, #0
 80005c2:	dd11      	ble.n	80005e8 <PrintDec+0x150>
                        result = remainder/divisor;
 80005c4:	fb98 f2f4 	sdiv	r2, r8, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80005c8:	b2d0      	uxtb	r0, r2
 80005ca:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80005cc:	fb04 8812 	mls	r8, r4, r2, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 80005d0:	2a00      	cmp	r2, #0
 80005d2:	d0e7      	beq.n	80005a4 <PrintDec+0x10c>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80005d4:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80005d6:	fb87 2004 	smull	r2, r0, r7, r4
 80005da:	17e1      	asrs	r1, r4, #31
 80005dc:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 80005e0:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80005e2:	f04f 0900 	mov.w	r9, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80005e6:	dced      	bgt.n	80005c4 <PrintDec+0x12c>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 80005e8:	b004      	add	sp, #16
 80005ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 80005ee:	2830      	cmp	r0, #48	; 0x30
 80005f0:	bf08      	it	eq
 80005f2:	2501      	moveq	r5, #1
 80005f4:	e789      	b.n	800050a <PrintDec+0x72>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80005f6:	f642 73a1 	movw	r3, #12193	; 0x2fa1
 80005fa:	f2c4 43b8 	movt	r3, #17592	; 0x44b8
 80005fe:	fb83 2408 	smull	r2, r4, r3, r8
 8000602:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 8000606:	f44f 424a 	mov.w	r2, #51712	; 0xca00
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800060a:	ebc1 7024 	rsb	r0, r1, r4, asr #28
                        remainder %= divisor;
 800060e:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
 8000612:	fb02 8810 	mls	r8, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 8000616:	2800      	cmp	r0, #0
 8000618:	f000 809a 	beq.w	8000750 <PrintDec+0x2b8>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800061c:	b2c0      	uxtb	r0, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800061e:	f643 3489 	movw	r4, #15241	; 0x3b89
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000622:	3030      	adds	r0, #48	; 0x30
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000624:	f2c5 54e6 	movt	r4, #21990	; 0x55e6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000628:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800062a:	fb84 2008 	smull	r2, r0, r4, r8
 800062e:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 8000632:	f44f 4261 	mov.w	r2, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000636:	ebc1 6060 	rsb	r0, r1, r0, asr #25
                        remainder %= divisor;
 800063a:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
 800063e:	fb02 8410 	mls	r4, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000642:	3030      	adds	r0, #48	; 0x30
 8000644:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000646:	f64c 236b 	movw	r3, #51819	; 0xca6b
 800064a:	f6c6 335f 	movt	r3, #27487	; 0x6b5f
 800064e:	fb83 2004 	smull	r2, r0, r3, r4
 8000652:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 8000654:	f249 6280 	movw	r2, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000658:	ebc1 50a0 	rsb	r0, r1, r0, asr #22
                        remainder %= divisor;
 800065c:	f2c0 0298 	movt	r2, #152	; 0x98
 8000660:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000664:	3030      	adds	r0, #48	; 0x30
 8000666:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000668:	f64d 6383 	movw	r3, #56963	; 0xde83
 800066c:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8000670:	fb83 2004 	smull	r2, r0, r3, r4
 8000674:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 8000676:	f244 2240 	movw	r2, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800067a:	ebc1 40a0 	rsb	r0, r1, r0, asr #18
                        remainder %= divisor;
 800067e:	f2c0 020f 	movt	r2, #15
 8000682:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000686:	3030      	adds	r0, #48	; 0x30
 8000688:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800068a:	f24b 5389 	movw	r3, #46473	; 0xb589
 800068e:	f2c1 43f8 	movt	r3, #5368	; 0x14f8
 8000692:	fb83 2004 	smull	r2, r0, r3, r4
 8000696:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 8000698:	f248 62a0 	movw	r2, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800069c:	ebc1 3060 	rsb	r0, r1, r0, asr #13
                        remainder %= divisor;
 80006a0:	f2c0 0201 	movt	r2, #1
 80006a4:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80006a8:	3030      	adds	r0, #48	; 0x30
 80006aa:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006ac:	f648 33ad 	movw	r3, #35757	; 0x8bad
 80006b0:	f6c6 03db 	movt	r3, #26843	; 0x68db
 80006b4:	fb83 2004 	smull	r2, r0, r3, r4
 80006b8:	17e1      	asrs	r1, r4, #31
 80006ba:	ebc1 3020 	rsb	r0, r1, r0, asr #12
                        remainder %= divisor;
 80006be:	f242 7210 	movw	r2, #10000	; 0x2710
 80006c2:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80006c6:	3030      	adds	r0, #48	; 0x30
 80006c8:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006ca:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80006ce:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80006d2:	fb83 2004 	smull	r2, r0, r3, r4
 80006d6:	17e1      	asrs	r1, r4, #31
 80006d8:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
                        remainder %= divisor;
 80006dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e0:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80006e4:	3030      	adds	r0, #48	; 0x30
 80006e6:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006e8:	f248 531f 	movw	r3, #34079	; 0x851f
 80006ec:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80006f0:	fb83 2004 	smull	r2, r0, r3, r4
 80006f4:	17e1      	asrs	r1, r4, #31
 80006f6:	ebc1 1060 	rsb	r0, r1, r0, asr #5
                        remainder %= divisor;
 80006fa:	2264      	movs	r2, #100	; 0x64
 80006fc:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000700:	3030      	adds	r0, #48	; 0x30
 8000702:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000704:	f246 6367 	movw	r3, #26215	; 0x6667
 8000708:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800070c:	fb83 2004 	smull	r2, r0, r3, r4
 8000710:	17e1      	asrs	r1, r4, #31
 8000712:	ebc1 00a0 	rsb	r0, r1, r0, asr #2
                        remainder %= divisor;
 8000716:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800071a:	eba4 0442 	sub.w	r4, r4, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800071e:	3030      	adds	r0, #48	; 0x30
 8000720:	47b0      	blx	r6
 8000722:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000726:	47b0      	blx	r6
 8000728:	e75e      	b.n	80005e8 <PrintDec+0x150>


	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 800072a:	2009      	movs	r0, #9
 800072c:	9000      	str	r0, [sp, #0]
 800072e:	2706      	movs	r7, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000730:	2107      	movs	r1, #7
 8000732:	e701      	b.n	8000538 <PrintDec+0xa0>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 8000734:	202d      	movs	r0, #45	; 0x2d
 8000736:	4e05      	ldr	r6, [pc, #20]	; (800074c <PrintDec+0x2b4>)
 8000738:	47b0      	blx	r6
 800073a:	e6f1      	b.n	8000520 <PrintDec+0x88>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 800073c:	4605      	mov	r5, r0
 800073e:	e6ea      	b.n	8000516 <PrintDec+0x7e>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 8000740:	230a      	movs	r3, #10
 8000742:	e70d      	b.n	8000560 <PrintDec+0xc8>
 8000744:	240a      	movs	r4, #10
 8000746:	e726      	b.n	8000596 <PrintDec+0xfe>
 8000748:	08000455 	.word	0x08000455
 800074c:	080003fd 	.word	0x080003fd
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000750:	f643 3389 	movw	r3, #15241	; 0x3b89
 8000754:	f2c5 53e6 	movt	r3, #21990	; 0x55e6
 8000758:	fb83 2108 	smull	r2, r1, r3, r8
                        remainder %= divisor;
 800075c:	f44f 4461 	mov.w	r4, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000760:	ea4f 72e8 	mov.w	r2, r8, asr #31
 8000764:	ebc2 6061 	rsb	r0, r2, r1, asr #25
                        remainder %= divisor;
 8000768:	f2c0 54f5 	movt	r4, #1525	; 0x5f5
 800076c:	fb04 8410 	mls	r4, r4, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 8000770:	2800      	cmp	r0, #0
 8000772:	f47f af66 	bne.w	8000642 <PrintDec+0x1aa>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000776:	f64c 206b 	movw	r0, #51819	; 0xca6b
 800077a:	f6c6 305f 	movt	r0, #27487	; 0x6b5f
 800077e:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 8000782:	f249 6380 	movw	r3, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000786:	17e2      	asrs	r2, r4, #31
 8000788:	ebc2 50a1 	rsb	r0, r2, r1, asr #22
                        remainder %= divisor;
 800078c:	f2c0 0398 	movt	r3, #152	; 0x98
 8000790:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8000794:	2800      	cmp	r0, #0
 8000796:	f47f af65 	bne.w	8000664 <PrintDec+0x1cc>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800079a:	f64d 6083 	movw	r0, #56963	; 0xde83
 800079e:	f2c4 301b 	movt	r0, #17179	; 0x431b
 80007a2:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 80007a6:	f244 2340 	movw	r3, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007aa:	17e2      	asrs	r2, r4, #31
 80007ac:	ebc2 40a1 	rsb	r0, r2, r1, asr #18
                        remainder %= divisor;
 80007b0:	f2c0 030f 	movt	r3, #15
 80007b4:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 80007b8:	2800      	cmp	r0, #0
 80007ba:	f47f af64 	bne.w	8000686 <PrintDec+0x1ee>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007be:	f24b 5089 	movw	r0, #46473	; 0xb589
 80007c2:	f2c1 40f8 	movt	r0, #5368	; 0x14f8
 80007c6:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 80007ca:	f248 63a0 	movw	r3, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007ce:	17e2      	asrs	r2, r4, #31
 80007d0:	ebc2 3061 	rsb	r0, r2, r1, asr #13
                        remainder %= divisor;
 80007d4:	f2c0 0301 	movt	r3, #1
 80007d8:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 80007dc:	2800      	cmp	r0, #0
 80007de:	f47f af63 	bne.w	80006a8 <PrintDec+0x210>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007e2:	f648 30ad 	movw	r0, #35757	; 0x8bad
 80007e6:	f6c6 00db 	movt	r0, #26843	; 0x68db
 80007ea:	fb80 2104 	smull	r2, r1, r0, r4
 80007ee:	17e2      	asrs	r2, r4, #31
 80007f0:	ebc2 3021 	rsb	r0, r2, r1, asr #12
                        remainder %= divisor;
 80007f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80007f8:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 80007fc:	2800      	cmp	r0, #0
 80007fe:	f47f af62 	bne.w	80006c6 <PrintDec+0x22e>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000802:	f644 50d3 	movw	r0, #19923	; 0x4dd3
 8000806:	f2c1 0062 	movt	r0, #4194	; 0x1062
 800080a:	fb80 2104 	smull	r2, r1, r0, r4
 800080e:	17e2      	asrs	r2, r4, #31
 8000810:	ebc2 10a1 	rsb	r0, r2, r1, asr #6
                        remainder %= divisor;
 8000814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000818:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 800081c:	2800      	cmp	r0, #0
 800081e:	f47f af61 	bne.w	80006e4 <PrintDec+0x24c>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000822:	f248 501f 	movw	r0, #34079	; 0x851f
 8000826:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
 800082a:	fb80 2104 	smull	r2, r1, r0, r4
 800082e:	17e2      	asrs	r2, r4, #31
 8000830:	ebc2 1061 	rsb	r0, r2, r1, asr #5
                        remainder %= divisor;
 8000834:	2364      	movs	r3, #100	; 0x64
 8000836:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 800083a:	2800      	cmp	r0, #0
 800083c:	f47f af60 	bne.w	8000700 <PrintDec+0x268>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000840:	f246 6067 	movw	r0, #26215	; 0x6667
 8000844:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8000848:	fb80 2104 	smull	r2, r1, r0, r4
 800084c:	17e2      	asrs	r2, r4, #31
 800084e:	ebc2 00a1 	rsb	r0, r2, r1, asr #2
                        remainder %= divisor;
 8000852:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8000856:	eba4 0443 	sub.w	r4, r4, r3, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 800085a:	2800      	cmp	r0, #0
 800085c:	f43f af61 	beq.w	8000722 <PrintDec+0x28a>
 8000860:	e75d      	b.n	800071e <PrintDec+0x286>
 8000862:	bf00      	nop

08000864 <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000868:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800086a:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800086c:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800086e:	4681      	mov	r9, r0
 8000870:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000872:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000874:	2b00      	cmp	r3, #0
 8000876:	f000 80b7 	beq.w	80009e8 <PrintHex+0x184>
                if (c=='x') break;
 800087a:	2b78      	cmp	r3, #120	; 0x78
 800087c:	f000 80b4 	beq.w	80009e8 <PrintHex+0x184>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 8000880:	4fb4      	ldr	r7, [pc, #720]	; (8000b54 <PrintHex+0x2f0>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 8000882:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000884:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 8000886:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800088a:	2a08      	cmp	r2, #8
 800088c:	f200 80a8 	bhi.w	80009e0 <PrintHex+0x17c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000890:	f819 2004 	ldrb.w	r2, [r9, r4]
 8000894:	eb09 0104 	add.w	r1, r9, r4
 8000898:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800089c:	2b09      	cmp	r3, #9
 800089e:	a803      	add	r0, sp, #12
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	d808      	bhi.n	80008b8 <PrintHex+0x54>
                                tol[j] = s[i++];
 80008a6:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80008a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 80008ac:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80008ae:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80008b2:	3301      	adds	r3, #1
 80008b4:	2d09      	cmp	r5, #9
 80008b6:	d9f6      	bls.n	80008a6 <PrintHex+0x42>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80008b8:	a906      	add	r1, sp, #24
 80008ba:	18ca      	adds	r2, r1, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 80008bc:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80008be:	f802 8c0c 	strb.w	r8, [r2, #-12]
                        i--;
 80008c2:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 80008c4:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80008c6:	3401      	adds	r4, #1
 80008c8:	f819 3004 	ldrb.w	r3, [r9, r4]
 80008cc:	b10b      	cbz	r3, 80008d2 <PrintHex+0x6e>
                if (c=='x') break;
 80008ce:	2b78      	cmp	r3, #120	; 0x78
 80008d0:	d1d9      	bne.n	8000886 <PrintHex+0x22>
 80008d2:	9901      	ldr	r1, [sp, #4]
 80008d4:	9b02      	ldr	r3, [sp, #8]
 80008d6:	ba0a      	rev	r2, r1
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 80008d8:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 8087 	beq.w	80009ee <PrintHex+0x18a>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 80008e0:	07d8      	lsls	r0, r3, #31
 80008e2:	f100 810f 	bmi.w	8000b04 <PrintHex+0x2a0>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 80008e6:	2101      	movs	r1, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 80008e8:	f1c3 0208 	rsb	r2, r3, #8
 80008ec:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
 80008f0:	105a      	asrs	r2, r3, #1
 80008f2:	2a03      	cmp	r2, #3
 80008f4:	f300 80c9 	bgt.w	8000a8a <PrintHex+0x226>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80008f8:	ac01      	add	r4, sp, #4
 80008fa:	18a5      	adds	r5, r4, r2
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 80008fc:	462c      	mov	r4, r5
 80008fe:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000902:	43ef      	mvns	r7, r5
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000904:	0903      	lsrs	r3, r0, #4
 8000906:	f007 0901 	and.w	r9, r7, #1
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800090a:	f10d 0808 	add.w	r8, sp, #8
 800090e:	4d92      	ldr	r5, [pc, #584]	; (8000b58 <PrintHex+0x2f4>)
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000910:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000914:	f000 8131 	beq.w	8000b7a <PrintHex+0x316>
                        if (uHex<10) uHex+='0';
 8000918:	2b09      	cmp	r3, #9
 800091a:	f240 816e 	bls.w	8000bfa <PrintHex+0x396>
                        else         uHex+='A'-10;
 800091e:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000922:	47a8      	blx	r5
 8000924:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000926:	2f00      	cmp	r7, #0
 8000928:	f000 8130 	beq.w	8000b8c <PrintHex+0x328>
                        if (lHex<10) lHex+='0';
 800092c:	2f09      	cmp	r7, #9
 800092e:	f240 8152 	bls.w	8000bd6 <PrintHex+0x372>
                        else         lHex+='A'-10;
 8000932:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000936:	47a8      	blx	r5
 8000938:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800093a:	4544      	cmp	r4, r8
 800093c:	f000 80a5 	beq.w	8000a8a <PrintHex+0x226>
 8000940:	f1b9 0f00 	cmp.w	r9, #0
 8000944:	d017      	beq.n	8000976 <PrintHex+0x112>
                        c = s[i];
 8000946:	f814 0b01 	ldrb.w	r0, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800094a:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800094c:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000950:	d031      	beq.n	80009b6 <PrintHex+0x152>
                        if (uHex<10) uHex+='0';
 8000952:	2b09      	cmp	r3, #9
 8000954:	f240 8142 	bls.w	8000bdc <PrintHex+0x378>
                        else         uHex+='A'-10;
 8000958:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 800095c:	47a8      	blx	r5
 800095e:	2200      	movs	r2, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000960:	b3a7      	cbz	r7, 80009cc <PrintHex+0x168>
                        if (lHex<10) lHex+='0';
 8000962:	2f09      	cmp	r7, #9
 8000964:	f240 813d 	bls.w	8000be2 <PrintHex+0x37e>
                        else         lHex+='A'-10;
 8000968:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800096c:	47a8      	blx	r5
 800096e:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000970:	4544      	cmp	r4, r8
 8000972:	f000 808a 	beq.w	8000a8a <PrintHex+0x226>
                        c = s[i];
 8000976:	f814 3b01 	ldrb.w	r3, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800097a:	091a      	lsrs	r2, r3, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800097c:	f003 070f 	and.w	r7, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000980:	f000 80d4 	beq.w	8000b2c <PrintHex+0x2c8>
                        if (uHex<10) uHex+='0';
 8000984:	2a09      	cmp	r2, #9
                        else         uHex+='A'-10;
 8000986:	bf88      	it	hi
 8000988:	f102 0037 	addhi.w	r0, r2, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800098c:	f240 812c 	bls.w	8000be8 <PrintHex+0x384>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000990:	47a8      	blx	r5
 8000992:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000994:	2f00      	cmp	r7, #0
 8000996:	f000 80d2 	beq.w	8000b3e <PrintHex+0x2da>
                        if (lHex<10) lHex+='0';
 800099a:	2f09      	cmp	r7, #9
                        else         lHex+='A'-10;
 800099c:	bf88      	it	hi
 800099e:	f107 0037 	addhi.w	r0, r7, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80009a2:	f240 8124 	bls.w	8000bee <PrintHex+0x38a>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80009a6:	47a8      	blx	r5
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 80009a8:	f814 0b01 	ldrb.w	r0, [r4], #1
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80009ac:	2100      	movs	r1, #0
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80009ae:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80009b0:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80009b4:	d1cd      	bne.n	8000952 <PrintHex+0xee>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 80009b6:	2900      	cmp	r1, #0
 80009b8:	f000 8110 	beq.w	8000bdc <PrintHex+0x378>
                                if (flag0) print_byte_out('0');
 80009bc:	2e00      	cmp	r6, #0
 80009be:	f040 80cd 	bne.w	8000b5c <PrintHex+0x2f8>
                                else       print_byte_out(' ');
 80009c2:	2020      	movs	r0, #32
 80009c4:	47a8      	blx	r5
 80009c6:	2201      	movs	r2, #1
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80009c8:	2f00      	cmp	r7, #0
 80009ca:	d1ca      	bne.n	8000962 <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f000 8108 	beq.w	8000be2 <PrintHex+0x37e>
                                if (flag0) print_byte_out('0');
 80009d2:	2e00      	cmp	r6, #0
 80009d4:	f040 80ba 	bne.w	8000b4c <PrintHex+0x2e8>
                                else       print_byte_out(' ');
 80009d8:	2020      	movs	r0, #32
 80009da:	47a8      	blx	r5
 80009dc:	2101      	movs	r1, #1
 80009de:	e7c7      	b.n	8000970 <PrintHex+0x10c>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 80009e0:	2b30      	cmp	r3, #48	; 0x30
 80009e2:	bf08      	it	eq
 80009e4:	2601      	moveq	r6, #1
 80009e6:	e76e      	b.n	80008c6 <PrintHex+0x62>
 80009e8:	9c01      	ldr	r4, [sp, #4]
 80009ea:	ba25      	rev	r5, r4
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 80009ec:	9501      	str	r5, [sp, #4]
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80009ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80009f2:	091a      	lsrs	r2, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80009f4:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80009f8:	d04a      	beq.n	8000a90 <PrintHex+0x22c>
                        if (uHex<10) uHex+='0';
 80009fa:	2a09      	cmp	r2, #9
 80009fc:	f240 80fa 	bls.w	8000bf4 <PrintHex+0x390>
                        else         uHex+='A'-10;
 8000a00:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000a04:	4d54      	ldr	r5, [pc, #336]	; (8000b58 <PrintHex+0x2f4>)
 8000a06:	47a8      	blx	r5
 8000a08:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a0a:	2c00      	cmp	r4, #0
 8000a0c:	d144      	bne.n	8000a98 <PrintHex+0x234>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2900      	cmp	r1, #0
 8000a12:	f000 80fb 	beq.w	8000c0c <PrintHex+0x3a8>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a16:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a1a:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a1c:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a20:	d047      	beq.n	8000ab2 <PrintHex+0x24e>
                        if (uHex<10) uHex+='0';
 8000a22:	2909      	cmp	r1, #9
 8000a24:	f240 80ec 	bls.w	8000c00 <PrintHex+0x39c>
                        else         uHex+='A'-10;
 8000a28:	f101 0037 	add.w	r0, r1, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000a2c:	47a8      	blx	r5
 8000a2e:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a30:	2c00      	cmp	r4, #0
 8000a32:	d144      	bne.n	8000abe <PrintHex+0x25a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f000 80e5 	beq.w	8000c06 <PrintHex+0x3a2>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a3c:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a40:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a42:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a46:	d047      	beq.n	8000ad8 <PrintHex+0x274>
                        if (uHex<10) uHex+='0';
 8000a48:	2b09      	cmp	r3, #9
 8000a4a:	f240 80be 	bls.w	8000bca <PrintHex+0x366>
                        else         uHex+='A'-10;
 8000a4e:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000a52:	47a8      	blx	r5
 8000a54:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a56:	2c00      	cmp	r4, #0
 8000a58:	d143      	bne.n	8000ae2 <PrintHex+0x27e>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2900      	cmp	r1, #0
 8000a5e:	f000 80b7 	beq.w	8000bd0 <PrintHex+0x36c>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a62:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a66:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a68:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a6c:	d045      	beq.n	8000afa <PrintHex+0x296>
                        if (uHex<10) uHex+='0';
 8000a6e:	2909      	cmp	r1, #9
                        else         uHex+='A'-10;
 8000a70:	bf88      	it	hi
 8000a72:	f101 0037 	addhi.w	r0, r1, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000a76:	d942      	bls.n	8000afe <PrintHex+0x29a>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000a78:	47a8      	blx	r5
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a7a:	2c00      	cmp	r4, #0
 8000a7c:	d07a      	beq.n	8000b74 <PrintHex+0x310>
                        if (lHex<10) lHex+='0';
 8000a7e:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 8000a80:	bf88      	it	hi
 8000a82:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000a86:	d975      	bls.n	8000b74 <PrintHex+0x310>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000a88:	47a8      	blx	r5
                }
        }
        return;
}
 8000a8a:	b007      	add	sp, #28
 8000a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a90:	2101      	movs	r1, #1
 8000a92:	4d31      	ldr	r5, [pc, #196]	; (8000b58 <PrintHex+0x2f4>)
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a94:	2c00      	cmp	r4, #0
 8000a96:	d0ba      	beq.n	8000a0e <PrintHex+0x1aa>
                        if (lHex<10) lHex+='0';
 8000a98:	2c09      	cmp	r4, #9
 8000a9a:	f240 80b7 	bls.w	8000c0c <PrintHex+0x3a8>
                        else         lHex+='A'-10;
 8000a9e:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000aa2:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000aa4:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000aa8:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000aaa:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000aac:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000ab0:	d1b7      	bne.n	8000a22 <PrintHex+0x1be>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	f000 80a4 	beq.w	8000c00 <PrintHex+0x39c>
 8000ab8:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000aba:	2c00      	cmp	r4, #0
 8000abc:	d0ba      	beq.n	8000a34 <PrintHex+0x1d0>
                        if (lHex<10) lHex+='0';
 8000abe:	2c09      	cmp	r4, #9
 8000ac0:	f240 80a1 	bls.w	8000c06 <PrintHex+0x3a2>
                        else         lHex+='A'-10;
 8000ac4:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000ac8:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000aca:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000ace:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000ad0:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000ad2:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000ad6:	d1b7      	bne.n	8000a48 <PrintHex+0x1e4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	d076      	beq.n	8000bca <PrintHex+0x366>
 8000adc:	2101      	movs	r1, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000ade:	2c00      	cmp	r4, #0
 8000ae0:	d0bb      	beq.n	8000a5a <PrintHex+0x1f6>
                        if (lHex<10) lHex+='0';
 8000ae2:	2c09      	cmp	r4, #9
 8000ae4:	d974      	bls.n	8000bd0 <PrintHex+0x36c>
                        else         lHex+='A'-10;
 8000ae6:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000aea:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000aec:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000af0:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000af2:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000af4:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000af8:	d1b9      	bne.n	8000a6e <PrintHex+0x20a>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d1bd      	bne.n	8000a7a <PrintHex+0x216>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000afe:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000b02:	e7b9      	b.n	8000a78 <PrintHex+0x214>
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8000b04:	43d8      	mvns	r0, r3
 8000b06:	3008      	adds	r0, #8
 8000b08:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8000b0c:	aa06      	add	r2, sp, #24
 8000b0e:	eb02 0163 	add.w	r1, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 8000b12:	f811 0c14 	ldrb.w	r0, [r1, #-20]
                        if (lHex!=0) leading_zero=false;
 8000b16:	f010 030f 	ands.w	r3, r0, #15
 8000b1a:	d045      	beq.n	8000ba8 <PrintHex+0x344>
                        if (lHex<10) lHex+='0';
 8000b1c:	2b09      	cmp	r3, #9
 8000b1e:	d951      	bls.n	8000bc4 <PrintHex+0x360>
                        else         lHex+='A'-10;
 8000b20:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <PrintHex+0x2f4>)
 8000b26:	4798      	blx	r3
 8000b28:	2100      	movs	r1, #0
 8000b2a:	e042      	b.n	8000bb2 <PrintHex+0x34e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	d05b      	beq.n	8000be8 <PrintHex+0x384>
                                if (flag0) print_byte_out('0');
 8000b30:	b1e6      	cbz	r6, 8000b6c <PrintHex+0x308>
 8000b32:	2030      	movs	r0, #48	; 0x30
 8000b34:	47a8      	blx	r5
 8000b36:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000b38:	2f00      	cmp	r7, #0
 8000b3a:	f47f af2e 	bne.w	800099a <PrintHex+0x136>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d055      	beq.n	8000bee <PrintHex+0x38a>
                                if (flag0) print_byte_out('0');
 8000b42:	b17e      	cbz	r6, 8000b64 <PrintHex+0x300>
 8000b44:	2030      	movs	r0, #48	; 0x30
 8000b46:	47a8      	blx	r5
 8000b48:	2101      	movs	r1, #1
 8000b4a:	e6fc      	b.n	8000946 <PrintHex+0xe2>
 8000b4c:	2030      	movs	r0, #48	; 0x30
 8000b4e:	47a8      	blx	r5
 8000b50:	2101      	movs	r1, #1
 8000b52:	e70d      	b.n	8000970 <PrintHex+0x10c>
 8000b54:	08000455 	.word	0x08000455
 8000b58:	080003fd 	.word	0x080003fd
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000b5c:	2030      	movs	r0, #48	; 0x30
 8000b5e:	47a8      	blx	r5
 8000b60:	2201      	movs	r2, #1
 8000b62:	e6fd      	b.n	8000960 <PrintHex+0xfc>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000b64:	2020      	movs	r0, #32
 8000b66:	47a8      	blx	r5
 8000b68:	2101      	movs	r1, #1
 8000b6a:	e6ec      	b.n	8000946 <PrintHex+0xe2>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000b6c:	2020      	movs	r0, #32
 8000b6e:	47a8      	blx	r5
 8000b70:	2101      	movs	r1, #1
 8000b72:	e70f      	b.n	8000994 <PrintHex+0x130>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000b74:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000b78:	e786      	b.n	8000a88 <PrintHex+0x224>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d03d      	beq.n	8000bfa <PrintHex+0x396>
                                if (flag0) print_byte_out('0');
 8000b7e:	b17e      	cbz	r6, 8000ba0 <PrintHex+0x33c>
 8000b80:	2030      	movs	r0, #48	; 0x30
 8000b82:	47a8      	blx	r5
 8000b84:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000b86:	2f00      	cmp	r7, #0
 8000b88:	f47f aed0 	bne.w	800092c <PrintHex+0xc8>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000b8c:	b319      	cbz	r1, 8000bd6 <PrintHex+0x372>
                                if (flag0) print_byte_out('0');
 8000b8e:	b11e      	cbz	r6, 8000b98 <PrintHex+0x334>
 8000b90:	2030      	movs	r0, #48	; 0x30
 8000b92:	47a8      	blx	r5
 8000b94:	2101      	movs	r1, #1
 8000b96:	e6d0      	b.n	800093a <PrintHex+0xd6>
                                else       print_byte_out(' ');
 8000b98:	2020      	movs	r0, #32
 8000b9a:	47a8      	blx	r5
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	e6cc      	b.n	800093a <PrintHex+0xd6>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000ba0:	2020      	movs	r0, #32
 8000ba2:	47a8      	blx	r5
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	e6be      	b.n	8000926 <PrintHex+0xc2>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000ba8:	b13e      	cbz	r6, 8000bba <PrintHex+0x356>
 8000baa:	491a      	ldr	r1, [pc, #104]	; (8000c14 <PrintHex+0x3b0>)
 8000bac:	2030      	movs	r0, #48	; 0x30
 8000bae:	4788      	blx	r1
 8000bb0:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 8000bb2:	9802      	ldr	r0, [sp, #8]
 8000bb4:	1e43      	subs	r3, r0, #1
 8000bb6:	9302      	str	r3, [sp, #8]
 8000bb8:	e696      	b.n	80008e8 <PrintHex+0x84>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000bba:	2020      	movs	r0, #32
 8000bbc:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <PrintHex+0x3b0>)
 8000bbe:	4790      	blx	r2
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	e7f6      	b.n	8000bb2 <PrintHex+0x34e>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8000bc4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000bc8:	e7ac      	b.n	8000b24 <PrintHex+0x2c0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000bca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000bce:	e740      	b.n	8000a52 <PrintHex+0x1ee>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000bd0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000bd4:	e789      	b.n	8000aea <PrintHex+0x286>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000bd6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000bda:	e6ac      	b.n	8000936 <PrintHex+0xd2>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000bdc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000be0:	e6bc      	b.n	800095c <PrintHex+0xf8>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000be2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000be6:	e6c1      	b.n	800096c <PrintHex+0x108>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000be8:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8000bec:	e6d0      	b.n	8000990 <PrintHex+0x12c>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000bee:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000bf2:	e6d8      	b.n	80009a6 <PrintHex+0x142>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000bf4:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8000bf8:	e704      	b.n	8000a04 <PrintHex+0x1a0>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000bfa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000bfe:	e690      	b.n	8000922 <PrintHex+0xbe>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000c00:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000c04:	e712      	b.n	8000a2c <PrintHex+0x1c8>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000c06:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000c0a:	e75d      	b.n	8000ac8 <PrintHex+0x264>
 8000c0c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000c10:	e747      	b.n	8000aa2 <PrintHex+0x23e>
 8000c12:	bf00      	nop
 8000c14:	080003fd 	.word	0x080003fd

08000c18 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 8000c18:	b40f      	push	{r0, r1, r2, r3}
 8000c1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c1e:	b085      	sub	sp, #20
	int		i;
	va_list args;
	char	*s=fmt;
 8000c20:	f10d 0930 	add.w	r9, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000c24:	4bac      	ldr	r3, [pc, #688]	; (8000ed8 <Lb_printf+0x2c0>)
 8000c26:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 8000c28:	f859 4b04 	ldr.w	r4, [r9], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000c2c:	4dab      	ldr	r5, [pc, #684]	; (8000edc <Lb_printf+0x2c4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000c2e:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8000ee8 <Lb_printf+0x2d0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000c32:	4fab      	ldr	r7, [pc, #684]	; (8000ee0 <Lb_printf+0x2c8>)
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000c34:	4eab      	ldr	r6, [pc, #684]	; (8000ee4 <Lb_printf+0x2cc>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000c36:	701a      	strb	r2, [r3, #0]
	
	while (*s)
 8000c38:	7820      	ldrb	r0, [r4, #0]
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	f000 80be 	beq.w	8000dbc <Lb_printf+0x1a4>
	{
		if (*s=='%')
 8000c40:	2825      	cmp	r0, #37	; 0x25
 8000c42:	f040 80c0 	bne.w	8000dc6 <Lb_printf+0x1ae>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c46:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8000c48:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c4a:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8000c4e:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8000c50:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c54:	f240 80d6 	bls.w	8000e04 <Lb_printf+0x1ec>
 8000c58:	2a78      	cmp	r2, #120	; 0x78
 8000c5a:	f000 80dd 	beq.w	8000e18 <Lb_printf+0x200>
 8000c5e:	2a73      	cmp	r2, #115	; 0x73
 8000c60:	f000 80dd 	beq.w	8000e1e <Lb_printf+0x206>
 8000c64:	2a25      	cmp	r2, #37	; 0x25
 8000c66:	f000 80dd 	beq.w	8000e24 <Lb_printf+0x20c>
 8000c6a:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c6c:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c70:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c74:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c76:	2a01      	cmp	r2, #1
 8000c78:	f240 80d6 	bls.w	8000e28 <Lb_printf+0x210>
 8000c7c:	2978      	cmp	r1, #120	; 0x78
 8000c7e:	f000 80d6 	beq.w	8000e2e <Lb_printf+0x216>
 8000c82:	2973      	cmp	r1, #115	; 0x73
 8000c84:	f000 80d6 	beq.w	8000e34 <Lb_printf+0x21c>
 8000c88:	2925      	cmp	r1, #37	; 0x25
 8000c8a:	f000 80d6 	beq.w	8000e3a <Lb_printf+0x222>
 8000c8e:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c90:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c94:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c98:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c9a:	2901      	cmp	r1, #1
 8000c9c:	f240 80cf 	bls.w	8000e3e <Lb_printf+0x226>
 8000ca0:	2a78      	cmp	r2, #120	; 0x78
 8000ca2:	f000 80cf 	beq.w	8000e44 <Lb_printf+0x22c>
 8000ca6:	2a73      	cmp	r2, #115	; 0x73
 8000ca8:	f000 80cf 	beq.w	8000e4a <Lb_printf+0x232>
 8000cac:	2a25      	cmp	r2, #37	; 0x25
 8000cae:	f000 80cf 	beq.w	8000e50 <Lb_printf+0x238>
 8000cb2:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000cb4:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000cb8:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000cbc:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000cbe:	2a01      	cmp	r2, #1
 8000cc0:	f240 80c8 	bls.w	8000e54 <Lb_printf+0x23c>
 8000cc4:	2978      	cmp	r1, #120	; 0x78
 8000cc6:	f000 80c8 	beq.w	8000e5a <Lb_printf+0x242>
 8000cca:	2973      	cmp	r1, #115	; 0x73
 8000ccc:	f000 80c8 	beq.w	8000e60 <Lb_printf+0x248>
 8000cd0:	2925      	cmp	r1, #37	; 0x25
 8000cd2:	f000 80c8 	beq.w	8000e66 <Lb_printf+0x24e>
 8000cd6:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000cd8:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000cdc:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ce0:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ce2:	2901      	cmp	r1, #1
 8000ce4:	f240 80c1 	bls.w	8000e6a <Lb_printf+0x252>
 8000ce8:	2a78      	cmp	r2, #120	; 0x78
 8000cea:	f000 80c1 	beq.w	8000e70 <Lb_printf+0x258>
 8000cee:	2a73      	cmp	r2, #115	; 0x73
 8000cf0:	f000 80c1 	beq.w	8000e76 <Lb_printf+0x25e>
 8000cf4:	2a25      	cmp	r2, #37	; 0x25
 8000cf6:	f000 80c1 	beq.w	8000e7c <Lb_printf+0x264>
 8000cfa:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000cfc:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d00:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d04:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d06:	2a01      	cmp	r2, #1
 8000d08:	f240 80ba 	bls.w	8000e80 <Lb_printf+0x268>
 8000d0c:	2978      	cmp	r1, #120	; 0x78
 8000d0e:	f000 80ba 	beq.w	8000e86 <Lb_printf+0x26e>
 8000d12:	2973      	cmp	r1, #115	; 0x73
 8000d14:	f000 80ba 	beq.w	8000e8c <Lb_printf+0x274>
 8000d18:	2925      	cmp	r1, #37	; 0x25
 8000d1a:	f000 80ba 	beq.w	8000e92 <Lb_printf+0x27a>
 8000d1e:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d20:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d24:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d28:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d2a:	2901      	cmp	r1, #1
 8000d2c:	f240 80b3 	bls.w	8000e96 <Lb_printf+0x27e>
 8000d30:	2a78      	cmp	r2, #120	; 0x78
 8000d32:	f000 80b3 	beq.w	8000e9c <Lb_printf+0x284>
 8000d36:	2a73      	cmp	r2, #115	; 0x73
 8000d38:	f000 80b3 	beq.w	8000ea2 <Lb_printf+0x28a>
 8000d3c:	2a25      	cmp	r2, #37	; 0x25
 8000d3e:	f000 80b3 	beq.w	8000ea8 <Lb_printf+0x290>
 8000d42:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d44:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d48:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 8000d4c:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d4e:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d52:	f240 80ab 	bls.w	8000eac <Lb_printf+0x294>
 8000d56:	2978      	cmp	r1, #120	; 0x78
 8000d58:	f000 80ab 	beq.w	8000eb2 <Lb_printf+0x29a>
 8000d5c:	2973      	cmp	r1, #115	; 0x73
 8000d5e:	f000 80ab 	beq.w	8000eb8 <Lb_printf+0x2a0>
 8000d62:	2925      	cmp	r1, #37	; 0x25
 8000d64:	f000 80ab 	beq.w	8000ebe <Lb_printf+0x2a6>
 8000d68:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d6a:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d6e:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8000d72:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d74:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d78:	f240 80a3 	bls.w	8000ec2 <Lb_printf+0x2aa>
 8000d7c:	2a78      	cmp	r2, #120	; 0x78
 8000d7e:	f000 80a3 	beq.w	8000ec8 <Lb_printf+0x2b0>
 8000d82:	2a73      	cmp	r2, #115	; 0x73
 8000d84:	f000 80a3 	beq.w	8000ece <Lb_printf+0x2b6>
 8000d88:	2a25      	cmp	r2, #37	; 0x25
 8000d8a:	f000 80a3 	beq.w	8000ed4 <Lb_printf+0x2bc>
 8000d8e:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d90:	f88d 200d 	strb.w	r2, [sp, #13]
 8000d94:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000d98:	1c5c      	adds	r4, r3, #1
 8000d9a:	2864      	cmp	r0, #100	; 0x64
 8000d9c:	d02b      	beq.n	8000df6 <Lb_printf+0x1de>
 8000d9e:	d815      	bhi.n	8000dcc <Lb_printf+0x1b4>
 8000da0:	2825      	cmp	r0, #37	; 0x25
 8000da2:	d01f      	beq.n	8000de4 <Lb_printf+0x1cc>
 8000da4:	2863      	cmp	r0, #99	; 0x63
 8000da6:	f47f af47 	bne.w	8000c38 <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000daa:	f899 0000 	ldrb.w	r0, [r9]
 8000dae:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000db0:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000db2:	f109 0904 	add.w	r9, r9, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000db6:	2800      	cmp	r0, #0
 8000db8:	f47f af42 	bne.w	8000c40 <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 8000dbc:	b005      	add	sp, #20
 8000dbe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dc2:	b004      	add	sp, #16
 8000dc4:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000dc6:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8000dc8:	3401      	adds	r4, #1
 8000dca:	e735      	b.n	8000c38 <Lb_printf+0x20>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000dcc:	2873      	cmp	r0, #115	; 0x73
 8000dce:	d00b      	beq.n	8000de8 <Lb_printf+0x1d0>
 8000dd0:	2878      	cmp	r0, #120	; 0x78
 8000dd2:	f47f af31 	bne.w	8000c38 <Lb_printf+0x20>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000dd6:	f8d9 1000 	ldr.w	r1, [r9]
 8000dda:	a801      	add	r0, sp, #4
 8000ddc:	f109 0904 	add.w	r9, r9, #4
 8000de0:	47b0      	blx	r6
					break;
 8000de2:	e729      	b.n	8000c38 <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000de4:	47a8      	blx	r5
 8000de6:	e727      	b.n	8000c38 <Lb_printf+0x20>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000de8:	f8d9 1000 	ldr.w	r1, [r9]
 8000dec:	a801      	add	r0, sp, #4
 8000dee:	f109 0904 	add.w	r9, r9, #4
 8000df2:	47b8      	blx	r7
 					break;
 8000df4:	e720      	b.n	8000c38 <Lb_printf+0x20>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000df6:	f8d9 1000 	ldr.w	r1, [r9]
 8000dfa:	a801      	add	r0, sp, #4
 8000dfc:	f109 0904 	add.w	r9, r9, #4
 8000e00:	47c0      	blx	r8
					break;
 8000e02:	e719      	b.n	8000c38 <Lb_printf+0x20>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e04:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000e06:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000e08:	aa04      	add	r2, sp, #16
 8000e0a:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 8000e0c:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000e0e:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 8000e12:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8000e16:	e7bf      	b.n	8000d98 <Lb_printf+0x180>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000e18:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e1a:	2078      	movs	r0, #120	; 0x78
 8000e1c:	e7f4      	b.n	8000e08 <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000e1e:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e20:	2073      	movs	r0, #115	; 0x73
 8000e22:	e7f1      	b.n	8000e08 <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000e24:	2401      	movs	r4, #1
 8000e26:	e7ef      	b.n	8000e08 <Lb_printf+0x1f0>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e28:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e2a:	2402      	movs	r4, #2
 8000e2c:	e7ec      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e2e:	2402      	movs	r4, #2
 8000e30:	2078      	movs	r0, #120	; 0x78
 8000e32:	e7e9      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e34:	2402      	movs	r4, #2
 8000e36:	2073      	movs	r0, #115	; 0x73
 8000e38:	e7e6      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e3a:	2402      	movs	r4, #2
 8000e3c:	e7e4      	b.n	8000e08 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e3e:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e40:	2403      	movs	r4, #3
 8000e42:	e7e1      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e44:	2403      	movs	r4, #3
 8000e46:	2078      	movs	r0, #120	; 0x78
 8000e48:	e7de      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e4a:	2403      	movs	r4, #3
 8000e4c:	2073      	movs	r0, #115	; 0x73
 8000e4e:	e7db      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e50:	2403      	movs	r4, #3
 8000e52:	e7d9      	b.n	8000e08 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e54:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e56:	2404      	movs	r4, #4
 8000e58:	e7d6      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e5a:	2404      	movs	r4, #4
 8000e5c:	2078      	movs	r0, #120	; 0x78
 8000e5e:	e7d3      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e60:	2404      	movs	r4, #4
 8000e62:	2073      	movs	r0, #115	; 0x73
 8000e64:	e7d0      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e66:	2404      	movs	r4, #4
 8000e68:	e7ce      	b.n	8000e08 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e6a:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e6c:	2405      	movs	r4, #5
 8000e6e:	e7cb      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e70:	2405      	movs	r4, #5
 8000e72:	2078      	movs	r0, #120	; 0x78
 8000e74:	e7c8      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e76:	2405      	movs	r4, #5
 8000e78:	2073      	movs	r0, #115	; 0x73
 8000e7a:	e7c5      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e7c:	2405      	movs	r4, #5
 8000e7e:	e7c3      	b.n	8000e08 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e80:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e82:	2406      	movs	r4, #6
 8000e84:	e7c0      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e86:	2406      	movs	r4, #6
 8000e88:	2078      	movs	r0, #120	; 0x78
 8000e8a:	e7bd      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e8c:	2406      	movs	r4, #6
 8000e8e:	2073      	movs	r0, #115	; 0x73
 8000e90:	e7ba      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e92:	2406      	movs	r4, #6
 8000e94:	e7b8      	b.n	8000e08 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e96:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e98:	2407      	movs	r4, #7
 8000e9a:	e7b5      	b.n	8000e08 <Lb_printf+0x1f0>
 8000e9c:	2407      	movs	r4, #7
 8000e9e:	2078      	movs	r0, #120	; 0x78
 8000ea0:	e7b2      	b.n	8000e08 <Lb_printf+0x1f0>
 8000ea2:	2407      	movs	r4, #7
 8000ea4:	2073      	movs	r0, #115	; 0x73
 8000ea6:	e7af      	b.n	8000e08 <Lb_printf+0x1f0>
 8000ea8:	2407      	movs	r4, #7
 8000eaa:	e7ad      	b.n	8000e08 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000eac:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000eae:	2408      	movs	r4, #8
 8000eb0:	e7aa      	b.n	8000e08 <Lb_printf+0x1f0>
 8000eb2:	2408      	movs	r4, #8
 8000eb4:	2078      	movs	r0, #120	; 0x78
 8000eb6:	e7a7      	b.n	8000e08 <Lb_printf+0x1f0>
 8000eb8:	2408      	movs	r4, #8
 8000eba:	2073      	movs	r0, #115	; 0x73
 8000ebc:	e7a4      	b.n	8000e08 <Lb_printf+0x1f0>
 8000ebe:	2408      	movs	r4, #8
 8000ec0:	e7a2      	b.n	8000e08 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	2409      	movs	r4, #9
 8000ec6:	e79f      	b.n	8000e08 <Lb_printf+0x1f0>
 8000ec8:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000eca:	2078      	movs	r0, #120	; 0x78
 8000ecc:	e79c      	b.n	8000e08 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ece:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ed0:	2073      	movs	r0, #115	; 0x73
 8000ed2:	e799      	b.n	8000e08 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ed4:	2409      	movs	r4, #9
 8000ed6:	e797      	b.n	8000e08 <Lb_printf+0x1f0>
 8000ed8:	20000208 	.word	0x20000208
 8000edc:	080003fd 	.word	0x080003fd
 8000ee0:	08000435 	.word	0x08000435
 8000ee4:	08000865 	.word	0x08000865
 8000ee8:	08000499 	.word	0x08000499

08000eec <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8000eec:	4668      	mov	r0, sp
 8000eee:	f020 0107 	bic.w	r1, r0, #7
 8000ef2:	468d      	mov	sp, r1
 8000ef4:	b579      	push	{r0, r3, r4, r5, r6, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000ef6:	492a      	ldr	r1, [pc, #168]	; (8000fa0 <zero_loop+0x62>)
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <zero_loop+0x66>)
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d21b      	bcs.n	8000f36 <Hw_StartUp_Init+0x4a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 8000efe:	1cda      	adds	r2, r3, #3
 8000f00:	1d0c      	adds	r4, r1, #4
 8000f02:	1b15      	subs	r5, r2, r4
 8000f04:	4828      	ldr	r0, [pc, #160]	; (8000fa8 <zero_loop+0x6a>)
 8000f06:	f025 0203 	bic.w	r2, r5, #3
 8000f0a:	1d16      	adds	r6, r2, #4
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 8000f0c:	6805      	ldr	r5, [r0, #0]
 8000f0e:	2304      	movs	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000f10:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8000f12:	600d      	str	r5, [r1, #0]
 8000f14:	f3c2 0280 	ubfx	r2, r2, #2, #1
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000f18:	d00d      	beq.n	8000f36 <Hw_StartUp_Init+0x4a>
 8000f1a:	b122      	cbz	r2, 8000f26 <Hw_StartUp_Init+0x3a>
	{
		*(pulDest++) = *(pulSrc++);
 8000f1c:	6842      	ldr	r2, [r0, #4]
 8000f1e:	2308      	movs	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000f20:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8000f22:	6022      	str	r2, [r4, #0]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000f24:	d007      	beq.n	8000f36 <Hw_StartUp_Init+0x4a>
	{
		*(pulDest++) = *(pulSrc++);
 8000f26:	581d      	ldr	r5, [r3, r0]
 8000f28:	1d1a      	adds	r2, r3, #4
 8000f2a:	505d      	str	r5, [r3, r1]
 8000f2c:	5884      	ldr	r4, [r0, r2]
 8000f2e:	3308      	adds	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000f30:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8000f32:	508c      	str	r4, [r1, r2]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000f34:	d1f7      	bne.n	8000f26 <Hw_StartUp_Init+0x3a>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 8000f36:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <zero_loop+0x72>)
 8000f38:	491e      	ldr	r1, [pc, #120]	; (8000fb4 <zero_loop+0x76>)
 8000f3a:	f04f 0200 	mov.w	r2, #0

08000f3e <zero_loop>:
 8000f3e:	4288      	cmp	r0, r1
 8000f40:	bfb8      	it	lt
 8000f42:	f840 2b04 	strlt.w	r2, [r0], #4
 8000f46:	f6ff affa 	blt.w	8000f3e <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8000f4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f52:	6811      	ldr	r1, [r2, #0]
 8000f54:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f58:	f441 3080 	orr.w	r0, r1, #65536	; 0x10000
 8000f5c:	6010      	str	r0, [r2, #0]
 8000f5e:	e004      	b.n	8000f6a <zero_loop+0x2c>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8000f60:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8000f62:	0381      	lsls	r1, r0, #14
 8000f64:	d405      	bmi.n	8000f72 <zero_loop+0x34>
 8000f66:	3b01      	subs	r3, #1
 8000f68:	d003      	beq.n	8000f72 <zero_loop+0x34>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8000f6a:	6811      	ldr	r1, [r2, #0]
 8000f6c:	3b01      	subs	r3, #1
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8000f6e:	0388      	lsls	r0, r1, #14
 8000f70:	d5f6      	bpl.n	8000f60 <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8000f72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f76:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8000f7a:	680a      	ldr	r2, [r1, #0]
 8000f7c:	f042 0010 	orr.w	r0, r2, #16
 8000f80:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 8000f82:	680b      	ldr	r3, [r1, #0]
 8000f84:	f023 0203 	bic.w	r2, r3, #3
 8000f88:	600a      	str	r2, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 8000f8a:	6808      	ldr	r0, [r1, #0]
 8000f8c:	f040 0302 	orr.w	r3, r0, #2
 8000f90:	600b      	str	r3, [r1, #0]


    main();
 8000f92:	4906      	ldr	r1, [pc, #24]	; (8000fac <zero_loop+0x6e>)
 8000f94:	4788      	blx	r1

}
 8000f96:	e8bd 4079 	ldmia.w	sp!, {r0, r3, r4, r5, r6, lr}
 8000f9a:	4685      	mov	sp, r0
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	200000e8 	.word	0x200000e8
 8000fa8:	080046dc 	.word	0x080046dc
 8000fac:	08000019 	.word	0x08000019
 8000fb0:	20000200 	.word	0x20000200
 8000fb4:	2000142c 	.word	0x2000142c

08000fb8 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8000fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 8000fba:	f241 2339 	movw	r3, #4665	; 0x1239
 8000fbe:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000fc2:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 8000fc4:	f241 4075 	movw	r0, #5237	; 0x1475
 8000fc8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000fcc:	4780      	blx	r0
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000fce:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000fd2:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000fd6:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8000fda:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8000fde:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000fe2:	f241 0104 	movw	r1, #4100	; 0x1004
 8000fe6:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000fea:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 8000fee:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000ff2:	f2c3 3044 	movt	r0, #13124	; 0x3344
 8000ff6:	f2c4 0101 	movt	r1, #16385	; 0x4001
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000ffa:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8000ffe:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8001002:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8001006:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 800100a:	f242 0349 	movw	r3, #8265	; 0x2049
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800100e:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 8001012:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8001016:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8001018:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800101a:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800101c:	6008      	str	r0, [r1, #0]
	
	Hw_DMA_Init();
 800101e:	4798      	blx	r3
	Hw_Uart_Init();
 8001020:	f241 1169 	movw	r1, #4457	; 0x1169
 8001024:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001028:	4788      	blx	r1
	Hw_Led_Init();
 800102a:	f241 20cd 	movw	r0, #4813	; 0x12cd
 800102e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001032:	4780      	blx	r0
	Hw_Timer_Init();
 8001034:	f241 42c5 	movw	r2, #5317	; 0x14c5
 8001038:	f6c0 0200 	movt	r2, #2048	; 0x800
 800103c:	4790      	blx	r2
	Hw_Si47xx_Init();
 800103e:	f641 03ad 	movw	r3, #6317	; 0x18ad
 8001042:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001046:	4798      	blx	r3
	Hw_N5110G_Init();
 8001048:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 800104c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001050:	4788      	blx	r1
	Hw_I2C_Init();
 8001052:	f241 70a1 	movw	r0, #6049	; 0x17a1
 8001056:	f6c0 0000 	movt	r0, #2048	; 0x800
 800105a:	4780      	blx	r0
	
	Hw_VCom_Init();
 800105c:	f241 7275 	movw	r2, #6005	; 0x1775
 8001060:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001064:	4790      	blx	r2

	Hw_MPU6050_Init();
 8001066:	f242 6369 	movw	r3, #9833	; 0x2669
 800106a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800106e:	4798      	blx	r3
 8001070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001072:	bf00      	nop

08001074 <Hw_Wait>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
 8001074:	b082      	sub	sp, #8
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8001076:	2300      	movs	r3, #0
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	9901      	ldr	r1, [sp, #4]
 800107c:	4288      	cmp	r0, r1
 800107e:	d905      	bls.n	800108c <Hw_Wait+0x18>
 8001080:	9a01      	ldr	r2, [sp, #4]
 8001082:	1c53      	adds	r3, r2, #1
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	9901      	ldr	r1, [sp, #4]
 8001088:	4281      	cmp	r1, r0
 800108a:	d3f9      	bcc.n	8001080 <Hw_Wait+0xc>
}
 800108c:	b002      	add	sp, #8
 800108e:	4770      	bx	lr

08001090 <Hw_Wait_ms>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 8001090:	f241 7370 	movw	r3, #6000	; 0x1770
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
 8001094:	b082      	sub	sp, #8
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8001096:	2100      	movs	r1, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 8001098:	fb03 f000 	mul.w	r0, r3, r0
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 800109c:	9101      	str	r1, [sp, #4]
 800109e:	9a01      	ldr	r2, [sp, #4]
 80010a0:	4290      	cmp	r0, r2
 80010a2:	d905      	bls.n	80010b0 <Hw_Wait_ms+0x20>
 80010a4:	9b01      	ldr	r3, [sp, #4]
 80010a6:	1c59      	adds	r1, r3, #1
 80010a8:	9101      	str	r1, [sp, #4]
 80010aa:	9a01      	ldr	r2, [sp, #4]
 80010ac:	4290      	cmp	r0, r2
 80010ae:	d8f9      	bhi.n	80010a4 <Hw_Wait_ms+0x14>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
    Hw_Wait_Usec( msec*1000 );
}
 80010b0:	b002      	add	sp, #8
 80010b2:	4770      	bx	lr

080010b4 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80010b4:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80010b6:	f643 0304 	movw	r3, #14340	; 0x3804
 80010ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80010be:	6818      	ldr	r0, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80010c0:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80010c2:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 80010c4:	f241 3285 	movw	r2, #4997	; 0x1385
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80010c8:	f801 0d01 	strb.w	r0, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 80010cc:	f6c0 0200 	movt	r2, #2048	; 0x800
 80010d0:	2000      	movs	r0, #0
 80010d2:	4790      	blx	r2
}
 80010d4:	b003      	add	sp, #12
 80010d6:	bd00      	pop	{pc}

080010d8 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 80010d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80010dc:	f241 0618 	movw	r6, #4120	; 0x1018
 80010e0:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80010e4:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 80010e6:	f240 23c0 	movw	r3, #704	; 0x2c0
 80010ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80010ee:	f643 040c 	movw	r4, #14348	; 0x380c
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80010f2:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 80010f6:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80010fa:	f643 0708 	movw	r7, #14344	; 0x3808
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 80010fe:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 8001100:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8001102:	f2c4 0401 	movt	r4, #16385	; 0x4001
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8001106:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8001108:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800110c:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 8001110:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8001114:	200c      	movs	r0, #12
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8001116:	f240 2171 	movw	r1, #625	; 0x271
 800111a:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800111e:	f24e 1504 	movw	r5, #57604	; 0xe104
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8001122:	f8c6 8000 	str.w	r8, [r6]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8001126:	f2ce 0500 	movt	r5, #57344	; 0xe000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800112a:	6020      	str	r0, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800112c:	f8cc 2000 	str.w	r2, [ip]
	REG_USART1_CR3  = 0;
 8001130:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8001134:	6039      	str	r1, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8001136:	682b      	ldr	r3, [r5, #0]
 8001138:	f043 0020 	orr.w	r0, r3, #32
 800113c:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800113e:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8001140:	f241 4389 	movw	r3, #5257	; 0x1489
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8001144:	f041 0020 	orr.w	r0, r1, #32
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8001148:	f241 01b5 	movw	r1, #4277	; 0x10b5
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800114c:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800114e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001152:	2025      	movs	r0, #37	; 0x25
 8001154:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001158:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 800115a:	6822      	ldr	r2, [r4, #0]
 800115c:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 8001160:	6021      	str	r1, [r4, #0]
 8001162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001166:	bf00      	nop

08001168 <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 8001168:	f241 3325 	movw	r3, #4901	; 0x1325
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 800116c:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 800116e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001172:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001174:	f240 23c0 	movw	r3, #704	; 0x2c0
 8001178:	2200      	movs	r2, #0
 800117a:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 800117e:	f241 04d9 	movw	r4, #4313	; 0x10d9
 8001182:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001186:	4611      	mov	r1, r2
 8001188:	f6c0 0400 	movt	r4, #2048	; 0x800
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800118c:	605a      	str	r2, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800118e:	609a      	str	r2, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001190:	611a      	str	r2, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001192:	615a      	str	r2, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001194:	61da      	str	r2, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001196:	621a      	str	r2, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800119c:	635a      	str	r2, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800119e:	639a      	str	r2, [r3, #56]	; 0x38
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 80011a0:	47a0      	blx	r4
 80011a2:	bd10      	pop	{r4, pc}

080011a4 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 80011a4:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 80011a6:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 80011a8:	b083      	sub	sp, #12
 80011aa:	4d08      	ldr	r5, [pc, #32]	; (80011cc <Hw_Uart_Getch+0x28>)
 80011ac:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 80011ae:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 80011b2:	4620      	mov	r0, r4
 80011b4:	47a8      	blx	r5
 80011b6:	2800      	cmp	r0, #0
 80011b8:	d0fb      	beq.n	80011b2 <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 80011ba:	4620      	mov	r0, r4
 80011bc:	f10d 0107 	add.w	r1, sp, #7
 80011c0:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <Hw_Uart_Getch+0x2c>)
 80011c2:	4790      	blx	r2

	return Uart_GetData;
}
 80011c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80011c8:	b003      	add	sp, #12
 80011ca:	bd30      	pop	{r4, r5, pc}
 80011cc:	08001355 	.word	0x08001355
 80011d0:	080013fd 	.word	0x080013fd

080011d4 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 80011d4:	280a      	cmp	r0, #10
 80011d6:	d00d      	beq.n	80011f4 <print_byte+0x20>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80011d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80011dc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80011e0:	6813      	ldr	r3, [r2, #0]
 80011e2:	0619      	lsls	r1, r3, #24
 80011e4:	d5fc      	bpl.n	80011e0 <print_byte+0xc>
    
    REG_USART1_DR = Uart_PutData;
 80011e6:	f643 0104 	movw	r1, #14340	; 0x3804
 80011ea:	b2c0      	uxtb	r0, r0
 80011ec:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80011f0:	6008      	str	r0, [r1, #0]
 80011f2:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80011f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80011f8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80011fc:	6813      	ldr	r3, [r2, #0]
 80011fe:	061b      	lsls	r3, r3, #24
 8001200:	d5fc      	bpl.n	80011fc <print_byte+0x28>
    
    REG_USART1_DR = Uart_PutData;
 8001202:	f643 0104 	movw	r1, #14340	; 0x3804
 8001206:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800120a:	220d      	movs	r2, #13
 800120c:	600a      	str	r2, [r1, #0]
 800120e:	e7e3      	b.n	80011d8 <print_byte+0x4>

08001210 <get_byte>:
#endif    
}


char get_byte(void)
{
 8001210:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 8001212:	f241 13a5 	movw	r3, #4517	; 0x11a5
 8001216:	2000      	movs	r0, #0
 8001218:	f6c0 0300 	movt	r3, #2048	; 0x800
 800121c:	4798      	blx	r3
#endif
	
	return Ch;
}
 800121e:	bd08      	pop	{r3, pc}

08001220 <get_byte_check>:


char get_byte_check(void)
{
 8001220:	b508      	push	{r3, lr}
	char Ch = FALSE;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 ) Ch = TRUE;	
 8001222:	f241 3355 	movw	r3, #4949	; 0x1355
 8001226:	2000      	movs	r0, #0
 8001228:	f6c0 0300 	movt	r3, #2048	; 0x800
 800122c:	4798      	blx	r3
#endif
	
	return Ch;
}
 800122e:	3000      	adds	r0, #0
 8001230:	bf18      	it	ne
 8001232:	2001      	movne	r0, #1
 8001234:	bd08      	pop	{r3, pc}
 8001236:	bf00      	nop

08001238 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8001238:	f241 0304 	movw	r3, #4100	; 0x1004
 800123c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001240:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8001242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8001246:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 800124a:	f020 02f0 	bic.w	r2, r0, #240	; 0xf0
 800124e:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8001250:	6818      	ldr	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8001252:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8001256:	f440 12e8 	orr.w	r2, r0, #1900544	; 0x1d0000
 800125a:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800125c:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800125e:	4608      	mov	r0, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8001260:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001264:	600a      	str	r2, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8001266:	6801      	ldr	r1, [r0, #0]
 8001268:	018b      	lsls	r3, r1, #6
 800126a:	d5fc      	bpl.n	8001266 <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 800126c:	f241 0304 	movw	r3, #4100	; 0x1004
 8001270:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001274:	6818      	ldr	r0, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8001276:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8001278:	f020 0103 	bic.w	r1, r0, #3
 800127c:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	f040 0102 	orr.w	r1, r0, #2
 8001284:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 800128c:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 8001294:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 800129c:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 80012a4:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	6018      	str	r0, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 80012aa:	6813      	ldr	r3, [r2, #0]
 80012ac:	f003 010c 	and.w	r1, r3, #12
 80012b0:	2908      	cmp	r1, #8
 80012b2:	d1fa      	bne.n	80012aa <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 80012b4:	f241 0018 	movw	r0, #4120	; 0x1018
 80012b8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80012bc:	6802      	ldr	r2, [r0, #0]
 80012be:	f442 4380 	orr.w	r3, r2, #16384	; 0x4000
 80012c2:	f043 011d 	orr.w	r1, r3, #29
 80012c6:	6001      	str	r1, [r0, #0]
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80012cc:	2204      	movs	r2, #4
 80012ce:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80012d2:	6811      	ldr	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80012d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80012d8:	f021 60e0 	bic.w	r0, r1, #117440512	; 0x7000000
 80012dc:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 80012de:	6811      	ldr	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80012e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
 80012e4:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 80012e8:	6010      	str	r0, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80012ea:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80012ec:	f640 420c 	movw	r2, #3084	; 0xc0c
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80012f0:	f421 4070 	bic.w	r0, r1, #61440	; 0xf000
 80012f4:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 80012f6:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80012f8:	f2c4 0201 	movt	r2, #16385	; 0x4001
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 80012fc:	f441 5040 	orr.w	r0, r1, #12288	; 0x3000
 8001300:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 8001302:	6819      	ldr	r1, [r3, #0]
 8001304:	6019      	str	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8001306:	6813      	ldr	r3, [r2, #0]
 8001308:	f043 0008 	orr.w	r0, r3, #8
 800130c:	6010      	str	r0, [r2, #0]
 800130e:	4770      	bx	lr

08001310 <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 8001310:	b938      	cbnz	r0, 8001322 <Hw_Led_Toggle+0x12>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 8001312:	f640 430c 	movw	r3, #3084	; 0xc0c
 8001316:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	f082 0008 	eor.w	r0, r2, #8
 8001320:	6018      	str	r0, [r3, #0]
 8001322:	4770      	bx	lr

08001324 <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8001324:	f240 31f4 	movw	r1, #1012	; 0x3f4
 8001328:	f240 4204 	movw	r2, #1028	; 0x404
 800132c:	2300      	movs	r3, #0
 800132e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001332:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001336:	800b      	strh	r3, [r1, #0]
 8001338:	8013      	strh	r3, [r2, #0]
 800133a:	804b      	strh	r3, [r1, #2]
 800133c:	8053      	strh	r3, [r2, #2]
 800133e:	808b      	strh	r3, [r1, #4]
 8001340:	8093      	strh	r3, [r2, #4]
 8001342:	80cb      	strh	r3, [r1, #6]
 8001344:	80d3      	strh	r3, [r2, #6]
 8001346:	810b      	strh	r3, [r1, #8]
 8001348:	8113      	strh	r3, [r2, #8]
 800134a:	814b      	strh	r3, [r1, #10]
 800134c:	8153      	strh	r3, [r2, #10]
 800134e:	818b      	strh	r3, [r1, #12]
 8001350:	8193      	strh	r3, [r2, #12]
 8001352:	4770      	bx	lr

08001354 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <HW_UART_Q_VAILD+0x28>)
 8001356:	490a      	ldr	r1, [pc, #40]	; (8001380 <HW_UART_Q_VAILD+0x2c>)
 8001358:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 800135c:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
 8001360:	201f      	movs	r0, #31
 8001362:	1ad2      	subs	r2, r2, r3
 8001364:	3220      	adds	r2, #32
 8001366:	f2c8 0000 	movt	r0, #32768	; 0x8000
 800136a:	4010      	ands	r0, r2
 800136c:	2800      	cmp	r0, #0
 800136e:	db00      	blt.n	8001372 <HW_UART_Q_VAILD+0x1e>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8001370:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001372:	3801      	subs	r0, #1
 8001374:	f060 011f 	orn	r1, r0, #31
 8001378:	1c48      	adds	r0, r1, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 800137a:	4770      	bx	lr
 800137c:	20000404 	.word	0x20000404
 8001380:	200003f4 	.word	0x200003f4

08001384 <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001384:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <Hw_Uart_Q_Push+0x6c>)
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <Hw_Uart_Q_Push+0x70>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8001388:	b4f0      	push	{r4, r5, r6, r7}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800138a:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 800138e:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 8001392:	b22c      	sxth	r4, r5
 8001394:	231f      	movs	r3, #31
 8001396:	1ba6      	subs	r6, r4, r6
 8001398:	3620      	adds	r6, #32
 800139a:	f2c8 0300 	movt	r3, #32768	; 0x8000
 800139e:	4033      	ands	r3, r6
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db18      	blt.n	80013d6 <Hw_Uart_Q_Push+0x52>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 80013a4:	2b1f      	cmp	r3, #31
 80013a6:	d01c      	beq.n	80013e2 <Hw_Uart_Q_Push+0x5e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80013a8:	3501      	adds	r5, #1
 80013aa:	b2ad      	uxth	r5, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80013ac:	231f      	movs	r3, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80013ae:	780e      	ldrb	r6, [r1, #0]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80013b0:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80013b4:	b229      	sxth	r1, r5
 80013b6:	400b      	ands	r3, r1
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80013b8:	eb00 1740 	add.w	r7, r0, r0, lsl #5
 80013bc:	490e      	ldr	r1, [pc, #56]	; (80013f8 <Hw_Uart_Q_Push+0x74>)
 80013be:	193c      	adds	r4, r7, r4
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80013c0:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80013c2:	550e      	strb	r6, [r1, r4]
 80013c4:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80013c8:	db0d      	blt.n	80013e6 <Hw_Uart_Q_Push+0x62>
 80013ca:	4909      	ldr	r1, [pc, #36]	; (80013f0 <Hw_Uart_Q_Push+0x6c>)
 80013cc:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

	return TRUE;
 80013d0:	2001      	movs	r0, #1
}
 80013d2:	bcf0      	pop	{r4, r5, r6, r7}
 80013d4:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f063 031f 	orn	r3, r3, #31
 80013dc:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 80013de:	2b1f      	cmp	r3, #31
 80013e0:	d1e2      	bne.n	80013a8 <Hw_Uart_Q_Push+0x24>
 80013e2:	2000      	movs	r0, #0
 80013e4:	e7f5      	b.n	80013d2 <Hw_Uart_Q_Push+0x4e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80013e6:	1e5a      	subs	r2, r3, #1
 80013e8:	f062 031f 	orn	r3, r2, #31
 80013ec:	3301      	adds	r3, #1
 80013ee:	e7ec      	b.n	80013ca <Hw_Uart_Q_Push+0x46>
 80013f0:	20000404 	.word	0x20000404
 80013f4:	200003f4 	.word	0x200003f4
 80013f8:	200002fc 	.word	0x200002fc

080013fc <Hw_Uart_Q_Pop>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80013fc:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <Hw_Uart_Q_Pop+0x6c>)
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <Hw_Uart_Q_Pop+0x70>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8001400:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001402:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 8001406:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 800140a:	b22c      	sxth	r4, r5
 800140c:	231f      	movs	r3, #31
 800140e:	1b36      	subs	r6, r6, r4
 8001410:	3620      	adds	r6, #32
 8001412:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8001416:	4033      	ands	r3, r6
 8001418:	2b00      	cmp	r3, #0
 800141a:	db17      	blt.n	800144c <Hw_Uart_Q_Pop+0x50>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 800141c:	b1e3      	cbz	r3, 8001458 <Hw_Uart_Q_Pop+0x5c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 800141e:	eb00 1640 	add.w	r6, r0, r0, lsl #5
 8001422:	3501      	adds	r5, #1
 8001424:	1934      	adds	r4, r6, r4
 8001426:	4e12      	ldr	r6, [pc, #72]	; (8001470 <Hw_Uart_Q_Pop+0x74>)
 8001428:	b2ad      	uxth	r5, r5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800142a:	231f      	movs	r3, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 800142c:	5d34      	ldrb	r4, [r6, r4]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800142e:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8001432:	b22e      	sxth	r6, r5
 8001434:	4033      	ands	r3, r6
 8001436:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8001438:	700c      	strb	r4, [r1, #0]
 800143a:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800143e:	db0d      	blt.n	800145c <Hw_Uart_Q_Pop+0x60>
 8001440:	4909      	ldr	r1, [pc, #36]	; (8001468 <Hw_Uart_Q_Pop+0x6c>)
 8001442:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

    return TRUE;
 8001446:	2001      	movs	r0, #1
}
 8001448:	bc70      	pop	{r4, r5, r6}
 800144a:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800144c:	3b01      	subs	r3, #1
 800144e:	f063 031f 	orn	r3, r3, #31
 8001452:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1e2      	bne.n	800141e <Hw_Uart_Q_Pop+0x22>
 8001458:	4618      	mov	r0, r3
 800145a:	e7f5      	b.n	8001448 <Hw_Uart_Q_Pop+0x4c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800145c:	1e59      	subs	r1, r3, #1
 800145e:	f061 021f 	orn	r2, r1, #31
 8001462:	1c53      	adds	r3, r2, #1
 8001464:	e7ec      	b.n	8001440 <Hw_Uart_Q_Pop+0x44>
 8001466:	bf00      	nop
 8001468:	200003f4 	.word	0x200003f4
 800146c:	20000404 	.word	0x20000404
 8001470:	200002fc 	.word	0x200002fc

08001474 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8001474:	f240 6300 	movw	r3, #1536	; 0x600
 8001478:	f64e 5208 	movw	r2, #60680	; 0xed08
 800147c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001480:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4770      	bx	lr

08001488 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8001488:	f240 6300 	movw	r3, #1536	; 0x600
 800148c:	3010      	adds	r0, #16
 800148e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001492:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8001496:	4770      	bx	lr

08001498 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8001498:	f240 6300 	movw	r3, #1536	; 0x600
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 800149c:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 800149e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014a2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80014a6:	4770      	bx	lr

080014a8 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 80014a8:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 80014aa:	f241 711d 	movw	r1, #5917	; 0x171d
 80014ae:	f241 4399 	movw	r3, #5273	; 0x1499
 80014b2:	203c      	movs	r0, #60	; 0x3c
 80014b4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80014b8:	2200      	movs	r2, #0
 80014ba:	f6c0 0300 	movt	r3, #2048	; 0x800
 80014be:	4798      	blx	r3
 80014c0:	bd08      	pop	{r3, pc}
 80014c2:	bf00      	nop

080014c4 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 80014c4:	b538      	push	{r3, r4, r5, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 80014c6:	4d28      	ldr	r5, [pc, #160]	; (8001568 <Hw_Timer_Init+0xa4>)
 80014c8:	782b      	ldrb	r3, [r5, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d04a      	beq.n	8001564 <Hw_Timer_Init+0xa0>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80014ce:	4827      	ldr	r0, [pc, #156]	; (800156c <Hw_Timer_Init+0xa8>)
 80014d0:	2400      	movs	r4, #0
 80014d2:	7004      	strb	r4, [r0, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80014d4:	8044      	strh	r4, [r0, #2]
		Timer_Tbl[i].Timer_Init = 0;
 80014d6:	8084      	strh	r4, [r0, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 80014d8:	6084      	str	r4, [r0, #8]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80014da:	7404      	strb	r4, [r0, #16]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80014dc:	8244      	strh	r4, [r0, #18]
		Timer_Tbl[i].Timer_Init = 0;
 80014de:	8284      	strh	r4, [r0, #20]
		Timer_Tbl[i].TmrFnct    = NULL;
 80014e0:	6184      	str	r4, [r0, #24]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80014e2:	f880 4020 	strb.w	r4, [r0, #32]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80014e6:	8444      	strh	r4, [r0, #34]	; 0x22
		Timer_Tbl[i].Timer_Init = 0;
 80014e8:	8484      	strh	r4, [r0, #36]	; 0x24
		Timer_Tbl[i].TmrFnct    = NULL;
 80014ea:	6284      	str	r4, [r0, #40]	; 0x28
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80014ec:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
		Timer_Tbl[i].Timer_Ctn  = 0;
 80014f0:	8644      	strh	r4, [r0, #50]	; 0x32
		Timer_Tbl[i].Timer_Init = 0;
 80014f2:	8684      	strh	r4, [r0, #52]	; 0x34
		Timer_Tbl[i].TmrFnct    = NULL;
 80014f4:	6384      	str	r4, [r0, #56]	; 0x38
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80014f6:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
		Timer_Tbl[i].Timer_Ctn  = 0;
 80014fa:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
		Timer_Tbl[i].Timer_Init = 0;
 80014fe:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
		Timer_Tbl[i].TmrFnct    = NULL;
 8001502:	6484      	str	r4, [r0, #72]	; 0x48
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001504:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001508:	f8a0 4052 	strh.w	r4, [r0, #82]	; 0x52
		Timer_Tbl[i].Timer_Init = 0;
 800150c:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
		Timer_Tbl[i].TmrFnct    = NULL;
 8001510:	6584      	str	r4, [r0, #88]	; 0x58
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001512:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001516:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
		Timer_Tbl[i].Timer_Init = 0;
 800151a:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		Timer_Tbl[i].TmrFnct    = NULL;
 800151e:	6684      	str	r4, [r0, #104]	; 0x68
	}	                   
	
	
	Hw_Timer_SetupISR();
 8001520:	4913      	ldr	r1, [pc, #76]	; (8001570 <Hw_Timer_Init+0xac>)
 8001522:	4788      	blx	r1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8001524:	f24e 0114 	movw	r1, #57364	; 0xe014
 8001528:	f641 103f 	movw	r0, #6463	; 0x193f
	
	REG_STK_VAL  = 0;	
 800152c:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8001530:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8001534:	f2c0 0001 	movt	r0, #1
	
	REG_STK_VAL  = 0;	
 8001538:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800153c:	f24e 0310 	movw	r3, #57360	; 0xe010
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8001540:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8001542:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8001546:	6014      	str	r4, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	f041 0004 	orr.w	r0, r1, #4
 800154e:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	f042 0102 	orr.w	r1, r2, #2
 8001556:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	f040 0201 	orr.w	r2, r0, #1
 800155e:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 8001560:	2301      	movs	r3, #1
 8001562:	702b      	strb	r3, [r5, #0]
 8001564:	bd38      	pop	{r3, r4, r5, pc}
 8001566:	bf00      	nop
 8001568:	20000282 	.word	0x20000282
 800156c:	2000020c 	.word	0x2000020c
 8001570:	080014a9 	.word	0x080014a9

08001574 <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8001574:	4b66      	ldr	r3, [pc, #408]	; (8001710 <Hw_Timer_Tick+0x19c>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 8001576:	4a67      	ldr	r2, [pc, #412]	; (8001714 <Hw_Timer_Tick+0x1a0>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8001578:	6819      	ldr	r1, [r3, #0]
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 800157a:	b510      	push	{r4, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 800157c:	1c48      	adds	r0, r1, #1
 800157e:	6018      	str	r0, [r3, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8001580:	8814      	ldrh	r4, [r2, #0]
 8001582:	b2a3      	uxth	r3, r4
 8001584:	b11b      	cbz	r3, 800158e <Hw_Timer_Tick+0x1a>
 8001586:	8811      	ldrh	r1, [r2, #0]
 8001588:	1e48      	subs	r0, r1, #1
 800158a:	b284      	uxth	r4, r0
 800158c:	8014      	strh	r4, [r2, #0]
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 800158e:	4c62      	ldr	r4, [pc, #392]	; (8001718 <Hw_Timer_Tick+0x1a4>)
 8001590:	7822      	ldrb	r2, [r4, #0]
 8001592:	2a01      	cmp	r2, #1
 8001594:	d01d      	beq.n	80015d2 <Hw_Timer_Tick+0x5e>
 8001596:	7c20      	ldrb	r0, [r4, #16]
 8001598:	4a5f      	ldr	r2, [pc, #380]	; (8001718 <Hw_Timer_Tick+0x1a4>)
 800159a:	2801      	cmp	r0, #1
 800159c:	d02b      	beq.n	80015f6 <Hw_Timer_Tick+0x82>
 800159e:	f894 0020 	ldrb.w	r0, [r4, #32]
 80015a2:	4a5d      	ldr	r2, [pc, #372]	; (8001718 <Hw_Timer_Tick+0x1a4>)
 80015a4:	2801      	cmp	r0, #1
 80015a6:	d038      	beq.n	800161a <Hw_Timer_Tick+0xa6>
 80015a8:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <Hw_Timer_Tick+0x1a4>)
 80015ae:	2801      	cmp	r0, #1
 80015b0:	d046      	beq.n	8001640 <Hw_Timer_Tick+0xcc>
 80015b2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80015b6:	4a58      	ldr	r2, [pc, #352]	; (8001718 <Hw_Timer_Tick+0x1a4>)
 80015b8:	2801      	cmp	r0, #1
 80015ba:	d054      	beq.n	8001666 <Hw_Timer_Tick+0xf2>
 80015bc:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 80015c0:	4a55      	ldr	r2, [pc, #340]	; (8001718 <Hw_Timer_Tick+0x1a4>)
 80015c2:	2801      	cmp	r0, #1
 80015c4:	d066      	beq.n	8001694 <Hw_Timer_Tick+0x120>
 80015c6:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 80015ca:	4a53      	ldr	r2, [pc, #332]	; (8001718 <Hw_Timer_Tick+0x1a4>)
 80015cc:	2801      	cmp	r0, #1
 80015ce:	d078      	beq.n	80016c2 <Hw_Timer_Tick+0x14e>
 80015d0:	bd10      	pop	{r4, pc}
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80015d2:	8863      	ldrh	r3, [r4, #2]
 80015d4:	1e59      	subs	r1, r3, #1
 80015d6:	b288      	uxth	r0, r1
 80015d8:	8060      	strh	r0, [r4, #2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80015da:	2800      	cmp	r0, #0
 80015dc:	d1db      	bne.n	8001596 <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80015de:	7862      	ldrb	r2, [r4, #1]
 80015e0:	2a01      	cmp	r2, #1
 80015e2:	f000 8086 	beq.w	80016f2 <Hw_Timer_Tick+0x17e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80015e6:	88a1      	ldrh	r1, [r4, #4]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80015e8:	68a3      	ldr	r3, [r4, #8]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80015ea:	8061      	strh	r1, [r4, #2]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80015ec:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80015ee:	7c20      	ldrb	r0, [r4, #16]
 80015f0:	4a49      	ldr	r2, [pc, #292]	; (8001718 <Hw_Timer_Tick+0x1a4>)
 80015f2:	2801      	cmp	r0, #1
 80015f4:	d1d3      	bne.n	800159e <Hw_Timer_Tick+0x2a>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80015f6:	8a51      	ldrh	r1, [r2, #18]
 80015f8:	1e4b      	subs	r3, r1, #1
 80015fa:	b298      	uxth	r0, r3
 80015fc:	8250      	strh	r0, [r2, #18]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80015fe:	2800      	cmp	r0, #0
 8001600:	d1cd      	bne.n	800159e <Hw_Timer_Tick+0x2a>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001602:	7c51      	ldrb	r1, [r2, #17]
 8001604:	2901      	cmp	r1, #1
 8001606:	d072      	beq.n	80016ee <Hw_Timer_Tick+0x17a>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001608:	8aa2      	ldrh	r2, [r4, #20]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800160a:	69a3      	ldr	r3, [r4, #24]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800160c:	8262      	strh	r2, [r4, #18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800160e:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001610:	f894 0020 	ldrb.w	r0, [r4, #32]
 8001614:	4a40      	ldr	r2, [pc, #256]	; (8001718 <Hw_Timer_Tick+0x1a4>)
 8001616:	2801      	cmp	r0, #1
 8001618:	d1c6      	bne.n	80015a8 <Hw_Timer_Tick+0x34>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800161a:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 800161c:	1e4b      	subs	r3, r1, #1
 800161e:	b298      	uxth	r0, r3
 8001620:	8450      	strh	r0, [r2, #34]	; 0x22

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001622:	2800      	cmp	r0, #0
 8001624:	d1c0      	bne.n	80015a8 <Hw_Timer_Tick+0x34>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001626:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 800162a:	2901      	cmp	r1, #1
 800162c:	d06c      	beq.n	8001708 <Hw_Timer_Tick+0x194>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800162e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001632:	8462      	strh	r2, [r4, #34]	; 0x22

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001634:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001636:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 800163a:	4a37      	ldr	r2, [pc, #220]	; (8001718 <Hw_Timer_Tick+0x1a4>)
 800163c:	2801      	cmp	r0, #1
 800163e:	d1b8      	bne.n	80015b2 <Hw_Timer_Tick+0x3e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001640:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 8001642:	1e4b      	subs	r3, r1, #1
 8001644:	b298      	uxth	r0, r3
 8001646:	8650      	strh	r0, [r2, #50]	; 0x32

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001648:	2800      	cmp	r0, #0
 800164a:	d1b2      	bne.n	80015b2 <Hw_Timer_Tick+0x3e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800164c:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8001650:	2901      	cmp	r1, #1
 8001652:	d056      	beq.n	8001702 <Hw_Timer_Tick+0x18e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001654:	8ea2      	ldrh	r2, [r4, #52]	; 0x34

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001656:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001658:	8662      	strh	r2, [r4, #50]	; 0x32

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800165a:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 800165c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8001660:	4a2d      	ldr	r2, [pc, #180]	; (8001718 <Hw_Timer_Tick+0x1a4>)
 8001662:	2801      	cmp	r0, #1
 8001664:	d1aa      	bne.n	80015bc <Hw_Timer_Tick+0x48>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001666:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
 800166a:	1e4b      	subs	r3, r1, #1
 800166c:	b298      	uxth	r0, r3
 800166e:	f8a2 0042 	strh.w	r0, [r2, #66]	; 0x42

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001672:	2800      	cmp	r0, #0
 8001674:	d1a2      	bne.n	80015bc <Hw_Timer_Tick+0x48>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001676:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
 800167a:	2901      	cmp	r1, #1
 800167c:	d03e      	beq.n	80016fc <Hw_Timer_Tick+0x188>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800167e:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001682:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001684:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001688:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 800168a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 800168e:	4a22      	ldr	r2, [pc, #136]	; (8001718 <Hw_Timer_Tick+0x1a4>)
 8001690:	2801      	cmp	r0, #1
 8001692:	d198      	bne.n	80015c6 <Hw_Timer_Tick+0x52>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001694:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
 8001698:	1e4b      	subs	r3, r1, #1
 800169a:	b298      	uxth	r0, r3
 800169c:	f8a2 0052 	strh.w	r0, [r2, #82]	; 0x52

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d190      	bne.n	80015c6 <Hw_Timer_Tick+0x52>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80016a4:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
 80016a8:	2901      	cmp	r1, #1
 80016aa:	d024      	beq.n	80016f6 <Hw_Timer_Tick+0x182>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80016ac:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80016b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80016b2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80016b6:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80016b8:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 80016bc:	4a16      	ldr	r2, [pc, #88]	; (8001718 <Hw_Timer_Tick+0x1a4>)
 80016be:	2801      	cmp	r0, #1
 80016c0:	d186      	bne.n	80015d0 <Hw_Timer_Tick+0x5c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80016c2:	f8b2 1062 	ldrh.w	r1, [r2, #98]	; 0x62
 80016c6:	1e4b      	subs	r3, r1, #1
 80016c8:	b298      	uxth	r0, r3
 80016ca:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80016ce:	2800      	cmp	r0, #0
 80016d0:	f47f af7e 	bne.w	80015d0 <Hw_Timer_Tick+0x5c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80016d4:	f892 1061 	ldrb.w	r1, [r2, #97]	; 0x61

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80016d8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80016da:	2901      	cmp	r1, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 80016dc:	bf08      	it	eq
 80016de:	f882 0060 	strbeq.w	r0, [r2, #96]	; 0x60

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80016e2:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80016e6:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80016ea:	4798      	blx	r3
 80016ec:	bd10      	pop	{r4, pc}

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 80016ee:	7410      	strb	r0, [r2, #16]
 80016f0:	e78a      	b.n	8001608 <Hw_Timer_Tick+0x94>
 80016f2:	7020      	strb	r0, [r4, #0]
 80016f4:	e777      	b.n	80015e6 <Hw_Timer_Tick+0x72>
 80016f6:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 80016fa:	e7d7      	b.n	80016ac <Hw_Timer_Tick+0x138>
 80016fc:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
 8001700:	e7bd      	b.n	800167e <Hw_Timer_Tick+0x10a>
 8001702:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
 8001706:	e7a5      	b.n	8001654 <Hw_Timer_Tick+0xe0>
 8001708:	f882 0020 	strb.w	r0, [r2, #32]
 800170c:	e78f      	b.n	800162e <Hw_Timer_Tick+0xba>
 800170e:	bf00      	nop
 8001710:	2000027c 	.word	0x2000027c
 8001714:	20000280 	.word	0x20000280
 8001718:	2000020c 	.word	0x2000020c

0800171c <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 800171c:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 800171e:	f241 5375 	movw	r3, #5493	; 0x1575
 8001722:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001726:	4798      	blx	r3
 8001728:	bd08      	pop	{r3, pc}
 800172a:	bf00      	nop

0800172c <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 800172c:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 800172e:	f240 240c 	movw	r4, #524	; 0x20c
 8001732:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001736:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 800173a:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 800173c:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 800173e:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8001740:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 8001742:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 8001744:	8081      	strh	r1, [r0, #4]
}
 8001746:	bc10      	pop	{r4}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop

0800174c <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 800174c:	2806      	cmp	r0, #6
 800174e:	d803      	bhi.n	8001758 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8001750:	4b02      	ldr	r3, [pc, #8]	; (800175c <Hw_Timer_Start+0x10>)
 8001752:	0100      	lsls	r0, r0, #4
 8001754:	2201      	movs	r2, #1
 8001756:	541a      	strb	r2, [r3, r0]
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000020c 	.word	0x2000020c

08001760 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8001760:	4a03      	ldr	r2, [pc, #12]	; (8001770 <Hw_Timer_Delay_ms+0x10>)
 8001762:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 8001764:	8813      	ldrh	r3, [r2, #0]
 8001766:	b298      	uxth	r0, r3
 8001768:	2800      	cmp	r0, #0
 800176a:	d1fb      	bne.n	8001764 <Hw_Timer_Delay_ms+0x4>
}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000280 	.word	0x20000280

08001774 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8001774:	b508      	push	{r3, lr}
	Set_System();
 8001776:	f243 03d9 	movw	r3, #12505	; 0x30d9
 800177a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800177e:	4798      	blx	r3
	Set_USBClock();
 8001780:	f243 00f9 	movw	r0, #12537	; 0x30f9
 8001784:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001788:	4780      	blx	r0
	USB_Interrupts_Config();
 800178a:	f243 113d 	movw	r1, #12605	; 0x313d
 800178e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001792:	4788      	blx	r1
	USB_Init();	
 8001794:	f643 5225 	movw	r2, #15653	; 0x3d25
 8001798:	f6c0 0200 	movt	r2, #2048	; 0x800
 800179c:	4790      	blx	r2
 800179e:	bd08      	pop	{r3, pc}

080017a0 <Hw_I2C_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_Init( void )
{
 80017a0:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	#if HW_I2C_USE_SW_I2C == 1
	Hw_I2C_SW_Init();	
	#else
	Hw_I2C_HW_Init();		
 80017a2:	f241 73f9 	movw	r3, #6137	; 0x17f9
 80017a6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80017aa:	4798      	blx	r3
 80017ac:	bd08      	pop	{r3, pc}
 80017ae:	bf00      	nop

080017b0 <Hw_I2C_HW_IO_Setup>:
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 80017b0:	2204      	movs	r2, #4
 80017b2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80017b6:	6811      	ldr	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 80017b8:	f640 4304 	movw	r3, #3076	; 0xc04
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 80017bc:	f041 0002 	orr.w	r0, r1, #2
 80017c0:	6010      	str	r0, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 80017c2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	f022 010f 	bic.w	r1, r2, #15
 80017cc:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	f040 0203 	orr.w	r2, r0, #3
 80017d4:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	f041 000c 	orr.w	r0, r1, #12
 80017dc:	6018      	str	r0, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 80017e4:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	f040 0230 	orr.w	r2, r0, #48	; 0x30
 80017ec:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 80017ee:	6819      	ldr	r1, [r3, #0]
 80017f0:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 80017f4:	6018      	str	r0, [r3, #0]
 80017f6:	4770      	bx	lr

080017f8 <Hw_I2C_HW_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_HW_Init( void )
{
 80017f8:	b538      	push	{r3, r4, r5, lr}
	u32 SR;


	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	
 80017fa:	f241 73b1 	movw	r3, #6065	; 0x17b1
 80017fe:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001802:	4798      	blx	r3


	REG_I2C1_CR1 = 0;
 8001804:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001808:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800180c:	2500      	movs	r5, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 800180e:	f245 4404 	movw	r4, #21508	; 0x5404
	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	


	REG_I2C1_CR1 = 0;
 8001812:	601d      	str	r5, [r3, #0]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8001814:	f2c4 0400 	movt	r4, #16384	; 0x4000
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8001818:	f245 401c 	movw	r0, #21532	; 0x541c

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 800181c:	2524      	movs	r5, #36	; 0x24
 800181e:	6025      	str	r5, [r4, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8001820:	f2c4 0000 	movt	r0, #16384	; 0x4000
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8001824:	f245 4120 	movw	r1, #21536	; 0x5420
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8001828:	f248 041e 	movw	r4, #32798	; 0x801e
 800182c:	6004      	str	r4, [r0, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 800182e:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8001832:	2004      	movs	r0, #4


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8001834:	f241 021c 	movw	r2, #4124	; 0x101c
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8001838:	6008      	str	r0, [r1, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 800183a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800183e:	6810      	ldr	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8001840:	f245 4114 	movw	r1, #21524	; 0x5414
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8001844:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8001848:	6010      	str	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 800184a:	6818      	ldr	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 800184c:	f245 4218 	movw	r2, #21528	; 0x5418
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8001850:	f020 0002 	bic.w	r0, r0, #2
 8001854:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8001856:	6818      	ldr	r0, [r3, #0]

	SR = REG_I2C1_SR1;
 8001858:	f2c4 0100 	movt	r1, #16384	; 0x4000
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 800185c:	f040 0001 	orr.w	r0, r0, #1
 8001860:	6018      	str	r0, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8001862:	f2c4 0200 	movt	r2, #16384	; 0x4000


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8001866:	680b      	ldr	r3, [r1, #0]
	SR = REG_I2C1_SR2;
 8001868:	6813      	ldr	r3, [r2, #0]
 800186a:	bd38      	pop	{r3, r4, r5, pc}

0800186c <Hw_Si47xx_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
 800186c:	b538      	push	{r3, r4, r5, lr}
	Hw_Wait(100);
 800186e:	f241 0575 	movw	r5, #4213	; 0x1075
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8001872:	f640 440c 	movw	r4, #3084	; 0xc0c
 8001876:	f2c4 0401 	movt	r4, #16385	; 0x4001
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
 800187a:	f6c0 0500 	movt	r5, #2048	; 0x800
 800187e:	2064      	movs	r0, #100	; 0x64
 8001880:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8001882:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(100);
 8001884:	2064      	movs	r0, #100	; 0x64
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8001886:	f043 0120 	orr.w	r1, r3, #32
 800188a:	6021      	str	r1, [r4, #0]
	Hw_Wait(100);
 800188c:	47a8      	blx	r5
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 800188e:	6822      	ldr	r2, [r4, #0]
	Hw_Wait(500);	
 8001890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8001894:	f022 0320 	bic.w	r3, r2, #32
 8001898:	6023      	str	r3, [r4, #0]
	Hw_Wait(500);	
 800189a:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 800189c:	6821      	ldr	r1, [r4, #0]
	Hw_Wait(100);
 800189e:	2064      	movs	r0, #100	; 0x64
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
	Hw_Wait(500);	
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 80018a0:	f041 0220 	orr.w	r2, r1, #32
 80018a4:	6022      	str	r2, [r4, #0]
	Hw_Wait(100);
 80018a6:	47a8      	blx	r5
 80018a8:	bd38      	pop	{r3, r4, r5, pc}
 80018aa:	bf00      	nop

080018ac <Hw_Si47xx_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Init( void )
{
 80018ac:	b508      	push	{r3, lr}
	Hw_I2C_Init();
 80018ae:	f241 73a1 	movw	r3, #6049	; 0x17a1
 80018b2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80018b6:	4798      	blx	r3

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 80018b8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80018bc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80018c0:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 80018c2:	f641 026d 	movw	r2, #6253	; 0x186d

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 80018c6:	f421 0370 	bic.w	r3, r1, #15728640	; 0xf00000
 80018ca:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 80018cc:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 80018ce:	f6c0 0200 	movt	r2, #2048	; 0x800
	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 80018d2:	f441 1340 	orr.w	r3, r1, #3145728	; 0x300000
 80018d6:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 80018d8:	6801      	ldr	r1, [r0, #0]
 80018da:	6001      	str	r1, [r0, #0]
	

	Hw_Si47xx_Reset();
 80018dc:	4790      	blx	r2
 80018de:	bd08      	pop	{r3, pc}

080018e0 <Hw_SPI_Ch2_Init>:

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 80018e0:	f640 4304 	movw	r3, #3076	; 0xc04
 80018e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80018e8:	6819      	ldr	r1, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 80018ea:	f44f 5260 	mov.w	r2, #14336	; 0x3800

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 80018ee:	f421 2070 	bic.w	r0, r1, #983040	; 0xf0000
 80018f2:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 80018f4:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 80018f6:	f643 0104 	movw	r1, #14340	; 0x3804
	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 80018fa:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 80018fe:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 8001900:	6818      	ldr	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001902:	f2c4 0200 	movt	r2, #16384	; 0x4000
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 8001906:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800190a:	6018      	str	r0, [r3, #0]
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 800190c:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 800190e:	f2c4 0100 	movt	r1, #16384	; 0x4000
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8001912:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 8001916:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (20));	// MODE   - Output mode, max speed 50Mhz
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800191e:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (22));	// CNF    - Alternate function output Push-pull
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001926:	6018      	str	r0, [r3, #0]

	// PB15 - SPI2_MOSI
	REG_GPIOB_CRH &= ~(0x0F << (28));	// Clear
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800192e:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (28));	// MODE   - Output mode, max speed 50Mhz
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
 8001936:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (30));	// CNF    - Alternate function output Push-pull
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800193e:	6018      	str	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001940:	f244 031c 	movw	r3, #16412	; 0x401c
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8001944:	2004      	movs	r0, #4



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001946:	6013      	str	r3, [r2, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8001948:	6008      	str	r0, [r1, #0]
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR1, 6 );
 800194a:	6811      	ldr	r1, [r2, #0]
 800194c:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4770      	bx	lr

08001954 <Hw_SPI_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Init(void)
{
 8001954:	b510      	push	{r4, lr}
	static u8 Called = 0;


	if( Called == 1 ) return;
 8001956:	4c08      	ldr	r4, [pc, #32]	; (8001978 <Hw_SPI_Init+0x24>)
 8001958:	7823      	ldrb	r3, [r4, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d00b      	beq.n	8001976 <Hw_SPI_Init+0x22>


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 800195e:	f241 001c 	movw	r0, #4124	; 0x101c
 8001962:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001966:	6802      	ldr	r2, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <Hw_SPI_Init+0x28>)
	if( Called == 1 ) return;


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 800196a:	f442 4180 	orr.w	r1, r2, #16384	; 0x4000
 800196e:	6001      	str	r1, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 8001970:	4798      	blx	r3

	Called = 1;	
 8001972:	2001      	movs	r0, #1
 8001974:	7020      	strb	r0, [r4, #0]
 8001976:	bd10      	pop	{r4, pc}
 8001978:	20000283 	.word	0x20000283
 800197c:	080018e1 	.word	0x080018e1

08001980 <Hw_SPI_StartDMA>:
              
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_StartDMA( u8 Ch )
{
	switch( Ch )
 8001980:	2801      	cmp	r0, #1
 8001982:	d10b      	bne.n	800199c <Hw_SPI_StartDMA+0x1c>
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR2, 1 );	// TX DMA Enable
 8001984:	f643 0304 	movw	r3, #14340	; 0x3804
 8001988:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	f042 0002 	orr.w	r0, r2, #2
 8001992:	6018      	str	r0, [r3, #0]
			SET_BIT( REG_SPI2_CR2, 0 );	// RX DMA Enable
 8001994:	6819      	ldr	r1, [r3, #0]
 8001996:	f041 0201 	orr.w	r2, r1, #1
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <Hw_SPI_Write8Bit>:
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 80019a0:	2801      	cmp	r0, #1
 80019a2:	d001      	beq.n	80019a8 <Hw_SPI_Write8Bit+0x8>
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 80019a4:	2000      	movs	r0, #0
}
 80019a6:	4770      	bx	lr
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 80019a8:	f643 0208 	movw	r2, #14344	; 0x3808
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 80019ac:	f242 730f 	movw	r3, #9999	; 0x270f
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 80019b0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80019b4:	e006      	b.n	80019c4 <Hw_SPI_Write8Bit+0x24>
 80019b6:	6810      	ldr	r0, [r2, #0]
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 80019b8:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 80019ba:	0780      	lsls	r0, r0, #30
 80019bc:	d405      	bmi.n	80019ca <Hw_SPI_Write8Bit+0x2a>
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 80019be:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80019c2:	d305      	bcc.n	80019d0 <Hw_SPI_Write8Bit+0x30>
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 80019c4:	6810      	ldr	r0, [r2, #0]
 80019c6:	0780      	lsls	r0, r0, #30
 80019c8:	d5f5      	bpl.n	80019b6 <Hw_SPI_Write8Bit+0x16>
			}
			if( TimeOut == 0 ) return 1;
 80019ca:	b90b      	cbnz	r3, 80019d0 <Hw_SPI_Write8Bit+0x30>
 80019cc:	2001      	movs	r0, #1
 80019ce:	4770      	bx	lr
			REG_SPI2_DR = WriteData;
 80019d0:	f643 000c 	movw	r0, #14348	; 0x380c
 80019d4:	f2c4 0000 	movt	r0, #16384	; 0x4000

			
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 80019d8:	f643 0208 	movw	r2, #14344	; 0x3808
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
			}
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;
 80019dc:	6001      	str	r1, [r0, #0]

			
			TimeOut = 10000;	
			while( TimeOut-- )
 80019de:	f242 730f 	movw	r3, #9999	; 0x270f
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 80019e2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80019e6:	e006      	b.n	80019f6 <Hw_SPI_Write8Bit+0x56>
 80019e8:	6810      	ldr	r0, [r2, #0]
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 80019ea:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 80019ec:	07c1      	lsls	r1, r0, #31
 80019ee:	d405      	bmi.n	80019fc <Hw_SPI_Write8Bit+0x5c>
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 80019f0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80019f4:	d304      	bcc.n	8001a00 <Hw_SPI_Write8Bit+0x60>
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 80019f6:	6811      	ldr	r1, [r2, #0]
 80019f8:	07c8      	lsls	r0, r1, #31
 80019fa:	d5f5      	bpl.n	80019e8 <Hw_SPI_Write8Bit+0x48>
			}
			if( TimeOut == 0 ) return 1;
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0e5      	beq.n	80019cc <Hw_SPI_Write8Bit+0x2c>
		
			ReadData = REG_SPI2_DR;
 8001a00:	f643 020c 	movw	r2, #14348	; 0x380c
 8001a04:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001a08:	6813      	ldr	r3, [r2, #0]
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8001a0a:	2000      	movs	r0, #0
			}
			if( TimeOut == 0 ) return 1;
		
			ReadData = REG_SPI2_DR;
			
			break;
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop

08001a10 <Hw_N5100G_FrameTick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5100G_FrameTick( void )
{
 8001a10:	b508      	push	{r3, lr}
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <Hw_N5100G_FrameTick+0x38>)
 8001a14:	4798      	blx	r3
 8001a16:	2801      	cmp	r0, #1
 8001a18:	d00d      	beq.n	8001a36 <Hw_N5100G_FrameTick+0x26>
 8001a1a:	480c      	ldr	r0, [pc, #48]	; (8001a4c <Hw_N5100G_FrameTick+0x3c>)
 8001a1c:	6803      	ldr	r3, [r0, #0]
		{
			Hw_N5110G_Frame_DrawReq--;
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 8001a1e:	b903      	cbnz	r3, 8001a22 <Hw_N5100G_FrameTick+0x12>
 8001a20:	bd08      	pop	{r3, pc}
	{
		Hw_DMA_SPI2_Setup( (u32)Hw_N5110G_TxFrameBuf, (u32)Hw_N5110G_RxFrameBuf, HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT );				
 8001a22:	480b      	ldr	r0, [pc, #44]	; (8001a50 <Hw_N5100G_FrameTick+0x40>)
 8001a24:	490b      	ldr	r1, [pc, #44]	; (8001a54 <Hw_N5100G_FrameTick+0x44>)
 8001a26:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <Hw_N5100G_FrameTick+0x48>)
 8001a2c:	4798      	blx	r3
		Hw_SPI_StartDMA( HW_SPI_CH2 );			
 8001a2e:	2001      	movs	r0, #1
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <Hw_N5100G_FrameTick+0x4c>)
 8001a32:	4790      	blx	r2
 8001a34:	bd08      	pop	{r3, pc}
{
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
	{
		if( Hw_N5110G_Frame_DrawReq > 0 )
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <Hw_N5100G_FrameTick+0x3c>)
 8001a38:	6811      	ldr	r1, [r2, #0]
 8001a3a:	2900      	cmp	r1, #0
 8001a3c:	d0f0      	beq.n	8001a20 <Hw_N5100G_FrameTick+0x10>
		{
			Hw_N5110G_Frame_DrawReq--;
 8001a3e:	1e4b      	subs	r3, r1, #1
 8001a40:	6013      	str	r3, [r2, #0]
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0ec      	beq.n	8001a20 <Hw_N5100G_FrameTick+0x10>
 8001a46:	e7ec      	b.n	8001a22 <Hw_N5100G_FrameTick+0x12>
 8001a48:	080020e5 	.word	0x080020e5
 8001a4c:	2000098c 	.word	0x2000098c
 8001a50:	20000790 	.word	0x20000790
 8001a54:	20000990 	.word	0x20000990
 8001a58:	0800206d 	.word	0x0800206d
 8001a5c:	08001981 	.word	0x08001981

08001a60 <Hw_N5110G_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
 8001a60:	b510      	push	{r4, lr}
	HW_N5110G_RESET_ON();
 8001a62:	f640 440c 	movw	r4, #3084	; 0xc0c
 8001a66:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001a6a:	6822      	ldr	r2, [r4, #0]
	Hw_Timer_Delay_ms(10);
 8001a6c:	f241 7361 	movw	r3, #5985	; 0x1761
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
	HW_N5110G_RESET_ON();
 8001a70:	f422 6080 	bic.w	r0, r2, #1024	; 0x400
 8001a74:	6020      	str	r0, [r4, #0]
	Hw_Timer_Delay_ms(10);
 8001a76:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a7a:	200a      	movs	r0, #10
 8001a7c:	4798      	blx	r3
	HW_N5110G_RESET_OFF();
 8001a7e:	6821      	ldr	r1, [r4, #0]
 8001a80:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 8001a84:	6022      	str	r2, [r4, #0]
 8001a86:	bd10      	pop	{r4, pc}

08001a88 <Hw_N5110G_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 8001a88:	b510      	push	{r4, lr}
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8001a8a:	f640 440c 	movw	r4, #3084	; 0xc0c
 8001a8e:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001a92:	6823      	ldr	r3, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 8001a94:	4601      	mov	r1, r0
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8001a96:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 8001a9a:	f641 13a1 	movw	r3, #6561	; 0x19a1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8001a9e:	6022      	str	r2, [r4, #0]
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001aa6:	4798      	blx	r3
	HW_N5110G_SEL_DATA();
 8001aa8:	6821      	ldr	r1, [r4, #0]
 8001aaa:	f441 6200 	orr.w	r2, r1, #2048	; 0x800
 8001aae:	6022      	str	r2, [r4, #0]
	
	return Ret;
}
 8001ab0:	bd10      	pop	{r4, pc}
 8001ab2:	bf00      	nop

08001ab4 <Hw_N5110G_Goto>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 8001ab4:	b570      	push	{r4, r5, r6, lr}
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 8001ab6:	f641 2489 	movw	r4, #6793	; 0x1a89
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 8001aba:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 8001abc:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001ac0:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 8001ac4:	47a0      	blx	r4
 8001ac6:	4606      	mov	r6, r0
	Ret |= Hw_N5110G_WriteCmd( 0x80|x );
 8001ac8:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 8001acc:	47a0      	blx	r4
 8001ace:	4330      	orrs	r0, r6

	return Ret;
}
 8001ad0:	b280      	uxth	r0, r0
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}

08001ad4 <Hw_N5110G_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8001ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <Hw_N5110G_Init+0xbc>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8001ad8:	b083      	sub	sp, #12
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 8001ada:	4798      	blx	r3
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8001adc:	f640 4004 	movw	r0, #3076	; 0xc04
 8001ae0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001ae4:	6802      	ldr	r2, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 8001ae6:	f640 440c 	movw	r4, #3084	; 0xc0c
	
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8001aea:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 8001aee:	6001      	str	r1, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 8001af0:	6805      	ldr	r5, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 8001af2:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 8001af6:	f445 7640 	orr.w	r6, r5, #768	; 0x300
 8001afa:	6006      	str	r6, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8001afc:	6807      	ldr	r7, [r0, #0]
	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
	
	Hw_N5110G_Reset();
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8001afe:	4d25      	ldr	r5, [pc, #148]	; (8001b94 <Hw_N5110G_Init+0xc0>)
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8001b00:	6007      	str	r7, [r0, #0]

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8001b02:	6803      	ldr	r3, [r0, #0]
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8001b04:	2600      	movs	r6, #0
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8001b06:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8001b0a:	6002      	str	r2, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
 8001b0c:	6801      	ldr	r1, [r0, #0]
 8001b0e:	f441 5740 	orr.w	r7, r1, #12288	; 0x3000
 8001b12:	6007      	str	r7, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 8001b14:	6803      	ldr	r3, [r0, #0]
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
 8001b16:	4f20      	ldr	r7, [pc, #128]	; (8001b98 <Hw_N5110G_Init+0xc4>)

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 8001b18:	6003      	str	r3, [r0, #0]


	HW_N5110G_RESET_OFF();
 8001b1a:	6820      	ldr	r0, [r4, #0]
 8001b1c:	f440 6280 	orr.w	r2, r0, #1024	; 0x400
 8001b20:	6022      	str	r2, [r4, #0]
	HW_N5110G_SEL_CMD();
 8001b22:	6821      	ldr	r1, [r4, #0]
	
	Hw_N5110G_Reset();
 8001b24:	481d      	ldr	r0, [pc, #116]	; (8001b9c <Hw_N5110G_Init+0xc8>)
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
 8001b26:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 8001b2a:	6023      	str	r3, [r4, #0]
	
	Hw_N5110G_Reset();
 8001b2c:	4780      	blx	r0
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8001b2e:	2021      	movs	r0, #33	; 0x21
 8001b30:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0xC6);	// Write Vop
 8001b32:	20c6      	movs	r0, #198	; 0xc6
 8001b34:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x06);	// Set Temperature Coefficient
 8001b36:	2006      	movs	r0, #6
 8001b38:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x13);	// Set Bias System
 8001b3a:	2013      	movs	r0, #19
 8001b3c:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x20);	// H = 0
 8001b3e:	2020      	movs	r0, #32
 8001b40:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
 8001b42:	200c      	movs	r0, #12
 8001b44:	47a8      	blx	r5
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
 8001b46:	4631      	mov	r1, r6
 8001b48:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <Hw_N5110G_Init+0xcc>)
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	4790      	blx	r2
	
	
	HW_N5110G_SEL_DATA();
 8001b4e:	6821      	ldr	r1, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8001b50:	2003      	movs	r0, #3
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
 8001b52:	f441 6300 	orr.w	r3, r1, #2048	; 0x800
 8001b56:	6023      	str	r3, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
 8001b58:	4c12      	ldr	r4, [pc, #72]	; (8001ba4 <Hw_N5110G_Init+0xd0>)
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8001b5a:	2121      	movs	r1, #33	; 0x21
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <Hw_N5110G_Init+0xd4>)
 8001b5e:	9600      	str	r6, [sp, #0]
 8001b60:	2202      	movs	r2, #2
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8001b62:	8026      	strh	r6, [r4, #0]
	Hw_N5110G_Frame_DrawReq	= 0;						
 8001b64:	603e      	str	r6, [r7, #0]
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8001b66:	4c11      	ldr	r4, [pc, #68]	; (8001bac <Hw_N5110G_Init+0xd8>)
 8001b68:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <Hw_N5110G_Init+0xdc>)
 8001b6e:	4790      	blx	r2
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <Hw_N5110G_Init+0xe0>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001b72:	4631      	mov	r1, r6
     TITLE   : Hw_5110G_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
 8001b74:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8001b78:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001b7a:	7059      	strb	r1, [r3, #1]
 8001b7c:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8001b7e:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001b80:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8001b82:	d1f9      	bne.n	8001b78 <Hw_N5110G_Init+0xa4>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001b84:	6839      	ldr	r1, [r7, #0]
 8001b86:	1c88      	adds	r0, r1, #2
 8001b88:	6038      	str	r0, [r7, #0]
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
	
	
	Hw_N5110G_Clear();	
	Hw_N5110G_DrawRequest();
}
 8001b8a:	b003      	add	sp, #12
 8001b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	08001955 	.word	0x08001955
 8001b94:	08001a89 	.word	0x08001a89
 8001b98:	2000098c 	.word	0x2000098c
 8001b9c:	08001a61 	.word	0x08001a61
 8001ba0:	08001ab5 	.word	0x08001ab5
 8001ba4:	20000988 	.word	0x20000988
 8001ba8:	08001a11 	.word	0x08001a11
 8001bac:	0800172d 	.word	0x0800172d
 8001bb0:	0800174d 	.word	0x0800174d
 8001bb4:	2000078f 	.word	0x2000078f

08001bb8 <Hw_N5110G_Clear>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
{
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <Hw_N5110G_Clear+0x20>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001bba:	2100      	movs	r1, #0
     TITLE   : Hw_N5110G_Clear
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
 8001bbc:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8001bc0:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001bc2:	7059      	strb	r1, [r3, #1]
 8001bc4:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8001bc6:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001bc8:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8001bca:	d1f9      	bne.n	8001bc0 <Hw_N5110G_Clear+0x8>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001bcc:	4903      	ldr	r1, [pc, #12]	; (8001bdc <Hw_N5110G_Clear+0x24>)
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 8001bce:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001bd0:	680a      	ldr	r2, [r1, #0]
 8001bd2:	1c53      	adds	r3, r2, #1
 8001bd4:	600b      	str	r3, [r1, #0]
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 8001bd6:	4770      	bx	lr
 8001bd8:	2000078f 	.word	0x2000078f
 8001bdc:	2000098c 	.word	0x2000098c

08001be0 <Hw_N5110G_DrawRequest>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001be0:	f640 138c 	movw	r3, #2444	; 0x98c
 8001be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	1c50      	adds	r0, r2, #1
 8001bec:	6018      	str	r0, [r3, #0]
 8001bee:	4770      	bx	lr

08001bf0 <Hw_N5110G_DrawClearRect>:
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawClearRect( u16 s_x, u16 s_y, u16 e_x, u16 e_y )
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
 8001bf0:	4290      	cmp	r0, r2
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawClearRect( u16 s_x, u16 s_y, u16 e_x, u16 e_y )
{
 8001bf2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
 8001bf6:	d84f      	bhi.n	8001c98 <Hw_N5110G_DrawClearRect+0xa8>
 8001bf8:	4d29      	ldr	r5, [pc, #164]	; (8001ca0 <Hw_N5110G_DrawClearRect+0xb0>)
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001bfa:	f04f 0854 	mov.w	r8, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001bfe:	f04f 0c01 	mov.w	ip, #1
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8001c02:	4299      	cmp	r1, r3
 8001c04:	d844      	bhi.n	8001c90 <Hw_N5110G_DrawClearRect+0xa0>
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001c06:	f001 0907 	and.w	r9, r1, #7
 8001c0a:	fa0c f909 	lsl.w	r9, ip, r9
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001c0e:	08ce      	lsrs	r6, r1, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001c10:	fb08 0606 	mla	r6, r8, r6, r0
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8001c14:	1c4c      	adds	r4, r1, #1
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001c16:	f815 a006 	ldrb.w	sl, [r5, r6]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8001c1a:	b2a4      	uxth	r4, r4
 8001c1c:	1a5f      	subs	r7, r3, r1
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001c1e:	ea2a 0909 	bic.w	r9, sl, r9
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8001c22:	42a3      	cmp	r3, r4
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001c24:	f805 9006 	strb.w	r9, [r5, r6]
 8001c28:	f007 0701 	and.w	r7, r7, #1
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8001c2c:	d330      	bcc.n	8001c90 <Hw_N5110G_DrawClearRect+0xa0>
 8001c2e:	b17f      	cbz	r7, 8001c50 <Hw_N5110G_DrawClearRect+0x60>
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001c30:	f004 0607 	and.w	r6, r4, #7
 8001c34:	fa0c f706 	lsl.w	r7, ip, r6
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001c38:	08e6      	lsrs	r6, r4, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001c3a:	fb08 0606 	mla	r6, r8, r6, r0
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8001c3e:	3401      	adds	r4, #1
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001c40:	f815 9006 	ldrb.w	r9, [r5, r6]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8001c44:	b2a4      	uxth	r4, r4
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001c46:	ea29 0707 	bic.w	r7, r9, r7
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8001c4a:	42a3      	cmp	r3, r4
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001c4c:	55af      	strb	r7, [r5, r6]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8001c4e:	d31f      	bcc.n	8001c90 <Hw_N5110G_DrawClearRect+0xa0>
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001c50:	f004 0a07 	and.w	sl, r4, #7
 8001c54:	fa0c fa0a 	lsl.w	sl, ip, sl
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8001c58:	1c67      	adds	r7, r4, #1
 8001c5a:	b2be      	uxth	r6, r7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001c5c:	f006 0b07 	and.w	fp, r6, #7
 8001c60:	fa0c f90b 	lsl.w	r9, ip, fp
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001c64:	08e4      	lsrs	r4, r4, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001c66:	fb08 0404 	mla	r4, r8, r4, r0
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001c6a:	08f7      	lsrs	r7, r6, #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001c6c:	f815 b004 	ldrb.w	fp, [r5, r4]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001c70:	fb08 0707 	mla	r7, r8, r7, r0
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001c74:	ea2b 0a0a 	bic.w	sl, fp, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001c78:	f805 a004 	strb.w	sl, [r5, r4]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001c7c:	f815 a007 	ldrb.w	sl, [r5, r7]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8001c80:	1c74      	adds	r4, r6, #1
 8001c82:	b2a4      	uxth	r4, r4
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001c84:	ea2a 0909 	bic.w	r9, sl, r9
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8001c88:	42a3      	cmp	r3, r4
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001c8a:	f805 9007 	strb.w	r9, [r5, r7]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8001c8e:	d2df      	bcs.n	8001c50 <Hw_N5110G_DrawClearRect+0x60>
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawClearRect( u16 s_x, u16 s_y, u16 e_x, u16 e_y )
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
 8001c90:	3001      	adds	r0, #1
 8001c92:	b280      	uxth	r0, r0
 8001c94:	4282      	cmp	r2, r0
 8001c96:	d2b4      	bcs.n	8001c02 <Hw_N5110G_DrawClearRect+0x12>
		for( j=s_y; j<=e_y; j++ )
		{
			Hw_N5110G_ClrPixel( i, j );
		}
	}
}
 8001c98:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000790 	.word	0x20000790

08001ca4 <Hw_N5110G_DrawCircle>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8001ca4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001ca8:	b088      	sub	sp, #32
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8001caa:	0054      	lsls	r4, r2, #1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8001cac:	9005      	str	r0, [sp, #20]
 8001cae:	9106      	str	r1, [sp, #24]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8001cb0:	f1c4 0003 	rsb	r0, r4, #3
 8001cb4:	9d05      	ldr	r5, [sp, #20]
 8001cb6:	9c06      	ldr	r4, [sp, #24]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8001cb8:	9304      	str	r3, [sp, #16]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8001cba:	b283      	uxth	r3, r0
 8001cbc:	9303      	str	r3, [sp, #12]
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];
 8001cbe:	49a0      	ldr	r1, [pc, #640]	; (8001f40 <Hw_N5110G_DrawCircle+0x29c>)
{
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	9501      	str	r5, [sp, #4]
 8001cc4:	9502      	str	r5, [sp, #8]
	CurX = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e0a5      	b.n	8001e16 <Hw_N5110G_DrawCircle+0x172>
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8001cca:	f8dd b018 	ldr.w	fp, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001cce:	f04f 0901 	mov.w	r9, #1
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
 8001cd2:	ebc2 060b 	rsb	r6, r2, fp
 8001cd6:	b2b6      	uxth	r6, r6
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001cd8:	f006 0807 	and.w	r8, r6, #7
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8001cdc:	eb02 050b 	add.w	r5, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001ce0:	fa09 fb08 	lsl.w	fp, r9, r8
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8001ce4:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001ce6:	f007 0a07 	and.w	sl, r7, #7
 8001cea:	f000 0507 	and.w	r5, r0, #7
 8001cee:	fa09 fc0a 	lsl.w	ip, r9, sl
 8001cf2:	f04f 0801 	mov.w	r8, #1
 8001cf6:	fa09 fa05 	lsl.w	sl, r9, r5
 8001cfa:	f004 0907 	and.w	r9, r4, #7
 8001cfe:	f8cd b01c 	str.w	fp, [sp, #28]
 8001d02:	fa08 fb09 	lsl.w	fp, r8, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001d06:	2554      	movs	r5, #84	; 0x54
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001d08:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001d0a:	fb05 f707 	mul.w	r7, r5, r7
 8001d0e:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001d12:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001d14:	eb07 0809 	add.w	r8, r7, r9
 8001d18:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001d1c:	f8cd b000 	str.w	fp, [sp]
 8001d20:	f811 b008 	ldrb.w	fp, [r1, r8]
 8001d24:	fa5f fc8c 	uxtb.w	ip, ip
 8001d28:	ea4b 050c 	orr.w	r5, fp, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001d2c:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001d30:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001d34:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8001d38:	f811 b008 	ldrb.w	fp, [r1, r8]
 8001d3c:	fa5f f589 	uxtb.w	r5, r9
 8001d40:	ea4b 0b05 	orr.w	fp, fp, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001d44:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001d48:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001d4c:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001d50:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001d52:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001d56:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001d5a:	ea49 0c0c 	orr.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001d5e:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001d62:	2754      	movs	r7, #84	; 0x54
 8001d64:	4446      	add	r6, r8
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 8001d66:	f8dd 9014 	ldr.w	r9, [sp, #20]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001d6a:	fb07 f80b 	mul.w	r8, r7, fp
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001d6e:	f811 b006 	ldrb.w	fp, [r1, r6]
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 8001d72:	eb02 0709 	add.w	r7, r2, r9
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001d76:	ea4b 0505 	orr.w	r5, fp, r5
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001d7a:	b2bf      	uxth	r7, r7
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001d7c:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001d80:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001d84:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001d86:	eb08 0607 	add.w	r6, r8, r7
 8001d8a:	fb0b f50c 	mul.w	r5, fp, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001d8e:	f811 9006 	ldrb.w	r9, [r1, r6]
 8001d92:	fa5f fa8a 	uxtb.w	sl, sl
 8001d96:	f8dd b000 	ldr.w	fp, [sp]
 8001d9a:	ea49 0c0a 	orr.w	ip, r9, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001d9e:	f801 c006 	strb.w	ip, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001da2:	19ef      	adds	r7, r5, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001da4:	fa5f f98b 	uxtb.w	r9, fp
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 8001da8:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001dac:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 8001dae:	ebc2 0c0b 	rsb	ip, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001db2:	ea46 0609 	orr.w	r6, r6, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001db6:	fa1f fc8c 	uxth.w	ip, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001dba:	55ce      	strb	r6, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001dbc:	44e0      	add	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001dbe:	f811 7008 	ldrb.w	r7, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001dc2:	4465      	add	r5, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001dc4:	ea47 0a0a 	orr.w	sl, r7, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001dc8:	f801 a008 	strb.w	sl, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001dcc:	5d4e      	ldrb	r6, [r1, r5]
 8001dce:	ea46 0909 	orr.w	r9, r6, r9
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001dd2:	f801 9005 	strb.w	r9, [r1, r5]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8001dd6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8001dda:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 8001dde:	f040 80a8 	bne.w	8001f32 <Hw_N5110G_DrawCircle+0x28e>
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8001de2:	9f03      	ldr	r7, [sp, #12]
 8001de4:	1a9d      	subs	r5, r3, r2
 8001de6:	370a      	adds	r7, #10
 8001de8:	eb07 0685 	add.w	r6, r7, r5, lsl #2
			CurY--;
 8001dec:	3a01      	subs	r2, #1
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8001dee:	b2b7      	uxth	r7, r6
 8001df0:	9703      	str	r7, [sp, #12]
			CurY--;
 8001df2:	b292      	uxth	r2, r2
 8001df4:	9d02      	ldr	r5, [sp, #8]
 8001df6:	9f01      	ldr	r7, [sp, #4]
		}
		CurX++;
 8001df8:	3301      	adds	r3, #1
 8001dfa:	1c6e      	adds	r6, r5, #1
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	1e7d      	subs	r5, r7, #1
 8001e00:	3001      	adds	r0, #1
 8001e02:	3c01      	subs	r4, #1
 8001e04:	b2b6      	uxth	r6, r6
 8001e06:	b2ad      	uxth	r5, r5
  
	D    = 3 - (Radius << 1);
	CurX = 0;
	CurY = Radius;
	
	while (CurX <= CurY)
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	9602      	str	r6, [sp, #8]
 8001e0c:	9501      	str	r5, [sp, #4]
 8001e0e:	b280      	uxth	r0, r0
 8001e10:	b2a4      	uxth	r4, r4
 8001e12:	f0c0 8115 	bcc.w	8002040 <Hw_N5110G_DrawCircle+0x39c>
	{
		if( Mode == 0 )
 8001e16:	9e04      	ldr	r6, [sp, #16]
 8001e18:	2e00      	cmp	r6, #0
 8001e1a:	f43f af56 	beq.w	8001cca <Hw_N5110G_DrawCircle+0x26>
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
 8001e1e:	9d04      	ldr	r5, [sp, #16]
 8001e20:	2d01      	cmp	r5, #1
 8001e22:	f000 808f 	beq.w	8001f44 <Hw_N5110G_DrawCircle+0x2a0>
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
 8001e26:	9f04      	ldr	r7, [sp, #16]
 8001e28:	2f02      	cmp	r7, #2
 8001e2a:	d1d4      	bne.n	8001dd6 <Hw_N5110G_DrawCircle+0x132>
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8001e2c:	9e06      	ldr	r6, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001e2e:	f04f 0901 	mov.w	r9, #1
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8001e32:	1995      	adds	r5, r2, r6
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
 8001e34:	1ab6      	subs	r6, r6, r2
 8001e36:	b2b6      	uxth	r6, r6
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8001e38:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001e3a:	f006 0507 	and.w	r5, r6, #7
 8001e3e:	fa09 fa05 	lsl.w	sl, r9, r5
 8001e42:	f007 0c07 	and.w	ip, r7, #7
 8001e46:	f04f 0801 	mov.w	r8, #1
 8001e4a:	fa08 fb0c 	lsl.w	fp, r8, ip
 8001e4e:	f004 0c07 	and.w	ip, r4, #7
 8001e52:	fa09 f80c 	lsl.w	r8, r9, ip
 8001e56:	f000 0507 	and.w	r5, r0, #7
 8001e5a:	f8cd a01c 	str.w	sl, [sp, #28]
 8001e5e:	fa09 fa05 	lsl.w	sl, r9, r5
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001e62:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001e64:	2554      	movs	r5, #84	; 0x54
 8001e66:	fb05 f707 	mul.w	r7, r5, r7
 8001e6a:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001e6e:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001e70:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001e74:	f8cd 8000 	str.w	r8, [sp]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001e78:	eb07 0809 	add.w	r8, r7, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001e7c:	f811 5008 	ldrb.w	r5, [r1, r8]
 8001e80:	fa5f fc8b 	uxtb.w	ip, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001e84:	f8dd 9008 	ldr.w	r9, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001e88:	ea85 0b0c 	eor.w	fp, r5, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001e8c:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001e90:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001e94:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8001e98:	f811 9008 	ldrb.w	r9, [r1, r8]
 8001e9c:	fa5f f58b 	uxtb.w	r5, fp
 8001ea0:	ea89 0905 	eor.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001ea4:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001ea8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8001eac:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8001eb0:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001eb2:	f811 b007 	ldrb.w	fp, [r1, r7]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001eb6:	ea4f 08d0 	mov.w	r8, r0, lsr #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001eba:	ea8b 0c0c 	eor.w	ip, fp, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001ebe:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001ec2:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001ec6:	444e      	add	r6, r9
 8001ec8:	fb0b f808 	mul.w	r8, fp, r8
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 8001ecc:	f8dd c014 	ldr.w	ip, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001ed0:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 8001ed2:	eb02 090c 	add.w	r9, r2, ip
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001ed6:	407d      	eors	r5, r7
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001ed8:	fa1f f989 	uxth.w	r9, r9
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001edc:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001ee0:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001ee2:	fb0b fc07 	mul.w	ip, fp, r7
 8001ee6:	eb08 0509 	add.w	r5, r8, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001eea:	5d4f      	ldrb	r7, [r1, r5]
 8001eec:	fa5f f68a 	uxtb.w	r6, sl
 8001ef0:	4077      	eors	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001ef2:	554f      	strb	r7, [r1, r5]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001ef4:	44e1      	add	r9, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001ef6:	9d00      	ldr	r5, [sp, #0]
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 8001ef8:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001efc:	f811 a009 	ldrb.w	sl, [r1, r9]
 8001f00:	b2ed      	uxtb	r5, r5
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 8001f02:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001f06:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001f08:	ea8a 0a05 	eor.w	sl, sl, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001f0c:	f801 a009 	strb.w	sl, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001f10:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001f12:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001f16:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001f18:	ea89 0606 	eor.w	r6, r9, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001f1c:	f801 6008 	strb.w	r6, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001f20:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8001f22:	f8dd c00c 	ldr.w	ip, [sp, #12]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001f26:	4075      	eors	r5, r6
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8001f28:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001f2c:	55cd      	strb	r5, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8001f2e:	f43f af58 	beq.w	8001de2 <Hw_N5110G_DrawCircle+0x13e>
		{ 
			D += (CurX << 2) + 6;
 8001f32:	eb0c 0583 	add.w	r5, ip, r3, lsl #2
 8001f36:	1dae      	adds	r6, r5, #6
 8001f38:	b2b7      	uxth	r7, r6
 8001f3a:	9703      	str	r7, [sp, #12]
 8001f3c:	e75a      	b.n	8001df4 <Hw_N5110G_DrawCircle+0x150>
 8001f3e:	bf00      	nop
 8001f40:	20000790 	.word	0x20000790
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 8001f44:	9e06      	ldr	r6, [sp, #24]
 8001f46:	1997      	adds	r7, r2, r6
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 8001f48:	ebc2 0806 	rsb	r8, r2, r6
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 8001f4c:	b2bf      	uxth	r7, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 8001f4e:	fa1f f988 	uxth.w	r9, r8
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001f52:	f007 0b07 	and.w	fp, r7, #7
 8001f56:	9e04      	ldr	r6, [sp, #16]
 8001f58:	fa05 fc0b 	lsl.w	ip, r5, fp
 8001f5c:	f009 0507 	and.w	r5, r9, #7
 8001f60:	fa06 fa05 	lsl.w	sl, r6, r5
 8001f64:	9d04      	ldr	r5, [sp, #16]
 8001f66:	f000 0607 	and.w	r6, r0, #7
 8001f6a:	fa05 fb06 	lsl.w	fp, r5, r6
 8001f6e:	f004 0607 	and.w	r6, r4, #7
 8001f72:	40b5      	lsls	r5, r6
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001f74:	08ff      	lsrs	r7, r7, #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001f76:	9507      	str	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001f78:	2554      	movs	r5, #84	; 0x54
 8001f7a:	fb05 f707 	mul.w	r7, r5, r7
 8001f7e:	f8dd 8008 	ldr.w	r8, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001f82:	ea4f 06d9 	mov.w	r6, r9, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001f86:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001f88:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001f8c:	2554      	movs	r5, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001f8e:	ea6f 0c0c 	mvn.w	ip, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001f92:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001f96:	fa5f fc8c 	uxtb.w	ip, ip
 8001f9a:	ea09 050c 	and.w	r5, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001f9e:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001fa2:	f8dd 8008 	ldr.w	r8, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001fa6:	ea6f 050a 	mvn.w	r5, sl
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001faa:	44b0      	add	r8, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001fac:	f811 9008 	ldrb.w	r9, [r1, r8]
 8001fb0:	b2ed      	uxtb	r5, r5
 8001fb2:	ea09 0a05 	and.w	sl, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001fb6:	f801 a008 	strb.w	sl, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001fba:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001fbe:	ea4f 0ad0 	mov.w	sl, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001fc2:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001fc4:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001fc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001fcc:	ea09 0c0c 	and.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001fd0:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001fd4:	f04f 0754 	mov.w	r7, #84	; 0x54
 8001fd8:	4446      	add	r6, r8
 8001fda:	fb07 fa0a 	mul.w	sl, r7, sl
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 8001fde:	f8dd 9014 	ldr.w	r9, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001fe2:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 8001fe4:	eb02 0c09 	add.w	ip, r2, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001fe8:	fa1f f88c 	uxth.w	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001fec:	403d      	ands	r5, r7
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001fee:	558d      	strb	r5, [r1, r6]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001ff0:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001ff4:	eb0a 0508 	add.w	r5, sl, r8
 8001ff8:	2654      	movs	r6, #84	; 0x54
 8001ffa:	fb06 fc07 	mul.w	ip, r6, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001ffe:	5d4f      	ldrb	r7, [r1, r5]
 8002000:	ea6f 060b 	mvn.w	r6, fp
 8002004:	b2f6      	uxtb	r6, r6
 8002006:	4037      	ands	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002008:	554f      	strb	r7, [r1, r5]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800200a:	9d07      	ldr	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800200c:	44e0      	add	r8, ip
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 800200e:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002012:	f811 9008 	ldrb.w	r9, [r1, r8]
 8002016:	43ef      	mvns	r7, r5
 8002018:	b2fd      	uxtb	r5, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 800201a:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800201e:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002020:	ea09 0905 	and.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002024:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002028:	44ba      	add	sl, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800202a:	f811 800a 	ldrb.w	r8, [r1, sl]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800202e:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002030:	ea08 0606 	and.w	r6, r8, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002034:	f801 600a 	strb.w	r6, [r1, sl]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002038:	5dce      	ldrb	r6, [r1, r7]
 800203a:	4035      	ands	r5, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800203c:	55cd      	strb	r5, [r1, r7]
 800203e:	e6ca      	b.n	8001dd6 <Hw_N5110G_DrawCircle+0x132>
			D += ((CurX - CurY) << 2) + 10;
			CurY--;
		}
		CurX++;
	}
}
 8002040:	b008      	add	sp, #32
 8002042:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002046:	4770      	bx	lr

08002048 <Hw_DMA_Init>:
void Hw_DMA_Init(void)
{
	static u8 Called = 0;


	if( Called == 1 ) return;
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <Hw_DMA_Init+0x20>)
 800204a:	7813      	ldrb	r3, [r2, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d009      	beq.n	8002064 <Hw_DMA_Init+0x1c>


	// 1. Clock Enable
	//
	REG_RCC_AHBENR |= (1<<0);		// DMA1 Clock enable
 8002050:	f241 0014 	movw	r0, #4116	; 0x1014
 8002054:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002058:	6801      	ldr	r1, [r0, #0]
 800205a:	f041 0301 	orr.w	r3, r1, #1
 800205e:	6003      	str	r3, [r0, #0]
	

	Called = 1;	
 8002060:	2001      	movs	r0, #1
 8002062:	7010      	strb	r0, [r2, #0]
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000284 	.word	0x20000284

0800206c <Hw_DMA_SPI2_Setup>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
 800206c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8002070:	2344      	movs	r3, #68	; 0x44
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8002072:	274c      	movs	r7, #76	; 0x4c
 8002074:	f643 040c 	movw	r4, #14348	; 0x380c
	REG_DMA1_CMAR(4)  = ReadAddress;
 8002078:	2650      	movs	r6, #80	; 0x50
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 800207a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800207e:	f04f 0c00 	mov.w	ip, #0
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8002082:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002086:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(4)  = ReadAddress;
 800208a:	f2c4 0602 	movt	r6, #16386	; 0x4002
	REG_DMA1_CNDTR(4) = BufSize;
 800208e:	2548      	movs	r5, #72	; 0x48
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8002090:	f8c3 c000 	str.w	ip, [r3]
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 8002094:	f2c4 0502 	movt	r5, #16386	; 0x4002
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8002098:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(4)  = ReadAddress;
 800209a:	6031      	str	r1, [r6, #0]
	REG_DMA1_CNDTR(4) = BufSize;
	
	
	
	REG_DMA1_CCR(4) = 0
 800209c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 80020a0:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(4) = 0
 80020a2:	6019      	str	r1, [r3, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 80020a4:	f8d3 8000 	ldr.w	r8, [r3]
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 80020a8:	2158      	movs	r1, #88	; 0x58
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 80020aa:	2760      	movs	r7, #96	; 0x60
	REG_DMA1_CMAR(5)  = WriteAddress;
 80020ac:	2664      	movs	r6, #100	; 0x64
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 80020ae:	f2c4 0102 	movt	r1, #16386	; 0x4002
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 80020b2:	255c      	movs	r5, #92	; 0x5c
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 80020b4:	f048 0801 	orr.w	r8, r8, #1
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 80020b8:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(5)  = WriteAddress;
 80020bc:	f2c4 0602 	movt	r6, #16386	; 0x4002
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 80020c0:	f8c3 8000 	str.w	r8, [r3]
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 80020c4:	f2c4 0502 	movt	r5, #16386	; 0x4002
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 80020c8:	f8c1 c000 	str.w	ip, [r1]
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 80020cc:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(5)  = WriteAddress;
 80020ce:	6030      	str	r0, [r6, #0]
	REG_DMA1_CNDTR(5) = BufSize;
	
	
	
	REG_DMA1_CCR(5) = 0
 80020d0:	2090      	movs	r0, #144	; 0x90
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 80020d2:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(5) = 0
 80020d4:	6008      	str	r0, [r1, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(5) |= (1<<0);	// Channel enable
 80020d6:	680a      	ldr	r2, [r1, #0]
 80020d8:	f042 0301 	orr.w	r3, r2, #1
 80020dc:	600b      	str	r3, [r1, #0]
}
 80020de:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80020e2:	4770      	bx	lr

080020e4 <Hw_DMA_SPI2_IsTransFinished>:
---------------------------------------------------------------------------*/
u8 Hw_DMA_SPI2_IsTransFinished( void )
{
	u8 Ret = 0;
	
	if( REG_DMA1_ISR & (1<<13) )
 80020e4:	2300      	movs	r3, #0
 80020e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 80020f0:	d00a      	beq.n	8002108 <Hw_DMA_SPI2_IsTransFinished+0x24>
	{
		if( REG_DMA1_ISR & (1<<17) )
 80020f2:	6819      	ldr	r1, [r3, #0]
 80020f4:	f411 3000 	ands.w	r0, r1, #131072	; 0x20000
 80020f8:	d006      	beq.n	8002108 <Hw_DMA_SPI2_IsTransFinished+0x24>
		{
			REG_DMA1_IFCR = (1<<17) | (1<<13);
 80020fa:	2304      	movs	r3, #4
 80020fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002100:	f44f 3208 	mov.w	r2, #139264	; 0x22000
 8002104:	601a      	str	r2, [r3, #0]
			Ret = 1;
 8002106:	2001      	movs	r0, #1
		}
	}
	return Ret;
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop

0800210c <Hw_I2C_IMU_IO_Setup>:
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 800210c:	2204      	movs	r2, #4
 800210e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002112:	6811      	ldr	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8002114:	f640 4304 	movw	r3, #3076	; 0xc04
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8002118:	f041 0002 	orr.w	r0, r1, #2
 800211c:	6010      	str	r0, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 800211e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	f022 010f 	bic.w	r1, r2, #15
 8002128:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	f040 0203 	orr.w	r2, r0, #3
 8002130:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	f041 000c 	orr.w	r0, r1, #12
 8002138:	6018      	str	r0, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8002140:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	f040 0230 	orr.w	r2, r0, #48	; 0x30
 8002148:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 8002150:	6018      	str	r0, [r3, #0]
 8002152:	4770      	bx	lr

08002154 <Hw_I2C_IMU_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_IMU_Init( void )
{
 8002154:	b570      	push	{r4, r5, r6, lr}
	static u8 power_on = FALSE;
	u32 SR;



	if( power_on == TRUE ) return;
 8002156:	4c1e      	ldr	r4, [pc, #120]	; (80021d0 <Hw_I2C_IMU_Init+0x7c>)
 8002158:	7823      	ldrb	r3, [r4, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d036      	beq.n	80021cc <Hw_I2C_IMU_Init+0x78>


	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	
 800215e:	481d      	ldr	r0, [pc, #116]	; (80021d4 <Hw_I2C_IMU_Init+0x80>)
 8002160:	4780      	blx	r0


	REG_I2C1_CR1 = 0;
 8002162:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8002166:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800216a:	2600      	movs	r6, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 800216c:	f245 4504 	movw	r5, #21508	; 0x5404
	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	


	REG_I2C1_CR1 = 0;
 8002170:	601e      	str	r6, [r3, #0]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8002172:	f2c4 0500 	movt	r5, #16384	; 0x4000
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8002176:	f245 401c 	movw	r0, #21532	; 0x541c

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 800217a:	2624      	movs	r6, #36	; 0x24
 800217c:	602e      	str	r6, [r5, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 800217e:	f2c4 0000 	movt	r0, #16384	; 0x4000
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8002182:	f245 4120 	movw	r1, #21536	; 0x5420
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8002186:	f248 051e 	movw	r5, #32798	; 0x801e
 800218a:	6005      	str	r5, [r0, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 800218c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002190:	2004      	movs	r0, #4


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8002192:	f241 021c 	movw	r2, #4124	; 0x101c
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8002196:	6008      	str	r0, [r1, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8002198:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800219c:	6810      	ldr	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 800219e:	f245 4114 	movw	r1, #21524	; 0x5414
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 80021a2:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 80021a6:	6010      	str	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 80021a8:	6818      	ldr	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 80021aa:	f245 4218 	movw	r2, #21528	; 0x5418
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 80021ae:	f020 0002 	bic.w	r0, r0, #2
 80021b2:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 80021b4:	6818      	ldr	r0, [r3, #0]

	SR = REG_I2C1_SR1;
 80021b6:	f2c4 0100 	movt	r1, #16384	; 0x4000
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 80021ba:	f040 0001 	orr.w	r0, r0, #1
 80021be:	6018      	str	r0, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 80021c0:	f2c4 0200 	movt	r2, #16384	; 0x4000


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 80021c4:	680b      	ldr	r3, [r1, #0]
	SR = REG_I2C1_SR2;
 80021c6:	6813      	ldr	r3, [r2, #0]


	power_on = TRUE;
 80021c8:	2301      	movs	r3, #1
 80021ca:	7023      	strb	r3, [r4, #0]
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
 80021ce:	bf00      	nop
 80021d0:	20000285 	.word	0x20000285
 80021d4:	0800210d 	.word	0x0800210d

080021d8 <Hw_I2C_IMU_GetErrStatus>:
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
 80021d8:	f245 4314 	movw	r3, #21524	; 0x5414
 80021dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80021e0:	681a      	ldr	r2, [r3, #0]
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 80021e2:	6819      	ldr	r1, [r3, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
 80021e4:	f412 6f00 	tst.w	r2, #2048	; 0x800

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 80021e8:	681a      	ldr	r2, [r3, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
 80021ea:	bf14      	ite	ne
 80021ec:	200b      	movne	r0, #11
 80021ee:	2000      	moveq	r0, #0

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 80021f0:	681b      	ldr	r3, [r3, #0]
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 80021f2:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80021f6:	bf18      	it	ne
 80021f8:	200a      	movne	r0, #10
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 80021fa:	f412 7f00 	tst.w	r2, #512	; 0x200
 80021fe:	bf18      	it	ne
 8002200:	2009      	movne	r0, #9
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 8002202:	f413 7f80 	tst.w	r3, #256	; 0x100

	return Err;
}
 8002206:	bf18      	it	ne
 8002208:	2008      	movne	r0, #8
 800220a:	4770      	bx	lr

0800220c <Hw_I2C_IMU_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_ReadRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_reg, u16 len )
{
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	b08d      	sub	sp, #52	; 0x34
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;


	if( len > 0 ) LastIndex = len - 1;
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8118 	beq.w	8002446 <Hw_I2C_IMU_ReadRegs+0x23a>
 8002216:	1e5f      	subs	r7, r3, #1
 8002218:	b2ff      	uxtb	r7, r7
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 800221a:	f245 4514 	movw	r5, #21524	; 0x5414
 800221e:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002222:	682e      	ldr	r6, [r5, #0]
			SR2 = REG_I2C1_SR2;
 8002224:	f245 4418 	movw	r4, #21528	; 0x5418
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 8002228:	9601      	str	r6, [sp, #4]
			SR2 = REG_I2C1_SR2;
 800222a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800222e:	6824      	ldr	r4, [r4, #0]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8002230:	f44f 46a8 	mov.w	r6, #21504	; 0x5400
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
			SR2 = REG_I2C1_SR2;
 8002234:	9402      	str	r4, [sp, #8]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8002236:	f2c4 0600 	movt	r6, #16384	; 0x4000
 800223a:	f8d6 c000 	ldr.w	ip, [r6]
 800223e:	f242 7410 	movw	r4, #10000	; 0x2710
 8002242:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8002246:	f8c6 c000 	str.w	ip, [r6]
 800224a:	e008      	b.n	800225e <Hw_I2C_IMU_ReadRegs+0x52>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800224c:	682e      	ldr	r6, [r5, #0]
 800224e:	9603      	str	r6, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002250:	9e03      	ldr	r6, [sp, #12]
 8002252:	f016 0f01 	tst.w	r6, #1
 8002256:	d108      	bne.n	800226a <Hw_I2C_IMU_ReadRegs+0x5e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002258:	3c01      	subs	r4, #1
 800225a:	f000 80f6 	beq.w	800244a <Hw_I2C_IMU_ReadRegs+0x23e>
	{
		Reg = *reg_addr;
 800225e:	682e      	ldr	r6, [r5, #0]
 8002260:	3c01      	subs	r4, #1
 8002262:	9603      	str	r6, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002264:	9e03      	ldr	r6, [sp, #12]
 8002266:	07f6      	lsls	r6, r6, #31
 8002268:	d5f0      	bpl.n	800224c <Hw_I2C_IMU_ReadRegs+0x40>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800226a:	f245 4518 	movw	r5, #21528	; 0x5418

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800226e:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002272:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002276:	e008      	b.n	800228a <Hw_I2C_IMU_ReadRegs+0x7e>
 8002278:	682e      	ldr	r6, [r5, #0]
 800227a:	9604      	str	r6, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800227c:	9e04      	ldr	r6, [sp, #16]
 800227e:	f016 0f01 	tst.w	r6, #1
 8002282:	d108      	bne.n	8002296 <Hw_I2C_IMU_ReadRegs+0x8a>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002284:	3c01      	subs	r4, #1
 8002286:	f000 80e0 	beq.w	800244a <Hw_I2C_IMU_ReadRegs+0x23e>
	{
		Reg = *reg_addr;
 800228a:	682e      	ldr	r6, [r5, #0]
 800228c:	3c01      	subs	r4, #1
 800228e:	9604      	str	r6, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002290:	9e04      	ldr	r6, [sp, #16]
 8002292:	07f6      	lsls	r6, r6, #31
 8002294:	d5f0      	bpl.n	8002278 <Hw_I2C_IMU_ReadRegs+0x6c>



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8002296:	f245 4410 	movw	r4, #21520	; 0x5410
 800229a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800229e:	0040      	lsls	r0, r0, #1
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80022a0:	f245 4514 	movw	r5, #21524	; 0x5414



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 80022a4:	6020      	str	r0, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80022a6:	f2c4 0500 	movt	r5, #16384	; 0x4000



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 80022aa:	f242 7410 	movw	r4, #10000	; 0x2710
 80022ae:	e008      	b.n	80022c2 <Hw_I2C_IMU_ReadRegs+0xb6>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80022b0:	682e      	ldr	r6, [r5, #0]
 80022b2:	9605      	str	r6, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80022b4:	9e05      	ldr	r6, [sp, #20]
 80022b6:	f016 0f02 	tst.w	r6, #2
 80022ba:	d108      	bne.n	80022ce <Hw_I2C_IMU_ReadRegs+0xc2>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80022bc:	3c01      	subs	r4, #1
 80022be:	f000 80c7 	beq.w	8002450 <Hw_I2C_IMU_ReadRegs+0x244>
	{
		Reg = *reg_addr;
 80022c2:	682e      	ldr	r6, [r5, #0]
 80022c4:	3c01      	subs	r4, #1
 80022c6:	9605      	str	r6, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80022c8:	9e05      	ldr	r6, [sp, #20]
 80022ca:	07b6      	lsls	r6, r6, #30
 80022cc:	d5f0      	bpl.n	80022b0 <Hw_I2C_IMU_ReadRegs+0xa4>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80022ce:	f245 4518 	movw	r5, #21528	; 0x5418
 80022d2:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80022d6:	682c      	ldr	r4, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80022d8:	f245 4514 	movw	r5, #21524	; 0x5414
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80022dc:	9402      	str	r4, [sp, #8]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80022de:	f2c4 0500 	movt	r5, #16384	; 0x4000
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80022e2:	f242 7410 	movw	r4, #10000	; 0x2710
 80022e6:	e008      	b.n	80022fa <Hw_I2C_IMU_ReadRegs+0xee>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80022e8:	682e      	ldr	r6, [r5, #0]
 80022ea:	9606      	str	r6, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80022ec:	9e06      	ldr	r6, [sp, #24]
 80022ee:	f016 0f80 	tst.w	r6, #128	; 0x80
 80022f2:	d108      	bne.n	8002306 <Hw_I2C_IMU_ReadRegs+0xfa>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80022f4:	3c01      	subs	r4, #1
 80022f6:	f000 80b3 	beq.w	8002460 <Hw_I2C_IMU_ReadRegs+0x254>
	{
		Reg = *reg_addr;
 80022fa:	682e      	ldr	r6, [r5, #0]
 80022fc:	3c01      	subs	r4, #1
 80022fe:	9606      	str	r6, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002300:	9e06      	ldr	r6, [sp, #24]
 8002302:	0636      	lsls	r6, r6, #24
 8002304:	d5f0      	bpl.n	80022e8 <Hw_I2C_IMU_ReadRegs+0xdc>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002306:	f245 4514 	movw	r5, #21524	; 0x5414

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800230a:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800230e:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002312:	e008      	b.n	8002326 <Hw_I2C_IMU_ReadRegs+0x11a>
 8002314:	682e      	ldr	r6, [r5, #0]
 8002316:	9607      	str	r6, [sp, #28]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002318:	9e07      	ldr	r6, [sp, #28]
 800231a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800231e:	d109      	bne.n	8002334 <Hw_I2C_IMU_ReadRegs+0x128>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002320:	3c01      	subs	r4, #1
 8002322:	f000 809d 	beq.w	8002460 <Hw_I2C_IMU_ReadRegs+0x254>
	{
		Reg = *reg_addr;
 8002326:	682e      	ldr	r6, [r5, #0]
 8002328:	3c01      	subs	r4, #1
 800232a:	9607      	str	r6, [sp, #28]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800232c:	9e07      	ldr	r6, [sp, #28]
 800232e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002332:	d0ef      	beq.n	8002314 <Hw_I2C_IMU_ReadRegs+0x108>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 8002334:	f245 4510 	movw	r5, #21520	; 0x5410
 8002338:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800233c:	f245 4414 	movw	r4, #21524	; 0x5414
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 8002340:	6029      	str	r1, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002342:	f2c4 0400 	movt	r4, #16384	; 0x4000
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 8002346:	f242 7110 	movw	r1, #10000	; 0x2710
 800234a:	e008      	b.n	800235e <Hw_I2C_IMU_ReadRegs+0x152>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800234c:	6825      	ldr	r5, [r4, #0]
 800234e:	9508      	str	r5, [sp, #32]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002350:	9d08      	ldr	r5, [sp, #32]
 8002352:	f015 0f04 	tst.w	r5, #4
 8002356:	d108      	bne.n	800236a <Hw_I2C_IMU_ReadRegs+0x15e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002358:	3901      	subs	r1, #1
 800235a:	f000 808d 	beq.w	8002478 <Hw_I2C_IMU_ReadRegs+0x26c>
	{
		Reg = *reg_addr;
 800235e:	6825      	ldr	r5, [r4, #0]
 8002360:	3901      	subs	r1, #1
 8002362:	9508      	str	r5, [sp, #32]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002364:	9d08      	ldr	r5, [sp, #32]
 8002366:	076d      	lsls	r5, r5, #29
 8002368:	d5f0      	bpl.n	800234c <Hw_I2C_IMU_ReadRegs+0x140>



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 800236a:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 800236e:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002372:	680d      	ldr	r5, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002374:	f245 4414 	movw	r4, #21524	; 0x5414



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8002378:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 800237c:	600d      	str	r5, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800237e:	f2c4 0400 	movt	r4, #16384	; 0x4000



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8002382:	f242 7110 	movw	r1, #10000	; 0x2710
 8002386:	e007      	b.n	8002398 <Hw_I2C_IMU_ReadRegs+0x18c>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002388:	6825      	ldr	r5, [r4, #0]
 800238a:	9509      	str	r5, [sp, #36]	; 0x24

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800238c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800238e:	f015 0f01 	tst.w	r5, #1
 8002392:	d108      	bne.n	80023a6 <Hw_I2C_IMU_ReadRegs+0x19a>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002394:	3901      	subs	r1, #1
 8002396:	d058      	beq.n	800244a <Hw_I2C_IMU_ReadRegs+0x23e>
	{
		Reg = *reg_addr;
 8002398:	6825      	ldr	r5, [r4, #0]
 800239a:	3901      	subs	r1, #1
 800239c:	9509      	str	r5, [sp, #36]	; 0x24

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800239e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80023a0:	f015 0f01 	tst.w	r5, #1
 80023a4:	d0f0      	beq.n	8002388 <Hw_I2C_IMU_ReadRegs+0x17c>
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 80023a6:	f245 4110 	movw	r1, #21520	; 0x5410
 80023aa:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80023ae:	f040 0001 	orr.w	r0, r0, #1
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80023b2:	f245 4414 	movw	r4, #21524	; 0x5414
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 80023b6:	6008      	str	r0, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80023b8:	f2c4 0400 	movt	r4, #16384	; 0x4000
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 80023bc:	f242 7110 	movw	r1, #10000	; 0x2710
 80023c0:	e006      	b.n	80023d0 <Hw_I2C_IMU_ReadRegs+0x1c4>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80023c2:	6820      	ldr	r0, [r4, #0]
 80023c4:	900a      	str	r0, [sp, #40]	; 0x28

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80023c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80023c8:	0780      	lsls	r0, r0, #30
 80023ca:	d407      	bmi.n	80023dc <Hw_I2C_IMU_ReadRegs+0x1d0>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80023cc:	3901      	subs	r1, #1
 80023ce:	d03f      	beq.n	8002450 <Hw_I2C_IMU_ReadRegs+0x244>
	{
		Reg = *reg_addr;
 80023d0:	6820      	ldr	r0, [r4, #0]
 80023d2:	3901      	subs	r1, #1
 80023d4:	900a      	str	r0, [sp, #40]	; 0x28

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80023d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80023d8:	0780      	lsls	r0, r0, #30
 80023da:	d5f2      	bpl.n	80023c2 <Hw_I2C_IMU_ReadRegs+0x1b6>
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80023dc:	f245 4018 	movw	r0, #21528	; 0x5418
 80023e0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80023e4:	6801      	ldr	r1, [r0, #0]
 80023e6:	9102      	str	r1, [sp, #8]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80023e8:	b353      	cbz	r3, 8002440 <Hw_I2C_IMU_ReadRegs+0x234>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 80023ea:	f44f 45a8 	mov.w	r5, #21504	; 0x5400
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80023ee:	f245 4014 	movw	r0, #21524	; 0x5414


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 80023f2:	f245 4c10 	movw	ip, #21520	; 0x5410
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80023f6:	2600      	movs	r6, #0
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 80023f8:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80023fc:	f2c4 0000 	movt	r0, #16384	; 0x4000


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 8002400:	f2c4 0c00 	movt	ip, #16384	; 0x4000

			//-- Read DATA
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
 8002404:	42b7      	cmp	r7, r6
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 8002406:	682c      	ldr	r4, [r5, #0]

			//-- Read DATA
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
 8002408:	d92c      	bls.n	8002464 <Hw_I2C_IMU_ReadRegs+0x258>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 800240a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 800240e:	602c      	str	r4, [r5, #0]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8002410:	f242 7110 	movw	r1, #10000	; 0x2710
 8002414:	e007      	b.n	8002426 <Hw_I2C_IMU_ReadRegs+0x21a>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002416:	6804      	ldr	r4, [r0, #0]
 8002418:	940b      	str	r4, [sp, #44]	; 0x2c

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800241a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800241c:	f014 0f40 	tst.w	r4, #64	; 0x40
 8002420:	d107      	bne.n	8002432 <Hw_I2C_IMU_ReadRegs+0x226>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002422:	3901      	subs	r1, #1
 8002424:	d026      	beq.n	8002474 <Hw_I2C_IMU_ReadRegs+0x268>
	{
		Reg = *reg_addr;
 8002426:	6804      	ldr	r4, [r0, #0]
 8002428:	3901      	subs	r1, #1
 800242a:	940b      	str	r4, [sp, #44]	; 0x2c

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800242c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800242e:	0664      	lsls	r4, r4, #25
 8002430:	d5f1      	bpl.n	8002416 <Hw_I2C_IMU_ReadRegs+0x20a>


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 8002432:	f8dc 4000 	ldr.w	r4, [ip]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8002436:	1c71      	adds	r1, r6, #1


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 8002438:	5594      	strb	r4, [r2, r6]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 800243a:	b2ce      	uxtb	r6, r1
 800243c:	42b3      	cmp	r3, r6
 800243e:	d8e1      	bhi.n	8002404 <Hw_I2C_IMU_ReadRegs+0x1f8>
	}


	if( Err == 0 )
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 8002440:	4b0e      	ldr	r3, [pc, #56]	; (800247c <Hw_I2C_IMU_ReadRegs+0x270>)
 8002442:	4798      	blx	r3
 8002444:	e002      	b.n	800244c <Hw_I2C_IMU_ReadRegs+0x240>
    u16 Err = 0;
	u8  i;
	u32 TimeOut;
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;
 8002446:	461f      	mov	r7, r3
 8002448:	e6e7      	b.n	800221a <Hw_I2C_IMU_ReadRegs+0xe>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 800244a:	2002      	movs	r0, #2
	}
	

    return Err;

}
 800244c:	b00d      	add	sp, #52	; 0x34
 800244e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8002450:	f245 4318 	movw	r3, #21528	; 0x5418
 8002454:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002458:	681a      	ldr	r2, [r3, #0]

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 800245a:	2003      	movs	r0, #3
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 800245c:	9202      	str	r2, [sp, #8]
 800245e:	e7f5      	b.n	800244c <Hw_I2C_IMU_ReadRegs+0x240>

			
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 8002460:	2004      	movs	r0, #4
 8002462:	e7f3      	b.n	800244c <Hw_I2C_IMU_ReadRegs+0x240>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 8002464:	f424 6180 	bic.w	r1, r4, #1024	; 0x400
 8002468:	6029      	str	r1, [r5, #0]
					SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 800246a:	682c      	ldr	r4, [r5, #0]
 800246c:	f444 7100 	orr.w	r1, r4, #512	; 0x200
 8002470:	6029      	str	r1, [r5, #0]
 8002472:	e7cd      	b.n	8002410 <Hw_I2C_IMU_ReadRegs+0x204>
				{
					ptr_reg[i] = REG_I2C1_DR;
				}
				else
				{
					Err = HW_I2C_ERR_RXE;
 8002474:	2005      	movs	r0, #5
 8002476:	e7e9      	b.n	800244c <Hw_I2C_IMU_ReadRegs+0x240>


			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, 10000 );	// BTF
			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_STOP;
 8002478:	2006      	movs	r0, #6
 800247a:	e7e7      	b.n	800244c <Hw_I2C_IMU_ReadRegs+0x240>
 800247c:	080021d9 	.word	0x080021d9

08002480 <Hw_I2C_IMU_MPU6050_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	4606      	mov	r6, r0
 8002484:	460d      	mov	r5, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, len );
 8002486:	f242 240d 	movw	r4, #8717	; 0x220d
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 800248a:	4613      	mov	r3, r2
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, len );
 800248c:	2068      	movs	r0, #104	; 0x68
 800248e:	4631      	mov	r1, r6
 8002490:	462a      	mov	r2, r5
 8002492:	f6c0 0400 	movt	r4, #2048	; 0x800
 8002496:	47a0      	blx	r4
}
 8002498:	bd70      	pop	{r4, r5, r6, pc}
 800249a:	bf00      	nop

0800249c <Hw_I2C_IMU_MPU6050_ReadReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 800249c:	4603      	mov	r3, r0
 800249e:	b510      	push	{r4, lr}
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, 1 );
 80024a0:	f242 240d 	movw	r4, #8717	; 0x220d
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 80024a4:	460a      	mov	r2, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, 1 );
 80024a6:	2068      	movs	r0, #104	; 0x68
 80024a8:	4619      	mov	r1, r3
 80024aa:	f6c0 0400 	movt	r4, #2048	; 0x800
 80024ae:	2301      	movs	r3, #1
 80024b0:	47a0      	blx	r4
}
 80024b2:	bd10      	pop	{r4, pc}

080024b4 <Hw_I2C_IMU_WriteRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 80024b4:	b570      	push	{r4, r5, r6, lr}

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80024b6:	f44f 44a8 	mov.w	r4, #21504	; 0x5400
 80024ba:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80024be:	6826      	ldr	r6, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80024c0:	f245 4514 	movw	r5, #21524	; 0x5414

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80024c4:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 80024c8:	6026      	str	r6, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 80024ca:	b086      	sub	sp, #24

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80024cc:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80024d0:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80024d4:	e007      	b.n	80024e6 <Hw_I2C_IMU_WriteRegs+0x32>
 80024d6:	682e      	ldr	r6, [r5, #0]
 80024d8:	9600      	str	r6, [sp, #0]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80024da:	9e00      	ldr	r6, [sp, #0]
 80024dc:	f016 0f01 	tst.w	r6, #1
 80024e0:	d108      	bne.n	80024f4 <Hw_I2C_IMU_WriteRegs+0x40>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80024e2:	3c01      	subs	r4, #1
 80024e4:	d07d      	beq.n	80025e2 <Hw_I2C_IMU_WriteRegs+0x12e>
	{
		Reg = *reg_addr;
 80024e6:	682e      	ldr	r6, [r5, #0]
 80024e8:	3c01      	subs	r4, #1
 80024ea:	9600      	str	r6, [sp, #0]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80024ec:	9e00      	ldr	r6, [sp, #0]
 80024ee:	f016 0f01 	tst.w	r6, #1
 80024f2:	d0f0      	beq.n	80024d6 <Hw_I2C_IMU_WriteRegs+0x22>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 80024f4:	f245 4510 	movw	r5, #21520	; 0x5410
 80024f8:	0040      	lsls	r0, r0, #1
 80024fa:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80024fe:	f245 4414 	movw	r4, #21524	; 0x5414
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8002502:	6028      	str	r0, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002504:	f2c4 0400 	movt	r4, #16384	; 0x4000
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8002508:	f242 7010 	movw	r0, #10000	; 0x2710
 800250c:	e007      	b.n	800251e <Hw_I2C_IMU_WriteRegs+0x6a>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800250e:	6825      	ldr	r5, [r4, #0]
 8002510:	9501      	str	r5, [sp, #4]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002512:	9d01      	ldr	r5, [sp, #4]
 8002514:	f015 0f02 	tst.w	r5, #2
 8002518:	d107      	bne.n	800252a <Hw_I2C_IMU_WriteRegs+0x76>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800251a:	3801      	subs	r0, #1
 800251c:	d059      	beq.n	80025d2 <Hw_I2C_IMU_WriteRegs+0x11e>
	{
		Reg = *reg_addr;
 800251e:	6825      	ldr	r5, [r4, #0]
 8002520:	3801      	subs	r0, #1
 8002522:	9501      	str	r5, [sp, #4]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002524:	9d01      	ldr	r5, [sp, #4]
 8002526:	07ad      	lsls	r5, r5, #30
 8002528:	d5f1      	bpl.n	800250e <Hw_I2C_IMU_WriteRegs+0x5a>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 800252a:	f245 4518 	movw	r5, #21528	; 0x5418
 800252e:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002532:	f245 4414 	movw	r4, #21524	; 0x5414
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8002536:	6828      	ldr	r0, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002538:	f2c4 0400 	movt	r4, #16384	; 0x4000
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 800253c:	f242 7010 	movw	r0, #10000	; 0x2710
 8002540:	e007      	b.n	8002552 <Hw_I2C_IMU_WriteRegs+0x9e>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002542:	6825      	ldr	r5, [r4, #0]
 8002544:	9502      	str	r5, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002546:	9d02      	ldr	r5, [sp, #8]
 8002548:	f015 0f80 	tst.w	r5, #128	; 0x80
 800254c:	d107      	bne.n	800255e <Hw_I2C_IMU_WriteRegs+0xaa>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800254e:	3801      	subs	r0, #1
 8002550:	d06b      	beq.n	800262a <Hw_I2C_IMU_WriteRegs+0x176>
	{
		Reg = *reg_addr;
 8002552:	6825      	ldr	r5, [r4, #0]
 8002554:	3801      	subs	r0, #1
 8002556:	9502      	str	r5, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002558:	9d02      	ldr	r5, [sp, #8]
 800255a:	062d      	lsls	r5, r5, #24
 800255c:	d5f1      	bpl.n	8002542 <Hw_I2C_IMU_WriteRegs+0x8e>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800255e:	f245 4414 	movw	r4, #21524	; 0x5414

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002562:	f242 7010 	movw	r0, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002566:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800256a:	e007      	b.n	800257c <Hw_I2C_IMU_WriteRegs+0xc8>
 800256c:	6825      	ldr	r5, [r4, #0]
 800256e:	9503      	str	r5, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002570:	9d03      	ldr	r5, [sp, #12]
 8002572:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002576:	d108      	bne.n	800258a <Hw_I2C_IMU_WriteRegs+0xd6>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002578:	3801      	subs	r0, #1
 800257a:	d056      	beq.n	800262a <Hw_I2C_IMU_WriteRegs+0x176>
	{
		Reg = *reg_addr;
 800257c:	6825      	ldr	r5, [r4, #0]
 800257e:	3801      	subs	r0, #1
 8002580:	9503      	str	r5, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8002582:	9d03      	ldr	r5, [sp, #12]
 8002584:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002588:	d0f0      	beq.n	800256c <Hw_I2C_IMU_WriteRegs+0xb8>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;	
 800258a:	f245 4610 	movw	r6, #21520	; 0x5410
 800258e:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8002592:	6031      	str	r1, [r6, #0]



			for( i=0; i<len; i++ )
 8002594:	2b00      	cmp	r3, #0
 8002596:	d04a      	beq.n	800262e <Hw_I2C_IMU_WriteRegs+0x17a>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8002598:	f245 4414 	movw	r4, #21524	; 0x5414

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 800259c:	2500      	movs	r5, #0
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800259e:	f2c4 0400 	movt	r4, #16384	; 0x4000

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80025a2:	f242 7110 	movw	r1, #10000	; 0x2710
 80025a6:	e006      	b.n	80025b6 <Hw_I2C_IMU_WriteRegs+0x102>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80025a8:	6820      	ldr	r0, [r4, #0]
 80025aa:	9004      	str	r0, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80025ac:	9804      	ldr	r0, [sp, #16]
 80025ae:	0600      	lsls	r0, r0, #24
 80025b0:	d407      	bmi.n	80025c2 <Hw_I2C_IMU_WriteRegs+0x10e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80025b2:	3901      	subs	r1, #1
 80025b4:	d017      	beq.n	80025e6 <Hw_I2C_IMU_WriteRegs+0x132>
	{
		Reg = *reg_addr;
 80025b6:	6820      	ldr	r0, [r4, #0]
 80025b8:	3901      	subs	r1, #1
 80025ba:	9004      	str	r0, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80025bc:	9804      	ldr	r0, [sp, #16]
 80025be:	0600      	lsls	r0, r0, #24
 80025c0:	d5f2      	bpl.n	80025a8 <Hw_I2C_IMU_WriteRegs+0xf4>
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 80025c2:	5d50      	ldrb	r0, [r2, r5]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 80025c4:	3501      	adds	r5, #1
 80025c6:	b2ed      	uxtb	r5, r5
 80025c8:	429d      	cmp	r5, r3
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 80025ca:	6030      	str	r0, [r6, #0]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 80025cc:	d3e9      	bcc.n	80025a2 <Hw_I2C_IMU_WriteRegs+0xee>
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
    u16 Ret = 0;
    u16 Err = 0;
 80025ce:	2000      	movs	r0, #0
 80025d0:	e00a      	b.n	80025e8 <Hw_I2C_IMU_WriteRegs+0x134>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80025d2:	f245 4318 	movw	r3, #21528	; 0x5418
 80025d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80025da:	681b      	ldr	r3, [r3, #0]

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 80025dc:	2003      	movs	r0, #3
		Err = Hw_I2C_IMU_GetErrStatus();
	}
	

    return Err;
}
 80025de:	b006      	add	sp, #24
 80025e0:	bd70      	pop	{r4, r5, r6, pc}
			SET_BIT( REG_I2C1_CR1, 8 );

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 0, 10000 );
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 80025e2:	2002      	movs	r0, #2
 80025e4:	e7fb      	b.n	80025de <Hw_I2C_IMU_WriteRegs+0x12a>
			for( i=0; i<len; i++ )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
				if( Ret != 0 )
				{
					Err = HW_I2C_ERR_TXE;
 80025e6:	2004      	movs	r0, #4
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80025e8:	f245 4214 	movw	r2, #21524	; 0x5414
			for( i=0; i<len; i++ )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
				if( Ret != 0 )
				{
					Err = HW_I2C_ERR_TXE;
 80025ec:	f242 7310 	movw	r3, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80025f0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80025f4:	e006      	b.n	8002604 <Hw_I2C_IMU_WriteRegs+0x150>
 80025f6:	6811      	ldr	r1, [r2, #0]
 80025f8:	9105      	str	r1, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80025fa:	9905      	ldr	r1, [sp, #20]
 80025fc:	0749      	lsls	r1, r1, #29
 80025fe:	d407      	bmi.n	8002610 <Hw_I2C_IMU_WriteRegs+0x15c>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8002600:	3b01      	subs	r3, #1
 8002602:	d01d      	beq.n	8002640 <Hw_I2C_IMU_WriteRegs+0x18c>
	{
		Reg = *reg_addr;
 8002604:	6811      	ldr	r1, [r2, #0]
 8002606:	3b01      	subs	r3, #1
 8002608:	9105      	str	r1, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800260a:	9905      	ldr	r1, [sp, #20]
 800260c:	0749      	lsls	r1, r1, #29
 800260e:	d5f2      	bpl.n	80025f6 <Hw_I2C_IMU_WriteRegs+0x142>
					Err = HW_I2C_ERR_STOP;
					break;
				}
			}

			SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 8002610:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8002614:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002618:	680a      	ldr	r2, [r1, #0]
 800261a:	f442 7300 	orr.w	r3, r2, #512	; 0x200
 800261e:	600b      	str	r3, [r1, #0]
			break;
	}


	if( Err == 0 )
 8002620:	2800      	cmp	r0, #0
 8002622:	d1dc      	bne.n	80025de <Hw_I2C_IMU_WriteRegs+0x12a>
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 8002624:	4807      	ldr	r0, [pc, #28]	; (8002644 <Hw_I2C_IMU_WriteRegs+0x190>)
 8002626:	4780      	blx	r0
 8002628:	e7d9      	b.n	80025de <Hw_I2C_IMU_WriteRegs+0x12a>
			//Lb_printf("S2 %x\n", REG_I2C1_SR2);
				
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 800262a:	2004      	movs	r0, #4
 800262c:	e7d7      	b.n	80025de <Hw_I2C_IMU_WriteRegs+0x12a>
					Err = HW_I2C_ERR_STOP;
					break;
				}
			}

			SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 800262e:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8002632:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002636:	680a      	ldr	r2, [r1, #0]
 8002638:	f442 7300 	orr.w	r3, r2, #512	; 0x200
 800263c:	600b      	str	r3, [r1, #0]
 800263e:	e7f1      	b.n	8002624 <Hw_I2C_IMU_WriteRegs+0x170>
			if( len > 0 )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, 10000 );	// BTF
				if( Ret != 0 ) 
				{
					Err = HW_I2C_ERR_STOP;
 8002640:	2006      	movs	r0, #6
 8002642:	e7cc      	b.n	80025de <Hw_I2C_IMU_WriteRegs+0x12a>
 8002644:	080021d9 	.word	0x080021d9

08002648 <Hw_I2C_IMU_MPU6050_WriteReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_WriteReg( u8 reg_addr, u8 reg_data )
{
 8002648:	b510      	push	{r4, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	4603      	mov	r3, r0
 800264e:	aa02      	add	r2, sp, #8
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, &reg_data, 1 );
 8002650:	f242 44b5 	movw	r4, #9397	; 0x24b5
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_WriteReg( u8 reg_addr, u8 reg_data )
{
 8002654:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, &reg_data, 1 );
 8002658:	2068      	movs	r0, #104	; 0x68
 800265a:	4619      	mov	r1, r3
 800265c:	f6c0 0400 	movt	r4, #2048	; 0x800
 8002660:	2301      	movs	r3, #1
 8002662:	47a0      	blx	r4
}
 8002664:	b002      	add	sp, #8
 8002666:	bd10      	pop	{r4, pc}

08002668 <Hw_MPU6050_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_MPU6050_Init( void )
{
 8002668:	b510      	push	{r4, lr}
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE ) return TRUE;
 800266a:	4c12      	ldr	r4, [pc, #72]	; (80026b4 <Hw_MPU6050_Init+0x4c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_MPU6050_Init( void )
{
 800266c:	b086      	sub	sp, #24
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE ) return TRUE;
 800266e:	7820      	ldrb	r0, [r4, #0]
 8002670:	2801      	cmp	r0, #1
 8002672:	d010      	beq.n	8002696 <Hw_MPU6050_Init+0x2e>


	Hw_Wait_ms(36);
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <Hw_MPU6050_Init+0x50>)
 8002676:	2024      	movs	r0, #36	; 0x24
 8002678:	4798      	blx	r3


	//-- I2C 초기화
	//
	Hw_I2C_IMU_Init();	
 800267a:	4810      	ldr	r0, [pc, #64]	; (80026bc <Hw_MPU6050_Init+0x54>)
 800267c:	4780      	blx	r0


	while(1)
	{

		Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_WHO_AM_I, RegData );
 800267e:	a901      	add	r1, sp, #4
 8002680:	2075      	movs	r0, #117	; 0x75
 8002682:	4a0f      	ldr	r2, [pc, #60]	; (80026c0 <Hw_MPU6050_Init+0x58>)
 8002684:	4790      	blx	r2
		if( Err != 0 )
 8002686:	4601      	mov	r1, r0
 8002688:	b138      	cbz	r0, 800269a <Hw_MPU6050_Init+0x32>
		{
			Lb_printf("Can't find MPU6050 \n");
 800268a:	480e      	ldr	r0, [pc, #56]	; (80026c4 <Hw_MPU6050_Init+0x5c>)
 800268c:	490e      	ldr	r1, [pc, #56]	; (80026c8 <Hw_MPU6050_Init+0x60>)
 800268e:	4788      	blx	r1
		}

		break;
	}

	power_on = TRUE;
 8002690:	2001      	movs	r0, #1
 8002692:	7020      	strb	r0, [r4, #0]


	if( Err != 0 ) Ret = FALSE;
 8002694:	2000      	movs	r0, #0


	return Ret;
}
 8002696:	b006      	add	sp, #24
 8002698:	bd10      	pop	{r4, pc}
			Lb_printf("Can't find MPU6050 \n");
			break;
		}


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
 800269a:	206b      	movs	r0, #107	; 0x6b
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <Hw_MPU6050_Init+0x64>)
 800269e:	4798      	blx	r3
		if( Err != 0 )
 80026a0:	4601      	mov	r1, r0
 80026a2:	b910      	cbnz	r0, 80026aa <Hw_MPU6050_Init+0x42>
		}

		break;
	}

	power_on = TRUE;
 80026a4:	2001      	movs	r0, #1
 80026a6:	7020      	strb	r0, [r4, #0]
 80026a8:	e7f5      	b.n	8002696 <Hw_MPU6050_Init+0x2e>


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
		if( Err != 0 )
		{
			Lb_printf("Err write MPU6050_RA_PWR_MGMT_1 : %d\n", Err);
 80026aa:	4809      	ldr	r0, [pc, #36]	; (80026d0 <Hw_MPU6050_Init+0x68>)
 80026ac:	4a06      	ldr	r2, [pc, #24]	; (80026c8 <Hw_MPU6050_Init+0x60>)
 80026ae:	4790      	blx	r2
			break;
 80026b0:	e7ee      	b.n	8002690 <Hw_MPU6050_Init+0x28>
 80026b2:	bf00      	nop
 80026b4:	20000286 	.word	0x20000286
 80026b8:	08001091 	.word	0x08001091
 80026bc:	08002155 	.word	0x08002155
 80026c0:	0800249d 	.word	0x0800249d
 80026c4:	080045e4 	.word	0x080045e4
 80026c8:	08000c19 	.word	0x08000c19
 80026cc:	08002649 	.word	0x08002649
 80026d0:	080045fc 	.word	0x080045fc

080026d4 <Hw_MPU6050_GetData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_GetData( HW_MPU6050_DATA_OBJ *ptr_data )
{
 80026d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d8:	b089      	sub	sp, #36	; 0x24
 80026da:	4604      	mov	r4, r0
	s16 Temp;

	HW_MPU6050_RAW_DATA_OBJ raw_data;


	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );
 80026dc:	a904      	add	r1, sp, #16
 80026de:	203b      	movs	r0, #59	; 0x3b
 80026e0:	220e      	movs	r2, #14
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <Hw_MPU6050_GetData+0xa8>)
 80026e4:	4798      	blx	r3

	if( Err == 0 )
 80026e6:	2800      	cmp	r0, #0
 80026e8:	d145      	bne.n	8002776 <Hw_MPU6050_GetData+0xa2>

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
 80026ea:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80026ee:	f89d 1017 	ldrb.w	r1, [sp, #23]
		Temp = Temp/340 + 36;
 80026f2:	f246 0b61 	movw	fp, #24673	; 0x6061

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
 80026f6:	ea41 2502 	orr.w	r5, r1, r2, lsl #8
		Temp = Temp/340 + 36;
 80026fa:	b22b      	sxth	r3, r5
 80026fc:	f2c6 0b60 	movt	fp, #24672	; 0x6060
 8002700:	fb8b 2b03 	smull	r2, fp, fp, r3
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8002704:	f89d 2019 	ldrb.w	r2, [sp, #25]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8002708:	f89d 101a 	ldrb.w	r1, [sp, #26]
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 800270c:	9201      	str	r2, [sp, #4]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 800270e:	f89d 201b 	ldrb.w	r2, [sp, #27]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 8002712:	f89d a010 	ldrb.w	sl, [sp, #16]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8002716:	f89d 8012 	ldrb.w	r8, [sp, #18]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 800271a:	f89d 7014 	ldrb.w	r7, [sp, #20]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 800271e:	f89d 9011 	ldrb.w	r9, [sp, #17]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8002722:	f89d c013 	ldrb.w	ip, [sp, #19]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 8002726:	f89d 6015 	ldrb.w	r6, [sp, #21]

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 800272a:	9102      	str	r1, [sp, #8]
 800272c:	9203      	str	r2, [sp, #12]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 800272e:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8002732:	ea4c 2e08 	orr.w	lr, ip, r8, lsl #8
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 8002736:	ea46 2607 	orr.w	r6, r6, r7, lsl #8

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 800273a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800273e:	9f01      	ldr	r7, [sp, #4]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8002740:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8002744:	f89d 201d 	ldrb.w	r2, [sp, #29]

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8002748:	17db      	asrs	r3, r3, #31
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 800274a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800274e:	f8dd a008 	ldr.w	sl, [sp, #8]
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8002752:	ebc3 13eb 	rsb	r3, r3, fp, asr #7
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8002756:	ea47 2505 	orr.w	r5, r7, r5, lsl #8
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 800275a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 800275e:	ea48 270a 	orr.w	r7, r8, sl, lsl #8
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8002762:	3324      	adds	r3, #36	; 0x24

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 8002764:	f8a4 9000 	strh.w	r9, [r4]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8002768:	f8a4 e002 	strh.w	lr, [r4, #2]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 800276c:	80a6      	strh	r6, [r4, #4]

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 800276e:	8125      	strh	r5, [r4, #8]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8002770:	8167      	strh	r7, [r4, #10]
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8002772:	81a1      	strh	r1, [r4, #12]

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
		ptr_data->Temp = Temp;
 8002774:	80e3      	strh	r3, [r4, #6]
	}

	return Err;
}
 8002776:	b009      	add	sp, #36	; 0x24
 8002778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800277c:	08002481 	.word	0x08002481

08002780 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8002780:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <EP1_IN_Callback+0x58>)
 8002784:	781a      	ldrb	r2, [r3, #0]
 8002786:	2a01      	cmp	r2, #1
 8002788:	d000      	beq.n	800278c <EP1_IN_Callback+0xc>
 800278a:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 800278c:	4c13      	ldr	r4, [pc, #76]	; (80027dc <EP1_IN_Callback+0x5c>)
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	b300      	cbz	r0, 80027d4 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8002792:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002794:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8002796:	d814      	bhi.n	80027c2 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002798:	6811      	ldr	r1, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 800279a:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 800279c:	1808      	adds	r0, r1, r0
 800279e:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 80027a0:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 80027a2:	b28b      	uxth	r3, r1
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 80027a4:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80027a6:	480f      	ldr	r0, [pc, #60]	; (80027e4 <EP1_IN_Callback+0x64>)
 80027a8:	21c0      	movs	r1, #192	; 0xc0
 80027aa:	18c0      	adds	r0, r0, r3
 80027ac:	462a      	mov	r2, r5
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <EP1_IN_Callback+0x68>)
 80027b0:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 80027b2:	2001      	movs	r0, #1
 80027b4:	4629      	mov	r1, r5
 80027b6:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <EP1_IN_Callback+0x6c>)
 80027b8:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 80027ba:	2001      	movs	r0, #1
 80027bc:	490c      	ldr	r1, [pc, #48]	; (80027f0 <EP1_IN_Callback+0x70>)
 80027be:	4788      	blx	r1
 80027c0:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 80027c2:	6815      	ldr	r5, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 80027c4:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 80027c6:	f105 0140 	add.w	r1, r5, #64	; 0x40
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 80027ca:	b2ab      	uxth	r3, r5
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 80027cc:	6020      	str	r0, [r4, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 80027ce:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 80027d0:	2540      	movs	r5, #64	; 0x40
 80027d2:	e7e8      	b.n	80027a6 <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 80027d4:	7018      	strb	r0, [r3, #0]
 80027d6:	bd38      	pop	{r3, r4, r5, pc}
 80027d8:	200002a8 	.word	0x200002a8
 80027dc:	200002b4 	.word	0x200002b4
 80027e0:	200002b0 	.word	0x200002b0
 80027e4:	20000bf0 	.word	0x20000bf0
 80027e8:	08003d69 	.word	0x08003d69
 80027ec:	08004019 	.word	0x08004019
 80027f0:	08003edd 	.word	0x08003edd

080027f4 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 80027f4:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 80027f6:	f640 3488 	movw	r4, #2952	; 0xb88
 80027fa:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80027fe:	f244 03d9 	movw	r3, #16601	; 0x40d9
 8002802:	4621      	mov	r1, r4
 8002804:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002808:	2003      	movs	r0, #3
 800280a:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 800280c:	f243 2209 	movw	r2, #12809	; 0x3209
 8002810:	b2c1      	uxtb	r1, r0
 8002812:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002816:	4620      	mov	r0, r4
 8002818:	4790      	blx	r2
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 800281a:	f643 7101 	movw	r1, #16129	; 0x3f01
 800281e:	2003      	movs	r0, #3
 8002820:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002824:	4788      	blx	r1
 8002826:	bd10      	pop	{r4, pc}

08002828 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 8002828:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <SOF_Callback+0x24>)
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	2805      	cmp	r0, #5
 8002830:	d000      	beq.n	8002834 <SOF_Callback+0xc>
 8002832:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <SOF_Callback+0x28>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	1c51      	adds	r1, r2, #1
 800283a:	2a05      	cmp	r2, #5
 800283c:	6019      	str	r1, [r3, #0]
 800283e:	d1f8      	bne.n	8002832 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8002840:	2000      	movs	r0, #0
 8002842:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <SOF_Callback+0x2c>)
 8002846:	4798      	blx	r3
 8002848:	e7f3      	b.n	8002832 <SOF_Callback+0xa>
 800284a:	bf00      	nop
 800284c:	2000029c 	.word	0x2000029c
 8002850:	20000288 	.word	0x20000288
 8002854:	08003279 	.word	0x08003279

08002858 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8002858:	f645 4244 	movw	r2, #23620	; 0x5c44
 800285c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002860:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8002862:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8002864:	4c8f      	ldr	r4, [pc, #572]	; (8002aa4 <USB_Istr+0x24c>)
 8002866:	b298      	uxth	r0, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8002868:	4d8f      	ldr	r5, [pc, #572]	; (8002aa8 <USB_Istr+0x250>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800286a:	8020      	strh	r0, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800286c:	8821      	ldrh	r1, [r4, #0]
 800286e:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8002870:	b089      	sub	sp, #36	; 0x24
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8002872:	4019      	ands	r1, r3
 8002874:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8002878:	b281      	uxth	r1, r0
 800287a:	2900      	cmp	r1, #0
 800287c:	d168      	bne.n	8002950 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800287e:	8822      	ldrh	r2, [r4, #0]
 8002880:	f402 4100 	and.w	r1, r2, #32768	; 0x8000
 8002884:	420b      	tst	r3, r1
 8002886:	d15f      	bne.n	8002948 <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8002888:	8822      	ldrh	r2, [r4, #0]
 800288a:	f402 6180 	and.w	r1, r2, #1024	; 0x400
 800288e:	420b      	tst	r3, r1
 8002890:	d14e      	bne.n	8002930 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8002892:	8820      	ldrh	r0, [r4, #0]
 8002894:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
 8002898:	4213      	tst	r3, r2
 800289a:	d006      	beq.n	80028aa <USB_Istr+0x52>
  {
    _SetISTR((uint16_t)CLR_ERR);
 800289c:	f645 4044 	movw	r0, #23620	; 0x5c44
 80028a0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80028a4:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 80028a8:	6001      	str	r1, [r0, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 80028aa:	8822      	ldrh	r2, [r4, #0]
 80028ac:	f402 5080 	and.w	r0, r2, #4096	; 0x1000
 80028b0:	4203      	tst	r3, r0
 80028b2:	d131      	bne.n	8002918 <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 80028b4:	8820      	ldrh	r0, [r4, #0]
 80028b6:	f400 6100 	and.w	r1, r0, #2048	; 0x800
 80028ba:	420b      	tst	r3, r1
 80028bc:	d00e      	beq.n	80028dc <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 80028be:	4b7b      	ldr	r3, [pc, #492]	; (8002aac <USB_Istr+0x254>)
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	2a00      	cmp	r2, #0
 80028c4:	d125      	bne.n	8002912 <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 80028c6:	2002      	movs	r0, #2
 80028c8:	4979      	ldr	r1, [pc, #484]	; (8002ab0 <USB_Istr+0x258>)
 80028ca:	4788      	blx	r1
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 80028cc:	f645 4244 	movw	r2, #23620	; 0x5c44
 80028d0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80028d4:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 80028d8:	882b      	ldrh	r3, [r5, #0]
 80028da:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 80028dc:	8820      	ldrh	r0, [r4, #0]
 80028de:	f400 7280 	and.w	r2, r0, #256	; 0x100
 80028e2:	4213      	tst	r3, r2
 80028e4:	d013      	beq.n	800290e <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 80028e6:	f645 4344 	movw	r3, #23620	; 0x5c44
 80028ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 80028ee:	f645 4048 	movw	r0, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 80028f2:	f64f 61ff 	movw	r1, #65279	; 0xfeff
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 80028f6:	f2c4 0000 	movt	r0, #16384	; 0x4000

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 80028fa:	6019      	str	r1, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 80028fc:	6802      	ldr	r2, [r0, #0]
 80028fe:	0410      	lsls	r0, r2, #16
 8002900:	d432      	bmi.n	8002968 <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8002902:	4b6c      	ldr	r3, [pc, #432]	; (8002ab4 <USB_Istr+0x25c>)
 8002904:	2000      	movs	r0, #0
 8002906:	6018      	str	r0, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8002908:	2007      	movs	r0, #7
 800290a:	4b69      	ldr	r3, [pc, #420]	; (8002ab0 <USB_Istr+0x258>)
 800290c:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800290e:	b009      	add	sp, #36	; 0x24
 8002910:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 8002912:	4869      	ldr	r0, [pc, #420]	; (8002ab8 <USB_Istr+0x260>)
 8002914:	4780      	blx	r0
 8002916:	e7d9      	b.n	80028cc <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8002918:	f645 4344 	movw	r3, #23620	; 0x5c44
 800291c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002920:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8002924:	6019      	str	r1, [r3, #0]
    Resume(RESUME_EXTERNAL);
 8002926:	2000      	movs	r0, #0
 8002928:	4a61      	ldr	r2, [pc, #388]	; (8002ab0 <USB_Istr+0x258>)
 800292a:	4790      	blx	r2
 800292c:	882b      	ldrh	r3, [r5, #0]
 800292e:	e7c1      	b.n	80028b4 <USB_Istr+0x5c>
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
    Device_Property.Reset();
 8002930:	4a62      	ldr	r2, [pc, #392]	; (8002abc <USB_Istr+0x264>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8002932:	f645 4344 	movw	r3, #23620	; 0x5c44
 8002936:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800293a:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 800293e:	6018      	str	r0, [r3, #0]
    Device_Property.Reset();
 8002940:	6851      	ldr	r1, [r2, #4]
 8002942:	4788      	blx	r1
 8002944:	882b      	ldrh	r3, [r5, #0]
 8002946:	e7a4      	b.n	8002892 <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8002948:	485d      	ldr	r0, [pc, #372]	; (8002ac0 <USB_Istr+0x268>)
 800294a:	4780      	blx	r0
 800294c:	882b      	ldrh	r3, [r5, #0]
 800294e:	e79b      	b.n	8002888 <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8002950:	4b5c      	ldr	r3, [pc, #368]	; (8002ac4 <USB_Istr+0x26c>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8002952:	f64f 50ff 	movw	r0, #65023	; 0xfdff
 8002956:	6010      	str	r0, [r2, #0]
    bIntPackSOF++;
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	1c51      	adds	r1, r2, #1
 800295c:	b2c8      	uxtb	r0, r1
 800295e:	7018      	strb	r0, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8002960:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <USB_Istr+0x270>)
 8002962:	4798      	blx	r3
 8002964:	882b      	ldrh	r3, [r5, #0]
 8002966:	e78a      	b.n	800287e <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8002968:	4852      	ldr	r0, [pc, #328]	; (8002ab4 <USB_Istr+0x25c>)
 800296a:	6801      	ldr	r1, [r0, #0]
 800296c:	1c4a      	adds	r2, r1, #1
 800296e:	6002      	str	r2, [r0, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8002970:	6801      	ldr	r1, [r0, #0]
 8002972:	2903      	cmp	r1, #3
 8002974:	d9c8      	bls.n	8002908 <USB_Istr+0xb0>
 8002976:	f645 4240 	movw	r2, #23616	; 0x5c40
 800297a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800297e:	6811      	ldr	r1, [r2, #0]
 8002980:	0709      	lsls	r1, r1, #28
 8002982:	d4c1      	bmi.n	8002908 <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8002984:	6815      	ldr	r5, [r2, #0]
 8002986:	4951      	ldr	r1, [pc, #324]	; (8002acc <USB_Istr+0x274>)
 8002988:	b2ad      	uxth	r5, r5
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800298a:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 800298e:	600d      	str	r5, [r1, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002990:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002994:	6825      	ldr	r5, [r4, #0]
 8002996:	f645 4404 	movw	r4, #23556	; 0x5c04
 800299a:	b2ad      	uxth	r5, r5
 800299c:	9500      	str	r5, [sp, #0]
 800299e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80029a2:	6825      	ldr	r5, [r4, #0]
 80029a4:	f645 4408 	movw	r4, #23560	; 0x5c08
 80029a8:	b2ad      	uxth	r5, r5
 80029aa:	9501      	str	r5, [sp, #4]
 80029ac:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80029b0:	6825      	ldr	r5, [r4, #0]
 80029b2:	f645 440c 	movw	r4, #23564	; 0x5c0c
 80029b6:	b2ad      	uxth	r5, r5
 80029b8:	9502      	str	r5, [sp, #8]
 80029ba:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80029be:	6825      	ldr	r5, [r4, #0]
 80029c0:	f645 4410 	movw	r4, #23568	; 0x5c10
 80029c4:	b2ad      	uxth	r5, r5
 80029c6:	9503      	str	r5, [sp, #12]
 80029c8:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80029cc:	6825      	ldr	r5, [r4, #0]
 80029ce:	f645 4414 	movw	r4, #23572	; 0x5c14
 80029d2:	b2ad      	uxth	r5, r5
 80029d4:	9504      	str	r5, [sp, #16]
 80029d6:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80029da:	6825      	ldr	r5, [r4, #0]
 80029dc:	f645 4418 	movw	r4, #23576	; 0x5c18
 80029e0:	b2ad      	uxth	r5, r5
 80029e2:	9505      	str	r5, [sp, #20]
 80029e4:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80029e8:	6825      	ldr	r5, [r4, #0]
 80029ea:	f645 441c 	movw	r4, #23580	; 0x5c1c
 80029ee:	b2ad      	uxth	r5, r5
 80029f0:	9506      	str	r5, [sp, #24]
 80029f2:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80029f6:	6824      	ldr	r4, [r4, #0]
 80029f8:	b2a4      	uxth	r4, r4
 80029fa:	9407      	str	r4, [sp, #28]
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 80029fc:	680c      	ldr	r4, [r1, #0]
 80029fe:	f044 0401 	orr.w	r4, r4, #1
 8002a02:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 8002a04:	680c      	ldr	r4, [r1, #0]
 8002a06:	b2a4      	uxth	r4, r4
 8002a08:	6014      	str	r4, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8002a0a:	680c      	ldr	r4, [r1, #0]
 8002a0c:	f024 0401 	bic.w	r4, r4, #1
 8002a10:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 8002a12:	6809      	ldr	r1, [r1, #0]
 8002a14:	b289      	uxth	r1, r1
 8002a16:	6011      	str	r1, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	f645 4244 	movw	r2, #23620	; 0x5c44
 8002a1e:	0549      	lsls	r1, r1, #21
 8002a20:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002a24:	d5f8      	bpl.n	8002a18 <USB_Istr+0x1c0>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8002a26:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8002a2a:	6013      	str	r3, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8002a2c:	9900      	ldr	r1, [sp, #0]
 8002a2e:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8002a32:	b28a      	uxth	r2, r1
 8002a34:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	9901      	ldr	r1, [sp, #4]
 8002a3c:	f645 4304 	movw	r3, #23556	; 0x5c04
 8002a40:	b28a      	uxth	r2, r1
 8002a42:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	9902      	ldr	r1, [sp, #8]
 8002a4a:	f645 4308 	movw	r3, #23560	; 0x5c08
 8002a4e:	b28a      	uxth	r2, r1
 8002a50:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	9903      	ldr	r1, [sp, #12]
 8002a58:	f645 430c 	movw	r3, #23564	; 0x5c0c
 8002a5c:	b28a      	uxth	r2, r1
 8002a5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	9904      	ldr	r1, [sp, #16]
 8002a66:	f645 4310 	movw	r3, #23568	; 0x5c10
 8002a6a:	b28a      	uxth	r2, r1
 8002a6c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	9905      	ldr	r1, [sp, #20]
 8002a74:	f645 4314 	movw	r3, #23572	; 0x5c14
 8002a78:	b28a      	uxth	r2, r1
 8002a7a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	9906      	ldr	r1, [sp, #24]
 8002a82:	f645 4318 	movw	r3, #23576	; 0x5c18
 8002a86:	b28a      	uxth	r2, r1
 8002a88:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	9907      	ldr	r1, [sp, #28]
 8002a90:	f645 431c 	movw	r3, #23580	; 0x5c1c
 8002a94:	b28a      	uxth	r2, r1
 8002a96:	f2c4 0300 	movt	r3, #16384	; 0x4000
      
        esof_counter = 0;
 8002a9a:	2100      	movs	r1, #0
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8002a9c:	601a      	str	r2, [r3, #0]
      
        esof_counter = 0;
 8002a9e:	6001      	str	r1, [r0, #0]
 8002aa0:	e732      	b.n	8002908 <USB_Istr+0xb0>
 8002aa2:	bf00      	nop
 8002aa4:	20000bc8 	.word	0x20000bc8
 8002aa8:	20001424 	.word	0x20001424
 8002aac:	200002a0 	.word	0x200002a0
 8002ab0:	08002f85 	.word	0x08002f85
 8002ab4:	20000294 	.word	0x20000294
 8002ab8:	08002db5 	.word	0x08002db5
 8002abc:	20000060 	.word	0x20000060
 8002ac0:	08004111 	.word	0x08004111
 8002ac4:	20000290 	.word	0x20000290
 8002ac8:	08002829 	.word	0x08002829
 8002acc:	2000028c 	.word	0x2000028c

08002ad0 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <Virtual_Com_Port_SetConfiguration+0x10>)
 8002ad2:	7a98      	ldrb	r0, [r3, #10]
 8002ad4:	b110      	cbz	r0, 8002adc <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8002ad6:	4903      	ldr	r1, [pc, #12]	; (8002ae4 <Virtual_Com_Port_SetConfiguration+0x14>)
 8002ad8:	2205      	movs	r2, #5
 8002ada:	600a      	str	r2, [r1, #0]
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20001400 	.word	0x20001400
 8002ae4:	2000029c 	.word	0x2000029c

08002ae8 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8002ae8:	f240 239c 	movw	r3, #668	; 0x29c
 8002aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002af0:	2204      	movs	r2, #4
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop

08002af8 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <Virtual_Com_Port_Status_In+0x10>)
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	2a20      	cmp	r2, #32
 8002afe:	d101      	bne.n	8002b04 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8002b00:	2000      	movs	r0, #0
 8002b02:	7018      	strb	r0, [r3, #0]
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000298 	.word	0x20000298

08002b0c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop

08002b10 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8002b10:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8002b12:	b510      	push	{r4, lr}
 8002b14:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8002b16:	d003      	beq.n	8002b20 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8002b18:	2820      	cmp	r0, #32
 8002b1a:	d011      	beq.n	8002b40 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002b20:	4a0f      	ldr	r2, [pc, #60]	; (8002b60 <Virtual_Com_Port_Data_Setup+0x50>)
 8002b22:	6813      	ldr	r3, [r2, #0]
 8002b24:	7818      	ldrb	r0, [r3, #0]
 8002b26:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8002b2a:	2921      	cmp	r1, #33	; 0x21
 8002b2c:	d1f6      	bne.n	8002b1c <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8002b2e:	490d      	ldr	r1, [pc, #52]	; (8002b64 <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002b30:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8002b32:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 8002b34:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002b36:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8002b38:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8002b3a:	4788      	blx	r1
  return USB_SUCCESS;
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002b40:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <Virtual_Com_Port_Data_Setup+0x50>)
 8002b42:	6811      	ldr	r1, [r2, #0]
 8002b44:	7808      	ldrb	r0, [r1, #0]
 8002b46:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8002b4a:	2921      	cmp	r1, #33	; 0x21
 8002b4c:	d003      	beq.n	8002b56 <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8002b4e:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8002b50:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8002b52:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8002b54:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8002b56:	4c04      	ldr	r4, [pc, #16]	; (8002b68 <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8002b58:	4904      	ldr	r1, [pc, #16]	; (8002b6c <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 8002b5a:	7023      	strb	r3, [r4, #0]
 8002b5c:	e7e8      	b.n	8002b30 <Virtual_Com_Port_Data_Setup+0x20>
 8002b5e:	bf00      	nop
 8002b60:	20001420 	.word	0x20001420
 8002b64:	08002ba5 	.word	0x08002ba5
 8002b68:	20000298 	.word	0x20000298
 8002b6c:	08002bbd 	.word	0x08002bbd

08002b70 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <Virtual_Com_Port_NoData_Setup+0x20>)
 8002b72:	6819      	ldr	r1, [r3, #0]
 8002b74:	780a      	ldrb	r2, [r1, #0]
 8002b76:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8002b7a:	2b21      	cmp	r3, #33	; 0x21
 8002b7c:	d001      	beq.n	8002b82 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8002b7e:	2002      	movs	r0, #2
}
 8002b80:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8002b82:	2802      	cmp	r0, #2
 8002b84:	d001      	beq.n	8002b8a <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 8002b86:	2822      	cmp	r0, #34	; 0x22
 8002b88:	d1f9      	bne.n	8002b7e <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20001420 	.word	0x20001420

08002b94 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8002b94:	b109      	cbz	r1, 8002b9a <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 8002b96:	2002      	movs	r0, #2
 8002b98:	4770      	bx	lr
  }
  else if (Interface > 1)
 8002b9a:	2801      	cmp	r0, #1
 8002b9c:	d8fb      	bhi.n	8002b96 <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8002b9e:	4608      	mov	r0, r1
}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop

08002ba4 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002ba4:	b108      	cbz	r0, 8002baa <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8002ba6:	4803      	ldr	r0, [pc, #12]	; (8002bb4 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8002ba8:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002baa:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <Virtual_Com_Port_GetLineCoding+0x14>)
 8002bac:	2208      	movs	r2, #8
 8002bae:	6819      	ldr	r1, [r3, #0]
 8002bb0:	820a      	strh	r2, [r1, #16]
    return NULL;
 8002bb2:	4770      	bx	lr
 8002bb4:	200000dc 	.word	0x200000dc
 8002bb8:	20001420 	.word	0x20001420

08002bbc <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002bbc:	b108      	cbz	r0, 8002bc2 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8002bbe:	4803      	ldr	r0, [pc, #12]	; (8002bcc <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8002bc0:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002bc2:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <Virtual_Com_Port_SetLineCoding+0x14>)
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	820a      	strh	r2, [r1, #16]
    return NULL;
 8002bca:	4770      	bx	lr
 8002bcc:	200000dc 	.word	0x200000dc
 8002bd0:	20001420 	.word	0x20001420

08002bd4 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8002bd4:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8002bd8:	6819      	ldr	r1, [r3, #0]
 8002bda:	78ca      	ldrb	r2, [r1, #3]
  if (wValue0 > 4)
 8002bdc:	2a04      	cmp	r2, #4
 8002bde:	d805      	bhi.n	8002bec <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8002be2:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8002be6:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8002be8:	4790      	blx	r2
 8002bea:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 8002bec:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 8002bee:	bd08      	pop	{r3, pc}
 8002bf0:	20001420 	.word	0x20001420
 8002bf4:	200000bc 	.word	0x200000bc
 8002bf8:	08003731 	.word	0x08003731

08002bfc <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8002bfc:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8002bfe:	f240 0158 	movw	r1, #88	; 0x58
 8002c02:	f243 7331 	movw	r3, #14129	; 0x3731
 8002c06:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002c0a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002c0e:	4798      	blx	r3
}
 8002c10:	bd08      	pop	{r3, pc}
 8002c12:	bf00      	nop

08002c14 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8002c14:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8002c16:	f240 01b4 	movw	r1, #180	; 0xb4
 8002c1a:	f243 7331 	movw	r3, #14129	; 0x3731
 8002c1e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002c22:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002c26:	4798      	blx	r3
}
 8002c28:	bd08      	pop	{r3, pc}
 8002c2a:	bf00      	nop

08002c2c <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002c2c:	f241 4220 	movw	r2, #5152	; 0x1420

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002c30:	f244 6398 	movw	r3, #18072	; 0x4698
 8002c34:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002c38:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002c3c:	6810      	ldr	r0, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002c3e:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8002c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002c44:	2400      	movs	r4, #0
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8002c46:	f643 6531 	movw	r5, #15921	; 0x3e31
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002c4a:	7241      	strb	r1, [r0, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002c4c:	7284      	strb	r4, [r0, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8002c4e:	72c4      	strb	r4, [r0, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8002c50:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002c54:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8002c56:	f643 6645 	movw	r6, #15941	; 0x3e45
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8002c5a:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8002c5c:	f6c0 0600 	movt	r6, #2048	; 0x800
 8002c60:	4620      	mov	r0, r4
 8002c62:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8002c66:	f643 655d 	movw	r5, #15965	; 0x3e5d
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8002c6a:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8002c6c:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002c70:	2110      	movs	r1, #16
 8002c72:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8002c74:	f643 7ab1 	movw	sl, #16305	; 0x3fb1

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8002c78:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8002c7a:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8002c7e:	2140      	movs	r1, #64	; 0x40
 8002c80:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002c82:	f643 788d 	movw	r8, #16269	; 0x3f8d
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8002c86:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002c88:	f6c0 0800 	movt	r8, #2048	; 0x800
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	4620      	mov	r0, r4
  Clear_Status_Out(ENDP0);
 8002c90:	f643 7725 	movw	r7, #16165	; 0x3f25

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002c94:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8002c96:	f6c0 0700 	movt	r7, #2048	; 0x800
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	47b8      	blx	r7
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8002c9e:	f240 0260 	movw	r2, #96	; 0x60
 8002ca2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002ca6:	f244 0939 	movw	r9, #16441	; 0x4039
 8002caa:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8002cae:	f6c0 0900 	movt	r9, #2048	; 0x800
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8002cb6:	f643 7301 	movw	r3, #16129	; 0x3f01
 8002cba:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8002cc8:	2001      	movs	r0, #1
 8002cca:	21c0      	movs	r1, #192	; 0xc0
 8002ccc:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8002cce:	f643 679d 	movw	r7, #16029	; 0x3e9d
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	2120      	movs	r1, #32
 8002cd6:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8002cd8:	f6c0 0700 	movt	r7, #2048	; 0x800
 8002cdc:	2001      	movs	r0, #1
 8002cde:	4621      	mov	r1, r4
 8002ce0:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8002ce2:	2002      	movs	r0, #2
 8002ce4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ce8:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8002cea:	2002      	movs	r0, #2
 8002cec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cf0:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8002cf2:	2002      	movs	r0, #2
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8002cf8:	2002      	movs	r0, #2
 8002cfa:	2120      	movs	r1, #32
 8002cfc:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8002cfe:	2003      	movs	r0, #3
 8002d00:	4621      	mov	r1, r4
 8002d02:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8002d04:	2003      	movs	r0, #3
 8002d06:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002d0a:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8002d0c:	2003      	movs	r0, #3
 8002d0e:	2140      	movs	r1, #64	; 0x40
 8002d10:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8002d12:	2003      	movs	r0, #3
 8002d14:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002d18:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	2003      	movs	r0, #3
 8002d1e:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8002d20:	f643 410d 	movw	r1, #15373	; 0x3c0d
 8002d24:	4620      	mov	r0, r4
 8002d26:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002d2a:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 8002d2c:	f240 209c 	movw	r0, #668	; 0x29c
 8002d30:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d34:	2201      	movs	r2, #1
 8002d36:	6002      	str	r2, [r0, #0]
 8002d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002d3c <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8002d3c:	f243 331d 	movw	r3, #13085	; 0x331d
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8002d40:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8002d42:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002d46:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 8002d48:	f241 4020 	movw	r0, #5152	; 0x1420
 8002d4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d50:	6802      	ldr	r2, [r0, #0]
 8002d52:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 8002d54:	f642 5179 	movw	r1, #11641	; 0x2d79

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8002d58:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 8002d5a:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002d5e:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8002d60:	f244 03ad 	movw	r3, #16557	; 0x40ad
 8002d64:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002d68:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 8002d6a:	f240 209c 	movw	r0, #668	; 0x29c
 8002d6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d72:	6004      	str	r4, [r0, #0]
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	bf00      	nop

08002d78 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8002d78:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8002d7a:	f243 13ed 	movw	r3, #12781	; 0x31ed
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002d84:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8002d86:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8002d8a:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002d8e:	f241 4224 	movw	r2, #5156	; 0x1424
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8002d92:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8002d96:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002d98:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8002d9c:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8002d9e:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002da2:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8002da6:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8002da8:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 8002daa:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8002dac:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002dae:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 8002db0:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 8002db2:	bd38      	pop	{r3, r4, r5, pc}

08002db4 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8002db4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8002db6:	2100      	movs	r1, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8002db8:	b083      	sub	sp, #12
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8002dba:	f645 4340 	movw	r3, #23616	; 0x5c40

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002dbe:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8002dc2:	9101      	str	r1, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8002dc4:	f2c4 0300 	movt	r3, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002dc8:	f2c4 0200 	movt	r2, #16384	; 0x4000
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8002dcc:	6818      	ldr	r0, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002dce:	6814      	ldr	r4, [r2, #0]
 8002dd0:	4960      	ldr	r1, [pc, #384]	; (8002f54 <Suspend+0x1a0>)
 8002dd2:	b2a5      	uxth	r5, r4
 8002dd4:	f645 4604 	movw	r6, #23556	; 0x5c04
 8002dd8:	600d      	str	r5, [r1, #0]
 8002dda:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8002dde:	6837      	ldr	r7, [r6, #0]
 8002de0:	f645 4208 	movw	r2, #23560	; 0x5c08
 8002de4:	b2bc      	uxth	r4, r7
 8002de6:	604c      	str	r4, [r1, #4]
 8002de8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002dec:	6815      	ldr	r5, [r2, #0]
 8002dee:	f645 460c 	movw	r6, #23564	; 0x5c0c
 8002df2:	b2af      	uxth	r7, r5
 8002df4:	608f      	str	r7, [r1, #8]
 8002df6:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8002dfa:	6834      	ldr	r4, [r6, #0]
 8002dfc:	f645 4210 	movw	r2, #23568	; 0x5c10
 8002e00:	b2a5      	uxth	r5, r4
 8002e02:	60cd      	str	r5, [r1, #12]
 8002e04:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002e08:	6816      	ldr	r6, [r2, #0]
 8002e0a:	f645 4714 	movw	r7, #23572	; 0x5c14
 8002e0e:	b2b4      	uxth	r4, r6
 8002e10:	610c      	str	r4, [r1, #16]
 8002e12:	f2c4 0700 	movt	r7, #16384	; 0x4000
 8002e16:	683d      	ldr	r5, [r7, #0]
 8002e18:	f645 4218 	movw	r2, #23576	; 0x5c18
 8002e1c:	b2ae      	uxth	r6, r5
 8002e1e:	614e      	str	r6, [r1, #20]
 8002e20:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002e24:	6817      	ldr	r7, [r2, #0]
 8002e26:	f645 451c 	movw	r5, #23580	; 0x5c1c
 8002e2a:	b2bc      	uxth	r4, r7
 8002e2c:	618c      	str	r4, [r1, #24]
 8002e2e:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002e32:	682e      	ldr	r6, [r5, #0]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8002e34:	b282      	uxth	r2, r0
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8002e36:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8002e3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8002e3e:	4004      	ands	r4, r0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002e40:	b2b7      	uxth	r7, r6
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8002e42:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8002e46:	f042 0601 	orr.w	r6, r2, #1
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8002e4a:	f645 4044 	movw	r0, #23620	; 0x5c44
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002e4e:	61cf      	str	r7, [r1, #28]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8002e50:	f2c4 0000 	movt	r0, #16384	; 0x4000
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8002e54:	601a      	str	r2, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8002e56:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8002e58:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8002e5a:	6802      	ldr	r2, [r0, #0]
 8002e5c:	f645 4344 	movw	r3, #23620	; 0x5c44
 8002e60:	0552      	lsls	r2, r2, #21
 8002e62:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002e66:	d5f8      	bpl.n	8002e5a <Suspend+0xa6>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8002e68:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8002e6c:	6018      	str	r0, [r3, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8002e6e:	6808      	ldr	r0, [r1, #0]
 8002e70:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8002e74:	b280      	uxth	r0, r0
 8002e76:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002e7a:	6010      	str	r0, [r2, #0]
 8002e7c:	6848      	ldr	r0, [r1, #4]
 8002e7e:	f645 4204 	movw	r2, #23556	; 0x5c04
 8002e82:	b280      	uxth	r0, r0
 8002e84:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002e88:	6010      	str	r0, [r2, #0]
 8002e8a:	6888      	ldr	r0, [r1, #8]
 8002e8c:	f645 4208 	movw	r2, #23560	; 0x5c08
 8002e90:	b280      	uxth	r0, r0
 8002e92:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002e96:	6010      	str	r0, [r2, #0]
 8002e98:	68c8      	ldr	r0, [r1, #12]
 8002e9a:	f645 420c 	movw	r2, #23564	; 0x5c0c
 8002e9e:	b280      	uxth	r0, r0
 8002ea0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002ea4:	6010      	str	r0, [r2, #0]
 8002ea6:	6908      	ldr	r0, [r1, #16]
 8002ea8:	f645 4210 	movw	r2, #23568	; 0x5c10
 8002eac:	b280      	uxth	r0, r0
 8002eae:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002eb2:	6010      	str	r0, [r2, #0]
 8002eb4:	6948      	ldr	r0, [r1, #20]
 8002eb6:	f645 4214 	movw	r2, #23572	; 0x5c14
 8002eba:	b280      	uxth	r0, r0
 8002ebc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002ec0:	6010      	str	r0, [r2, #0]
 8002ec2:	6988      	ldr	r0, [r1, #24]
 8002ec4:	f645 4218 	movw	r2, #23576	; 0x5c18
 8002ec8:	b280      	uxth	r0, r0
 8002eca:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002ece:	6010      	str	r0, [r2, #0]
 8002ed0:	69c8      	ldr	r0, [r1, #28]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8002ed2:	f645 4240 	movw	r2, #23616	; 0x5c40
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8002ed6:	f645 411c 	movw	r1, #23580	; 0x5c1c
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8002eda:	f2c4 0200 	movt	r2, #16384	; 0x4000
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8002ede:	b280      	uxth	r0, r0
 8002ee0:	f2c4 0100 	movt	r1, #16384	; 0x4000
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 8002ee4:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8002ee8:	6008      	str	r0, [r1, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8002eea:	6014      	str	r4, [r2, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 8002eec:	6810      	ldr	r0, [r2, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002eee:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 8002ef2:	b284      	uxth	r4, r0
 8002ef4:	f044 0004 	orr.w	r0, r4, #4
 8002ef8:	6010      	str	r0, [r2, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002efa:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002efe:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8002f00:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002f04:	9001      	str	r0, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 8002f06:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8002f08:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 8002f0c:	f020 0003 	bic.w	r0, r0, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 8002f10:	f040 0001 	orr.w	r0, r0, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 8002f14:	6008      	str	r0, [r1, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8002f16:	6820      	ldr	r0, [r4, #0]
 8002f18:	f040 0004 	orr.w	r0, r0, #4
 8002f1c:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	04c0      	lsls	r0, r0, #19
 8002f22:	d50f      	bpl.n	8002f44 <Suspend+0x190>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 8002f24:	f64e 70ff 	movw	r0, #61439	; 0xefff
 8002f28:	6018      	str	r0, [r3, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 8002f2a:	6810      	ldr	r0, [r2, #0]
        wCNTR&=~CNTR_FSUSP;
 8002f2c:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8002f30:	4003      	ands	r3, r0
        _SetCNTR(wCNTR);
 8002f32:	6013      	str	r3, [r2, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 8002f34:	9a01      	ldr	r2, [sp, #4]
 8002f36:	600a      	str	r2, [r1, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 8002f38:	6821      	ldr	r1, [r4, #0]
 8002f3a:	f021 0004 	bic.w	r0, r1, #4
 8002f3e:	6020      	str	r0, [r4, #0]
#endif
    }
}
 8002f40:	b003      	add	sp, #12
 8002f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <Suspend+0x1a4>)
 8002f46:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	f022 0104 	bic.w	r1, r2, #4
 8002f4e:	6021      	str	r1, [r4, #0]
 8002f50:	e7f6      	b.n	8002f40 <Suspend+0x18c>
 8002f52:	bf00      	nop
 8002f54:	20000bd0 	.word	0x20000bd0
 8002f58:	08003361 	.word	0x08003361

08002f5c <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8002f5c:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8002f5e:	f645 4440 	movw	r4, #23616	; 0x5c40
 8002f62:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002f66:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 8002f68:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8002f6c:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8002f6e:	f243 101d 	movw	r0, #12573	; 0x311d
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8002f72:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8002f74:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002f78:	4780      	blx	r0

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8002f7a:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 8002f7e:	6021      	str	r1, [r4, #0]
 8002f80:	bd10      	pop	{r4, pc}
 8002f82:	bf00      	nop

08002f84 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8002f84:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 8002f86:	4c2b      	ldr	r4, [pc, #172]	; (8003034 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8002f88:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 8002f8a:	bf18      	it	ne
 8002f8c:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 8002f8e:	7823      	ldrb	r3, [r4, #0]
 8002f90:	2b05      	cmp	r3, #5
 8002f92:	d819      	bhi.n	8002fc8 <Resume+0x44>
 8002f94:	e8df f003 	tbb	[pc, r3]
 8002f98:	2f2a221b 	.word	0x2f2a221b
 8002f9c:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8002f9e:	7860      	ldrb	r0, [r4, #1]
 8002fa0:	1e41      	subs	r1, r0, #1
 8002fa2:	b2ca      	uxtb	r2, r1
 8002fa4:	7062      	strb	r2, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8002fa6:	7863      	ldrb	r3, [r4, #1]
 8002fa8:	b983      	cbnz	r3, 8002fcc <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 8002faa:	f645 4240 	movw	r2, #23616	; 0x5c40
 8002fae:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002fb2:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 8002fb4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002fb8:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 8002fba:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <Resume+0xb0>)
        remotewakeupon = 0;
 8002fbe:	491e      	ldr	r1, [pc, #120]	; (8003038 <Resume+0xb4>)
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 8002fc0:	2006      	movs	r0, #6
 8002fc2:	7010      	strb	r0, [r2, #0]
        remotewakeupon = 0;
 8002fc4:	600b      	str	r3, [r1, #0]
 8002fc6:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8002fc8:	2106      	movs	r1, #6
 8002fca:	7021      	strb	r1, [r4, #0]
 8002fcc:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 8002fce:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <Resume+0xb4>)
 8002fd0:	6811      	ldr	r1, [r2, #0]
 8002fd2:	2900      	cmp	r1, #0
 8002fd4:	d028      	beq.n	8003028 <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8002fd6:	2005      	movs	r0, #5
 8002fd8:	7020      	strb	r0, [r4, #0]
 8002fda:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 8002fdc:	4a17      	ldr	r2, [pc, #92]	; (800303c <Resume+0xb8>)
 8002fde:	4790      	blx	r2
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 8002fe0:	4b15      	ldr	r3, [pc, #84]	; (8003038 <Resume+0xb4>)
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8002fe2:	2104      	movs	r1, #4
      remotewakeupon = 1;
 8002fe4:	2001      	movs	r0, #1
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8002fe6:	7021      	strb	r1, [r4, #0]
      remotewakeupon = 1;
 8002fe8:	6018      	str	r0, [r3, #0]
      break;
 8002fea:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8002fec:	2302      	movs	r3, #2
      ResumeS.eState = RESUME_WAIT;
 8002fee:	2003      	movs	r0, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8002ff0:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8002ff2:	7020      	strb	r0, [r4, #0]
      break;
 8002ff4:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 8002ff6:	7862      	ldrb	r2, [r4, #1]
 8002ff8:	1e51      	subs	r1, r2, #1
 8002ffa:	b2cb      	uxtb	r3, r1
 8002ffc:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8002ffe:	7860      	ldrb	r0, [r4, #1]
 8003000:	2800      	cmp	r0, #0
 8003002:	d1e3      	bne.n	8002fcc <Resume+0x48>
        ResumeS.eState = RESUME_START;
 8003004:	490b      	ldr	r1, [pc, #44]	; (8003034 <Resume+0xb0>)
 8003006:	2204      	movs	r2, #4
 8003008:	700a      	strb	r2, [r1, #0]
 800300a:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 800300c:	f645 4340 	movw	r3, #23616	; 0x5c40
 8003010:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003014:	6818      	ldr	r0, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8003016:	b282      	uxth	r2, r0
 8003018:	f042 0110 	orr.w	r1, r2, #16
 800301c:	6019      	str	r1, [r3, #0]
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 800301e:	200a      	movs	r0, #10
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 8003020:	2305      	movs	r3, #5
 8003022:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 8003024:	7060      	strb	r0, [r4, #1]
      break;
 8003026:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <Resume+0xb8>)
 800302a:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 800302c:	2206      	movs	r2, #6
 800302e:	7022      	strb	r2, [r4, #0]
 8003030:	bd10      	pop	{r4, pc}
 8003032:	bf00      	nop
 8003034:	20000bcc 	.word	0x20000bcc
 8003038:	200002a4 	.word	0x200002a4
 800303c:	08002f5d 	.word	0x08002f5d

08003040 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8003040:	f240 4314 	movw	r3, #1044	; 0x414
 8003044:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003048:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	4770      	bx	lr

08003050 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8003050:	b470      	push	{r4, r5, r6}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003052:	b38a      	cbz	r2, 80030b8 <IntToUnicode+0x68>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8003054:	1e56      	subs	r6, r2, #1
 8003056:	b2f2      	uxtb	r2, r6
 8003058:	1c53      	adds	r3, r2, #1
 800305a:	005e      	lsls	r6, r3, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 800305c:	0f03      	lsrs	r3, r0, #28
 800305e:	1eb2      	subs	r2, r6, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003060:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003062:	2b09      	cmp	r3, #9
 8003064:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8003068:	d928      	bls.n	80030bc <IntToUnicode+0x6c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800306a:	3337      	adds	r3, #55	; 0x37
 800306c:	700b      	strb	r3, [r1, #0]
 800306e:	2302      	movs	r3, #2
    }
    
    value = value << 4;
 8003070:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003072:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003074:	704c      	strb	r4, [r1, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003076:	d01f      	beq.n	80030b8 <IntToUnicode+0x68>
 8003078:	b152      	cbz	r2, 8003090 <IntToUnicode+0x40>
  {
    if( ((value >> 28)) < 0xA )
 800307a:	0f02      	lsrs	r2, r0, #28
 800307c:	2a09      	cmp	r2, #9
 800307e:	d913      	bls.n	80030a8 <IntToUnicode+0x58>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8003080:	3237      	adds	r2, #55	; 0x37
 8003082:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8003084:	18ca      	adds	r2, r1, r3
 8003086:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8003088:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800308a:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800308c:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800308e:	d013      	beq.n	80030b8 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8003090:	0f05      	lsrs	r5, r0, #28
 8003092:	2d09      	cmp	r5, #9
 8003094:	d815      	bhi.n	80030c2 <IntToUnicode+0x72>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8003096:	3530      	adds	r5, #48	; 0x30
 8003098:	54cd      	strb	r5, [r1, r3]
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 800309a:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 800309c:	0f02      	lsrs	r2, r0, #28
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800309e:	18cd      	adds	r5, r1, r3
 80030a0:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80030a2:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80030a4:	706c      	strb	r4, [r5, #1]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80030a6:	d8eb      	bhi.n	8003080 <IntToUnicode+0x30>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80030a8:	3230      	adds	r2, #48	; 0x30
 80030aa:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80030ac:	18ca      	adds	r2, r1, r3
 80030ae:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80030b0:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80030b2:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80030b4:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80030b6:	d1eb      	bne.n	8003090 <IntToUnicode+0x40>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 80030b8:	bc70      	pop	{r4, r5, r6}
 80030ba:	4770      	bx	lr
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80030bc:	3330      	adds	r3, #48	; 0x30
 80030be:	700b      	strb	r3, [r1, #0]
 80030c0:	e7d5      	b.n	800306e <IntToUnicode+0x1e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80030c2:	3537      	adds	r5, #55	; 0x37
 80030c4:	54cd      	strb	r5, [r1, r3]
 80030c6:	e7e8      	b.n	800309a <IntToUnicode+0x4a>

080030c8 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 80030c8:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 80030ca:	f642 0359 	movw	r3, #10329	; 0x2859
 80030ce:	f6c0 0300 	movt	r3, #2048	; 0x800
 80030d2:	4798      	blx	r3
 80030d4:	bd08      	pop	{r3, pc}
 80030d6:	bf00      	nop

080030d8 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 80030d8:	f241 0304 	movw	r3, #4100	; 0x1004
 80030dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	f422 0070 	bic.w	r0, r2, #15728640	; 0xf00000
 80030e6:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 80030e8:	6819      	ldr	r1, [r3, #0]
 80030ea:	f441 1200 	orr.w	r2, r1, #2097152	; 0x200000
 80030ee:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	6018      	str	r0, [r3, #0]
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop

080030f8 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 80030f8:	f241 0204 	movw	r2, #4100	; 0x1004
 80030fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003100:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8003102:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8003106:	f421 0080 	bic.w	r0, r1, #4194304	; 0x400000
 800310a:	6010      	str	r0, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 800310c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	f442 0100 	orr.w	r1, r2, #8388608	; 0x800000
 8003116:	6019      	str	r1, [r3, #0]
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop

0800311c <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <Leave_LowPowerMode+0x18>)
 800311e:	7a98      	ldrb	r0, [r3, #10]
 8003120:	b918      	cbnz	r0, 800312a <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 8003122:	4905      	ldr	r1, [pc, #20]	; (8003138 <Leave_LowPowerMode+0x1c>)
 8003124:	2201      	movs	r2, #1
 8003126:	600a      	str	r2, [r1, #0]
 8003128:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800312a:	4b03      	ldr	r3, [pc, #12]	; (8003138 <Leave_LowPowerMode+0x1c>)
 800312c:	2005      	movs	r0, #5
 800312e:	6018      	str	r0, [r3, #0]
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20001400 	.word	0x20001400
 8003138:	2000029c 	.word	0x2000029c

0800313c <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800313c:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8003140:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8003142:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003146:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800314a:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800314e:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8003150:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003154:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8003156:	f240 4404 	movw	r4, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800315a:	f420 2580 	bic.w	r5, r0, #262144	; 0x40000
 800315e:	601d      	str	r5, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8003160:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003164:	6822      	ldr	r2, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8003166:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 800316a:	f422 2080 	bic.w	r0, r2, #262144	; 0x40000
 800316e:	6020      	str	r0, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8003170:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8003174:	680c      	ldr	r4, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8003176:	f240 450c 	movw	r5, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800317a:	f444 2280 	orr.w	r2, r4, #262144	; 0x40000
 800317e:	600a      	str	r2, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8003180:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8003184:	6829      	ldr	r1, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003186:	f241 4499 	movw	r4, #5273	; 0x1499
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800318a:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 800318e:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003190:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003192:	f243 01c9 	movw	r1, #12489	; 0x30c9
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003196:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800319a:	2090      	movs	r0, #144	; 0x90
 800319c:	f6c0 0100 	movt	r1, #2048	; 0x800
 80031a0:	2200      	movs	r2, #0
 80031a2:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80031a6:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80031a8:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80031aa:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80031ae:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80031b2:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80031b4:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80031b6:	f442 1180 	orr.w	r1, r2, #1048576	; 0x100000
 80031ba:	6019      	str	r1, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80031bc:	f243 0141 	movw	r1, #12353	; 0x3041
 80031c0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80031c4:	2200      	movs	r2, #0
 80031c6:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80031c8:	f24e 1004 	movw	r0, #57604	; 0xe104
 80031cc:	f2ce 0000 	movt	r0, #57344	; 0xe000
 80031d0:	6802      	ldr	r2, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 80031d2:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80031d6:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 80031da:	6001      	str	r1, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 80031dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	f440 2280 	orr.w	r2, r0, #262144	; 0x40000
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	bd38      	pop	{r3, r4, r5, pc}
 80031ea:	bf00      	nop

080031ec <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 80031ec:	f241 030c 	movw	r3, #4108	; 0x100c
 80031f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80031f4:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 80031f6:	b918      	cbnz	r0, 8003200 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 80031f8:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 80031fc:	6018      	str	r0, [r3, #0]
 80031fe:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8003200:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003204:	6019      	str	r1, [r3, #0]
 8003206:	4770      	bx	lr

08003208 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8003208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800320c:	460f      	mov	r7, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800320e:	b082      	sub	sp, #8
 8003210:	4605      	mov	r5, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003212:	b361      	cbz	r1, 800326e <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003214:	7803      	ldrb	r3, [r0, #0]
 8003216:	1e4a      	subs	r2, r1, #1
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003218:	2005      	movs	r0, #5
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800321a:	2401      	movs	r4, #1
 800321c:	4e15      	ldr	r6, [pc, #84]	; (8003274 <USB_To_USART_Send_Data+0x6c>)
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 800321e:	f10d 0107 	add.w	r1, sp, #7
 8003222:	ea02 0804 	and.w	r8, r2, r4
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003226:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800322a:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800322c:	42bc      	cmp	r4, r7
 800322e:	d21e      	bcs.n	800326e <USB_To_USART_Send_Data+0x66>
 8003230:	f1b8 0f00 	cmp.w	r8, #0
 8003234:	d009      	beq.n	800324a <USB_To_USART_Send_Data+0x42>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003236:	786b      	ldrb	r3, [r5, #1]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003238:	2005      	movs	r0, #5
 800323a:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800323e:	2402      	movs	r4, #2
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003240:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003244:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003246:	42bc      	cmp	r4, r7
 8003248:	d211      	bcs.n	800326e <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800324a:	5d2a      	ldrb	r2, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800324c:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003250:	3401      	adds	r4, #1
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003252:	2005      	movs	r0, #5
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003254:	f88d 2007 	strb.w	r2, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003258:	47b0      	blx	r6
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800325a:	5d2b      	ldrb	r3, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800325c:	2005      	movs	r0, #5
 800325e:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003262:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003264:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003268:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800326a:	42bc      	cmp	r4, r7
 800326c:	d3ed      	bcc.n	800324a <USB_To_USART_Send_Data+0x42>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 800326e:	b002      	add	sp, #8
 8003270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003274:	08001385 	.word	0x08001385

08003278 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8003278:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 800327a:	4c20      	ldr	r4, [pc, #128]	; (80032fc <Handle_USBAsynchXfer+0x84>)
 800327c:	7823      	ldrb	r3, [r4, #0]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d023      	beq.n	80032ca <Handle_USBAsynchXfer+0x52>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8003282:	4d1f      	ldr	r5, [pc, #124]	; (8003300 <Handle_USBAsynchXfer+0x88>)
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328a:	d02c      	beq.n	80032e6 <Handle_USBAsynchXfer+0x6e>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800328c:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <Handle_USBAsynchXfer+0x8c>)
 800328e:	6811      	ldr	r1, [r2, #0]
 8003290:	428b      	cmp	r3, r1
 8003292:	d02f      	beq.n	80032f4 <Handle_USBAsynchXfer+0x7c>
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8003294:	d81a      	bhi.n	80032cc <Handle_USBAsynchXfer+0x54>
 8003296:	b298      	uxth	r0, r3
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8003298:	1ace      	subs	r6, r1, r3
 800329a:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800329c:	2e40      	cmp	r6, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800329e:	6016      	str	r6, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80032a0:	d91b      	bls.n	80032da <Handle_USBAsynchXfer+0x62>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 80032a2:	3e40      	subs	r6, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 80032a4:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 80032a6:	6016      	str	r6, [r2, #0]
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 80032a8:	602b      	str	r3, [r5, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 80032aa:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80032ac:	4b17      	ldr	r3, [pc, #92]	; (800330c <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 80032ae:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80032b0:	1818      	adds	r0, r3, r0
 80032b2:	4632      	mov	r2, r6
 80032b4:	21c0      	movs	r1, #192	; 0xc0
 80032b6:	4b16      	ldr	r3, [pc, #88]	; (8003310 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 80032b8:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80032ba:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 80032bc:	4628      	mov	r0, r5
 80032be:	4631      	mov	r1, r6
 80032c0:	4a14      	ldr	r2, [pc, #80]	; (8003314 <Handle_USBAsynchXfer+0x9c>)
 80032c2:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 80032c4:	4628      	mov	r0, r5
 80032c6:	4914      	ldr	r1, [pc, #80]	; (8003318 <Handle_USBAsynchXfer+0xa0>)
 80032c8:	4788      	blx	r1
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 80032cc:	f5c3 6600 	rsb	r6, r3, #2048	; 0x800
 80032d0:	4a0d      	ldr	r2, [pc, #52]	; (8003308 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80032d2:	2e40      	cmp	r6, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 80032d4:	6016      	str	r6, [r2, #0]
 80032d6:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80032d8:	d8e3      	bhi.n	80032a2 <Handle_USBAsynchXfer+0x2a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 80032da:	18f1      	adds	r1, r6, r3
 80032dc:	6029      	str	r1, [r5, #0]
      USART_Rx_length = 0;
 80032de:	2500      	movs	r5, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 80032e0:	b2b6      	uxth	r6, r6
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 80032e2:	6015      	str	r5, [r2, #0]
 80032e4:	e7e2      	b.n	80032ac <Handle_USBAsynchXfer+0x34>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80032e6:	4907      	ldr	r1, [pc, #28]	; (8003304 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 80032e8:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80032ea:	6809      	ldr	r1, [r1, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 80032ec:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80032ee:	b109      	cbz	r1, 80032f4 <Handle_USBAsynchXfer+0x7c>
 80032f0:	4603      	mov	r3, r0
 80032f2:	e7d1      	b.n	8003298 <Handle_USBAsynchXfer+0x20>
    {
      USB_Tx_State = 0; 
 80032f4:	2000      	movs	r0, #0
 80032f6:	7020      	strb	r0, [r4, #0]
      return;
 80032f8:	bd70      	pop	{r4, r5, r6, pc}
 80032fa:	bf00      	nop
 80032fc:	200002a8 	.word	0x200002a8
 8003300:	200002b0 	.word	0x200002b0
 8003304:	200002ac 	.word	0x200002ac
 8003308:	200002b4 	.word	0x200002b4
 800330c:	20000bf0 	.word	0x20000bf0
 8003310:	08003d69 	.word	0x08003d69
 8003314:	08004019 	.word	0x08004019
 8003318:	08003edd 	.word	0x08003edd

0800331c <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 800331c:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800331e:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 8003322:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8003326:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 800332a:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800332e:	6810      	ldr	r0, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 8003330:	681a      	ldr	r2, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8003332:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 8003336:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 800333a:	1880      	adds	r0, r0, r2
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 800333c:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 800333e:	d007      	beq.n	8003350 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8003340:	4904      	ldr	r1, [pc, #16]	; (8003354 <Get_SerialNum+0x38>)
 8003342:	2208      	movs	r2, #8
 8003344:	4d04      	ldr	r5, [pc, #16]	; (8003358 <Get_SerialNum+0x3c>)
 8003346:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8003348:	4620      	mov	r0, r4
 800334a:	4904      	ldr	r1, [pc, #16]	; (800335c <Get_SerialNum+0x40>)
 800334c:	2204      	movs	r2, #4
 800334e:	47a8      	blx	r5
 8003350:	bd38      	pop	{r3, r4, r5, pc}
 8003352:	bf00      	nop
 8003354:	20000006 	.word	0x20000006
 8003358:	08003051 	.word	0x08003051
 800335c:	20000016 	.word	0x20000016

08003360 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8003360:	bf30      	wfi
 8003362:	4770      	bx	lr

08003364 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8003364:	b508      	push	{r3, lr}
  if (Length == 0)
 8003366:	b138      	cbz	r0, 8003378 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <Standard_GetConfiguration+0x20>)
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	6801      	ldr	r1, [r0, #0]
 800336e:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_Configuration;
 8003370:	4a05      	ldr	r2, [pc, #20]	; (8003388 <Standard_GetConfiguration+0x24>)
 8003372:	6810      	ldr	r0, [r2, #0]
 8003374:	300a      	adds	r0, #10
}
 8003376:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <Standard_GetConfiguration+0x24>)
 800337a:	2201      	movs	r2, #1
 800337c:	6819      	ldr	r1, [r3, #0]
 800337e:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8003380:	bd08      	pop	{r3, pc}
 8003382:	bf00      	nop
 8003384:	2000141c 	.word	0x2000141c
 8003388:	20001420 	.word	0x20001420

0800338c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800338c:	b508      	push	{r3, lr}
  if (Length == 0)
 800338e:	b138      	cbz	r0, 80033a0 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <Standard_GetInterface+0x20>)
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	6881      	ldr	r1, [r0, #8]
 8003396:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8003398:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <Standard_GetInterface+0x24>)
 800339a:	6810      	ldr	r0, [r2, #0]
 800339c:	300c      	adds	r0, #12
}
 800339e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80033a0:	4b03      	ldr	r3, [pc, #12]	; (80033b0 <Standard_GetInterface+0x24>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	6819      	ldr	r1, [r3, #0]
 80033a6:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 80033a8:	bd08      	pop	{r3, pc}
 80033aa:	bf00      	nop
 80033ac:	2000141c 	.word	0x2000141c
 80033b0:	20001420 	.word	0x20001420

080033b4 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 80033b4:	b508      	push	{r3, lr}
  if (Length == 0)
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d03b      	beq.n	8003432 <Standard_GetStatus+0x7e>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80033ba:	4b23      	ldr	r3, [pc, #140]	; (8003448 <Standard_GetStatus+0x94>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 80033bc:	4823      	ldr	r0, [pc, #140]	; (800344c <Standard_GetStatus+0x98>)
 80033be:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80033c0:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 80033c2:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80033c4:	7813      	ldrb	r3, [r2, #0]
 80033c6:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 80033ca:	d112      	bne.n	80033f2 <Standard_GetStatus+0x3e>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 80033cc:	7a53      	ldrb	r3, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 80033ce:	f003 0220 	and.w	r2, r3, #32
 80033d2:	b2d1      	uxtb	r1, r2
 80033d4:	bb59      	cbnz	r1, 800342e <Standard_GetStatus+0x7a>
 80033d6:	7802      	ldrb	r2, [r0, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80033d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033dc:	b2d9      	uxtb	r1, r3
 80033de:	b311      	cbz	r1, 8003426 <Standard_GetStatus+0x72>
    {
      SetBit(StatusInfo0, 0);
 80033e0:	f042 0301 	orr.w	r3, r2, #1
 80033e4:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80033e6:	481a      	ldr	r0, [pc, #104]	; (8003450 <Standard_GetStatus+0x9c>)
 80033e8:	6801      	ldr	r1, [r0, #0]
 80033ea:	690a      	ldr	r2, [r1, #16]
 80033ec:	4790      	blx	r2
  return (uint8_t *)&StatusInfo;
 80033ee:	4817      	ldr	r0, [pc, #92]	; (800344c <Standard_GetStatus+0x98>)
 80033f0:	bd08      	pop	{r3, pc}
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d016      	beq.n	8003424 <Standard_GetStatus+0x70>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d113      	bne.n	8003422 <Standard_GetStatus+0x6e>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 80033fa:	7951      	ldrb	r1, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 80033fc:	f001 020f 	and.w	r2, r1, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8003400:	0093      	lsls	r3, r2, #2
 8003402:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8003406:	f502 43b8 	add.w	r3, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800340a:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800340e:	6819      	ldr	r1, [r3, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8003410:	d114      	bne.n	800343c <Standard_GetStatus+0x88>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8003412:	f401 5240 	and.w	r2, r1, #12288	; 0x3000
 8003416:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800341a:	d1e4      	bne.n	80033e6 <Standard_GetStatus+0x32>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 800341c:	2101      	movs	r1, #1
 800341e:	7001      	strb	r1, [r0, #0]
 8003420:	e7e1      	b.n	80033e6 <Standard_GetStatus+0x32>
    }

  }
  else
  {
    return NULL;
 8003422:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 8003424:	bd08      	pop	{r3, pc}
    {
      SetBit(StatusInfo0, 0);
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	7002      	strb	r2, [r0, #0]
 800342c:	e7db      	b.n	80033e6 <Standard_GetStatus+0x32>
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 800342e:	2202      	movs	r2, #2
 8003430:	e7d2      	b.n	80033d8 <Standard_GetStatus+0x24>
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <Standard_GetStatus+0x94>)
 8003434:	2202      	movs	r2, #2
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	820a      	strh	r2, [r1, #16]
    return 0;
 800343a:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800343c:	f001 0330 	and.w	r3, r1, #48	; 0x30
 8003440:	2b10      	cmp	r3, #16
 8003442:	d1d0      	bne.n	80033e6 <Standard_GetStatus+0x32>
 8003444:	e7ea      	b.n	800341c <Standard_GetStatus+0x68>
 8003446:	bf00      	nop
 8003448:	20001420 	.word	0x20001420
 800344c:	200013f0 	.word	0x200013f0
 8003450:	2000141c 	.word	0x2000141c

08003454 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8003454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8003458:	4e27      	ldr	r6, [pc, #156]	; (80034f8 <DataStageIn+0xa4>)
 800345a:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 800345c:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 800345e:	7a27      	ldrb	r7, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8003460:	b923      	cbnz	r3, 800346c <DataStageIn+0x18>
 8003462:	2f04      	cmp	r7, #4
 8003464:	d02a      	beq.n	80034bc <DataStageIn+0x68>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8003466:	8aa5      	ldrh	r5, [r4, #20]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8003468:	2704      	movs	r7, #4
 800346a:	e003      	b.n	8003474 <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 800346c:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800346e:	42ab      	cmp	r3, r5
 8003470:	d9fa      	bls.n	8003468 <DataStageIn+0x14>
 8003472:	2702      	movs	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8003474:	429d      	cmp	r5, r3
 8003476:	bf28      	it	cs
 8003478:	461d      	movcs	r5, r3
 800347a:	69a1      	ldr	r1, [r4, #24]
 800347c:	4628      	mov	r0, r5
 800347e:	4788      	blx	r1
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8003480:	4a1e      	ldr	r2, [pc, #120]	; (80034fc <DataStageIn+0xa8>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8003482:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8003484:	2000      	movs	r0, #0
 8003486:	4790      	blx	r2
 8003488:	462a      	mov	r2, r5
 800348a:	4601      	mov	r1, r0
 800348c:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <DataStageIn+0xac>)
 800348e:	4640      	mov	r0, r8
 8003490:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8003492:	4629      	mov	r1, r5
 8003494:	2000      	movs	r0, #0
 8003496:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <DataStageIn+0xb0>)
 8003498:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 800349a:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800349c:	8a61      	ldrh	r1, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800349e:	1b43      	subs	r3, r0, r5
 80034a0:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 80034a2:	186d      	adds	r5, r5, r1
  vSetEPTxStatus(EP_TX_VALID);
 80034a4:	4818      	ldr	r0, [pc, #96]	; (8003508 <DataStageIn+0xb4>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80034a6:	4b19      	ldr	r3, [pc, #100]	; (800350c <DataStageIn+0xb8>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 80034a8:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 80034aa:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80034ac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80034b0:	6834      	ldr	r4, [r6, #0]

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 80034b2:	8002      	strh	r2, [r0, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80034b4:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80034b6:	7227      	strb	r7, [r4, #8]
 80034b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 80034bc:	4a14      	ldr	r2, [pc, #80]	; (8003510 <DataStageIn+0xbc>)
 80034be:	7810      	ldrb	r0, [r2, #0]
 80034c0:	2801      	cmp	r0, #1
 80034c2:	d006      	beq.n	80034d2 <DataStageIn+0x7e>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80034c4:	4910      	ldr	r1, [pc, #64]	; (8003508 <DataStageIn+0xb4>)
 80034c6:	2710      	movs	r7, #16
 80034c8:	800f      	strh	r7, [r1, #0]
 80034ca:	2707      	movs	r7, #7
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80034cc:	7227      	strb	r7, [r4, #8]
 80034ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80034d2:	f645 4050 	movw	r0, #23632	; 0x5c50
 80034d6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80034da:	6800      	ldr	r0, [r0, #0]
 80034dc:	f243 0102 	movw	r1, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80034e0:	b280      	uxth	r0, r0
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80034e2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80034e6:	1841      	adds	r1, r0, r1
 80034e8:	0048      	lsls	r0, r1, #1
 80034ea:	4907      	ldr	r1, [pc, #28]	; (8003508 <DataStageIn+0xb4>)
 80034ec:	6003      	str	r3, [r0, #0]
 80034ee:	2030      	movs	r0, #48	; 0x30
 80034f0:	8008      	strh	r0, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80034f2:	7013      	strb	r3, [r2, #0]
 80034f4:	e7df      	b.n	80034b6 <DataStageIn+0x62>
 80034f6:	bf00      	nop
 80034f8:	20001420 	.word	0x20001420
 80034fc:	08003fd9 	.word	0x08003fd9
 8003500:	08003d69 	.word	0x08003d69
 8003504:	08004019 	.word	0x08004019
 8003508:	20001428 	.word	0x20001428
 800350c:	20001426 	.word	0x20001426
 8003510:	200002b8 	.word	0x200002b8

08003514 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8003514:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <Standard_SetConfiguration+0x30>)
 8003518:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <Standard_SetConfiguration+0x34>)
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	7851      	ldrb	r1, [r2, #1]
 800351e:	78c3      	ldrb	r3, [r0, #3]
 8003520:	4299      	cmp	r1, r3
 8003522:	d201      	bcs.n	8003528 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 8003524:	2002      	movs	r0, #2
  }
}
 8003526:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8003528:	7882      	ldrb	r2, [r0, #2]
 800352a:	2a00      	cmp	r2, #0
 800352c:	d1fa      	bne.n	8003524 <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 800352e:	8884      	ldrh	r4, [r0, #4]
 8003530:	2c00      	cmp	r4, #0
 8003532:	d1f7      	bne.n	8003524 <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8003534:	7283      	strb	r3, [r0, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8003536:	4805      	ldr	r0, [pc, #20]	; (800354c <Standard_SetConfiguration+0x38>)
 8003538:	6801      	ldr	r1, [r0, #0]
 800353a:	684b      	ldr	r3, [r1, #4]
 800353c:	4798      	blx	r3
    return USB_SUCCESS;
 800353e:	4620      	mov	r0, r4
 8003540:	bd10      	pop	{r4, pc}
 8003542:	bf00      	nop
 8003544:	20001420 	.word	0x20001420
 8003548:	200000e4 	.word	0x200000e4
 800354c:	2000141c 	.word	0x2000141c

08003550 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8003550:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8003552:	4a10      	ldr	r2, [pc, #64]	; (8003594 <Standard_SetInterface+0x44>)
 8003554:	4c10      	ldr	r4, [pc, #64]	; (8003598 <Standard_SetInterface+0x48>)
 8003556:	6811      	ldr	r1, [r2, #0]
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	698a      	ldr	r2, [r1, #24]
 800355c:	7958      	ldrb	r0, [r3, #5]
 800355e:	78d9      	ldrb	r1, [r3, #3]
 8003560:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	7a99      	ldrb	r1, [r3, #10]
 8003566:	b909      	cbnz	r1, 800356c <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8003568:	2002      	movs	r0, #2
}
 800356a:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 800356c:	2800      	cmp	r0, #0
 800356e:	d1fb      	bne.n	8003568 <Standard_SetInterface+0x18>
 8003570:	7918      	ldrb	r0, [r3, #4]
 8003572:	2800      	cmp	r0, #0
 8003574:	d1f8      	bne.n	8003568 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 8003576:	789d      	ldrb	r5, [r3, #2]
 8003578:	2d00      	cmp	r5, #0
 800357a:	d1f5      	bne.n	8003568 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800357c:	4a07      	ldr	r2, [pc, #28]	; (800359c <Standard_SetInterface+0x4c>)
 800357e:	6813      	ldr	r3, [r2, #0]
 8003580:	68d9      	ldr	r1, [r3, #12]
 8003582:	4788      	blx	r1
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003584:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8003586:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003588:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800358a:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800358c:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800358e:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8003590:	bd38      	pop	{r3, r4, r5, pc}
 8003592:	bf00      	nop
 8003594:	200013f8 	.word	0x200013f8
 8003598:	20001420 	.word	0x20001420
 800359c:	2000141c 	.word	0x2000141c

080035a0 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 80035a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 80035a2:	4b35      	ldr	r3, [pc, #212]	; (8003678 <Standard_ClearFeature+0xd8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80035a8:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80035ac:	d003      	beq.n	80035b6 <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80035ae:	2802      	cmp	r0, #2
 80035b0:	d006      	beq.n	80035c0 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 80035b2:	2002      	movs	r0, #2
}
 80035b4:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 80035b6:	7a59      	ldrb	r1, [r3, #9]
 80035b8:	f021 0220 	bic.w	r2, r1, #32
 80035bc:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 80035be:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80035c0:	885a      	ldrh	r2, [r3, #2]
 80035c2:	2a00      	cmp	r2, #0
 80035c4:	d1f6      	bne.n	80035b4 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 80035c6:	7919      	ldrb	r1, [r3, #4]
 80035c8:	2900      	cmp	r1, #0
 80035ca:	d1f3      	bne.n	80035b4 <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 80035cc:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 80035ce:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80035d2:	0081      	lsls	r1, r0, #2
 80035d4:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80035d8:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80035da:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80035de:	bf56      	itet	pl
 80035e0:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80035e2:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80035e4:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80035e8:	4c24      	ldr	r4, [pc, #144]	; (800367c <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80035ea:	bf48      	it	mi
 80035ec:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80035f0:	7824      	ldrb	r4, [r4, #0]
 80035f2:	42a0      	cmp	r0, r4
 80035f4:	d2dd      	bcs.n	80035b2 <Standard_ClearFeature+0x12>
 80035f6:	2d00      	cmp	r5, #0
 80035f8:	d0db      	beq.n	80035b2 <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 80035fa:	7a9b      	ldrb	r3, [r3, #10]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0d8      	beq.n	80035b2 <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8003600:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003604:	b2d3      	uxtb	r3, r2
 8003606:	b173      	cbz	r3, 8003626 <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8003608:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800360c:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 8003610:	6813      	ldr	r3, [r2, #0]
 8003612:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8003616:	2910      	cmp	r1, #16
 8003618:	d021      	beq.n	800365e <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800361a:	4819      	ldr	r0, [pc, #100]	; (8003680 <Standard_ClearFeature+0xe0>)
 800361c:	6801      	ldr	r1, [r0, #0]
 800361e:	694a      	ldr	r2, [r1, #20]
 8003620:	4790      	blx	r2
    return USB_SUCCESS;
 8003622:	2000      	movs	r0, #0
 8003624:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8003626:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800362a:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	f402 5340 	and.w	r3, r2, #12288	; 0x3000
 8003634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003638:	d1ef      	bne.n	800361a <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 800363a:	b9c8      	cbnz	r0, 8003670 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800363c:	4a11      	ldr	r2, [pc, #68]	; (8003684 <Standard_ClearFeature+0xe4>)
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <Standard_ClearFeature+0xe8>)
 8003640:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8003644:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8003646:	6820      	ldr	r0, [r4, #0]
 8003648:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 800364c:	4001      	ands	r1, r0
 800364e:	f481 5240 	eor.w	r2, r1, #12288	; 0x3000
 8003652:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003656:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 800365a:	6020      	str	r0, [r4, #0]
 800365c:	e7dd      	b.n	800361a <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 800365e:	b2c4      	uxtb	r4, r0
 8003660:	4620      	mov	r0, r4
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <Standard_ClearFeature+0xec>)
 8003664:	4790      	blx	r2
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8003666:	4620      	mov	r0, r4
 8003668:	2130      	movs	r1, #48	; 0x30
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <Standard_ClearFeature+0xf0>)
 800366c:	4798      	blx	r3
 800366e:	e7d4      	b.n	800361a <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8003670:	4908      	ldr	r1, [pc, #32]	; (8003694 <Standard_ClearFeature+0xf4>)
 8003672:	4788      	blx	r1
 8003674:	e7e7      	b.n	8003646 <Standard_ClearFeature+0xa6>
 8003676:	bf00      	nop
 8003678:	20001420 	.word	0x20001420
 800367c:	200000e4 	.word	0x200000e4
 8003680:	2000141c 	.word	0x2000141c
 8003684:	20000060 	.word	0x20000060
 8003688:	08004039 	.word	0x08004039
 800368c:	08003f69 	.word	0x08003f69
 8003690:	08003e5d 	.word	0x08003e5d
 8003694:	08003f45 	.word	0x08003f45

08003698 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8003698:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800369a:	4b22      	ldr	r3, [pc, #136]	; (8003724 <Standard_SetEndPointFeature+0x8c>)
 800369c:	6819      	ldr	r1, [r3, #0]
 800369e:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 80036a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80036a4:	0090      	lsls	r0, r2, #2
 80036a6:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80036aa:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80036ac:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80036b0:	bf56      	itet	pl
 80036b2:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80036b4:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80036b6:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80036ba:	4c1b      	ldr	r4, [pc, #108]	; (8003728 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80036bc:	bf48      	it	mi
 80036be:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80036c2:	7824      	ldrb	r4, [r4, #0]
 80036c4:	42a2      	cmp	r2, r4
 80036c6:	d301      	bcc.n	80036cc <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 80036c8:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 80036ca:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 80036cc:	884a      	ldrh	r2, [r1, #2]
 80036ce:	2a00      	cmp	r2, #0
 80036d0:	d1fa      	bne.n	80036c8 <Standard_SetEndPointFeature+0x30>
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d0f8      	beq.n	80036c8 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 80036d6:	7a89      	ldrb	r1, [r1, #10]
 80036d8:	2900      	cmp	r1, #0
 80036da:	d0f5      	beq.n	80036c8 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80036dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80036e0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80036e4:	f500 42b8 	add.w	r2, r0, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80036e8:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80036ea:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80036ec:	b17b      	cbz	r3, 800370e <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80036ee:	f648 70bf 	movw	r0, #36799	; 0x8fbf
 80036f2:	4008      	ands	r0, r1
 80036f4:	f080 0110 	eor.w	r1, r0, #16
 80036f8:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 80036fc:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8003700:	6010      	str	r0, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <Standard_SetEndPointFeature+0x94>)
 8003704:	6811      	ldr	r1, [r2, #0]
 8003706:	698b      	ldr	r3, [r1, #24]
 8003708:	4798      	blx	r3
  return USB_SUCCESS;
 800370a:	2000      	movs	r0, #0
 800370c:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800370e:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8003712:	400b      	ands	r3, r1
 8003714:	f483 5080 	eor.w	r0, r3, #4096	; 0x1000
 8003718:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 800371c:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e7ee      	b.n	8003702 <Standard_SetEndPointFeature+0x6a>
 8003724:	20001420 	.word	0x20001420
 8003728:	200000e4 	.word	0x200000e4
 800372c:	2000141c 	.word	0x2000141c

08003730 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <Standard_GetDescriptorData+0x18>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8003736:	b110      	cbz	r0, 800373e <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8003738:	6808      	ldr	r0, [r1, #0]
 800373a:	1880      	adds	r0, r0, r2
}
 800373c:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800373e:	8889      	ldrh	r1, [r1, #4]
 8003740:	1a8a      	subs	r2, r1, r2
 8003742:	821a      	strh	r2, [r3, #16]
    return 0;
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20001420 	.word	0x20001420

0800374c <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 800374c:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <Post0_Process+0x34>)
 8003750:	2000      	movs	r0, #0
 8003752:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8003756:	4a0b      	ldr	r2, [pc, #44]	; (8003784 <Post0_Process+0x38>)
 8003758:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 800375a:	480b      	ldr	r0, [pc, #44]	; (8003788 <Post0_Process+0x3c>)
 800375c:	6801      	ldr	r1, [r0, #0]
 800375e:	7a08      	ldrb	r0, [r1, #8]
 8003760:	2808      	cmp	r0, #8
 8003762:	d106      	bne.n	8003772 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8003764:	4b09      	ldr	r3, [pc, #36]	; (800378c <Post0_Process+0x40>)
 8003766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800376a:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800376c:	4a08      	ldr	r2, [pc, #32]	; (8003790 <Post0_Process+0x44>)
 800376e:	2110      	movs	r1, #16
 8003770:	8011      	strh	r1, [r2, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8003772:	f1b0 0c09 	subs.w	ip, r0, #9
 8003776:	f1dc 0000 	rsbs	r0, ip, #0
 800377a:	eb50 000c 	adcs.w	r0, r0, ip
 800377e:	bd08      	pop	{r3, pc}
 8003780:	20000060 	.word	0x20000060
 8003784:	08004039 	.word	0x08004039
 8003788:	20001420 	.word	0x20001420
 800378c:	20001426 	.word	0x20001426
 8003790:	20001428 	.word	0x20001428

08003794 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 8003796:	4d33      	ldr	r5, [pc, #204]	; (8003864 <Out0_Process+0xd0>)
 8003798:	682c      	ldr	r4, [r5, #0]
 800379a:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800379c:	2b02      	cmp	r3, #2
 800379e:	d007      	beq.n	80037b0 <Out0_Process+0x1c>
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d005      	beq.n	80037b0 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d008      	beq.n	80037ba <Out0_Process+0x26>
 80037a8:	2b05      	cmp	r3, #5
 80037aa:	d006      	beq.n	80037ba <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 80037ac:	2b07      	cmp	r3, #7
 80037ae:	d00d      	beq.n	80037cc <Out0_Process+0x38>
 80037b0:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80037b2:	7222      	strb	r2, [r4, #8]

  return Post0_Process();
 80037b4:	4b2c      	ldr	r3, [pc, #176]	; (8003868 <Out0_Process+0xd4>)
 80037b6:	4798      	blx	r3
 80037b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 80037ba:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 80037bc:	8a20      	ldrh	r0, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 80037be:	b311      	cbz	r1, 8003806 <Out0_Process+0x72>
 80037c0:	b958      	cbnz	r0, 80037da <Out0_Process+0x46>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80037c2:	8aa4      	ldrh	r4, [r4, #20]
 80037c4:	2c00      	cmp	r4, #0
 80037c6:	d045      	beq.n	8003854 <Out0_Process+0xc0>
 80037c8:	4a28      	ldr	r2, [pc, #160]	; (800386c <Out0_Process+0xd8>)
 80037ca:	e02e      	b.n	800382a <Out0_Process+0x96>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 80037cc:	4828      	ldr	r0, [pc, #160]	; (8003870 <Out0_Process+0xdc>)
 80037ce:	6801      	ldr	r1, [r0, #0]
 80037d0:	68ca      	ldr	r2, [r1, #12]
 80037d2:	4790      	blx	r2
 80037d4:	682c      	ldr	r4, [r5, #0]
 80037d6:	2208      	movs	r2, #8
 80037d8:	e7eb      	b.n	80037b2 <Out0_Process+0x1e>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 80037da:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80037dc:	4286      	cmp	r6, r0
 80037de:	bf28      	it	cs
 80037e0:	4606      	movcs	r6, r0
 80037e2:	4630      	mov	r0, r6
 80037e4:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 80037e6:	8a63      	ldrh	r3, [r4, #18]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80037e8:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 80037ea:	8a20      	ldrh	r0, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80037ec:	18f1      	adds	r1, r6, r3
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 80037ee:	1b82      	subs	r2, r0, r6
 80037f0:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80037f2:	8261      	strh	r1, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80037f4:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <Out0_Process+0xe0>)
 80037f6:	2000      	movs	r0, #0
 80037f8:	4798      	blx	r3
 80037fa:	4632      	mov	r2, r6
 80037fc:	4601      	mov	r1, r0
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <Out0_Process+0xe4>)
 8003800:	4638      	mov	r0, r7
 8003802:	4798      	blx	r3
 8003804:	8a20      	ldrh	r0, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8003806:	2800      	cmp	r0, #0
 8003808:	d0db      	beq.n	80037c2 <Out0_Process+0x2e>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800380a:	4b1c      	ldr	r3, [pc, #112]	; (800387c <Out0_Process+0xe8>)
    SetEPTxCount(ENDP0, 0);
 800380c:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800380e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8003812:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8003814:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8003816:	4a1a      	ldr	r2, [pc, #104]	; (8003880 <Out0_Process+0xec>)
 8003818:	4790      	blx	r2
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800381a:	8a23      	ldrh	r3, [r4, #16]
 800381c:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800381e:	4a13      	ldr	r2, [pc, #76]	; (800386c <Out0_Process+0xd8>)
 8003820:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8003822:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8003824:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8003826:	d915      	bls.n	8003854 <Out0_Process+0xc0>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8003828:	b9c3      	cbnz	r3, 800385c <Out0_Process+0xc8>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800382a:	682c      	ldr	r4, [r5, #0]
 800382c:	2106      	movs	r1, #6
      USB_StatusIn();
 800382e:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8003832:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 8003834:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800383e:	b281      	uxth	r1, r0
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8003840:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003844:	18c8      	adds	r0, r1, r3
 8003846:	0043      	lsls	r3, r0, #1
 8003848:	2100      	movs	r1, #0
 800384a:	6019      	str	r1, [r3, #0]
 800384c:	2030      	movs	r0, #48	; 0x30
 800384e:	8010      	strh	r0, [r2, #0]
 8003850:	7a22      	ldrb	r2, [r4, #8]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8003852:	e7ae      	b.n	80037b2 <Out0_Process+0x1e>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 8003854:	682c      	ldr	r4, [r5, #0]
 8003856:	2203      	movs	r2, #3
 8003858:	7222      	strb	r2, [r4, #8]
 800385a:	e7aa      	b.n	80037b2 <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 800385c:	682c      	ldr	r4, [r5, #0]
 800385e:	2205      	movs	r2, #5
 8003860:	7222      	strb	r2, [r4, #8]
 8003862:	e7a6      	b.n	80037b2 <Out0_Process+0x1e>
 8003864:	20001420 	.word	0x20001420
 8003868:	0800374d 	.word	0x0800374d
 800386c:	20001428 	.word	0x20001428
 8003870:	200013f8 	.word	0x200013f8
 8003874:	08003ff9 	.word	0x08003ff9
 8003878:	08003de1 	.word	0x08003de1
 800387c:	20001426 	.word	0x20001426
 8003880:	08004019 	.word	0x08004019

08003884 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8003884:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003886:	f645 4350 	movw	r3, #23632	; 0x5c50

  if (pInformation->ControlState != PAUSE)
 800388a:	4d9e      	ldr	r5, [pc, #632]	; (8003b04 <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800388c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003890:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8003892:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003894:	f243 0004 	movw	r0, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8003898:	b291      	uxth	r1, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800389a:	f2c2 0000 	movt	r0, #8192	; 0x2000

  if (pInformation->ControlState != PAUSE)
 800389e:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80038a0:	180e      	adds	r6, r1, r0
 80038a2:	0073      	lsls	r3, r6, #1

  if (pInformation->ControlState != PAUSE)
 80038a4:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 80038a6:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80038a8:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 80038aa:	d044      	beq.n	8003936 <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80038ac:	b2b7      	uxth	r7, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80038ae:	0078      	lsls	r0, r7, #1
 80038b0:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 80038b4:	f501 46c0 	add.w	r6, r1, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80038b8:	7832      	ldrb	r2, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80038ba:	4f93      	ldr	r7, [pc, #588]	; (8003b08 <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80038bc:	7022      	strb	r2, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80038be:	7873      	ldrb	r3, [r6, #1]
 80038c0:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80038c2:	88b0      	ldrh	r0, [r6, #4]
 80038c4:	47b8      	blx	r7
 80038c6:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 80038c8:	8930      	ldrh	r0, [r6, #8]
 80038ca:	682c      	ldr	r4, [r5, #0]
 80038cc:	47b8      	blx	r7
 80038ce:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80038d0:	89b0      	ldrh	r0, [r6, #12]
 80038d2:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 80038d4:	2101      	movs	r1, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80038d6:	80e0      	strh	r0, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80038d8:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 80038da:	2800      	cmp	r0, #0
 80038dc:	d030      	beq.n	8003940 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 80038de:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 80038e0:	2906      	cmp	r1, #6
 80038e2:	f000 8087 	beq.w	80039f4 <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80038e6:	2900      	cmp	r1, #0
 80038e8:	d15e      	bne.n	80039a8 <Setup0_Process+0x124>
 80038ea:	8863      	ldrh	r3, [r4, #2]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8094 	beq.w	8003a1a <Setup0_Process+0x196>
 80038f2:	4e86      	ldr	r6, [pc, #536]	; (8003b0c <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80038f4:	6833      	ldr	r3, [r6, #0]
 80038f6:	4608      	mov	r0, r1
 80038f8:	6919      	ldr	r1, [r3, #16]
 80038fa:	4788      	blx	r1
    if (Result == USB_NOT_READY)
 80038fc:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 80038fe:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 8003900:	d062      	beq.n	80039c8 <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8003902:	8a1a      	ldrh	r2, [r3, #16]
 8003904:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003908:	428a      	cmp	r2, r1
 800390a:	d05d      	beq.n	80039c8 <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800390c:	2802      	cmp	r0, #2
 800390e:	d00c      	beq.n	800392a <Setup0_Process+0xa6>
 8003910:	b15a      	cbz	r2, 800392a <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8003912:	f993 1000 	ldrsb.w	r1, [r3]
 8003916:	2900      	cmp	r1, #0
 8003918:	f2c0 80b5 	blt.w	8003a86 <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 800391c:	2203      	movs	r2, #3
 800391e:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8003920:	4b7b      	ldr	r3, [pc, #492]	; (8003b10 <Setup0_Process+0x28c>)
 8003922:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8003926:	8018      	strh	r0, [r3, #0]
 8003928:	e001      	b.n	800392e <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 800392a:	2008      	movs	r0, #8
 800392c:	7218      	strb	r0, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 800392e:	4b79      	ldr	r3, [pc, #484]	; (8003b14 <Setup0_Process+0x290>)
 8003930:	4798      	blx	r3
}
 8003932:	b003      	add	sp, #12
 8003934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003936:	88e0      	ldrh	r0, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8003938:	2101      	movs	r1, #1
 800393a:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 800393c:	2800      	cmp	r0, #0
 800393e:	d1ce      	bne.n	80038de <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003940:	7822      	ldrb	r2, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8003942:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003944:	f012 037f 	ands.w	r3, r2, #127	; 0x7f
 8003948:	d141      	bne.n	80039ce <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 800394a:	2e09      	cmp	r6, #9
 800394c:	f000 8108 	beq.w	8003b60 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8003950:	2e05      	cmp	r6, #5
 8003952:	f000 80bf 	beq.w	8003ad4 <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8003956:	2e03      	cmp	r6, #3
 8003958:	f000 80f0 	beq.w	8003b3c <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 800395c:	2e01      	cmp	r6, #1
 800395e:	d13b      	bne.n	80039d8 <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8003960:	78e1      	ldrb	r1, [r4, #3]
 8003962:	2901      	cmp	r1, #1
 8003964:	d138      	bne.n	80039d8 <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 8003966:	88a2      	ldrh	r2, [r4, #4]
 8003968:	2a00      	cmp	r2, #0
 800396a:	d135      	bne.n	80039d8 <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 800396c:	7a63      	ldrb	r3, [r4, #9]
 800396e:	f003 0420 	and.w	r4, r3, #32
 8003972:	b2e0      	uxtb	r0, r4
 8003974:	2800      	cmp	r0, #0
 8003976:	d02f      	beq.n	80039d8 <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8003978:	4967      	ldr	r1, [pc, #412]	; (8003b18 <Setup0_Process+0x294>)
 800397a:	4788      	blx	r1
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 800397c:	bb60      	cbnz	r0, 80039d8 <Setup0_Process+0x154>
 800397e:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8003980:	f645 4050 	movw	r0, #23632	; 0x5c50
 8003984:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003988:	6801      	ldr	r1, [r0, #0]
 800398a:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800398e:	b28a      	uxth	r2, r1
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8003990:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003994:	18d0      	adds	r0, r2, r3
 8003996:	0041      	lsls	r1, r0, #1
 8003998:	2300      	movs	r3, #0
 800399a:	4a60      	ldr	r2, [pc, #384]	; (8003b1c <Setup0_Process+0x298>)
 800399c:	600b      	str	r3, [r1, #0]
 800399e:	2030      	movs	r0, #48	; 0x30
 80039a0:	2106      	movs	r1, #6
 80039a2:	8010      	strh	r0, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80039a4:	7221      	strb	r1, [r4, #8]
 80039a6:	e7c2      	b.n	800392e <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 80039a8:	2908      	cmp	r1, #8
 80039aa:	d148      	bne.n	8003a3e <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80039ac:	7820      	ldrb	r0, [r4, #0]
 80039ae:	0643      	lsls	r3, r0, #25
 80039b0:	d19f      	bne.n	80038f2 <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 80039b2:	4a5b      	ldr	r2, [pc, #364]	; (8003b20 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80039b4:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80039b6:	61a2      	str	r2, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80039b8:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 80039ba:	4790      	blx	r2
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80039c2:	8a1a      	ldrh	r2, [r3, #16]
 80039c4:	4282      	cmp	r2, r0
 80039c6:	d1a3      	bne.n	8003910 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 80039c8:	2109      	movs	r1, #9
 80039ca:	7219      	strb	r1, [r3, #8]
 80039cc:	e7af      	b.n	800392e <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d071      	beq.n	8003ab6 <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	f000 808d 	beq.w	8003af2 <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 80039d8:	494c      	ldr	r1, [pc, #304]	; (8003b0c <Setup0_Process+0x288>)
 80039da:	4630      	mov	r0, r6
 80039dc:	680a      	ldr	r2, [r1, #0]
 80039de:	6953      	ldr	r3, [r2, #20]
 80039e0:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80039e2:	2803      	cmp	r0, #3
 80039e4:	f000 80c5 	beq.w	8003b72 <Setup0_Process+0x2ee>
 80039e8:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d0c8      	beq.n	8003980 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 80039ee:	2108      	movs	r1, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80039f0:	7221      	strb	r1, [r4, #8]
 80039f2:	e79c      	b.n	800392e <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80039f4:	7826      	ldrb	r6, [r4, #0]
 80039f6:	0673      	lsls	r3, r6, #25
 80039f8:	f47f af7b 	bne.w	80038f2 <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 80039fc:	78a2      	ldrb	r2, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80039fe:	4e43      	ldr	r6, [pc, #268]	; (8003b0c <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 8003a00:	2a01      	cmp	r2, #1
 8003a02:	f000 80b0 	beq.w	8003b66 <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8003a06:	2a02      	cmp	r2, #2
 8003a08:	d05e      	beq.n	8003ac8 <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8003a0a:	2a03      	cmp	r2, #3
 8003a0c:	f47f af72 	bne.w	80038f4 <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8003a10:	6830      	ldr	r0, [r6, #0]
 8003a12:	6a42      	ldr	r2, [r0, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8003a14:	2a00      	cmp	r2, #0
 8003a16:	d1cd      	bne.n	80039b4 <Setup0_Process+0x130>
 8003a18:	e76c      	b.n	80038f4 <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8003a1a:	6860      	ldr	r0, [r4, #4]
 8003a1c:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8003a20:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8003a24:	f47f af65 	bne.w	80038f2 <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003a28:	7823      	ldrb	r3, [r4, #0]
 8003a2a:	f013 007f 	ands.w	r0, r3, #127	; 0x7f
 8003a2e:	f040 80a4 	bne.w	8003b7a <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 8003a32:	88a3      	ldrh	r3, [r4, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f47f af5c 	bne.w	80038f2 <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8003a3a:	4a3a      	ldr	r2, [pc, #232]	; (8003b24 <Setup0_Process+0x2a0>)
 8003a3c:	e7ba      	b.n	80039b4 <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8003a3e:	290a      	cmp	r1, #10
 8003a40:	f47f af57 	bne.w	80038f2 <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8003a44:	7826      	ldrb	r6, [r4, #0]
 8003a46:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8003a4a:	2a01      	cmp	r2, #1
 8003a4c:	f47f af51 	bne.w	80038f2 <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8003a50:	7aa3      	ldrb	r3, [r4, #10]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f43f af4d 	beq.w	80038f2 <Setup0_Process+0x6e>
 8003a58:	8863      	ldrh	r3, [r4, #2]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f47f af49 	bne.w	80038f2 <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8003a60:	6860      	ldr	r0, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8003a62:	4e2a      	ldr	r6, [pc, #168]	; (8003b0c <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8003a64:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8003a68:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003a6c:	f47f af42 	bne.w	80038f4 <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8003a70:	6832      	ldr	r2, [r6, #0]
 8003a72:	4619      	mov	r1, r3
 8003a74:	7960      	ldrb	r0, [r4, #5]
 8003a76:	6993      	ldr	r3, [r2, #24]
 8003a78:	4798      	blx	r3
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	f040 80b8 	bne.w	8003bf0 <Setup0_Process+0x36c>
 8003a80:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8003a82:	4a29      	ldr	r2, [pc, #164]	; (8003b28 <Setup0_Process+0x2a4>)
 8003a84:	e796      	b.n	80039b4 <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8003a86:	88d9      	ldrh	r1, [r3, #6]
 8003a88:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8003a8a:	9801      	ldr	r0, [sp, #4]
 8003a8c:	4282      	cmp	r2, r0
 8003a8e:	d817      	bhi.n	8003ac0 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8003a90:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8003a92:	491e      	ldr	r1, [pc, #120]	; (8003b0c <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8003a94:	d208      	bcs.n	8003aa8 <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8003a96:	6808      	ldr	r0, [r1, #0]
 8003a98:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8003a9c:	4282      	cmp	r2, r0
 8003a9e:	f080 808f 	bcs.w	8003bc0 <Setup0_Process+0x33c>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8003aa2:	4a22      	ldr	r2, [pc, #136]	; (8003b2c <Setup0_Process+0x2a8>)
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8003aa8:	6809      	ldr	r1, [r1, #0]
 8003aaa:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 8003aae:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8003ab0:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <Setup0_Process+0x2ac>)
 8003ab2:	4798      	blx	r3
 8003ab4:	e73b      	b.n	800392e <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8003ab6:	2e0b      	cmp	r6, #11
 8003ab8:	d18e      	bne.n	80039d8 <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 8003aba:	481e      	ldr	r0, [pc, #120]	; (8003b34 <Setup0_Process+0x2b0>)
 8003abc:	4780      	blx	r0
 8003abe:	e75d      	b.n	800397c <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8003ac0:	9801      	ldr	r0, [sp, #4]
 8003ac2:	4912      	ldr	r1, [pc, #72]	; (8003b0c <Setup0_Process+0x288>)
 8003ac4:	8218      	strh	r0, [r3, #16]
 8003ac6:	e7ef      	b.n	8003aa8 <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8003ac8:	6833      	ldr	r3, [r6, #0]
 8003aca:	6a1a      	ldr	r2, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8003acc:	2a00      	cmp	r2, #0
 8003ace:	f47f af71 	bne.w	80039b4 <Setup0_Process+0x130>
 8003ad2:	e70f      	b.n	80038f4 <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8003ad4:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	db88      	blt.n	80039ee <Setup0_Process+0x16a>
 8003adc:	78a1      	ldrb	r1, [r4, #2]
 8003ade:	2900      	cmp	r1, #0
 8003ae0:	d185      	bne.n	80039ee <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 8003ae2:	88a2      	ldrh	r2, [r4, #4]
 8003ae4:	2a00      	cmp	r2, #0
 8003ae6:	d182      	bne.n	80039ee <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 8003ae8:	7aa3      	ldrb	r3, [r4, #10]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f43f af48 	beq.w	8003980 <Setup0_Process+0xfc>
 8003af0:	e77d      	b.n	80039ee <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8003af2:	2e01      	cmp	r6, #1
 8003af4:	f43f af40 	beq.w	8003978 <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8003af8:	2e03      	cmp	r6, #3
 8003afa:	f47f af6d 	bne.w	80039d8 <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 8003afe:	4c0e      	ldr	r4, [pc, #56]	; (8003b38 <Setup0_Process+0x2b4>)
 8003b00:	47a0      	blx	r4
 8003b02:	e73b      	b.n	800397c <Setup0_Process+0xf8>
 8003b04:	20001420 	.word	0x20001420
 8003b08:	080040a1 	.word	0x080040a1
 8003b0c:	200013f8 	.word	0x200013f8
 8003b10:	20001426 	.word	0x20001426
 8003b14:	0800374d 	.word	0x0800374d
 8003b18:	080035a1 	.word	0x080035a1
 8003b1c:	20001428 	.word	0x20001428
 8003b20:	08003365 	.word	0x08003365
 8003b24:	080033b5 	.word	0x080033b5
 8003b28:	0800338d 	.word	0x0800338d
 8003b2c:	200002b8 	.word	0x200002b8
 8003b30:	08003455 	.word	0x08003455
 8003b34:	08003551 	.word	0x08003551
 8003b38:	08003699 	.word	0x08003699
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8003b3c:	78e2      	ldrb	r2, [r4, #3]
 8003b3e:	2a01      	cmp	r2, #1
 8003b40:	f47f af4a 	bne.w	80039d8 <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 8003b44:	88a3      	ldrh	r3, [r4, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f47f af46 	bne.w	80039d8 <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8003b4c:	7a60      	ldrb	r0, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8003b4e:	4a2a      	ldr	r2, [pc, #168]	; (8003bf8 <Setup0_Process+0x374>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8003b50:	f040 0120 	orr.w	r1, r0, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8003b54:	6813      	ldr	r3, [r2, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8003b56:	7261      	strb	r1, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8003b58:	69dc      	ldr	r4, [r3, #28]
 8003b5a:	47a0      	blx	r4
 8003b5c:	682c      	ldr	r4, [r5, #0]
 8003b5e:	e70f      	b.n	8003980 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8003b60:	4c26      	ldr	r4, [pc, #152]	; (8003bfc <Setup0_Process+0x378>)
 8003b62:	47a0      	blx	r4
 8003b64:	e70a      	b.n	800397c <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8003b66:	6832      	ldr	r2, [r6, #0]
 8003b68:	69d2      	ldr	r2, [r2, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8003b6a:	2a00      	cmp	r2, #0
 8003b6c:	f47f af22 	bne.w	80039b4 <Setup0_Process+0x130>
 8003b70:	e6c0      	b.n	80038f4 <Setup0_Process+0x70>
 8003b72:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 8003b74:	2109      	movs	r1, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8003b76:	7221      	strb	r1, [r4, #8]
 8003b78:	e6d9      	b.n	800392e <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8003b7a:	2801      	cmp	r0, #1
 8003b7c:	d02b      	beq.n	8003bd6 <Setup0_Process+0x352>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8003b7e:	2802      	cmp	r0, #2
 8003b80:	f47f aeb7 	bne.w	80038f2 <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8003b84:	7963      	ldrb	r3, [r4, #5]
 8003b86:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8003b8a:	0096      	lsls	r6, r2, #2
 8003b8c:	f106 4080 	add.w	r0, r6, #1073741824	; 0x40000000
 8003b90:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8003b94:	061e      	lsls	r6, r3, #24
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8003b96:	bf56      	itet	pl
 8003b98:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8003b9a:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8003b9c:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8003ba0:	4817      	ldr	r0, [pc, #92]	; (8003c00 <Setup0_Process+0x37c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8003ba2:	bf48      	it	mi
 8003ba4:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8003ba8:	7800      	ldrb	r0, [r0, #0]
 8003baa:	4282      	cmp	r2, r0
 8003bac:	f4bf aea1 	bcs.w	80038f2 <Setup0_Process+0x6e>
 8003bb0:	f013 0f70 	tst.w	r3, #112	; 0x70
 8003bb4:	f47f ae9d 	bne.w	80038f2 <Setup0_Process+0x6e>
          && (Status != 0))
 8003bb8:	2e00      	cmp	r6, #0
 8003bba:	f47f af3e 	bne.w	8003a3a <Setup0_Process+0x1b6>
 8003bbe:	e698      	b.n	80038f2 <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8003bc0:	fb92 f4f0 	sdiv	r4, r2, r0
 8003bc4:	fb00 2214 	mls	r2, r0, r4, r2
 8003bc8:	2a00      	cmp	r2, #0
 8003bca:	f47f af6d 	bne.w	8003aa8 <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8003bce:	4a0d      	ldr	r2, [pc, #52]	; (8003c04 <Setup0_Process+0x380>)
 8003bd0:	2001      	movs	r0, #1
 8003bd2:	7010      	strb	r0, [r2, #0]
 8003bd4:	e768      	b.n	8003aa8 <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8003bd6:	4e0c      	ldr	r6, [pc, #48]	; (8003c08 <Setup0_Process+0x384>)
 8003bd8:	7960      	ldrb	r0, [r4, #5]
 8003bda:	6833      	ldr	r3, [r6, #0]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	4790      	blx	r2
 8003be0:	b930      	cbnz	r0, 8003bf0 <Setup0_Process+0x36c>
          && (pInformation->Current_Configuration != 0))
 8003be2:	682c      	ldr	r4, [r5, #0]
 8003be4:	7aa0      	ldrb	r0, [r4, #10]
 8003be6:	2800      	cmp	r0, #0
 8003be8:	f47f af27 	bne.w	8003a3a <Setup0_Process+0x1b6>
 8003bec:	7861      	ldrb	r1, [r4, #1]
 8003bee:	e681      	b.n	80038f4 <Setup0_Process+0x70>
 8003bf0:	6829      	ldr	r1, [r5, #0]
 8003bf2:	7849      	ldrb	r1, [r1, #1]
 8003bf4:	e67e      	b.n	80038f4 <Setup0_Process+0x70>
 8003bf6:	bf00      	nop
 8003bf8:	2000141c 	.word	0x2000141c
 8003bfc:	08003515 	.word	0x08003515
 8003c00:	200000e4 	.word	0x200000e4
 8003c04:	200002b8 	.word	0x200002b8
 8003c08:	200013f8 	.word	0x200013f8

08003c0c <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8003c0c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8003c0e:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <SetDeviceAddress+0xa4>)
 8003c10:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003c12:	2e00      	cmp	r6, #0
 8003c14:	d043      	beq.n	8003c9e <SetDeviceAddress+0x92>
 8003c16:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8003c1a:	f2c4 0200 	movt	r2, #16384	; 0x4000
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003c1e:	6814      	ldr	r4, [r2, #0]
 8003c20:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003c24:	4021      	ands	r1, r4
 8003c26:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8003c2a:	f043 0180 	orr.w	r1, r3, #128	; 0x80
 8003c2e:	6011      	str	r1, [r2, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003c30:	2201      	movs	r2, #1
 8003c32:	1e74      	subs	r4, r6, #1
 8003c34:	f645 4304 	movw	r3, #23556	; 0x5c04
 8003c38:	4296      	cmp	r6, r2
 8003c3a:	f004 0401 	and.w	r4, r4, #1
 8003c3e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c42:	d92c      	bls.n	8003c9e <SetDeviceAddress+0x92>
 8003c44:	b17c      	cbz	r4, 8003c66 <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003c46:	6819      	ldr	r1, [r3, #0]
 8003c48:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8003c52:	f041 0281 	orr.w	r2, r1, #129	; 0x81
 8003c56:	601a      	str	r2, [r3, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f645 4308 	movw	r3, #23560	; 0x5c08
 8003c5e:	4296      	cmp	r6, r2
 8003c60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c64:	d91b      	bls.n	8003c9e <SetDeviceAddress+0x92>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003c66:	681f      	ldr	r7, [r3, #0]
 8003c68:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8003c6c:	f640 740f 	movw	r4, #3855	; 0xf0f
 8003c70:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003c74:	403c      	ands	r4, r7
 8003c76:	ea45 0704 	orr.w	r7, r5, r4
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f841 7b04 	str.w	r7, [r1], #4
 8003c80:	685f      	ldr	r7, [r3, #4]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003c82:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003c84:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8003c88:	f640 740f 	movw	r4, #3855	; 0xf0f
 8003c8c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003c90:	403c      	ands	r4, r7
 8003c92:	432c      	orrs	r4, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003c94:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003c96:	605c      	str	r4, [r3, #4]
 8003c98:	1d0b      	adds	r3, r1, #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003c9a:	4296      	cmp	r6, r2
 8003c9c:	d8e3      	bhi.n	8003c66 <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8003c9e:	f645 434c 	movw	r3, #23628	; 0x5c4c
 8003ca2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003ca6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003caa:	6018      	str	r0, [r3, #0]
}
 8003cac:	bcf0      	pop	{r4, r5, r6, r7}
 8003cae:	4770      	bx	lr
 8003cb0:	200000e4 	.word	0x200000e4

08003cb4 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8003cb4:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8003cb6:	4c14      	ldr	r4, [pc, #80]	; (8003d08 <In0_Process+0x54>)
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8003cbc:	2a02      	cmp	r2, #2
 8003cbe:	d012      	beq.n	8003ce6 <In0_Process+0x32>
 8003cc0:	2a04      	cmp	r2, #4
 8003cc2:	d010      	beq.n	8003ce6 <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8003cc4:	2a06      	cmp	r2, #6
 8003cc6:	d004      	beq.n	8003cd2 <In0_Process+0x1e>
 8003cc8:	2008      	movs	r0, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8003cca:	7218      	strb	r0, [r3, #8]

  return Post0_Process();
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <In0_Process+0x58>)
 8003cce:	4798      	blx	r3
}
 8003cd0:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8003cd2:	7859      	ldrb	r1, [r3, #1]
 8003cd4:	2905      	cmp	r1, #5
 8003cd6:	d00b      	beq.n	8003cf0 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8003cd8:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <In0_Process+0x5c>)
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	6881      	ldr	r1, [r0, #8]
 8003cde:	4788      	blx	r1
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	2008      	movs	r0, #8
 8003ce4:	e7f1      	b.n	8003cca <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8003ce6:	4a0b      	ldr	r2, [pc, #44]	; (8003d14 <In0_Process+0x60>)
 8003ce8:	4790      	blx	r2
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	7a18      	ldrb	r0, [r3, #8]
 8003cee:	e7ec      	b.n	8003cca <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8003cf0:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8003cf2:	0652      	lsls	r2, r2, #25
 8003cf4:	d1f0      	bne.n	8003cd8 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8003cf6:	78d8      	ldrb	r0, [r3, #3]
 8003cf8:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <In0_Process+0x64>)
 8003cfa:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8003cfc:	4807      	ldr	r0, [pc, #28]	; (8003d1c <In0_Process+0x68>)
 8003cfe:	6801      	ldr	r1, [r0, #0]
 8003d00:	6a0a      	ldr	r2, [r1, #32]
 8003d02:	4790      	blx	r2
 8003d04:	e7e8      	b.n	8003cd8 <In0_Process+0x24>
 8003d06:	bf00      	nop
 8003d08:	20001420 	.word	0x20001420
 8003d0c:	0800374d 	.word	0x0800374d
 8003d10:	200013f8 	.word	0x200013f8
 8003d14:	08003455 	.word	0x08003455
 8003d18:	08003c0d 	.word	0x08003c0d
 8003d1c:	2000141c 	.word	0x2000141c

08003d20 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8003d24:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 8003d26:	f241 4200 	movw	r2, #5120	; 0x1400
 8003d2a:	f241 4420 	movw	r4, #5152	; 0x1420
 8003d2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003d32:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003d36:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 8003d38:	2402      	movs	r4, #2
 8003d3a:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 8003d3c:	f241 30f8 	movw	r0, #5112	; 0x13f8
 8003d40:	f240 0360 	movw	r3, #96	; 0x60
  pUser_Standard_Requests = &User_Standard_Requests;
 8003d44:	f241 411c 	movw	r1, #5148	; 0x141c
 8003d48:	f240 0290 	movw	r2, #144	; 0x90
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8003d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d50:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 8003d54:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003d58:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8003d5c:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8003d5e:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	4780      	blx	r0
 8003d64:	bd10      	pop	{r4, pc}
 8003d66:	bf00      	nop

08003d68 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8003d68:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8003d6c:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003d70:	1c53      	adds	r3, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8003d72:	004a      	lsls	r2, r1, #1
  for (i = n; i != 0; i--)
 8003d74:	1059      	asrs	r1, r3, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003d76:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003d78:	d02f      	beq.n	8003dda <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003d7a:	7845      	ldrb	r5, [r0, #1]
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8003d7c:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003d7e:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8003d82:	3901      	subs	r1, #1
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003d84:	ea44 2305 	orr.w	r3, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8003d88:	f822 3b04 	strh.w	r3, [r2], #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	3204      	adds	r2, #4
 8003d90:	f001 0101 	and.w	r1, r1, #1
 8003d94:	3002      	adds	r0, #2
 8003d96:	b303      	cbz	r3, 8003dda <UserToPMABufferCopy+0x72>
 8003d98:	b159      	cbz	r1, 8003db2 <UserToPMABufferCopy+0x4a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003d9a:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003d9e:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8003da2:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003da4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8003da8:	f822 1c04 	strh.w	r1, [r2, #-4]
 8003dac:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003dae:	3b01      	subs	r3, #1
 8003db0:	d013      	beq.n	8003dda <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003db2:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003db6:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8003dba:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8003dbe:	f822 4c04 	strh.w	r4, [r2, #-4]
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003dc2:	7844      	ldrb	r4, [r0, #1]
 8003dc4:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003dc6:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8003dca:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003dcc:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8003dd0:	f822 1b04 	strh.w	r1, [r2], #4
 8003dd4:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003dd6:	3b02      	subs	r3, #2
 8003dd8:	d1eb      	bne.n	8003db2 <UserToPMABufferCopy+0x4a>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8003dda:	bc30      	pop	{r4, r5}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop

08003de0 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8003de0:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8003de4:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8003de8:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8003dea:	0059      	lsls	r1, r3, #1
  for (i = n; i != 0; i--)
 8003dec:	1052      	asrs	r2, r2, #1
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003dee:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003df0:	d01c      	beq.n	8003e2c <PMAToUserBufferCopy+0x4c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003df2:	680b      	ldr	r3, [r1, #0]
 8003df4:	3a01      	subs	r2, #1
 8003df6:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	3002      	adds	r0, #2
 8003dfe:	f002 0201 	and.w	r2, r2, #1
 8003e02:	b19b      	cbz	r3, 8003e2c <PMAToUserBufferCopy+0x4c>
 8003e04:	b132      	cbz	r2, 8003e14 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003e06:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8003e0a:	f820 2c02 	strh.w	r2, [r0, #-2]
 8003e0e:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003e10:	3b01      	subs	r3, #1
 8003e12:	d00b      	beq.n	8003e2c <PMAToUserBufferCopy+0x4c>
 8003e14:	1d0c      	adds	r4, r1, #4
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003e16:	684d      	ldr	r5, [r1, #4]
 8003e18:	6889      	ldr	r1, [r1, #8]
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	f820 5c02 	strh.w	r5, [r0, #-2]
 8003e20:	f822 1b02 	strh.w	r1, [r2], #2
 8003e24:	1c90      	adds	r0, r2, #2
 8003e26:	1d21      	adds	r1, r4, #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003e28:	3b02      	subs	r3, #2
 8003e2a:	d1f3      	bne.n	8003e14 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8003e2c:	bc30      	pop	{r4, r5}
 8003e2e:	4770      	bx	lr

08003e30 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8003e30:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003e34:	f645 4250 	movw	r2, #23632	; 0x5c50
 8003e38:	4003      	ands	r3, r0
 8003e3a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop

08003e44 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8003e44:	0080      	lsls	r0, r0, #2
 8003e46:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003e4a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8003e4e:	6810      	ldr	r0, [r2, #0]
 8003e50:	f648 138f 	movw	r3, #35215	; 0x898f
 8003e54:	4003      	ands	r3, r0
 8003e56:	4319      	orrs	r1, r3
 8003e58:	6011      	str	r1, [r2, #0]
 8003e5a:	4770      	bx	lr

08003e5c <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8003e5c:	0080      	lsls	r0, r0, #2
 8003e5e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003e62:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8003e66:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8003e68:	f001 0010 	and.w	r0, r1, #16
 8003e6c:	6814      	ldr	r4, [r2, #0]
 8003e6e:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8003e72:	b280      	uxth	r0, r0
 8003e74:	4023      	ands	r3, r4
 8003e76:	b968      	cbnz	r0, 8003e94 <SetEPTxStatus+0x38>
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f001 0120 	and.w	r1, r1, #32
 8003e7e:	b288      	uxth	r0, r1
 8003e80:	b108      	cbz	r0, 8003e86 <SetEPTxStatus+0x2a>
 8003e82:	f083 0320 	eor.w	r3, r3, #32
 8003e86:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8003e8a:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8003e8e:	6010      	str	r0, [r2, #0]
}
 8003e90:	bc10      	pop	{r4}
 8003e92:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8003e94:	f083 0310 	eor.w	r3, r3, #16
 8003e98:	e7ef      	b.n	8003e7a <SetEPTxStatus+0x1e>
 8003e9a:	bf00      	nop

08003e9c <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8003e9c:	0080      	lsls	r0, r0, #2
 8003e9e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003ea2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8003ea6:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8003ea8:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 8003eac:	6814      	ldr	r4, [r2, #0]
 8003eae:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8003eb2:	b280      	uxth	r0, r0
 8003eb4:	4023      	ands	r3, r4
 8003eb6:	b968      	cbnz	r0, 8003ed4 <SetEPRxStatus+0x38>
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8003ebe:	b288      	uxth	r0, r1
 8003ec0:	b108      	cbz	r0, 8003ec6 <SetEPRxStatus+0x2a>
 8003ec2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ec6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8003eca:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8003ece:	6010      	str	r0, [r2, #0]
}
 8003ed0:	bc10      	pop	{r4}
 8003ed2:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8003ed4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ed8:	e7ef      	b.n	8003eba <SetEPRxStatus+0x1e>
 8003eda:	bf00      	nop

08003edc <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8003edc:	0080      	lsls	r0, r0, #2
 8003ede:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003ee2:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8003ee6:	6801      	ldr	r1, [r0, #0]
 8003ee8:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8003eec:	400b      	ands	r3, r1
 8003eee:	f083 0230 	eor.w	r2, r3, #48	; 0x30
 8003ef2:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8003ef6:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8003efa:	6003      	str	r3, [r0, #0]
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop

08003f00 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8003f00:	0080      	lsls	r0, r0, #2
 8003f02:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003f06:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8003f0a:	6801      	ldr	r1, [r0, #0]
 8003f0c:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8003f10:	400b      	ands	r3, r1
 8003f12:	f483 5240 	eor.w	r2, r3, #12288	; 0x3000
 8003f16:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8003f1a:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8003f1e:	6003      	str	r3, [r0, #0]
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop

08003f24 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8003f24:	0080      	lsls	r0, r0, #2
 8003f26:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003f2a:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8003f2e:	6801      	ldr	r1, [r0, #0]
 8003f30:	f640 630f 	movw	r3, #3599	; 0xe0f
 8003f34:	400b      	ands	r3, r1
 8003f36:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003f3a:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8003f3e:	6001      	str	r1, [r0, #0]
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop

08003f44 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8003f44:	0080      	lsls	r0, r0, #2
 8003f46:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8003f4a:	f503 40b8 	add.w	r0, r3, #23552	; 0x5c00
 8003f4e:	6802      	ldr	r2, [r0, #0]
 8003f50:	0451      	lsls	r1, r2, #17
 8003f52:	d508      	bpl.n	8003f66 <ClearDTOG_RX+0x22>
 8003f54:	6801      	ldr	r1, [r0, #0]
 8003f56:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003f5a:	400b      	ands	r3, r1
 8003f5c:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8003f60:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8003f64:	6001      	str	r1, [r0, #0]
 8003f66:	4770      	bx	lr

08003f68 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8003f68:	0080      	lsls	r0, r0, #2
 8003f6a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8003f6e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	0650      	lsls	r0, r2, #25
 8003f76:	d508      	bpl.n	8003f8a <ClearDTOG_TX+0x22>
 8003f78:	6819      	ldr	r1, [r3, #0]
 8003f7a:	f640 700f 	movw	r0, #3855	; 0xf0f
 8003f7e:	4008      	ands	r0, r1
 8003f80:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 8003f84:	f042 01c0 	orr.w	r1, r2, #192	; 0xc0
 8003f88:	6019      	str	r1, [r3, #0]
 8003f8a:	4770      	bx	lr

08003f8c <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8003f8c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003f90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8003f9a:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8003f9c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003fa0:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8003fa4:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 8003fa8:	0042      	lsls	r2, r0, #1
 8003faa:	400b      	ands	r3, r1
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	4770      	bx	lr

08003fb0 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8003fb0:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003fb4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8003fbe:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8003fc0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003fc8:	18c3      	adds	r3, r0, r3
 8003fca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003fce:	0058      	lsls	r0, r3, #1
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	6002      	str	r2, [r0, #0]
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop

08003fd8 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8003fd8:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003fdc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003fe0:	6819      	ldr	r1, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8003fe2:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8003fe4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003fe8:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8003fec:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 8003ff0:	004a      	lsls	r2, r1, #1
}
 8003ff2:	8810      	ldrh	r0, [r2, #0]
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop

08003ff8 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8003ff8:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003ffc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	f243 0104 	movw	r1, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8004006:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8004008:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800400c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004010:	1842      	adds	r2, r0, r1
 8004012:	0051      	lsls	r1, r2, #1
}
 8004014:	8808      	ldrh	r0, [r1, #0]
 8004016:	4770      	bx	lr

08004018 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8004018:	f645 4350 	movw	r3, #23632	; 0x5c50
 800401c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8004026:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8004028:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800402c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004030:	18c3      	adds	r3, r0, r3
 8004032:	005a      	lsls	r2, r3, #1
 8004034:	6011      	str	r1, [r2, #0]
 8004036:	4770      	bx	lr

08004038 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8004038:	f645 4350 	movw	r3, #23632	; 0x5c50
 800403c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8004046:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8004048:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800404c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004050:	18c3      	adds	r3, r0, r3
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	293e      	cmp	r1, #62	; 0x3e
 8004056:	d909      	bls.n	800406c <SetEPRxCount+0x34>
 8004058:	094a      	lsrs	r2, r1, #5
 800405a:	06c9      	lsls	r1, r1, #27
 800405c:	d101      	bne.n	8004062 <SetEPRxCount+0x2a>
 800405e:	1e50      	subs	r0, r2, #1
 8004060:	b282      	uxth	r2, r0
 8004062:	0291      	lsls	r1, r2, #10
 8004064:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8004068:	6018      	str	r0, [r3, #0]
 800406a:	4770      	bx	lr
 800406c:	084a      	lsrs	r2, r1, #1
 800406e:	07c8      	lsls	r0, r1, #31
 8004070:	bf48      	it	mi
 8004072:	3201      	addmi	r2, #1
 8004074:	0291      	lsls	r1, r2, #10
 8004076:	6019      	str	r1, [r3, #0]
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop

0800407c <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800407c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8004080:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	f243 0106 	movw	r1, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800408a:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800408c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004090:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004094:	1842      	adds	r2, r0, r1
 8004096:	0051      	lsls	r1, r2, #1
 8004098:	680b      	ldr	r3, [r1, #0]
}
 800409a:	0598      	lsls	r0, r3, #22
 800409c:	0d80      	lsrs	r0, r0, #22
 800409e:	4770      	bx	lr

080040a0 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 80040a0:	b2c3      	uxtb	r3, r0
 80040a2:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 80040a4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop

080040ac <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 80040ac:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 80040ae:	f241 4324 	movw	r3, #5156	; 0x1424
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80040b2:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80040b6:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 80040ba:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80040be:	2000      	movs	r0, #0
 80040c0:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 80040c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80040c8:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80040cc:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 80040ce:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80040d0:	6011      	str	r1, [r2, #0]
  return 0;
}
 80040d2:	bc10      	pop	{r4}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop

080040d8 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 80040d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80040da:	f244 037d 	movw	r3, #16509	; 0x407d
 80040de:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 80040e2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80040e6:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 80040e8:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80040ea:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 80040ec:	f643 71f9 	movw	r1, #16377	; 0x3ff9
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80040f0:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 80040f2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80040f6:	4628      	mov	r0, r5
 80040f8:	4788      	blx	r1
 80040fa:	f643 53e1 	movw	r3, #15841	; 0x3de1
 80040fe:	4601      	mov	r1, r0
 8004100:	4622      	mov	r2, r4
 8004102:	4630      	mov	r0, r6
 8004104:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004108:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 800410a:	4620      	mov	r0, r4
 800410c:	bd70      	pop	{r4, r5, r6, pc}
 800410e:	bf00      	nop

08004110 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8004110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004114:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80042c4 <CTR_LP+0x1b4>
 8004118:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800411a:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800411e:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8004120:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80042c8 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8004124:	4d62      	ldr	r5, [pc, #392]	; (80042b0 <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8004126:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800412a:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 800412e:	46d0      	mov	r8, sl
 8004130:	f8db 0000 	ldr.w	r0, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8004134:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8004138:	b282      	uxth	r2, r0
 800413a:	0403      	lsls	r3, r0, #16
 800413c:	f8aa 2000 	strh.w	r2, [sl]
 8004140:	f140 80ab 	bpl.w	800429a <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8004144:	f8b8 3000 	ldrh.w	r3, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8004148:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800414c:	f003 020f 	and.w	r2, r3, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8004150:	0090      	lsls	r0, r2, #2
 8004152:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 8004156:	4e57      	ldr	r6, [pc, #348]	; (80042b4 <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8004158:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800415c:	4f54      	ldr	r7, [pc, #336]	; (80042b0 <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 800415e:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8004160:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8004164:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 8004168:	2a00      	cmp	r2, #0
 800416a:	d133      	bne.n	80041d4 <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800416c:	6822      	ldr	r2, [r4, #0]
 800416e:	b290      	uxth	r0, r2
 8004170:	8028      	strh	r0, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8004172:	882b      	ldrh	r3, [r5, #0]
 8004174:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004178:	8032      	strh	r2, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 800417a:	8828      	ldrh	r0, [r5, #0]
 800417c:	f400 5340 	and.w	r3, r0, #12288	; 0x3000
 8004180:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	4011      	ands	r1, r2
 8004186:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800418a:	f081 0020 	eor.w	r0, r1, #32
 800418e:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8004192:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004196:	6022      	str	r2, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8004198:	f8b8 1000 	ldrh.w	r1, [r8]
 800419c:	f001 0010 	and.w	r0, r1, #16
 80041a0:	b283      	uxth	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d049      	beq.n	800423a <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 80041a6:	6822      	ldr	r2, [r4, #0]
 80041a8:	b291      	uxth	r1, r2
 80041aa:	f8ad 1006 	strh.w	r1, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 80041ae:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80041b2:	f400 6300 	and.w	r3, r0, #2048	; 0x800
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	2a00      	cmp	r2, #0
 80041ba:	d171      	bne.n	80042a0 <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 80041bc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80041c0:	b208      	sxth	r0, r1
 80041c2:	2800      	cmp	r0, #0
 80041c4:	dab4      	bge.n	8004130 <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 80041c6:	6822      	ldr	r2, [r4, #0]
 80041c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80041cc:	4013      	ands	r3, r2
 80041ce:	6023      	str	r3, [r4, #0]
          Out0_Process();
 80041d0:	4939      	ldr	r1, [pc, #228]	; (80042b8 <CTR_LP+0x1a8>)
 80041d2:	e038      	b.n	8004246 <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80041d4:	6804      	ldr	r4, [r0, #0]
 80041d6:	b2a1      	uxth	r1, r4
 80041d8:	f8ad 1006 	strh.w	r1, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 80041dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80041e0:	b214      	sxth	r4, r2
 80041e2:	2c00      	cmp	r4, #0
 80041e4:	db1b      	blt.n	800421e <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 80041e6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80041ea:	f001 0280 	and.w	r2, r1, #128	; 0x80
 80041ee:	b293      	uxth	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d09d      	beq.n	8004130 <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80041f4:	f899 4000 	ldrb.w	r4, [r9]
 80041f8:	f648 730f 	movw	r3, #36623	; 0x8f0f
 80041fc:	00a0      	lsls	r0, r4, #2
 80041fe:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 8004202:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 8004206:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8004208:	3c01      	subs	r4, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800420a:	4003      	ands	r3, r0
 800420c:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800420e:	f240 0320 	movw	r3, #32
 8004212:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004216:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800421a:	4788      	blx	r1
 800421c:	e788      	b.n	8004130 <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800421e:	6801      	ldr	r1, [r0, #0]
 8004220:	f640 728f 	movw	r2, #3983	; 0xf8f
 8004224:	400a      	ands	r2, r1
 8004226:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8004228:	f240 003c 	movw	r0, #60	; 0x3c
 800422c:	3b01      	subs	r3, #1
 800422e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004232:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8004236:	47a0      	blx	r4
 8004238:	e7d5      	b.n	80041e6 <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 800423a:	6821      	ldr	r1, [r4, #0]
 800423c:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8004240:	400b      	ands	r3, r1
        In0_Process();
 8004242:	491e      	ldr	r1, [pc, #120]	; (80042bc <CTR_LP+0x1ac>)
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8004244:	6023      	str	r3, [r4, #0]
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 8004246:	4788      	blx	r1
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8004248:	6820      	ldr	r0, [r4, #0]
 800424a:	883a      	ldrh	r2, [r7, #0]
 800424c:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8004250:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 8004254:	b28a      	uxth	r2, r1
 8004256:	4003      	ands	r3, r0
 8004258:	b10a      	cbz	r2, 800425e <CTR_LP+0x14e>
 800425a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800425e:	8838      	ldrh	r0, [r7, #0]
 8004260:	f400 5100 	and.w	r1, r0, #8192	; 0x2000
 8004264:	b28a      	uxth	r2, r1
 8004266:	b10a      	cbz	r2, 800426c <CTR_LP+0x15c>
 8004268:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800426c:	8830      	ldrh	r0, [r6, #0]
 800426e:	f000 0110 	and.w	r1, r0, #16
 8004272:	b28a      	uxth	r2, r1
 8004274:	b10a      	cbz	r2, 800427a <CTR_LP+0x16a>
 8004276:	f083 0310 	eor.w	r3, r3, #16
 800427a:	8830      	ldrh	r0, [r6, #0]
 800427c:	f000 0120 	and.w	r1, r0, #32
 8004280:	b28a      	uxth	r2, r1
 8004282:	b10a      	cbz	r2, 8004288 <CTR_LP+0x178>
 8004284:	f083 0320 	eor.w	r3, r3, #32
 8004288:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 800428c:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8004290:	f040 0280 	orr.w	r2, r0, #128	; 0x80
 8004294:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8004298:	600a      	str	r2, [r1, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800429a:	b003      	add	sp, #12
 800429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 80042a0:	6820      	ldr	r0, [r4, #0]
 80042a2:	f640 728f 	movw	r2, #3983	; 0xf8f
 80042a6:	4002      	ands	r2, r0
 80042a8:	6022      	str	r2, [r4, #0]
          Setup0_Process();
 80042aa:	4905      	ldr	r1, [pc, #20]	; (80042c0 <CTR_LP+0x1b0>)
 80042ac:	e7cb      	b.n	8004246 <CTR_LP+0x136>
 80042ae:	bf00      	nop
 80042b0:	20001426 	.word	0x20001426
 80042b4:	20001428 	.word	0x20001428
 80042b8:	08003795 	.word	0x08003795
 80042bc:	08003cb5 	.word	0x08003cb5
 80042c0:	08003885 	.word	0x08003885
 80042c4:	20000bc8 	.word	0x20000bc8
 80042c8:	200013fc 	.word	0x200013fc
 80042cc:	00000a0a 	.word	0x00000a0a
 80042d0:	2a2a2a2a 	.word	0x2a2a2a2a
 80042d4:	2a2a2a2a 	.word	0x2a2a2a2a
 80042d8:	2a2a2a2a 	.word	0x2a2a2a2a
 80042dc:	2a2a2a2a 	.word	0x2a2a2a2a
 80042e0:	2a2a2a2a 	.word	0x2a2a2a2a
 80042e4:	2a2a2a2a 	.word	0x2a2a2a2a
 80042e8:	2a2a2a2a 	.word	0x2a2a2a2a
 80042ec:	2a2a2a2a 	.word	0x2a2a2a2a
 80042f0:	2a2a2a2a 	.word	0x2a2a2a2a
 80042f4:	2a2a2a2a 	.word	0x2a2a2a2a
 80042f8:	2a2a2a2a 	.word	0x2a2a2a2a
 80042fc:	2a2a2a2a 	.word	0x2a2a2a2a
 8004300:	2a2a2a2a 	.word	0x2a2a2a2a
 8004304:	0a2a2a2a 	.word	0x0a2a2a2a
 8004308:	00000000 	.word	0x00000000
 800430c:	20202020 	.word	0x20202020
 8004310:	20202020 	.word	0x20202020
 8004314:	20202020 	.word	0x20202020
 8004318:	20202020 	.word	0x20202020
 800431c:	20202020 	.word	0x20202020
 8004320:	504d2020 	.word	0x504d2020
 8004324:	35303655 	.word	0x35303655
 8004328:	20202030 	.word	0x20202030
 800432c:	20202020 	.word	0x20202020
 8004330:	20202020 	.word	0x20202020
 8004334:	20202020 	.word	0x20202020
 8004338:	20202020 	.word	0x20202020
 800433c:	20202020 	.word	0x20202020
 8004340:	0a202020 	.word	0x0a202020
 8004344:	00000000 	.word	0x00000000
 8004348:	2e31202a 	.word	0x2e31202a
 800434c:	44434c20 	.word	0x44434c20
 8004350:	656c4320 	.word	0x656c4320
 8004354:	20207261 	.word	0x20207261
 8004358:	20202020 	.word	0x20202020
 800435c:	20202020 	.word	0x20202020
 8004360:	20202020 	.word	0x20202020
 8004364:	20202020 	.word	0x20202020
 8004368:	20202020 	.word	0x20202020
 800436c:	20202020 	.word	0x20202020
 8004370:	20202020 	.word	0x20202020
 8004374:	20202020 	.word	0x20202020
 8004378:	20202020 	.word	0x20202020
 800437c:	0a2a2020 	.word	0x0a2a2020
 8004380:	00000000 	.word	0x00000000
 8004384:	2e32202a 	.word	0x2e32202a
 8004388:	6f685320 	.word	0x6f685320
 800438c:	63412077 	.word	0x63412077
 8004390:	20202063 	.word	0x20202063
 8004394:	20202020 	.word	0x20202020
 8004398:	20202020 	.word	0x20202020
 800439c:	20202020 	.word	0x20202020
 80043a0:	20202020 	.word	0x20202020
 80043a4:	20202020 	.word	0x20202020
 80043a8:	20202020 	.word	0x20202020
 80043ac:	20202020 	.word	0x20202020
 80043b0:	20202020 	.word	0x20202020
 80043b4:	20202020 	.word	0x20202020
 80043b8:	0a2a2020 	.word	0x0a2a2020
 80043bc:	00000000 	.word	0x00000000
 80043c0:	2e33202a 	.word	0x2e33202a
 80043c4:	20202020 	.word	0x20202020
 80043c8:	20202020 	.word	0x20202020
 80043cc:	20202020 	.word	0x20202020
 80043d0:	20202020 	.word	0x20202020
 80043d4:	20202020 	.word	0x20202020
 80043d8:	20202020 	.word	0x20202020
 80043dc:	20202020 	.word	0x20202020
 80043e0:	20202020 	.word	0x20202020
 80043e4:	20202020 	.word	0x20202020
 80043e8:	20202020 	.word	0x20202020
 80043ec:	20202020 	.word	0x20202020
 80043f0:	20202020 	.word	0x20202020
 80043f4:	0a2a2020 	.word	0x0a2a2020
 80043f8:	00000000 	.word	0x00000000
 80043fc:	2e34202a 	.word	0x2e34202a
 8004400:	20202020 	.word	0x20202020
 8004404:	20202020 	.word	0x20202020
 8004408:	20202020 	.word	0x20202020
 800440c:	20202020 	.word	0x20202020
 8004410:	20202020 	.word	0x20202020
 8004414:	20202020 	.word	0x20202020
 8004418:	20202020 	.word	0x20202020
 800441c:	20202020 	.word	0x20202020
 8004420:	20202020 	.word	0x20202020
 8004424:	20202020 	.word	0x20202020
 8004428:	20202020 	.word	0x20202020
 800442c:	20202020 	.word	0x20202020
 8004430:	0a2a2020 	.word	0x0a2a2020
 8004434:	00000000 	.word	0x00000000
 8004438:	2e35202a 	.word	0x2e35202a
 800443c:	20202020 	.word	0x20202020
 8004440:	20202020 	.word	0x20202020
 8004444:	20202020 	.word	0x20202020
 8004448:	20202020 	.word	0x20202020
 800444c:	20202020 	.word	0x20202020
 8004450:	20202020 	.word	0x20202020
 8004454:	20202020 	.word	0x20202020
 8004458:	20202020 	.word	0x20202020
 800445c:	20202020 	.word	0x20202020
 8004460:	20202020 	.word	0x20202020
 8004464:	20202020 	.word	0x20202020
 8004468:	20202020 	.word	0x20202020
 800446c:	0a2a2020 	.word	0x0a2a2020
 8004470:	00000000 	.word	0x00000000
 8004474:	2e36202a 	.word	0x2e36202a
 8004478:	20202020 	.word	0x20202020
 800447c:	20202020 	.word	0x20202020
 8004480:	20202020 	.word	0x20202020
 8004484:	20202020 	.word	0x20202020
 8004488:	20202020 	.word	0x20202020
 800448c:	20202020 	.word	0x20202020
 8004490:	20202020 	.word	0x20202020
 8004494:	20202020 	.word	0x20202020
 8004498:	20202020 	.word	0x20202020
 800449c:	20202020 	.word	0x20202020
 80044a0:	20202020 	.word	0x20202020
 80044a4:	20202020 	.word	0x20202020
 80044a8:	0a2a2020 	.word	0x0a2a2020
 80044ac:	00000000 	.word	0x00000000
 80044b0:	2e37202a 	.word	0x2e37202a
 80044b4:	20202020 	.word	0x20202020
 80044b8:	20202020 	.word	0x20202020
 80044bc:	20202020 	.word	0x20202020
 80044c0:	20202020 	.word	0x20202020
 80044c4:	20202020 	.word	0x20202020
 80044c8:	20202020 	.word	0x20202020
 80044cc:	20202020 	.word	0x20202020
 80044d0:	20202020 	.word	0x20202020
 80044d4:	20202020 	.word	0x20202020
 80044d8:	20202020 	.word	0x20202020
 80044dc:	20202020 	.word	0x20202020
 80044e0:	20202020 	.word	0x20202020
 80044e4:	0a2a2020 	.word	0x0a2a2020
 80044e8:	00000000 	.word	0x00000000
 80044ec:	2e38202a 	.word	0x2e38202a
 80044f0:	20202020 	.word	0x20202020
 80044f4:	20202020 	.word	0x20202020
 80044f8:	20202020 	.word	0x20202020
 80044fc:	20202020 	.word	0x20202020
 8004500:	20202020 	.word	0x20202020
 8004504:	20202020 	.word	0x20202020
 8004508:	20202020 	.word	0x20202020
 800450c:	20202020 	.word	0x20202020
 8004510:	20202020 	.word	0x20202020
 8004514:	20202020 	.word	0x20202020
 8004518:	20202020 	.word	0x20202020
 800451c:	20202020 	.word	0x20202020
 8004520:	0a2a2020 	.word	0x0a2a2020
 8004524:	00000000 	.word	0x00000000
 8004528:	2e39202a 	.word	0x2e39202a
 800452c:	20202020 	.word	0x20202020
 8004530:	20202020 	.word	0x20202020
 8004534:	20202020 	.word	0x20202020
 8004538:	20202020 	.word	0x20202020
 800453c:	20202020 	.word	0x20202020
 8004540:	20202020 	.word	0x20202020
 8004544:	20202020 	.word	0x20202020
 8004548:	20202020 	.word	0x20202020
 800454c:	20202020 	.word	0x20202020
 8004550:	20202020 	.word	0x20202020
 8004554:	20202020 	.word	0x20202020
 8004558:	20202020 	.word	0x20202020
 800455c:	0a2a2020 	.word	0x0a2a2020
 8004560:	00000000 	.word	0x00000000
 8004564:	2e6d202a 	.word	0x2e6d202a
 8004568:	654d2020 	.word	0x654d2020
 800456c:	2020756e 	.word	0x2020756e
 8004570:	20202020 	.word	0x20202020
 8004574:	20202020 	.word	0x20202020
 8004578:	20202020 	.word	0x20202020
 800457c:	20202020 	.word	0x20202020
 8004580:	20202020 	.word	0x20202020
 8004584:	20202020 	.word	0x20202020
 8004588:	20202020 	.word	0x20202020
 800458c:	20202020 	.word	0x20202020
 8004590:	20202020 	.word	0x20202020
 8004594:	20202020 	.word	0x20202020
 8004598:	0a2a2020 	.word	0x0a2a2020
 800459c:	00000000 	.word	0x00000000
 80045a0:	00203e3e 	.word	0x00203e3e
 80045a4:	2044434c 	.word	0x2044434c
 80045a8:	61656c43 	.word	0x61656c43
 80045ac:	000a2072 	.word	0x000a2072
 80045b0:	25205841 	.word	0x25205841
 80045b4:	00002064 	.word	0x00002064
 80045b8:	25205941 	.word	0x25205941
 80045bc:	00002064 	.word	0x00002064
 80045c0:	25205a41 	.word	0x25205a41
 80045c4:	00002064 	.word	0x00002064
 80045c8:	64252054 	.word	0x64252054
 80045cc:	00000a20 	.word	0x00000a20
 80045d0:	3025200a 	.word	0x3025200a
 80045d4:	203a6433 	.word	0x203a6433
 80045d8:	00000000 	.word	0x00000000
 80045dc:	78323025 	.word	0x78323025
 80045e0:	00000020 	.word	0x00000020
 80045e4:	276e6143 	.word	0x276e6143
 80045e8:	69662074 	.word	0x69662074
 80045ec:	4d20646e 	.word	0x4d20646e
 80045f0:	30365550 	.word	0x30365550
 80045f4:	0a203035 	.word	0x0a203035
 80045f8:	00000000 	.word	0x00000000
 80045fc:	20727245 	.word	0x20727245
 8004600:	74697277 	.word	0x74697277
 8004604:	504d2065 	.word	0x504d2065
 8004608:	35303655 	.word	0x35303655
 800460c:	41525f30 	.word	0x41525f30
 8004610:	5257505f 	.word	0x5257505f
 8004614:	4d474d5f 	.word	0x4d474d5f
 8004618:	20315f54 	.word	0x20315f54
 800461c:	6425203a 	.word	0x6425203a
 8004620:	0000000a 	.word	0x0000000a

08004624 <Virtual_Com_Port_StringVendor>:
 8004624:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8004634:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8004644:	00630069 00000073                       i.c.s...

0800464c <Virtual_Com_Port_DeviceDescriptor>:
 800464c:	02000112 40000002 57400483 02010200     .......@..@W....
 800465c:	00000103                                ....

08004660 <Virtual_Com_Port_StringLangID>:
 8004660:	04090304                                ....

08004664 <Virtual_Com_Port_StringProduct>:
 8004664:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8004674:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8004684:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8004694:	00000020                                 ...

08004698 <Virtual_Com_Port_ConfigDescriptor>:
 8004698:	00430209 c0000102 00040932 02020100     ..C.....2.......
 80046a8:	24050001 05011000 01000124 02022404     ...$....$....$..
 80046b8:	00062405 82050701 ff000803 00010409     .$..............
 80046c8:	00000a02 03050700 00004002 02810507     .........@......
 80046d8:	00000040                                @...
