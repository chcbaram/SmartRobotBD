
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006230  08000000  08000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000030c  20000000  08006230  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001240  20000400  08006800  00010400  2**9
                  ALLOC
  3 ._usrstack    00000100  20001640  08007a40  00010400  2**0
                  ALLOC
  4 .ARM.attributes 00000033  00000000  00000000  0001030c  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000bcad  00000000  00000000  0001033f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000360c  00000000  00000000  0001bfec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000bec5  00000000  00000000  0001f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000c70  00000000  00000000  0002b4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000026c8  00000000  00000000  0002c12d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003f2a  00000000  00000000  0002e7f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000029b4  00000000  00000000  0003271f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000070  00000000  00000000  000350d3  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001fa0  00000000  00000000  00035144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 e5 1d 00 08                             .P. ....

08000008 <__aeabi_drsub>:
 8000008:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800000c:	e002      	b.n	8000014 <__adddf3>
 800000e:	bf00      	nop

08000010 <__aeabi_dsub>:
 8000010:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000014 <__adddf3>:
 8000014:	b530      	push	{r4, r5, lr}
 8000016:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800001a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800001e:	ea94 0f05 	teq	r4, r5
 8000022:	bf08      	it	eq
 8000024:	ea90 0f02 	teqeq	r0, r2
 8000028:	bf1f      	itttt	ne
 800002a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800002e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000032:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000036:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800003a:	f000 80e2 	beq.w	8000202 <__adddf3+0x1ee>
 800003e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000042:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000046:	bfb8      	it	lt
 8000048:	426d      	neglt	r5, r5
 800004a:	dd0c      	ble.n	8000066 <__adddf3+0x52>
 800004c:	442c      	add	r4, r5
 800004e:	ea80 0202 	eor.w	r2, r0, r2
 8000052:	ea81 0303 	eor.w	r3, r1, r3
 8000056:	ea82 0000 	eor.w	r0, r2, r0
 800005a:	ea83 0101 	eor.w	r1, r3, r1
 800005e:	ea80 0202 	eor.w	r2, r0, r2
 8000062:	ea81 0303 	eor.w	r3, r1, r3
 8000066:	2d36      	cmp	r5, #54	; 0x36
 8000068:	bf88      	it	hi
 800006a:	bd30      	pophi	{r4, r5, pc}
 800006c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000070:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000074:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000078:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800007c:	d002      	beq.n	8000084 <__adddf3+0x70>
 800007e:	4240      	negs	r0, r0
 8000080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000084:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000088:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800008c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000090:	d002      	beq.n	8000098 <__adddf3+0x84>
 8000092:	4252      	negs	r2, r2
 8000094:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000098:	ea94 0f05 	teq	r4, r5
 800009c:	f000 80a7 	beq.w	80001ee <__adddf3+0x1da>
 80000a0:	f1a4 0401 	sub.w	r4, r4, #1
 80000a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80000a8:	db0d      	blt.n	80000c6 <__adddf3+0xb2>
 80000aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80000ae:	fa22 f205 	lsr.w	r2, r2, r5
 80000b2:	1880      	adds	r0, r0, r2
 80000b4:	f141 0100 	adc.w	r1, r1, #0
 80000b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80000bc:	1880      	adds	r0, r0, r2
 80000be:	fa43 f305 	asr.w	r3, r3, r5
 80000c2:	4159      	adcs	r1, r3
 80000c4:	e00e      	b.n	80000e4 <__adddf3+0xd0>
 80000c6:	f1a5 0520 	sub.w	r5, r5, #32
 80000ca:	f10e 0e20 	add.w	lr, lr, #32
 80000ce:	2a01      	cmp	r2, #1
 80000d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80000d4:	bf28      	it	cs
 80000d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80000da:	fa43 f305 	asr.w	r3, r3, r5
 80000de:	18c0      	adds	r0, r0, r3
 80000e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80000e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80000e8:	d507      	bpl.n	80000fa <__adddf3+0xe6>
 80000ea:	f04f 0e00 	mov.w	lr, #0
 80000ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80000f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80000f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80000fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80000fe:	d31b      	bcc.n	8000138 <__adddf3+0x124>
 8000100:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000104:	d30c      	bcc.n	8000120 <__adddf3+0x10c>
 8000106:	0849      	lsrs	r1, r1, #1
 8000108:	ea5f 0030 	movs.w	r0, r0, rrx
 800010c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000110:	f104 0401 	add.w	r4, r4, #1
 8000114:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000118:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800011c:	f080 809a 	bcs.w	8000254 <__adddf3+0x240>
 8000120:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000124:	bf08      	it	eq
 8000126:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800012a:	f150 0000 	adcs.w	r0, r0, #0
 800012e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000132:	ea41 0105 	orr.w	r1, r1, r5
 8000136:	bd30      	pop	{r4, r5, pc}
 8000138:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800013c:	4140      	adcs	r0, r0
 800013e:	eb41 0101 	adc.w	r1, r1, r1
 8000142:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000146:	f1a4 0401 	sub.w	r4, r4, #1
 800014a:	d1e9      	bne.n	8000120 <__adddf3+0x10c>
 800014c:	f091 0f00 	teq	r1, #0
 8000150:	bf04      	itt	eq
 8000152:	4601      	moveq	r1, r0
 8000154:	2000      	moveq	r0, #0
 8000156:	fab1 f381 	clz	r3, r1
 800015a:	bf08      	it	eq
 800015c:	3320      	addeq	r3, #32
 800015e:	f1a3 030b 	sub.w	r3, r3, #11
 8000162:	f1b3 0220 	subs.w	r2, r3, #32
 8000166:	da0c      	bge.n	8000182 <__adddf3+0x16e>
 8000168:	320c      	adds	r2, #12
 800016a:	dd08      	ble.n	800017e <__adddf3+0x16a>
 800016c:	f102 0c14 	add.w	ip, r2, #20
 8000170:	f1c2 020c 	rsb	r2, r2, #12
 8000174:	fa01 f00c 	lsl.w	r0, r1, ip
 8000178:	fa21 f102 	lsr.w	r1, r1, r2
 800017c:	e00c      	b.n	8000198 <__adddf3+0x184>
 800017e:	f102 0214 	add.w	r2, r2, #20
 8000182:	bfd8      	it	le
 8000184:	f1c2 0c20 	rsble	ip, r2, #32
 8000188:	fa01 f102 	lsl.w	r1, r1, r2
 800018c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000190:	bfdc      	itt	le
 8000192:	ea41 010c 	orrle.w	r1, r1, ip
 8000196:	4090      	lslle	r0, r2
 8000198:	1ae4      	subs	r4, r4, r3
 800019a:	bfa2      	ittt	ge
 800019c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80001a0:	4329      	orrge	r1, r5
 80001a2:	bd30      	popge	{r4, r5, pc}
 80001a4:	ea6f 0404 	mvn.w	r4, r4
 80001a8:	3c1f      	subs	r4, #31
 80001aa:	da1c      	bge.n	80001e6 <__adddf3+0x1d2>
 80001ac:	340c      	adds	r4, #12
 80001ae:	dc0e      	bgt.n	80001ce <__adddf3+0x1ba>
 80001b0:	f104 0414 	add.w	r4, r4, #20
 80001b4:	f1c4 0220 	rsb	r2, r4, #32
 80001b8:	fa20 f004 	lsr.w	r0, r0, r4
 80001bc:	fa01 f302 	lsl.w	r3, r1, r2
 80001c0:	ea40 0003 	orr.w	r0, r0, r3
 80001c4:	fa21 f304 	lsr.w	r3, r1, r4
 80001c8:	ea45 0103 	orr.w	r1, r5, r3
 80001cc:	bd30      	pop	{r4, r5, pc}
 80001ce:	f1c4 040c 	rsb	r4, r4, #12
 80001d2:	f1c4 0220 	rsb	r2, r4, #32
 80001d6:	fa20 f002 	lsr.w	r0, r0, r2
 80001da:	fa01 f304 	lsl.w	r3, r1, r4
 80001de:	ea40 0003 	orr.w	r0, r0, r3
 80001e2:	4629      	mov	r1, r5
 80001e4:	bd30      	pop	{r4, r5, pc}
 80001e6:	fa21 f004 	lsr.w	r0, r1, r4
 80001ea:	4629      	mov	r1, r5
 80001ec:	bd30      	pop	{r4, r5, pc}
 80001ee:	f094 0f00 	teq	r4, #0
 80001f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80001f6:	bf06      	itte	eq
 80001f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80001fc:	3401      	addeq	r4, #1
 80001fe:	3d01      	subne	r5, #1
 8000200:	e74e      	b.n	80000a0 <__adddf3+0x8c>
 8000202:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000206:	bf18      	it	ne
 8000208:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020c:	d029      	beq.n	8000262 <__adddf3+0x24e>
 800020e:	ea94 0f05 	teq	r4, r5
 8000212:	bf08      	it	eq
 8000214:	ea90 0f02 	teqeq	r0, r2
 8000218:	d005      	beq.n	8000226 <__adddf3+0x212>
 800021a:	ea54 0c00 	orrs.w	ip, r4, r0
 800021e:	bf04      	itt	eq
 8000220:	4619      	moveq	r1, r3
 8000222:	4610      	moveq	r0, r2
 8000224:	bd30      	pop	{r4, r5, pc}
 8000226:	ea91 0f03 	teq	r1, r3
 800022a:	bf1e      	ittt	ne
 800022c:	2100      	movne	r1, #0
 800022e:	2000      	movne	r0, #0
 8000230:	bd30      	popne	{r4, r5, pc}
 8000232:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000236:	d105      	bne.n	8000244 <__adddf3+0x230>
 8000238:	0040      	lsls	r0, r0, #1
 800023a:	4149      	adcs	r1, r1
 800023c:	bf28      	it	cs
 800023e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000242:	bd30      	pop	{r4, r5, pc}
 8000244:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000248:	bf3c      	itt	cc
 800024a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800024e:	bd30      	popcc	{r4, r5, pc}
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000258:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800025c:	f04f 0000 	mov.w	r0, #0
 8000260:	bd30      	pop	{r4, r5, pc}
 8000262:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000266:	bf1a      	itte	ne
 8000268:	4619      	movne	r1, r3
 800026a:	4610      	movne	r0, r2
 800026c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000270:	bf1c      	itt	ne
 8000272:	460b      	movne	r3, r1
 8000274:	4602      	movne	r2, r0
 8000276:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800027a:	bf06      	itte	eq
 800027c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000280:	ea91 0f03 	teqeq	r1, r3
 8000284:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000288:	bd30      	pop	{r4, r5, pc}
 800028a:	bf00      	nop

0800028c <__aeabi_ui2d>:
 800028c:	f090 0f00 	teq	r0, #0
 8000290:	bf04      	itt	eq
 8000292:	2100      	moveq	r1, #0
 8000294:	4770      	bxeq	lr
 8000296:	b530      	push	{r4, r5, lr}
 8000298:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800029c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80002a0:	f04f 0500 	mov.w	r5, #0
 80002a4:	f04f 0100 	mov.w	r1, #0
 80002a8:	e750      	b.n	800014c <__adddf3+0x138>
 80002aa:	bf00      	nop

080002ac <__aeabi_i2d>:
 80002ac:	f090 0f00 	teq	r0, #0
 80002b0:	bf04      	itt	eq
 80002b2:	2100      	moveq	r1, #0
 80002b4:	4770      	bxeq	lr
 80002b6:	b530      	push	{r4, r5, lr}
 80002b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80002bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80002c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	f04f 0100 	mov.w	r1, #0
 80002cc:	e73e      	b.n	800014c <__adddf3+0x138>
 80002ce:	bf00      	nop

080002d0 <__aeabi_f2d>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80002d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80002de:	bf1f      	itttt	ne
 80002e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80002e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80002e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80002ec:	4770      	bxne	lr
 80002ee:	f092 0f00 	teq	r2, #0
 80002f2:	bf14      	ite	ne
 80002f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80002f8:	4770      	bxeq	lr
 80002fa:	b530      	push	{r4, r5, lr}
 80002fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000308:	e720      	b.n	800014c <__adddf3+0x138>
 800030a:	bf00      	nop

0800030c <__aeabi_ul2d>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	b530      	push	{r4, r5, lr}
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	e00a      	b.n	8000332 <__aeabi_l2d+0x16>

0800031c <__aeabi_l2d>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	b530      	push	{r4, r5, lr}
 8000326:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800032a:	d502      	bpl.n	8000332 <__aeabi_l2d+0x16>
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000336:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800033a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800033e:	f43f aedc 	beq.w	80000fa <__adddf3+0xe6>
 8000342:	f04f 0203 	mov.w	r2, #3
 8000346:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800034a:	bf18      	it	ne
 800034c:	3203      	addne	r2, #3
 800034e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000352:	bf18      	it	ne
 8000354:	3203      	addne	r2, #3
 8000356:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 fe03 	lsl.w	lr, r1, r3
 800036a:	ea40 000e 	orr.w	r0, r0, lr
 800036e:	fa21 f102 	lsr.w	r1, r1, r2
 8000372:	4414      	add	r4, r2
 8000374:	e6c1      	b.n	80000fa <__adddf3+0xe6>
 8000376:	bf00      	nop

08000378 <__aeabi_dmul>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000382:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000386:	bf1d      	ittte	ne
 8000388:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800038c:	ea94 0f0c 	teqne	r4, ip
 8000390:	ea95 0f0c 	teqne	r5, ip
 8000394:	f000 f8de 	bleq	8000554 <__aeabi_dmul+0x1dc>
 8000398:	442c      	add	r4, r5
 800039a:	ea81 0603 	eor.w	r6, r1, r3
 800039e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80003a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80003a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80003aa:	bf18      	it	ne
 80003ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80003b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003b8:	d038      	beq.n	800042c <__aeabi_dmul+0xb4>
 80003ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80003be:	f04f 0500 	mov.w	r5, #0
 80003c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80003c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80003ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80003ce:	f04f 0600 	mov.w	r6, #0
 80003d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80003d6:	f09c 0f00 	teq	ip, #0
 80003da:	bf18      	it	ne
 80003dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80003e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80003e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80003e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80003ec:	d204      	bcs.n	80003f8 <__aeabi_dmul+0x80>
 80003ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80003f2:	416d      	adcs	r5, r5
 80003f4:	eb46 0606 	adc.w	r6, r6, r6
 80003f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80003fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000400:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000404:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000408:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800040c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000410:	bf88      	it	hi
 8000412:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000416:	d81e      	bhi.n	8000456 <__aeabi_dmul+0xde>
 8000418:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000430:	ea46 0101 	orr.w	r1, r6, r1
 8000434:	ea40 0002 	orr.w	r0, r0, r2
 8000438:	ea81 0103 	eor.w	r1, r1, r3
 800043c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000440:	bfc2      	ittt	gt
 8000442:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000446:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800044a:	bd70      	popgt	{r4, r5, r6, pc}
 800044c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000450:	f04f 0e00 	mov.w	lr, #0
 8000454:	3c01      	subs	r4, #1
 8000456:	f300 80ab 	bgt.w	80005b0 <__aeabi_dmul+0x238>
 800045a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800045e:	bfde      	ittt	le
 8000460:	2000      	movle	r0, #0
 8000462:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000466:	bd70      	pople	{r4, r5, r6, pc}
 8000468:	f1c4 0400 	rsb	r4, r4, #0
 800046c:	3c20      	subs	r4, #32
 800046e:	da35      	bge.n	80004dc <__aeabi_dmul+0x164>
 8000470:	340c      	adds	r4, #12
 8000472:	dc1b      	bgt.n	80004ac <__aeabi_dmul+0x134>
 8000474:	f104 0414 	add.w	r4, r4, #20
 8000478:	f1c4 0520 	rsb	r5, r4, #32
 800047c:	fa00 f305 	lsl.w	r3, r0, r5
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f205 	lsl.w	r2, r1, r5
 8000488:	ea40 0002 	orr.w	r0, r0, r2
 800048c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000490:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000494:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000498:	fa21 f604 	lsr.w	r6, r1, r4
 800049c:	eb42 0106 	adc.w	r1, r2, r6
 80004a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004a4:	bf08      	it	eq
 80004a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	f1c4 040c 	rsb	r4, r4, #12
 80004b0:	f1c4 0520 	rsb	r5, r4, #32
 80004b4:	fa00 f304 	lsl.w	r3, r0, r4
 80004b8:	fa20 f005 	lsr.w	r0, r0, r5
 80004bc:	fa01 f204 	lsl.w	r2, r1, r4
 80004c0:	ea40 0002 	orr.w	r0, r0, r2
 80004c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80004cc:	f141 0100 	adc.w	r1, r1, #0
 80004d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004d4:	bf08      	it	eq
 80004d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	f1c4 0520 	rsb	r5, r4, #32
 80004e0:	fa00 f205 	lsl.w	r2, r0, r5
 80004e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80004e8:	fa20 f304 	lsr.w	r3, r0, r4
 80004ec:	fa01 f205 	lsl.w	r2, r1, r5
 80004f0:	ea43 0302 	orr.w	r3, r3, r2
 80004f4:	fa21 f004 	lsr.w	r0, r1, r4
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000500:	ea20 0002 	bic.w	r0, r0, r2
 8000504:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000508:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800050c:	bf08      	it	eq
 800050e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000512:	bd70      	pop	{r4, r5, r6, pc}
 8000514:	f094 0f00 	teq	r4, #0
 8000518:	d10f      	bne.n	800053a <__aeabi_dmul+0x1c2>
 800051a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800051e:	0040      	lsls	r0, r0, #1
 8000520:	eb41 0101 	adc.w	r1, r1, r1
 8000524:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000528:	bf08      	it	eq
 800052a:	3c01      	subeq	r4, #1
 800052c:	d0f7      	beq.n	800051e <__aeabi_dmul+0x1a6>
 800052e:	ea41 0106 	orr.w	r1, r1, r6
 8000532:	f095 0f00 	teq	r5, #0
 8000536:	bf18      	it	ne
 8000538:	4770      	bxne	lr
 800053a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800053e:	0052      	lsls	r2, r2, #1
 8000540:	eb43 0303 	adc.w	r3, r3, r3
 8000544:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000548:	bf08      	it	eq
 800054a:	3d01      	subeq	r5, #1
 800054c:	d0f7      	beq.n	800053e <__aeabi_dmul+0x1c6>
 800054e:	ea43 0306 	orr.w	r3, r3, r6
 8000552:	4770      	bx	lr
 8000554:	ea94 0f0c 	teq	r4, ip
 8000558:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800055c:	bf18      	it	ne
 800055e:	ea95 0f0c 	teqne	r5, ip
 8000562:	d00c      	beq.n	800057e <__aeabi_dmul+0x206>
 8000564:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000568:	bf18      	it	ne
 800056a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800056e:	d1d1      	bne.n	8000514 <__aeabi_dmul+0x19c>
 8000570:	ea81 0103 	eor.w	r1, r1, r3
 8000574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000582:	bf06      	itte	eq
 8000584:	4610      	moveq	r0, r2
 8000586:	4619      	moveq	r1, r3
 8000588:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800058c:	d019      	beq.n	80005c2 <__aeabi_dmul+0x24a>
 800058e:	ea94 0f0c 	teq	r4, ip
 8000592:	d102      	bne.n	800059a <__aeabi_dmul+0x222>
 8000594:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000598:	d113      	bne.n	80005c2 <__aeabi_dmul+0x24a>
 800059a:	ea95 0f0c 	teq	r5, ip
 800059e:	d105      	bne.n	80005ac <__aeabi_dmul+0x234>
 80005a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80005a4:	bf1c      	itt	ne
 80005a6:	4610      	movne	r0, r2
 80005a8:	4619      	movne	r1, r3
 80005aa:	d10a      	bne.n	80005c2 <__aeabi_dmul+0x24a>
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80005b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005bc:	f04f 0000 	mov.w	r0, #0
 80005c0:	bd70      	pop	{r4, r5, r6, pc}
 80005c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80005c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80005ca:	bd70      	pop	{r4, r5, r6, pc}

080005cc <__aeabi_ddiv>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8a7 	bleq	800073a <__aeabi_ddiv+0x16e>
 80005ec:	eba4 0405 	sub.w	r4, r4, r5
 80005f0:	ea81 0e03 	eor.w	lr, r1, r3
 80005f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80005f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005fc:	f000 8088 	beq.w	8000710 <__aeabi_ddiv+0x144>
 8000600:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000604:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000608:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800060c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000610:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000614:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000618:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800061c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000620:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000624:	429d      	cmp	r5, r3
 8000626:	bf08      	it	eq
 8000628:	4296      	cmpeq	r6, r2
 800062a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800062e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000632:	d202      	bcs.n	800063a <__aeabi_ddiv+0x6e>
 8000634:	085b      	lsrs	r3, r3, #1
 8000636:	ea4f 0232 	mov.w	r2, r2, rrx
 800063a:	1ab6      	subs	r6, r6, r2
 800063c:	eb65 0503 	sbc.w	r5, r5, r3
 8000640:	085b      	lsrs	r3, r3, #1
 8000642:	ea4f 0232 	mov.w	r2, r2, rrx
 8000646:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800064a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800064e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000652:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000656:	bf22      	ittt	cs
 8000658:	1ab6      	subcs	r6, r6, r2
 800065a:	4675      	movcs	r5, lr
 800065c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000660:	085b      	lsrs	r3, r3, #1
 8000662:	ea4f 0232 	mov.w	r2, r2, rrx
 8000666:	ebb6 0e02 	subs.w	lr, r6, r2
 800066a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800066e:	bf22      	ittt	cs
 8000670:	1ab6      	subcs	r6, r6, r2
 8000672:	4675      	movcs	r5, lr
 8000674:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	ea4f 0232 	mov.w	r2, r2, rrx
 800067e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000682:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000686:	bf22      	ittt	cs
 8000688:	1ab6      	subcs	r6, r6, r2
 800068a:	4675      	movcs	r5, lr
 800068c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000690:	085b      	lsrs	r3, r3, #1
 8000692:	ea4f 0232 	mov.w	r2, r2, rrx
 8000696:	ebb6 0e02 	subs.w	lr, r6, r2
 800069a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800069e:	bf22      	ittt	cs
 80006a0:	1ab6      	subcs	r6, r6, r2
 80006a2:	4675      	movcs	r5, lr
 80006a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80006a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80006ac:	d018      	beq.n	80006e0 <__aeabi_ddiv+0x114>
 80006ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80006b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80006b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80006ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80006be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80006c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80006c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80006ca:	d1c0      	bne.n	800064e <__aeabi_ddiv+0x82>
 80006cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006d0:	d10b      	bne.n	80006ea <__aeabi_ddiv+0x11e>
 80006d2:	ea41 0100 	orr.w	r1, r1, r0
 80006d6:	f04f 0000 	mov.w	r0, #0
 80006da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80006de:	e7b6      	b.n	800064e <__aeabi_ddiv+0x82>
 80006e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e4:	bf04      	itt	eq
 80006e6:	4301      	orreq	r1, r0
 80006e8:	2000      	moveq	r0, #0
 80006ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ee:	bf88      	it	hi
 80006f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f4:	f63f aeaf 	bhi.w	8000456 <__aeabi_dmul+0xde>
 80006f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80006fc:	bf04      	itt	eq
 80006fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000702:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000714:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000718:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	e690      	b.n	8000456 <__aeabi_dmul+0xde>
 8000734:	ea45 0e06 	orr.w	lr, r5, r6
 8000738:	e68d      	b.n	8000456 <__aeabi_dmul+0xde>
 800073a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073e:	ea94 0f0c 	teq	r4, ip
 8000742:	bf08      	it	eq
 8000744:	ea95 0f0c 	teqeq	r5, ip
 8000748:	f43f af3b 	beq.w	80005c2 <__aeabi_dmul+0x24a>
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	d10a      	bne.n	8000768 <__aeabi_ddiv+0x19c>
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	f47f af34 	bne.w	80005c2 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	f47f af25 	bne.w	80005ac <__aeabi_dmul+0x234>
 8000762:	4610      	mov	r0, r2
 8000764:	4619      	mov	r1, r3
 8000766:	e72c      	b.n	80005c2 <__aeabi_dmul+0x24a>
 8000768:	ea95 0f0c 	teq	r5, ip
 800076c:	d106      	bne.n	800077c <__aeabi_ddiv+0x1b0>
 800076e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000772:	f43f aefd 	beq.w	8000570 <__aeabi_dmul+0x1f8>
 8000776:	4610      	mov	r0, r2
 8000778:	4619      	mov	r1, r3
 800077a:	e722      	b.n	80005c2 <__aeabi_dmul+0x24a>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	f47f aec5 	bne.w	8000514 <__aeabi_dmul+0x19c>
 800078a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800078e:	f47f af0d 	bne.w	80005ac <__aeabi_dmul+0x234>
 8000792:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000796:	f47f aeeb 	bne.w	8000570 <__aeabi_dmul+0x1f8>
 800079a:	e712      	b.n	80005c2 <__aeabi_dmul+0x24a>

0800079c <__gedf2>:
 800079c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007a0:	e006      	b.n	80007b0 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__ledf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	e002      	b.n	80007b0 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__cmpdf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c0:	bf18      	it	ne
 80007c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007c6:	d01b      	beq.n	8000800 <__cmpdf2+0x54>
 80007c8:	b001      	add	sp, #4
 80007ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ce:	bf0c      	ite	eq
 80007d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007d4:	ea91 0f03 	teqne	r1, r3
 80007d8:	bf02      	ittt	eq
 80007da:	ea90 0f02 	teqeq	r0, r2
 80007de:	2000      	moveq	r0, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	f110 0f00 	cmn.w	r0, #0
 80007e6:	ea91 0f03 	teq	r1, r3
 80007ea:	bf58      	it	pl
 80007ec:	4299      	cmppl	r1, r3
 80007ee:	bf08      	it	eq
 80007f0:	4290      	cmpeq	r0, r2
 80007f2:	bf2c      	ite	cs
 80007f4:	17d8      	asrcs	r0, r3, #31
 80007f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007fa:	f040 0001 	orr.w	r0, r0, #1
 80007fe:	4770      	bx	lr
 8000800:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000804:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000808:	d102      	bne.n	8000810 <__cmpdf2+0x64>
 800080a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800080e:	d107      	bne.n	8000820 <__cmpdf2+0x74>
 8000810:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000818:	d1d6      	bne.n	80007c8 <__cmpdf2+0x1c>
 800081a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800081e:	d0d3      	beq.n	80007c8 <__cmpdf2+0x1c>
 8000820:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <__aeabi_cdrcmple>:
 8000828:	4684      	mov	ip, r0
 800082a:	4610      	mov	r0, r2
 800082c:	4662      	mov	r2, ip
 800082e:	468c      	mov	ip, r1
 8000830:	4619      	mov	r1, r3
 8000832:	4663      	mov	r3, ip
 8000834:	e000      	b.n	8000838 <__aeabi_cdcmpeq>
 8000836:	bf00      	nop

08000838 <__aeabi_cdcmpeq>:
 8000838:	b501      	push	{r0, lr}
 800083a:	f7ff ffb7 	bl	80007ac <__cmpdf2>
 800083e:	2800      	cmp	r0, #0
 8000840:	bf48      	it	mi
 8000842:	f110 0f00 	cmnmi.w	r0, #0
 8000846:	bd01      	pop	{r0, pc}

08000848 <__aeabi_dcmpeq>:
 8000848:	f84d ed08 	str.w	lr, [sp, #-8]!
 800084c:	f7ff fff4 	bl	8000838 <__aeabi_cdcmpeq>
 8000850:	bf0c      	ite	eq
 8000852:	2001      	moveq	r0, #1
 8000854:	2000      	movne	r0, #0
 8000856:	f85d fb08 	ldr.w	pc, [sp], #8
 800085a:	bf00      	nop

0800085c <__aeabi_dcmplt>:
 800085c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000860:	f7ff ffea 	bl	8000838 <__aeabi_cdcmpeq>
 8000864:	bf34      	ite	cc
 8000866:	2001      	movcc	r0, #1
 8000868:	2000      	movcs	r0, #0
 800086a:	f85d fb08 	ldr.w	pc, [sp], #8
 800086e:	bf00      	nop

08000870 <__aeabi_dcmple>:
 8000870:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000874:	f7ff ffe0 	bl	8000838 <__aeabi_cdcmpeq>
 8000878:	bf94      	ite	ls
 800087a:	2001      	movls	r0, #1
 800087c:	2000      	movhi	r0, #0
 800087e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000882:	bf00      	nop

08000884 <__aeabi_dcmpge>:
 8000884:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000888:	f7ff ffce 	bl	8000828 <__aeabi_cdrcmple>
 800088c:	bf94      	ite	ls
 800088e:	2001      	movls	r0, #1
 8000890:	2000      	movhi	r0, #0
 8000892:	f85d fb08 	ldr.w	pc, [sp], #8
 8000896:	bf00      	nop

08000898 <__aeabi_dcmpgt>:
 8000898:	f84d ed08 	str.w	lr, [sp, #-8]!
 800089c:	f7ff ffc4 	bl	8000828 <__aeabi_cdrcmple>
 80008a0:	bf34      	ite	cc
 80008a2:	2001      	movcc	r0, #1
 80008a4:	2000      	movcs	r0, #0
 80008a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008aa:	bf00      	nop

080008ac <__aeabi_d2f>:
 80008ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008b4:	bf24      	itt	cs
 80008b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008be:	d90d      	bls.n	80008dc <__aeabi_d2f+0x30>
 80008c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008d4:	bf08      	it	eq
 80008d6:	f020 0001 	biceq.w	r0, r0, #1
 80008da:	4770      	bx	lr
 80008dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008e0:	d121      	bne.n	8000926 <__aeabi_d2f+0x7a>
 80008e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008e6:	bfbc      	itt	lt
 80008e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ec:	4770      	bxlt	lr
 80008ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008f6:	f1c2 0218 	rsb	r2, r2, #24
 80008fa:	f1c2 0c20 	rsb	ip, r2, #32
 80008fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000902:	fa20 f002 	lsr.w	r0, r0, r2
 8000906:	bf18      	it	ne
 8000908:	f040 0001 	orrne.w	r0, r0, #1
 800090c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000910:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000914:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000918:	ea40 000c 	orr.w	r0, r0, ip
 800091c:	fa23 f302 	lsr.w	r3, r3, r2
 8000920:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000924:	e7cc      	b.n	80008c0 <__aeabi_d2f+0x14>
 8000926:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800092a:	d107      	bne.n	800093c <__aeabi_d2f+0x90>
 800092c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000930:	bf1e      	ittt	ne
 8000932:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000936:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800093a:	4770      	bxne	lr
 800093c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000940:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000944:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_f2iz>:
 800094c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000950:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000954:	d30f      	bcc.n	8000976 <__aeabi_f2iz+0x2a>
 8000956:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800095a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800095e:	d90d      	bls.n	800097c <__aeabi_f2iz+0x30>
 8000960:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000964:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000968:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096c:	fa23 f002 	lsr.w	r0, r3, r2
 8000970:	bf18      	it	ne
 8000972:	4240      	negne	r0, r0
 8000974:	4770      	bx	lr
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	4770      	bx	lr
 800097c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000980:	d101      	bne.n	8000986 <__aeabi_f2iz+0x3a>
 8000982:	0242      	lsls	r2, r0, #9
 8000984:	d105      	bne.n	8000992 <__aeabi_f2iz+0x46>
 8000986:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800098a:	bf08      	it	eq
 800098c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000990:	4770      	bx	lr
 8000992:	f04f 0000 	mov.w	r0, #0
 8000996:	4770      	bx	lr

08000998 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000998:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800099a:	f242 2309 	movw	r3, #8713	; 0x2209
 800099e:	2000      	movs	r0, #0
 80009a0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80009a4:	4798      	blx	r3
 80009a6:	bd08      	pop	{r3, pc}

080009a8 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 80009a8:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <main+0x2c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 80009ac:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 80009ae:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 80009b0:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 80009b2:	4809      	ldr	r0, [pc, #36]	; (80009d8 <main+0x30>)
 80009b4:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 80009b6:	4d09      	ldr	r5, [pc, #36]	; (80009dc <main+0x34>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <main+0x38>)
 80009c0:	4620      	mov	r0, r4
 80009c2:	9400      	str	r4, [sp, #0]
 80009c4:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );		
 80009c6:	4620      	mov	r0, r4
 80009c8:	4906      	ldr	r1, [pc, #24]	; (80009e4 <main+0x3c>)
 80009ca:	4788      	blx	r1
	
	Main_Init();

	//-- 명령어 처리
	//  
	Ap_GLcdMenu_ExeCmd();    
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <main+0x40>)
 80009ce:	4790      	blx	r2
 80009d0:	e7fe      	b.n	80009d0 <main+0x28>
 80009d2:	bf00      	nop
 80009d4:	08001eb1 	.word	0x08001eb1
 80009d8:	080009ed 	.word	0x080009ed
 80009dc:	08002689 	.word	0x08002689
 80009e0:	08000999 	.word	0x08000999
 80009e4:	080026a9 	.word	0x080026a9
 80009e8:	08000ac5 	.word	0x08000ac5

080009ec <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <Ap_GLcdMenu_ShowMenu>:
	 WORK    : 
	 ARG     : void
	 RET     : void
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
 80009f0:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
 80009f2:	f645 40f8 	movw	r0, #23800	; 0x5cf8
 80009f6:	f641 0441 	movw	r4, #6209	; 0x1841
	Lb_printf("*******************************************************\n");
 80009fa:	f645 45fc 	movw	r5, #23804	; 0x5cfc
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 80009fe:	f6c0 0400 	movt	r4, #2048	; 0x800
	Lb_printf("*******************************************************\n");
 8000a02:	f6c0 0500 	movt	r5, #2048	; 0x800
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 8000a06:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a0a:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	47a0      	blx	r4
	Lb_printf("                      MPU6050                          \n");
 8000a10:	f645 5038 	movw	r0, #23864	; 0x5d38
 8000a14:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a18:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000a1a:	4628      	mov	r0, r5
 8000a1c:	47a0      	blx	r4
	Lb_printf("* 1. LCD Clear                                        *\n");
 8000a1e:	f645 5074 	movw	r0, #23924	; 0x5d74
 8000a22:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a26:	47a0      	blx	r4
	Lb_printf("* 2. Show Acc                                         *\n");
 8000a28:	f645 50b0 	movw	r0, #23984	; 0x5db0
 8000a2c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a30:	47a0      	blx	r4
	Lb_printf("* 3. Show MPU6050 Regs                                *\n");
 8000a32:	f645 50ec 	movw	r0, #24044	; 0x5dec
 8000a36:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a3a:	47a0      	blx	r4
	Lb_printf("* 4. Sonic                                            *\n");
 8000a3c:	f645 6028 	movw	r0, #24104	; 0x5e28
 8000a40:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a44:	47a0      	blx	r4
	Lb_printf("* 5. Show Compass                                     *\n");
 8000a46:	f645 6064 	movw	r0, #24164	; 0x5e64
 8000a4a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a4e:	47a0      	blx	r4
	Lb_printf("* 6. Show HMC5883 Regs                                *\n");
 8000a50:	f645 60a0 	movw	r0, #24224	; 0x5ea0
 8000a54:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a58:	47a0      	blx	r4
	Lb_printf("* 7. Show IMU                                         *\n");
 8000a5a:	f645 60dc 	movw	r0, #24284	; 0x5edc
 8000a5e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a62:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 8000a64:	f645 7018 	movw	r0, #24344	; 0x5f18
 8000a68:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a6c:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 8000a6e:	f645 7054 	movw	r0, #24404	; 0x5f54
 8000a72:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a76:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 8000a78:	f645 7090 	movw	r0, #24464	; 0x5f90
 8000a7c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a80:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000a82:	4628      	mov	r0, r5
 8000a84:	47a0      	blx	r4
	Lb_printf("\n");
 8000a86:	f246 00fc 	movw	r0, #24828	; 0x60fc
 8000a8a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a8e:	47a0      	blx	r4
 8000a90:	bd38      	pop	{r3, r4, r5, pc}
 8000a92:	bf00      	nop

08000a94 <Ap_GLcdMenu_GetCmd>:
	 ARG     : void
	 RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_GetCmd(void)
{
 8000a94:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 8000a96:	f645 70cc 	movw	r0, #24524	; 0x5fcc
 8000a9a:	f641 0441 	movw	r4, #6209	; 0x1841
 8000a9e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8000aa2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000aa6:	47a0      	blx	r4

	key=get_byte();
 8000aa8:	f242 1309 	movw	r3, #8457	; 0x2109
 8000aac:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000ab0:	4798      	blx	r3
 8000ab2:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 8000ab4:	f246 00fc 	movw	r0, #24828	; 0x60fc
 8000ab8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000abc:	47a0      	blx	r4
	
	return key;
}
 8000abe:	4628      	mov	r0, r5
 8000ac0:	bd38      	pop	{r3, r4, r5, pc}
 8000ac2:	bf00      	nop

08000ac4 <Ap_GLcdMenu_ExeCmd>:
	 ARG     : void
	 RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 8000ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}



	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		
 8000ac8:	f640 11f1 	movw	r1, #2545	; 0x9f1
	 ARG     : void
	 RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 8000acc:	b09b      	sub	sp, #108	; 0x6c



	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		
 8000ace:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000ad2:	4788      	blx	r1

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	4ab5      	ldr	r2, [pc, #724]	; (8000db0 <Ap_GLcdMenu_ExeCmd+0x2ec>)
 8000ada:	4bb6      	ldr	r3, [pc, #728]	; (8000db4 <Ap_GLcdMenu_ExeCmd+0x2f0>)
 8000adc:	4798      	blx	r3
		Hw_N5110G_DrawRequest();
 8000ade:	f642 40d5 	movw	r0, #11477	; 0x2cd5
 8000ae2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ae6:	4780      	blx	r0
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000ae8:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8000dfc <Ap_GLcdMenu_ExeCmd+0x338>
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000aec:	4cb2      	ldr	r4, [pc, #712]	; (8000db8 <Ap_GLcdMenu_ExeCmd+0x2f4>)
 8000aee:	4db3      	ldr	r5, [pc, #716]	; (8000dbc <Ap_GLcdMenu_ExeCmd+0x2f8>)

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
		Hw_N5110G_DrawRequest();
	}

	while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 8000af0:	f640 2295 	movw	r2, #2709	; 0xa95
 8000af4:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000af8:	4790      	blx	r2
 8000afa:	4601      	mov	r1, r0
 8000afc:	2800      	cmp	r0, #0
 8000afe:	f000 8265 	beq.w	8000fcc <Ap_GLcdMenu_ExeCmd+0x508>
	{
		switch(key)
 8000b02:	f1a1 0331 	sub.w	r3, r1, #49	; 0x31
 8000b06:	2b3c      	cmp	r3, #60	; 0x3c
 8000b08:	d8f2      	bhi.n	8000af0 <Ap_GLcdMenu_ExeCmd+0x2c>
 8000b0a:	f20f 0e08 	addw	lr, pc, #8
 8000b0e:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
 8000b12:	bf00      	nop
 8000b14:	08000faf 	.word	0x08000faf
 8000b18:	08000ee5 	.word	0x08000ee5
 8000b1c:	08000e73 	.word	0x08000e73
 8000b20:	08000e4b 	.word	0x08000e4b
 8000b24:	08000e09 	.word	0x08000e09
 8000b28:	08000cc5 	.word	0x08000cc5
 8000b2c:	08000c4b 	.word	0x08000c4b
 8000b30:	08000c09 	.word	0x08000c09
 8000b34:	08000af1 	.word	0x08000af1
 8000b38:	08000af1 	.word	0x08000af1
 8000b3c:	08000af1 	.word	0x08000af1
 8000b40:	08000af1 	.word	0x08000af1
 8000b44:	08000af1 	.word	0x08000af1
 8000b48:	08000af1 	.word	0x08000af1
 8000b4c:	08000af1 	.word	0x08000af1
 8000b50:	08000af1 	.word	0x08000af1
 8000b54:	08000af1 	.word	0x08000af1
 8000b58:	08000af1 	.word	0x08000af1
 8000b5c:	08000af1 	.word	0x08000af1
 8000b60:	08000af1 	.word	0x08000af1
 8000b64:	08000af1 	.word	0x08000af1
 8000b68:	08000af1 	.word	0x08000af1
 8000b6c:	08000af1 	.word	0x08000af1
 8000b70:	08000af1 	.word	0x08000af1
 8000b74:	08000af1 	.word	0x08000af1
 8000b78:	08000af1 	.word	0x08000af1
 8000b7c:	08000af1 	.word	0x08000af1
 8000b80:	08000af1 	.word	0x08000af1
 8000b84:	08000fb9 	.word	0x08000fb9
 8000b88:	08000af1 	.word	0x08000af1
 8000b8c:	08000af1 	.word	0x08000af1
 8000b90:	08000af1 	.word	0x08000af1
 8000b94:	08000af1 	.word	0x08000af1
 8000b98:	08000af1 	.word	0x08000af1
 8000b9c:	08000af1 	.word	0x08000af1
 8000ba0:	08000af1 	.word	0x08000af1
 8000ba4:	08000af1 	.word	0x08000af1
 8000ba8:	08000af1 	.word	0x08000af1
 8000bac:	08000af1 	.word	0x08000af1
 8000bb0:	08000af1 	.word	0x08000af1
 8000bb4:	08000af1 	.word	0x08000af1
 8000bb8:	08000af1 	.word	0x08000af1
 8000bbc:	08000af1 	.word	0x08000af1
 8000bc0:	08000af1 	.word	0x08000af1
 8000bc4:	08000af1 	.word	0x08000af1
 8000bc8:	08000af1 	.word	0x08000af1
 8000bcc:	08000af1 	.word	0x08000af1
 8000bd0:	08000af1 	.word	0x08000af1
 8000bd4:	08000af1 	.word	0x08000af1
 8000bd8:	08000af1 	.word	0x08000af1
 8000bdc:	08000af1 	.word	0x08000af1
 8000be0:	08000af1 	.word	0x08000af1
 8000be4:	08000af1 	.word	0x08000af1
 8000be8:	08000af1 	.word	0x08000af1
 8000bec:	08000af1 	.word	0x08000af1
 8000bf0:	08000af1 	.word	0x08000af1
 8000bf4:	08000af1 	.word	0x08000af1
 8000bf8:	08000af1 	.word	0x08000af1
 8000bfc:	08000af1 	.word	0x08000af1
 8000c00:	08000af1 	.word	0x08000af1
 8000c04:	08000fb9 	.word	0x08000fb9
 8000c08:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8000e00 <Ap_GLcdMenu_ExeCmd+0x33c>
			   break;  

		   case '8':
				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8000c0c:	4f6c      	ldr	r7, [pc, #432]	; (8000dc0 <Ap_GLcdMenu_ExeCmd+0x2fc>)

					Ret = Hw_IMU_GetData( &IMU_Data );
 8000c0e:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8000e04 <Ap_GLcdMenu_ExeCmd+0x340>

					Lb_printf("Time %d ", Hw_Timer_Get_u16Count_Usec() - TimeStart );

					Lb_printf("AngX %d ", (s16)IMU_Data.X_AccAngle );
 8000c12:	4e6c      	ldr	r6, [pc, #432]	; (8000dc4 <Ap_GLcdMenu_ExeCmd+0x300>)
 8000c14:	e015      	b.n	8000c42 <Ap_GLcdMenu_ExeCmd+0x17e>
			   break;  

		   case '8':
				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8000c16:	47b8      	blx	r7
 8000c18:	4683      	mov	fp, r0

					Ret = Hw_IMU_GetData( &IMU_Data );
 8000c1a:	a80b      	add	r0, sp, #44	; 0x2c
 8000c1c:	47d0      	blx	sl

					Lb_printf("Time %d ", Hw_Timer_Get_u16Count_Usec() - TimeStart );
 8000c1e:	47b8      	blx	r7
 8000c20:	ebcb 0100 	rsb	r1, fp, r0
 8000c24:	4868      	ldr	r0, [pc, #416]	; (8000dc8 <Ap_GLcdMenu_ExeCmd+0x304>)
 8000c26:	47a0      	blx	r4

					Lb_printf("AngX %d ", (s16)IMU_Data.X_AccAngle );
 8000c28:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000c2a:	47b0      	blx	r6
 8000c2c:	b201      	sxth	r1, r0
 8000c2e:	4867      	ldr	r0, [pc, #412]	; (8000dcc <Ap_GLcdMenu_ExeCmd+0x308>)
 8000c30:	47a0      	blx	r4
					Lb_printf("AngY %d \n", (s16)IMU_Data.Y_AccAngle );
 8000c32:	9812      	ldr	r0, [sp, #72]	; 0x48
 8000c34:	47b0      	blx	r6
 8000c36:	b201      	sxth	r1, r0
 8000c38:	4865      	ldr	r0, [pc, #404]	; (8000dd0 <Ap_GLcdMenu_ExeCmd+0x30c>)
 8000c3a:	47a0      	blx	r4


					Hw_Wait_ms(100);
 8000c3c:	2064      	movs	r0, #100	; 0x64
 8000c3e:	4a65      	ldr	r2, [pc, #404]	; (8000dd4 <Ap_GLcdMenu_ExeCmd+0x310>)
 8000c40:	4790      	blx	r2
					Hw_Wait_ms(100);
				}		   		
			   break;  

		   case '8':
				while( get_byte_check() == 0 )
 8000c42:	47c8      	blx	r9
 8000c44:	2800      	cmp	r0, #0
 8000c46:	d0e6      	beq.n	8000c16 <Ap_GLcdMenu_ExeCmd+0x152>
 8000c48:	e752      	b.n	8000af0 <Ap_GLcdMenu_ExeCmd+0x2c>
 8000c4a:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8000e00 <Ap_GLcdMenu_ExeCmd+0x33c>

		   case '7':

				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8000c4e:	4e5c      	ldr	r6, [pc, #368]	; (8000dc0 <Ap_GLcdMenu_ExeCmd+0x2fc>)

					Ret = Hw_IMU_GetData( &IMU_Data );
 8000c50:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8000e04 <Ap_GLcdMenu_ExeCmd+0x340>
 8000c54:	e032      	b.n	8000cbc <Ap_GLcdMenu_ExeCmd+0x1f8>

		   case '7':

				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8000c56:	47b0      	blx	r6
 8000c58:	4607      	mov	r7, r0

					Ret = Hw_IMU_GetData( &IMU_Data );
 8000c5a:	a80b      	add	r0, sp, #44	; 0x2c
 8000c5c:	47d0      	blx	sl

					Lb_printf("Time %d ", Hw_Timer_Get_u16Count_Usec() - TimeStart );
 8000c5e:	47b0      	blx	r6
 8000c60:	1bc1      	subs	r1, r0, r7
 8000c62:	4859      	ldr	r0, [pc, #356]	; (8000dc8 <Ap_GLcdMenu_ExeCmd+0x304>)
 8000c64:	47a0      	blx	r4

					Lb_printf("EN %d ", IMU_Data.Enable_Acc );
 8000c66:	485c      	ldr	r0, [pc, #368]	; (8000dd8 <Ap_GLcdMenu_ExeCmd+0x314>)
 8000c68:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8000c6c:	47a0      	blx	r4
					Lb_printf("AX %d ", IMU_Data.X_Acc );
 8000c6e:	485b      	ldr	r0, [pc, #364]	; (8000ddc <Ap_GLcdMenu_ExeCmd+0x318>)
 8000c70:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8000c74:	47a0      	blx	r4
					Lb_printf("AY %d ", IMU_Data.Y_Acc );
 8000c76:	485a      	ldr	r0, [pc, #360]	; (8000de0 <Ap_GLcdMenu_ExeCmd+0x31c>)
 8000c78:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8000c7c:	47a0      	blx	r4
					Lb_printf("AZ %d ", IMU_Data.Z_Acc );
 8000c7e:	4859      	ldr	r0, [pc, #356]	; (8000de4 <Ap_GLcdMenu_ExeCmd+0x320>)
 8000c80:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8000c84:	47a0      	blx	r4

					Lb_printf("EN %d ", IMU_Data.Enable_Temp );
 8000c86:	4854      	ldr	r0, [pc, #336]	; (8000dd8 <Ap_GLcdMenu_ExeCmd+0x314>)
 8000c88:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 8000c8c:	47a0      	blx	r4
					Lb_printf("TE %d ", IMU_Data.Temp );
 8000c8e:	4856      	ldr	r0, [pc, #344]	; (8000de8 <Ap_GLcdMenu_ExeCmd+0x324>)
 8000c90:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8000c94:	47a0      	blx	r4

					Lb_printf("EN %d ", IMU_Data.Enable_Compass );
 8000c96:	4850      	ldr	r0, [pc, #320]	; (8000dd8 <Ap_GLcdMenu_ExeCmd+0x314>)
 8000c98:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
 8000c9c:	47a0      	blx	r4
					Lb_printf("CX %d ", IMU_Data.X_Compass );
 8000c9e:	4853      	ldr	r0, [pc, #332]	; (8000dec <Ap_GLcdMenu_ExeCmd+0x328>)
 8000ca0:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8000ca4:	47a0      	blx	r4
					Lb_printf("CY %d ", IMU_Data.Y_Compass );
 8000ca6:	4852      	ldr	r0, [pc, #328]	; (8000df0 <Ap_GLcdMenu_ExeCmd+0x32c>)
 8000ca8:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8000cac:	47a0      	blx	r4
					Lb_printf("CZ %d\n", IMU_Data.Z_Compass );
 8000cae:	4851      	ldr	r0, [pc, #324]	; (8000df4 <Ap_GLcdMenu_ExeCmd+0x330>)
 8000cb0:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8000cb4:	47a0      	blx	r4

					Hw_Wait_ms(100);
 8000cb6:	2064      	movs	r0, #100	; 0x64
 8000cb8:	4946      	ldr	r1, [pc, #280]	; (8000dd4 <Ap_GLcdMenu_ExeCmd+0x310>)
 8000cba:	4788      	blx	r1
		   		}
			   break;  

		   case '7':

				while( get_byte_check() == 0 )
 8000cbc:	47c8      	blx	r9
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	d0c9      	beq.n	8000c56 <Ap_GLcdMenu_ExeCmd+0x192>
 8000cc2:	e715      	b.n	8000af0 <Ap_GLcdMenu_ExeCmd+0x2c>
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000cc4:	a906      	add	r1, sp, #24
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	47c0      	blx	r8
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000cca:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000cce:	2200      	movs	r2, #0
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000cd0:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000cd2:	4849      	ldr	r0, [pc, #292]	; (8000df8 <Ap_GLcdMenu_ExeCmd+0x334>)
 8000cd4:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000cd6:	a906      	add	r1, sp, #24
 8000cd8:	2001      	movs	r0, #1
 8000cda:	47c0      	blx	r8
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000cdc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000ce0:	2201      	movs	r2, #1
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000ce2:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000ce4:	4844      	ldr	r0, [pc, #272]	; (8000df8 <Ap_GLcdMenu_ExeCmd+0x334>)
 8000ce6:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000ce8:	a906      	add	r1, sp, #24
 8000cea:	2002      	movs	r0, #2
 8000cec:	47c0      	blx	r8
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000cee:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000cf2:	2202      	movs	r2, #2
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000cf4:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000cf6:	4840      	ldr	r0, [pc, #256]	; (8000df8 <Ap_GLcdMenu_ExeCmd+0x334>)
 8000cf8:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000cfa:	a906      	add	r1, sp, #24
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	47c0      	blx	r8
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d00:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000d04:	2203      	movs	r2, #3
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d06:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d08:	483b      	ldr	r0, [pc, #236]	; (8000df8 <Ap_GLcdMenu_ExeCmd+0x334>)
 8000d0a:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d0c:	a906      	add	r1, sp, #24
 8000d0e:	2004      	movs	r0, #4
 8000d10:	47c0      	blx	r8
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d12:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000d16:	2204      	movs	r2, #4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d18:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d1a:	4837      	ldr	r0, [pc, #220]	; (8000df8 <Ap_GLcdMenu_ExeCmd+0x334>)
 8000d1c:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d1e:	a906      	add	r1, sp, #24
 8000d20:	2005      	movs	r0, #5
 8000d22:	47c0      	blx	r8
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d24:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000d28:	2205      	movs	r2, #5
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d2a:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d2c:	4832      	ldr	r0, [pc, #200]	; (8000df8 <Ap_GLcdMenu_ExeCmd+0x334>)
 8000d2e:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d30:	a906      	add	r1, sp, #24
 8000d32:	2006      	movs	r0, #6
 8000d34:	47c0      	blx	r8
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d36:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000d3a:	2206      	movs	r2, #6
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d3c:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d3e:	482e      	ldr	r0, [pc, #184]	; (8000df8 <Ap_GLcdMenu_ExeCmd+0x334>)
 8000d40:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d42:	a906      	add	r1, sp, #24
 8000d44:	2007      	movs	r0, #7
 8000d46:	47c0      	blx	r8
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d48:	f89d 3018 	ldrb.w	r3, [sp, #24]
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d4c:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d4e:	2207      	movs	r2, #7
 8000d50:	4829      	ldr	r0, [pc, #164]	; (8000df8 <Ap_GLcdMenu_ExeCmd+0x334>)
 8000d52:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d54:	a906      	add	r1, sp, #24
 8000d56:	2008      	movs	r0, #8
 8000d58:	47c0      	blx	r8
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d5a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000d5e:	2208      	movs	r2, #8
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d60:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d62:	4825      	ldr	r0, [pc, #148]	; (8000df8 <Ap_GLcdMenu_ExeCmd+0x334>)
 8000d64:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d66:	a906      	add	r1, sp, #24
 8000d68:	2009      	movs	r0, #9
 8000d6a:	47c0      	blx	r8
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d6c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000d70:	2209      	movs	r2, #9
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d72:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d74:	4820      	ldr	r0, [pc, #128]	; (8000df8 <Ap_GLcdMenu_ExeCmd+0x334>)
 8000d76:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d78:	a906      	add	r1, sp, #24
 8000d7a:	200a      	movs	r0, #10
 8000d7c:	47c0      	blx	r8
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d7e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000d82:	220a      	movs	r2, #10
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d84:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d86:	481c      	ldr	r0, [pc, #112]	; (8000df8 <Ap_GLcdMenu_ExeCmd+0x334>)
 8000d88:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d8a:	a906      	add	r1, sp, #24
 8000d8c:	200b      	movs	r0, #11
 8000d8e:	47c0      	blx	r8
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d90:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000d94:	220b      	movs	r2, #11
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d96:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000d98:	4817      	ldr	r0, [pc, #92]	; (8000df8 <Ap_GLcdMenu_ExeCmd+0x334>)
 8000d9a:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000d9c:	a906      	add	r1, sp, #24
 8000d9e:	200c      	movs	r0, #12
 8000da0:	47c0      	blx	r8
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000da2:	220c      	movs	r2, #12
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000da4:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000da6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000daa:	4813      	ldr	r0, [pc, #76]	; (8000df8 <Ap_GLcdMenu_ExeCmd+0x334>)
 8000dac:	47a0      	blx	r4
 8000dae:	e69f      	b.n	8000af0 <Ap_GLcdMenu_ExeCmd+0x2c>
 8000db0:	08005fd0 	.word	0x08005fd0
 8000db4:	08002c75 	.word	0x08002c75
 8000db8:	08001841 	.word	0x08001841
 8000dbc:	08003581 	.word	0x08003581
 8000dc0:	080026d1 	.word	0x080026d1
 8000dc4:	0800094d 	.word	0x0800094d
 8000dc8:	08005fec 	.word	0x08005fec
 8000dcc:	0800608c 	.word	0x0800608c
 8000dd0:	08006098 	.word	0x08006098
 8000dd4:	08001f89 	.word	0x08001f89
 8000dd8:	08006074 	.word	0x08006074
 8000ddc:	08005ff8 	.word	0x08005ff8
 8000de0:	08006000 	.word	0x08006000
 8000de4:	08006008 	.word	0x08006008
 8000de8:	0800607c 	.word	0x0800607c
 8000dec:	08006038 	.word	0x08006038
 8000df0:	08006040 	.word	0x08006040
 8000df4:	08006084 	.word	0x08006084
 8000df8:	08006050 	.word	0x08006050
 8000dfc:	0800354d 	.word	0x0800354d
 8000e00:	08002119 	.word	0x08002119
 8000e04:	08003ae9 	.word	0x08003ae9
 8000e08:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8000ffc <Ap_GLcdMenu_ExeCmd+0x538>
			   break;  

		   case '5':
				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8000e0c:	4e71      	ldr	r6, [pc, #452]	; (8000fd4 <Ap_GLcdMenu_ExeCmd+0x510>)

					Ret = Hw_HMC5883_GetData( &HMC5883_Data );
 8000e0e:	f8df a208 	ldr.w	sl, [pc, #520]	; 8001018 <Ap_GLcdMenu_ExeCmd+0x554>
 8000e12:	e016      	b.n	8000e42 <Ap_GLcdMenu_ExeCmd+0x37e>
			   break;  

		   case '5':
				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8000e14:	47b0      	blx	r6
 8000e16:	4607      	mov	r7, r0

					Ret = Hw_HMC5883_GetData( &HMC5883_Data );
 8000e18:	4668      	mov	r0, sp
 8000e1a:	47d0      	blx	sl

					Lb_printf("Time %d ", Hw_Timer_Get_u16Count_Usec() - TimeStart );
 8000e1c:	47b0      	blx	r6
 8000e1e:	1bc1      	subs	r1, r0, r7
 8000e20:	486d      	ldr	r0, [pc, #436]	; (8000fd8 <Ap_GLcdMenu_ExeCmd+0x514>)
 8000e22:	47a0      	blx	r4

					Lb_printf("CX %d ", HMC5883_Data.X_Compass );
 8000e24:	486d      	ldr	r0, [pc, #436]	; (8000fdc <Ap_GLcdMenu_ExeCmd+0x518>)
 8000e26:	f9bd 1000 	ldrsh.w	r1, [sp]
 8000e2a:	47a0      	blx	r4
					Lb_printf("CY %d ", HMC5883_Data.Y_Compass );
 8000e2c:	486c      	ldr	r0, [pc, #432]	; (8000fe0 <Ap_GLcdMenu_ExeCmd+0x51c>)
 8000e2e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8000e32:	47a0      	blx	r4
					Lb_printf("CZ %d \n", HMC5883_Data.Z_Compass );
 8000e34:	486b      	ldr	r0, [pc, #428]	; (8000fe4 <Ap_GLcdMenu_ExeCmd+0x520>)
 8000e36:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8000e3a:	47a0      	blx	r4

					Hw_Wait_ms(100);
 8000e3c:	2064      	movs	r0, #100	; 0x64
 8000e3e:	4b6a      	ldr	r3, [pc, #424]	; (8000fe8 <Ap_GLcdMenu_ExeCmd+0x524>)
 8000e40:	4798      	blx	r3
					Hw_Wait_ms(100);
				}            	
			   break;  

		   case '5':
				while( get_byte_check() == 0 )
 8000e42:	47c8      	blx	r9
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d0e5      	beq.n	8000e14 <Ap_GLcdMenu_ExeCmd+0x350>
 8000e48:	e652      	b.n	8000af0 <Ap_GLcdMenu_ExeCmd+0x2c>
 8000e4a:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8000ffc <Ap_GLcdMenu_ExeCmd+0x538>
			   break; 

		   case '4':
				while( get_byte_check() == 0 )
				{
					Lb_printf("L %d  R %d\n", Hw_Sonic_GetDistanceMM(0), Hw_Sonic_GetDistanceMM(1) );
 8000e4e:	4e67      	ldr	r6, [pc, #412]	; (8000fec <Ap_GLcdMenu_ExeCmd+0x528>)
					Hw_Wait_ms(100);
 8000e50:	f8df a194 	ldr.w	sl, [pc, #404]	; 8000fe8 <Ap_GLcdMenu_ExeCmd+0x524>
 8000e54:	e009      	b.n	8000e6a <Ap_GLcdMenu_ExeCmd+0x3a6>
			   break; 

		   case '4':
				while( get_byte_check() == 0 )
				{
					Lb_printf("L %d  R %d\n", Hw_Sonic_GetDistanceMM(0), Hw_Sonic_GetDistanceMM(1) );
 8000e56:	47b0      	blx	r6
 8000e58:	4607      	mov	r7, r0
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	47b0      	blx	r6
 8000e5e:	4639      	mov	r1, r7
 8000e60:	4602      	mov	r2, r0
 8000e62:	4863      	ldr	r0, [pc, #396]	; (8000ff0 <Ap_GLcdMenu_ExeCmd+0x52c>)
 8000e64:	47a0      	blx	r4
					Hw_Wait_ms(100);
 8000e66:	2064      	movs	r0, #100	; 0x64
 8000e68:	47d0      	blx	sl
					Lb_printf("%02x ", I2C_Data[0]);
				}           						
			   break; 

		   case '4':
				while( get_byte_check() == 0 )
 8000e6a:	47c8      	blx	r9
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	d0f2      	beq.n	8000e56 <Ap_GLcdMenu_ExeCmd+0x392>
 8000e70:	e63e      	b.n	8000af0 <Ap_GLcdMenu_ExeCmd+0x2c>
		Hw_N5110G_DrawRequest();
	}

	while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
	{
		switch(key)
 8000e72:	2600      	movs	r6, #0
				break;

		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 8000e74:	f64c 49cd 	movw	r9, #52429	; 0xcccd
 8000e78:	f6cc 49cc 	movt	r9, #52428	; 0xcccc

					I2C_Data[0] = 0x00;
 8000e7c:	46b2      	mov	sl, r6
 8000e7e:	e021      	b.n	8000ec4 <Ap_GLcdMenu_ExeCmd+0x400>
					Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8000e80:	b2f0      	uxtb	r0, r6
 8000e82:	a906      	add	r1, sp, #24
				break;

		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 8000e84:	b2be      	uxth	r6, r7

					I2C_Data[0] = 0x00;
 8000e86:	f88d a018 	strb.w	sl, [sp, #24]
					Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8000e8a:	47a8      	blx	r5
					Lb_printf("%02x ", I2C_Data[0]);
 8000e8c:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8000e90:	4858      	ldr	r0, [pc, #352]	; (8000ff4 <Ap_GLcdMenu_ExeCmd+0x530>)
 8000e92:	47a0      	blx	r4
				break;

		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 8000e94:	fba9 1306 	umull	r1, r3, r9, r6
 8000e98:	08d9      	lsrs	r1, r3, #3
 8000e9a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8000e9e:	eba6 0240 	sub.w	r2, r6, r0, lsl #1
 8000ea2:	b296      	uxth	r6, r2
 8000ea4:	2e00      	cmp	r6, #0
 8000ea6:	f000 808d 	beq.w	8000fc4 <Ap_GLcdMenu_ExeCmd+0x500>

					I2C_Data[0] = 0x00;
					Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8000eaa:	a906      	add	r1, sp, #24
 8000eac:	b2f8      	uxtb	r0, r7
		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);

					I2C_Data[0] = 0x00;
 8000eae:	f88d a018 	strb.w	sl, [sp, #24]
 8000eb2:	1c7e      	adds	r6, r7, #1
					Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8000eb4:	47a8      	blx	r5
					Lb_printf("%02x ", I2C_Data[0]);
 8000eb6:	484f      	ldr	r0, [pc, #316]	; (8000ff4 <Ap_GLcdMenu_ExeCmd+0x530>)
 8000eb8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8000ebc:	47a0      	blx	r4
				}
				
				break;

		   case '3':
				for( i=0; i<=0x75; i++ )
 8000ebe:	2e76      	cmp	r6, #118	; 0x76
 8000ec0:	f43f ae16 	beq.w	8000af0 <Ap_GLcdMenu_ExeCmd+0x2c>
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 8000ec4:	b2b0      	uxth	r0, r6
 8000ec6:	fba9 e200 	umull	lr, r2, r9, r0
 8000eca:	08d1      	lsrs	r1, r2, #3
 8000ecc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8000ed0:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8000ed4:	b282      	uxth	r2, r0
 8000ed6:	1c77      	adds	r7, r6, #1
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d1d1      	bne.n	8000e80 <Ap_GLcdMenu_ExeCmd+0x3bc>
 8000edc:	4631      	mov	r1, r6
 8000ede:	4846      	ldr	r0, [pc, #280]	; (8000ff8 <Ap_GLcdMenu_ExeCmd+0x534>)
 8000ee0:	47a0      	blx	r4
 8000ee2:	e7cd      	b.n	8000e80 <Ap_GLcdMenu_ExeCmd+0x3bc>
 8000ee4:	4f45      	ldr	r7, [pc, #276]	; (8000ffc <Ap_GLcdMenu_ExeCmd+0x538>)

		   case '2':
				
				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8000ee6:	4e3b      	ldr	r6, [pc, #236]	; (8000fd4 <Ap_GLcdMenu_ExeCmd+0x510>)

					Ret = Hw_MPU6050_GetData( &MPU6050_Data );
 8000ee8:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800101c <Ap_GLcdMenu_ExeCmd+0x558>
 8000eec:	e01c      	b.n	8000f28 <Ap_GLcdMenu_ExeCmd+0x464>
					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
					if( x < 3 )                x = 3;
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 8000eee:	b20a      	sxth	r2, r1

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
					if( x < 3 )                x = 3;
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	bfd8      	it	le
 8000ef4:	f04f 0a03 	movle.w	sl, #3
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 8000ef8:	2a2c      	cmp	r2, #44	; 0x2c
 8000efa:	dc55      	bgt.n	8000fa8 <Ap_GLcdMenu_ExeCmd+0x4e4>
					if( y < 3 )                 y = 3;
 8000efc:	2a02      	cmp	r2, #2
 8000efe:	bfcc      	ite	gt
 8000f00:	4683      	movgt	fp, r0
 8000f02:	f04f 0b03 	movle.w	fp, #3

					Hw_N5110G_Clear();                                  
 8000f06:	483e      	ldr	r0, [pc, #248]	; (8001000 <Ap_GLcdMenu_ExeCmd+0x53c>)
 8000f08:	4780      	blx	r0
					Hw_N5110G_DrawCircle(  x , y, 3, 0 );                           
 8000f0a:	4659      	mov	r1, fp
 8000f0c:	4650      	mov	r0, sl
 8000f0e:	2203      	movs	r2, #3
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8001020 <Ap_GLcdMenu_ExeCmd+0x55c>
 8000f16:	47e0      	blx	ip
					Hw_N5110G_DrawRequest();
 8000f18:	f642 43d5 	movw	r3, #11477	; 0x2cd5
 8000f1c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f20:	4798      	blx	r3
					Hw_Wait_ms(100);
 8000f22:	2064      	movs	r0, #100	; 0x64
 8000f24:	4930      	ldr	r1, [pc, #192]	; (8000fe8 <Ap_GLcdMenu_ExeCmd+0x524>)
 8000f26:	4788      	blx	r1
				Hw_N5110G_Clear();
				break;

		   case '2':
				
				while( get_byte_check() == 0 )
 8000f28:	47b8      	blx	r7
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	f47f ade0 	bne.w	8000af0 <Ap_GLcdMenu_ExeCmd+0x2c>
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8000f30:	47b0      	blx	r6
 8000f32:	4682      	mov	sl, r0

					Ret = Hw_MPU6050_GetData( &MPU6050_Data );
 8000f34:	a802      	add	r0, sp, #8
 8000f36:	47c8      	blx	r9

					Lb_printf("Time %d ", Hw_Timer_Get_u16Count_Usec() - TimeStart );
 8000f38:	47b0      	blx	r6
 8000f3a:	ebca 0100 	rsb	r1, sl, r0
 8000f3e:	4826      	ldr	r0, [pc, #152]	; (8000fd8 <Ap_GLcdMenu_ExeCmd+0x514>)
 8000f40:	47a0      	blx	r4

					Lb_printf("AX %d ", MPU6050_Data.X_Acc );
 8000f42:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8000f46:	482f      	ldr	r0, [pc, #188]	; (8001004 <Ap_GLcdMenu_ExeCmd+0x540>)
 8000f48:	47a0      	blx	r4
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
 8000f4a:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8000f4e:	482e      	ldr	r0, [pc, #184]	; (8001008 <Ap_GLcdMenu_ExeCmd+0x544>)
 8000f50:	47a0      	blx	r4
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
 8000f52:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8000f56:	482d      	ldr	r0, [pc, #180]	; (800100c <Ap_GLcdMenu_ExeCmd+0x548>)
 8000f58:	47a0      	blx	r4
					Lb_printf("T %d \n",  MPU6050_Data.Temp);
 8000f5a:	482d      	ldr	r0, [pc, #180]	; (8001010 <Ap_GLcdMenu_ExeCmd+0x54c>)
 8000f5c:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8000f60:	47a0      	blx	r4

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 8000f62:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8000f66:	f248 531f 	movw	r3, #34079	; 0x851f
 8000f6a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8000f6e:	fb83 e001 	smull	lr, r0, r3, r1
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 8000f72:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
					Lb_printf("AX %d ", MPU6050_Data.X_Acc );
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 8000f76:	ea4f 7be1 	mov.w	fp, r1, asr #31
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 8000f7a:	fb83 e302 	smull	lr, r3, r3, r2
					Lb_printf("AX %d ", MPU6050_Data.X_Acc );
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 8000f7e:	ebab 1ca0 	sub.w	ip, fp, r0, asr #6
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 8000f82:	17d1      	asrs	r1, r2, #31
					Lb_printf("AX %d ", MPU6050_Data.X_Acc );
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 8000f84:	f10c 0e2a 	add.w	lr, ip, #42	; 0x2a
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 8000f88:	eba1 12a3 	sub.w	r2, r1, r3, asr #6
					Lb_printf("AX %d ", MPU6050_Data.X_Acc );
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 8000f8c:	fa1f fa8e 	uxth.w	sl, lr
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 8000f90:	3218      	adds	r2, #24

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 8000f92:	fa0f f38a 	sxth.w	r3, sl
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 8000f96:	b290      	uxth	r0, r2

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 8000f98:	2b50      	cmp	r3, #80	; 0x50
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 8000f9a:	b281      	uxth	r1, r0

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 8000f9c:	dda7      	ble.n	8000eee <Ap_GLcdMenu_ExeCmd+0x42a>
					if( x < 3 )                x = 3;
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 8000f9e:	b20a      	sxth	r2, r1
 8000fa0:	2a2c      	cmp	r2, #44	; 0x2c
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 8000fa2:	f04f 0a50 	mov.w	sl, #80	; 0x50
					if( x < 3 )                x = 3;
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 8000fa6:	dda9      	ble.n	8000efc <Ap_GLcdMenu_ExeCmd+0x438>
 8000fa8:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8000fac:	e7ab      	b.n	8000f06 <Ap_GLcdMenu_ExeCmd+0x442>
	while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
	{
		switch(key)
		{
		   case '1':
				Lb_printf("LCD Clear \n");
 8000fae:	4819      	ldr	r0, [pc, #100]	; (8001014 <Ap_GLcdMenu_ExeCmd+0x550>)
 8000fb0:	47a0      	blx	r4
				Hw_N5110G_Clear();
 8000fb2:	4a13      	ldr	r2, [pc, #76]	; (8001000 <Ap_GLcdMenu_ExeCmd+0x53c>)
 8000fb4:	4790      	blx	r2
				break;
 8000fb6:	e59b      	b.n	8000af0 <Ap_GLcdMenu_ExeCmd+0x2c>
		   case '0':
			   break;

			case 'm':
			case 'M':
				Ap_GLcdMenu_ShowMenu();
 8000fb8:	f640 10f1 	movw	r0, #2545	; 0x9f1
 8000fbc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000fc0:	4780      	blx	r0
				break;
 8000fc2:	e595      	b.n	8000af0 <Ap_GLcdMenu_ExeCmd+0x2c>
				break;

		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <Ap_GLcdMenu_ExeCmd+0x534>)
 8000fc6:	4639      	mov	r1, r7
 8000fc8:	47a0      	blx	r4
 8000fca:	e76e      	b.n	8000eaa <Ap_GLcdMenu_ExeCmd+0x3e6>
			   break;
		}
	}
	
	return key;
}
 8000fcc:	b01b      	add	sp, #108	; 0x6c
 8000fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fd2:	bf00      	nop
 8000fd4:	080026d1 	.word	0x080026d1
 8000fd8:	08005fec 	.word	0x08005fec
 8000fdc:	08006038 	.word	0x08006038
 8000fe0:	08006040 	.word	0x08006040
 8000fe4:	08006048 	.word	0x08006048
 8000fe8:	08001f89 	.word	0x08001f89
 8000fec:	08003949 	.word	0x08003949
 8000ff0:	0800602c 	.word	0x0800602c
 8000ff4:	08006024 	.word	0x08006024
 8000ff8:	08006018 	.word	0x08006018
 8000ffc:	08002119 	.word	0x08002119
 8001000:	08002b25 	.word	0x08002b25
 8001004:	08005ff8 	.word	0x08005ff8
 8001008:	08006000 	.word	0x08006000
 800100c:	08006008 	.word	0x08006008
 8001010:	08006010 	.word	0x08006010
 8001014:	08005fe0 	.word	0x08005fe0
 8001018:	08003a49 	.word	0x08003a49
 800101c:	080037a5 	.word	0x080037a5
 8001020:	08002ce5 	.word	0x08002ce5

08001024 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 8001024:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 8001028:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800102a:	7819      	ldrb	r1, [r3, #0]
 800102c:	b151      	cbz	r1, 8001044 <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <print_byte_out+0x2c>)
 8001030:	4908      	ldr	r1, [pc, #32]	; (8001054 <print_byte_out+0x30>)
 8001032:	6814      	ldr	r4, [r2, #0]
 8001034:	6808      	ldr	r0, [r1, #0]
 8001036:	1c63      	adds	r3, r4, #1
 8001038:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800103a:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800103c:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800103e:	2200      	movs	r2, #0
 8001040:	54ca      	strb	r2, [r1, r3]
 8001042:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <print_byte_out+0x34>)
 8001046:	4798      	blx	r3
 8001048:	bd38      	pop	{r3, r4, r5, pc}
 800104a:	bf00      	nop
 800104c:	20000404 	.word	0x20000404
 8001050:	20000400 	.word	0x20000400
 8001054:	200004c0 	.word	0x200004c0
 8001058:	080020cd 	.word	0x080020cd

0800105c <PrintString>:
        }
        return;
}

void PrintString(char *fmt, char *s)
{
 800105c:	b538      	push	{r3, r4, r5, lr}
        if (!fmt || !s) return;
 800105e:	b148      	cbz	r0, 8001074 <PrintString+0x18>
 8001060:	b141      	cbz	r1, 8001074 <PrintString+0x18>
        while (*s) print_byte_out(*s++);
 8001062:	7808      	ldrb	r0, [r1, #0]
 8001064:	b130      	cbz	r0, 8001074 <PrintString+0x18>
 8001066:	4d04      	ldr	r5, [pc, #16]	; (8001078 <PrintString+0x1c>)
 8001068:	460c      	mov	r4, r1
 800106a:	47a8      	blx	r5
 800106c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001070:	2800      	cmp	r0, #0
 8001072:	d1fa      	bne.n	800106a <PrintString+0xe>
 8001074:	bd38      	pop	{r3, r4, r5, pc}
 8001076:	bf00      	nop
 8001078:	08001025 	.word	0x08001025

0800107c <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 800107c:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 800107e:	b1c8      	cbz	r0, 80010b4 <DecToLong+0x38>
 8001080:	7803      	ldrb	r3, [r0, #0]
 8001082:	b1cb      	cbz	r3, 80010b8 <DecToLong+0x3c>


        for (*retval=0; *s; s++){
 8001084:	2300      	movs	r3, #0
 8001086:	600b      	str	r3, [r1, #0]
 8001088:	7802      	ldrb	r2, [r0, #0]
 800108a:	b192      	cbz	r2, 80010b2 <DecToLong+0x36>
                if (*s < '0' || *s > '9') return false;
 800108c:	3a30      	subs	r2, #48	; 0x30
 800108e:	b2d4      	uxtb	r4, r2
 8001090:	2c09      	cmp	r4, #9
 8001092:	d902      	bls.n	800109a <DecToLong+0x1e>
 8001094:	e012      	b.n	80010bc <DecToLong+0x40>
 8001096:	2d09      	cmp	r5, #9
 8001098:	d810      	bhi.n	80010bc <DecToLong+0x40>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 800109a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800109e:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 80010a2:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80010a4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 80010a8:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80010ac:	b2d5      	uxtb	r5, r2
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80010ae:	2c00      	cmp	r4, #0
 80010b0:	d1f1      	bne.n	8001096 <DecToLong+0x1a>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 80010b2:	2001      	movs	r0, #1
}        // DecToLong.
 80010b4:	bc30      	pop	{r4, r5}
 80010b6:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 80010b8:	4618      	mov	r0, r3
 80010ba:	e7fb      	b.n	80010b4 <DecToLong+0x38>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 80010bc:	2000      	movs	r0, #0
 80010be:	e7f9      	b.n	80010b4 <DecToLong+0x38>

080010c0 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 80010c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c4:	4682      	mov	sl, r0
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80010c6:	7800      	ldrb	r0, [r0, #0]
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80010c8:	2300      	movs	r3, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 80010ca:	b084      	sub	sp, #16
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
 80010cc:	f1b1 0800 	subs.w	r8, r1, #0
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80010d0:	9300      	str	r3, [sp, #0]
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
		l = -l;	
 80010d2:	bfba      	itte	lt
 80010d4:	f1c8 0800 	rsblt	r8, r8, #0
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
 80010d8:	f04f 0901 	movlt.w	r9, #1
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;
 80010dc:	4699      	movge	r9, r3
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80010de:	2800      	cmp	r0, #0
 80010e0:	f000 8140 	beq.w	8001364 <PrintDec+0x2a4>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 80010e4:	2500      	movs	r5, #0


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 80010e6:	2864      	cmp	r0, #100	; 0x64
 80010e8:	d029      	beq.n	800113e <PrintDec+0x7e>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 80010ea:	4ea1      	ldr	r6, [pc, #644]	; (8001370 <PrintDec+0x2b0>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 80010ec:	462c      	mov	r4, r5
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 80010ee:	462f      	mov	r7, r5

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 80010f0:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
 80010f4:	2a08      	cmp	r2, #8
 80010f6:	f200 808e 	bhi.w	8001216 <PrintDec+0x156>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80010fa:	f81a 2004 	ldrb.w	r2, [sl, r4]
 80010fe:	eb0a 0104 	add.w	r1, sl, r4
 8001102:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8001106:	2809      	cmp	r0, #9
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	a801      	add	r0, sp, #4
 800110e:	d809      	bhi.n	8001124 <PrintDec+0x64>
			{
				tol[j] = s[i++];
 8001110:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8001112:	f811 2f01 	ldrb.w	r2, [r1, #1]!
			{
				tol[j] = s[i++];
 8001116:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8001118:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800111c:	3301      	adds	r3, #1
 800111e:	f1be 0f09 	cmp.w	lr, #9
 8001122:	d9f5      	bls.n	8001110 <PrintDec+0x50>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8001124:	a904      	add	r1, sp, #16
 8001126:	18ca      	adds	r2, r1, r3
			i--;
			DecToLong(tol, &flagcnt);
 8001128:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800112a:	f802 7c0c 	strb.w	r7, [r2, #-12]
			i--;
 800112e:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 8001130:	47b0      	blx	r6
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8001132:	3401      	adds	r4, #1
 8001134:	f81a 0004 	ldrb.w	r0, [sl, r4]
 8001138:	b108      	cbz	r0, 800113e <PrintDec+0x7e>
	{
		if (c=='d') break;
 800113a:	2864      	cmp	r0, #100	; 0x64
 800113c:	d1d8      	bne.n	80010f0 <PrintDec+0x30>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 800113e:	f1b9 0f00 	cmp.w	r9, #0
 8001142:	f040 810b 	bne.w	800135c <PrintDec+0x29c>
 8001146:	4e8b      	ldr	r6, [pc, #556]	; (8001374 <PrintDec+0x2b4>)


	// 위의 flag에 따라 출력.
	if (flagcnt)
 8001148:	9800      	ldr	r0, [sp, #0]
 800114a:	2800      	cmp	r0, #0
 800114c:	d067      	beq.n	800121e <PrintDec+0x15e>
	{
                if (flagcnt>9) flagcnt=9;
 800114e:	2809      	cmp	r0, #9
 8001150:	f300 80ff 	bgt.w	8001352 <PrintDec+0x292>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 8001154:	1e44      	subs	r4, r0, #1


        while (cnt--){
 8001156:	1e81      	subs	r1, r0, #2
 8001158:	1ec7      	subs	r7, r0, #3
 800115a:	2c00      	cmp	r4, #0
 800115c:	f000 8104 	beq.w	8001368 <PrintDec+0x2a8>
 8001160:	f001 0401 	and.w	r4, r1, #1
                retval *= num;
 8001164:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001166:	1e4a      	subs	r2, r1, #1
 8001168:	b171      	cbz	r1, 8001188 <PrintDec+0xc8>
 800116a:	b124      	cbz	r4, 8001176 <PrintDec+0xb6>
 800116c:	3a01      	subs	r2, #1
 800116e:	1c51      	adds	r1, r2, #1
                retval *= num;
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001174:	d008      	beq.n	8001188 <PrintDec+0xc8>
                retval *= num;
 8001176:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800117a:	00e1      	lsls	r1, r4, #3
 800117c:	eb01 0344 	add.w	r3, r1, r4, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001180:	3a02      	subs	r2, #2
                retval *= num;
 8001182:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001184:	1c51      	adds	r1, r2, #1
 8001186:	d1f6      	bne.n	8001176 <PrintDec+0xb6>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8001188:	fb98 f2f3 	sdiv	r2, r8, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 800118c:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 800118e:	fb03 8812 	mls	r8, r3, r2, r8
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001192:	f000 80eb 	beq.w	800136c <PrintDec+0x2ac>
 8001196:	f007 0001 	and.w	r0, r7, #1
                retval *= num;
 800119a:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 800119c:	1e79      	subs	r1, r7, #1
 800119e:	b177      	cbz	r7, 80011be <PrintDec+0xfe>
 80011a0:	b120      	cbz	r0, 80011ac <PrintDec+0xec>
 80011a2:	3901      	subs	r1, #1
 80011a4:	1c48      	adds	r0, r1, #1
                retval *= num;
 80011a6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80011aa:	d008      	beq.n	80011be <PrintDec+0xfe>
                retval *= num;
 80011ac:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 80011b0:	00fc      	lsls	r4, r7, #3
 80011b2:	eb04 0347 	add.w	r3, r4, r7, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80011b6:	3902      	subs	r1, #2
                retval *= num;
 80011b8:	005c      	lsls	r4, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80011ba:	1c4f      	adds	r7, r1, #1
 80011bc:	d1f6      	bne.n	80011ac <PrintDec+0xec>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80011be:	f246 6767 	movw	r7, #26215	; 0x6667
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80011c2:	f04f 0901 	mov.w	r9, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80011c6:	f2c6 6766 	movt	r7, #26214	; 0x6666
 80011ca:	e00f      	b.n	80011ec <PrintDec+0x12c>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 80011cc:	2c01      	cmp	r4, #1
 80011ce:	d015      	beq.n	80011fc <PrintDec+0x13c>


                        if (leading_zero==true){
 80011d0:	f1b9 0f00 	cmp.w	r9, #0
 80011d4:	d012      	beq.n	80011fc <PrintDec+0x13c>
                                if (flag0)        print_byte_out('0');
 80011d6:	2030      	movs	r0, #48	; 0x30
 80011d8:	b905      	cbnz	r5, 80011dc <PrintDec+0x11c>
                                else                print_byte_out(' ');
 80011da:	2020      	movs	r0, #32
 80011dc:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80011de:	fb87 2004 	smull	r2, r0, r7, r4
 80011e2:	17e1      	asrs	r1, r4, #31
 80011e4:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 80011e8:	2c00      	cmp	r4, #0
 80011ea:	dd11      	ble.n	8001210 <PrintDec+0x150>
                        result = remainder/divisor;
 80011ec:	fb98 f2f4 	sdiv	r2, r8, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80011f0:	b2d0      	uxtb	r0, r2
 80011f2:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80011f4:	fb04 8812 	mls	r8, r4, r2, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 80011f8:	2a00      	cmp	r2, #0
 80011fa:	d0e7      	beq.n	80011cc <PrintDec+0x10c>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80011fc:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80011fe:	fb87 2004 	smull	r2, r0, r7, r4
 8001202:	17e1      	asrs	r1, r4, #31
 8001204:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 8001208:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800120a:	f04f 0900 	mov.w	r9, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800120e:	dced      	bgt.n	80011ec <PrintDec+0x12c>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 8001210:	b004      	add	sp, #16
 8001212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 8001216:	2830      	cmp	r0, #48	; 0x30
 8001218:	bf08      	it	eq
 800121a:	2501      	moveq	r5, #1
 800121c:	e789      	b.n	8001132 <PrintDec+0x72>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800121e:	f642 73a1 	movw	r3, #12193	; 0x2fa1
 8001222:	f2c4 43b8 	movt	r3, #17592	; 0x44b8
 8001226:	fb83 2408 	smull	r2, r4, r3, r8
 800122a:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 800122e:	f44f 424a 	mov.w	r2, #51712	; 0xca00
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001232:	ebc1 7024 	rsb	r0, r1, r4, asr #28
                        remainder %= divisor;
 8001236:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
 800123a:	fb02 8810 	mls	r8, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 800123e:	2800      	cmp	r0, #0
 8001240:	f000 809a 	beq.w	8001378 <PrintDec+0x2b8>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001244:	b2c0      	uxtb	r0, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001246:	f643 3489 	movw	r4, #15241	; 0x3b89
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800124a:	3030      	adds	r0, #48	; 0x30
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800124c:	f2c5 54e6 	movt	r4, #21990	; 0x55e6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001250:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001252:	fb84 2008 	smull	r2, r0, r4, r8
 8001256:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 800125a:	f44f 4261 	mov.w	r2, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800125e:	ebc1 6060 	rsb	r0, r1, r0, asr #25
                        remainder %= divisor;
 8001262:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
 8001266:	fb02 8410 	mls	r4, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800126a:	3030      	adds	r0, #48	; 0x30
 800126c:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800126e:	f64c 236b 	movw	r3, #51819	; 0xca6b
 8001272:	f6c6 335f 	movt	r3, #27487	; 0x6b5f
 8001276:	fb83 2004 	smull	r2, r0, r3, r4
 800127a:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 800127c:	f249 6280 	movw	r2, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001280:	ebc1 50a0 	rsb	r0, r1, r0, asr #22
                        remainder %= divisor;
 8001284:	f2c0 0298 	movt	r2, #152	; 0x98
 8001288:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800128c:	3030      	adds	r0, #48	; 0x30
 800128e:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001290:	f64d 6383 	movw	r3, #56963	; 0xde83
 8001294:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8001298:	fb83 2004 	smull	r2, r0, r3, r4
 800129c:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 800129e:	f244 2240 	movw	r2, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80012a2:	ebc1 40a0 	rsb	r0, r1, r0, asr #18
                        remainder %= divisor;
 80012a6:	f2c0 020f 	movt	r2, #15
 80012aa:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80012ae:	3030      	adds	r0, #48	; 0x30
 80012b0:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80012b2:	f24b 5389 	movw	r3, #46473	; 0xb589
 80012b6:	f2c1 43f8 	movt	r3, #5368	; 0x14f8
 80012ba:	fb83 2004 	smull	r2, r0, r3, r4
 80012be:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 80012c0:	f248 62a0 	movw	r2, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80012c4:	ebc1 3060 	rsb	r0, r1, r0, asr #13
                        remainder %= divisor;
 80012c8:	f2c0 0201 	movt	r2, #1
 80012cc:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80012d0:	3030      	adds	r0, #48	; 0x30
 80012d2:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80012d4:	f648 33ad 	movw	r3, #35757	; 0x8bad
 80012d8:	f6c6 03db 	movt	r3, #26843	; 0x68db
 80012dc:	fb83 2004 	smull	r2, r0, r3, r4
 80012e0:	17e1      	asrs	r1, r4, #31
 80012e2:	ebc1 3020 	rsb	r0, r1, r0, asr #12
                        remainder %= divisor;
 80012e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80012ea:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80012ee:	3030      	adds	r0, #48	; 0x30
 80012f0:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80012f2:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80012f6:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80012fa:	fb83 2004 	smull	r2, r0, r3, r4
 80012fe:	17e1      	asrs	r1, r4, #31
 8001300:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
                        remainder %= divisor;
 8001304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001308:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800130c:	3030      	adds	r0, #48	; 0x30
 800130e:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001310:	f248 531f 	movw	r3, #34079	; 0x851f
 8001314:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8001318:	fb83 2004 	smull	r2, r0, r3, r4
 800131c:	17e1      	asrs	r1, r4, #31
 800131e:	ebc1 1060 	rsb	r0, r1, r0, asr #5
                        remainder %= divisor;
 8001322:	2264      	movs	r2, #100	; 0x64
 8001324:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001328:	3030      	adds	r0, #48	; 0x30
 800132a:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800132c:	f246 6367 	movw	r3, #26215	; 0x6667
 8001330:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8001334:	fb83 2004 	smull	r2, r0, r3, r4
 8001338:	17e1      	asrs	r1, r4, #31
 800133a:	ebc1 00a0 	rsb	r0, r1, r0, asr #2
                        remainder %= divisor;
 800133e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8001342:	eba4 0442 	sub.w	r4, r4, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001346:	3030      	adds	r0, #48	; 0x30
 8001348:	47b0      	blx	r6
 800134a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800134e:	47b0      	blx	r6
 8001350:	e75e      	b.n	8001210 <PrintDec+0x150>


	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 8001352:	2009      	movs	r0, #9
 8001354:	9000      	str	r0, [sp, #0]
 8001356:	2706      	movs	r7, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001358:	2107      	movs	r1, #7
 800135a:	e701      	b.n	8001160 <PrintDec+0xa0>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 800135c:	202d      	movs	r0, #45	; 0x2d
 800135e:	4e05      	ldr	r6, [pc, #20]	; (8001374 <PrintDec+0x2b4>)
 8001360:	47b0      	blx	r6
 8001362:	e6f1      	b.n	8001148 <PrintDec+0x88>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 8001364:	4605      	mov	r5, r0
 8001366:	e6ea      	b.n	800113e <PrintDec+0x7e>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 8001368:	230a      	movs	r3, #10
 800136a:	e70d      	b.n	8001188 <PrintDec+0xc8>
 800136c:	240a      	movs	r4, #10
 800136e:	e726      	b.n	80011be <PrintDec+0xfe>
 8001370:	0800107d 	.word	0x0800107d
 8001374:	08001025 	.word	0x08001025
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001378:	f643 3389 	movw	r3, #15241	; 0x3b89
 800137c:	f2c5 53e6 	movt	r3, #21990	; 0x55e6
 8001380:	fb83 2108 	smull	r2, r1, r3, r8
                        remainder %= divisor;
 8001384:	f44f 4461 	mov.w	r4, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001388:	ea4f 72e8 	mov.w	r2, r8, asr #31
 800138c:	ebc2 6061 	rsb	r0, r2, r1, asr #25
                        remainder %= divisor;
 8001390:	f2c0 54f5 	movt	r4, #1525	; 0x5f5
 8001394:	fb04 8410 	mls	r4, r4, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 8001398:	2800      	cmp	r0, #0
 800139a:	f47f af66 	bne.w	800126a <PrintDec+0x1aa>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800139e:	f64c 206b 	movw	r0, #51819	; 0xca6b
 80013a2:	f6c6 305f 	movt	r0, #27487	; 0x6b5f
 80013a6:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 80013aa:	f249 6380 	movw	r3, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80013ae:	17e2      	asrs	r2, r4, #31
 80013b0:	ebc2 50a1 	rsb	r0, r2, r1, asr #22
                        remainder %= divisor;
 80013b4:	f2c0 0398 	movt	r3, #152	; 0x98
 80013b8:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 80013bc:	2800      	cmp	r0, #0
 80013be:	f47f af65 	bne.w	800128c <PrintDec+0x1cc>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80013c2:	f64d 6083 	movw	r0, #56963	; 0xde83
 80013c6:	f2c4 301b 	movt	r0, #17179	; 0x431b
 80013ca:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 80013ce:	f244 2340 	movw	r3, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80013d2:	17e2      	asrs	r2, r4, #31
 80013d4:	ebc2 40a1 	rsb	r0, r2, r1, asr #18
                        remainder %= divisor;
 80013d8:	f2c0 030f 	movt	r3, #15
 80013dc:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 80013e0:	2800      	cmp	r0, #0
 80013e2:	f47f af64 	bne.w	80012ae <PrintDec+0x1ee>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80013e6:	f24b 5089 	movw	r0, #46473	; 0xb589
 80013ea:	f2c1 40f8 	movt	r0, #5368	; 0x14f8
 80013ee:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 80013f2:	f248 63a0 	movw	r3, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80013f6:	17e2      	asrs	r2, r4, #31
 80013f8:	ebc2 3061 	rsb	r0, r2, r1, asr #13
                        remainder %= divisor;
 80013fc:	f2c0 0301 	movt	r3, #1
 8001400:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001404:	2800      	cmp	r0, #0
 8001406:	f47f af63 	bne.w	80012d0 <PrintDec+0x210>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800140a:	f648 30ad 	movw	r0, #35757	; 0x8bad
 800140e:	f6c6 00db 	movt	r0, #26843	; 0x68db
 8001412:	fb80 2104 	smull	r2, r1, r0, r4
 8001416:	17e2      	asrs	r2, r4, #31
 8001418:	ebc2 3021 	rsb	r0, r2, r1, asr #12
                        remainder %= divisor;
 800141c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001420:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001424:	2800      	cmp	r0, #0
 8001426:	f47f af62 	bne.w	80012ee <PrintDec+0x22e>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800142a:	f644 50d3 	movw	r0, #19923	; 0x4dd3
 800142e:	f2c1 0062 	movt	r0, #4194	; 0x1062
 8001432:	fb80 2104 	smull	r2, r1, r0, r4
 8001436:	17e2      	asrs	r2, r4, #31
 8001438:	ebc2 10a1 	rsb	r0, r2, r1, asr #6
                        remainder %= divisor;
 800143c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001440:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001444:	2800      	cmp	r0, #0
 8001446:	f47f af61 	bne.w	800130c <PrintDec+0x24c>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800144a:	f248 501f 	movw	r0, #34079	; 0x851f
 800144e:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
 8001452:	fb80 2104 	smull	r2, r1, r0, r4
 8001456:	17e2      	asrs	r2, r4, #31
 8001458:	ebc2 1061 	rsb	r0, r2, r1, asr #5
                        remainder %= divisor;
 800145c:	2364      	movs	r3, #100	; 0x64
 800145e:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001462:	2800      	cmp	r0, #0
 8001464:	f47f af60 	bne.w	8001328 <PrintDec+0x268>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001468:	f246 6067 	movw	r0, #26215	; 0x6667
 800146c:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8001470:	fb80 2104 	smull	r2, r1, r0, r4
 8001474:	17e2      	asrs	r2, r4, #31
 8001476:	ebc2 00a1 	rsb	r0, r2, r1, asr #2
                        remainder %= divisor;
 800147a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800147e:	eba4 0443 	sub.w	r4, r4, r3, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 8001482:	2800      	cmp	r0, #0
 8001484:	f43f af61 	beq.w	800134a <PrintDec+0x28a>
 8001488:	e75d      	b.n	8001346 <PrintDec+0x286>
 800148a:	bf00      	nop

0800148c <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800148c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8001490:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001492:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8001494:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001496:	4681      	mov	r9, r0
 8001498:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800149a:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80b7 	beq.w	8001610 <PrintHex+0x184>
                if (c=='x') break;
 80014a2:	2b78      	cmp	r3, #120	; 0x78
 80014a4:	f000 80b4 	beq.w	8001610 <PrintHex+0x184>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 80014a8:	4fb4      	ldr	r7, [pc, #720]	; (800177c <PrintHex+0x2f0>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 80014aa:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80014ac:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 80014ae:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80014b2:	2a08      	cmp	r2, #8
 80014b4:	f200 80a8 	bhi.w	8001608 <PrintHex+0x17c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80014b8:	f819 2004 	ldrb.w	r2, [r9, r4]
 80014bc:	eb09 0104 	add.w	r1, r9, r4
 80014c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80014c4:	2b09      	cmp	r3, #9
 80014c6:	a803      	add	r0, sp, #12
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	d808      	bhi.n	80014e0 <PrintHex+0x54>
                                tol[j] = s[i++];
 80014ce:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80014d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 80014d4:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80014d6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80014da:	3301      	adds	r3, #1
 80014dc:	2d09      	cmp	r5, #9
 80014de:	d9f6      	bls.n	80014ce <PrintHex+0x42>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80014e0:	a906      	add	r1, sp, #24
 80014e2:	18ca      	adds	r2, r1, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 80014e4:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80014e6:	f802 8c0c 	strb.w	r8, [r2, #-12]
                        i--;
 80014ea:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 80014ec:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80014ee:	3401      	adds	r4, #1
 80014f0:	f819 3004 	ldrb.w	r3, [r9, r4]
 80014f4:	b10b      	cbz	r3, 80014fa <PrintHex+0x6e>
                if (c=='x') break;
 80014f6:	2b78      	cmp	r3, #120	; 0x78
 80014f8:	d1d9      	bne.n	80014ae <PrintHex+0x22>
 80014fa:	9901      	ldr	r1, [sp, #4]
 80014fc:	9b02      	ldr	r3, [sp, #8]
 80014fe:	ba0a      	rev	r2, r1
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8001500:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 8087 	beq.w	8001616 <PrintHex+0x18a>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8001508:	07d8      	lsls	r0, r3, #31
 800150a:	f100 810f 	bmi.w	800172c <PrintHex+0x2a0>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 800150e:	2101      	movs	r1, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001510:	f1c3 0208 	rsb	r2, r3, #8
 8001514:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
 8001518:	105a      	asrs	r2, r3, #1
 800151a:	2a03      	cmp	r2, #3
 800151c:	f300 80c9 	bgt.w	80016b2 <PrintHex+0x226>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001520:	ac01      	add	r4, sp, #4
 8001522:	18a5      	adds	r5, r4, r2
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8001524:	462c      	mov	r4, r5
 8001526:	f814 0b01 	ldrb.w	r0, [r4], #1
 800152a:	43ef      	mvns	r7, r5
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800152c:	0903      	lsrs	r3, r0, #4
 800152e:	f007 0901 	and.w	r9, r7, #1
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001532:	f10d 0808 	add.w	r8, sp, #8
 8001536:	4d92      	ldr	r5, [pc, #584]	; (8001780 <PrintHex+0x2f4>)
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001538:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800153c:	f000 8131 	beq.w	80017a2 <PrintHex+0x316>
                        if (uHex<10) uHex+='0';
 8001540:	2b09      	cmp	r3, #9
 8001542:	f240 816e 	bls.w	8001822 <PrintHex+0x396>
                        else         uHex+='A'-10;
 8001546:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 800154a:	47a8      	blx	r5
 800154c:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800154e:	2f00      	cmp	r7, #0
 8001550:	f000 8130 	beq.w	80017b4 <PrintHex+0x328>
                        if (lHex<10) lHex+='0';
 8001554:	2f09      	cmp	r7, #9
 8001556:	f240 8152 	bls.w	80017fe <PrintHex+0x372>
                        else         lHex+='A'-10;
 800155a:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800155e:	47a8      	blx	r5
 8001560:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001562:	4544      	cmp	r4, r8
 8001564:	f000 80a5 	beq.w	80016b2 <PrintHex+0x226>
 8001568:	f1b9 0f00 	cmp.w	r9, #0
 800156c:	d017      	beq.n	800159e <PrintHex+0x112>
                        c = s[i];
 800156e:	f814 0b01 	ldrb.w	r0, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001572:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001574:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001578:	d031      	beq.n	80015de <PrintHex+0x152>
                        if (uHex<10) uHex+='0';
 800157a:	2b09      	cmp	r3, #9
 800157c:	f240 8142 	bls.w	8001804 <PrintHex+0x378>
                        else         uHex+='A'-10;
 8001580:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8001584:	47a8      	blx	r5
 8001586:	2200      	movs	r2, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001588:	b3a7      	cbz	r7, 80015f4 <PrintHex+0x168>
                        if (lHex<10) lHex+='0';
 800158a:	2f09      	cmp	r7, #9
 800158c:	f240 813d 	bls.w	800180a <PrintHex+0x37e>
                        else         lHex+='A'-10;
 8001590:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001594:	47a8      	blx	r5
 8001596:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001598:	4544      	cmp	r4, r8
 800159a:	f000 808a 	beq.w	80016b2 <PrintHex+0x226>
                        c = s[i];
 800159e:	f814 3b01 	ldrb.w	r3, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80015a2:	091a      	lsrs	r2, r3, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80015a4:	f003 070f 	and.w	r7, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80015a8:	f000 80d4 	beq.w	8001754 <PrintHex+0x2c8>
                        if (uHex<10) uHex+='0';
 80015ac:	2a09      	cmp	r2, #9
                        else         uHex+='A'-10;
 80015ae:	bf88      	it	hi
 80015b0:	f102 0037 	addhi.w	r0, r2, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80015b4:	f240 812c 	bls.w	8001810 <PrintHex+0x384>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 80015b8:	47a8      	blx	r5
 80015ba:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80015bc:	2f00      	cmp	r7, #0
 80015be:	f000 80d2 	beq.w	8001766 <PrintHex+0x2da>
                        if (lHex<10) lHex+='0';
 80015c2:	2f09      	cmp	r7, #9
                        else         lHex+='A'-10;
 80015c4:	bf88      	it	hi
 80015c6:	f107 0037 	addhi.w	r0, r7, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80015ca:	f240 8124 	bls.w	8001816 <PrintHex+0x38a>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80015ce:	47a8      	blx	r5
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 80015d0:	f814 0b01 	ldrb.w	r0, [r4], #1
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80015d4:	2100      	movs	r1, #0
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80015d6:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80015d8:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80015dc:	d1cd      	bne.n	800157a <PrintHex+0xee>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 80015de:	2900      	cmp	r1, #0
 80015e0:	f000 8110 	beq.w	8001804 <PrintHex+0x378>
                                if (flag0) print_byte_out('0');
 80015e4:	2e00      	cmp	r6, #0
 80015e6:	f040 80cd 	bne.w	8001784 <PrintHex+0x2f8>
                                else       print_byte_out(' ');
 80015ea:	2020      	movs	r0, #32
 80015ec:	47a8      	blx	r5
 80015ee:	2201      	movs	r2, #1
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80015f0:	2f00      	cmp	r7, #0
 80015f2:	d1ca      	bne.n	800158a <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 80015f4:	2a00      	cmp	r2, #0
 80015f6:	f000 8108 	beq.w	800180a <PrintHex+0x37e>
                                if (flag0) print_byte_out('0');
 80015fa:	2e00      	cmp	r6, #0
 80015fc:	f040 80ba 	bne.w	8001774 <PrintHex+0x2e8>
                                else       print_byte_out(' ');
 8001600:	2020      	movs	r0, #32
 8001602:	47a8      	blx	r5
 8001604:	2101      	movs	r1, #1
 8001606:	e7c7      	b.n	8001598 <PrintHex+0x10c>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8001608:	2b30      	cmp	r3, #48	; 0x30
 800160a:	bf08      	it	eq
 800160c:	2601      	moveq	r6, #1
 800160e:	e76e      	b.n	80014ee <PrintHex+0x62>
 8001610:	9c01      	ldr	r4, [sp, #4]
 8001612:	ba25      	rev	r5, r4
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8001614:	9501      	str	r5, [sp, #4]
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001616:	f89d 3004 	ldrb.w	r3, [sp, #4]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800161a:	091a      	lsrs	r2, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800161c:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001620:	d04a      	beq.n	80016b8 <PrintHex+0x22c>
                        if (uHex<10) uHex+='0';
 8001622:	2a09      	cmp	r2, #9
 8001624:	f240 80fa 	bls.w	800181c <PrintHex+0x390>
                        else         uHex+='A'-10;
 8001628:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 800162c:	4d54      	ldr	r5, [pc, #336]	; (8001780 <PrintHex+0x2f4>)
 800162e:	47a8      	blx	r5
 8001630:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001632:	2c00      	cmp	r4, #0
 8001634:	d144      	bne.n	80016c0 <PrintHex+0x234>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001636:	2201      	movs	r2, #1
 8001638:	2900      	cmp	r1, #0
 800163a:	f000 80fb 	beq.w	8001834 <PrintHex+0x3a8>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 800163e:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001642:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001644:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001648:	d047      	beq.n	80016da <PrintHex+0x24e>
                        if (uHex<10) uHex+='0';
 800164a:	2909      	cmp	r1, #9
 800164c:	f240 80ec 	bls.w	8001828 <PrintHex+0x39c>
                        else         uHex+='A'-10;
 8001650:	f101 0037 	add.w	r0, r1, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8001654:	47a8      	blx	r5
 8001656:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001658:	2c00      	cmp	r4, #0
 800165a:	d144      	bne.n	80016e6 <PrintHex+0x25a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 800165c:	2201      	movs	r2, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 80e5 	beq.w	800182e <PrintHex+0x3a2>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001664:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001668:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800166a:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800166e:	d047      	beq.n	8001700 <PrintHex+0x274>
                        if (uHex<10) uHex+='0';
 8001670:	2b09      	cmp	r3, #9
 8001672:	f240 80be 	bls.w	80017f2 <PrintHex+0x366>
                        else         uHex+='A'-10;
 8001676:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 800167a:	47a8      	blx	r5
 800167c:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 800167e:	2c00      	cmp	r4, #0
 8001680:	d143      	bne.n	800170a <PrintHex+0x27e>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001682:	2201      	movs	r2, #1
 8001684:	2900      	cmp	r1, #0
 8001686:	f000 80b7 	beq.w	80017f8 <PrintHex+0x36c>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 800168a:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800168e:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001690:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001694:	d045      	beq.n	8001722 <PrintHex+0x296>
                        if (uHex<10) uHex+='0';
 8001696:	2909      	cmp	r1, #9
                        else         uHex+='A'-10;
 8001698:	bf88      	it	hi
 800169a:	f101 0037 	addhi.w	r0, r1, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800169e:	d942      	bls.n	8001726 <PrintHex+0x29a>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80016a0:	47a8      	blx	r5
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80016a2:	2c00      	cmp	r4, #0
 80016a4:	d07a      	beq.n	800179c <PrintHex+0x310>
                        if (lHex<10) lHex+='0';
 80016a6:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 80016a8:	bf88      	it	hi
 80016aa:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80016ae:	d975      	bls.n	800179c <PrintHex+0x310>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80016b0:	47a8      	blx	r5
                }
        }
        return;
}
 80016b2:	b007      	add	sp, #28
 80016b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80016b8:	2101      	movs	r1, #1
 80016ba:	4d31      	ldr	r5, [pc, #196]	; (8001780 <PrintHex+0x2f4>)
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80016bc:	2c00      	cmp	r4, #0
 80016be:	d0ba      	beq.n	8001636 <PrintHex+0x1aa>
                        if (lHex<10) lHex+='0';
 80016c0:	2c09      	cmp	r4, #9
 80016c2:	f240 80b7 	bls.w	8001834 <PrintHex+0x3a8>
                        else         lHex+='A'-10;
 80016c6:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 80016ca:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80016cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80016d0:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80016d2:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80016d4:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80016d8:	d1b7      	bne.n	800164a <PrintHex+0x1be>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80016da:	2a00      	cmp	r2, #0
 80016dc:	f000 80a4 	beq.w	8001828 <PrintHex+0x39c>
 80016e0:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80016e2:	2c00      	cmp	r4, #0
 80016e4:	d0ba      	beq.n	800165c <PrintHex+0x1d0>
                        if (lHex<10) lHex+='0';
 80016e6:	2c09      	cmp	r4, #9
 80016e8:	f240 80a1 	bls.w	800182e <PrintHex+0x3a2>
                        else         lHex+='A'-10;
 80016ec:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 80016f0:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80016f2:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80016f6:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80016f8:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80016fa:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80016fe:	d1b7      	bne.n	8001670 <PrintHex+0x1e4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8001700:	2a00      	cmp	r2, #0
 8001702:	d076      	beq.n	80017f2 <PrintHex+0x366>
 8001704:	2101      	movs	r1, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001706:	2c00      	cmp	r4, #0
 8001708:	d0bb      	beq.n	8001682 <PrintHex+0x1f6>
                        if (lHex<10) lHex+='0';
 800170a:	2c09      	cmp	r4, #9
 800170c:	d974      	bls.n	80017f8 <PrintHex+0x36c>
                        else         lHex+='A'-10;
 800170e:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8001712:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001714:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001718:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800171a:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800171c:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001720:	d1b9      	bne.n	8001696 <PrintHex+0x20a>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8001722:	2a00      	cmp	r2, #0
 8001724:	d1bd      	bne.n	80016a2 <PrintHex+0x216>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001726:	f101 0030 	add.w	r0, r1, #48	; 0x30
 800172a:	e7b9      	b.n	80016a0 <PrintHex+0x214>
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 800172c:	43d8      	mvns	r0, r3
 800172e:	3008      	adds	r0, #8
 8001730:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8001734:	aa06      	add	r2, sp, #24
 8001736:	eb02 0163 	add.w	r1, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 800173a:	f811 0c14 	ldrb.w	r0, [r1, #-20]
                        if (lHex!=0) leading_zero=false;
 800173e:	f010 030f 	ands.w	r3, r0, #15
 8001742:	d045      	beq.n	80017d0 <PrintHex+0x344>
                        if (lHex<10) lHex+='0';
 8001744:	2b09      	cmp	r3, #9
 8001746:	d951      	bls.n	80017ec <PrintHex+0x360>
                        else         lHex+='A'-10;
 8001748:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <PrintHex+0x2f4>)
 800174e:	4798      	blx	r3
 8001750:	2100      	movs	r1, #0
 8001752:	e042      	b.n	80017da <PrintHex+0x34e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8001754:	2900      	cmp	r1, #0
 8001756:	d05b      	beq.n	8001810 <PrintHex+0x384>
                                if (flag0) print_byte_out('0');
 8001758:	b1e6      	cbz	r6, 8001794 <PrintHex+0x308>
 800175a:	2030      	movs	r0, #48	; 0x30
 800175c:	47a8      	blx	r5
 800175e:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001760:	2f00      	cmp	r7, #0
 8001762:	f47f af2e 	bne.w	80015c2 <PrintHex+0x136>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8001766:	2900      	cmp	r1, #0
 8001768:	d055      	beq.n	8001816 <PrintHex+0x38a>
                                if (flag0) print_byte_out('0');
 800176a:	b17e      	cbz	r6, 800178c <PrintHex+0x300>
 800176c:	2030      	movs	r0, #48	; 0x30
 800176e:	47a8      	blx	r5
 8001770:	2101      	movs	r1, #1
 8001772:	e6fc      	b.n	800156e <PrintHex+0xe2>
 8001774:	2030      	movs	r0, #48	; 0x30
 8001776:	47a8      	blx	r5
 8001778:	2101      	movs	r1, #1
 800177a:	e70d      	b.n	8001598 <PrintHex+0x10c>
 800177c:	0800107d 	.word	0x0800107d
 8001780:	08001025 	.word	0x08001025
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8001784:	2030      	movs	r0, #48	; 0x30
 8001786:	47a8      	blx	r5
 8001788:	2201      	movs	r2, #1
 800178a:	e6fd      	b.n	8001588 <PrintHex+0xfc>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 800178c:	2020      	movs	r0, #32
 800178e:	47a8      	blx	r5
 8001790:	2101      	movs	r1, #1
 8001792:	e6ec      	b.n	800156e <PrintHex+0xe2>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8001794:	2020      	movs	r0, #32
 8001796:	47a8      	blx	r5
 8001798:	2101      	movs	r1, #1
 800179a:	e70f      	b.n	80015bc <PrintHex+0x130>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800179c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80017a0:	e786      	b.n	80016b0 <PrintHex+0x224>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 80017a2:	2900      	cmp	r1, #0
 80017a4:	d03d      	beq.n	8001822 <PrintHex+0x396>
                                if (flag0) print_byte_out('0');
 80017a6:	b17e      	cbz	r6, 80017c8 <PrintHex+0x33c>
 80017a8:	2030      	movs	r0, #48	; 0x30
 80017aa:	47a8      	blx	r5
 80017ac:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80017ae:	2f00      	cmp	r7, #0
 80017b0:	f47f aed0 	bne.w	8001554 <PrintHex+0xc8>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 80017b4:	b319      	cbz	r1, 80017fe <PrintHex+0x372>
                                if (flag0) print_byte_out('0');
 80017b6:	b11e      	cbz	r6, 80017c0 <PrintHex+0x334>
 80017b8:	2030      	movs	r0, #48	; 0x30
 80017ba:	47a8      	blx	r5
 80017bc:	2101      	movs	r1, #1
 80017be:	e6d0      	b.n	8001562 <PrintHex+0xd6>
                                else       print_byte_out(' ');
 80017c0:	2020      	movs	r0, #32
 80017c2:	47a8      	blx	r5
 80017c4:	2101      	movs	r1, #1
 80017c6:	e6cc      	b.n	8001562 <PrintHex+0xd6>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 80017c8:	2020      	movs	r0, #32
 80017ca:	47a8      	blx	r5
 80017cc:	2101      	movs	r1, #1
 80017ce:	e6be      	b.n	800154e <PrintHex+0xc2>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 80017d0:	b13e      	cbz	r6, 80017e2 <PrintHex+0x356>
 80017d2:	491a      	ldr	r1, [pc, #104]	; (800183c <PrintHex+0x3b0>)
 80017d4:	2030      	movs	r0, #48	; 0x30
 80017d6:	4788      	blx	r1
 80017d8:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 80017da:	9802      	ldr	r0, [sp, #8]
 80017dc:	1e43      	subs	r3, r0, #1
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	e696      	b.n	8001510 <PrintHex+0x84>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 80017e2:	2020      	movs	r0, #32
 80017e4:	4a15      	ldr	r2, [pc, #84]	; (800183c <PrintHex+0x3b0>)
 80017e6:	4790      	blx	r2
 80017e8:	2101      	movs	r1, #1
 80017ea:	e7f6      	b.n	80017da <PrintHex+0x34e>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 80017ec:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80017f0:	e7ac      	b.n	800174c <PrintHex+0x2c0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80017f2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80017f6:	e740      	b.n	800167a <PrintHex+0x1ee>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80017f8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80017fc:	e789      	b.n	8001712 <PrintHex+0x286>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80017fe:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001802:	e6ac      	b.n	800155e <PrintHex+0xd2>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001804:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001808:	e6bc      	b.n	8001584 <PrintHex+0xf8>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800180a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800180e:	e6c1      	b.n	8001594 <PrintHex+0x108>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001810:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8001814:	e6d0      	b.n	80015b8 <PrintHex+0x12c>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001816:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800181a:	e6d8      	b.n	80015ce <PrintHex+0x142>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800181c:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8001820:	e704      	b.n	800162c <PrintHex+0x1a0>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001822:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001826:	e690      	b.n	800154a <PrintHex+0xbe>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001828:	f101 0030 	add.w	r0, r1, #48	; 0x30
 800182c:	e712      	b.n	8001654 <PrintHex+0x1c8>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800182e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001832:	e75d      	b.n	80016f0 <PrintHex+0x264>
 8001834:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001838:	e747      	b.n	80016ca <PrintHex+0x23e>
 800183a:	bf00      	nop
 800183c:	08001025 	.word	0x08001025

08001840 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 8001840:	b40f      	push	{r0, r1, r2, r3}
 8001842:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001846:	b085      	sub	sp, #20
	int		i;
	va_list args;
	char	*s=fmt;
 8001848:	f10d 0930 	add.w	r9, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 800184c:	4bac      	ldr	r3, [pc, #688]	; (8001b00 <Lb_printf+0x2c0>)
 800184e:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 8001850:	f859 4b04 	ldr.w	r4, [r9], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8001854:	4dab      	ldr	r5, [pc, #684]	; (8001b04 <Lb_printf+0x2c4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8001856:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8001b10 <Lb_printf+0x2d0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 800185a:	4fab      	ldr	r7, [pc, #684]	; (8001b08 <Lb_printf+0x2c8>)
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800185c:	4eab      	ldr	r6, [pc, #684]	; (8001b0c <Lb_printf+0x2cc>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 800185e:	701a      	strb	r2, [r3, #0]
	
	while (*s)
 8001860:	7820      	ldrb	r0, [r4, #0]
 8001862:	2800      	cmp	r0, #0
 8001864:	f000 80be 	beq.w	80019e4 <Lb_printf+0x1a4>
	{
		if (*s=='%')
 8001868:	2825      	cmp	r0, #37	; 0x25
 800186a:	f040 80c0 	bne.w	80019ee <Lb_printf+0x1ae>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800186e:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8001870:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001872:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8001876:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8001878:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800187c:	f240 80d6 	bls.w	8001a2c <Lb_printf+0x1ec>
 8001880:	2a78      	cmp	r2, #120	; 0x78
 8001882:	f000 80dd 	beq.w	8001a40 <Lb_printf+0x200>
 8001886:	2a73      	cmp	r2, #115	; 0x73
 8001888:	f000 80dd 	beq.w	8001a46 <Lb_printf+0x206>
 800188c:	2a25      	cmp	r2, #37	; 0x25
 800188e:	f000 80dd 	beq.w	8001a4c <Lb_printf+0x20c>
 8001892:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001894:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001898:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800189c:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800189e:	2a01      	cmp	r2, #1
 80018a0:	f240 80d6 	bls.w	8001a50 <Lb_printf+0x210>
 80018a4:	2978      	cmp	r1, #120	; 0x78
 80018a6:	f000 80d6 	beq.w	8001a56 <Lb_printf+0x216>
 80018aa:	2973      	cmp	r1, #115	; 0x73
 80018ac:	f000 80d6 	beq.w	8001a5c <Lb_printf+0x21c>
 80018b0:	2925      	cmp	r1, #37	; 0x25
 80018b2:	f000 80d6 	beq.w	8001a62 <Lb_printf+0x222>
 80018b6:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80018b8:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80018bc:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80018c0:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80018c2:	2901      	cmp	r1, #1
 80018c4:	f240 80cf 	bls.w	8001a66 <Lb_printf+0x226>
 80018c8:	2a78      	cmp	r2, #120	; 0x78
 80018ca:	f000 80cf 	beq.w	8001a6c <Lb_printf+0x22c>
 80018ce:	2a73      	cmp	r2, #115	; 0x73
 80018d0:	f000 80cf 	beq.w	8001a72 <Lb_printf+0x232>
 80018d4:	2a25      	cmp	r2, #37	; 0x25
 80018d6:	f000 80cf 	beq.w	8001a78 <Lb_printf+0x238>
 80018da:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80018dc:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80018e0:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80018e4:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80018e6:	2a01      	cmp	r2, #1
 80018e8:	f240 80c8 	bls.w	8001a7c <Lb_printf+0x23c>
 80018ec:	2978      	cmp	r1, #120	; 0x78
 80018ee:	f000 80c8 	beq.w	8001a82 <Lb_printf+0x242>
 80018f2:	2973      	cmp	r1, #115	; 0x73
 80018f4:	f000 80c8 	beq.w	8001a88 <Lb_printf+0x248>
 80018f8:	2925      	cmp	r1, #37	; 0x25
 80018fa:	f000 80c8 	beq.w	8001a8e <Lb_printf+0x24e>
 80018fe:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001900:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001904:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001908:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800190a:	2901      	cmp	r1, #1
 800190c:	f240 80c1 	bls.w	8001a92 <Lb_printf+0x252>
 8001910:	2a78      	cmp	r2, #120	; 0x78
 8001912:	f000 80c1 	beq.w	8001a98 <Lb_printf+0x258>
 8001916:	2a73      	cmp	r2, #115	; 0x73
 8001918:	f000 80c1 	beq.w	8001a9e <Lb_printf+0x25e>
 800191c:	2a25      	cmp	r2, #37	; 0x25
 800191e:	f000 80c1 	beq.w	8001aa4 <Lb_printf+0x264>
 8001922:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001924:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001928:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800192c:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800192e:	2a01      	cmp	r2, #1
 8001930:	f240 80ba 	bls.w	8001aa8 <Lb_printf+0x268>
 8001934:	2978      	cmp	r1, #120	; 0x78
 8001936:	f000 80ba 	beq.w	8001aae <Lb_printf+0x26e>
 800193a:	2973      	cmp	r1, #115	; 0x73
 800193c:	f000 80ba 	beq.w	8001ab4 <Lb_printf+0x274>
 8001940:	2925      	cmp	r1, #37	; 0x25
 8001942:	f000 80ba 	beq.w	8001aba <Lb_printf+0x27a>
 8001946:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001948:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800194c:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001950:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001952:	2901      	cmp	r1, #1
 8001954:	f240 80b3 	bls.w	8001abe <Lb_printf+0x27e>
 8001958:	2a78      	cmp	r2, #120	; 0x78
 800195a:	f000 80b3 	beq.w	8001ac4 <Lb_printf+0x284>
 800195e:	2a73      	cmp	r2, #115	; 0x73
 8001960:	f000 80b3 	beq.w	8001aca <Lb_printf+0x28a>
 8001964:	2a25      	cmp	r2, #37	; 0x25
 8001966:	f000 80b3 	beq.w	8001ad0 <Lb_printf+0x290>
 800196a:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800196c:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001970:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 8001974:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001976:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800197a:	f240 80ab 	bls.w	8001ad4 <Lb_printf+0x294>
 800197e:	2978      	cmp	r1, #120	; 0x78
 8001980:	f000 80ab 	beq.w	8001ada <Lb_printf+0x29a>
 8001984:	2973      	cmp	r1, #115	; 0x73
 8001986:	f000 80ab 	beq.w	8001ae0 <Lb_printf+0x2a0>
 800198a:	2925      	cmp	r1, #37	; 0x25
 800198c:	f000 80ab 	beq.w	8001ae6 <Lb_printf+0x2a6>
 8001990:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001992:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001996:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800199a:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800199c:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80019a0:	f240 80a3 	bls.w	8001aea <Lb_printf+0x2aa>
 80019a4:	2a78      	cmp	r2, #120	; 0x78
 80019a6:	f000 80a3 	beq.w	8001af0 <Lb_printf+0x2b0>
 80019aa:	2a73      	cmp	r2, #115	; 0x73
 80019ac:	f000 80a3 	beq.w	8001af6 <Lb_printf+0x2b6>
 80019b0:	2a25      	cmp	r2, #37	; 0x25
 80019b2:	f000 80a3 	beq.w	8001afc <Lb_printf+0x2bc>
 80019b6:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80019b8:	f88d 200d 	strb.w	r2, [sp, #13]
 80019bc:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80019c0:	1c5c      	adds	r4, r3, #1
 80019c2:	2864      	cmp	r0, #100	; 0x64
 80019c4:	d02b      	beq.n	8001a1e <Lb_printf+0x1de>
 80019c6:	d815      	bhi.n	80019f4 <Lb_printf+0x1b4>
 80019c8:	2825      	cmp	r0, #37	; 0x25
 80019ca:	d01f      	beq.n	8001a0c <Lb_printf+0x1cc>
 80019cc:	2863      	cmp	r0, #99	; 0x63
 80019ce:	f47f af47 	bne.w	8001860 <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80019d2:	f899 0000 	ldrb.w	r0, [r9]
 80019d6:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 80019d8:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 80019da:	f109 0904 	add.w	r9, r9, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 80019de:	2800      	cmp	r0, #0
 80019e0:	f47f af42 	bne.w	8001868 <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 80019e4:	b005      	add	sp, #20
 80019e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019ea:	b004      	add	sp, #16
 80019ec:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80019ee:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 80019f0:	3401      	adds	r4, #1
 80019f2:	e735      	b.n	8001860 <Lb_printf+0x20>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80019f4:	2873      	cmp	r0, #115	; 0x73
 80019f6:	d00b      	beq.n	8001a10 <Lb_printf+0x1d0>
 80019f8:	2878      	cmp	r0, #120	; 0x78
 80019fa:	f47f af31 	bne.w	8001860 <Lb_printf+0x20>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 80019fe:	f8d9 1000 	ldr.w	r1, [r9]
 8001a02:	a801      	add	r0, sp, #4
 8001a04:	f109 0904 	add.w	r9, r9, #4
 8001a08:	47b0      	blx	r6
					break;
 8001a0a:	e729      	b.n	8001860 <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8001a0c:	47a8      	blx	r5
 8001a0e:	e727      	b.n	8001860 <Lb_printf+0x20>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8001a10:	f8d9 1000 	ldr.w	r1, [r9]
 8001a14:	a801      	add	r0, sp, #4
 8001a16:	f109 0904 	add.w	r9, r9, #4
 8001a1a:	47b8      	blx	r7
 					break;
 8001a1c:	e720      	b.n	8001860 <Lb_printf+0x20>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8001a1e:	f8d9 1000 	ldr.w	r1, [r9]
 8001a22:	a801      	add	r0, sp, #4
 8001a24:	f109 0904 	add.w	r9, r9, #4
 8001a28:	47c0      	blx	r8
					break;
 8001a2a:	e719      	b.n	8001860 <Lb_printf+0x20>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001a2c:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001a2e:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8001a30:	aa04      	add	r2, sp, #16
 8001a32:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 8001a34:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8001a36:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 8001a3a:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8001a3e:	e7bf      	b.n	80019c0 <Lb_printf+0x180>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001a40:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001a42:	2078      	movs	r0, #120	; 0x78
 8001a44:	e7f4      	b.n	8001a30 <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001a46:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001a48:	2073      	movs	r0, #115	; 0x73
 8001a4a:	e7f1      	b.n	8001a30 <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001a4c:	2401      	movs	r4, #1
 8001a4e:	e7ef      	b.n	8001a30 <Lb_printf+0x1f0>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001a50:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001a52:	2402      	movs	r4, #2
 8001a54:	e7ec      	b.n	8001a30 <Lb_printf+0x1f0>
 8001a56:	2402      	movs	r4, #2
 8001a58:	2078      	movs	r0, #120	; 0x78
 8001a5a:	e7e9      	b.n	8001a30 <Lb_printf+0x1f0>
 8001a5c:	2402      	movs	r4, #2
 8001a5e:	2073      	movs	r0, #115	; 0x73
 8001a60:	e7e6      	b.n	8001a30 <Lb_printf+0x1f0>
 8001a62:	2402      	movs	r4, #2
 8001a64:	e7e4      	b.n	8001a30 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001a66:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001a68:	2403      	movs	r4, #3
 8001a6a:	e7e1      	b.n	8001a30 <Lb_printf+0x1f0>
 8001a6c:	2403      	movs	r4, #3
 8001a6e:	2078      	movs	r0, #120	; 0x78
 8001a70:	e7de      	b.n	8001a30 <Lb_printf+0x1f0>
 8001a72:	2403      	movs	r4, #3
 8001a74:	2073      	movs	r0, #115	; 0x73
 8001a76:	e7db      	b.n	8001a30 <Lb_printf+0x1f0>
 8001a78:	2403      	movs	r4, #3
 8001a7a:	e7d9      	b.n	8001a30 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001a7c:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001a7e:	2404      	movs	r4, #4
 8001a80:	e7d6      	b.n	8001a30 <Lb_printf+0x1f0>
 8001a82:	2404      	movs	r4, #4
 8001a84:	2078      	movs	r0, #120	; 0x78
 8001a86:	e7d3      	b.n	8001a30 <Lb_printf+0x1f0>
 8001a88:	2404      	movs	r4, #4
 8001a8a:	2073      	movs	r0, #115	; 0x73
 8001a8c:	e7d0      	b.n	8001a30 <Lb_printf+0x1f0>
 8001a8e:	2404      	movs	r4, #4
 8001a90:	e7ce      	b.n	8001a30 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001a92:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001a94:	2405      	movs	r4, #5
 8001a96:	e7cb      	b.n	8001a30 <Lb_printf+0x1f0>
 8001a98:	2405      	movs	r4, #5
 8001a9a:	2078      	movs	r0, #120	; 0x78
 8001a9c:	e7c8      	b.n	8001a30 <Lb_printf+0x1f0>
 8001a9e:	2405      	movs	r4, #5
 8001aa0:	2073      	movs	r0, #115	; 0x73
 8001aa2:	e7c5      	b.n	8001a30 <Lb_printf+0x1f0>
 8001aa4:	2405      	movs	r4, #5
 8001aa6:	e7c3      	b.n	8001a30 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001aa8:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001aaa:	2406      	movs	r4, #6
 8001aac:	e7c0      	b.n	8001a30 <Lb_printf+0x1f0>
 8001aae:	2406      	movs	r4, #6
 8001ab0:	2078      	movs	r0, #120	; 0x78
 8001ab2:	e7bd      	b.n	8001a30 <Lb_printf+0x1f0>
 8001ab4:	2406      	movs	r4, #6
 8001ab6:	2073      	movs	r0, #115	; 0x73
 8001ab8:	e7ba      	b.n	8001a30 <Lb_printf+0x1f0>
 8001aba:	2406      	movs	r4, #6
 8001abc:	e7b8      	b.n	8001a30 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001abe:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001ac0:	2407      	movs	r4, #7
 8001ac2:	e7b5      	b.n	8001a30 <Lb_printf+0x1f0>
 8001ac4:	2407      	movs	r4, #7
 8001ac6:	2078      	movs	r0, #120	; 0x78
 8001ac8:	e7b2      	b.n	8001a30 <Lb_printf+0x1f0>
 8001aca:	2407      	movs	r4, #7
 8001acc:	2073      	movs	r0, #115	; 0x73
 8001ace:	e7af      	b.n	8001a30 <Lb_printf+0x1f0>
 8001ad0:	2407      	movs	r4, #7
 8001ad2:	e7ad      	b.n	8001a30 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001ad4:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001ad6:	2408      	movs	r4, #8
 8001ad8:	e7aa      	b.n	8001a30 <Lb_printf+0x1f0>
 8001ada:	2408      	movs	r4, #8
 8001adc:	2078      	movs	r0, #120	; 0x78
 8001ade:	e7a7      	b.n	8001a30 <Lb_printf+0x1f0>
 8001ae0:	2408      	movs	r4, #8
 8001ae2:	2073      	movs	r0, #115	; 0x73
 8001ae4:	e7a4      	b.n	8001a30 <Lb_printf+0x1f0>
 8001ae6:	2408      	movs	r4, #8
 8001ae8:	e7a2      	b.n	8001a30 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001aea:	4610      	mov	r0, r2
 8001aec:	2409      	movs	r4, #9
 8001aee:	e79f      	b.n	8001a30 <Lb_printf+0x1f0>
 8001af0:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001af2:	2078      	movs	r0, #120	; 0x78
 8001af4:	e79c      	b.n	8001a30 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001af6:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001af8:	2073      	movs	r0, #115	; 0x73
 8001afa:	e799      	b.n	8001a30 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001afc:	2409      	movs	r4, #9
 8001afe:	e797      	b.n	8001a30 <Lb_printf+0x1f0>
 8001b00:	20000404 	.word	0x20000404
 8001b04:	08001025 	.word	0x08001025
 8001b08:	0800105d 	.word	0x0800105d
 8001b0c:	0800148d 	.word	0x0800148d
 8001b10:	080010c1 	.word	0x080010c1

08001b14 <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8001b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8001b18:	4cab      	ldr	r4, [pc, #684]	; (8001dc8 <Lb_vsprintf+0x2b4>)
	StrPrintBufIndex = 0;
 8001b1a:	4eac      	ldr	r6, [pc, #688]	; (8001dcc <Lb_vsprintf+0x2b8>)
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8001b1c:	6020      	str	r0, [r4, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8001b1e:	4bac      	ldr	r3, [pc, #688]	; (8001dd0 <Lb_vsprintf+0x2bc>)
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8001b20:	2000      	movs	r0, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8001b22:	4615      	mov	r5, r2
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8001b24:	6030      	str	r0, [r6, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8001b26:	2201      	movs	r2, #1



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8001b28:	4eaa      	ldr	r6, [pc, #680]	; (8001dd4 <Lb_vsprintf+0x2c0>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8001b2a:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 8001ddc <Lb_vsprintf+0x2c8>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8001b2e:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 8001de0 <Lb_vsprintf+0x2cc>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8001b32:	4fa9      	ldr	r7, [pc, #676]	; (8001dd8 <Lb_vsprintf+0x2c4>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8001b34:	b085      	sub	sp, #20
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8001b36:	701a      	strb	r2, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
	int		i;
	char	*s=fmt;
 8001b38:	460c      	mov	r4, r1
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8001b3a:	7820      	ldrb	r0, [r4, #0]
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	f000 80bc 	beq.w	8001cba <Lb_vsprintf+0x1a6>
	{
		if (*s=='%')
 8001b42:	2825      	cmp	r0, #37	; 0x25
 8001b44:	f040 80bc 	bne.w	8001cc0 <Lb_vsprintf+0x1ac>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001b48:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8001b4a:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001b4c:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8001b50:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8001b52:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001b56:	f240 80cc 	bls.w	8001cf2 <Lb_vsprintf+0x1de>
 8001b5a:	2a78      	cmp	r2, #120	; 0x78
 8001b5c:	f000 80d3 	beq.w	8001d06 <Lb_vsprintf+0x1f2>
 8001b60:	2a73      	cmp	r2, #115	; 0x73
 8001b62:	f000 80d3 	beq.w	8001d0c <Lb_vsprintf+0x1f8>
 8001b66:	2a25      	cmp	r2, #37	; 0x25
 8001b68:	f000 80d3 	beq.w	8001d12 <Lb_vsprintf+0x1fe>
 8001b6c:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001b6e:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001b72:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001b76:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001b78:	2a01      	cmp	r2, #1
 8001b7a:	f240 80cc 	bls.w	8001d16 <Lb_vsprintf+0x202>
 8001b7e:	2978      	cmp	r1, #120	; 0x78
 8001b80:	f000 80cc 	beq.w	8001d1c <Lb_vsprintf+0x208>
 8001b84:	2973      	cmp	r1, #115	; 0x73
 8001b86:	f000 80cc 	beq.w	8001d22 <Lb_vsprintf+0x20e>
 8001b8a:	2925      	cmp	r1, #37	; 0x25
 8001b8c:	f000 80cc 	beq.w	8001d28 <Lb_vsprintf+0x214>
 8001b90:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001b92:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001b96:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001b9a:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001b9c:	2901      	cmp	r1, #1
 8001b9e:	f240 80c5 	bls.w	8001d2c <Lb_vsprintf+0x218>
 8001ba2:	2a78      	cmp	r2, #120	; 0x78
 8001ba4:	f000 80c5 	beq.w	8001d32 <Lb_vsprintf+0x21e>
 8001ba8:	2a73      	cmp	r2, #115	; 0x73
 8001baa:	f000 80c5 	beq.w	8001d38 <Lb_vsprintf+0x224>
 8001bae:	2a25      	cmp	r2, #37	; 0x25
 8001bb0:	f000 80c5 	beq.w	8001d3e <Lb_vsprintf+0x22a>
 8001bb4:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001bb6:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001bba:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001bbe:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001bc0:	2a01      	cmp	r2, #1
 8001bc2:	f240 80be 	bls.w	8001d42 <Lb_vsprintf+0x22e>
 8001bc6:	2978      	cmp	r1, #120	; 0x78
 8001bc8:	f000 80be 	beq.w	8001d48 <Lb_vsprintf+0x234>
 8001bcc:	2973      	cmp	r1, #115	; 0x73
 8001bce:	f000 80be 	beq.w	8001d4e <Lb_vsprintf+0x23a>
 8001bd2:	2925      	cmp	r1, #37	; 0x25
 8001bd4:	f000 80be 	beq.w	8001d54 <Lb_vsprintf+0x240>
 8001bd8:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001bda:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001bde:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001be2:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001be4:	2901      	cmp	r1, #1
 8001be6:	f240 80b7 	bls.w	8001d58 <Lb_vsprintf+0x244>
 8001bea:	2a78      	cmp	r2, #120	; 0x78
 8001bec:	f000 80b7 	beq.w	8001d5e <Lb_vsprintf+0x24a>
 8001bf0:	2a73      	cmp	r2, #115	; 0x73
 8001bf2:	f000 80b7 	beq.w	8001d64 <Lb_vsprintf+0x250>
 8001bf6:	2a25      	cmp	r2, #37	; 0x25
 8001bf8:	f000 80b7 	beq.w	8001d6a <Lb_vsprintf+0x256>
 8001bfc:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001bfe:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001c02:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001c06:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001c08:	2a01      	cmp	r2, #1
 8001c0a:	f240 80b0 	bls.w	8001d6e <Lb_vsprintf+0x25a>
 8001c0e:	2978      	cmp	r1, #120	; 0x78
 8001c10:	f000 80b0 	beq.w	8001d74 <Lb_vsprintf+0x260>
 8001c14:	2973      	cmp	r1, #115	; 0x73
 8001c16:	f000 80b0 	beq.w	8001d7a <Lb_vsprintf+0x266>
 8001c1a:	2925      	cmp	r1, #37	; 0x25
 8001c1c:	f000 80b0 	beq.w	8001d80 <Lb_vsprintf+0x26c>
 8001c20:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001c22:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001c26:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001c2a:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001c2c:	2901      	cmp	r1, #1
 8001c2e:	f240 80a9 	bls.w	8001d84 <Lb_vsprintf+0x270>
 8001c32:	2a78      	cmp	r2, #120	; 0x78
 8001c34:	f000 80a9 	beq.w	8001d8a <Lb_vsprintf+0x276>
 8001c38:	2a73      	cmp	r2, #115	; 0x73
 8001c3a:	f000 80a9 	beq.w	8001d90 <Lb_vsprintf+0x27c>
 8001c3e:	2a25      	cmp	r2, #37	; 0x25
 8001c40:	f000 80a9 	beq.w	8001d96 <Lb_vsprintf+0x282>
 8001c44:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001c46:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001c4a:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 8001c4e:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001c50:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001c54:	f240 80a1 	bls.w	8001d9a <Lb_vsprintf+0x286>
 8001c58:	2978      	cmp	r1, #120	; 0x78
 8001c5a:	f000 80a1 	beq.w	8001da0 <Lb_vsprintf+0x28c>
 8001c5e:	2973      	cmp	r1, #115	; 0x73
 8001c60:	f000 80a1 	beq.w	8001da6 <Lb_vsprintf+0x292>
 8001c64:	2925      	cmp	r1, #37	; 0x25
 8001c66:	f000 80a1 	beq.w	8001dac <Lb_vsprintf+0x298>
 8001c6a:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001c6c:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001c70:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8001c74:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001c76:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001c7a:	f240 8099 	bls.w	8001db0 <Lb_vsprintf+0x29c>
 8001c7e:	2a78      	cmp	r2, #120	; 0x78
 8001c80:	f000 8099 	beq.w	8001db6 <Lb_vsprintf+0x2a2>
 8001c84:	2a73      	cmp	r2, #115	; 0x73
 8001c86:	f000 8099 	beq.w	8001dbc <Lb_vsprintf+0x2a8>
 8001c8a:	2a25      	cmp	r2, #37	; 0x25
 8001c8c:	f000 8099 	beq.w	8001dc2 <Lb_vsprintf+0x2ae>
 8001c90:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001c92:	f88d 200d 	strb.w	r2, [sp, #13]
 8001c96:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8001c9a:	1c5c      	adds	r4, r3, #1
 8001c9c:	2864      	cmp	r0, #100	; 0x64
 8001c9e:	d023      	beq.n	8001ce8 <Lb_vsprintf+0x1d4>
 8001ca0:	d811      	bhi.n	8001cc6 <Lb_vsprintf+0x1b2>
 8001ca2:	2825      	cmp	r0, #37	; 0x25
 8001ca4:	d019      	beq.n	8001cda <Lb_vsprintf+0x1c6>
 8001ca6:	2863      	cmp	r0, #99	; 0x63
 8001ca8:	f47f af47 	bne.w	8001b3a <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8001cac:	7828      	ldrb	r0, [r5, #0]
 8001cae:	47b0      	blx	r6
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8001cb0:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8001cb2:	3504      	adds	r5, #4
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	f47f af44 	bne.w	8001b42 <Lb_vsprintf+0x2e>
			s++;
		}
	}
	
	return;
}
 8001cba:	b005      	add	sp, #20
 8001cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8001cc0:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8001cc2:	3401      	adds	r4, #1
 8001cc4:	e739      	b.n	8001b3a <Lb_vsprintf+0x26>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8001cc6:	2873      	cmp	r0, #115	; 0x73
 8001cc8:	d009      	beq.n	8001cde <Lb_vsprintf+0x1ca>
 8001cca:	2878      	cmp	r0, #120	; 0x78
 8001ccc:	f47f af35 	bne.w	8001b3a <Lb_vsprintf+0x26>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8001cd0:	6829      	ldr	r1, [r5, #0]
 8001cd2:	a801      	add	r0, sp, #4
 8001cd4:	3504      	adds	r5, #4
 8001cd6:	47b8      	blx	r7
					break;
 8001cd8:	e72f      	b.n	8001b3a <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8001cda:	47b0      	blx	r6
 8001cdc:	e72d      	b.n	8001b3a <Lb_vsprintf+0x26>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8001cde:	6829      	ldr	r1, [r5, #0]
 8001ce0:	a801      	add	r0, sp, #4
 8001ce2:	3504      	adds	r5, #4
 8001ce4:	47c0      	blx	r8
 					break;
 8001ce6:	e728      	b.n	8001b3a <Lb_vsprintf+0x26>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8001ce8:	6829      	ldr	r1, [r5, #0]
 8001cea:	a801      	add	r0, sp, #4
 8001cec:	3504      	adds	r5, #4
 8001cee:	47c8      	blx	r9
					break;
 8001cf0:	e723      	b.n	8001b3a <Lb_vsprintf+0x26>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001cf2:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001cf4:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8001cf6:	aa04      	add	r2, sp, #16
 8001cf8:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 8001cfa:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8001cfc:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 8001d00:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8001d04:	e7c9      	b.n	8001c9a <Lb_vsprintf+0x186>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001d06:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001d08:	2078      	movs	r0, #120	; 0x78
 8001d0a:	e7f4      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001d0c:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001d0e:	2073      	movs	r0, #115	; 0x73
 8001d10:	e7f1      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001d12:	2401      	movs	r4, #1
 8001d14:	e7ef      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001d16:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001d18:	2402      	movs	r4, #2
 8001d1a:	e7ec      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d1c:	2402      	movs	r4, #2
 8001d1e:	2078      	movs	r0, #120	; 0x78
 8001d20:	e7e9      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d22:	2402      	movs	r4, #2
 8001d24:	2073      	movs	r0, #115	; 0x73
 8001d26:	e7e6      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d28:	2402      	movs	r4, #2
 8001d2a:	e7e4      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001d2c:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001d2e:	2403      	movs	r4, #3
 8001d30:	e7e1      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d32:	2403      	movs	r4, #3
 8001d34:	2078      	movs	r0, #120	; 0x78
 8001d36:	e7de      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d38:	2403      	movs	r4, #3
 8001d3a:	2073      	movs	r0, #115	; 0x73
 8001d3c:	e7db      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d3e:	2403      	movs	r4, #3
 8001d40:	e7d9      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001d42:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001d44:	2404      	movs	r4, #4
 8001d46:	e7d6      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d48:	2404      	movs	r4, #4
 8001d4a:	2078      	movs	r0, #120	; 0x78
 8001d4c:	e7d3      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d4e:	2404      	movs	r4, #4
 8001d50:	2073      	movs	r0, #115	; 0x73
 8001d52:	e7d0      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d54:	2404      	movs	r4, #4
 8001d56:	e7ce      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001d58:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001d5a:	2405      	movs	r4, #5
 8001d5c:	e7cb      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d5e:	2405      	movs	r4, #5
 8001d60:	2078      	movs	r0, #120	; 0x78
 8001d62:	e7c8      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d64:	2405      	movs	r4, #5
 8001d66:	2073      	movs	r0, #115	; 0x73
 8001d68:	e7c5      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d6a:	2405      	movs	r4, #5
 8001d6c:	e7c3      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001d6e:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001d70:	2406      	movs	r4, #6
 8001d72:	e7c0      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d74:	2406      	movs	r4, #6
 8001d76:	2078      	movs	r0, #120	; 0x78
 8001d78:	e7bd      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d7a:	2406      	movs	r4, #6
 8001d7c:	2073      	movs	r0, #115	; 0x73
 8001d7e:	e7ba      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d80:	2406      	movs	r4, #6
 8001d82:	e7b8      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001d84:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001d86:	2407      	movs	r4, #7
 8001d88:	e7b5      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d8a:	2407      	movs	r4, #7
 8001d8c:	2078      	movs	r0, #120	; 0x78
 8001d8e:	e7b2      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d90:	2407      	movs	r4, #7
 8001d92:	2073      	movs	r0, #115	; 0x73
 8001d94:	e7af      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001d96:	2407      	movs	r4, #7
 8001d98:	e7ad      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001d9a:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001d9c:	2408      	movs	r4, #8
 8001d9e:	e7aa      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001da0:	2408      	movs	r4, #8
 8001da2:	2078      	movs	r0, #120	; 0x78
 8001da4:	e7a7      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001da6:	2408      	movs	r4, #8
 8001da8:	2073      	movs	r0, #115	; 0x73
 8001daa:	e7a4      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001dac:	2408      	movs	r4, #8
 8001dae:	e7a2      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001db0:	4610      	mov	r0, r2
 8001db2:	2409      	movs	r4, #9
 8001db4:	e79f      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001db6:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001db8:	2078      	movs	r0, #120	; 0x78
 8001dba:	e79c      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001dbc:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001dbe:	2073      	movs	r0, #115	; 0x73
 8001dc0:	e799      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001dc2:	2409      	movs	r4, #9
 8001dc4:	e797      	b.n	8001cf6 <Lb_vsprintf+0x1e2>
 8001dc6:	bf00      	nop
 8001dc8:	200004c0 	.word	0x200004c0
 8001dcc:	20000400 	.word	0x20000400
 8001dd0:	20000404 	.word	0x20000404
 8001dd4:	08001025 	.word	0x08001025
 8001dd8:	0800148d 	.word	0x0800148d
 8001ddc:	080010c1 	.word	0x080010c1
 8001de0:	0800105d 	.word	0x0800105d

08001de4 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8001de4:	4668      	mov	r0, sp
 8001de6:	f020 0107 	bic.w	r1, r0, #7
 8001dea:	468d      	mov	sp, r1
 8001dec:	b579      	push	{r0, r3, r4, r5, r6, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001dee:	492a      	ldr	r1, [pc, #168]	; (8001e98 <zero_loop+0x62>)
 8001df0:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <zero_loop+0x66>)
 8001df2:	4299      	cmp	r1, r3
 8001df4:	d21b      	bcs.n	8001e2e <Hw_StartUp_Init+0x4a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 8001df6:	1cda      	adds	r2, r3, #3
 8001df8:	1d0c      	adds	r4, r1, #4
 8001dfa:	1b15      	subs	r5, r2, r4
 8001dfc:	4828      	ldr	r0, [pc, #160]	; (8001ea0 <zero_loop+0x6a>)
 8001dfe:	f025 0203 	bic.w	r2, r5, #3
 8001e02:	1d16      	adds	r6, r2, #4
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 8001e04:	6805      	ldr	r5, [r0, #0]
 8001e06:	2304      	movs	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001e08:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8001e0a:	600d      	str	r5, [r1, #0]
 8001e0c:	f3c2 0280 	ubfx	r2, r2, #2, #1
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001e10:	d00d      	beq.n	8001e2e <Hw_StartUp_Init+0x4a>
 8001e12:	b122      	cbz	r2, 8001e1e <Hw_StartUp_Init+0x3a>
	{
		*(pulDest++) = *(pulSrc++);
 8001e14:	6842      	ldr	r2, [r0, #4]
 8001e16:	2308      	movs	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001e18:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8001e1a:	6022      	str	r2, [r4, #0]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001e1c:	d007      	beq.n	8001e2e <Hw_StartUp_Init+0x4a>
	{
		*(pulDest++) = *(pulSrc++);
 8001e1e:	581d      	ldr	r5, [r3, r0]
 8001e20:	1d1a      	adds	r2, r3, #4
 8001e22:	505d      	str	r5, [r3, r1]
 8001e24:	5884      	ldr	r4, [r0, r2]
 8001e26:	3308      	adds	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001e28:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8001e2a:	508c      	str	r4, [r1, r2]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001e2c:	d1f7      	bne.n	8001e1e <Hw_StartUp_Init+0x3a>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 8001e2e:	481e      	ldr	r0, [pc, #120]	; (8001ea8 <zero_loop+0x72>)
 8001e30:	491e      	ldr	r1, [pc, #120]	; (8001eac <zero_loop+0x76>)
 8001e32:	f04f 0200 	mov.w	r2, #0

08001e36 <zero_loop>:
 8001e36:	4288      	cmp	r0, r1
 8001e38:	bfb8      	it	lt
 8001e3a:	f840 2b04 	strlt.w	r2, [r0], #4
 8001e3e:	f6ff affa 	blt.w	8001e36 <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8001e42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e4a:	6811      	ldr	r1, [r2, #0]
 8001e4c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001e50:	f441 3080 	orr.w	r0, r1, #65536	; 0x10000
 8001e54:	6010      	str	r0, [r2, #0]
 8001e56:	e004      	b.n	8001e62 <zero_loop+0x2c>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8001e58:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8001e5a:	0381      	lsls	r1, r0, #14
 8001e5c:	d405      	bmi.n	8001e6a <zero_loop+0x34>
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	d003      	beq.n	8001e6a <zero_loop+0x34>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8001e62:	6811      	ldr	r1, [r2, #0]
 8001e64:	3b01      	subs	r3, #1
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8001e66:	0388      	lsls	r0, r1, #14
 8001e68:	d5f6      	bpl.n	8001e58 <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8001e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e6e:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001e72:	680a      	ldr	r2, [r1, #0]
 8001e74:	f042 0010 	orr.w	r0, r2, #16
 8001e78:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 8001e7a:	680b      	ldr	r3, [r1, #0]
 8001e7c:	f023 0203 	bic.w	r2, r3, #3
 8001e80:	600a      	str	r2, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 8001e82:	6808      	ldr	r0, [r1, #0]
 8001e84:	f040 0302 	orr.w	r3, r0, #2
 8001e88:	600b      	str	r3, [r1, #0]


    main();
 8001e8a:	4906      	ldr	r1, [pc, #24]	; (8001ea4 <zero_loop+0x6e>)
 8001e8c:	4788      	blx	r1

}
 8001e8e:	e8bd 4079 	ldmia.w	sp!, {r0, r3, r4, r5, r6, lr}
 8001e92:	4685      	mov	sp, r0
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	2000030c 	.word	0x2000030c
 8001ea0:	08006230 	.word	0x08006230
 8001ea4:	080009a9 	.word	0x080009a9
 8001ea8:	20000400 	.word	0x20000400
 8001eac:	20001640 	.word	0x20001640

08001eb0 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 8001eb2:	f242 1331 	movw	r3, #8497	; 0x2131
 8001eb6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001eba:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 8001ebc:	f242 306d 	movw	r0, #9069	; 0x236d
 8001ec0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001ec4:	4780      	blx	r0
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8001ec6:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8001eca:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8001ece:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8001ed2:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8001ed6:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8001eda:	f241 0104 	movw	r1, #4100	; 0x1004
 8001ede:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8001ee2:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 8001ee6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8001eea:	f2c3 3044 	movt	r0, #13124	; 0x3344
 8001eee:	f2c4 0101 	movt	r1, #16385	; 0x4001
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8001ef2:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8001ef6:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8001efa:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8001efe:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 8001f02:	f243 0389 	movw	r3, #12425	; 0x3089
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8001f06:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 8001f0a:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8001f0e:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8001f10:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8001f12:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8001f14:	6008      	str	r0, [r1, #0]
	
	Hw_DMA_Init();
 8001f16:	4798      	blx	r3
	Hw_Uart_Init();
 8001f18:	f242 0161 	movw	r1, #8289	; 0x2061
 8001f1c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001f20:	4788      	blx	r1
	Hw_Led_Init();
 8001f22:	f242 10c5 	movw	r0, #8645	; 0x21c5
 8001f26:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001f2a:	4780      	blx	r0
	Hw_Timer_Init();
 8001f2c:	f242 32bd 	movw	r2, #9149	; 0x23bd
 8001f30:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f34:	4790      	blx	r2
	Hw_Si47xx_Init();
 8001f36:	f642 0319 	movw	r3, #10265	; 0x2819
 8001f3a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001f3e:	4798      	blx	r3
	Hw_N5110G_Init();
 8001f40:	f642 2141 	movw	r1, #10817	; 0x2a41
 8001f44:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001f48:	4788      	blx	r1
	Hw_I2C_Init();
 8001f4a:	f242 700d 	movw	r0, #9997	; 0x270d
 8001f4e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001f52:	4780      	blx	r0
	
	Hw_VCom_Init();
 8001f54:	f242 62e1 	movw	r2, #9953	; 0x26e1
 8001f58:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f5c:	4790      	blx	r2

	Hw_IMU_Init();
 8001f5e:	f643 23a5 	movw	r3, #15013	; 0x3aa5
 8001f62:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001f66:	4798      	blx	r3
 8001f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f6a:	bf00      	nop

08001f6c <Hw_Wait>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
 8001f6c:	b082      	sub	sp, #8
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8001f6e:	2300      	movs	r3, #0
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	9901      	ldr	r1, [sp, #4]
 8001f74:	4288      	cmp	r0, r1
 8001f76:	d905      	bls.n	8001f84 <Hw_Wait+0x18>
 8001f78:	9a01      	ldr	r2, [sp, #4]
 8001f7a:	1c53      	adds	r3, r2, #1
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	9901      	ldr	r1, [sp, #4]
 8001f80:	4281      	cmp	r1, r0
 8001f82:	d3f9      	bcc.n	8001f78 <Hw_Wait+0xc>
}
 8001f84:	b002      	add	sp, #8
 8001f86:	4770      	bx	lr

08001f88 <Hw_Wait_ms>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 8001f88:	f241 7370 	movw	r3, #6000	; 0x1770
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
 8001f8c:	b082      	sub	sp, #8
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8001f8e:	2100      	movs	r1, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 8001f90:	fb03 f000 	mul.w	r0, r3, r0
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8001f94:	9101      	str	r1, [sp, #4]
 8001f96:	9a01      	ldr	r2, [sp, #4]
 8001f98:	4290      	cmp	r0, r2
 8001f9a:	d905      	bls.n	8001fa8 <Hw_Wait_ms+0x20>
 8001f9c:	9b01      	ldr	r3, [sp, #4]
 8001f9e:	1c59      	adds	r1, r3, #1
 8001fa0:	9101      	str	r1, [sp, #4]
 8001fa2:	9a01      	ldr	r2, [sp, #4]
 8001fa4:	4290      	cmp	r0, r2
 8001fa6:	d8f9      	bhi.n	8001f9c <Hw_Wait_ms+0x14>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
    Hw_Wait_Usec( msec*1000 );
}
 8001fa8:	b002      	add	sp, #8
 8001faa:	4770      	bx	lr

08001fac <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8001fac:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8001fae:	f643 0304 	movw	r3, #14340	; 0x3804
 8001fb2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001fb6:	6818      	ldr	r0, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8001fb8:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8001fba:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 8001fbc:	f242 227d 	movw	r2, #8829	; 0x227d
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8001fc0:	f801 0d01 	strb.w	r0, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 8001fc4:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001fc8:	2000      	movs	r0, #0
 8001fca:	4790      	blx	r2
}
 8001fcc:	b003      	add	sp, #12
 8001fce:	bd00      	pop	{pc}

08001fd0 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8001fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8001fd4:	f241 0618 	movw	r6, #4120	; 0x1018
 8001fd8:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8001fdc:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8001fde:	f240 43c4 	movw	r3, #1220	; 0x4c4
 8001fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8001fe6:	f643 040c 	movw	r4, #14348	; 0x380c
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8001fea:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 8001fee:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8001ff2:	f643 0708 	movw	r7, #14344	; 0x3808
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8001ff6:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 8001ff8:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8001ffa:	f2c4 0401 	movt	r4, #16385	; 0x4001
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8001ffe:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8002000:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002004:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 8002008:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800200c:	200c      	movs	r0, #12
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800200e:	f240 2171 	movw	r1, #625	; 0x271
 8002012:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8002016:	f24e 1504 	movw	r5, #57604	; 0xe104
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800201a:	f8c6 8000 	str.w	r8, [r6]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800201e:	f2ce 0500 	movt	r5, #57344	; 0xe000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8002022:	6020      	str	r0, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002024:	f8cc 2000 	str.w	r2, [ip]
	REG_USART1_CR3  = 0;
 8002028:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800202c:	6039      	str	r1, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800202e:	682b      	ldr	r3, [r5, #0]
 8002030:	f043 0020 	orr.w	r0, r3, #32
 8002034:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8002036:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8002038:	f242 3381 	movw	r3, #9089	; 0x2381
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800203c:	f041 0020 	orr.w	r0, r1, #32
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8002040:	f641 71ad 	movw	r1, #8109	; 0x1fad
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8002044:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8002046:	f6c0 0100 	movt	r1, #2048	; 0x800
 800204a:	2025      	movs	r0, #37	; 0x25
 800204c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002050:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8002052:	6822      	ldr	r2, [r4, #0]
 8002054:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 8002058:	6021      	str	r1, [r4, #0]
 800205a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800205e:	bf00      	nop

08002060 <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 8002060:	f242 231d 	movw	r3, #8733	; 0x221d
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8002064:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 8002066:	f6c0 0300 	movt	r3, #2048	; 0x800
 800206a:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800206c:	f240 43c4 	movw	r3, #1220	; 0x4c4
 8002070:	2200      	movs	r2, #0
 8002072:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8002076:	f641 74d1 	movw	r4, #8145	; 0x1fd1
 800207a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800207e:	4611      	mov	r1, r2
 8002080:	f6c0 0400 	movt	r4, #2048	; 0x800
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002084:	605a      	str	r2, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8002086:	609a      	str	r2, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002088:	611a      	str	r2, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800208a:	615a      	str	r2, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800208c:	61da      	str	r2, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800208e:	621a      	str	r2, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002090:	629a      	str	r2, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002094:	635a      	str	r2, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8002096:	639a      	str	r2, [r3, #56]	; 0x38
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8002098:	47a0      	blx	r4
 800209a:	bd10      	pop	{r4, pc}

0800209c <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 800209c:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 800209e:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 80020a0:	b083      	sub	sp, #12
 80020a2:	4d08      	ldr	r5, [pc, #32]	; (80020c4 <Hw_Uart_Getch+0x28>)
 80020a4:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 80020a6:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 80020aa:	4620      	mov	r0, r4
 80020ac:	47a8      	blx	r5
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d0fb      	beq.n	80020aa <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 80020b2:	4620      	mov	r0, r4
 80020b4:	f10d 0107 	add.w	r1, sp, #7
 80020b8:	4a03      	ldr	r2, [pc, #12]	; (80020c8 <Hw_Uart_Getch+0x2c>)
 80020ba:	4790      	blx	r2

	return Uart_GetData;
}
 80020bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80020c0:	b003      	add	sp, #12
 80020c2:	bd30      	pop	{r4, r5, pc}
 80020c4:	0800224d 	.word	0x0800224d
 80020c8:	080022f5 	.word	0x080022f5

080020cc <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 80020cc:	280a      	cmp	r0, #10
 80020ce:	d00d      	beq.n	80020ec <print_byte+0x20>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80020d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80020d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80020d8:	6813      	ldr	r3, [r2, #0]
 80020da:	0619      	lsls	r1, r3, #24
 80020dc:	d5fc      	bpl.n	80020d8 <print_byte+0xc>
    
    REG_USART1_DR = Uart_PutData;
 80020de:	f643 0104 	movw	r1, #14340	; 0x3804
 80020e2:	b2c0      	uxtb	r0, r0
 80020e4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80020e8:	6008      	str	r0, [r1, #0]
 80020ea:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80020ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80020f0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80020f4:	6813      	ldr	r3, [r2, #0]
 80020f6:	061b      	lsls	r3, r3, #24
 80020f8:	d5fc      	bpl.n	80020f4 <print_byte+0x28>
    
    REG_USART1_DR = Uart_PutData;
 80020fa:	f643 0104 	movw	r1, #14340	; 0x3804
 80020fe:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8002102:	220d      	movs	r2, #13
 8002104:	600a      	str	r2, [r1, #0]
 8002106:	e7e3      	b.n	80020d0 <print_byte+0x4>

08002108 <get_byte>:
#endif    
}


char get_byte(void)
{
 8002108:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 800210a:	f242 039d 	movw	r3, #8349	; 0x209d
 800210e:	2000      	movs	r0, #0
 8002110:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002114:	4798      	blx	r3
#endif
	
	return Ch;
}
 8002116:	bd08      	pop	{r3, pc}

08002118 <get_byte_check>:


char get_byte_check(void)
{
 8002118:	b508      	push	{r3, lr}
	char Ch = FALSE;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 ) Ch = TRUE;	
 800211a:	f242 234d 	movw	r3, #8781	; 0x224d
 800211e:	2000      	movs	r0, #0
 8002120:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002124:	4798      	blx	r3
#endif
	
	return Ch;
}
 8002126:	3000      	adds	r0, #0
 8002128:	bf18      	it	ne
 800212a:	2001      	movne	r0, #1
 800212c:	bd08      	pop	{r3, pc}
 800212e:	bf00      	nop

08002130 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8002130:	f241 0304 	movw	r3, #4100	; 0x1004
 8002134:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002138:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800213a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 800213e:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 8002142:	f020 02f0 	bic.w	r2, r0, #240	; 0xf0
 8002146:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8002148:	6818      	ldr	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800214a:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 800214e:	f440 12e8 	orr.w	r2, r0, #1900544	; 0x1d0000
 8002152:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8002154:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8002156:	4608      	mov	r0, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8002158:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800215c:	600a      	str	r2, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800215e:	6801      	ldr	r1, [r0, #0]
 8002160:	018b      	lsls	r3, r1, #6
 8002162:	d5fc      	bpl.n	800215e <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8002164:	f241 0304 	movw	r3, #4100	; 0x1004
 8002168:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800216c:	6818      	ldr	r0, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 800216e:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8002170:	f020 0103 	bic.w	r1, r0, #3
 8002174:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	f040 0102 	orr.w	r1, r0, #2
 800217c:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 8002184:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 800218c:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 8002194:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 800219c:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	6018      	str	r0, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 80021a2:	6813      	ldr	r3, [r2, #0]
 80021a4:	f003 010c 	and.w	r1, r3, #12
 80021a8:	2908      	cmp	r1, #8
 80021aa:	d1fa      	bne.n	80021a2 <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 80021ac:	f241 0018 	movw	r0, #4120	; 0x1018
 80021b0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80021b4:	6802      	ldr	r2, [r0, #0]
 80021b6:	f442 4380 	orr.w	r3, r2, #16384	; 0x4000
 80021ba:	f043 011d 	orr.w	r1, r3, #29
 80021be:	6001      	str	r1, [r0, #0]
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop

080021c4 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80021c4:	2204      	movs	r2, #4
 80021c6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80021ca:	6811      	ldr	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80021cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80021d0:	f021 60e0 	bic.w	r0, r1, #117440512	; 0x7000000
 80021d4:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 80021d6:	6811      	ldr	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80021d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
 80021dc:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 80021e0:	6010      	str	r0, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80021e2:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80021e4:	f640 420c 	movw	r2, #3084	; 0xc0c
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80021e8:	f421 4070 	bic.w	r0, r1, #61440	; 0xf000
 80021ec:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 80021ee:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80021f0:	f2c4 0201 	movt	r2, #16385	; 0x4001
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 80021f4:	f441 5040 	orr.w	r0, r1, #12288	; 0x3000
 80021f8:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 80021fa:	6819      	ldr	r1, [r3, #0]
 80021fc:	6019      	str	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80021fe:	6813      	ldr	r3, [r2, #0]
 8002200:	f043 0008 	orr.w	r0, r3, #8
 8002204:	6010      	str	r0, [r2, #0]
 8002206:	4770      	bx	lr

08002208 <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 8002208:	b938      	cbnz	r0, 800221a <Hw_Led_Toggle+0x12>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 800220a:	f640 430c 	movw	r3, #3084	; 0xc0c
 800220e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	f082 0008 	eor.w	r0, r2, #8
 8002218:	6018      	str	r0, [r3, #0]
 800221a:	4770      	bx	lr

0800221c <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 800221c:	f240 51f8 	movw	r1, #1528	; 0x5f8
 8002220:	f240 6208 	movw	r2, #1544	; 0x608
 8002224:	2300      	movs	r3, #0
 8002226:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800222a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800222e:	800b      	strh	r3, [r1, #0]
 8002230:	8013      	strh	r3, [r2, #0]
 8002232:	804b      	strh	r3, [r1, #2]
 8002234:	8053      	strh	r3, [r2, #2]
 8002236:	808b      	strh	r3, [r1, #4]
 8002238:	8093      	strh	r3, [r2, #4]
 800223a:	80cb      	strh	r3, [r1, #6]
 800223c:	80d3      	strh	r3, [r2, #6]
 800223e:	810b      	strh	r3, [r1, #8]
 8002240:	8113      	strh	r3, [r2, #8]
 8002242:	814b      	strh	r3, [r1, #10]
 8002244:	8153      	strh	r3, [r2, #10]
 8002246:	818b      	strh	r3, [r1, #12]
 8002248:	8193      	strh	r3, [r2, #12]
 800224a:	4770      	bx	lr

0800224c <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HW_UART_Q_VAILD+0x28>)
 800224e:	490a      	ldr	r1, [pc, #40]	; (8002278 <HW_UART_Q_VAILD+0x2c>)
 8002250:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8002254:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
 8002258:	201f      	movs	r0, #31
 800225a:	1ad2      	subs	r2, r2, r3
 800225c:	3220      	adds	r2, #32
 800225e:	f2c8 0000 	movt	r0, #32768	; 0x8000
 8002262:	4010      	ands	r0, r2
 8002264:	2800      	cmp	r0, #0
 8002266:	db00      	blt.n	800226a <HW_UART_Q_VAILD+0x1e>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8002268:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800226a:	3801      	subs	r0, #1
 800226c:	f060 011f 	orn	r1, r0, #31
 8002270:	1c48      	adds	r0, r1, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8002272:	4770      	bx	lr
 8002274:	20000608 	.word	0x20000608
 8002278:	200005f8 	.word	0x200005f8

0800227c <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800227c:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <Hw_Uart_Q_Push+0x6c>)
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <Hw_Uart_Q_Push+0x70>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8002280:	b4f0      	push	{r4, r5, r6, r7}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002282:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 8002286:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 800228a:	b22c      	sxth	r4, r5
 800228c:	231f      	movs	r3, #31
 800228e:	1ba6      	subs	r6, r4, r6
 8002290:	3620      	adds	r6, #32
 8002292:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8002296:	4033      	ands	r3, r6
 8002298:	2b00      	cmp	r3, #0
 800229a:	db18      	blt.n	80022ce <Hw_Uart_Q_Push+0x52>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 800229c:	2b1f      	cmp	r3, #31
 800229e:	d01c      	beq.n	80022da <Hw_Uart_Q_Push+0x5e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80022a0:	3501      	adds	r5, #1
 80022a2:	b2ad      	uxth	r5, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80022a4:	231f      	movs	r3, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80022a6:	780e      	ldrb	r6, [r1, #0]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80022a8:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80022ac:	b229      	sxth	r1, r5
 80022ae:	400b      	ands	r3, r1
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80022b0:	eb00 1740 	add.w	r7, r0, r0, lsl #5
 80022b4:	490e      	ldr	r1, [pc, #56]	; (80022f0 <Hw_Uart_Q_Push+0x74>)
 80022b6:	193c      	adds	r4, r7, r4
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80022b8:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80022ba:	550e      	strb	r6, [r1, r4]
 80022bc:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80022c0:	db0d      	blt.n	80022de <Hw_Uart_Q_Push+0x62>
 80022c2:	4909      	ldr	r1, [pc, #36]	; (80022e8 <Hw_Uart_Q_Push+0x6c>)
 80022c4:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

	return TRUE;
 80022c8:	2001      	movs	r0, #1
}
 80022ca:	bcf0      	pop	{r4, r5, r6, r7}
 80022cc:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f063 031f 	orn	r3, r3, #31
 80022d4:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 80022d6:	2b1f      	cmp	r3, #31
 80022d8:	d1e2      	bne.n	80022a0 <Hw_Uart_Q_Push+0x24>
 80022da:	2000      	movs	r0, #0
 80022dc:	e7f5      	b.n	80022ca <Hw_Uart_Q_Push+0x4e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80022de:	1e5a      	subs	r2, r3, #1
 80022e0:	f062 031f 	orn	r3, r2, #31
 80022e4:	3301      	adds	r3, #1
 80022e6:	e7ec      	b.n	80022c2 <Hw_Uart_Q_Push+0x46>
 80022e8:	20000608 	.word	0x20000608
 80022ec:	200005f8 	.word	0x200005f8
 80022f0:	20000500 	.word	0x20000500

080022f4 <Hw_Uart_Q_Pop>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80022f4:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <Hw_Uart_Q_Pop+0x6c>)
 80022f6:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <Hw_Uart_Q_Pop+0x70>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 80022f8:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80022fa:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 80022fe:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 8002302:	b22c      	sxth	r4, r5
 8002304:	231f      	movs	r3, #31
 8002306:	1b36      	subs	r6, r6, r4
 8002308:	3620      	adds	r6, #32
 800230a:	f2c8 0300 	movt	r3, #32768	; 0x8000
 800230e:	4033      	ands	r3, r6
 8002310:	2b00      	cmp	r3, #0
 8002312:	db17      	blt.n	8002344 <Hw_Uart_Q_Pop+0x50>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8002314:	b1e3      	cbz	r3, 8002350 <Hw_Uart_Q_Pop+0x5c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8002316:	eb00 1640 	add.w	r6, r0, r0, lsl #5
 800231a:	3501      	adds	r5, #1
 800231c:	1934      	adds	r4, r6, r4
 800231e:	4e12      	ldr	r6, [pc, #72]	; (8002368 <Hw_Uart_Q_Pop+0x74>)
 8002320:	b2ad      	uxth	r5, r5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8002322:	231f      	movs	r3, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8002324:	5d34      	ldrb	r4, [r6, r4]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8002326:	f2c8 0300 	movt	r3, #32768	; 0x8000
 800232a:	b22e      	sxth	r6, r5
 800232c:	4033      	ands	r3, r6
 800232e:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8002330:	700c      	strb	r4, [r1, #0]
 8002332:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8002336:	db0d      	blt.n	8002354 <Hw_Uart_Q_Pop+0x60>
 8002338:	4909      	ldr	r1, [pc, #36]	; (8002360 <Hw_Uart_Q_Pop+0x6c>)
 800233a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

    return TRUE;
 800233e:	2001      	movs	r0, #1
}
 8002340:	bc70      	pop	{r4, r5, r6}
 8002342:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002344:	3b01      	subs	r3, #1
 8002346:	f063 031f 	orn	r3, r3, #31
 800234a:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1e2      	bne.n	8002316 <Hw_Uart_Q_Pop+0x22>
 8002350:	4618      	mov	r0, r3
 8002352:	e7f5      	b.n	8002340 <Hw_Uart_Q_Pop+0x4c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8002354:	1e59      	subs	r1, r3, #1
 8002356:	f061 021f 	orn	r2, r1, #31
 800235a:	1c53      	adds	r3, r2, #1
 800235c:	e7ec      	b.n	8002338 <Hw_Uart_Q_Pop+0x44>
 800235e:	bf00      	nop
 8002360:	200005f8 	.word	0x200005f8
 8002364:	20000608 	.word	0x20000608
 8002368:	20000500 	.word	0x20000500

0800236c <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 800236c:	f640 0300 	movw	r3, #2048	; 0x800
 8002370:	f64e 5208 	movw	r2, #60680	; 0xed08
 8002374:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002378:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4770      	bx	lr

08002380 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8002380:	f640 0300 	movw	r3, #2048	; 0x800
 8002384:	3010      	adds	r0, #16
 8002386:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800238a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 800238e:	4770      	bx	lr

08002390 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8002390:	f640 0300 	movw	r3, #2048	; 0x800
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8002394:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8002396:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800239a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 800239e:	4770      	bx	lr

080023a0 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 80023a0:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 80023a2:	f242 6179 	movw	r1, #9849	; 0x2679
 80023a6:	f242 3391 	movw	r3, #9105	; 0x2391
 80023aa:	203c      	movs	r0, #60	; 0x3c
 80023ac:	f6c0 0100 	movt	r1, #2048	; 0x800
 80023b0:	2200      	movs	r2, #0
 80023b2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80023b6:	4798      	blx	r3
 80023b8:	bd08      	pop	{r3, pc}
 80023ba:	bf00      	nop

080023bc <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 80023bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 80023c0:	4d40      	ldr	r5, [pc, #256]	; (80024c4 <Hw_Timer_Init+0x108>)
 80023c2:	782b      	ldrb	r3, [r5, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d07b      	beq.n	80024c0 <Hw_Timer_Init+0x104>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80023c8:	483f      	ldr	r0, [pc, #252]	; (80024c8 <Hw_Timer_Init+0x10c>)
 80023ca:	2400      	movs	r4, #0
 80023cc:	7004      	strb	r4, [r0, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80023ce:	8044      	strh	r4, [r0, #2]
		Timer_Tbl[i].Timer_Init = 0;
 80023d0:	8084      	strh	r4, [r0, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 80023d2:	6084      	str	r4, [r0, #8]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80023d4:	7404      	strb	r4, [r0, #16]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80023d6:	8244      	strh	r4, [r0, #18]
		Timer_Tbl[i].Timer_Init = 0;
 80023d8:	8284      	strh	r4, [r0, #20]
		Timer_Tbl[i].TmrFnct    = NULL;
 80023da:	6184      	str	r4, [r0, #24]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80023dc:	f880 4020 	strb.w	r4, [r0, #32]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80023e0:	8444      	strh	r4, [r0, #34]	; 0x22
		Timer_Tbl[i].Timer_Init = 0;
 80023e2:	8484      	strh	r4, [r0, #36]	; 0x24
		Timer_Tbl[i].TmrFnct    = NULL;
 80023e4:	6284      	str	r4, [r0, #40]	; 0x28
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80023e6:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
		Timer_Tbl[i].Timer_Ctn  = 0;
 80023ea:	8644      	strh	r4, [r0, #50]	; 0x32
		Timer_Tbl[i].Timer_Init = 0;
 80023ec:	8684      	strh	r4, [r0, #52]	; 0x34
		Timer_Tbl[i].TmrFnct    = NULL;
 80023ee:	6384      	str	r4, [r0, #56]	; 0x38
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80023f0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
		Timer_Tbl[i].Timer_Ctn  = 0;
 80023f4:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
		Timer_Tbl[i].Timer_Init = 0;
 80023f8:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
		Timer_Tbl[i].TmrFnct    = NULL;
 80023fc:	6484      	str	r4, [r0, #72]	; 0x48
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80023fe:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002402:	f8a0 4052 	strh.w	r4, [r0, #82]	; 0x52
		Timer_Tbl[i].Timer_Init = 0;
 8002406:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
		Timer_Tbl[i].TmrFnct    = NULL;
 800240a:	6584      	str	r4, [r0, #88]	; 0x58
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800240c:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002410:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
		Timer_Tbl[i].Timer_Init = 0;
 8002414:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		Timer_Tbl[i].TmrFnct    = NULL;
 8002418:	6684      	str	r4, [r0, #104]	; 0x68
	}	                   
	
	
	Hw_Timer_SetupISR();
 800241a:	492c      	ldr	r1, [pc, #176]	; (80024cc <Hw_Timer_Init+0x110>)
 800241c:	4788      	blx	r1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800241e:	f24e 0614 	movw	r6, #57364	; 0xe014
 8002422:	f641 173f 	movw	r7, #6463	; 0x193f
	
	REG_STK_VAL  = 0;	
 8002426:	f24e 0018 	movw	r0, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800242a:	f2ce 0600 	movt	r6, #57344	; 0xe000
 800242e:	f2c0 0701 	movt	r7, #1
	
	REG_STK_VAL  = 0;	
 8002432:	f2ce 0000 	movt	r0, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8002436:	f24e 0310 	movw	r3, #57360	; 0xe010
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800243a:	6037      	str	r7, [r6, #0]
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800243c:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8002440:	6004      	str	r4, [r0, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8002442:	6819      	ldr	r1, [r3, #0]
void Hw_Timer_MeasureSetup( void )
{
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz
 8002444:	f241 0218 	movw	r2, #4120	; 0x1018

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8002448:	f041 0604 	orr.w	r6, r1, #4
 800244c:	601e      	str	r6, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 800244e:	681f      	ldr	r7, [r3, #0]
void Hw_Timer_MeasureSetup( void )
{
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz
 8002450:	f2c4 0202 	movt	r2, #16386	; 0x4002
	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8002454:	f047 0002 	orr.w	r0, r7, #2
 8002458:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 800245a:	6819      	ldr	r1, [r3, #0]
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz
 800245c:	f642 4c28 	movw	ip, #11304	; 0x2c28
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8002460:	f041 0601 	orr.w	r6, r1, #1
 8002464:	601e      	str	r6, [r3, #0]
void Hw_Timer_MeasureSetup( void )
{
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz
 8002466:	f8d2 8000 	ldr.w	r8, [r2]

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
 800246a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
void Hw_Timer_MeasureSetup( void )
{
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz
 800246e:	f448 6800 	orr.w	r8, r8, #2048	; 0x800
 8002472:	f8c2 8000 	str.w	r8, [r2]

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz
 8002476:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800247a:	2247      	movs	r2, #71	; 0x47
 800247c:	f8cc 2000 	str.w	r2, [ip]


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
 8002480:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002484:	2280      	movs	r2, #128	; 0x80
	REG_TIM1_CR2   = 0;					
 8002486:	f642 4704 	movw	r7, #11268	; 0x2c04
	REG_TIM1_CCMR2 = 0; 
 800248a:	f642 461c 	movw	r6, #11292	; 0x2c1c
	
	REG_TIM1_ARR   = 0xFFFF; 	
 800248e:	f642 402c 	movw	r0, #11308	; 0x2c2c

	REG_TIM1_CCER  = 0;	
 8002492:	f642 4120 	movw	r1, #11296	; 0x2c20
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
 8002496:	601a      	str	r2, [r3, #0]
	REG_TIM1_CR2   = 0;					
	REG_TIM1_CCMR2 = 0; 
	
	REG_TIM1_ARR   = 0xFFFF; 	
 8002498:	f2c4 0001 	movt	r0, #16385	; 0x4001

	REG_TIM1_CCER  = 0;	
 800249c:	f2c4 0101 	movt	r1, #16385	; 0x4001

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
	REG_TIM1_CR2   = 0;					
 80024a0:	f2c4 0701 	movt	r7, #16385	; 0x4001
	REG_TIM1_CCMR2 = 0; 
 80024a4:	f2c4 0601 	movt	r6, #16385	; 0x4001
	
	REG_TIM1_ARR   = 0xFFFF; 	
 80024a8:	f64f 72ff 	movw	r2, #65535	; 0xffff

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
	REG_TIM1_CR2   = 0;					
 80024ac:	603c      	str	r4, [r7, #0]
	REG_TIM1_CCMR2 = 0; 
 80024ae:	6034      	str	r4, [r6, #0]
	
	REG_TIM1_ARR   = 0xFFFF; 	
 80024b0:	6002      	str	r2, [r0, #0]

	REG_TIM1_CCER  = 0;	
 80024b2:	600c      	str	r4, [r1, #0]


	SET_BIT( REG_TIM1_CR1, 0 );			// Counter Enable 
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	f040 0101 	orr.w	r1, r0, #1
 80024ba:	6019      	str	r1, [r3, #0]
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	
	Hw_Timer_MeasureSetup();	

	Excute = 1;
 80024bc:	2301      	movs	r3, #1
 80024be:	702b      	strb	r3, [r5, #0]
 80024c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024c4:	20000478 	.word	0x20000478
 80024c8:	20000408 	.word	0x20000408
 80024cc:	080023a1 	.word	0x080023a1

080024d0 <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 80024d0:	4b66      	ldr	r3, [pc, #408]	; (800266c <Hw_Timer_Tick+0x19c>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 80024d2:	4a67      	ldr	r2, [pc, #412]	; (8002670 <Hw_Timer_Tick+0x1a0>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 80024d4:	6819      	ldr	r1, [r3, #0]
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 80024d6:	b510      	push	{r4, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 80024d8:	1c48      	adds	r0, r1, #1
 80024da:	6018      	str	r0, [r3, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 80024dc:	8814      	ldrh	r4, [r2, #0]
 80024de:	b2a3      	uxth	r3, r4
 80024e0:	b11b      	cbz	r3, 80024ea <Hw_Timer_Tick+0x1a>
 80024e2:	8811      	ldrh	r1, [r2, #0]
 80024e4:	1e48      	subs	r0, r1, #1
 80024e6:	b284      	uxth	r4, r0
 80024e8:	8014      	strh	r4, [r2, #0]
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80024ea:	4c62      	ldr	r4, [pc, #392]	; (8002674 <Hw_Timer_Tick+0x1a4>)
 80024ec:	7822      	ldrb	r2, [r4, #0]
 80024ee:	2a01      	cmp	r2, #1
 80024f0:	d01d      	beq.n	800252e <Hw_Timer_Tick+0x5e>
 80024f2:	7c20      	ldrb	r0, [r4, #16]
 80024f4:	4a5f      	ldr	r2, [pc, #380]	; (8002674 <Hw_Timer_Tick+0x1a4>)
 80024f6:	2801      	cmp	r0, #1
 80024f8:	d02b      	beq.n	8002552 <Hw_Timer_Tick+0x82>
 80024fa:	f894 0020 	ldrb.w	r0, [r4, #32]
 80024fe:	4a5d      	ldr	r2, [pc, #372]	; (8002674 <Hw_Timer_Tick+0x1a4>)
 8002500:	2801      	cmp	r0, #1
 8002502:	d038      	beq.n	8002576 <Hw_Timer_Tick+0xa6>
 8002504:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002508:	4a5a      	ldr	r2, [pc, #360]	; (8002674 <Hw_Timer_Tick+0x1a4>)
 800250a:	2801      	cmp	r0, #1
 800250c:	d046      	beq.n	800259c <Hw_Timer_Tick+0xcc>
 800250e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8002512:	4a58      	ldr	r2, [pc, #352]	; (8002674 <Hw_Timer_Tick+0x1a4>)
 8002514:	2801      	cmp	r0, #1
 8002516:	d054      	beq.n	80025c2 <Hw_Timer_Tick+0xf2>
 8002518:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 800251c:	4a55      	ldr	r2, [pc, #340]	; (8002674 <Hw_Timer_Tick+0x1a4>)
 800251e:	2801      	cmp	r0, #1
 8002520:	d066      	beq.n	80025f0 <Hw_Timer_Tick+0x120>
 8002522:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8002526:	4a53      	ldr	r2, [pc, #332]	; (8002674 <Hw_Timer_Tick+0x1a4>)
 8002528:	2801      	cmp	r0, #1
 800252a:	d078      	beq.n	800261e <Hw_Timer_Tick+0x14e>
 800252c:	bd10      	pop	{r4, pc}
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800252e:	8863      	ldrh	r3, [r4, #2]
 8002530:	1e59      	subs	r1, r3, #1
 8002532:	b288      	uxth	r0, r1
 8002534:	8060      	strh	r0, [r4, #2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002536:	2800      	cmp	r0, #0
 8002538:	d1db      	bne.n	80024f2 <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800253a:	7862      	ldrb	r2, [r4, #1]
 800253c:	2a01      	cmp	r2, #1
 800253e:	f000 8086 	beq.w	800264e <Hw_Timer_Tick+0x17e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002542:	88a1      	ldrh	r1, [r4, #4]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002544:	68a3      	ldr	r3, [r4, #8]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002546:	8061      	strh	r1, [r4, #2]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002548:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 800254a:	7c20      	ldrb	r0, [r4, #16]
 800254c:	4a49      	ldr	r2, [pc, #292]	; (8002674 <Hw_Timer_Tick+0x1a4>)
 800254e:	2801      	cmp	r0, #1
 8002550:	d1d3      	bne.n	80024fa <Hw_Timer_Tick+0x2a>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002552:	8a51      	ldrh	r1, [r2, #18]
 8002554:	1e4b      	subs	r3, r1, #1
 8002556:	b298      	uxth	r0, r3
 8002558:	8250      	strh	r0, [r2, #18]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800255a:	2800      	cmp	r0, #0
 800255c:	d1cd      	bne.n	80024fa <Hw_Timer_Tick+0x2a>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800255e:	7c51      	ldrb	r1, [r2, #17]
 8002560:	2901      	cmp	r1, #1
 8002562:	d072      	beq.n	800264a <Hw_Timer_Tick+0x17a>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002564:	8aa2      	ldrh	r2, [r4, #20]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002566:	69a3      	ldr	r3, [r4, #24]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002568:	8262      	strh	r2, [r4, #18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800256a:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 800256c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8002570:	4a40      	ldr	r2, [pc, #256]	; (8002674 <Hw_Timer_Tick+0x1a4>)
 8002572:	2801      	cmp	r0, #1
 8002574:	d1c6      	bne.n	8002504 <Hw_Timer_Tick+0x34>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002576:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8002578:	1e4b      	subs	r3, r1, #1
 800257a:	b298      	uxth	r0, r3
 800257c:	8450      	strh	r0, [r2, #34]	; 0x22

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800257e:	2800      	cmp	r0, #0
 8002580:	d1c0      	bne.n	8002504 <Hw_Timer_Tick+0x34>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002582:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8002586:	2901      	cmp	r1, #1
 8002588:	d06c      	beq.n	8002664 <Hw_Timer_Tick+0x194>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800258a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800258c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800258e:	8462      	strh	r2, [r4, #34]	; 0x22

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002590:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002592:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002596:	4a37      	ldr	r2, [pc, #220]	; (8002674 <Hw_Timer_Tick+0x1a4>)
 8002598:	2801      	cmp	r0, #1
 800259a:	d1b8      	bne.n	800250e <Hw_Timer_Tick+0x3e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800259c:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 800259e:	1e4b      	subs	r3, r1, #1
 80025a0:	b298      	uxth	r0, r3
 80025a2:	8650      	strh	r0, [r2, #50]	; 0x32

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80025a4:	2800      	cmp	r0, #0
 80025a6:	d1b2      	bne.n	800250e <Hw_Timer_Tick+0x3e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80025a8:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 80025ac:	2901      	cmp	r1, #1
 80025ae:	d056      	beq.n	800265e <Hw_Timer_Tick+0x18e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80025b0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80025b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80025b4:	8662      	strh	r2, [r4, #50]	; 0x32

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80025b6:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80025b8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80025bc:	4a2d      	ldr	r2, [pc, #180]	; (8002674 <Hw_Timer_Tick+0x1a4>)
 80025be:	2801      	cmp	r0, #1
 80025c0:	d1aa      	bne.n	8002518 <Hw_Timer_Tick+0x48>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80025c2:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
 80025c6:	1e4b      	subs	r3, r1, #1
 80025c8:	b298      	uxth	r0, r3
 80025ca:	f8a2 0042 	strh.w	r0, [r2, #66]	; 0x42

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80025ce:	2800      	cmp	r0, #0
 80025d0:	d1a2      	bne.n	8002518 <Hw_Timer_Tick+0x48>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80025d2:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
 80025d6:	2901      	cmp	r1, #1
 80025d8:	d03e      	beq.n	8002658 <Hw_Timer_Tick+0x188>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80025da:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80025de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80025e0:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80025e4:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80025e6:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 80025ea:	4a22      	ldr	r2, [pc, #136]	; (8002674 <Hw_Timer_Tick+0x1a4>)
 80025ec:	2801      	cmp	r0, #1
 80025ee:	d198      	bne.n	8002522 <Hw_Timer_Tick+0x52>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80025f0:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
 80025f4:	1e4b      	subs	r3, r1, #1
 80025f6:	b298      	uxth	r0, r3
 80025f8:	f8a2 0052 	strh.w	r0, [r2, #82]	; 0x52

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80025fc:	2800      	cmp	r0, #0
 80025fe:	d190      	bne.n	8002522 <Hw_Timer_Tick+0x52>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002600:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
 8002604:	2901      	cmp	r1, #1
 8002606:	d024      	beq.n	8002652 <Hw_Timer_Tick+0x182>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002608:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800260c:	6da3      	ldr	r3, [r4, #88]	; 0x58
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800260e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002612:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002614:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8002618:	4a16      	ldr	r2, [pc, #88]	; (8002674 <Hw_Timer_Tick+0x1a4>)
 800261a:	2801      	cmp	r0, #1
 800261c:	d186      	bne.n	800252c <Hw_Timer_Tick+0x5c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800261e:	f8b2 1062 	ldrh.w	r1, [r2, #98]	; 0x62
 8002622:	1e4b      	subs	r3, r1, #1
 8002624:	b298      	uxth	r0, r3
 8002626:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800262a:	2800      	cmp	r0, #0
 800262c:	f47f af7e 	bne.w	800252c <Hw_Timer_Tick+0x5c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002630:	f892 1061 	ldrb.w	r1, [r2, #97]	; 0x61

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002634:	6ea3      	ldr	r3, [r4, #104]	; 0x68
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002636:	2901      	cmp	r1, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8002638:	bf08      	it	eq
 800263a:	f882 0060 	strbeq.w	r0, [r2, #96]	; 0x60

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800263e:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 8002642:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002646:	4798      	blx	r3
 8002648:	bd10      	pop	{r4, pc}

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 800264a:	7410      	strb	r0, [r2, #16]
 800264c:	e78a      	b.n	8002564 <Hw_Timer_Tick+0x94>
 800264e:	7020      	strb	r0, [r4, #0]
 8002650:	e777      	b.n	8002542 <Hw_Timer_Tick+0x72>
 8002652:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 8002656:	e7d7      	b.n	8002608 <Hw_Timer_Tick+0x138>
 8002658:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
 800265c:	e7bd      	b.n	80025da <Hw_Timer_Tick+0x10a>
 800265e:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
 8002662:	e7a5      	b.n	80025b0 <Hw_Timer_Tick+0xe0>
 8002664:	f882 0020 	strb.w	r0, [r2, #32]
 8002668:	e78f      	b.n	800258a <Hw_Timer_Tick+0xba>
 800266a:	bf00      	nop
 800266c:	2000047c 	.word	0x2000047c
 8002670:	20000480 	.word	0x20000480
 8002674:	20000408 	.word	0x20000408

08002678 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );
void Hw_Timer_MeasureSetup( void );


void Hw_Timer_ISR(void)
{
 8002678:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 800267a:	f242 43d1 	movw	r3, #9425	; 0x24d1
 800267e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002682:	4798      	blx	r3
 8002684:	bd08      	pop	{r3, pc}
 8002686:	bf00      	nop

08002688 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8002688:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 800268a:	f240 4408 	movw	r4, #1032	; 0x408
 800268e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002692:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8002696:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8002698:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 800269a:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 800269c:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 800269e:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 80026a0:	8081      	strh	r1, [r0, #4]
}
 80026a2:	bc10      	pop	{r4}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop

080026a8 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 80026a8:	2806      	cmp	r0, #6
 80026aa:	d803      	bhi.n	80026b4 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 80026ac:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <Hw_Timer_Start+0x10>)
 80026ae:	0100      	lsls	r0, r0, #4
 80026b0:	2201      	movs	r2, #1
 80026b2:	541a      	strb	r2, [r3, r0]
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000408 	.word	0x20000408

080026bc <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 80026bc:	4a03      	ldr	r2, [pc, #12]	; (80026cc <Hw_Timer_Delay_ms+0x10>)
 80026be:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 80026c0:	8813      	ldrh	r3, [r2, #0]
 80026c2:	b298      	uxth	r0, r3
 80026c4:	2800      	cmp	r0, #0
 80026c6:	d1fb      	bne.n	80026c0 <Hw_Timer_Delay_ms+0x4>
}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000480 	.word	0x20000480

080026d0 <Hw_Timer_Get_u16Count_Usec>:
     ARG
     RET
---------------------------------------------------------------------------*/
u16 Hw_Timer_Get_u16Count_Usec( void )
{
	return REG_TIM1_CNT;
 80026d0:	f642 4324 	movw	r3, #11300	; 0x2c24
 80026d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80026d8:	6818      	ldr	r0, [r3, #0]
}
 80026da:	b280      	uxth	r0, r0
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 80026e0:	b508      	push	{r3, lr}
	Set_System();
 80026e2:	f244 5379 	movw	r3, #17785	; 0x4579
 80026e6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80026ea:	4798      	blx	r3
	Set_USBClock();
 80026ec:	f244 5099 	movw	r0, #17817	; 0x4599
 80026f0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80026f4:	4780      	blx	r0
	USB_Interrupts_Config();
 80026f6:	f244 51dd 	movw	r1, #17885	; 0x45dd
 80026fa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80026fe:	4788      	blx	r1
	USB_Init();	
 8002700:	f245 12c5 	movw	r2, #20933	; 0x51c5
 8002704:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002708:	4790      	blx	r2
 800270a:	bd08      	pop	{r3, pc}

0800270c <Hw_I2C_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_Init( void )
{
 800270c:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	#if HW_I2C_USE_SW_I2C == 1
	Hw_I2C_SW_Init();	
	#else
	Hw_I2C_HW_Init();		
 800270e:	f242 7365 	movw	r3, #10085	; 0x2765
 8002712:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002716:	4798      	blx	r3
 8002718:	bd08      	pop	{r3, pc}
 800271a:	bf00      	nop

0800271c <Hw_I2C_HW_IO_Setup>:
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 800271c:	2204      	movs	r2, #4
 800271e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002722:	6811      	ldr	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8002724:	f640 4304 	movw	r3, #3076	; 0xc04
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8002728:	f041 0002 	orr.w	r0, r1, #2
 800272c:	6010      	str	r0, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 800272e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	f022 010f 	bic.w	r1, r2, #15
 8002738:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	f040 0203 	orr.w	r2, r0, #3
 8002740:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 8002742:	6819      	ldr	r1, [r3, #0]
 8002744:	f041 000c 	orr.w	r0, r1, #12
 8002748:	6018      	str	r0, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8002750:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	f040 0230 	orr.w	r2, r0, #48	; 0x30
 8002758:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 800275a:	6819      	ldr	r1, [r3, #0]
 800275c:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 8002760:	6018      	str	r0, [r3, #0]
 8002762:	4770      	bx	lr

08002764 <Hw_I2C_HW_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_HW_Init( void )
{
 8002764:	b538      	push	{r3, r4, r5, lr}
	u32 SR;


	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	
 8002766:	f242 731d 	movw	r3, #10013	; 0x271d
 800276a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800276e:	4798      	blx	r3


	REG_I2C1_CR1 = 0;
 8002770:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8002774:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002778:	2500      	movs	r5, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 800277a:	f245 4404 	movw	r4, #21508	; 0x5404
	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	


	REG_I2C1_CR1 = 0;
 800277e:	601d      	str	r5, [r3, #0]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8002780:	f2c4 0400 	movt	r4, #16384	; 0x4000
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8002784:	f245 401c 	movw	r0, #21532	; 0x541c

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8002788:	2524      	movs	r5, #36	; 0x24
 800278a:	6025      	str	r5, [r4, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 800278c:	f2c4 0000 	movt	r0, #16384	; 0x4000
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8002790:	f245 4120 	movw	r1, #21536	; 0x5420
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8002794:	f248 041e 	movw	r4, #32798	; 0x801e
 8002798:	6004      	str	r4, [r0, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 800279a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800279e:	2004      	movs	r0, #4


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 80027a0:	f241 021c 	movw	r2, #4124	; 0x101c
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 80027a4:	6008      	str	r0, [r1, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 80027a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80027aa:	6810      	ldr	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 80027ac:	f245 4114 	movw	r1, #21524	; 0x5414
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 80027b0:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 80027b4:	6010      	str	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 80027b6:	6818      	ldr	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 80027b8:	f245 4218 	movw	r2, #21528	; 0x5418
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 80027bc:	f020 0002 	bic.w	r0, r0, #2
 80027c0:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 80027c2:	6818      	ldr	r0, [r3, #0]

	SR = REG_I2C1_SR1;
 80027c4:	f2c4 0100 	movt	r1, #16384	; 0x4000
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 80027c8:	f040 0001 	orr.w	r0, r0, #1
 80027cc:	6018      	str	r0, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 80027ce:	f2c4 0200 	movt	r2, #16384	; 0x4000


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 80027d2:	680b      	ldr	r3, [r1, #0]
	SR = REG_I2C1_SR2;
 80027d4:	6813      	ldr	r3, [r2, #0]
 80027d6:	bd38      	pop	{r3, r4, r5, pc}

080027d8 <Hw_Si47xx_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
 80027d8:	b538      	push	{r3, r4, r5, lr}
	Hw_Wait(100);
 80027da:	f641 756d 	movw	r5, #8045	; 0x1f6d
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 80027de:	f640 440c 	movw	r4, #3084	; 0xc0c
 80027e2:	f2c4 0401 	movt	r4, #16385	; 0x4001
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
 80027e6:	f6c0 0500 	movt	r5, #2048	; 0x800
 80027ea:	2064      	movs	r0, #100	; 0x64
 80027ec:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 80027ee:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(100);
 80027f0:	2064      	movs	r0, #100	; 0x64
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 80027f2:	f043 0120 	orr.w	r1, r3, #32
 80027f6:	6021      	str	r1, [r4, #0]
	Hw_Wait(100);
 80027f8:	47a8      	blx	r5
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 80027fa:	6822      	ldr	r2, [r4, #0]
	Hw_Wait(500);	
 80027fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8002800:	f022 0320 	bic.w	r3, r2, #32
 8002804:	6023      	str	r3, [r4, #0]
	Hw_Wait(500);	
 8002806:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8002808:	6821      	ldr	r1, [r4, #0]
	Hw_Wait(100);
 800280a:	2064      	movs	r0, #100	; 0x64
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
	Hw_Wait(500);	
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 800280c:	f041 0220 	orr.w	r2, r1, #32
 8002810:	6022      	str	r2, [r4, #0]
	Hw_Wait(100);
 8002812:	47a8      	blx	r5
 8002814:	bd38      	pop	{r3, r4, r5, pc}
 8002816:	bf00      	nop

08002818 <Hw_Si47xx_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Init( void )
{
 8002818:	b508      	push	{r3, lr}
	Hw_I2C_Init();
 800281a:	f242 730d 	movw	r3, #9997	; 0x270d
 800281e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002822:	4798      	blx	r3

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 8002824:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002828:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800282c:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 800282e:	f242 72d9 	movw	r2, #10201	; 0x27d9

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 8002832:	f421 0370 	bic.w	r3, r1, #15728640	; 0xf00000
 8002836:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8002838:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 800283a:	f6c0 0200 	movt	r2, #2048	; 0x800
	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 800283e:	f441 1340 	orr.w	r3, r1, #3145728	; 0x300000
 8002842:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 8002844:	6801      	ldr	r1, [r0, #0]
 8002846:	6001      	str	r1, [r0, #0]
	

	Hw_Si47xx_Reset();
 8002848:	4790      	blx	r2
 800284a:	bd08      	pop	{r3, pc}

0800284c <Hw_SPI_Ch2_Init>:

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 800284c:	f640 4304 	movw	r3, #3076	; 0xc04
 8002850:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002854:	6819      	ldr	r1, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8002856:	f44f 5260 	mov.w	r2, #14336	; 0x3800

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 800285a:	f421 2070 	bic.w	r0, r1, #983040	; 0xf0000
 800285e:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 8002860:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8002862:	f643 0104 	movw	r1, #14340	; 0x3804
	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 8002866:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 800286a:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 800286c:	6818      	ldr	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 800286e:	f2c4 0200 	movt	r2, #16384	; 0x4000
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 8002872:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8002876:	6018      	str	r0, [r3, #0]
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8002878:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 800287a:	f2c4 0100 	movt	r1, #16384	; 0x4000
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 800287e:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 8002882:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (20));	// MODE   - Output mode, max speed 50Mhz
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800288a:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (22));	// CNF    - Alternate function output Push-pull
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002892:	6018      	str	r0, [r3, #0]

	// PB15 - SPI2_MOSI
	REG_GPIOB_CRH &= ~(0x0F << (28));	// Clear
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800289a:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (28));	// MODE   - Output mode, max speed 50Mhz
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
 80028a2:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (30));	// CNF    - Alternate function output Push-pull
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80028aa:	6018      	str	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 80028ac:	f244 031c 	movw	r3, #16412	; 0x401c
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 80028b0:	2004      	movs	r0, #4



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 80028b2:	6013      	str	r3, [r2, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 80028b4:	6008      	str	r0, [r1, #0]
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR1, 6 );
 80028b6:	6811      	ldr	r1, [r2, #0]
 80028b8:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4770      	bx	lr

080028c0 <Hw_SPI_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Init(void)
{
 80028c0:	b510      	push	{r4, lr}
	static u8 Called = 0;


	if( Called == 1 ) return;
 80028c2:	4c08      	ldr	r4, [pc, #32]	; (80028e4 <Hw_SPI_Init+0x24>)
 80028c4:	7823      	ldrb	r3, [r4, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d00b      	beq.n	80028e2 <Hw_SPI_Init+0x22>


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 80028ca:	f241 001c 	movw	r0, #4124	; 0x101c
 80028ce:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80028d2:	6802      	ldr	r2, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <Hw_SPI_Init+0x28>)
	if( Called == 1 ) return;


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 80028d6:	f442 4180 	orr.w	r1, r2, #16384	; 0x4000
 80028da:	6001      	str	r1, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 80028dc:	4798      	blx	r3

	Called = 1;	
 80028de:	2001      	movs	r0, #1
 80028e0:	7020      	strb	r0, [r4, #0]
 80028e2:	bd10      	pop	{r4, pc}
 80028e4:	20000482 	.word	0x20000482
 80028e8:	0800284d 	.word	0x0800284d

080028ec <Hw_SPI_StartDMA>:
              
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_StartDMA( u8 Ch )
{
	switch( Ch )
 80028ec:	2801      	cmp	r0, #1
 80028ee:	d10b      	bne.n	8002908 <Hw_SPI_StartDMA+0x1c>
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR2, 1 );	// TX DMA Enable
 80028f0:	f643 0304 	movw	r3, #14340	; 0x3804
 80028f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f042 0002 	orr.w	r0, r2, #2
 80028fe:	6018      	str	r0, [r3, #0]
			SET_BIT( REG_SPI2_CR2, 0 );	// RX DMA Enable
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	f041 0201 	orr.w	r2, r1, #1
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop

0800290c <Hw_SPI_Write8Bit>:
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 800290c:	2801      	cmp	r0, #1
 800290e:	d001      	beq.n	8002914 <Hw_SPI_Write8Bit+0x8>
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8002910:	2000      	movs	r0, #0
}
 8002912:	4770      	bx	lr
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8002914:	f643 0208 	movw	r2, #14344	; 0x3808
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8002918:	f242 730f 	movw	r3, #9999	; 0x270f
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 800291c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002920:	e006      	b.n	8002930 <Hw_SPI_Write8Bit+0x24>
 8002922:	6810      	ldr	r0, [r2, #0]
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 8002924:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8002926:	0780      	lsls	r0, r0, #30
 8002928:	d405      	bmi.n	8002936 <Hw_SPI_Write8Bit+0x2a>
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 800292a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800292e:	d305      	bcc.n	800293c <Hw_SPI_Write8Bit+0x30>
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8002930:	6810      	ldr	r0, [r2, #0]
 8002932:	0780      	lsls	r0, r0, #30
 8002934:	d5f5      	bpl.n	8002922 <Hw_SPI_Write8Bit+0x16>
			}
			if( TimeOut == 0 ) return 1;
 8002936:	b90b      	cbnz	r3, 800293c <Hw_SPI_Write8Bit+0x30>
 8002938:	2001      	movs	r0, #1
 800293a:	4770      	bx	lr
			REG_SPI2_DR = WriteData;
 800293c:	f643 000c 	movw	r0, #14348	; 0x380c
 8002940:	f2c4 0000 	movt	r0, #16384	; 0x4000

			
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8002944:	f643 0208 	movw	r2, #14344	; 0x3808
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
			}
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;
 8002948:	6001      	str	r1, [r0, #0]

			
			TimeOut = 10000;	
			while( TimeOut-- )
 800294a:	f242 730f 	movw	r3, #9999	; 0x270f
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 800294e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002952:	e006      	b.n	8002962 <Hw_SPI_Write8Bit+0x56>
 8002954:	6810      	ldr	r0, [r2, #0]
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8002956:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8002958:	07c1      	lsls	r1, r0, #31
 800295a:	d405      	bmi.n	8002968 <Hw_SPI_Write8Bit+0x5c>
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 800295c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002960:	d304      	bcc.n	800296c <Hw_SPI_Write8Bit+0x60>
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8002962:	6811      	ldr	r1, [r2, #0]
 8002964:	07c8      	lsls	r0, r1, #31
 8002966:	d5f5      	bpl.n	8002954 <Hw_SPI_Write8Bit+0x48>
			}
			if( TimeOut == 0 ) return 1;
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0e5      	beq.n	8002938 <Hw_SPI_Write8Bit+0x2c>
		
			ReadData = REG_SPI2_DR;
 800296c:	f643 020c 	movw	r2, #14348	; 0x380c
 8002970:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002974:	6813      	ldr	r3, [r2, #0]
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8002976:	2000      	movs	r0, #0
			}
			if( TimeOut == 0 ) return 1;
		
			ReadData = REG_SPI2_DR;
			
			break;
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop

0800297c <Hw_N5100G_FrameTick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5100G_FrameTick( void )
{
 800297c:	b508      	push	{r3, lr}
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <Hw_N5100G_FrameTick+0x38>)
 8002980:	4798      	blx	r3
 8002982:	2801      	cmp	r0, #1
 8002984:	d00d      	beq.n	80029a2 <Hw_N5100G_FrameTick+0x26>
 8002986:	480c      	ldr	r0, [pc, #48]	; (80029b8 <Hw_N5100G_FrameTick+0x3c>)
 8002988:	6803      	ldr	r3, [r0, #0]
		{
			Hw_N5110G_Frame_DrawReq--;
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 800298a:	b903      	cbnz	r3, 800298e <Hw_N5100G_FrameTick+0x12>
 800298c:	bd08      	pop	{r3, pc}
	{
		Hw_DMA_SPI2_Setup( (u32)Hw_N5110G_TxFrameBuf, (u32)Hw_N5110G_RxFrameBuf, HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT );				
 800298e:	480b      	ldr	r0, [pc, #44]	; (80029bc <Hw_N5100G_FrameTick+0x40>)
 8002990:	490b      	ldr	r1, [pc, #44]	; (80029c0 <Hw_N5100G_FrameTick+0x44>)
 8002992:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <Hw_N5100G_FrameTick+0x48>)
 8002998:	4798      	blx	r3
		Hw_SPI_StartDMA( HW_SPI_CH2 );			
 800299a:	2001      	movs	r0, #1
 800299c:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <Hw_N5100G_FrameTick+0x4c>)
 800299e:	4790      	blx	r2
 80029a0:	bd08      	pop	{r3, pc}
{
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
	{
		if( Hw_N5110G_Frame_DrawReq > 0 )
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <Hw_N5100G_FrameTick+0x3c>)
 80029a4:	6811      	ldr	r1, [r2, #0]
 80029a6:	2900      	cmp	r1, #0
 80029a8:	d0f0      	beq.n	800298c <Hw_N5100G_FrameTick+0x10>
		{
			Hw_N5110G_Frame_DrawReq--;
 80029aa:	1e4b      	subs	r3, r1, #1
 80029ac:	6013      	str	r3, [r2, #0]
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ec      	beq.n	800298c <Hw_N5100G_FrameTick+0x10>
 80029b2:	e7ec      	b.n	800298e <Hw_N5100G_FrameTick+0x12>
 80029b4:	08003125 	.word	0x08003125
 80029b8:	20000b8c 	.word	0x20000b8c
 80029bc:	20000990 	.word	0x20000990
 80029c0:	20000b90 	.word	0x20000b90
 80029c4:	080030ad 	.word	0x080030ad
 80029c8:	080028ed 	.word	0x080028ed

080029cc <Hw_N5110G_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
 80029cc:	b510      	push	{r4, lr}
	HW_N5110G_RESET_ON();
 80029ce:	f640 440c 	movw	r4, #3084	; 0xc0c
 80029d2:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80029d6:	6822      	ldr	r2, [r4, #0]
	Hw_Timer_Delay_ms(10);
 80029d8:	f242 63bd 	movw	r3, #9917	; 0x26bd
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
	HW_N5110G_RESET_ON();
 80029dc:	f422 6080 	bic.w	r0, r2, #1024	; 0x400
 80029e0:	6020      	str	r0, [r4, #0]
	Hw_Timer_Delay_ms(10);
 80029e2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80029e6:	200a      	movs	r0, #10
 80029e8:	4798      	blx	r3
	HW_N5110G_RESET_OFF();
 80029ea:	6821      	ldr	r1, [r4, #0]
 80029ec:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 80029f0:	6022      	str	r2, [r4, #0]
 80029f2:	bd10      	pop	{r4, pc}

080029f4 <Hw_N5110G_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 80029f4:	b510      	push	{r4, lr}
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 80029f6:	f640 440c 	movw	r4, #3084	; 0xc0c
 80029fa:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80029fe:	6823      	ldr	r3, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 8002a00:	4601      	mov	r1, r0
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8002a02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 8002a06:	f642 130d 	movw	r3, #10509	; 0x290d
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8002a0a:	6022      	str	r2, [r4, #0]
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002a12:	4798      	blx	r3
	HW_N5110G_SEL_DATA();
 8002a14:	6821      	ldr	r1, [r4, #0]
 8002a16:	f441 6200 	orr.w	r2, r1, #2048	; 0x800
 8002a1a:	6022      	str	r2, [r4, #0]
	
	return Ret;
}
 8002a1c:	bd10      	pop	{r4, pc}
 8002a1e:	bf00      	nop

08002a20 <Hw_N5110G_Goto>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 8002a20:	b570      	push	{r4, r5, r6, lr}
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 8002a22:	f642 14f5 	movw	r4, #10741	; 0x29f5
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 8002a26:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 8002a28:	f6c0 0400 	movt	r4, #2048	; 0x800
 8002a2c:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 8002a30:	47a0      	blx	r4
 8002a32:	4606      	mov	r6, r0
	Ret |= Hw_N5110G_WriteCmd( 0x80|x );
 8002a34:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 8002a38:	47a0      	blx	r4
 8002a3a:	4330      	orrs	r0, r6

	return Ret;
}
 8002a3c:	b280      	uxth	r0, r0
 8002a3e:	bd70      	pop	{r4, r5, r6, pc}

08002a40 <Hw_N5110G_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8002a40:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 8002a42:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <Hw_N5110G_Init+0xbc>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8002a44:	b083      	sub	sp, #12
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 8002a46:	4798      	blx	r3
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8002a48:	f640 4004 	movw	r0, #3076	; 0xc04
 8002a4c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002a50:	6802      	ldr	r2, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 8002a52:	f640 440c 	movw	r4, #3084	; 0xc0c
	
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8002a56:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 8002a5a:	6001      	str	r1, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 8002a5c:	6805      	ldr	r5, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 8002a5e:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 8002a62:	f445 7640 	orr.w	r6, r5, #768	; 0x300
 8002a66:	6006      	str	r6, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8002a68:	6807      	ldr	r7, [r0, #0]
	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
	
	Hw_N5110G_Reset();
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8002a6a:	4d25      	ldr	r5, [pc, #148]	; (8002b00 <Hw_N5110G_Init+0xc0>)
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8002a6c:	6007      	str	r7, [r0, #0]

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8002a6e:	6803      	ldr	r3, [r0, #0]
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8002a70:	2600      	movs	r6, #0
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8002a72:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8002a76:	6002      	str	r2, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
 8002a78:	6801      	ldr	r1, [r0, #0]
 8002a7a:	f441 5740 	orr.w	r7, r1, #12288	; 0x3000
 8002a7e:	6007      	str	r7, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 8002a80:	6803      	ldr	r3, [r0, #0]
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
 8002a82:	4f20      	ldr	r7, [pc, #128]	; (8002b04 <Hw_N5110G_Init+0xc4>)

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 8002a84:	6003      	str	r3, [r0, #0]


	HW_N5110G_RESET_OFF();
 8002a86:	6820      	ldr	r0, [r4, #0]
 8002a88:	f440 6280 	orr.w	r2, r0, #1024	; 0x400
 8002a8c:	6022      	str	r2, [r4, #0]
	HW_N5110G_SEL_CMD();
 8002a8e:	6821      	ldr	r1, [r4, #0]
	
	Hw_N5110G_Reset();
 8002a90:	481d      	ldr	r0, [pc, #116]	; (8002b08 <Hw_N5110G_Init+0xc8>)
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
 8002a92:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 8002a96:	6023      	str	r3, [r4, #0]
	
	Hw_N5110G_Reset();
 8002a98:	4780      	blx	r0
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8002a9a:	2021      	movs	r0, #33	; 0x21
 8002a9c:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0xC6);	// Write Vop
 8002a9e:	20c6      	movs	r0, #198	; 0xc6
 8002aa0:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x06);	// Set Temperature Coefficient
 8002aa2:	2006      	movs	r0, #6
 8002aa4:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x13);	// Set Bias System
 8002aa6:	2013      	movs	r0, #19
 8002aa8:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x20);	// H = 0
 8002aaa:	2020      	movs	r0, #32
 8002aac:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
 8002aae:	200c      	movs	r0, #12
 8002ab0:	47a8      	blx	r5
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
 8002ab2:	4631      	mov	r1, r6
 8002ab4:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <Hw_N5110G_Init+0xcc>)
 8002ab6:	4630      	mov	r0, r6
 8002ab8:	4790      	blx	r2
	
	
	HW_N5110G_SEL_DATA();
 8002aba:	6821      	ldr	r1, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8002abc:	2003      	movs	r0, #3
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
 8002abe:	f441 6300 	orr.w	r3, r1, #2048	; 0x800
 8002ac2:	6023      	str	r3, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
 8002ac4:	4c12      	ldr	r4, [pc, #72]	; (8002b10 <Hw_N5110G_Init+0xd0>)
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8002ac6:	2121      	movs	r1, #33	; 0x21
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <Hw_N5110G_Init+0xd4>)
 8002aca:	9600      	str	r6, [sp, #0]
 8002acc:	2202      	movs	r2, #2
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8002ace:	8026      	strh	r6, [r4, #0]
	Hw_N5110G_Frame_DrawReq	= 0;						
 8002ad0:	603e      	str	r6, [r7, #0]
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8002ad2:	4c11      	ldr	r4, [pc, #68]	; (8002b18 <Hw_N5110G_Init+0xd8>)
 8002ad4:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
 8002ad6:	2003      	movs	r0, #3
 8002ad8:	4a10      	ldr	r2, [pc, #64]	; (8002b1c <Hw_N5110G_Init+0xdc>)
 8002ada:	4790      	blx	r2
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <Hw_N5110G_Init+0xe0>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8002ade:	4631      	mov	r1, r6
     TITLE   : Hw_5110G_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
 8002ae0:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8002ae4:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8002ae6:	7059      	strb	r1, [r3, #1]
 8002ae8:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8002aea:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8002aec:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8002aee:	d1f9      	bne.n	8002ae4 <Hw_N5110G_Init+0xa4>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002af0:	6839      	ldr	r1, [r7, #0]
 8002af2:	1c88      	adds	r0, r1, #2
 8002af4:	6038      	str	r0, [r7, #0]
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
	
	
	Hw_N5110G_Clear();	
	Hw_N5110G_DrawRequest();
}
 8002af6:	b003      	add	sp, #12
 8002af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002afa:	bf00      	nop
 8002afc:	080028c1 	.word	0x080028c1
 8002b00:	080029f5 	.word	0x080029f5
 8002b04:	20000b8c 	.word	0x20000b8c
 8002b08:	080029cd 	.word	0x080029cd
 8002b0c:	08002a21 	.word	0x08002a21
 8002b10:	20000b88 	.word	0x20000b88
 8002b14:	0800297d 	.word	0x0800297d
 8002b18:	08002689 	.word	0x08002689
 8002b1c:	080026a9 	.word	0x080026a9
 8002b20:	2000098f 	.word	0x2000098f

08002b24 <Hw_N5110G_Clear>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
{
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <Hw_N5110G_Clear+0x20>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8002b26:	2100      	movs	r1, #0
     TITLE   : Hw_N5110G_Clear
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
 8002b28:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8002b2c:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8002b2e:	7059      	strb	r1, [r3, #1]
 8002b30:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8002b32:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8002b34:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8002b36:	d1f9      	bne.n	8002b2c <Hw_N5110G_Clear+0x8>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002b38:	4903      	ldr	r1, [pc, #12]	; (8002b48 <Hw_N5110G_Clear+0x24>)
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 8002b3a:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002b3c:	680a      	ldr	r2, [r1, #0]
 8002b3e:	1c53      	adds	r3, r2, #1
 8002b40:	600b      	str	r3, [r1, #0]
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 8002b42:	4770      	bx	lr
 8002b44:	2000098f 	.word	0x2000098f
 8002b48:	20000b8c 	.word	0x20000b8c

08002b4c <Hw_N5110G_WriteStr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 8002b4c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8002b50:	7807      	ldrb	r7, [r0, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 8002b52:	b086      	sub	sp, #24
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8002b54:	2f00      	cmp	r7, #0
 8002b56:	f000 8085 	beq.w	8002c64 <Hw_N5110G_WriteStr+0x118>
 8002b5a:	f640 3188 	movw	r1, #2952	; 0xb88
 8002b5e:	f2c2 0100 	movt	r1, #8192	; 0x2000
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002b62:	f640 0c21 	movw	ip, #2081	; 0x821
 8002b66:	f8b1 9000 	ldrh.w	r9, [r1]
 8002b6a:	f8df a104 	ldr.w	sl, [pc, #260]	; 8002c70 <Hw_N5110G_WriteStr+0x124>
 8002b6e:	f2c2 0c82 	movt	ip, #8322	; 0x2082
 8002b72:	9001      	str	r0, [sp, #4]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002b74:	f109 0301 	add.w	r3, r9, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002b78:	b298      	uxth	r0, r3
 8002b7a:	08c2      	lsrs	r2, r0, #3
 8002b7c:	fbac 2402 	umull	r2, r4, ip, r2
 8002b80:	08e5      	lsrs	r5, r4, #3
 8002b82:	ebc5 1685 	rsb	r6, r5, r5, lsl #6
 8002b86:	eba0 01c6 	sub.w	r1, r0, r6, lsl #3
 8002b8a:	b289      	uxth	r1, r1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002b8c:	1c4b      	adds	r3, r1, #1
 8002b8e:	b298      	uxth	r0, r3
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002b90:	08c2      	lsrs	r2, r0, #3
 8002b92:	fbac 4502 	umull	r4, r5, ip, r2
 8002b96:	08ec      	lsrs	r4, r5, #3
 8002b98:	ebc4 1684 	rsb	r6, r4, r4, lsl #6
 8002b9c:	eba0 03c6 	sub.w	r3, r0, r6, lsl #3
 8002ba0:	b29a      	uxth	r2, r3
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002ba2:	1c50      	adds	r0, r2, #1
 8002ba4:	b284      	uxth	r4, r0
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002ba6:	08e5      	lsrs	r5, r4, #3
 8002ba8:	fbac 5605 	umull	r5, r6, ip, r5
 8002bac:	08f3      	lsrs	r3, r6, #3
 8002bae:	ebc3 1083 	rsb	r0, r3, r3, lsl #6
 8002bb2:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
 8002bb6:	fa1f f884 	uxth.w	r8, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002bba:	f108 0501 	add.w	r5, r8, #1
 8002bbe:	b2ae      	uxth	r6, r5
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002bc0:	08f3      	lsrs	r3, r6, #3
 8002bc2:	fbac 4003 	umull	r4, r0, ip, r3
 8002bc6:	08c4      	lsrs	r4, r0, #3
 8002bc8:	ebc4 1584 	rsb	r5, r4, r4, lsl #6
 8002bcc:	eba6 06c5 	sub.w	r6, r6, r5, lsl #3
 8002bd0:	b2b6      	uxth	r6, r6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002bd2:	1c73      	adds	r3, r6, #1
 8002bd4:	b29c      	uxth	r4, r3
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002bd6:	08e0      	lsrs	r0, r4, #3
 8002bd8:	fbac 5300 	umull	r5, r3, ip, r0
 8002bdc:	08dd      	lsrs	r5, r3, #3
 8002bde:	ebc5 1085 	rsb	r0, r5, r5, lsl #6
 8002be2:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
 8002be6:	b2a5      	uxth	r5, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002be8:	1c6b      	adds	r3, r5, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002bea:	b298      	uxth	r0, r3
 8002bec:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
 8002bf0:	fbac 340b 	umull	r3, r4, ip, fp
 8002bf4:	3f20      	subs	r7, #32
 8002bf6:	ea4f 0bd4 	mov.w	fp, r4, lsr #3
	u16 i;
	u8  Ch;
	
	for( i=0; i<6; i++ )
	{
		Ch = Hw_N5110G_Font6_8[CharData-32][i];
 8002bfa:	f240 0400 	movw	r4, #0
 8002bfe:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002c02:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8002c06:	eb04 0347 	add.w	r3, r4, r7, lsl #1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002c0a:	f814 7017 	ldrb.w	r7, [r4, r7, lsl #1]
 8002c0e:	789c      	ldrb	r4, [r3, #2]
 8002c10:	9702      	str	r7, [sp, #8]
 8002c12:	9403      	str	r4, [sp, #12]
 8002c14:	78dc      	ldrb	r4, [r3, #3]
 8002c16:	785f      	ldrb	r7, [r3, #1]
 8002c18:	9404      	str	r4, [sp, #16]
 8002c1a:	791c      	ldrb	r4, [r3, #4]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002c1c:	ebcb 1b8b 	rsb	fp, fp, fp, lsl #6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002c20:	9405      	str	r4, [sp, #20]
 8002c22:	9c02      	ldr	r4, [sp, #8]
 8002c24:	795b      	ldrb	r3, [r3, #5]
 8002c26:	f80a 4009 	strb.w	r4, [sl, r9]
 8002c2a:	f80a 7001 	strb.w	r7, [sl, r1]
 8002c2e:	9f03      	ldr	r7, [sp, #12]
 8002c30:	9c05      	ldr	r4, [sp, #20]
 8002c32:	f80a 7002 	strb.w	r7, [sl, r2]
 8002c36:	9a04      	ldr	r2, [sp, #16]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002c38:	eba0 00cb 	sub.w	r0, r0, fp, lsl #3
 8002c3c:	f640 3188 	movw	r1, #2952	; 0xb88
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002c40:	f80a 2008 	strb.w	r2, [sl, r8]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002c44:	fa1f f980 	uxth.w	r9, r0
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002c48:	f80a 4006 	strb.w	r4, [sl, r6]
 8002c4c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002c50:	f80a 3005 	strb.w	r3, [sl, r5]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8002c54:	9d01      	ldr	r5, [sp, #4]
 8002c56:	f8a1 9000 	strh.w	r9, [r1]
 8002c5a:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 8002c5e:	9501      	str	r5, [sp, #4]
 8002c60:	2f00      	cmp	r7, #0
 8002c62:	d187      	bne.n	8002b74 <Hw_N5110G_WriteStr+0x28>
		Ret |= Hw_N5110G_WriteChar( *pStr );
		pStr++;
	}
		
	return Ret;
}
 8002c64:	2000      	movs	r0, #0
 8002c66:	b006      	add	sp, #24
 8002c68:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000990 	.word	0x20000990

08002c74 <Hw_N5110G_Print>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 8002c74:	b40c      	push	{r2, r3}
 8002c76:	b530      	push	{r4, r5, lr}
 8002c78:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8002c7a:	aa36      	add	r2, sp, #216	; 0xd8
 8002c7c:	f641 3315 	movw	r3, #6933	; 0x1b15
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 8002c80:	460d      	mov	r5, r1
 8002c82:	4604      	mov	r4, r0
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8002c84:	f852 1b04 	ldr.w	r1, [r2], #4
 8002c88:	4668      	mov	r0, sp
 8002c8a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002c8e:	4798      	blx	r3

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8002c90:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8002c94:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8002c98:	004c      	lsls	r4, r1, #1
 8002c9a:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 8002c9e:	f640 3288 	movw	r2, #2952	; 0xb88

	Hw_N5110G_WriteStr( Str );		
 8002ca2:	f642 334d 	movw	r3, #11085	; 0x2b4d

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8002ca6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002caa:	eb04 0585 	add.w	r5, r4, r5, lsl #2

	Hw_N5110G_WriteStr( Str );		
 8002cae:	4668      	mov	r0, sp
 8002cb0:	f6c0 0300 	movt	r3, #2048	; 0x800

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8002cb4:	8015      	strh	r5, [r2, #0]

	Hw_N5110G_WriteStr( Str );		
 8002cb6:	4798      	blx	r3
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002cb8:	f640 318c 	movw	r1, #2956	; 0xb8c
 8002cbc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002cc0:	680a      	ldr	r2, [r1, #0]
	Hw_N5110G_DrawRequest();
	
	Lb_va_end(ap);		
	
	return Ret;
}
 8002cc2:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002cc4:	1c53      	adds	r3, r2, #1
 8002cc6:	600b      	str	r3, [r1, #0]
	Hw_N5110G_DrawRequest();
	
	Lb_va_end(ap);		
	
	return Ret;
}
 8002cc8:	b033      	add	sp, #204	; 0xcc
 8002cca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002cce:	b002      	add	sp, #8
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop

08002cd4 <Hw_N5110G_DrawRequest>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002cd4:	f640 338c 	movw	r3, #2956	; 0xb8c
 8002cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	1c50      	adds	r0, r2, #1
 8002ce0:	6018      	str	r0, [r3, #0]
 8002ce2:	4770      	bx	lr

08002ce4 <Hw_N5110G_DrawCircle>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8002ce4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ce8:	b088      	sub	sp, #32
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8002cea:	0054      	lsls	r4, r2, #1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8002cec:	9005      	str	r0, [sp, #20]
 8002cee:	9106      	str	r1, [sp, #24]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8002cf0:	f1c4 0003 	rsb	r0, r4, #3
 8002cf4:	9d05      	ldr	r5, [sp, #20]
 8002cf6:	9c06      	ldr	r4, [sp, #24]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8002cf8:	9304      	str	r3, [sp, #16]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8002cfa:	b283      	uxth	r3, r0
 8002cfc:	9303      	str	r3, [sp, #12]
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];
 8002cfe:	49a0      	ldr	r1, [pc, #640]	; (8002f80 <Hw_N5110G_DrawCircle+0x29c>)
{
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8002d00:	4620      	mov	r0, r4
 8002d02:	9501      	str	r5, [sp, #4]
 8002d04:	9502      	str	r5, [sp, #8]
	CurX = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e0a5      	b.n	8002e56 <Hw_N5110G_DrawCircle+0x172>
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8002d0a:	f8dd b018 	ldr.w	fp, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d0e:	f04f 0901 	mov.w	r9, #1
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
 8002d12:	ebc2 060b 	rsb	r6, r2, fp
 8002d16:	b2b6      	uxth	r6, r6
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d18:	f006 0807 	and.w	r8, r6, #7
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8002d1c:	eb02 050b 	add.w	r5, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d20:	fa09 fb08 	lsl.w	fp, r9, r8
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8002d24:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d26:	f007 0a07 	and.w	sl, r7, #7
 8002d2a:	f000 0507 	and.w	r5, r0, #7
 8002d2e:	fa09 fc0a 	lsl.w	ip, r9, sl
 8002d32:	f04f 0801 	mov.w	r8, #1
 8002d36:	fa09 fa05 	lsl.w	sl, r9, r5
 8002d3a:	f004 0907 	and.w	r9, r4, #7
 8002d3e:	f8cd b01c 	str.w	fp, [sp, #28]
 8002d42:	fa08 fb09 	lsl.w	fp, r8, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d46:	2554      	movs	r5, #84	; 0x54
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002d48:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d4a:	fb05 f707 	mul.w	r7, r5, r7
 8002d4e:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002d52:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d54:	eb07 0809 	add.w	r8, r7, r9
 8002d58:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d5c:	f8cd b000 	str.w	fp, [sp]
 8002d60:	f811 b008 	ldrb.w	fp, [r1, r8]
 8002d64:	fa5f fc8c 	uxtb.w	ip, ip
 8002d68:	ea4b 050c 	orr.w	r5, fp, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002d6c:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d70:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d74:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8002d78:	f811 b008 	ldrb.w	fp, [r1, r8]
 8002d7c:	fa5f f589 	uxtb.w	r5, r9
 8002d80:	ea4b 0b05 	orr.w	fp, fp, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002d84:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d88:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002d8c:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d90:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d92:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d96:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d9a:	ea49 0c0c 	orr.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002d9e:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002da2:	2754      	movs	r7, #84	; 0x54
 8002da4:	4446      	add	r6, r8
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 8002da6:	f8dd 9014 	ldr.w	r9, [sp, #20]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002daa:	fb07 f80b 	mul.w	r8, r7, fp
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002dae:	f811 b006 	ldrb.w	fp, [r1, r6]
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 8002db2:	eb02 0709 	add.w	r7, r2, r9
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002db6:	ea4b 0505 	orr.w	r5, fp, r5
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002dba:	b2bf      	uxth	r7, r7
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002dbc:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002dc0:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002dc4:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002dc6:	eb08 0607 	add.w	r6, r8, r7
 8002dca:	fb0b f50c 	mul.w	r5, fp, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002dce:	f811 9006 	ldrb.w	r9, [r1, r6]
 8002dd2:	fa5f fa8a 	uxtb.w	sl, sl
 8002dd6:	f8dd b000 	ldr.w	fp, [sp]
 8002dda:	ea49 0c0a 	orr.w	ip, r9, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002dde:	f801 c006 	strb.w	ip, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002de2:	19ef      	adds	r7, r5, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002de4:	fa5f f98b 	uxtb.w	r9, fp
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 8002de8:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002dec:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 8002dee:	ebc2 0c0b 	rsb	ip, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002df2:	ea46 0609 	orr.w	r6, r6, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002df6:	fa1f fc8c 	uxth.w	ip, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002dfa:	55ce      	strb	r6, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002dfc:	44e0      	add	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002dfe:	f811 7008 	ldrb.w	r7, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e02:	4465      	add	r5, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002e04:	ea47 0a0a 	orr.w	sl, r7, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002e08:	f801 a008 	strb.w	sl, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002e0c:	5d4e      	ldrb	r6, [r1, r5]
 8002e0e:	ea46 0909 	orr.w	r9, r6, r9
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002e12:	f801 9005 	strb.w	r9, [r1, r5]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002e16:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002e1a:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 8002e1e:	f040 80a8 	bne.w	8002f72 <Hw_N5110G_DrawCircle+0x28e>
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8002e22:	9f03      	ldr	r7, [sp, #12]
 8002e24:	1a9d      	subs	r5, r3, r2
 8002e26:	370a      	adds	r7, #10
 8002e28:	eb07 0685 	add.w	r6, r7, r5, lsl #2
			CurY--;
 8002e2c:	3a01      	subs	r2, #1
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8002e2e:	b2b7      	uxth	r7, r6
 8002e30:	9703      	str	r7, [sp, #12]
			CurY--;
 8002e32:	b292      	uxth	r2, r2
 8002e34:	9d02      	ldr	r5, [sp, #8]
 8002e36:	9f01      	ldr	r7, [sp, #4]
		}
		CurX++;
 8002e38:	3301      	adds	r3, #1
 8002e3a:	1c6e      	adds	r6, r5, #1
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	1e7d      	subs	r5, r7, #1
 8002e40:	3001      	adds	r0, #1
 8002e42:	3c01      	subs	r4, #1
 8002e44:	b2b6      	uxth	r6, r6
 8002e46:	b2ad      	uxth	r5, r5
  
	D    = 3 - (Radius << 1);
	CurX = 0;
	CurY = Radius;
	
	while (CurX <= CurY)
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	9602      	str	r6, [sp, #8]
 8002e4c:	9501      	str	r5, [sp, #4]
 8002e4e:	b280      	uxth	r0, r0
 8002e50:	b2a4      	uxth	r4, r4
 8002e52:	f0c0 8115 	bcc.w	8003080 <Hw_N5110G_DrawCircle+0x39c>
	{
		if( Mode == 0 )
 8002e56:	9e04      	ldr	r6, [sp, #16]
 8002e58:	2e00      	cmp	r6, #0
 8002e5a:	f43f af56 	beq.w	8002d0a <Hw_N5110G_DrawCircle+0x26>
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
 8002e5e:	9d04      	ldr	r5, [sp, #16]
 8002e60:	2d01      	cmp	r5, #1
 8002e62:	f000 808f 	beq.w	8002f84 <Hw_N5110G_DrawCircle+0x2a0>
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
 8002e66:	9f04      	ldr	r7, [sp, #16]
 8002e68:	2f02      	cmp	r7, #2
 8002e6a:	d1d4      	bne.n	8002e16 <Hw_N5110G_DrawCircle+0x132>
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8002e6c:	9e06      	ldr	r6, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e6e:	f04f 0901 	mov.w	r9, #1
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8002e72:	1995      	adds	r5, r2, r6
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
 8002e74:	1ab6      	subs	r6, r6, r2
 8002e76:	b2b6      	uxth	r6, r6
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8002e78:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e7a:	f006 0507 	and.w	r5, r6, #7
 8002e7e:	fa09 fa05 	lsl.w	sl, r9, r5
 8002e82:	f007 0c07 	and.w	ip, r7, #7
 8002e86:	f04f 0801 	mov.w	r8, #1
 8002e8a:	fa08 fb0c 	lsl.w	fp, r8, ip
 8002e8e:	f004 0c07 	and.w	ip, r4, #7
 8002e92:	fa09 f80c 	lsl.w	r8, r9, ip
 8002e96:	f000 0507 	and.w	r5, r0, #7
 8002e9a:	f8cd a01c 	str.w	sl, [sp, #28]
 8002e9e:	fa09 fa05 	lsl.w	sl, r9, r5
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002ea2:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ea4:	2554      	movs	r5, #84	; 0x54
 8002ea6:	fb05 f707 	mul.w	r7, r5, r7
 8002eaa:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002eae:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002eb0:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002eb4:	f8cd 8000 	str.w	r8, [sp]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002eb8:	eb07 0809 	add.w	r8, r7, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002ebc:	f811 5008 	ldrb.w	r5, [r1, r8]
 8002ec0:	fa5f fc8b 	uxtb.w	ip, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ec4:	f8dd 9008 	ldr.w	r9, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002ec8:	ea85 0b0c 	eor.w	fp, r5, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002ecc:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ed0:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002ed4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8002ed8:	f811 9008 	ldrb.w	r9, [r1, r8]
 8002edc:	fa5f f58b 	uxtb.w	r5, fp
 8002ee0:	ea89 0905 	eor.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002ee4:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ee8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002eec:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002ef0:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002ef2:	f811 b007 	ldrb.w	fp, [r1, r7]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002ef6:	ea4f 08d0 	mov.w	r8, r0, lsr #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002efa:	ea8b 0c0c 	eor.w	ip, fp, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002efe:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f02:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f06:	444e      	add	r6, r9
 8002f08:	fb0b f808 	mul.w	r8, fp, r8
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 8002f0c:	f8dd c014 	ldr.w	ip, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002f10:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 8002f12:	eb02 090c 	add.w	r9, r2, ip
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002f16:	407d      	eors	r5, r7
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f18:	fa1f f989 	uxth.w	r9, r9
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002f1c:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f20:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f22:	fb0b fc07 	mul.w	ip, fp, r7
 8002f26:	eb08 0509 	add.w	r5, r8, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002f2a:	5d4f      	ldrb	r7, [r1, r5]
 8002f2c:	fa5f f68a 	uxtb.w	r6, sl
 8002f30:	4077      	eors	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f32:	554f      	strb	r7, [r1, r5]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f34:	44e1      	add	r9, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002f36:	9d00      	ldr	r5, [sp, #0]
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 8002f38:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002f3c:	f811 a009 	ldrb.w	sl, [r1, r9]
 8002f40:	b2ed      	uxtb	r5, r5
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 8002f42:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f46:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002f48:	ea8a 0a05 	eor.w	sl, sl, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f4c:	f801 a009 	strb.w	sl, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f50:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002f52:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f56:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002f58:	ea89 0606 	eor.w	r6, r9, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f5c:	f801 6008 	strb.w	r6, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002f60:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002f62:	f8dd c00c 	ldr.w	ip, [sp, #12]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002f66:	4075      	eors	r5, r6
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002f68:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f6c:	55cd      	strb	r5, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002f6e:	f43f af58 	beq.w	8002e22 <Hw_N5110G_DrawCircle+0x13e>
		{ 
			D += (CurX << 2) + 6;
 8002f72:	eb0c 0583 	add.w	r5, ip, r3, lsl #2
 8002f76:	1dae      	adds	r6, r5, #6
 8002f78:	b2b7      	uxth	r7, r6
 8002f7a:	9703      	str	r7, [sp, #12]
 8002f7c:	e75a      	b.n	8002e34 <Hw_N5110G_DrawCircle+0x150>
 8002f7e:	bf00      	nop
 8002f80:	20000990 	.word	0x20000990
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 8002f84:	9e06      	ldr	r6, [sp, #24]
 8002f86:	1997      	adds	r7, r2, r6
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 8002f88:	ebc2 0806 	rsb	r8, r2, r6
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 8002f8c:	b2bf      	uxth	r7, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 8002f8e:	fa1f f988 	uxth.w	r9, r8
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f92:	f007 0b07 	and.w	fp, r7, #7
 8002f96:	9e04      	ldr	r6, [sp, #16]
 8002f98:	fa05 fc0b 	lsl.w	ip, r5, fp
 8002f9c:	f009 0507 	and.w	r5, r9, #7
 8002fa0:	fa06 fa05 	lsl.w	sl, r6, r5
 8002fa4:	9d04      	ldr	r5, [sp, #16]
 8002fa6:	f000 0607 	and.w	r6, r0, #7
 8002faa:	fa05 fb06 	lsl.w	fp, r5, r6
 8002fae:	f004 0607 	and.w	r6, r4, #7
 8002fb2:	40b5      	lsls	r5, r6
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002fb4:	08ff      	lsrs	r7, r7, #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002fb6:	9507      	str	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002fb8:	2554      	movs	r5, #84	; 0x54
 8002fba:	fb05 f707 	mul.w	r7, r5, r7
 8002fbe:	f8dd 8008 	ldr.w	r8, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002fc2:	ea4f 06d9 	mov.w	r6, r9, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002fc6:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002fc8:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002fcc:	2554      	movs	r5, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002fce:	ea6f 0c0c 	mvn.w	ip, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002fd2:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002fd6:	fa5f fc8c 	uxtb.w	ip, ip
 8002fda:	ea09 050c 	and.w	r5, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002fde:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002fe2:	f8dd 8008 	ldr.w	r8, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002fe6:	ea6f 050a 	mvn.w	r5, sl
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002fea:	44b0      	add	r8, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002fec:	f811 9008 	ldrb.w	r9, [r1, r8]
 8002ff0:	b2ed      	uxtb	r5, r5
 8002ff2:	ea09 0a05 	and.w	sl, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002ff6:	f801 a008 	strb.w	sl, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ffa:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002ffe:	ea4f 0ad0 	mov.w	sl, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003002:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003004:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003008:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800300c:	ea09 0c0c 	and.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003010:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003014:	f04f 0754 	mov.w	r7, #84	; 0x54
 8003018:	4446      	add	r6, r8
 800301a:	fb07 fa0a 	mul.w	sl, r7, sl
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 800301e:	f8dd 9014 	ldr.w	r9, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003022:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 8003024:	eb02 0c09 	add.w	ip, r2, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003028:	fa1f f88c 	uxth.w	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800302c:	403d      	ands	r5, r7
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800302e:	558d      	strb	r5, [r1, r6]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8003030:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003034:	eb0a 0508 	add.w	r5, sl, r8
 8003038:	2654      	movs	r6, #84	; 0x54
 800303a:	fb06 fc07 	mul.w	ip, r6, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800303e:	5d4f      	ldrb	r7, [r1, r5]
 8003040:	ea6f 060b 	mvn.w	r6, fp
 8003044:	b2f6      	uxtb	r6, r6
 8003046:	4037      	ands	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003048:	554f      	strb	r7, [r1, r5]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800304a:	9d07      	ldr	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800304c:	44e0      	add	r8, ip
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 800304e:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003052:	f811 9008 	ldrb.w	r9, [r1, r8]
 8003056:	43ef      	mvns	r7, r5
 8003058:	b2fd      	uxtb	r5, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 800305a:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800305e:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003060:	ea09 0905 	and.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003064:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003068:	44ba      	add	sl, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800306a:	f811 800a 	ldrb.w	r8, [r1, sl]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800306e:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003070:	ea08 0606 	and.w	r6, r8, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003074:	f801 600a 	strb.w	r6, [r1, sl]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003078:	5dce      	ldrb	r6, [r1, r7]
 800307a:	4035      	ands	r5, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800307c:	55cd      	strb	r5, [r1, r7]
 800307e:	e6ca      	b.n	8002e16 <Hw_N5110G_DrawCircle+0x132>
			D += ((CurX - CurY) << 2) + 10;
			CurY--;
		}
		CurX++;
	}
}
 8003080:	b008      	add	sp, #32
 8003082:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003086:	4770      	bx	lr

08003088 <Hw_DMA_Init>:
void Hw_DMA_Init(void)
{
	static u8 Called = 0;


	if( Called == 1 ) return;
 8003088:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <Hw_DMA_Init+0x20>)
 800308a:	7813      	ldrb	r3, [r2, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d009      	beq.n	80030a4 <Hw_DMA_Init+0x1c>


	// 1. Clock Enable
	//
	REG_RCC_AHBENR |= (1<<0);		// DMA1 Clock enable
 8003090:	f241 0014 	movw	r0, #4116	; 0x1014
 8003094:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8003098:	6801      	ldr	r1, [r0, #0]
 800309a:	f041 0301 	orr.w	r3, r1, #1
 800309e:	6003      	str	r3, [r0, #0]
	

	Called = 1;	
 80030a0:	2001      	movs	r0, #1
 80030a2:	7010      	strb	r0, [r2, #0]
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000483 	.word	0x20000483

080030ac <Hw_DMA_SPI2_Setup>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
 80030ac:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 80030b0:	2344      	movs	r3, #68	; 0x44
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 80030b2:	274c      	movs	r7, #76	; 0x4c
 80030b4:	f643 040c 	movw	r4, #14348	; 0x380c
	REG_DMA1_CMAR(4)  = ReadAddress;
 80030b8:	2650      	movs	r6, #80	; 0x50
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 80030ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80030be:	f04f 0c00 	mov.w	ip, #0
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 80030c2:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80030c6:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(4)  = ReadAddress;
 80030ca:	f2c4 0602 	movt	r6, #16386	; 0x4002
	REG_DMA1_CNDTR(4) = BufSize;
 80030ce:	2548      	movs	r5, #72	; 0x48
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 80030d0:	f8c3 c000 	str.w	ip, [r3]
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 80030d4:	f2c4 0502 	movt	r5, #16386	; 0x4002
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 80030d8:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(4)  = ReadAddress;
 80030da:	6031      	str	r1, [r6, #0]
	REG_DMA1_CNDTR(4) = BufSize;
	
	
	
	REG_DMA1_CCR(4) = 0
 80030dc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 80030e0:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(4) = 0
 80030e2:	6019      	str	r1, [r3, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 80030e4:	f8d3 8000 	ldr.w	r8, [r3]
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 80030e8:	2158      	movs	r1, #88	; 0x58
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 80030ea:	2760      	movs	r7, #96	; 0x60
	REG_DMA1_CMAR(5)  = WriteAddress;
 80030ec:	2664      	movs	r6, #100	; 0x64
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 80030ee:	f2c4 0102 	movt	r1, #16386	; 0x4002
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 80030f2:	255c      	movs	r5, #92	; 0x5c
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 80030f4:	f048 0801 	orr.w	r8, r8, #1
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 80030f8:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(5)  = WriteAddress;
 80030fc:	f2c4 0602 	movt	r6, #16386	; 0x4002
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8003100:	f8c3 8000 	str.w	r8, [r3]
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 8003104:	f2c4 0502 	movt	r5, #16386	; 0x4002
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 8003108:	f8c1 c000 	str.w	ip, [r1]
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 800310c:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(5)  = WriteAddress;
 800310e:	6030      	str	r0, [r6, #0]
	REG_DMA1_CNDTR(5) = BufSize;
	
	
	
	REG_DMA1_CCR(5) = 0
 8003110:	2090      	movs	r0, #144	; 0x90
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 8003112:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(5) = 0
 8003114:	6008      	str	r0, [r1, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(5) |= (1<<0);	// Channel enable
 8003116:	680a      	ldr	r2, [r1, #0]
 8003118:	f042 0301 	orr.w	r3, r2, #1
 800311c:	600b      	str	r3, [r1, #0]
}
 800311e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8003122:	4770      	bx	lr

08003124 <Hw_DMA_SPI2_IsTransFinished>:
---------------------------------------------------------------------------*/
u8 Hw_DMA_SPI2_IsTransFinished( void )
{
	u8 Ret = 0;
	
	if( REG_DMA1_ISR & (1<<13) )
 8003124:	2300      	movs	r3, #0
 8003126:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8003130:	d00a      	beq.n	8003148 <Hw_DMA_SPI2_IsTransFinished+0x24>
	{
		if( REG_DMA1_ISR & (1<<17) )
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	f411 3000 	ands.w	r0, r1, #131072	; 0x20000
 8003138:	d006      	beq.n	8003148 <Hw_DMA_SPI2_IsTransFinished+0x24>
		{
			REG_DMA1_IFCR = (1<<17) | (1<<13);
 800313a:	2304      	movs	r3, #4
 800313c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003140:	f44f 3208 	mov.w	r2, #139264	; 0x22000
 8003144:	601a      	str	r2, [r3, #0]
			Ret = 1;
 8003146:	2001      	movs	r0, #1
		}
	}
	return Ret;
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop

0800314c <Hw_I2C_IMU_IO_Setup>:
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 800314c:	2204      	movs	r2, #4
 800314e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003152:	6811      	ldr	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8003154:	f640 4304 	movw	r3, #3076	; 0xc04
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8003158:	f041 0002 	orr.w	r0, r1, #2
 800315c:	6010      	str	r0, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 800315e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	f022 010f 	bic.w	r1, r2, #15
 8003168:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	f040 0203 	orr.w	r2, r0, #3
 8003170:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	f041 000c 	orr.w	r0, r1, #12
 8003178:	6018      	str	r0, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8003180:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	f040 0230 	orr.w	r2, r0, #48	; 0x30
 8003188:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 800318a:	6819      	ldr	r1, [r3, #0]
 800318c:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 8003190:	6018      	str	r0, [r3, #0]
 8003192:	4770      	bx	lr

08003194 <Hw_I2C_IMU_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_IMU_Init( void )
{
 8003194:	b570      	push	{r4, r5, r6, lr}
	static u8 power_on = FALSE;
	u32 SR;



	if( power_on == TRUE ) return;
 8003196:	4c1e      	ldr	r4, [pc, #120]	; (8003210 <Hw_I2C_IMU_Init+0x7c>)
 8003198:	7823      	ldrb	r3, [r4, #0]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d036      	beq.n	800320c <Hw_I2C_IMU_Init+0x78>


	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	
 800319e:	481d      	ldr	r0, [pc, #116]	; (8003214 <Hw_I2C_IMU_Init+0x80>)
 80031a0:	4780      	blx	r0


	REG_I2C1_CR1 = 0;
 80031a2:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80031a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80031aa:	2600      	movs	r6, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 80031ac:	f245 4504 	movw	r5, #21508	; 0x5404
	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	


	REG_I2C1_CR1 = 0;
 80031b0:	601e      	str	r6, [r3, #0]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 80031b2:	f2c4 0500 	movt	r5, #16384	; 0x4000
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 80031b6:	f245 401c 	movw	r0, #21532	; 0x541c

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 80031ba:	2624      	movs	r6, #36	; 0x24
 80031bc:	602e      	str	r6, [r5, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 80031be:	f2c4 0000 	movt	r0, #16384	; 0x4000
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 80031c2:	f245 4120 	movw	r1, #21536	; 0x5420
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 80031c6:	f248 051e 	movw	r5, #32798	; 0x801e
 80031ca:	6005      	str	r5, [r0, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 80031cc:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80031d0:	200b      	movs	r0, #11


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 80031d2:	f241 021c 	movw	r2, #4124	; 0x101c
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 80031d6:	6008      	str	r0, [r1, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 80031d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80031dc:	6810      	ldr	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 80031de:	f245 4114 	movw	r1, #21524	; 0x5414
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 80031e2:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 80031e6:	6010      	str	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 80031e8:	6818      	ldr	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 80031ea:	f245 4218 	movw	r2, #21528	; 0x5418
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 80031ee:	f020 0002 	bic.w	r0, r0, #2
 80031f2:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 80031f4:	6818      	ldr	r0, [r3, #0]

	SR = REG_I2C1_SR1;
 80031f6:	f2c4 0100 	movt	r1, #16384	; 0x4000
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 80031fa:	f040 0001 	orr.w	r0, r0, #1
 80031fe:	6018      	str	r0, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8003200:	f2c4 0200 	movt	r2, #16384	; 0x4000


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8003204:	680b      	ldr	r3, [r1, #0]
	SR = REG_I2C1_SR2;
 8003206:	6813      	ldr	r3, [r2, #0]


	power_on = TRUE;
 8003208:	2301      	movs	r3, #1
 800320a:	7023      	strb	r3, [r4, #0]
 800320c:	bd70      	pop	{r4, r5, r6, pc}
 800320e:	bf00      	nop
 8003210:	20000484 	.word	0x20000484
 8003214:	0800314d 	.word	0x0800314d

08003218 <Hw_I2C_IMU_GetErrStatus>:
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
 8003218:	f245 4314 	movw	r3, #21524	; 0x5414
 800321c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003220:	681a      	ldr	r2, [r3, #0]
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 8003222:	6819      	ldr	r1, [r3, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
 8003224:	f412 6f00 	tst.w	r2, #2048	; 0x800
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 8003228:	681a      	ldr	r2, [r3, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
 800322a:	bf14      	ite	ne
 800322c:	200b      	movne	r0, #11
 800322e:	2000      	moveq	r0, #0
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 8003230:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8003234:	bf18      	it	ne
 8003236:	200a      	movne	r0, #10
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 8003238:	0592      	lsls	r2, r2, #22
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
 800323a:	b410      	push	{r4}
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 800323c:	681b      	ldr	r3, [r3, #0]
	u16 Err = 0;
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 800323e:	d505      	bpl.n	800324c <Hw_I2C_IMU_GetErrStatus+0x34>
 8003240:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003244:	bf14      	ite	ne
 8003246:	2008      	movne	r0, #8
 8003248:	2009      	moveq	r0, #9
 800324a:	e002      	b.n	8003252 <Hw_I2C_IMU_GetErrStatus+0x3a>
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 800324c:	05db      	lsls	r3, r3, #23
 800324e:	d51a      	bpl.n	8003286 <Hw_I2C_IMU_GetErrStatus+0x6e>
 8003250:	2008      	movs	r0, #8

	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
	{
		CLR_BIT( REG_I2C1_CR1, 0 );		// Peripheral disable	
 8003252:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8003256:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800325a:	681c      	ldr	r4, [r3, #0]
		SR = REG_I2C1_SR1;
 800325c:	f245 4114 	movw	r1, #21524	; 0x5414

	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
	{
		CLR_BIT( REG_I2C1_CR1, 0 );		// Peripheral disable	
 8003260:	f024 0401 	bic.w	r4, r4, #1
		SR = REG_I2C1_SR1;
		SR = REG_I2C1_SR2;
 8003264:	f245 4218 	movw	r2, #21528	; 0x5418

	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
	{
		CLR_BIT( REG_I2C1_CR1, 0 );		// Peripheral disable	
 8003268:	601c      	str	r4, [r3, #0]
		SR = REG_I2C1_SR1;
 800326a:	f2c4 0100 	movt	r1, #16384	; 0x4000
		SR = REG_I2C1_SR2;
 800326e:	f2c4 0200 	movt	r2, #16384	; 0x4000
	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
	{
		CLR_BIT( REG_I2C1_CR1, 0 );		// Peripheral disable	
		SR = REG_I2C1_SR1;
 8003272:	680c      	ldr	r4, [r1, #0]
		SR = REG_I2C1_SR2;
 8003274:	6814      	ldr	r4, [r2, #0]

		SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8003276:	681c      	ldr	r4, [r3, #0]
 8003278:	f044 0401 	orr.w	r4, r4, #1
 800327c:	601c      	str	r4, [r3, #0]
		SR = REG_I2C1_SR1;
 800327e:	680b      	ldr	r3, [r1, #0]
		SR = REG_I2C1_SR2;
 8003280:	6813      	ldr	r3, [r2, #0]
	}

	return Err;
}
 8003282:	bc10      	pop	{r4}
 8003284:	4770      	bx	lr
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;


	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
 8003286:	2800      	cmp	r0, #0
 8003288:	d0fb      	beq.n	8003282 <Hw_I2C_IMU_GetErrStatus+0x6a>
 800328a:	e7e2      	b.n	8003252 <Hw_I2C_IMU_GetErrStatus+0x3a>

0800328c <Hw_I2C_IMU_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_ReadRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_reg, u16 len )
{
 800328c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328e:	b08d      	sub	sp, #52	; 0x34
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;


	if( len > 0 ) LastIndex = len - 1;
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8117 	beq.w	80034c4 <Hw_I2C_IMU_ReadRegs+0x238>
 8003296:	1e5f      	subs	r7, r3, #1
 8003298:	b2ff      	uxtb	r7, r7
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 800329a:	f245 4514 	movw	r5, #21524	; 0x5414
 800329e:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80032a2:	682e      	ldr	r6, [r5, #0]
			SR2 = REG_I2C1_SR2;
 80032a4:	f245 4418 	movw	r4, #21528	; 0x5418
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 80032a8:	9600      	str	r6, [sp, #0]
			SR2 = REG_I2C1_SR2;
 80032aa:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80032ae:	6824      	ldr	r4, [r4, #0]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80032b0:	f44f 46a8 	mov.w	r6, #21504	; 0x5400
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
			SR2 = REG_I2C1_SR2;
 80032b4:	9401      	str	r4, [sp, #4]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80032b6:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80032ba:	f8d6 c000 	ldr.w	ip, [r6]
 80032be:	f242 7410 	movw	r4, #10000	; 0x2710
 80032c2:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 80032c6:	f8c6 c000 	str.w	ip, [r6]
 80032ca:	e008      	b.n	80032de <Hw_I2C_IMU_ReadRegs+0x52>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80032cc:	682e      	ldr	r6, [r5, #0]
 80032ce:	9602      	str	r6, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80032d0:	9e02      	ldr	r6, [sp, #8]
 80032d2:	f016 0f01 	tst.w	r6, #1
 80032d6:	d108      	bne.n	80032ea <Hw_I2C_IMU_ReadRegs+0x5e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80032d8:	3c01      	subs	r4, #1
 80032da:	f000 80f5 	beq.w	80034c8 <Hw_I2C_IMU_ReadRegs+0x23c>
	{
		Reg = *reg_addr;
 80032de:	682e      	ldr	r6, [r5, #0]
 80032e0:	3c01      	subs	r4, #1
 80032e2:	9602      	str	r6, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80032e4:	9e02      	ldr	r6, [sp, #8]
 80032e6:	07f6      	lsls	r6, r6, #31
 80032e8:	d5f0      	bpl.n	80032cc <Hw_I2C_IMU_ReadRegs+0x40>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80032ea:	f245 4518 	movw	r5, #21528	; 0x5418

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80032ee:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80032f2:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80032f6:	e008      	b.n	800330a <Hw_I2C_IMU_ReadRegs+0x7e>
 80032f8:	682e      	ldr	r6, [r5, #0]
 80032fa:	9603      	str	r6, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80032fc:	9e03      	ldr	r6, [sp, #12]
 80032fe:	f016 0f01 	tst.w	r6, #1
 8003302:	d108      	bne.n	8003316 <Hw_I2C_IMU_ReadRegs+0x8a>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003304:	3c01      	subs	r4, #1
 8003306:	f000 80df 	beq.w	80034c8 <Hw_I2C_IMU_ReadRegs+0x23c>
	{
		Reg = *reg_addr;
 800330a:	682e      	ldr	r6, [r5, #0]
 800330c:	3c01      	subs	r4, #1
 800330e:	9603      	str	r6, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003310:	9e03      	ldr	r6, [sp, #12]
 8003312:	07f6      	lsls	r6, r6, #31
 8003314:	d5f0      	bpl.n	80032f8 <Hw_I2C_IMU_ReadRegs+0x6c>



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8003316:	f245 4410 	movw	r4, #21520	; 0x5410
 800331a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800331e:	0040      	lsls	r0, r0, #1
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003320:	f245 4514 	movw	r5, #21524	; 0x5414



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8003324:	6020      	str	r0, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003326:	f2c4 0500 	movt	r5, #16384	; 0x4000



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 800332a:	f242 7410 	movw	r4, #10000	; 0x2710
 800332e:	e008      	b.n	8003342 <Hw_I2C_IMU_ReadRegs+0xb6>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003330:	682e      	ldr	r6, [r5, #0]
 8003332:	9604      	str	r6, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003334:	9e04      	ldr	r6, [sp, #16]
 8003336:	f016 0f02 	tst.w	r6, #2
 800333a:	d108      	bne.n	800334e <Hw_I2C_IMU_ReadRegs+0xc2>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800333c:	3c01      	subs	r4, #1
 800333e:	f000 80df 	beq.w	8003500 <Hw_I2C_IMU_ReadRegs+0x274>
	{
		Reg = *reg_addr;
 8003342:	682e      	ldr	r6, [r5, #0]
 8003344:	3c01      	subs	r4, #1
 8003346:	9604      	str	r6, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003348:	9e04      	ldr	r6, [sp, #16]
 800334a:	07b6      	lsls	r6, r6, #30
 800334c:	d5f0      	bpl.n	8003330 <Hw_I2C_IMU_ReadRegs+0xa4>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 800334e:	f245 4518 	movw	r5, #21528	; 0x5418
 8003352:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8003356:	682c      	ldr	r4, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003358:	f245 4514 	movw	r5, #21524	; 0x5414
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 800335c:	9401      	str	r4, [sp, #4]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800335e:	f2c4 0500 	movt	r5, #16384	; 0x4000
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003362:	f242 7410 	movw	r4, #10000	; 0x2710
 8003366:	e008      	b.n	800337a <Hw_I2C_IMU_ReadRegs+0xee>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003368:	682e      	ldr	r6, [r5, #0]
 800336a:	9605      	str	r6, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800336c:	9e05      	ldr	r6, [sp, #20]
 800336e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003372:	d108      	bne.n	8003386 <Hw_I2C_IMU_ReadRegs+0xfa>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003374:	3c01      	subs	r4, #1
 8003376:	f000 80cb 	beq.w	8003510 <Hw_I2C_IMU_ReadRegs+0x284>
	{
		Reg = *reg_addr;
 800337a:	682e      	ldr	r6, [r5, #0]
 800337c:	3c01      	subs	r4, #1
 800337e:	9605      	str	r6, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003380:	9e05      	ldr	r6, [sp, #20]
 8003382:	0636      	lsls	r6, r6, #24
 8003384:	d5f0      	bpl.n	8003368 <Hw_I2C_IMU_ReadRegs+0xdc>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003386:	f245 4514 	movw	r5, #21524	; 0x5414

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800338a:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800338e:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8003392:	e008      	b.n	80033a6 <Hw_I2C_IMU_ReadRegs+0x11a>
 8003394:	682e      	ldr	r6, [r5, #0]
 8003396:	9606      	str	r6, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003398:	9e06      	ldr	r6, [sp, #24]
 800339a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800339e:	d109      	bne.n	80033b4 <Hw_I2C_IMU_ReadRegs+0x128>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80033a0:	3c01      	subs	r4, #1
 80033a2:	f000 80b5 	beq.w	8003510 <Hw_I2C_IMU_ReadRegs+0x284>
	{
		Reg = *reg_addr;
 80033a6:	682e      	ldr	r6, [r5, #0]
 80033a8:	3c01      	subs	r4, #1
 80033aa:	9606      	str	r6, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80033ac:	9e06      	ldr	r6, [sp, #24]
 80033ae:	f016 0f80 	tst.w	r6, #128	; 0x80
 80033b2:	d0ef      	beq.n	8003394 <Hw_I2C_IMU_ReadRegs+0x108>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 80033b4:	f245 4510 	movw	r5, #21520	; 0x5410
 80033b8:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80033bc:	f245 4414 	movw	r4, #21524	; 0x5414
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 80033c0:	6029      	str	r1, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80033c2:	f2c4 0400 	movt	r4, #16384	; 0x4000
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 80033c6:	f242 7110 	movw	r1, #10000	; 0x2710
 80033ca:	e008      	b.n	80033de <Hw_I2C_IMU_ReadRegs+0x152>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80033cc:	6825      	ldr	r5, [r4, #0]
 80033ce:	9507      	str	r5, [sp, #28]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80033d0:	9d07      	ldr	r5, [sp, #28]
 80033d2:	f015 0f04 	tst.w	r5, #4
 80033d6:	d108      	bne.n	80033ea <Hw_I2C_IMU_ReadRegs+0x15e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80033d8:	3901      	subs	r1, #1
 80033da:	f000 80a5 	beq.w	8003528 <Hw_I2C_IMU_ReadRegs+0x29c>
	{
		Reg = *reg_addr;
 80033de:	6825      	ldr	r5, [r4, #0]
 80033e0:	3901      	subs	r1, #1
 80033e2:	9507      	str	r5, [sp, #28]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80033e4:	9d07      	ldr	r5, [sp, #28]
 80033e6:	076d      	lsls	r5, r5, #29
 80033e8:	d5f0      	bpl.n	80033cc <Hw_I2C_IMU_ReadRegs+0x140>



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80033ea:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 80033ee:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80033f2:	680d      	ldr	r5, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80033f4:	f245 4414 	movw	r4, #21524	; 0x5414



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80033f8:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 80033fc:	600d      	str	r5, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80033fe:	f2c4 0400 	movt	r4, #16384	; 0x4000



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8003402:	f242 7110 	movw	r1, #10000	; 0x2710
 8003406:	e007      	b.n	8003418 <Hw_I2C_IMU_ReadRegs+0x18c>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003408:	6825      	ldr	r5, [r4, #0]
 800340a:	9508      	str	r5, [sp, #32]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800340c:	9d08      	ldr	r5, [sp, #32]
 800340e:	f015 0f01 	tst.w	r5, #1
 8003412:	d108      	bne.n	8003426 <Hw_I2C_IMU_ReadRegs+0x19a>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003414:	3901      	subs	r1, #1
 8003416:	d057      	beq.n	80034c8 <Hw_I2C_IMU_ReadRegs+0x23c>
	{
		Reg = *reg_addr;
 8003418:	6825      	ldr	r5, [r4, #0]
 800341a:	3901      	subs	r1, #1
 800341c:	9508      	str	r5, [sp, #32]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800341e:	9d08      	ldr	r5, [sp, #32]
 8003420:	f015 0f01 	tst.w	r5, #1
 8003424:	d0f0      	beq.n	8003408 <Hw_I2C_IMU_ReadRegs+0x17c>
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 8003426:	f245 4110 	movw	r1, #21520	; 0x5410
 800342a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800342e:	f040 0001 	orr.w	r0, r0, #1
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003432:	f245 4414 	movw	r4, #21524	; 0x5414
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 8003436:	6008      	str	r0, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003438:	f2c4 0400 	movt	r4, #16384	; 0x4000
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 800343c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003440:	e006      	b.n	8003450 <Hw_I2C_IMU_ReadRegs+0x1c4>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003442:	6820      	ldr	r0, [r4, #0]
 8003444:	9009      	str	r0, [sp, #36]	; 0x24

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003446:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003448:	0780      	lsls	r0, r0, #30
 800344a:	d407      	bmi.n	800345c <Hw_I2C_IMU_ReadRegs+0x1d0>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800344c:	3901      	subs	r1, #1
 800344e:	d057      	beq.n	8003500 <Hw_I2C_IMU_ReadRegs+0x274>
	{
		Reg = *reg_addr;
 8003450:	6820      	ldr	r0, [r4, #0]
 8003452:	3901      	subs	r1, #1
 8003454:	9009      	str	r0, [sp, #36]	; 0x24

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003456:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003458:	0780      	lsls	r0, r0, #30
 800345a:	d5f2      	bpl.n	8003442 <Hw_I2C_IMU_ReadRegs+0x1b6>
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 800345c:	f245 4018 	movw	r0, #21528	; 0x5418
 8003460:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003464:	6801      	ldr	r1, [r0, #0]
 8003466:	9101      	str	r1, [sp, #4]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8003468:	b353      	cbz	r3, 80034c0 <Hw_I2C_IMU_ReadRegs+0x234>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 800346a:	f44f 45a8 	mov.w	r5, #21504	; 0x5400
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800346e:	f245 4014 	movw	r0, #21524	; 0x5414


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, HW_I2C_IMU_TIMEOUT );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 8003472:	f245 4c10 	movw	ip, #21520	; 0x5410
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8003476:	2600      	movs	r6, #0
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 8003478:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800347c:	f2c4 0000 	movt	r0, #16384	; 0x4000


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, HW_I2C_IMU_TIMEOUT );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 8003480:	f2c4 0c00 	movt	ip, #16384	; 0x4000

			//-- Read DATA
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
 8003484:	42b7      	cmp	r7, r6
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 8003486:	682c      	ldr	r4, [r5, #0]

			//-- Read DATA
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
 8003488:	d944      	bls.n	8003514 <Hw_I2C_IMU_ReadRegs+0x288>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 800348a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 800348e:	602c      	str	r4, [r5, #0]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8003490:	f242 7110 	movw	r1, #10000	; 0x2710
 8003494:	e007      	b.n	80034a6 <Hw_I2C_IMU_ReadRegs+0x21a>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003496:	6804      	ldr	r4, [r0, #0]
 8003498:	940a      	str	r4, [sp, #40]	; 0x28

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800349a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800349c:	f014 0f40 	tst.w	r4, #64	; 0x40
 80034a0:	d107      	bne.n	80034b2 <Hw_I2C_IMU_ReadRegs+0x226>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80034a2:	3901      	subs	r1, #1
 80034a4:	d03e      	beq.n	8003524 <Hw_I2C_IMU_ReadRegs+0x298>
	{
		Reg = *reg_addr;
 80034a6:	6804      	ldr	r4, [r0, #0]
 80034a8:	3901      	subs	r1, #1
 80034aa:	940a      	str	r4, [sp, #40]	; 0x28

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80034ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80034ae:	0664      	lsls	r4, r4, #25
 80034b0:	d5f1      	bpl.n	8003496 <Hw_I2C_IMU_ReadRegs+0x20a>


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, HW_I2C_IMU_TIMEOUT );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 80034b2:	f8dc 4000 	ldr.w	r4, [ip]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80034b6:	1c71      	adds	r1, r6, #1


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, HW_I2C_IMU_TIMEOUT );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 80034b8:	5594      	strb	r4, [r2, r6]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80034ba:	b2ce      	uxtb	r6, r1
 80034bc:	42b3      	cmp	r3, r6
 80034be:	d8e1      	bhi.n	8003484 <Hw_I2C_IMU_ReadRegs+0x1f8>
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_ReadRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_reg, u16 len )
{
    u16 Ret = 0;
    u16 Err = 0;
 80034c0:	2000      	movs	r0, #0
 80034c2:	e002      	b.n	80034ca <Hw_I2C_IMU_ReadRegs+0x23e>
	u8  i;
	u32 TimeOut;
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;
 80034c4:	461f      	mov	r7, r3
 80034c6:	e6e8      	b.n	800329a <Hw_I2C_IMU_ReadRegs+0xe>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 80034c8:	2002      	movs	r0, #2
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80034ca:	f245 4218 	movw	r2, #21528	; 0x5418
				{
					ptr_reg[i] = REG_I2C1_DR;
				}
				else
				{
					Err = HW_I2C_ERR_RXE;
 80034ce:	f242 7310 	movw	r3, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80034d2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80034d6:	e006      	b.n	80034e6 <Hw_I2C_IMU_ReadRegs+0x25a>
 80034d8:	6811      	ldr	r1, [r2, #0]
 80034da:	910b      	str	r1, [sp, #44]	; 0x2c

		if( IS_CLR_BIT( Reg, reg_bit ) ) break;
 80034dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034de:	0789      	lsls	r1, r1, #30
 80034e0:	d507      	bpl.n	80034f2 <Hw_I2C_IMU_ReadRegs+0x266>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80034e2:	3b01      	subs	r3, #1
 80034e4:	d00a      	beq.n	80034fc <Hw_I2C_IMU_ReadRegs+0x270>
	{
		Reg = *reg_addr;
 80034e6:	6811      	ldr	r1, [r2, #0]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	910b      	str	r1, [sp, #44]	; 0x2c

		if( IS_CLR_BIT( Reg, reg_bit ) ) break;
 80034ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034ee:	0789      	lsls	r1, r1, #30
 80034f0:	d4f2      	bmi.n	80034d8 <Hw_I2C_IMU_ReadRegs+0x24c>
	Ret = Hw_I2C_IMU_WaitForBitClr( (u32 *)&REG_I2C1_SR2, 1, HW_I2C_IMU_TIMEOUT );

	if( Ret != 0 )	Err = HW_I2C_ERR_END;


	if( Err == 0 )
 80034f2:	b908      	cbnz	r0, 80034f8 <Hw_I2C_IMU_ReadRegs+0x26c>
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 80034f4:	480d      	ldr	r0, [pc, #52]	; (800352c <Hw_I2C_IMU_ReadRegs+0x2a0>)
 80034f6:	4780      	blx	r0
	}
	

    return Err;

}
 80034f8:	b00d      	add	sp, #52	; 0x34
 80034fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

	//-- I2C가 Idle일때까지 기다린다.
	//
	Ret = Hw_I2C_IMU_WaitForBitClr( (u32 *)&REG_I2C1_SR2, 1, HW_I2C_IMU_TIMEOUT );

	if( Ret != 0 )	Err = HW_I2C_ERR_END;
 80034fc:	2007      	movs	r0, #7
 80034fe:	e7fb      	b.n	80034f8 <Hw_I2C_IMU_ReadRegs+0x26c>
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003500:	f245 4318 	movw	r3, #21528	; 0x5418
 8003504:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003508:	681a      	ldr	r2, [r3, #0]

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 800350a:	2003      	movs	r0, #3
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 800350c:	9201      	str	r2, [sp, #4]
 800350e:	e7dc      	b.n	80034ca <Hw_I2C_IMU_ReadRegs+0x23e>

			
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, HW_I2C_IMU_TIMEOUT );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 8003510:	2004      	movs	r0, #4
 8003512:	e7da      	b.n	80034ca <Hw_I2C_IMU_ReadRegs+0x23e>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 8003514:	f424 6180 	bic.w	r1, r4, #1024	; 0x400
 8003518:	6029      	str	r1, [r5, #0]
					SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 800351a:	682c      	ldr	r4, [r5, #0]
 800351c:	f444 7100 	orr.w	r1, r4, #512	; 0x200
 8003520:	6029      	str	r1, [r5, #0]
 8003522:	e7b5      	b.n	8003490 <Hw_I2C_IMU_ReadRegs+0x204>
				{
					ptr_reg[i] = REG_I2C1_DR;
				}
				else
				{
					Err = HW_I2C_ERR_RXE;
 8003524:	2005      	movs	r0, #5
 8003526:	e7d0      	b.n	80034ca <Hw_I2C_IMU_ReadRegs+0x23e>


			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, HW_I2C_IMU_TIMEOUT );	// BTF
			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_STOP;
 8003528:	2006      	movs	r0, #6
 800352a:	e7ce      	b.n	80034ca <Hw_I2C_IMU_ReadRegs+0x23e>
 800352c:	08003219 	.word	0x08003219

08003530 <Hw_I2C_IMU_HMC5883_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4606      	mov	r6, r0
 8003534:	460d      	mov	r5, r1
	}
	

	return Ret;
	*/
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_reg, len );
 8003536:	f243 248d 	movw	r4, #12941	; 0x328d
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 800353a:	4613      	mov	r3, r2
	}
	

	return Ret;
	*/
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_reg, len );
 800353c:	201e      	movs	r0, #30
 800353e:	4631      	mov	r1, r6
 8003540:	462a      	mov	r2, r5
 8003542:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003546:	47a0      	blx	r4
}
 8003548:	bd70      	pop	{r4, r5, r6, pc}
 800354a:	bf00      	nop

0800354c <Hw_I2C_IMU_HMC5883_ReadReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 800354c:	4603      	mov	r3, r0
 800354e:	b510      	push	{r4, lr}
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_reg, 1 );
 8003550:	f243 248d 	movw	r4, #12941	; 0x328d
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 8003554:	460a      	mov	r2, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_reg, 1 );
 8003556:	201e      	movs	r0, #30
 8003558:	4619      	mov	r1, r3
 800355a:	f6c0 0400 	movt	r4, #2048	; 0x800
 800355e:	2301      	movs	r3, #1
 8003560:	47a0      	blx	r4
}
 8003562:	bd10      	pop	{r4, pc}

08003564 <Hw_I2C_IMU_MPU6050_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	4606      	mov	r6, r0
 8003568:	460d      	mov	r5, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, len );
 800356a:	f243 248d 	movw	r4, #12941	; 0x328d
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 800356e:	4613      	mov	r3, r2
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, len );
 8003570:	2068      	movs	r0, #104	; 0x68
 8003572:	4631      	mov	r1, r6
 8003574:	462a      	mov	r2, r5
 8003576:	f6c0 0400 	movt	r4, #2048	; 0x800
 800357a:	47a0      	blx	r4
}
 800357c:	bd70      	pop	{r4, r5, r6, pc}
 800357e:	bf00      	nop

08003580 <Hw_I2C_IMU_MPU6050_ReadReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 8003580:	4603      	mov	r3, r0
 8003582:	b510      	push	{r4, lr}
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, 1 );
 8003584:	f243 248d 	movw	r4, #12941	; 0x328d
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 8003588:	460a      	mov	r2, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, 1 );
 800358a:	2068      	movs	r0, #104	; 0x68
 800358c:	4619      	mov	r1, r3
 800358e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003592:	2301      	movs	r3, #1
 8003594:	47a0      	blx	r4
}
 8003596:	bd10      	pop	{r4, pc}

08003598 <Hw_I2C_IMU_WriteRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 8003598:	b570      	push	{r4, r5, r6, lr}

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 800359a:	f44f 44a8 	mov.w	r4, #21504	; 0x5400
 800359e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80035a2:	6826      	ldr	r6, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80035a4:	f245 4514 	movw	r5, #21524	; 0x5414

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80035a8:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 80035ac:	6026      	str	r6, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 80035ae:	b088      	sub	sp, #32

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80035b0:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80035b4:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80035b8:	e008      	b.n	80035cc <Hw_I2C_IMU_WriteRegs+0x34>
 80035ba:	682e      	ldr	r6, [r5, #0]
 80035bc:	9601      	str	r6, [sp, #4]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80035be:	9e01      	ldr	r6, [sp, #4]
 80035c0:	f016 0f01 	tst.w	r6, #1
 80035c4:	d109      	bne.n	80035da <Hw_I2C_IMU_WriteRegs+0x42>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80035c6:	3c01      	subs	r4, #1
 80035c8:	f000 8097 	beq.w	80036fa <Hw_I2C_IMU_WriteRegs+0x162>
	{
		Reg = *reg_addr;
 80035cc:	682e      	ldr	r6, [r5, #0]
 80035ce:	3c01      	subs	r4, #1
 80035d0:	9601      	str	r6, [sp, #4]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80035d2:	9e01      	ldr	r6, [sp, #4]
 80035d4:	f016 0f01 	tst.w	r6, #1
 80035d8:	d0ef      	beq.n	80035ba <Hw_I2C_IMU_WriteRegs+0x22>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 80035da:	f245 4510 	movw	r5, #21520	; 0x5410
 80035de:	0040      	lsls	r0, r0, #1
 80035e0:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80035e4:	f245 4414 	movw	r4, #21524	; 0x5414
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 80035e8:	6028      	str	r0, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80035ea:	f2c4 0400 	movt	r4, #16384	; 0x4000
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 80035ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80035f2:	e007      	b.n	8003604 <Hw_I2C_IMU_WriteRegs+0x6c>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80035f4:	6825      	ldr	r5, [r4, #0]
 80035f6:	9502      	str	r5, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80035f8:	9d02      	ldr	r5, [sp, #8]
 80035fa:	f015 0f02 	tst.w	r5, #2
 80035fe:	d107      	bne.n	8003610 <Hw_I2C_IMU_WriteRegs+0x78>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003600:	3801      	subs	r0, #1
 8003602:	d05b      	beq.n	80036bc <Hw_I2C_IMU_WriteRegs+0x124>
	{
		Reg = *reg_addr;
 8003604:	6825      	ldr	r5, [r4, #0]
 8003606:	3801      	subs	r0, #1
 8003608:	9502      	str	r5, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800360a:	9d02      	ldr	r5, [sp, #8]
 800360c:	07ad      	lsls	r5, r5, #30
 800360e:	d5f1      	bpl.n	80035f4 <Hw_I2C_IMU_WriteRegs+0x5c>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003610:	f245 4518 	movw	r5, #21528	; 0x5418
 8003614:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003618:	f245 4414 	movw	r4, #21524	; 0x5414
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 800361c:	6828      	ldr	r0, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800361e:	f2c4 0400 	movt	r4, #16384	; 0x4000
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003622:	f242 7010 	movw	r0, #10000	; 0x2710
 8003626:	e008      	b.n	800363a <Hw_I2C_IMU_WriteRegs+0xa2>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003628:	6825      	ldr	r5, [r4, #0]
 800362a:	9503      	str	r5, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800362c:	9d03      	ldr	r5, [sp, #12]
 800362e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003632:	d108      	bne.n	8003646 <Hw_I2C_IMU_WriteRegs+0xae>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003634:	3801      	subs	r0, #1
 8003636:	f000 8082 	beq.w	800373e <Hw_I2C_IMU_WriteRegs+0x1a6>
	{
		Reg = *reg_addr;
 800363a:	6825      	ldr	r5, [r4, #0]
 800363c:	3801      	subs	r0, #1
 800363e:	9503      	str	r5, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003640:	9d03      	ldr	r5, [sp, #12]
 8003642:	062d      	lsls	r5, r5, #24
 8003644:	d5f0      	bpl.n	8003628 <Hw_I2C_IMU_WriteRegs+0x90>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003646:	f245 4414 	movw	r4, #21524	; 0x5414

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800364a:	f242 7010 	movw	r0, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800364e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003652:	e007      	b.n	8003664 <Hw_I2C_IMU_WriteRegs+0xcc>
 8003654:	6825      	ldr	r5, [r4, #0]
 8003656:	9504      	str	r5, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003658:	9d04      	ldr	r5, [sp, #16]
 800365a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800365e:	d108      	bne.n	8003672 <Hw_I2C_IMU_WriteRegs+0xda>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003660:	3801      	subs	r0, #1
 8003662:	d06c      	beq.n	800373e <Hw_I2C_IMU_WriteRegs+0x1a6>
	{
		Reg = *reg_addr;
 8003664:	6825      	ldr	r5, [r4, #0]
 8003666:	3801      	subs	r0, #1
 8003668:	9504      	str	r5, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800366a:	9d04      	ldr	r5, [sp, #16]
 800366c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003670:	d0f0      	beq.n	8003654 <Hw_I2C_IMU_WriteRegs+0xbc>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;	
 8003672:	f245 4610 	movw	r6, #21520	; 0x5410
 8003676:	f2c4 0600 	movt	r6, #16384	; 0x4000
 800367a:	6031      	str	r1, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
    u16 Ret = 0;
    u16 Err = 0;
 800367c:	4618      	mov	r0, r3

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 800367e:	2b00      	cmp	r3, #0
 8003680:	d054      	beq.n	800372c <Hw_I2C_IMU_WriteRegs+0x194>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003682:	f245 4414 	movw	r4, #21524	; 0x5414

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 8003686:	2500      	movs	r5, #0
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003688:	f2c4 0400 	movt	r4, #16384	; 0x4000

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800368c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003690:	e006      	b.n	80036a0 <Hw_I2C_IMU_WriteRegs+0x108>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003692:	6820      	ldr	r0, [r4, #0]
 8003694:	9005      	str	r0, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003696:	9805      	ldr	r0, [sp, #20]
 8003698:	0600      	lsls	r0, r0, #24
 800369a:	d407      	bmi.n	80036ac <Hw_I2C_IMU_WriteRegs+0x114>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800369c:	3901      	subs	r1, #1
 800369e:	d030      	beq.n	8003702 <Hw_I2C_IMU_WriteRegs+0x16a>
	{
		Reg = *reg_addr;
 80036a0:	6820      	ldr	r0, [r4, #0]
 80036a2:	3901      	subs	r1, #1
 80036a4:	9005      	str	r0, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80036a6:	9805      	ldr	r0, [sp, #20]
 80036a8:	0600      	lsls	r0, r0, #24
 80036aa:	d5f2      	bpl.n	8003692 <Hw_I2C_IMU_WriteRegs+0xfa>
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 80036ac:	5d50      	ldrb	r0, [r2, r5]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 80036ae:	3501      	adds	r5, #1
 80036b0:	b2ed      	uxtb	r5, r5
 80036b2:	429d      	cmp	r5, r3
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 80036b4:	6030      	str	r0, [r6, #0]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 80036b6:	d3e9      	bcc.n	800368c <Hw_I2C_IMU_WriteRegs+0xf4>
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
    u16 Ret = 0;
    u16 Err = 0;
 80036b8:	2000      	movs	r0, #0
 80036ba:	e023      	b.n	8003704 <Hw_I2C_IMU_WriteRegs+0x16c>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80036bc:	f245 4318 	movw	r3, #21528	; 0x5418
 80036c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80036c4:	681b      	ldr	r3, [r3, #0]

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 80036c6:	2003      	movs	r0, #3
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80036c8:	f245 4218 	movw	r2, #21528	; 0x5418
			if( len > 0 )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, HW_I2C_IMU_TIMEOUT );	// BTF
				if( Ret != 0 ) 
				{
					Err = HW_I2C_ERR_STOP;
 80036cc:	f242 7310 	movw	r3, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80036d0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80036d4:	e006      	b.n	80036e4 <Hw_I2C_IMU_WriteRegs+0x14c>
 80036d6:	6811      	ldr	r1, [r2, #0]
 80036d8:	9107      	str	r1, [sp, #28]

		if( IS_CLR_BIT( Reg, reg_bit ) ) break;
 80036da:	9907      	ldr	r1, [sp, #28]
 80036dc:	0789      	lsls	r1, r1, #30
 80036de:	d507      	bpl.n	80036f0 <Hw_I2C_IMU_WriteRegs+0x158>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80036e0:	3b01      	subs	r3, #1
 80036e2:	d00c      	beq.n	80036fe <Hw_I2C_IMU_WriteRegs+0x166>
	{
		Reg = *reg_addr;
 80036e4:	6811      	ldr	r1, [r2, #0]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	9107      	str	r1, [sp, #28]

		if( IS_CLR_BIT( Reg, reg_bit ) ) break;
 80036ea:	9907      	ldr	r1, [sp, #28]
 80036ec:	0789      	lsls	r1, r1, #30
 80036ee:	d4f2      	bmi.n	80036d6 <Hw_I2C_IMU_WriteRegs+0x13e>

	if( Ret != 0 )	Err = HW_I2C_ERR_END;



	if( Err == 0 )
 80036f0:	b908      	cbnz	r0, 80036f6 <Hw_I2C_IMU_WriteRegs+0x15e>
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 80036f2:	4815      	ldr	r0, [pc, #84]	; (8003748 <Hw_I2C_IMU_WriteRegs+0x1b0>)
 80036f4:	4780      	blx	r0
	}
	

    return Err;
}
 80036f6:	b008      	add	sp, #32
 80036f8:	bd70      	pop	{r4, r5, r6, pc}
			SET_BIT( REG_I2C1_CR1, 8 );

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 0, HW_I2C_IMU_TIMEOUT );
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 80036fa:	2002      	movs	r0, #2
 80036fc:	e7e4      	b.n	80036c8 <Hw_I2C_IMU_WriteRegs+0x130>

	//-- I2C가 Idle일때까지 기다린다.
	//
	Ret = Hw_I2C_IMU_WaitForBitClr( (u32 *)&REG_I2C1_SR2, 1, HW_I2C_IMU_TIMEOUT );

	if( Ret != 0 )	Err = HW_I2C_ERR_END;
 80036fe:	2007      	movs	r0, #7
 8003700:	e7f9      	b.n	80036f6 <Hw_I2C_IMU_WriteRegs+0x15e>
			for( i=0; i<len; i++ )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, HW_I2C_IMU_TIMEOUT );	// TXE
				if( Ret != 0 )
				{
					Err = HW_I2C_ERR_TXE;
 8003702:	2004      	movs	r0, #4
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003704:	f245 4214 	movw	r2, #21524	; 0x5414
			for( i=0; i<len; i++ )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, HW_I2C_IMU_TIMEOUT );	// TXE
				if( Ret != 0 )
				{
					Err = HW_I2C_ERR_TXE;
 8003708:	f242 7310 	movw	r3, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800370c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003710:	e006      	b.n	8003720 <Hw_I2C_IMU_WriteRegs+0x188>
 8003712:	6811      	ldr	r1, [r2, #0]
 8003714:	9106      	str	r1, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003716:	9906      	ldr	r1, [sp, #24]
 8003718:	0749      	lsls	r1, r1, #29
 800371a:	d407      	bmi.n	800372c <Hw_I2C_IMU_WriteRegs+0x194>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800371c:	3b01      	subs	r3, #1
 800371e:	d010      	beq.n	8003742 <Hw_I2C_IMU_WriteRegs+0x1aa>
	{
		Reg = *reg_addr;
 8003720:	6811      	ldr	r1, [r2, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	9106      	str	r1, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003726:	9906      	ldr	r1, [sp, #24]
 8003728:	0749      	lsls	r1, r1, #29
 800372a:	d5f2      	bpl.n	8003712 <Hw_I2C_IMU_WriteRegs+0x17a>
					Err = HW_I2C_ERR_STOP;
					break;
				}
			}

			SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 800372c:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8003730:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8003734:	680a      	ldr	r2, [r1, #0]
 8003736:	f442 7300 	orr.w	r3, r2, #512	; 0x200
 800373a:	600b      	str	r3, [r1, #0]
			break;
 800373c:	e7c4      	b.n	80036c8 <Hw_I2C_IMU_WriteRegs+0x130>
			//Lb_printf("S2 %x\n", REG_I2C1_SR2);
				
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, HW_I2C_IMU_TIMEOUT );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 800373e:	2004      	movs	r0, #4
 8003740:	e7c2      	b.n	80036c8 <Hw_I2C_IMU_WriteRegs+0x130>
			if( len > 0 )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, HW_I2C_IMU_TIMEOUT );	// BTF
				if( Ret != 0 ) 
				{
					Err = HW_I2C_ERR_STOP;
 8003742:	2006      	movs	r0, #6
 8003744:	e7c0      	b.n	80036c8 <Hw_I2C_IMU_WriteRegs+0x130>
 8003746:	bf00      	nop
 8003748:	08003219 	.word	0x08003219

0800374c <Hw_I2C_IMU_HMC5883_WriteRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteRegs( u8 reg_addr, u8 *ptr_data, u16 len )
{
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	4606      	mov	r6, r0
 8003750:	460d      	mov	r5, r1
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_data, len );
 8003752:	f243 5499 	movw	r4, #13721	; 0x3599
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteRegs( u8 reg_addr, u8 *ptr_data, u16 len )
{
 8003756:	4613      	mov	r3, r2
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_data, len );
 8003758:	201e      	movs	r0, #30
 800375a:	4631      	mov	r1, r6
 800375c:	462a      	mov	r2, r5
 800375e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003762:	47a0      	blx	r4
}
 8003764:	bd70      	pop	{r4, r5, r6, pc}
 8003766:	bf00      	nop

08003768 <Hw_I2C_IMU_HMC5883_WriteAddr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteAddr( u8 reg_addr )
{
 8003768:	b510      	push	{r4, lr}
	u8 reg_data;

	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, &reg_data, 0 );
 800376a:	f243 5499 	movw	r4, #13721	; 0x3599
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteAddr( u8 reg_addr )
{
 800376e:	b082      	sub	sp, #8
 8003770:	4601      	mov	r1, r0
	u8 reg_data;

	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, &reg_data, 0 );
 8003772:	f10d 0207 	add.w	r2, sp, #7
 8003776:	201e      	movs	r0, #30
 8003778:	2300      	movs	r3, #0
 800377a:	f6c0 0400 	movt	r4, #2048	; 0x800
 800377e:	47a0      	blx	r4
}
 8003780:	b002      	add	sp, #8
 8003782:	bd10      	pop	{r4, pc}

08003784 <Hw_I2C_IMU_MPU6050_WriteReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_WriteReg( u8 reg_addr, u8 reg_data )
{
 8003784:	b510      	push	{r4, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	4603      	mov	r3, r0
 800378a:	aa02      	add	r2, sp, #8
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, &reg_data, 1 );
 800378c:	f243 5499 	movw	r4, #13721	; 0x3599
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_WriteReg( u8 reg_addr, u8 reg_data )
{
 8003790:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, &reg_data, 1 );
 8003794:	2068      	movs	r0, #104	; 0x68
 8003796:	4619      	mov	r1, r3
 8003798:	f6c0 0400 	movt	r4, #2048	; 0x800
 800379c:	2301      	movs	r3, #1
 800379e:	47a0      	blx	r4
}
 80037a0:	b002      	add	sp, #8
 80037a2:	bd10      	pop	{r4, pc}

080037a4 <Hw_MPU6050_GetData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_GetData( HW_MPU6050_DATA_OBJ *ptr_data )
{
 80037a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a8:	b089      	sub	sp, #36	; 0x24
 80037aa:	4604      	mov	r4, r0
	s16 Temp;

	HW_MPU6050_RAW_DATA_OBJ raw_data;


	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );
 80037ac:	a904      	add	r1, sp, #16
 80037ae:	203b      	movs	r0, #59	; 0x3b
 80037b0:	220e      	movs	r2, #14
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <Hw_MPU6050_GetData+0xa8>)
 80037b4:	4798      	blx	r3

	if( Err == 0 )
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d145      	bne.n	8003846 <Hw_MPU6050_GetData+0xa2>

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
 80037ba:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80037be:	f89d 1017 	ldrb.w	r1, [sp, #23]
		Temp = Temp/340 + 36;
 80037c2:	f246 0b61 	movw	fp, #24673	; 0x6061

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
 80037c6:	ea41 2502 	orr.w	r5, r1, r2, lsl #8
		Temp = Temp/340 + 36;
 80037ca:	b22b      	sxth	r3, r5
 80037cc:	f2c6 0b60 	movt	fp, #24672	; 0x6060
 80037d0:	fb8b 2b03 	smull	r2, fp, fp, r3
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 80037d4:	f89d 2019 	ldrb.w	r2, [sp, #25]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 80037d8:	f89d 101a 	ldrb.w	r1, [sp, #26]
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 80037dc:	9201      	str	r2, [sp, #4]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 80037de:	f89d 201b 	ldrb.w	r2, [sp, #27]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 80037e2:	f89d a010 	ldrb.w	sl, [sp, #16]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 80037e6:	f89d 8012 	ldrb.w	r8, [sp, #18]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 80037ea:	f89d 7014 	ldrb.w	r7, [sp, #20]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 80037ee:	f89d 9011 	ldrb.w	r9, [sp, #17]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 80037f2:	f89d c013 	ldrb.w	ip, [sp, #19]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 80037f6:	f89d 6015 	ldrb.w	r6, [sp, #21]

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 80037fa:	9102      	str	r1, [sp, #8]
 80037fc:	9203      	str	r2, [sp, #12]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 80037fe:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8003802:	ea4c 2e08 	orr.w	lr, ip, r8, lsl #8
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 8003806:	ea46 2607 	orr.w	r6, r6, r7, lsl #8

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 800380a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800380e:	9f01      	ldr	r7, [sp, #4]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8003810:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8003814:	f89d 201d 	ldrb.w	r2, [sp, #29]

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8003818:	17db      	asrs	r3, r3, #31
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 800381a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800381e:	f8dd a008 	ldr.w	sl, [sp, #8]
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8003822:	ebc3 13eb 	rsb	r3, r3, fp, asr #7
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8003826:	ea47 2505 	orr.w	r5, r7, r5, lsl #8
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 800382a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 800382e:	ea48 270a 	orr.w	r7, r8, sl, lsl #8
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8003832:	3324      	adds	r3, #36	; 0x24

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 8003834:	f8a4 9000 	strh.w	r9, [r4]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8003838:	f8a4 e002 	strh.w	lr, [r4, #2]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 800383c:	80a6      	strh	r6, [r4, #4]

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 800383e:	8125      	strh	r5, [r4, #8]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8003840:	8167      	strh	r7, [r4, #10]
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8003842:	81a1      	strh	r1, [r4, #12]

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
		ptr_data->Temp = Temp;
 8003844:	80e3      	strh	r3, [r4, #6]
	}

	return Err;
}
 8003846:	b009      	add	sp, #36	; 0x24
 8003848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800384c:	08003565 	.word	0x08003565

08003850 <Hw_MPU6050_I2CAuxMasterDisable>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_I2CAuxMasterDisable( void )
{
 8003850:	b500      	push	{lr}
 8003852:	b087      	sub	sp, #28
	u16 Err;
	u8  RegData[20];

	//-- I2C_BYPASS_EN = 1
	//
	Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_INT_PIN_CFG, RegData );
 8003854:	2037      	movs	r0, #55	; 0x37
 8003856:	a901      	add	r1, sp, #4
 8003858:	4b07      	ldr	r3, [pc, #28]	; (8003878 <Hw_MPU6050_I2CAuxMasterDisable+0x28>)
 800385a:	4798      	blx	r3
	if( Err ) return Err;
 800385c:	b948      	cbnz	r0, 8003872 <Hw_MPU6050_I2CAuxMasterDisable+0x22>

	SET_BIT( RegData[0], 1 );
 800385e:	f89d 1004 	ldrb.w	r1, [sp, #4]

	Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_INT_PIN_CFG, RegData[0] );
 8003862:	2037      	movs	r0, #55	; 0x37
	//-- I2C_BYPASS_EN = 1
	//
	Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_INT_PIN_CFG, RegData );
	if( Err ) return Err;

	SET_BIT( RegData[0], 1 );
 8003864:	f041 0202 	orr.w	r2, r1, #2

	Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_INT_PIN_CFG, RegData[0] );
 8003868:	4611      	mov	r1, r2
 800386a:	4b04      	ldr	r3, [pc, #16]	; (800387c <Hw_MPU6050_I2CAuxMasterDisable+0x2c>)
	//-- I2C_BYPASS_EN = 1
	//
	Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_INT_PIN_CFG, RegData );
	if( Err ) return Err;

	SET_BIT( RegData[0], 1 );
 800386c:	f88d 2004 	strb.w	r2, [sp, #4]

	Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_INT_PIN_CFG, RegData[0] );
 8003870:	4798      	blx	r3

	return Err;
}
 8003872:	b007      	add	sp, #28
 8003874:	bd00      	pop	{pc}
 8003876:	bf00      	nop
 8003878:	08003581 	.word	0x08003581
 800387c:	08003785 	.word	0x08003785

08003880 <Hw_MPU6050_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_Init( void )
{
 8003880:	b570      	push	{r4, r5, r6, lr}
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_MPU6050_EnableFlag == TRUE ) return TRUE;
 8003882:	4e27      	ldr	r6, [pc, #156]	; (8003920 <Hw_MPU6050_Init+0xa0>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_Init( void )
{
 8003884:	b086      	sub	sp, #24
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_MPU6050_EnableFlag == TRUE ) return TRUE;
 8003886:	7833      	ldrb	r3, [r6, #0]
 8003888:	4926      	ldr	r1, [pc, #152]	; (8003924 <Hw_MPU6050_Init+0xa4>)
 800388a:	2b01      	cmp	r3, #1
 800388c:	d03e      	beq.n	800390c <Hw_MPU6050_Init+0x8c>


	Hw_MPU6050_EnableFlag = FALSE;
 800388e:	2200      	movs	r2, #0

	Hw_Wait_ms(36);
 8003890:	2024      	movs	r0, #36	; 0x24
 8003892:	4c25      	ldr	r4, [pc, #148]	; (8003928 <Hw_MPU6050_Init+0xa8>)


	if( power_on == TRUE && Hw_MPU6050_EnableFlag == TRUE ) return TRUE;


	Hw_MPU6050_EnableFlag = FALSE;
 8003894:	700a      	strb	r2, [r1, #0]

	Hw_Wait_ms(36);
 8003896:	47a0      	blx	r4


	//-- I2C 초기화
	//
	Hw_I2C_IMU_Init();	
 8003898:	4824      	ldr	r0, [pc, #144]	; (800392c <Hw_MPU6050_Init+0xac>)
 800389a:	4780      	blx	r0


	while(1)
	{

		Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_WHO_AM_I, RegData );
 800389c:	4d24      	ldr	r5, [pc, #144]	; (8003930 <Hw_MPU6050_Init+0xb0>)
 800389e:	2075      	movs	r0, #117	; 0x75
 80038a0:	a901      	add	r1, sp, #4
 80038a2:	47a8      	blx	r5
		if( Err != 0 )
 80038a4:	4604      	mov	r4, r0
 80038a6:	2800      	cmp	r0, #0
 80038a8:	d11b      	bne.n	80038e2 <Hw_MPU6050_Init+0x62>
			Lb_printf("Can't find MPU6050 \n");
			break;
		}


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
 80038aa:	4621      	mov	r1, r4
 80038ac:	206b      	movs	r0, #107	; 0x6b
 80038ae:	4d21      	ldr	r5, [pc, #132]	; (8003934 <Hw_MPU6050_Init+0xb4>)
 80038b0:	47a8      	blx	r5
		if( Err != 0 )
 80038b2:	4604      	mov	r4, r0
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d12d      	bne.n	8003914 <Hw_MPU6050_Init+0x94>

		break;
	}


	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_SMPLRT_DIV  , 0x07 );	// Set the sample rate to 1000Hz - 8kHz/(7+1) = 1000Hz
 80038b8:	2107      	movs	r1, #7
 80038ba:	2019      	movs	r0, #25
 80038bc:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_CONFIG      , 0x00 );	// Disable FSYNC and set 260 Hz Acc filtering, 256 Hz Gyro filtering, 8 KHz sampling
 80038be:	4621      	mov	r1, r4
 80038c0:	201a      	movs	r0, #26
 80038c2:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_GYRO_CONFIG , 0x00 );	// Set Gyro Full Scale Range to ±250deg/s
 80038c4:	4621      	mov	r1, r4
 80038c6:	201b      	movs	r0, #27
 80038c8:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_ACCEL_CONFIG, 0x00 );	// Set Accelerometer Full Scale Range to ±2g	
 80038ca:	4621      	mov	r1, r4
 80038cc:	201c      	movs	r0, #28
 80038ce:	47a8      	blx	r5


	Hw_MPU6050_I2CAuxMasterDisable();
 80038d0:	4b19      	ldr	r3, [pc, #100]	; (8003938 <Hw_MPU6050_Init+0xb8>)
 80038d2:	4798      	blx	r3
	power_on = TRUE;


	if( Err == 0 )
	{
		Hw_MPU6050_EnableFlag = TRUE;
 80038d4:	4a13      	ldr	r2, [pc, #76]	; (8003924 <Hw_MPU6050_Init+0xa4>)

	Hw_MPU6050_I2CAuxMasterDisable();



	power_on = TRUE;
 80038d6:	2101      	movs	r1, #1
 80038d8:	7031      	strb	r1, [r6, #0]


	if( Err == 0 )
	{
		Hw_MPU6050_EnableFlag = TRUE;
 80038da:	7011      	strb	r1, [r2, #0]
	}


	return Err;
}
 80038dc:	4620      	mov	r0, r4
 80038de:	b006      	add	sp, #24
 80038e0:	bd70      	pop	{r4, r5, r6, pc}
	{

		Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_WHO_AM_I, RegData );
		if( Err != 0 )
		{
			Lb_printf("Can't find MPU6050 \n");
 80038e2:	4d16      	ldr	r5, [pc, #88]	; (800393c <Hw_MPU6050_Init+0xbc>)
 80038e4:	4816      	ldr	r0, [pc, #88]	; (8003940 <Hw_MPU6050_Init+0xc0>)
 80038e6:	47a8      	blx	r5
 80038e8:	4d12      	ldr	r5, [pc, #72]	; (8003934 <Hw_MPU6050_Init+0xb4>)

		break;
	}


	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_SMPLRT_DIV  , 0x07 );	// Set the sample rate to 1000Hz - 8kHz/(7+1) = 1000Hz
 80038ea:	2107      	movs	r1, #7
 80038ec:	2019      	movs	r0, #25
 80038ee:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_CONFIG      , 0x00 );	// Disable FSYNC and set 260 Hz Acc filtering, 256 Hz Gyro filtering, 8 KHz sampling
 80038f0:	2100      	movs	r1, #0
 80038f2:	201a      	movs	r0, #26
 80038f4:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_GYRO_CONFIG , 0x00 );	// Set Gyro Full Scale Range to ±250deg/s
 80038f6:	2100      	movs	r1, #0
 80038f8:	201b      	movs	r0, #27
 80038fa:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_ACCEL_CONFIG, 0x00 );	// Set Accelerometer Full Scale Range to ±2g	
 80038fc:	2100      	movs	r1, #0
 80038fe:	201c      	movs	r0, #28
 8003900:	47a8      	blx	r5


	Hw_MPU6050_I2CAuxMasterDisable();
 8003902:	480d      	ldr	r0, [pc, #52]	; (8003938 <Hw_MPU6050_Init+0xb8>)
 8003904:	4780      	blx	r0



	power_on = TRUE;
 8003906:	2101      	movs	r1, #1
 8003908:	7031      	strb	r1, [r6, #0]
 800390a:	e7e7      	b.n	80038dc <Hw_MPU6050_Init+0x5c>
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_MPU6050_EnableFlag == TRUE ) return TRUE;
 800390c:	780c      	ldrb	r4, [r1, #0]
 800390e:	2c01      	cmp	r4, #1
 8003910:	d1bd      	bne.n	800388e <Hw_MPU6050_Init+0xe>
 8003912:	e7e3      	b.n	80038dc <Hw_MPU6050_Init+0x5c>


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
		if( Err != 0 )
		{
			Lb_printf("Err write MPU6050_RA_PWR_MGMT_1 : %d\n", Err);
 8003914:	480b      	ldr	r0, [pc, #44]	; (8003944 <Hw_MPU6050_Init+0xc4>)
 8003916:	4621      	mov	r1, r4
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <Hw_MPU6050_Init+0xbc>)
 800391a:	4798      	blx	r3
			break;
 800391c:	e7e5      	b.n	80038ea <Hw_MPU6050_Init+0x6a>
 800391e:	bf00      	nop
 8003920:	20000485 	.word	0x20000485
 8003924:	20000486 	.word	0x20000486
 8003928:	08001f89 	.word	0x08001f89
 800392c:	08003195 	.word	0x08003195
 8003930:	08003581 	.word	0x08003581
 8003934:	08003785 	.word	0x08003785
 8003938:	08003851 	.word	0x08003851
 800393c:	08001841 	.word	0x08001841
 8003940:	080060a4 	.word	0x080060a4
 8003944:	080060bc 	.word	0x080060bc

08003948 <Hw_Sonic_GetDistanceMM>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Sonic_GetDistanceMM( u8 Ch )
{
	return Hw_Sonic_Log[Ch].DistanceMM;
 8003948:	f640 5388 	movw	r3, #3464	; 0xd88
 800394c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003950:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003954:	eb03 0140 	add.w	r1, r3, r0, lsl #1
}
 8003958:	8908      	ldrh	r0, [r1, #8]
 800395a:	4770      	bx	lr

0800395c <Hw_HMC5883_CheckID>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_HMC5883_CheckID( void )
{
 800395c:	b500      	push	{lr}
 800395e:	b087      	sub	sp, #28
	u8  Ret = TRUE;
	u16 Err = 0;
	u8  RegData[20];
	u16 i;

	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_ID_A, RegData, 3 );
 8003960:	200a      	movs	r0, #10
 8003962:	a901      	add	r1, sp, #4
 8003964:	2203      	movs	r2, #3
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <Hw_HMC5883_CheckID+0x38>)
 8003968:	4798      	blx	r3

	//Lb_printf(" %x  %x  %x\n", RegData[0], RegData[1], RegData[2] );
	if( Err == 0 )
 800396a:	b960      	cbnz	r0, 8003986 <Hw_HMC5883_CheckID+0x2a>
	{
		if( RegData[0] != 0x48 ) Ret = FALSE;
		if( RegData[1] != 0x34 ) Ret = FALSE;
 800396c:	f89d 1005 	ldrb.w	r1, [sp, #5]
	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_ID_A, RegData, 3 );

	//Lb_printf(" %x  %x  %x\n", RegData[0], RegData[1], RegData[2] );
	if( Err == 0 )
	{
		if( RegData[0] != 0x48 ) Ret = FALSE;
 8003970:	f89d 2004 	ldrb.w	r2, [sp, #4]
		if( RegData[1] != 0x34 ) Ret = FALSE;
 8003974:	2934      	cmp	r1, #52	; 0x34
 8003976:	d008      	beq.n	800398a <Hw_HMC5883_CheckID+0x2e>
		if( RegData[2] != 0x33 ) Ret = FALSE;				
 8003978:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800397c:	2933      	cmp	r1, #51	; 0x33
 800397e:	bf18      	it	ne
 8003980:	2000      	movne	r0, #0
	}

	if( Err != 0 ) Ret = FALSE;

	return Ret;	
}
 8003982:	b007      	add	sp, #28
 8003984:	bd00      	pop	{pc}
		if( RegData[0] != 0x48 ) Ret = FALSE;
		if( RegData[1] != 0x34 ) Ret = FALSE;
		if( RegData[2] != 0x33 ) Ret = FALSE;				
	}

	if( Err != 0 ) Ret = FALSE;
 8003986:	2000      	movs	r0, #0
 8003988:	e7fb      	b.n	8003982 <Hw_HMC5883_CheckID+0x26>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_HMC5883_CheckID( void )
{
	u8  Ret = TRUE;
 800398a:	f1b2 0348 	subs.w	r3, r2, #72	; 0x48
 800398e:	4258      	negs	r0, r3
 8003990:	4158      	adcs	r0, r3
 8003992:	e7f1      	b.n	8003978 <Hw_HMC5883_CheckID+0x1c>
 8003994:	08003531 	.word	0x08003531

08003998 <Hw_HMC5883_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_HMC5883_Init( void )
{
 8003998:	b530      	push	{r4, r5, lr}
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_HMC5883_EnableFlag == TRUE ) return TRUE;
 800399a:	4c21      	ldr	r4, [pc, #132]	; (8003a20 <Hw_HMC5883_Init+0x88>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_HMC5883_Init( void )
{
 800399c:	b087      	sub	sp, #28
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_HMC5883_EnableFlag == TRUE ) return TRUE;
 800399e:	7823      	ldrb	r3, [r4, #0]
 80039a0:	4a20      	ldr	r2, [pc, #128]	; (8003a24 <Hw_HMC5883_Init+0x8c>)
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d01a      	beq.n	80039dc <Hw_HMC5883_Init+0x44>


	Hw_HMC5883_EnableFlag = FALSE;

	Hw_Wait_ms(10);
 80039a6:	200a      	movs	r0, #10
 80039a8:	491f      	ldr	r1, [pc, #124]	; (8003a28 <Hw_HMC5883_Init+0x90>)


	if( power_on == TRUE && Hw_HMC5883_EnableFlag == TRUE ) return TRUE;


	Hw_HMC5883_EnableFlag = FALSE;
 80039aa:	2500      	movs	r5, #0
 80039ac:	7015      	strb	r5, [r2, #0]

	Hw_Wait_ms(10);
 80039ae:	4788      	blx	r1


	//-- I2C 초기화
	//
	Hw_I2C_IMU_Init();	
 80039b0:	481e      	ldr	r0, [pc, #120]	; (8003a2c <Hw_HMC5883_Init+0x94>)
 80039b2:	4780      	blx	r0



	if( Hw_HMC5883_CheckID() == FALSE )
 80039b4:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <Hw_HMC5883_Init+0x98>)
 80039b6:	4798      	blx	r3
 80039b8:	b158      	cbz	r0, 80039d2 <Hw_HMC5883_Init+0x3a>
		Lb_printf("HMC5883 Fail to read ID \n");
		Err = HW_I2C_ERR_CHECK_ID;
	}
	else
	{
		Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );
 80039ba:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <Hw_HMC5883_Init+0x9c>)
 80039bc:	4628      	mov	r0, r5
 80039be:	a901      	add	r1, sp, #4
 80039c0:	2203      	movs	r2, #3
 80039c2:	4798      	blx	r3

		if( Err == 0 )
 80039c4:	4603      	mov	r3, r0
 80039c6:	b168      	cbz	r0, 80039e4 <Hw_HMC5883_Init+0x4c>
	}




	power_on = TRUE;
 80039c8:	2201      	movs	r2, #1
 80039ca:	7022      	strb	r2, [r4, #0]
		Hw_HMC5883_EnableFlag = TRUE;
	}


	return Err;
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	b007      	add	sp, #28
 80039d0:	bd30      	pop	{r4, r5, pc}



	if( Hw_HMC5883_CheckID() == FALSE )
	{
		Lb_printf("HMC5883 Fail to read ID \n");
 80039d2:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <Hw_HMC5883_Init+0xa0>)
 80039d4:	4819      	ldr	r0, [pc, #100]	; (8003a3c <Hw_HMC5883_Init+0xa4>)
 80039d6:	4798      	blx	r3
		Err = HW_I2C_ERR_CHECK_ID;
 80039d8:	2308      	movs	r3, #8
 80039da:	e7f5      	b.n	80039c8 <Hw_HMC5883_Init+0x30>
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_HMC5883_EnableFlag == TRUE ) return TRUE;
 80039dc:	7813      	ldrb	r3, [r2, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d1e1      	bne.n	80039a6 <Hw_HMC5883_Init+0xe>
 80039e2:	e7f3      	b.n	80039cc <Hw_HMC5883_Init+0x34>
		{
			//-- 75Hz로 출력 설정
			//
			SET_BIT( RegData[0], 4 );	// DO2 = 1
			SET_BIT( RegData[0], 3 );	// DO1 = 1
			CLR_BIT( RegData[0], 2 );	// DO0 = 0
 80039e4:	f89d 5004 	ldrb.w	r5, [sp, #4]


			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0
 80039e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
		{
			//-- 75Hz로 출력 설정
			//
			SET_BIT( RegData[0], 4 );	// DO2 = 1
			SET_BIT( RegData[0], 3 );	// DO1 = 1
			CLR_BIT( RegData[0], 2 );	// DO0 = 0
 80039ec:	f025 0104 	bic.w	r1, r5, #4


			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0
 80039f0:	f022 0303 	bic.w	r3, r2, #3
		{
			//-- 75Hz로 출력 설정
			//
			SET_BIT( RegData[0], 4 );	// DO2 = 1
			SET_BIT( RegData[0], 3 );	// DO1 = 1
			CLR_BIT( RegData[0], 2 );	// DO0 = 0
 80039f4:	f041 0518 	orr.w	r5, r1, #24
			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0

			Err = Hw_I2C_IMU_HMC5883_WriteRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );
 80039f8:	2203      	movs	r2, #3
 80039fa:	a901      	add	r1, sp, #4


			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0
 80039fc:	f88d 3006 	strb.w	r3, [sp, #6]

			Err = Hw_I2C_IMU_HMC5883_WriteRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );
 8003a00:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <Hw_HMC5883_Init+0xa8>)
		{
			//-- 75Hz로 출력 설정
			//
			SET_BIT( RegData[0], 4 );	// DO2 = 1
			SET_BIT( RegData[0], 3 );	// DO1 = 1
			CLR_BIT( RegData[0], 2 );	// DO0 = 0
 8003a02:	f88d 5004 	strb.w	r5, [sp, #4]
			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0

			Err = Hw_I2C_IMU_HMC5883_WriteRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );
 8003a06:	4798      	blx	r3


			Err = Hw_I2C_IMU_HMC5883_WriteAddr( HW_HMC5883_REG_DATA_X_MSB );
 8003a08:	2003      	movs	r0, #3
 8003a0a:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <Hw_HMC5883_Init+0xac>)
 8003a0c:	4790      	blx	r2
	}




	power_on = TRUE;
 8003a0e:	2101      	movs	r1, #1


	if( Err == 0 )
 8003a10:	4603      	mov	r3, r0
	}




	power_on = TRUE;
 8003a12:	7021      	strb	r1, [r4, #0]


	if( Err == 0 )
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d1d9      	bne.n	80039cc <Hw_HMC5883_Init+0x34>
	{
		Hw_HMC5883_EnableFlag = TRUE;
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <Hw_HMC5883_Init+0x8c>)
 8003a1a:	7001      	strb	r1, [r0, #0]
 8003a1c:	e7d6      	b.n	80039cc <Hw_HMC5883_Init+0x34>
 8003a1e:	bf00      	nop
 8003a20:	20000487 	.word	0x20000487
 8003a24:	20000488 	.word	0x20000488
 8003a28:	08001f89 	.word	0x08001f89
 8003a2c:	08003195 	.word	0x08003195
 8003a30:	0800395d 	.word	0x0800395d
 8003a34:	08003531 	.word	0x08003531
 8003a38:	08001841 	.word	0x08001841
 8003a3c:	080060e4 	.word	0x080060e4
 8003a40:	0800374d 	.word	0x0800374d
 8003a44:	08003769 	.word	0x08003769

08003a48 <Hw_HMC5883_GetData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_HMC5883_GetData( HW_HMC5883_DATA_OBJ *ptr_data )
{
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	4604      	mov	r4, r0
	u16 Err;

	HW_HMC5883_RAW_DATA_OBJ raw_data;


	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_DATA_X_MSB, (u8 *)&raw_data, 6 );
 8003a4e:	4669      	mov	r1, sp
 8003a50:	2003      	movs	r0, #3
 8003a52:	2206      	movs	r2, #6
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <Hw_HMC5883_GetData+0x48>)
 8003a56:	4798      	blx	r3


	if( Err == 0 )
 8003a58:	b9a0      	cbnz	r0, 8003a84 <Hw_HMC5883_GetData+0x3c>
	{
		ptr_data->X_Compass = (s16)((raw_data.X_Compass_H<<8) | (raw_data.X_Compass_L<<0));	
 8003a5a:	f89d 6000 	ldrb.w	r6, [sp]
 8003a5e:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ptr_data->Y_Compass = (s16)((raw_data.Y_Compass_H<<8) | (raw_data.Y_Compass_L<<0));	
 8003a62:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8003a66:	f89d 2005 	ldrb.w	r2, [sp, #5]
		ptr_data->Z_Compass = (s16)((raw_data.Z_Compass_H<<8) | (raw_data.Z_Compass_L<<0));	
 8003a6a:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8003a6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_DATA_X_MSB, (u8 *)&raw_data, 6 );


	if( Err == 0 )
	{
		ptr_data->X_Compass = (s16)((raw_data.X_Compass_H<<8) | (raw_data.X_Compass_L<<0));	
 8003a72:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
		ptr_data->Y_Compass = (s16)((raw_data.Y_Compass_H<<8) | (raw_data.Y_Compass_L<<0));	
 8003a76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
		ptr_data->Z_Compass = (s16)((raw_data.Z_Compass_H<<8) | (raw_data.Z_Compass_L<<0));	
 8003a7a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_DATA_X_MSB, (u8 *)&raw_data, 6 );


	if( Err == 0 )
	{
		ptr_data->X_Compass = (s16)((raw_data.X_Compass_H<<8) | (raw_data.X_Compass_L<<0));	
 8003a7e:	8021      	strh	r1, [r4, #0]
		ptr_data->Y_Compass = (s16)((raw_data.Y_Compass_H<<8) | (raw_data.Y_Compass_L<<0));	
 8003a80:	8062      	strh	r2, [r4, #2]
		ptr_data->Z_Compass = (s16)((raw_data.Z_Compass_H<<8) | (raw_data.Z_Compass_L<<0));	
 8003a82:	80a0      	strh	r0, [r4, #4]
	}
	

	Err = Hw_I2C_IMU_HMC5883_WriteAddr( HW_HMC5883_REG_DATA_X_MSB );
 8003a84:	2003      	movs	r0, #3
 8003a86:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <Hw_HMC5883_GetData+0x4c>)
 8003a88:	4798      	blx	r3

	return Err;
}
 8003a8a:	b002      	add	sp, #8
 8003a8c:	bd70      	pop	{r4, r5, r6, pc}
 8003a8e:	bf00      	nop
 8003a90:	08003531 	.word	0x08003531
 8003a94:	08003769 	.word	0x08003769

08003a98 <Hw_HMC5883_GetEnable>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_HMC5883_GetEnable( void )
{
	return Hw_HMC5883_EnableFlag;
 8003a98:	f240 4388 	movw	r3, #1160	; 0x488
 8003a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8003aa0:	7818      	ldrb	r0, [r3, #0]
 8003aa2:	4770      	bx	lr

08003aa4 <Hw_IMU_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_Init( void )
{
 8003aa4:	b510      	push	{r4, lr}
	u16 Ret = 0;


	Ret = Hw_MPU6050_Init();
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <Hw_IMU_Init+0x30>)
 8003aa8:	4798      	blx	r3

	if( Ret != 0 )
 8003aaa:	4604      	mov	r4, r0
 8003aac:	b958      	cbnz	r0, 8003ac6 <Hw_IMU_Init+0x22>
		Lb_printf("Hw_MPU6050_Init Ret : 0x%x\n", Ret);
		return Ret;
	} 


	Ret = Hw_HMC5883_Init();
 8003aae:	480a      	ldr	r0, [pc, #40]	; (8003ad8 <Hw_IMU_Init+0x34>)
 8003ab0:	4780      	blx	r0

	if( Ret != 0 )
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	b908      	cbnz	r0, 8003aba <Hw_IMU_Init+0x16>
		return Ret;
	} 


	return Ret;
}
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	bd10      	pop	{r4, pc}

	Ret = Hw_HMC5883_Init();

	if( Ret != 0 )
	{
		Lb_printf("Hw_HMC5883_Init Ret : 0x%x\n", Ret);
 8003aba:	4808      	ldr	r0, [pc, #32]	; (8003adc <Hw_IMU_Init+0x38>)
 8003abc:	4621      	mov	r1, r4
 8003abe:	4a08      	ldr	r2, [pc, #32]	; (8003ae0 <Hw_IMU_Init+0x3c>)
 8003ac0:	4790      	blx	r2
		return Ret;
	} 


	return Ret;
}
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	bd10      	pop	{r4, pc}

	Ret = Hw_MPU6050_Init();

	if( Ret != 0 )
	{
		Lb_printf("Hw_MPU6050_Init Ret : 0x%x\n", Ret);
 8003ac6:	4807      	ldr	r0, [pc, #28]	; (8003ae4 <Hw_IMU_Init+0x40>)
 8003ac8:	4621      	mov	r1, r4
 8003aca:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <Hw_IMU_Init+0x3c>)
 8003acc:	4798      	blx	r3
		return Ret;
	} 


	return Ret;
}
 8003ace:	4620      	mov	r0, r4
 8003ad0:	bd10      	pop	{r4, pc}
 8003ad2:	bf00      	nop
 8003ad4:	08003881 	.word	0x08003881
 8003ad8:	08003999 	.word	0x08003999
 8003adc:	0800611c 	.word	0x0800611c
 8003ae0:	08001841 	.word	0x08001841
 8003ae4:	08006100 	.word	0x08006100

08003ae8 <Hw_IMU_GetData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_GetData( HW_IMU_DATA_OBJ *ptr_data )
{
 8003ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	HW_MPU6050_DATA_OBJ MPU6050_Data;
	HW_HMC5883_DATA_OBJ HMC5883_Data;


	ptr_data->Enable_Acc     = FALSE;
 8003aec:	f04f 0800 	mov.w	r8, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_GetData( HW_IMU_DATA_OBJ *ptr_data )
{
 8003af0:	b089      	sub	sp, #36	; 0x24

	HW_MPU6050_DATA_OBJ MPU6050_Data;
	HW_HMC5883_DATA_OBJ HMC5883_Data;


	ptr_data->Enable_Acc     = FALSE;
 8003af2:	f880 8000 	strb.w	r8, [r0]
	ptr_data->Enable_Temp    = FALSE;
 8003af6:	f880 8001 	strb.w	r8, [r0, #1]
	ptr_data->Enable_Gyro    = FALSE;
 8003afa:	f880 8002 	strb.w	r8, [r0, #2]
	ptr_data->Enable_Compass = FALSE;
 8003afe:	f880 8003 	strb.w	r8, [r0, #3]


	if( Hw_HMC5883_GetEnable() == TRUE )
 8003b02:	4f3f      	ldr	r7, [pc, #252]	; (8003c00 <Hw_IMU_GetData+0x118>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_GetData( HW_IMU_DATA_OBJ *ptr_data )
{
 8003b04:	4606      	mov	r6, r0
	ptr_data->Enable_Temp    = FALSE;
	ptr_data->Enable_Gyro    = FALSE;
	ptr_data->Enable_Compass = FALSE;


	if( Hw_HMC5883_GetEnable() == TRUE )
 8003b06:	47b8      	blx	r7
 8003b08:	2801      	cmp	r0, #1
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	d018      	beq.n	8003b40 <Hw_IMU_GetData+0x58>
		}
	}



	if( Hw_HMC5883_GetEnable() == TRUE )
 8003b0e:	47b8      	blx	r7
 8003b10:	2801      	cmp	r0, #1
 8003b12:	4604      	mov	r4, r0
 8003b14:	d003      	beq.n	8003b1e <Hw_IMU_GetData+0x36>
		}
	}


	return Err;
}
 8003b16:	4640      	mov	r0, r8
 8003b18:	b009      	add	sp, #36	; 0x24
 8003b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}



	if( Hw_HMC5883_GetEnable() == TRUE )
	{
		Err = Hw_HMC5883_GetData( &HMC5883_Data );	
 8003b1e:	a802      	add	r0, sp, #8
 8003b20:	4a38      	ldr	r2, [pc, #224]	; (8003c04 <Hw_IMU_GetData+0x11c>)
 8003b22:	4790      	blx	r2

		if( Err == 0 )
 8003b24:	4680      	mov	r8, r0
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d1f5      	bne.n	8003b16 <Hw_IMU_GetData+0x2e>
		{
			ptr_data->X_Compass = HMC5883_Data.X_Compass;
 8003b2a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
			ptr_data->Y_Compass = HMC5883_Data.Y_Compass;
 8003b2e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
			ptr_data->Z_Compass = HMC5883_Data.Z_Compass;
 8003b32:	f8bd 100c 	ldrh.w	r1, [sp, #12]
	{
		Err = Hw_HMC5883_GetData( &HMC5883_Data );	

		if( Err == 0 )
		{
			ptr_data->X_Compass = HMC5883_Data.X_Compass;
 8003b36:	8270      	strh	r0, [r6, #18]
			ptr_data->Y_Compass = HMC5883_Data.Y_Compass;
 8003b38:	82b3      	strh	r3, [r6, #20]
			ptr_data->Z_Compass = HMC5883_Data.Z_Compass;
 8003b3a:	82f1      	strh	r1, [r6, #22]

			ptr_data->Enable_Compass = TRUE;			
 8003b3c:	70f4      	strb	r4, [r6, #3]
 8003b3e:	e7ea      	b.n	8003b16 <Hw_IMU_GetData+0x2e>
	ptr_data->Enable_Compass = FALSE;


	if( Hw_HMC5883_GetEnable() == TRUE )
	{
		Err = Hw_MPU6050_GetData( &MPU6050_Data );
 8003b40:	a804      	add	r0, sp, #16
 8003b42:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <Hw_IMU_GetData+0x120>)
 8003b44:	4798      	blx	r3

		if( Err == 0 )
 8003b46:	4680      	mov	r8, r0
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d1e0      	bne.n	8003b0e <Hw_IMU_GetData+0x26>
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
 8003b4c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
			
			ptr_data->Temp  = MPU6050_Data.Temp;
 8003b50:	f8bd 2016 	ldrh.w	r2, [sp, #22]

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
 8003b54:	f8bd 301a 	ldrh.w	r3, [sp, #26]

		if( Err == 0 )
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
 8003b58:	f8bd a014 	ldrh.w	sl, [sp, #20]
		Err = Hw_MPU6050_GetData( &MPU6050_Data );

		if( Err == 0 )
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
 8003b5c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
			
			ptr_data->Temp  = MPU6050_Data.Temp;

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
 8003b60:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	{
		Err = Hw_MPU6050_GetData( &MPU6050_Data );

		if( Err == 0 )
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
 8003b64:	80b1      	strh	r1, [r6, #4]
			
			ptr_data->Temp  = MPU6050_Data.Temp;

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
			ptr_data->Z_Gyro = MPU6050_Data.Z_Gyro;
 8003b66:	f8bd 101c 	ldrh.w	r1, [sp, #28]
			ptr_data->Enable_Acc     = TRUE;
			ptr_data->Enable_Temp    = TRUE;
			ptr_data->Enable_Gyro    = TRUE;	

			// 각도 계산 
			ptr_data->X_AccAngle = (atan2(MPU6050_Data.Y_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 8003b6a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003c14 <Hw_IMU_GetData+0x12c>
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
			
			ptr_data->Temp  = MPU6050_Data.Temp;
 8003b6e:	8172      	strh	r2, [r6, #10]

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
 8003b70:	81f3      	strh	r3, [r6, #14]
		Err = Hw_MPU6050_GetData( &MPU6050_Data );

		if( Err == 0 )
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
 8003b72:	80f0      	strh	r0, [r6, #6]
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
 8003b74:	f8a6 a008 	strh.w	sl, [r6, #8]
			
			ptr_data->Temp  = MPU6050_Data.Temp;

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
 8003b78:	81b5      	strh	r5, [r6, #12]
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
			ptr_data->Z_Gyro = MPU6050_Data.Z_Gyro;

			ptr_data->Enable_Acc     = TRUE;
 8003b7a:	7034      	strb	r4, [r6, #0]
			ptr_data->Enable_Temp    = TRUE;
 8003b7c:	7074      	strb	r4, [r6, #1]
			ptr_data->Enable_Gyro    = TRUE;	
 8003b7e:	70b4      	strb	r4, [r6, #2]
			
			ptr_data->Temp  = MPU6050_Data.Temp;

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
			ptr_data->Z_Gyro = MPU6050_Data.Z_Gyro;
 8003b80:	8231      	strh	r1, [r6, #16]
			ptr_data->Enable_Acc     = TRUE;
			ptr_data->Enable_Temp    = TRUE;
			ptr_data->Enable_Gyro    = TRUE;	

			// 각도 계산 
			ptr_data->X_AccAngle = (atan2(MPU6050_Data.Y_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 8003b82:	b200      	sxth	r0, r0
 8003b84:	47c8      	blx	r9
 8003b86:	4604      	mov	r4, r0
 8003b88:	fa0f f08a 	sxth.w	r0, sl
 8003b8c:	460d      	mov	r5, r1
 8003b8e:	47c8      	blx	r9
 8003b90:	f8df b084 	ldr.w	fp, [pc, #132]	; 8003c18 <Hw_IMU_GetData+0x130>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4620      	mov	r0, r4
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	47d8      	blx	fp
 8003b9e:	a314      	add	r3, pc, #80	; (adr r3, 8003bf0 <Hw_IMU_GetData+0x108>)
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	f8df a074 	ldr.w	sl, [pc, #116]	; 8003c1c <Hw_IMU_GetData+0x134>
 8003ba8:	47d0      	blx	sl
 8003baa:	a313      	add	r3, pc, #76	; (adr r3, 8003bf8 <Hw_IMU_GetData+0x110>)
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	4d16      	ldr	r5, [pc, #88]	; (8003c0c <Hw_IMU_GetData+0x124>)
 8003bb2:	47a8      	blx	r5
 8003bb4:	4c16      	ldr	r4, [pc, #88]	; (8003c10 <Hw_IMU_GetData+0x128>)
 8003bb6:	47a0      	blx	r4
 8003bb8:	61b0      	str	r0, [r6, #24]
			ptr_data->Y_AccAngle = (atan2(MPU6050_Data.X_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 8003bba:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8003bbe:	47c8      	blx	r9
 8003bc0:	e9cd 0100 	strd	r0, r1, [sp]
 8003bc4:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8003bc8:	47c8      	blx	r9
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bd2:	47d8      	blx	fp
 8003bd4:	a306      	add	r3, pc, #24	; (adr r3, 8003bf0 <Hw_IMU_GetData+0x108>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	47d0      	blx	sl
 8003bdc:	a306      	add	r3, pc, #24	; (adr r3, 8003bf8 <Hw_IMU_GetData+0x110>)
 8003bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be2:	47a8      	blx	r5
 8003be4:	47a0      	blx	r4
 8003be6:	61f0      	str	r0, [r6, #28]
 8003be8:	e791      	b.n	8003b0e <Hw_IMU_GetData+0x26>
 8003bea:	bf00      	nop
 8003bec:	f3af 8000 	nop.w
 8003bf0:	54442d18 	.word	0x54442d18
 8003bf4:	400921fb 	.word	0x400921fb
 8003bf8:	20000000 	.word	0x20000000
 8003bfc:	404ca5dc 	.word	0x404ca5dc
 8003c00:	08003a99 	.word	0x08003a99
 8003c04:	08003a49 	.word	0x08003a49
 8003c08:	080037a5 	.word	0x080037a5
 8003c0c:	08000379 	.word	0x08000379
 8003c10:	080008ad 	.word	0x080008ad
 8003c14:	080002ad 	.word	0x080002ad
 8003c18:	0800576d 	.word	0x0800576d
 8003c1c:	08000015 	.word	0x08000015

08003c20 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8003c20:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <EP1_IN_Callback+0x58>)
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	2a01      	cmp	r2, #1
 8003c28:	d000      	beq.n	8003c2c <EP1_IN_Callback+0xc>
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 8003c2c:	4c13      	ldr	r4, [pc, #76]	; (8003c7c <EP1_IN_Callback+0x5c>)
 8003c2e:	6820      	ldr	r0, [r4, #0]
 8003c30:	b300      	cbz	r0, 8003c74 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8003c32:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8003c34:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8003c36:	d814      	bhi.n	8003c62 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8003c38:	6811      	ldr	r1, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 8003c3a:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 8003c3c:	1808      	adds	r0, r1, r0
 8003c3e:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 8003c40:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8003c42:	b28b      	uxth	r3, r1
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8003c44:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8003c46:	480f      	ldr	r0, [pc, #60]	; (8003c84 <EP1_IN_Callback+0x64>)
 8003c48:	21c0      	movs	r1, #192	; 0xc0
 8003c4a:	18c0      	adds	r0, r0, r3
 8003c4c:	462a      	mov	r2, r5
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <EP1_IN_Callback+0x68>)
 8003c50:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8003c52:	2001      	movs	r0, #1
 8003c54:	4629      	mov	r1, r5
 8003c56:	4a0d      	ldr	r2, [pc, #52]	; (8003c8c <EP1_IN_Callback+0x6c>)
 8003c58:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	490c      	ldr	r1, [pc, #48]	; (8003c90 <EP1_IN_Callback+0x70>)
 8003c5e:	4788      	blx	r1
 8003c60:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8003c62:	6815      	ldr	r5, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8003c64:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8003c66:	f105 0140 	add.w	r1, r5, #64	; 0x40
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8003c6a:	b2ab      	uxth	r3, r5
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8003c6c:	6020      	str	r0, [r4, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8003c6e:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8003c70:	2540      	movs	r5, #64	; 0x40
 8003c72:	e7e8      	b.n	8003c46 <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8003c74:	7018      	strb	r0, [r3, #0]
 8003c76:	bd38      	pop	{r3, r4, r5, pc}
 8003c78:	200004ac 	.word	0x200004ac
 8003c7c:	200004b8 	.word	0x200004b8
 8003c80:	200004b4 	.word	0x200004b4
 8003c84:	20000e04 	.word	0x20000e04
 8003c88:	08005209 	.word	0x08005209
 8003c8c:	080054b9 	.word	0x080054b9
 8003c90:	0800537d 	.word	0x0800537d

08003c94 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8003c94:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8003c96:	f640 549c 	movw	r4, #3484	; 0xd9c
 8003c9a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003c9e:	f245 5379 	movw	r3, #21881	; 0x5579
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003ca8:	2003      	movs	r0, #3
 8003caa:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 8003cac:	f244 62a9 	movw	r2, #18089	; 0x46a9
 8003cb0:	b2c1      	uxtb	r1, r0
 8003cb2:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	4790      	blx	r2
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 8003cba:	f245 31a1 	movw	r1, #21409	; 0x53a1
 8003cbe:	2003      	movs	r0, #3
 8003cc0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003cc4:	4788      	blx	r1
 8003cc6:	bd10      	pop	{r4, pc}

08003cc8 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 8003cc8:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <SOF_Callback+0x24>)
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	2805      	cmp	r0, #5
 8003cd0:	d000      	beq.n	8003cd4 <SOF_Callback+0xc>
 8003cd2:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <SOF_Callback+0x28>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	1c51      	adds	r1, r2, #1
 8003cda:	2a05      	cmp	r2, #5
 8003cdc:	6019      	str	r1, [r3, #0]
 8003cde:	d1f8      	bne.n	8003cd2 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8003ce4:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <SOF_Callback+0x2c>)
 8003ce6:	4798      	blx	r3
 8003ce8:	e7f3      	b.n	8003cd2 <SOF_Callback+0xa>
 8003cea:	bf00      	nop
 8003cec:	200004a0 	.word	0x200004a0
 8003cf0:	2000048c 	.word	0x2000048c
 8003cf4:	08004719 	.word	0x08004719

08003cf8 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8003cf8:	f645 4244 	movw	r2, #23620	; 0x5c44
 8003cfc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003d00:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8003d02:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8003d04:	4c8f      	ldr	r4, [pc, #572]	; (8003f44 <USB_Istr+0x24c>)
 8003d06:	b298      	uxth	r0, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8003d08:	4d8f      	ldr	r5, [pc, #572]	; (8003f48 <USB_Istr+0x250>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8003d0a:	8020      	strh	r0, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8003d0c:	8821      	ldrh	r1, [r4, #0]
 8003d0e:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8003d10:	b089      	sub	sp, #36	; 0x24
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8003d12:	4019      	ands	r1, r3
 8003d14:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8003d18:	b281      	uxth	r1, r0
 8003d1a:	2900      	cmp	r1, #0
 8003d1c:	d168      	bne.n	8003df0 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8003d1e:	8822      	ldrh	r2, [r4, #0]
 8003d20:	f402 4100 	and.w	r1, r2, #32768	; 0x8000
 8003d24:	420b      	tst	r3, r1
 8003d26:	d15f      	bne.n	8003de8 <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8003d28:	8822      	ldrh	r2, [r4, #0]
 8003d2a:	f402 6180 	and.w	r1, r2, #1024	; 0x400
 8003d2e:	420b      	tst	r3, r1
 8003d30:	d14e      	bne.n	8003dd0 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8003d32:	8820      	ldrh	r0, [r4, #0]
 8003d34:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
 8003d38:	4213      	tst	r3, r2
 8003d3a:	d006      	beq.n	8003d4a <USB_Istr+0x52>
  {
    _SetISTR((uint16_t)CLR_ERR);
 8003d3c:	f645 4044 	movw	r0, #23620	; 0x5c44
 8003d40:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003d44:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8003d48:	6001      	str	r1, [r0, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8003d4a:	8822      	ldrh	r2, [r4, #0]
 8003d4c:	f402 5080 	and.w	r0, r2, #4096	; 0x1000
 8003d50:	4203      	tst	r3, r0
 8003d52:	d131      	bne.n	8003db8 <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8003d54:	8820      	ldrh	r0, [r4, #0]
 8003d56:	f400 6100 	and.w	r1, r0, #2048	; 0x800
 8003d5a:	420b      	tst	r3, r1
 8003d5c:	d00e      	beq.n	8003d7c <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 8003d5e:	4b7b      	ldr	r3, [pc, #492]	; (8003f4c <USB_Istr+0x254>)
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	2a00      	cmp	r2, #0
 8003d64:	d125      	bne.n	8003db2 <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8003d66:	2002      	movs	r0, #2
 8003d68:	4979      	ldr	r1, [pc, #484]	; (8003f50 <USB_Istr+0x258>)
 8003d6a:	4788      	blx	r1
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8003d6c:	f645 4244 	movw	r2, #23620	; 0x5c44
 8003d70:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003d74:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8003d78:	882b      	ldrh	r3, [r5, #0]
 8003d7a:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8003d7c:	8820      	ldrh	r0, [r4, #0]
 8003d7e:	f400 7280 	and.w	r2, r0, #256	; 0x100
 8003d82:	4213      	tst	r3, r2
 8003d84:	d013      	beq.n	8003dae <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8003d86:	f645 4344 	movw	r3, #23620	; 0x5c44
 8003d8a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8003d8e:	f645 4048 	movw	r0, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8003d92:	f64f 61ff 	movw	r1, #65279	; 0xfeff
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8003d96:	f2c4 0000 	movt	r0, #16384	; 0x4000

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8003d9a:	6019      	str	r1, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8003d9c:	6802      	ldr	r2, [r0, #0]
 8003d9e:	0410      	lsls	r0, r2, #16
 8003da0:	d432      	bmi.n	8003e08 <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8003da2:	4b6c      	ldr	r3, [pc, #432]	; (8003f54 <USB_Istr+0x25c>)
 8003da4:	2000      	movs	r0, #0
 8003da6:	6018      	str	r0, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8003da8:	2007      	movs	r0, #7
 8003daa:	4b69      	ldr	r3, [pc, #420]	; (8003f50 <USB_Istr+0x258>)
 8003dac:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8003dae:	b009      	add	sp, #36	; 0x24
 8003db0:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 8003db2:	4869      	ldr	r0, [pc, #420]	; (8003f58 <USB_Istr+0x260>)
 8003db4:	4780      	blx	r0
 8003db6:	e7d9      	b.n	8003d6c <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8003db8:	f645 4344 	movw	r3, #23620	; 0x5c44
 8003dbc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003dc0:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8003dc4:	6019      	str	r1, [r3, #0]
    Resume(RESUME_EXTERNAL);
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	4a61      	ldr	r2, [pc, #388]	; (8003f50 <USB_Istr+0x258>)
 8003dca:	4790      	blx	r2
 8003dcc:	882b      	ldrh	r3, [r5, #0]
 8003dce:	e7c1      	b.n	8003d54 <USB_Istr+0x5c>
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
    Device_Property.Reset();
 8003dd0:	4a62      	ldr	r2, [pc, #392]	; (8003f5c <USB_Istr+0x264>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8003dd2:	f645 4344 	movw	r3, #23620	; 0x5c44
 8003dd6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003dda:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8003dde:	6018      	str	r0, [r3, #0]
    Device_Property.Reset();
 8003de0:	6851      	ldr	r1, [r2, #4]
 8003de2:	4788      	blx	r1
 8003de4:	882b      	ldrh	r3, [r5, #0]
 8003de6:	e7a4      	b.n	8003d32 <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8003de8:	485d      	ldr	r0, [pc, #372]	; (8003f60 <USB_Istr+0x268>)
 8003dea:	4780      	blx	r0
 8003dec:	882b      	ldrh	r3, [r5, #0]
 8003dee:	e79b      	b.n	8003d28 <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8003df0:	4b5c      	ldr	r3, [pc, #368]	; (8003f64 <USB_Istr+0x26c>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8003df2:	f64f 50ff 	movw	r0, #65023	; 0xfdff
 8003df6:	6010      	str	r0, [r2, #0]
    bIntPackSOF++;
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	1c51      	adds	r1, r2, #1
 8003dfc:	b2c8      	uxtb	r0, r1
 8003dfe:	7018      	strb	r0, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8003e00:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <USB_Istr+0x270>)
 8003e02:	4798      	blx	r3
 8003e04:	882b      	ldrh	r3, [r5, #0]
 8003e06:	e78a      	b.n	8003d1e <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8003e08:	4852      	ldr	r0, [pc, #328]	; (8003f54 <USB_Istr+0x25c>)
 8003e0a:	6801      	ldr	r1, [r0, #0]
 8003e0c:	1c4a      	adds	r2, r1, #1
 8003e0e:	6002      	str	r2, [r0, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8003e10:	6801      	ldr	r1, [r0, #0]
 8003e12:	2903      	cmp	r1, #3
 8003e14:	d9c8      	bls.n	8003da8 <USB_Istr+0xb0>
 8003e16:	f645 4240 	movw	r2, #23616	; 0x5c40
 8003e1a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003e1e:	6811      	ldr	r1, [r2, #0]
 8003e20:	0709      	lsls	r1, r1, #28
 8003e22:	d4c1      	bmi.n	8003da8 <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8003e24:	6815      	ldr	r5, [r2, #0]
 8003e26:	4951      	ldr	r1, [pc, #324]	; (8003f6c <USB_Istr+0x274>)
 8003e28:	b2ad      	uxth	r5, r5
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003e2a:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8003e2e:	600d      	str	r5, [r1, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003e30:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003e34:	6825      	ldr	r5, [r4, #0]
 8003e36:	f645 4404 	movw	r4, #23556	; 0x5c04
 8003e3a:	b2ad      	uxth	r5, r5
 8003e3c:	9500      	str	r5, [sp, #0]
 8003e3e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003e42:	6825      	ldr	r5, [r4, #0]
 8003e44:	f645 4408 	movw	r4, #23560	; 0x5c08
 8003e48:	b2ad      	uxth	r5, r5
 8003e4a:	9501      	str	r5, [sp, #4]
 8003e4c:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003e50:	6825      	ldr	r5, [r4, #0]
 8003e52:	f645 440c 	movw	r4, #23564	; 0x5c0c
 8003e56:	b2ad      	uxth	r5, r5
 8003e58:	9502      	str	r5, [sp, #8]
 8003e5a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003e5e:	6825      	ldr	r5, [r4, #0]
 8003e60:	f645 4410 	movw	r4, #23568	; 0x5c10
 8003e64:	b2ad      	uxth	r5, r5
 8003e66:	9503      	str	r5, [sp, #12]
 8003e68:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003e6c:	6825      	ldr	r5, [r4, #0]
 8003e6e:	f645 4414 	movw	r4, #23572	; 0x5c14
 8003e72:	b2ad      	uxth	r5, r5
 8003e74:	9504      	str	r5, [sp, #16]
 8003e76:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003e7a:	6825      	ldr	r5, [r4, #0]
 8003e7c:	f645 4418 	movw	r4, #23576	; 0x5c18
 8003e80:	b2ad      	uxth	r5, r5
 8003e82:	9505      	str	r5, [sp, #20]
 8003e84:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003e88:	6825      	ldr	r5, [r4, #0]
 8003e8a:	f645 441c 	movw	r4, #23580	; 0x5c1c
 8003e8e:	b2ad      	uxth	r5, r5
 8003e90:	9506      	str	r5, [sp, #24]
 8003e92:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003e96:	6824      	ldr	r4, [r4, #0]
 8003e98:	b2a4      	uxth	r4, r4
 8003e9a:	9407      	str	r4, [sp, #28]
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8003e9c:	680c      	ldr	r4, [r1, #0]
 8003e9e:	f044 0401 	orr.w	r4, r4, #1
 8003ea2:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 8003ea4:	680c      	ldr	r4, [r1, #0]
 8003ea6:	b2a4      	uxth	r4, r4
 8003ea8:	6014      	str	r4, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8003eaa:	680c      	ldr	r4, [r1, #0]
 8003eac:	f024 0401 	bic.w	r4, r4, #1
 8003eb0:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 8003eb2:	6809      	ldr	r1, [r1, #0]
 8003eb4:	b289      	uxth	r1, r1
 8003eb6:	6011      	str	r1, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8003eb8:	6819      	ldr	r1, [r3, #0]
 8003eba:	f645 4244 	movw	r2, #23620	; 0x5c44
 8003ebe:	0549      	lsls	r1, r1, #21
 8003ec0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003ec4:	d5f8      	bpl.n	8003eb8 <USB_Istr+0x1c0>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8003ec6:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8003eca:	6013      	str	r3, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8003ecc:	9900      	ldr	r1, [sp, #0]
 8003ece:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8003ed2:	b28a      	uxth	r2, r1
 8003ed4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	9901      	ldr	r1, [sp, #4]
 8003edc:	f645 4304 	movw	r3, #23556	; 0x5c04
 8003ee0:	b28a      	uxth	r2, r1
 8003ee2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	9902      	ldr	r1, [sp, #8]
 8003eea:	f645 4308 	movw	r3, #23560	; 0x5c08
 8003eee:	b28a      	uxth	r2, r1
 8003ef0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	9903      	ldr	r1, [sp, #12]
 8003ef8:	f645 430c 	movw	r3, #23564	; 0x5c0c
 8003efc:	b28a      	uxth	r2, r1
 8003efe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	9904      	ldr	r1, [sp, #16]
 8003f06:	f645 4310 	movw	r3, #23568	; 0x5c10
 8003f0a:	b28a      	uxth	r2, r1
 8003f0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	9905      	ldr	r1, [sp, #20]
 8003f14:	f645 4314 	movw	r3, #23572	; 0x5c14
 8003f18:	b28a      	uxth	r2, r1
 8003f1a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	9906      	ldr	r1, [sp, #24]
 8003f22:	f645 4318 	movw	r3, #23576	; 0x5c18
 8003f26:	b28a      	uxth	r2, r1
 8003f28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	9907      	ldr	r1, [sp, #28]
 8003f30:	f645 431c 	movw	r3, #23580	; 0x5c1c
 8003f34:	b28a      	uxth	r2, r1
 8003f36:	f2c4 0300 	movt	r3, #16384	; 0x4000
      
        esof_counter = 0;
 8003f3a:	2100      	movs	r1, #0
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8003f3c:	601a      	str	r2, [r3, #0]
      
        esof_counter = 0;
 8003f3e:	6001      	str	r1, [r0, #0]
 8003f40:	e732      	b.n	8003da8 <USB_Istr+0xb0>
 8003f42:	bf00      	nop
 8003f44:	20000ddc 	.word	0x20000ddc
 8003f48:	20001638 	.word	0x20001638
 8003f4c:	200004a4 	.word	0x200004a4
 8003f50:	08004425 	.word	0x08004425
 8003f54:	20000498 	.word	0x20000498
 8003f58:	08004255 	.word	0x08004255
 8003f5c:	20000284 	.word	0x20000284
 8003f60:	080055b1 	.word	0x080055b1
 8003f64:	20000494 	.word	0x20000494
 8003f68:	08003cc9 	.word	0x08003cc9
 8003f6c:	20000490 	.word	0x20000490

08003f70 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8003f70:	4b03      	ldr	r3, [pc, #12]	; (8003f80 <Virtual_Com_Port_SetConfiguration+0x10>)
 8003f72:	7a98      	ldrb	r0, [r3, #10]
 8003f74:	b110      	cbz	r0, 8003f7c <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8003f76:	4903      	ldr	r1, [pc, #12]	; (8003f84 <Virtual_Com_Port_SetConfiguration+0x14>)
 8003f78:	2205      	movs	r2, #5
 8003f7a:	600a      	str	r2, [r1, #0]
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20001614 	.word	0x20001614
 8003f84:	200004a0 	.word	0x200004a0

08003f88 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8003f88:	f240 43a0 	movw	r3, #1184	; 0x4a0
 8003f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003f90:	2204      	movs	r2, #4
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop

08003f98 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <Virtual_Com_Port_Status_In+0x10>)
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	2a20      	cmp	r2, #32
 8003f9e:	d101      	bne.n	8003fa4 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	7018      	strb	r0, [r3, #0]
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	2000049c 	.word	0x2000049c

08003fac <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop

08003fb0 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8003fb0:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8003fb2:	b510      	push	{r4, lr}
 8003fb4:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8003fb6:	d003      	beq.n	8003fc0 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8003fb8:	2820      	cmp	r0, #32
 8003fba:	d011      	beq.n	8003fe0 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8003fbc:	2002      	movs	r0, #2
 8003fbe:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8003fc0:	4a0f      	ldr	r2, [pc, #60]	; (8004000 <Virtual_Com_Port_Data_Setup+0x50>)
 8003fc2:	6813      	ldr	r3, [r2, #0]
 8003fc4:	7818      	ldrb	r0, [r3, #0]
 8003fc6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8003fca:	2921      	cmp	r1, #33	; 0x21
 8003fcc:	d1f6      	bne.n	8003fbc <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8003fce:	490d      	ldr	r1, [pc, #52]	; (8004004 <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8003fd0:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8003fd2:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 8003fd4:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8003fd6:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8003fd8:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8003fda:	4788      	blx	r1
  return USB_SUCCESS;
 8003fdc:	4620      	mov	r0, r4
 8003fde:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8003fe0:	4a07      	ldr	r2, [pc, #28]	; (8004000 <Virtual_Com_Port_Data_Setup+0x50>)
 8003fe2:	6811      	ldr	r1, [r2, #0]
 8003fe4:	7808      	ldrb	r0, [r1, #0]
 8003fe6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8003fea:	2921      	cmp	r1, #33	; 0x21
 8003fec:	d003      	beq.n	8003ff6 <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8003fee:	4a06      	ldr	r2, [pc, #24]	; (8004008 <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8003ff0:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8003ff2:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8003ff4:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8003ff6:	4c04      	ldr	r4, [pc, #16]	; (8004008 <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8003ff8:	4904      	ldr	r1, [pc, #16]	; (800400c <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 8003ffa:	7023      	strb	r3, [r4, #0]
 8003ffc:	e7e8      	b.n	8003fd0 <Virtual_Com_Port_Data_Setup+0x20>
 8003ffe:	bf00      	nop
 8004000:	20001634 	.word	0x20001634
 8004004:	08004045 	.word	0x08004045
 8004008:	2000049c 	.word	0x2000049c
 800400c:	0800405d 	.word	0x0800405d

08004010 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8004010:	4b07      	ldr	r3, [pc, #28]	; (8004030 <Virtual_Com_Port_NoData_Setup+0x20>)
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	780a      	ldrb	r2, [r1, #0]
 8004016:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800401a:	2b21      	cmp	r3, #33	; 0x21
 800401c:	d001      	beq.n	8004022 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 800401e:	2002      	movs	r0, #2
}
 8004020:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8004022:	2802      	cmp	r0, #2
 8004024:	d001      	beq.n	800402a <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 8004026:	2822      	cmp	r0, #34	; 0x22
 8004028:	d1f9      	bne.n	800401e <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 800402a:	2000      	movs	r0, #0
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20001634 	.word	0x20001634

08004034 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8004034:	b109      	cbz	r1, 800403a <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 8004036:	2002      	movs	r0, #2
 8004038:	4770      	bx	lr
  }
  else if (Interface > 1)
 800403a:	2801      	cmp	r0, #1
 800403c:	d8fb      	bhi.n	8004036 <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 800403e:	4608      	mov	r0, r1
}
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop

08004044 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8004044:	b108      	cbz	r0, 800404a <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8004046:	4803      	ldr	r0, [pc, #12]	; (8004054 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8004048:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800404a:	4b03      	ldr	r3, [pc, #12]	; (8004058 <Virtual_Com_Port_GetLineCoding+0x14>)
 800404c:	2208      	movs	r2, #8
 800404e:	6819      	ldr	r1, [r3, #0]
 8004050:	820a      	strh	r2, [r1, #16]
    return NULL;
 8004052:	4770      	bx	lr
 8004054:	20000300 	.word	0x20000300
 8004058:	20001634 	.word	0x20001634

0800405c <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800405c:	b108      	cbz	r0, 8004062 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800405e:	4803      	ldr	r0, [pc, #12]	; (800406c <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8004060:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8004062:	4b03      	ldr	r3, [pc, #12]	; (8004070 <Virtual_Com_Port_SetLineCoding+0x14>)
 8004064:	2208      	movs	r2, #8
 8004066:	6819      	ldr	r1, [r3, #0]
 8004068:	820a      	strh	r2, [r1, #16]
    return NULL;
 800406a:	4770      	bx	lr
 800406c:	20000300 	.word	0x20000300
 8004070:	20001634 	.word	0x20001634

08004074 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8004074:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8004078:	6819      	ldr	r1, [r3, #0]
 800407a:	78ca      	ldrb	r2, [r1, #3]
  if (wValue0 > 4)
 800407c:	2a04      	cmp	r2, #4
 800407e:	d805      	bhi.n	800408c <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8004082:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8004086:	4a04      	ldr	r2, [pc, #16]	; (8004098 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8004088:	4790      	blx	r2
 800408a:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 800408c:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 800408e:	bd08      	pop	{r3, pc}
 8004090:	20001634 	.word	0x20001634
 8004094:	200002e0 	.word	0x200002e0
 8004098:	08004bd1 	.word	0x08004bd1

0800409c <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 800409c:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800409e:	f240 217c 	movw	r1, #636	; 0x27c
 80040a2:	f644 33d1 	movw	r3, #19409	; 0x4bd1
 80040a6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80040aa:	f6c0 0300 	movt	r3, #2048	; 0x800
 80040ae:	4798      	blx	r3
}
 80040b0:	bd08      	pop	{r3, pc}
 80040b2:	bf00      	nop

080040b4 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 80040b4:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 80040b6:	f240 21d8 	movw	r1, #728	; 0x2d8
 80040ba:	f644 33d1 	movw	r3, #19409	; 0x4bd1
 80040be:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80040c2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80040c6:	4798      	blx	r3
}
 80040c8:	bd08      	pop	{r3, pc}
 80040ca:	bf00      	nop

080040cc <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80040cc:	f241 6234 	movw	r2, #5684	; 0x1634

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 80040d0:	f246 13ac 	movw	r3, #25004	; 0x61ac
 80040d4:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80040d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80040dc:	6810      	ldr	r0, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 80040de:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 80040e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80040e4:	2400      	movs	r4, #0
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 80040e6:	f245 25d1 	movw	r5, #21201	; 0x52d1
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 80040ea:	7241      	strb	r1, [r0, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80040ec:	7284      	strb	r4, [r0, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 80040ee:	72c4      	strb	r4, [r0, #11]

  SetBTABLE(BTABLE_ADDRESS);
 80040f0:	f6c0 0500 	movt	r5, #2048	; 0x800
 80040f4:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 80040f6:	f245 26e5 	movw	r6, #21221	; 0x52e5
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 80040fa:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 80040fc:	f6c0 0600 	movt	r6, #2048	; 0x800
 8004100:	4620      	mov	r0, r4
 8004102:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8004106:	f245 25fd 	movw	r5, #21245	; 0x52fd
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800410a:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800410c:	f6c0 0500 	movt	r5, #2048	; 0x800
 8004110:	2110      	movs	r1, #16
 8004112:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8004114:	f245 4a51 	movw	sl, #21585	; 0x5451

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8004118:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800411a:	f6c0 0a00 	movt	sl, #2048	; 0x800
 800411e:	2140      	movs	r1, #64	; 0x40
 8004120:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8004122:	f245 482d 	movw	r8, #21549	; 0x542d
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8004126:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8004128:	f6c0 0800 	movt	r8, #2048	; 0x800
 800412c:	2180      	movs	r1, #128	; 0x80
 800412e:	4620      	mov	r0, r4
  Clear_Status_Out(ENDP0);
 8004130:	f245 37c5 	movw	r7, #21445	; 0x53c5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8004134:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8004136:	f6c0 0700 	movt	r7, #2048	; 0x800
 800413a:	4620      	mov	r0, r4
 800413c:	47b8      	blx	r7
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800413e:	f240 2284 	movw	r2, #644	; 0x284
 8004142:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004146:	f245 49d9 	movw	r9, #21721	; 0x54d9
 800414a:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800414e:	f6c0 0900 	movt	r9, #2048	; 0x800
 8004152:	4620      	mov	r0, r4
 8004154:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8004156:	f245 33a1 	movw	r3, #21409	; 0x53a1
 800415a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800415e:	4620      	mov	r0, r4
 8004160:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8004162:	2001      	movs	r0, #1
 8004164:	4621      	mov	r1, r4
 8004166:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8004168:	2001      	movs	r0, #1
 800416a:	21c0      	movs	r1, #192	; 0xc0
 800416c:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800416e:	f245 373d 	movw	r7, #21309	; 0x533d
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8004172:	2001      	movs	r0, #1
 8004174:	2120      	movs	r1, #32
 8004176:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8004178:	f6c0 0700 	movt	r7, #2048	; 0x800
 800417c:	2001      	movs	r0, #1
 800417e:	4621      	mov	r1, r4
 8004180:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8004182:	2002      	movs	r0, #2
 8004184:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004188:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800418a:	2002      	movs	r0, #2
 800418c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004190:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8004192:	2002      	movs	r0, #2
 8004194:	4621      	mov	r1, r4
 8004196:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8004198:	2002      	movs	r0, #2
 800419a:	2120      	movs	r1, #32
 800419c:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 800419e:	2003      	movs	r0, #3
 80041a0:	4621      	mov	r1, r4
 80041a2:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 80041a4:	2003      	movs	r0, #3
 80041a6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80041aa:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 80041ac:	2003      	movs	r0, #3
 80041ae:	2140      	movs	r1, #64	; 0x40
 80041b0:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 80041b2:	2003      	movs	r0, #3
 80041b4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80041b8:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 80041ba:	4621      	mov	r1, r4
 80041bc:	2003      	movs	r0, #3
 80041be:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 80041c0:	f245 01ad 	movw	r1, #20653	; 0x50ad
 80041c4:	4620      	mov	r0, r4
 80041c6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80041ca:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 80041cc:	f240 40a0 	movw	r0, #1184	; 0x4a0
 80041d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80041d4:	2201      	movs	r2, #1
 80041d6:	6002      	str	r2, [r0, #0]
 80041d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080041dc <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 80041dc:	f244 73bd 	movw	r3, #18365	; 0x47bd
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 80041e0:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 80041e2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80041e6:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 80041e8:	f241 6034 	movw	r0, #5684	; 0x1634
 80041ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80041f0:	6802      	ldr	r2, [r0, #0]
 80041f2:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 80041f4:	f244 2119 	movw	r1, #16921	; 0x4219

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 80041f8:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 80041fa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80041fe:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8004200:	f245 534d 	movw	r3, #21837	; 0x554d
 8004204:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004208:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 800420a:	f240 40a0 	movw	r0, #1184	; 0x4a0
 800420e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004212:	6004      	str	r4, [r0, #0]
 8004214:	bd10      	pop	{r4, pc}
 8004216:	bf00      	nop

08004218 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8004218:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800421a:	f244 638d 	movw	r3, #18061	; 0x468d
 800421e:	2001      	movs	r0, #1
 8004220:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004224:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8004226:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800422a:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800422e:	f241 6238 	movw	r2, #5688	; 0x1638
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8004232:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8004236:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8004238:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800423c:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800423e:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8004242:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8004246:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8004248:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 800424a:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800424c:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800424e:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 8004250:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 8004252:	bd38      	pop	{r3, r4, r5, pc}

08004254 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8004254:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8004256:	2100      	movs	r1, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8004258:	b083      	sub	sp, #12
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800425a:	f645 4340 	movw	r3, #23616	; 0x5c40

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800425e:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8004262:	9101      	str	r1, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8004264:	f2c4 0300 	movt	r3, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004268:	f2c4 0200 	movt	r2, #16384	; 0x4000
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800426c:	6818      	ldr	r0, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800426e:	6814      	ldr	r4, [r2, #0]
 8004270:	4960      	ldr	r1, [pc, #384]	; (80043f4 <Suspend+0x1a0>)
 8004272:	b2a5      	uxth	r5, r4
 8004274:	f645 4604 	movw	r6, #23556	; 0x5c04
 8004278:	600d      	str	r5, [r1, #0]
 800427a:	f2c4 0600 	movt	r6, #16384	; 0x4000
 800427e:	6837      	ldr	r7, [r6, #0]
 8004280:	f645 4208 	movw	r2, #23560	; 0x5c08
 8004284:	b2bc      	uxth	r4, r7
 8004286:	604c      	str	r4, [r1, #4]
 8004288:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800428c:	6815      	ldr	r5, [r2, #0]
 800428e:	f645 460c 	movw	r6, #23564	; 0x5c0c
 8004292:	b2af      	uxth	r7, r5
 8004294:	608f      	str	r7, [r1, #8]
 8004296:	f2c4 0600 	movt	r6, #16384	; 0x4000
 800429a:	6834      	ldr	r4, [r6, #0]
 800429c:	f645 4210 	movw	r2, #23568	; 0x5c10
 80042a0:	b2a5      	uxth	r5, r4
 80042a2:	60cd      	str	r5, [r1, #12]
 80042a4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80042a8:	6816      	ldr	r6, [r2, #0]
 80042aa:	f645 4714 	movw	r7, #23572	; 0x5c14
 80042ae:	b2b4      	uxth	r4, r6
 80042b0:	610c      	str	r4, [r1, #16]
 80042b2:	f2c4 0700 	movt	r7, #16384	; 0x4000
 80042b6:	683d      	ldr	r5, [r7, #0]
 80042b8:	f645 4218 	movw	r2, #23576	; 0x5c18
 80042bc:	b2ae      	uxth	r6, r5
 80042be:	614e      	str	r6, [r1, #20]
 80042c0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80042c4:	6817      	ldr	r7, [r2, #0]
 80042c6:	f645 451c 	movw	r5, #23580	; 0x5c1c
 80042ca:	b2bc      	uxth	r4, r7
 80042cc:	618c      	str	r4, [r1, #24]
 80042ce:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80042d2:	682e      	ldr	r6, [r5, #0]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80042d4:	b282      	uxth	r2, r0
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80042d6:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80042da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80042de:	4004      	ands	r4, r0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80042e0:	b2b7      	uxth	r7, r6
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80042e2:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 80042e6:	f042 0601 	orr.w	r6, r2, #1
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 80042ea:	f645 4044 	movw	r0, #23620	; 0x5c44
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80042ee:	61cf      	str	r7, [r1, #28]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 80042f0:	f2c4 0000 	movt	r0, #16384	; 0x4000
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80042f4:	601a      	str	r2, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 80042f6:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 80042f8:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 80042fa:	6802      	ldr	r2, [r0, #0]
 80042fc:	f645 4344 	movw	r3, #23620	; 0x5c44
 8004300:	0552      	lsls	r2, r2, #21
 8004302:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004306:	d5f8      	bpl.n	80042fa <Suspend+0xa6>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8004308:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 800430c:	6018      	str	r0, [r3, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 800430e:	6808      	ldr	r0, [r1, #0]
 8004310:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8004314:	b280      	uxth	r0, r0
 8004316:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800431a:	6010      	str	r0, [r2, #0]
 800431c:	6848      	ldr	r0, [r1, #4]
 800431e:	f645 4204 	movw	r2, #23556	; 0x5c04
 8004322:	b280      	uxth	r0, r0
 8004324:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004328:	6010      	str	r0, [r2, #0]
 800432a:	6888      	ldr	r0, [r1, #8]
 800432c:	f645 4208 	movw	r2, #23560	; 0x5c08
 8004330:	b280      	uxth	r0, r0
 8004332:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004336:	6010      	str	r0, [r2, #0]
 8004338:	68c8      	ldr	r0, [r1, #12]
 800433a:	f645 420c 	movw	r2, #23564	; 0x5c0c
 800433e:	b280      	uxth	r0, r0
 8004340:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004344:	6010      	str	r0, [r2, #0]
 8004346:	6908      	ldr	r0, [r1, #16]
 8004348:	f645 4210 	movw	r2, #23568	; 0x5c10
 800434c:	b280      	uxth	r0, r0
 800434e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004352:	6010      	str	r0, [r2, #0]
 8004354:	6948      	ldr	r0, [r1, #20]
 8004356:	f645 4214 	movw	r2, #23572	; 0x5c14
 800435a:	b280      	uxth	r0, r0
 800435c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004360:	6010      	str	r0, [r2, #0]
 8004362:	6988      	ldr	r0, [r1, #24]
 8004364:	f645 4218 	movw	r2, #23576	; 0x5c18
 8004368:	b280      	uxth	r0, r0
 800436a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800436e:	6010      	str	r0, [r2, #0]
 8004370:	69c8      	ldr	r0, [r1, #28]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8004372:	f645 4240 	movw	r2, #23616	; 0x5c40
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8004376:	f645 411c 	movw	r1, #23580	; 0x5c1c
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800437a:	f2c4 0200 	movt	r2, #16384	; 0x4000
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 800437e:	b280      	uxth	r0, r0
 8004380:	f2c4 0100 	movt	r1, #16384	; 0x4000
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 8004384:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8004388:	6008      	str	r0, [r1, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800438a:	6014      	str	r4, [r2, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 800438c:	6810      	ldr	r0, [r2, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800438e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 8004392:	b284      	uxth	r4, r0
 8004394:	f044 0004 	orr.w	r0, r4, #4
 8004398:	6010      	str	r0, [r2, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800439a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800439e:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80043a0:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80043a4:	9001      	str	r0, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 80043a6:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80043a8:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 80043ac:	f020 0003 	bic.w	r0, r0, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 80043b0:	f040 0001 	orr.w	r0, r0, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 80043b4:	6008      	str	r0, [r1, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80043b6:	6820      	ldr	r0, [r4, #0]
 80043b8:	f040 0004 	orr.w	r0, r0, #4
 80043bc:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	04c0      	lsls	r0, r0, #19
 80043c2:	d50f      	bpl.n	80043e4 <Suspend+0x190>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 80043c4:	f64e 70ff 	movw	r0, #61439	; 0xefff
 80043c8:	6018      	str	r0, [r3, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 80043ca:	6810      	ldr	r0, [r2, #0]
        wCNTR&=~CNTR_FSUSP;
 80043cc:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80043d0:	4003      	ands	r3, r0
        _SetCNTR(wCNTR);
 80043d2:	6013      	str	r3, [r2, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 80043d4:	9a01      	ldr	r2, [sp, #4]
 80043d6:	600a      	str	r2, [r1, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 80043d8:	6821      	ldr	r1, [r4, #0]
 80043da:	f021 0004 	bic.w	r0, r1, #4
 80043de:	6020      	str	r0, [r4, #0]
#endif
    }
}
 80043e0:	b003      	add	sp, #12
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <Suspend+0x1a4>)
 80043e6:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 80043e8:	6822      	ldr	r2, [r4, #0]
 80043ea:	f022 0104 	bic.w	r1, r2, #4
 80043ee:	6021      	str	r1, [r4, #0]
 80043f0:	e7f6      	b.n	80043e0 <Suspend+0x18c>
 80043f2:	bf00      	nop
 80043f4:	20000de4 	.word	0x20000de4
 80043f8:	08004801 	.word	0x08004801

080043fc <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 80043fc:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 80043fe:	f645 4440 	movw	r4, #23616	; 0x5c40
 8004402:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004406:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 8004408:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800440c:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800440e:	f244 50bd 	movw	r0, #17853	; 0x45bd
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8004412:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8004414:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004418:	4780      	blx	r0

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 800441a:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 800441e:	6021      	str	r1, [r4, #0]
 8004420:	bd10      	pop	{r4, pc}
 8004422:	bf00      	nop

08004424 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8004424:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 8004426:	4c2b      	ldr	r4, [pc, #172]	; (80044d4 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8004428:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 800442a:	bf18      	it	ne
 800442c:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 800442e:	7823      	ldrb	r3, [r4, #0]
 8004430:	2b05      	cmp	r3, #5
 8004432:	d819      	bhi.n	8004468 <Resume+0x44>
 8004434:	e8df f003 	tbb	[pc, r3]
 8004438:	2f2a221b 	.word	0x2f2a221b
 800443c:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 800443e:	7860      	ldrb	r0, [r4, #1]
 8004440:	1e41      	subs	r1, r0, #1
 8004442:	b2ca      	uxtb	r2, r1
 8004444:	7062      	strb	r2, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8004446:	7863      	ldrb	r3, [r4, #1]
 8004448:	b983      	cbnz	r3, 800446c <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 800444a:	f645 4240 	movw	r2, #23616	; 0x5c40
 800444e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004452:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 8004454:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8004458:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 800445a:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 800445c:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <Resume+0xb0>)
        remotewakeupon = 0;
 800445e:	491e      	ldr	r1, [pc, #120]	; (80044d8 <Resume+0xb4>)
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 8004460:	2006      	movs	r0, #6
 8004462:	7010      	strb	r0, [r2, #0]
        remotewakeupon = 0;
 8004464:	600b      	str	r3, [r1, #0]
 8004466:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8004468:	2106      	movs	r1, #6
 800446a:	7021      	strb	r1, [r4, #0]
 800446c:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 800446e:	4a1a      	ldr	r2, [pc, #104]	; (80044d8 <Resume+0xb4>)
 8004470:	6811      	ldr	r1, [r2, #0]
 8004472:	2900      	cmp	r1, #0
 8004474:	d028      	beq.n	80044c8 <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8004476:	2005      	movs	r0, #5
 8004478:	7020      	strb	r0, [r4, #0]
 800447a:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 800447c:	4a17      	ldr	r2, [pc, #92]	; (80044dc <Resume+0xb8>)
 800447e:	4790      	blx	r2
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 8004480:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <Resume+0xb4>)
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8004482:	2104      	movs	r1, #4
      remotewakeupon = 1;
 8004484:	2001      	movs	r0, #1
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8004486:	7021      	strb	r1, [r4, #0]
      remotewakeupon = 1;
 8004488:	6018      	str	r0, [r3, #0]
      break;
 800448a:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 800448c:	2302      	movs	r3, #2
      ResumeS.eState = RESUME_WAIT;
 800448e:	2003      	movs	r0, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8004490:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8004492:	7020      	strb	r0, [r4, #0]
      break;
 8004494:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 8004496:	7862      	ldrb	r2, [r4, #1]
 8004498:	1e51      	subs	r1, r2, #1
 800449a:	b2cb      	uxtb	r3, r1
 800449c:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800449e:	7860      	ldrb	r0, [r4, #1]
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d1e3      	bne.n	800446c <Resume+0x48>
        ResumeS.eState = RESUME_START;
 80044a4:	490b      	ldr	r1, [pc, #44]	; (80044d4 <Resume+0xb0>)
 80044a6:	2204      	movs	r2, #4
 80044a8:	700a      	strb	r2, [r1, #0]
 80044aa:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 80044ac:	f645 4340 	movw	r3, #23616	; 0x5c40
 80044b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80044b4:	6818      	ldr	r0, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 80044b6:	b282      	uxth	r2, r0
 80044b8:	f042 0110 	orr.w	r1, r2, #16
 80044bc:	6019      	str	r1, [r3, #0]
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 80044be:	200a      	movs	r0, #10
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 80044c0:	2305      	movs	r3, #5
 80044c2:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 80044c4:	7060      	strb	r0, [r4, #1]
      break;
 80044c6:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 80044c8:	4b04      	ldr	r3, [pc, #16]	; (80044dc <Resume+0xb8>)
 80044ca:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 80044cc:	2206      	movs	r2, #6
 80044ce:	7022      	strb	r2, [r4, #0]
 80044d0:	bd10      	pop	{r4, pc}
 80044d2:	bf00      	nop
 80044d4:	20000de0 	.word	0x20000de0
 80044d8:	200004a8 	.word	0x200004a8
 80044dc:	080043fd 	.word	0x080043fd

080044e0 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 80044e0:	f240 4314 	movw	r3, #1044	; 0x414
 80044e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80044e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	4770      	bx	lr

080044f0 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 80044f0:	b470      	push	{r4, r5, r6}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80044f2:	b38a      	cbz	r2, 8004558 <IntToUnicode+0x68>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80044f4:	1e56      	subs	r6, r2, #1
 80044f6:	b2f2      	uxtb	r2, r6
 80044f8:	1c53      	adds	r3, r2, #1
 80044fa:	005e      	lsls	r6, r3, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80044fc:	0f03      	lsrs	r3, r0, #28
 80044fe:	1eb2      	subs	r2, r6, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004500:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004502:	2b09      	cmp	r3, #9
 8004504:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8004508:	d928      	bls.n	800455c <IntToUnicode+0x6c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800450a:	3337      	adds	r3, #55	; 0x37
 800450c:	700b      	strb	r3, [r1, #0]
 800450e:	2302      	movs	r3, #2
    }
    
    value = value << 4;
 8004510:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004512:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004514:	704c      	strb	r4, [r1, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004516:	d01f      	beq.n	8004558 <IntToUnicode+0x68>
 8004518:	b152      	cbz	r2, 8004530 <IntToUnicode+0x40>
  {
    if( ((value >> 28)) < 0xA )
 800451a:	0f02      	lsrs	r2, r0, #28
 800451c:	2a09      	cmp	r2, #9
 800451e:	d913      	bls.n	8004548 <IntToUnicode+0x58>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004520:	3237      	adds	r2, #55	; 0x37
 8004522:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8004524:	18ca      	adds	r2, r1, r3
 8004526:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8004528:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800452a:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800452c:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800452e:	d013      	beq.n	8004558 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8004530:	0f05      	lsrs	r5, r0, #28
 8004532:	2d09      	cmp	r5, #9
 8004534:	d815      	bhi.n	8004562 <IntToUnicode+0x72>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004536:	3530      	adds	r5, #48	; 0x30
 8004538:	54cd      	strb	r5, [r1, r3]
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 800453a:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 800453c:	0f02      	lsrs	r2, r0, #28
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800453e:	18cd      	adds	r5, r1, r3
 8004540:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004542:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004544:	706c      	strb	r4, [r5, #1]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004546:	d8eb      	bhi.n	8004520 <IntToUnicode+0x30>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004548:	3230      	adds	r2, #48	; 0x30
 800454a:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800454c:	18ca      	adds	r2, r1, r3
 800454e:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8004550:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004552:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004554:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004556:	d1eb      	bne.n	8004530 <IntToUnicode+0x40>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8004558:	bc70      	pop	{r4, r5, r6}
 800455a:	4770      	bx	lr
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800455c:	3330      	adds	r3, #48	; 0x30
 800455e:	700b      	strb	r3, [r1, #0]
 8004560:	e7d5      	b.n	800450e <IntToUnicode+0x1e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004562:	3537      	adds	r5, #55	; 0x37
 8004564:	54cd      	strb	r5, [r1, r3]
 8004566:	e7e8      	b.n	800453a <IntToUnicode+0x4a>

08004568 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8004568:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 800456a:	f643 43f9 	movw	r3, #15609	; 0x3cf9
 800456e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004572:	4798      	blx	r3
 8004574:	bd08      	pop	{r3, pc}
 8004576:	bf00      	nop

08004578 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8004578:	f241 0304 	movw	r3, #4100	; 0x1004
 800457c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	f422 0070 	bic.w	r0, r2, #15728640	; 0xf00000
 8004586:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 8004588:	6819      	ldr	r1, [r3, #0]
 800458a:	f441 1200 	orr.w	r2, r1, #2097152	; 0x200000
 800458e:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	6018      	str	r0, [r3, #0]
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop

08004598 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8004598:	f241 0204 	movw	r2, #4100	; 0x1004
 800459c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80045a0:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 80045a2:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 80045a6:	f421 0080 	bic.w	r0, r1, #4194304	; 0x400000
 80045aa:	6010      	str	r0, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 80045ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	f442 0100 	orr.w	r1, r2, #8388608	; 0x800000
 80045b6:	6019      	str	r1, [r3, #0]
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop

080045bc <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <Leave_LowPowerMode+0x18>)
 80045be:	7a98      	ldrb	r0, [r3, #10]
 80045c0:	b918      	cbnz	r0, 80045ca <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 80045c2:	4905      	ldr	r1, [pc, #20]	; (80045d8 <Leave_LowPowerMode+0x1c>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	600a      	str	r2, [r1, #0]
 80045c8:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 80045ca:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <Leave_LowPowerMode+0x1c>)
 80045cc:	2005      	movs	r0, #5
 80045ce:	6018      	str	r0, [r3, #0]
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20001614 	.word	0x20001614
 80045d8:	200004a0 	.word	0x200004a0

080045dc <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 80045dc:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 80045e0:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 80045e2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80045e6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 80045ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 80045ee:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 80045f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80045f4:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 80045f6:	f240 4404 	movw	r4, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 80045fa:	f420 2580 	bic.w	r5, r0, #262144	; 0x40000
 80045fe:	601d      	str	r5, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8004600:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8004604:	6822      	ldr	r2, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8004606:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 800460a:	f422 2080 	bic.w	r0, r2, #262144	; 0x40000
 800460e:	6020      	str	r0, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8004610:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004614:	680c      	ldr	r4, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8004616:	f240 450c 	movw	r5, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800461a:	f444 2280 	orr.w	r2, r4, #262144	; 0x40000
 800461e:	600a      	str	r2, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8004620:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004624:	6829      	ldr	r1, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8004626:	f242 3491 	movw	r4, #9105	; 0x2391
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800462a:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 800462e:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8004630:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8004632:	f244 5169 	movw	r1, #17769	; 0x4569
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8004636:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800463a:	2090      	movs	r0, #144	; 0x90
 800463c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004640:	2200      	movs	r2, #0
 8004642:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8004646:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8004648:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 800464a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800464e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004652:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8004654:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8004656:	f442 1180 	orr.w	r1, r2, #1048576	; 0x100000
 800465a:	6019      	str	r1, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 800465c:	f244 41e1 	movw	r1, #17633	; 0x44e1
 8004660:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004664:	2200      	movs	r2, #0
 8004666:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8004668:	f24e 1004 	movw	r0, #57604	; 0xe104
 800466c:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8004670:	6802      	ldr	r2, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8004672:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8004676:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 800467a:	6001      	str	r1, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 800467c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	f440 2280 	orr.w	r2, r0, #262144	; 0x40000
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	bd38      	pop	{r3, r4, r5, pc}
 800468a:	bf00      	nop

0800468c <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 800468c:	f241 030c 	movw	r3, #4108	; 0x100c
 8004690:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004694:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 8004696:	b918      	cbnz	r0, 80046a0 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8004698:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 800469c:	6018      	str	r0, [r3, #0]
 800469e:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 80046a0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80046a4:	6019      	str	r1, [r3, #0]
 80046a6:	4770      	bx	lr

080046a8 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80046a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80046ac:	460f      	mov	r7, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80046ae:	b082      	sub	sp, #8
 80046b0:	4605      	mov	r5, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80046b2:	b361      	cbz	r1, 800470e <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80046b4:	7803      	ldrb	r3, [r0, #0]
 80046b6:	1e4a      	subs	r2, r1, #1
    Hw_Uart_Q_Push( 5, &UartData );	//
 80046b8:	2005      	movs	r0, #5
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80046ba:	2401      	movs	r4, #1
 80046bc:	4e15      	ldr	r6, [pc, #84]	; (8004714 <USB_To_USART_Send_Data+0x6c>)
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 80046be:	f10d 0107 	add.w	r1, sp, #7
 80046c2:	ea02 0804 	and.w	r8, r2, r4
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80046c6:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80046ca:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80046cc:	42bc      	cmp	r4, r7
 80046ce:	d21e      	bcs.n	800470e <USB_To_USART_Send_Data+0x66>
 80046d0:	f1b8 0f00 	cmp.w	r8, #0
 80046d4:	d009      	beq.n	80046ea <USB_To_USART_Send_Data+0x42>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80046d6:	786b      	ldrb	r3, [r5, #1]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80046d8:	2005      	movs	r0, #5
 80046da:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80046de:	2402      	movs	r4, #2
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80046e0:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80046e4:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80046e6:	42bc      	cmp	r4, r7
 80046e8:	d211      	bcs.n	800470e <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80046ea:	5d2a      	ldrb	r2, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80046ec:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80046f0:	3401      	adds	r4, #1
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 80046f2:	2005      	movs	r0, #5
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80046f4:	f88d 2007 	strb.w	r2, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80046f8:	47b0      	blx	r6
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80046fa:	5d2b      	ldrb	r3, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80046fc:	2005      	movs	r0, #5
 80046fe:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004702:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004704:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004708:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800470a:	42bc      	cmp	r4, r7
 800470c:	d3ed      	bcc.n	80046ea <USB_To_USART_Send_Data+0x42>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 800470e:	b002      	add	sp, #8
 8004710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004714:	0800227d 	.word	0x0800227d

08004718 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8004718:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 800471a:	4c20      	ldr	r4, [pc, #128]	; (800479c <Handle_USBAsynchXfer+0x84>)
 800471c:	7823      	ldrb	r3, [r4, #0]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d023      	beq.n	800476a <Handle_USBAsynchXfer+0x52>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8004722:	4d1f      	ldr	r5, [pc, #124]	; (80047a0 <Handle_USBAsynchXfer+0x88>)
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800472a:	d02c      	beq.n	8004786 <Handle_USBAsynchXfer+0x6e>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800472c:	4a1d      	ldr	r2, [pc, #116]	; (80047a4 <Handle_USBAsynchXfer+0x8c>)
 800472e:	6811      	ldr	r1, [r2, #0]
 8004730:	428b      	cmp	r3, r1
 8004732:	d02f      	beq.n	8004794 <Handle_USBAsynchXfer+0x7c>
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8004734:	d81a      	bhi.n	800476c <Handle_USBAsynchXfer+0x54>
 8004736:	b298      	uxth	r0, r3
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8004738:	1ace      	subs	r6, r1, r3
 800473a:	4a1b      	ldr	r2, [pc, #108]	; (80047a8 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800473c:	2e40      	cmp	r6, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800473e:	6016      	str	r6, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8004740:	d91b      	bls.n	800477a <Handle_USBAsynchXfer+0x62>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8004742:	3e40      	subs	r6, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8004744:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8004746:	6016      	str	r6, [r2, #0]
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8004748:	602b      	str	r3, [r5, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800474a:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800474c:	4b17      	ldr	r3, [pc, #92]	; (80047ac <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 800474e:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8004750:	1818      	adds	r0, r3, r0
 8004752:	4632      	mov	r2, r6
 8004754:	21c0      	movs	r1, #192	; 0xc0
 8004756:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8004758:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800475a:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 800475c:	4628      	mov	r0, r5
 800475e:	4631      	mov	r1, r6
 8004760:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <Handle_USBAsynchXfer+0x9c>)
 8004762:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 8004764:	4628      	mov	r0, r5
 8004766:	4914      	ldr	r1, [pc, #80]	; (80047b8 <Handle_USBAsynchXfer+0xa0>)
 8004768:	4788      	blx	r1
 800476a:	bd70      	pop	{r4, r5, r6, pc}
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800476c:	f5c3 6600 	rsb	r6, r3, #2048	; 0x800
 8004770:	4a0d      	ldr	r2, [pc, #52]	; (80047a8 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8004772:	2e40      	cmp	r6, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8004774:	6016      	str	r6, [r2, #0]
 8004776:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8004778:	d8e3      	bhi.n	8004742 <Handle_USBAsynchXfer+0x2a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 800477a:	18f1      	adds	r1, r6, r3
 800477c:	6029      	str	r1, [r5, #0]
      USART_Rx_length = 0;
 800477e:	2500      	movs	r5, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 8004780:	b2b6      	uxth	r6, r6
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8004782:	6015      	str	r5, [r2, #0]
 8004784:	e7e2      	b.n	800474c <Handle_USBAsynchXfer+0x34>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8004786:	4907      	ldr	r1, [pc, #28]	; (80047a4 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8004788:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800478a:	6809      	ldr	r1, [r1, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 800478c:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800478e:	b109      	cbz	r1, 8004794 <Handle_USBAsynchXfer+0x7c>
 8004790:	4603      	mov	r3, r0
 8004792:	e7d1      	b.n	8004738 <Handle_USBAsynchXfer+0x20>
    {
      USB_Tx_State = 0; 
 8004794:	2000      	movs	r0, #0
 8004796:	7020      	strb	r0, [r4, #0]
      return;
 8004798:	bd70      	pop	{r4, r5, r6, pc}
 800479a:	bf00      	nop
 800479c:	200004ac 	.word	0x200004ac
 80047a0:	200004b4 	.word	0x200004b4
 80047a4:	200004b0 	.word	0x200004b0
 80047a8:	200004b8 	.word	0x200004b8
 80047ac:	20000e04 	.word	0x20000e04
 80047b0:	08005209 	.word	0x08005209
 80047b4:	080054b9 	.word	0x080054b9
 80047b8:	0800537d 	.word	0x0800537d

080047bc <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 80047bc:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80047be:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80047c2:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80047c6:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80047ca:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80047ce:	6810      	ldr	r0, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 80047d0:	681a      	ldr	r2, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 80047d2:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 80047d6:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80047da:	1880      	adds	r0, r0, r2
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 80047dc:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80047de:	d007      	beq.n	80047f0 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 80047e0:	4904      	ldr	r1, [pc, #16]	; (80047f4 <Get_SerialNum+0x38>)
 80047e2:	2208      	movs	r2, #8
 80047e4:	4d04      	ldr	r5, [pc, #16]	; (80047f8 <Get_SerialNum+0x3c>)
 80047e6:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 80047e8:	4620      	mov	r0, r4
 80047ea:	4904      	ldr	r1, [pc, #16]	; (80047fc <Get_SerialNum+0x40>)
 80047ec:	2204      	movs	r2, #4
 80047ee:	47a8      	blx	r5
 80047f0:	bd38      	pop	{r3, r4, r5, pc}
 80047f2:	bf00      	nop
 80047f4:	2000022a 	.word	0x2000022a
 80047f8:	080044f1 	.word	0x080044f1
 80047fc:	2000023a 	.word	0x2000023a

08004800 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8004800:	bf30      	wfi
 8004802:	4770      	bx	lr

08004804 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8004804:	b508      	push	{r3, lr}
  if (Length == 0)
 8004806:	b138      	cbz	r0, 8004818 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <Standard_GetConfiguration+0x20>)
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	6801      	ldr	r1, [r0, #0]
 800480e:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_Configuration;
 8004810:	4a05      	ldr	r2, [pc, #20]	; (8004828 <Standard_GetConfiguration+0x24>)
 8004812:	6810      	ldr	r0, [r2, #0]
 8004814:	300a      	adds	r0, #10
}
 8004816:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <Standard_GetConfiguration+0x24>)
 800481a:	2201      	movs	r2, #1
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8004820:	bd08      	pop	{r3, pc}
 8004822:	bf00      	nop
 8004824:	20001630 	.word	0x20001630
 8004828:	20001634 	.word	0x20001634

0800482c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800482c:	b508      	push	{r3, lr}
  if (Length == 0)
 800482e:	b138      	cbz	r0, 8004840 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <Standard_GetInterface+0x20>)
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	6881      	ldr	r1, [r0, #8]
 8004836:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8004838:	4a05      	ldr	r2, [pc, #20]	; (8004850 <Standard_GetInterface+0x24>)
 800483a:	6810      	ldr	r0, [r2, #0]
 800483c:	300c      	adds	r0, #12
}
 800483e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <Standard_GetInterface+0x24>)
 8004842:	2201      	movs	r2, #1
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8004848:	bd08      	pop	{r3, pc}
 800484a:	bf00      	nop
 800484c:	20001630 	.word	0x20001630
 8004850:	20001634 	.word	0x20001634

08004854 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8004854:	b508      	push	{r3, lr}
  if (Length == 0)
 8004856:	2800      	cmp	r0, #0
 8004858:	d03b      	beq.n	80048d2 <Standard_GetStatus+0x7e>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800485a:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <Standard_GetStatus+0x94>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800485c:	4823      	ldr	r0, [pc, #140]	; (80048ec <Standard_GetStatus+0x98>)
 800485e:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004860:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8004862:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004864:	7813      	ldrb	r3, [r2, #0]
 8004866:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800486a:	d112      	bne.n	8004892 <Standard_GetStatus+0x3e>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 800486c:	7a53      	ldrb	r3, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800486e:	f003 0220 	and.w	r2, r3, #32
 8004872:	b2d1      	uxtb	r1, r2
 8004874:	bb59      	cbnz	r1, 80048ce <Standard_GetStatus+0x7a>
 8004876:	7802      	ldrb	r2, [r0, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	b2d9      	uxtb	r1, r3
 800487e:	b311      	cbz	r1, 80048c6 <Standard_GetStatus+0x72>
    {
      SetBit(StatusInfo0, 0);
 8004880:	f042 0301 	orr.w	r3, r2, #1
 8004884:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8004886:	481a      	ldr	r0, [pc, #104]	; (80048f0 <Standard_GetStatus+0x9c>)
 8004888:	6801      	ldr	r1, [r0, #0]
 800488a:	690a      	ldr	r2, [r1, #16]
 800488c:	4790      	blx	r2
  return (uint8_t *)&StatusInfo;
 800488e:	4817      	ldr	r0, [pc, #92]	; (80048ec <Standard_GetStatus+0x98>)
 8004890:	bd08      	pop	{r3, pc}
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8004892:	2b01      	cmp	r3, #1
 8004894:	d016      	beq.n	80048c4 <Standard_GetStatus+0x70>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8004896:	2b02      	cmp	r3, #2
 8004898:	d113      	bne.n	80048c2 <Standard_GetStatus+0x6e>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800489a:	7951      	ldrb	r1, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 800489c:	f001 020f 	and.w	r2, r1, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80048a0:	0093      	lsls	r3, r2, #2
 80048a2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80048a6:	f502 43b8 	add.w	r3, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80048aa:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80048ae:	6819      	ldr	r1, [r3, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80048b0:	d114      	bne.n	80048dc <Standard_GetStatus+0x88>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80048b2:	f401 5240 	and.w	r2, r1, #12288	; 0x3000
 80048b6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80048ba:	d1e4      	bne.n	8004886 <Standard_GetStatus+0x32>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 80048bc:	2101      	movs	r1, #1
 80048be:	7001      	strb	r1, [r0, #0]
 80048c0:	e7e1      	b.n	8004886 <Standard_GetStatus+0x32>
    }

  }
  else
  {
    return NULL;
 80048c2:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 80048c4:	bd08      	pop	{r3, pc}
    {
      SetBit(StatusInfo0, 0);
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	7002      	strb	r2, [r0, #0]
 80048cc:	e7db      	b.n	8004886 <Standard_GetStatus+0x32>
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 80048ce:	2202      	movs	r2, #2
 80048d0:	e7d2      	b.n	8004878 <Standard_GetStatus+0x24>
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <Standard_GetStatus+0x94>)
 80048d4:	2202      	movs	r2, #2
 80048d6:	6819      	ldr	r1, [r3, #0]
 80048d8:	820a      	strh	r2, [r1, #16]
    return 0;
 80048da:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80048dc:	f001 0330 	and.w	r3, r1, #48	; 0x30
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d1d0      	bne.n	8004886 <Standard_GetStatus+0x32>
 80048e4:	e7ea      	b.n	80048bc <Standard_GetStatus+0x68>
 80048e6:	bf00      	nop
 80048e8:	20001634 	.word	0x20001634
 80048ec:	20001604 	.word	0x20001604
 80048f0:	20001630 	.word	0x20001630

080048f4 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80048f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80048f8:	4e27      	ldr	r6, [pc, #156]	; (8004998 <DataStageIn+0xa4>)
 80048fa:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 80048fc:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 80048fe:	7a27      	ldrb	r7, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8004900:	b923      	cbnz	r3, 800490c <DataStageIn+0x18>
 8004902:	2f04      	cmp	r7, #4
 8004904:	d02a      	beq.n	800495c <DataStageIn+0x68>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8004906:	8aa5      	ldrh	r5, [r4, #20]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8004908:	2704      	movs	r7, #4
 800490a:	e003      	b.n	8004914 <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 800490c:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800490e:	42ab      	cmp	r3, r5
 8004910:	d9fa      	bls.n	8004908 <DataStageIn+0x14>
 8004912:	2702      	movs	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8004914:	429d      	cmp	r5, r3
 8004916:	bf28      	it	cs
 8004918:	461d      	movcs	r5, r3
 800491a:	69a1      	ldr	r1, [r4, #24]
 800491c:	4628      	mov	r0, r5
 800491e:	4788      	blx	r1
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8004920:	4a1e      	ldr	r2, [pc, #120]	; (800499c <DataStageIn+0xa8>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8004922:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8004924:	2000      	movs	r0, #0
 8004926:	4790      	blx	r2
 8004928:	462a      	mov	r2, r5
 800492a:	4601      	mov	r1, r0
 800492c:	4b1c      	ldr	r3, [pc, #112]	; (80049a0 <DataStageIn+0xac>)
 800492e:	4640      	mov	r0, r8
 8004930:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8004932:	4629      	mov	r1, r5
 8004934:	2000      	movs	r0, #0
 8004936:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <DataStageIn+0xb0>)
 8004938:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 800493a:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800493c:	8a61      	ldrh	r1, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800493e:	1b43      	subs	r3, r0, r5
 8004940:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8004942:	186d      	adds	r5, r5, r1
  vSetEPTxStatus(EP_TX_VALID);
 8004944:	4818      	ldr	r0, [pc, #96]	; (80049a8 <DataStageIn+0xb4>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8004946:	4b19      	ldr	r3, [pc, #100]	; (80049ac <DataStageIn+0xb8>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8004948:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 800494a:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800494c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004950:	6834      	ldr	r4, [r6, #0]

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8004952:	8002      	strh	r2, [r0, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8004954:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8004956:	7227      	strb	r7, [r4, #8]
 8004958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 800495c:	4a14      	ldr	r2, [pc, #80]	; (80049b0 <DataStageIn+0xbc>)
 800495e:	7810      	ldrb	r0, [r2, #0]
 8004960:	2801      	cmp	r0, #1
 8004962:	d006      	beq.n	8004972 <DataStageIn+0x7e>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8004964:	4910      	ldr	r1, [pc, #64]	; (80049a8 <DataStageIn+0xb4>)
 8004966:	2710      	movs	r7, #16
 8004968:	800f      	strh	r7, [r1, #0]
 800496a:	2707      	movs	r7, #7
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800496c:	7227      	strb	r7, [r4, #8]
 800496e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8004972:	f645 4050 	movw	r0, #23632	; 0x5c50
 8004976:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800497a:	6800      	ldr	r0, [r0, #0]
 800497c:	f243 0102 	movw	r1, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004980:	b280      	uxth	r0, r0
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8004982:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004986:	1841      	adds	r1, r0, r1
 8004988:	0048      	lsls	r0, r1, #1
 800498a:	4907      	ldr	r1, [pc, #28]	; (80049a8 <DataStageIn+0xb4>)
 800498c:	6003      	str	r3, [r0, #0]
 800498e:	2030      	movs	r0, #48	; 0x30
 8004990:	8008      	strh	r0, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8004992:	7013      	strb	r3, [r2, #0]
 8004994:	e7df      	b.n	8004956 <DataStageIn+0x62>
 8004996:	bf00      	nop
 8004998:	20001634 	.word	0x20001634
 800499c:	08005479 	.word	0x08005479
 80049a0:	08005209 	.word	0x08005209
 80049a4:	080054b9 	.word	0x080054b9
 80049a8:	2000163c 	.word	0x2000163c
 80049ac:	2000163a 	.word	0x2000163a
 80049b0:	200004bc 	.word	0x200004bc

080049b4 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 80049b4:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 80049b6:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <Standard_SetConfiguration+0x30>)
 80049b8:	4a0b      	ldr	r2, [pc, #44]	; (80049e8 <Standard_SetConfiguration+0x34>)
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	7851      	ldrb	r1, [r2, #1]
 80049be:	78c3      	ldrb	r3, [r0, #3]
 80049c0:	4299      	cmp	r1, r3
 80049c2:	d201      	bcs.n	80049c8 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 80049c4:	2002      	movs	r0, #2
  }
}
 80049c6:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80049c8:	7882      	ldrb	r2, [r0, #2]
 80049ca:	2a00      	cmp	r2, #0
 80049cc:	d1fa      	bne.n	80049c4 <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 80049ce:	8884      	ldrh	r4, [r0, #4]
 80049d0:	2c00      	cmp	r4, #0
 80049d2:	d1f7      	bne.n	80049c4 <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 80049d4:	7283      	strb	r3, [r0, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 80049d6:	4805      	ldr	r0, [pc, #20]	; (80049ec <Standard_SetConfiguration+0x38>)
 80049d8:	6801      	ldr	r1, [r0, #0]
 80049da:	684b      	ldr	r3, [r1, #4]
 80049dc:	4798      	blx	r3
    return USB_SUCCESS;
 80049de:	4620      	mov	r0, r4
 80049e0:	bd10      	pop	{r4, pc}
 80049e2:	bf00      	nop
 80049e4:	20001634 	.word	0x20001634
 80049e8:	20000308 	.word	0x20000308
 80049ec:	20001630 	.word	0x20001630

080049f0 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 80049f0:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 80049f2:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <Standard_SetInterface+0x44>)
 80049f4:	4c10      	ldr	r4, [pc, #64]	; (8004a38 <Standard_SetInterface+0x48>)
 80049f6:	6811      	ldr	r1, [r2, #0]
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	698a      	ldr	r2, [r1, #24]
 80049fc:	7958      	ldrb	r0, [r3, #5]
 80049fe:	78d9      	ldrb	r1, [r3, #3]
 8004a00:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	7a99      	ldrb	r1, [r3, #10]
 8004a06:	b909      	cbnz	r1, 8004a0c <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8004a08:	2002      	movs	r0, #2
}
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d1fb      	bne.n	8004a08 <Standard_SetInterface+0x18>
 8004a10:	7918      	ldrb	r0, [r3, #4]
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d1f8      	bne.n	8004a08 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 8004a16:	789d      	ldrb	r5, [r3, #2]
 8004a18:	2d00      	cmp	r5, #0
 8004a1a:	d1f5      	bne.n	8004a08 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8004a1c:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <Standard_SetInterface+0x4c>)
 8004a1e:	6813      	ldr	r3, [r2, #0]
 8004a20:	68d9      	ldr	r1, [r3, #12]
 8004a22:	4788      	blx	r1
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8004a24:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8004a26:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8004a28:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8004a2a:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8004a2c:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8004a2e:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8004a30:	bd38      	pop	{r3, r4, r5, pc}
 8004a32:	bf00      	nop
 8004a34:	2000160c 	.word	0x2000160c
 8004a38:	20001634 	.word	0x20001634
 8004a3c:	20001630 	.word	0x20001630

08004a40 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8004a40:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8004a42:	4b35      	ldr	r3, [pc, #212]	; (8004b18 <Standard_ClearFeature+0xd8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004a48:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8004a4c:	d003      	beq.n	8004a56 <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8004a4e:	2802      	cmp	r0, #2
 8004a50:	d006      	beq.n	8004a60 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 8004a52:	2002      	movs	r0, #2
}
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8004a56:	7a59      	ldrb	r1, [r3, #9]
 8004a58:	f021 0220 	bic.w	r2, r1, #32
 8004a5c:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8004a60:	885a      	ldrh	r2, [r3, #2]
 8004a62:	2a00      	cmp	r2, #0
 8004a64:	d1f6      	bne.n	8004a54 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8004a66:	7919      	ldrb	r1, [r3, #4]
 8004a68:	2900      	cmp	r1, #0
 8004a6a:	d1f3      	bne.n	8004a54 <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8004a6c:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 8004a6e:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8004a72:	0081      	lsls	r1, r0, #2
 8004a74:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8004a78:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8004a7a:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8004a7e:	bf56      	itet	pl
 8004a80:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8004a82:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8004a84:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8004a88:	4c24      	ldr	r4, [pc, #144]	; (8004b1c <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8004a8a:	bf48      	it	mi
 8004a8c:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8004a90:	7824      	ldrb	r4, [r4, #0]
 8004a92:	42a0      	cmp	r0, r4
 8004a94:	d2dd      	bcs.n	8004a52 <Standard_ClearFeature+0x12>
 8004a96:	2d00      	cmp	r5, #0
 8004a98:	d0db      	beq.n	8004a52 <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8004a9a:	7a9b      	ldrb	r3, [r3, #10]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0d8      	beq.n	8004a52 <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8004aa0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004aa4:	b2d3      	uxtb	r3, r2
 8004aa6:	b173      	cbz	r3, 8004ac6 <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8004aa8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004aac:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 8004ab0:	6813      	ldr	r3, [r2, #0]
 8004ab2:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8004ab6:	2910      	cmp	r1, #16
 8004ab8:	d021      	beq.n	8004afe <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8004aba:	4819      	ldr	r0, [pc, #100]	; (8004b20 <Standard_ClearFeature+0xe0>)
 8004abc:	6801      	ldr	r1, [r0, #0]
 8004abe:	694a      	ldr	r2, [r1, #20]
 8004ac0:	4790      	blx	r2
    return USB_SUCCESS;
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8004ac6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004aca:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	f402 5340 	and.w	r3, r2, #12288	; 0x3000
 8004ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad8:	d1ef      	bne.n	8004aba <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 8004ada:	b9c8      	cbnz	r0, 8004b10 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8004adc:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <Standard_ClearFeature+0xe4>)
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <Standard_ClearFeature+0xe8>)
 8004ae0:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8004ae4:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8004ae6:	6820      	ldr	r0, [r4, #0]
 8004ae8:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 8004aec:	4001      	ands	r1, r0
 8004aee:	f481 5240 	eor.w	r2, r1, #12288	; 0x3000
 8004af2:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8004af6:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8004afa:	6020      	str	r0, [r4, #0]
 8004afc:	e7dd      	b.n	8004aba <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 8004afe:	b2c4      	uxtb	r4, r0
 8004b00:	4620      	mov	r0, r4
 8004b02:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <Standard_ClearFeature+0xec>)
 8004b04:	4790      	blx	r2
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8004b06:	4620      	mov	r0, r4
 8004b08:	2130      	movs	r1, #48	; 0x30
 8004b0a:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <Standard_ClearFeature+0xf0>)
 8004b0c:	4798      	blx	r3
 8004b0e:	e7d4      	b.n	8004aba <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8004b10:	4908      	ldr	r1, [pc, #32]	; (8004b34 <Standard_ClearFeature+0xf4>)
 8004b12:	4788      	blx	r1
 8004b14:	e7e7      	b.n	8004ae6 <Standard_ClearFeature+0xa6>
 8004b16:	bf00      	nop
 8004b18:	20001634 	.word	0x20001634
 8004b1c:	20000308 	.word	0x20000308
 8004b20:	20001630 	.word	0x20001630
 8004b24:	20000284 	.word	0x20000284
 8004b28:	080054d9 	.word	0x080054d9
 8004b2c:	08005409 	.word	0x08005409
 8004b30:	080052fd 	.word	0x080052fd
 8004b34:	080053e5 	.word	0x080053e5

08004b38 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8004b38:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 8004b3a:	4b22      	ldr	r3, [pc, #136]	; (8004bc4 <Standard_SetEndPointFeature+0x8c>)
 8004b3c:	6819      	ldr	r1, [r3, #0]
 8004b3e:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 8004b40:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8004b44:	0090      	lsls	r0, r2, #2
 8004b46:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8004b4a:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8004b4c:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8004b50:	bf56      	itet	pl
 8004b52:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8004b54:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8004b56:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8004b5a:	4c1b      	ldr	r4, [pc, #108]	; (8004bc8 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8004b5c:	bf48      	it	mi
 8004b5e:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8004b62:	7824      	ldrb	r4, [r4, #0]
 8004b64:	42a2      	cmp	r2, r4
 8004b66:	d301      	bcc.n	8004b6c <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8004b68:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8004b6a:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 8004b6c:	884a      	ldrh	r2, [r1, #2]
 8004b6e:	2a00      	cmp	r2, #0
 8004b70:	d1fa      	bne.n	8004b68 <Standard_SetEndPointFeature+0x30>
 8004b72:	2d00      	cmp	r5, #0
 8004b74:	d0f8      	beq.n	8004b68 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 8004b76:	7a89      	ldrb	r1, [r1, #10]
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	d0f5      	beq.n	8004b68 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8004b80:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8004b84:	f500 42b8 	add.w	r2, r0, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8004b88:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8004b8a:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8004b8c:	b17b      	cbz	r3, 8004bae <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8004b8e:	f648 70bf 	movw	r0, #36799	; 0x8fbf
 8004b92:	4008      	ands	r0, r1
 8004b94:	f080 0110 	eor.w	r1, r0, #16
 8004b98:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8004b9c:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8004ba0:	6010      	str	r0, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8004ba2:	4a0a      	ldr	r2, [pc, #40]	; (8004bcc <Standard_SetEndPointFeature+0x94>)
 8004ba4:	6811      	ldr	r1, [r2, #0]
 8004ba6:	698b      	ldr	r3, [r1, #24]
 8004ba8:	4798      	blx	r3
  return USB_SUCCESS;
 8004baa:	2000      	movs	r0, #0
 8004bac:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8004bae:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8004bb2:	400b      	ands	r3, r1
 8004bb4:	f483 5080 	eor.w	r0, r3, #4096	; 0x1000
 8004bb8:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 8004bbc:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e7ee      	b.n	8004ba2 <Standard_SetEndPointFeature+0x6a>
 8004bc4:	20001634 	.word	0x20001634
 8004bc8:	20000308 	.word	0x20000308
 8004bcc:	20001630 	.word	0x20001630

08004bd0 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <Standard_GetDescriptorData+0x18>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8004bd6:	b110      	cbz	r0, 8004bde <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8004bd8:	6808      	ldr	r0, [r1, #0]
 8004bda:	1880      	adds	r0, r0, r2
}
 8004bdc:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8004bde:	8889      	ldrh	r1, [r1, #4]
 8004be0:	1a8a      	subs	r2, r1, r2
 8004be2:	821a      	strh	r2, [r3, #16]
    return 0;
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20001634 	.word	0x20001634

08004bec <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8004bec:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8004bee:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <Post0_Process+0x34>)
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8004bf6:	4a0b      	ldr	r2, [pc, #44]	; (8004c24 <Post0_Process+0x38>)
 8004bf8:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 8004bfa:	480b      	ldr	r0, [pc, #44]	; (8004c28 <Post0_Process+0x3c>)
 8004bfc:	6801      	ldr	r1, [r0, #0]
 8004bfe:	7a08      	ldrb	r0, [r1, #8]
 8004c00:	2808      	cmp	r0, #8
 8004c02:	d106      	bne.n	8004c12 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8004c04:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <Post0_Process+0x40>)
 8004c06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c0a:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8004c0c:	4a08      	ldr	r2, [pc, #32]	; (8004c30 <Post0_Process+0x44>)
 8004c0e:	2110      	movs	r1, #16
 8004c10:	8011      	strh	r1, [r2, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8004c12:	f1b0 0c09 	subs.w	ip, r0, #9
 8004c16:	f1dc 0000 	rsbs	r0, ip, #0
 8004c1a:	eb50 000c 	adcs.w	r0, r0, ip
 8004c1e:	bd08      	pop	{r3, pc}
 8004c20:	20000284 	.word	0x20000284
 8004c24:	080054d9 	.word	0x080054d9
 8004c28:	20001634 	.word	0x20001634
 8004c2c:	2000163a 	.word	0x2000163a
 8004c30:	2000163c 	.word	0x2000163c

08004c34 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 8004c36:	4d33      	ldr	r5, [pc, #204]	; (8004d04 <Out0_Process+0xd0>)
 8004c38:	682c      	ldr	r4, [r5, #0]
 8004c3a:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d007      	beq.n	8004c50 <Out0_Process+0x1c>
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d005      	beq.n	8004c50 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d008      	beq.n	8004c5a <Out0_Process+0x26>
 8004c48:	2b05      	cmp	r3, #5
 8004c4a:	d006      	beq.n	8004c5a <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8004c4c:	2b07      	cmp	r3, #7
 8004c4e:	d00d      	beq.n	8004c6c <Out0_Process+0x38>
 8004c50:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8004c52:	7222      	strb	r2, [r4, #8]

  return Post0_Process();
 8004c54:	4b2c      	ldr	r3, [pc, #176]	; (8004d08 <Out0_Process+0xd4>)
 8004c56:	4798      	blx	r3
 8004c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8004c5a:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8004c5c:	8a20      	ldrh	r0, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8004c5e:	b311      	cbz	r1, 8004ca6 <Out0_Process+0x72>
 8004c60:	b958      	cbnz	r0, 8004c7a <Out0_Process+0x46>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8004c62:	8aa4      	ldrh	r4, [r4, #20]
 8004c64:	2c00      	cmp	r4, #0
 8004c66:	d045      	beq.n	8004cf4 <Out0_Process+0xc0>
 8004c68:	4a28      	ldr	r2, [pc, #160]	; (8004d0c <Out0_Process+0xd8>)
 8004c6a:	e02e      	b.n	8004cca <Out0_Process+0x96>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8004c6c:	4828      	ldr	r0, [pc, #160]	; (8004d10 <Out0_Process+0xdc>)
 8004c6e:	6801      	ldr	r1, [r0, #0]
 8004c70:	68ca      	ldr	r2, [r1, #12]
 8004c72:	4790      	blx	r2
 8004c74:	682c      	ldr	r4, [r5, #0]
 8004c76:	2208      	movs	r2, #8
 8004c78:	e7eb      	b.n	8004c52 <Out0_Process+0x1e>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8004c7a:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8004c7c:	4286      	cmp	r6, r0
 8004c7e:	bf28      	it	cs
 8004c80:	4606      	movcs	r6, r0
 8004c82:	4630      	mov	r0, r6
 8004c84:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8004c86:	8a63      	ldrh	r3, [r4, #18]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8004c88:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 8004c8a:	8a20      	ldrh	r0, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8004c8c:	18f1      	adds	r1, r6, r3
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8004c8e:	1b82      	subs	r2, r0, r6
 8004c90:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8004c92:	8261      	strh	r1, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8004c94:	4b1f      	ldr	r3, [pc, #124]	; (8004d14 <Out0_Process+0xe0>)
 8004c96:	2000      	movs	r0, #0
 8004c98:	4798      	blx	r3
 8004c9a:	4632      	mov	r2, r6
 8004c9c:	4601      	mov	r1, r0
 8004c9e:	4b1e      	ldr	r3, [pc, #120]	; (8004d18 <Out0_Process+0xe4>)
 8004ca0:	4638      	mov	r0, r7
 8004ca2:	4798      	blx	r3
 8004ca4:	8a20      	ldrh	r0, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	d0db      	beq.n	8004c62 <Out0_Process+0x2e>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8004caa:	4b1c      	ldr	r3, [pc, #112]	; (8004d1c <Out0_Process+0xe8>)
    SetEPTxCount(ENDP0, 0);
 8004cac:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8004cae:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8004cb2:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8004cb4:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8004cb6:	4a1a      	ldr	r2, [pc, #104]	; (8004d20 <Out0_Process+0xec>)
 8004cb8:	4790      	blx	r2
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8004cba:	8a23      	ldrh	r3, [r4, #16]
 8004cbc:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8004cbe:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <Out0_Process+0xd8>)
 8004cc0:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8004cc2:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8004cc4:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8004cc6:	d915      	bls.n	8004cf4 <Out0_Process+0xc0>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8004cc8:	b9c3      	cbnz	r3, 8004cfc <Out0_Process+0xc8>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8004cca:	682c      	ldr	r4, [r5, #0]
 8004ccc:	2106      	movs	r1, #6
      USB_StatusIn();
 8004cce:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8004cd2:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 8004cd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004cde:	b281      	uxth	r1, r0
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8004ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ce4:	18c8      	adds	r0, r1, r3
 8004ce6:	0043      	lsls	r3, r0, #1
 8004ce8:	2100      	movs	r1, #0
 8004cea:	6019      	str	r1, [r3, #0]
 8004cec:	2030      	movs	r0, #48	; 0x30
 8004cee:	8010      	strh	r0, [r2, #0]
 8004cf0:	7a22      	ldrb	r2, [r4, #8]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8004cf2:	e7ae      	b.n	8004c52 <Out0_Process+0x1e>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 8004cf4:	682c      	ldr	r4, [r5, #0]
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	7222      	strb	r2, [r4, #8]
 8004cfa:	e7aa      	b.n	8004c52 <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8004cfc:	682c      	ldr	r4, [r5, #0]
 8004cfe:	2205      	movs	r2, #5
 8004d00:	7222      	strb	r2, [r4, #8]
 8004d02:	e7a6      	b.n	8004c52 <Out0_Process+0x1e>
 8004d04:	20001634 	.word	0x20001634
 8004d08:	08004bed 	.word	0x08004bed
 8004d0c:	2000163c 	.word	0x2000163c
 8004d10:	2000160c 	.word	0x2000160c
 8004d14:	08005499 	.word	0x08005499
 8004d18:	08005281 	.word	0x08005281
 8004d1c:	2000163a 	.word	0x2000163a
 8004d20:	080054b9 	.word	0x080054b9

08004d24 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8004d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004d26:	f645 4350 	movw	r3, #23632	; 0x5c50

  if (pInformation->ControlState != PAUSE)
 8004d2a:	4d9e      	ldr	r5, [pc, #632]	; (8004fa4 <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004d2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004d30:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8004d32:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004d34:	f243 0004 	movw	r0, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004d38:	b291      	uxth	r1, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004d3a:	f2c2 0000 	movt	r0, #8192	; 0x2000

  if (pInformation->ControlState != PAUSE)
 8004d3e:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004d40:	180e      	adds	r6, r1, r0
 8004d42:	0073      	lsls	r3, r6, #1

  if (pInformation->ControlState != PAUSE)
 8004d44:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8004d46:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004d48:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8004d4a:	d044      	beq.n	8004dd6 <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004d4c:	b2b7      	uxth	r7, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004d4e:	0078      	lsls	r0, r7, #1
 8004d50:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 8004d54:	f501 46c0 	add.w	r6, r1, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8004d58:	7832      	ldrb	r2, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8004d5a:	4f93      	ldr	r7, [pc, #588]	; (8004fa8 <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8004d5c:	7022      	strb	r2, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8004d5e:	7873      	ldrb	r3, [r6, #1]
 8004d60:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8004d62:	88b0      	ldrh	r0, [r6, #4]
 8004d64:	47b8      	blx	r7
 8004d66:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8004d68:	8930      	ldrh	r0, [r6, #8]
 8004d6a:	682c      	ldr	r4, [r5, #0]
 8004d6c:	47b8      	blx	r7
 8004d6e:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8004d70:	89b0      	ldrh	r0, [r6, #12]
 8004d72:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 8004d74:	2101      	movs	r1, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8004d76:	80e0      	strh	r0, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8004d78:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d030      	beq.n	8004de0 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 8004d7e:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8004d80:	2906      	cmp	r1, #6
 8004d82:	f000 8087 	beq.w	8004e94 <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8004d86:	2900      	cmp	r1, #0
 8004d88:	d15e      	bne.n	8004e48 <Setup0_Process+0x124>
 8004d8a:	8863      	ldrh	r3, [r4, #2]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8094 	beq.w	8004eba <Setup0_Process+0x196>
 8004d92:	4e86      	ldr	r6, [pc, #536]	; (8004fac <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8004d94:	6833      	ldr	r3, [r6, #0]
 8004d96:	4608      	mov	r0, r1
 8004d98:	6919      	ldr	r1, [r3, #16]
 8004d9a:	4788      	blx	r1
    if (Result == USB_NOT_READY)
 8004d9c:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 8004d9e:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 8004da0:	d062      	beq.n	8004e68 <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8004da2:	8a1a      	ldrh	r2, [r3, #16]
 8004da4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004da8:	428a      	cmp	r2, r1
 8004daa:	d05d      	beq.n	8004e68 <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8004dac:	2802      	cmp	r0, #2
 8004dae:	d00c      	beq.n	8004dca <Setup0_Process+0xa6>
 8004db0:	b15a      	cbz	r2, 8004dca <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8004db2:	f993 1000 	ldrsb.w	r1, [r3]
 8004db6:	2900      	cmp	r1, #0
 8004db8:	f2c0 80b5 	blt.w	8004f26 <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8004dc0:	4b7b      	ldr	r3, [pc, #492]	; (8004fb0 <Setup0_Process+0x28c>)
 8004dc2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8004dc6:	8018      	strh	r0, [r3, #0]
 8004dc8:	e001      	b.n	8004dce <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8004dca:	2008      	movs	r0, #8
 8004dcc:	7218      	strb	r0, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8004dce:	4b79      	ldr	r3, [pc, #484]	; (8004fb4 <Setup0_Process+0x290>)
 8004dd0:	4798      	blx	r3
}
 8004dd2:	b003      	add	sp, #12
 8004dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dd6:	88e0      	ldrh	r0, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8004dd8:	2101      	movs	r1, #1
 8004dda:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d1ce      	bne.n	8004d7e <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004de0:	7822      	ldrb	r2, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8004de2:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004de4:	f012 037f 	ands.w	r3, r2, #127	; 0x7f
 8004de8:	d141      	bne.n	8004e6e <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8004dea:	2e09      	cmp	r6, #9
 8004dec:	f000 8108 	beq.w	8005000 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8004df0:	2e05      	cmp	r6, #5
 8004df2:	f000 80bf 	beq.w	8004f74 <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8004df6:	2e03      	cmp	r6, #3
 8004df8:	f000 80f0 	beq.w	8004fdc <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8004dfc:	2e01      	cmp	r6, #1
 8004dfe:	d13b      	bne.n	8004e78 <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8004e00:	78e1      	ldrb	r1, [r4, #3]
 8004e02:	2901      	cmp	r1, #1
 8004e04:	d138      	bne.n	8004e78 <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 8004e06:	88a2      	ldrh	r2, [r4, #4]
 8004e08:	2a00      	cmp	r2, #0
 8004e0a:	d135      	bne.n	8004e78 <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 8004e0c:	7a63      	ldrb	r3, [r4, #9]
 8004e0e:	f003 0420 	and.w	r4, r3, #32
 8004e12:	b2e0      	uxtb	r0, r4
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d02f      	beq.n	8004e78 <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8004e18:	4967      	ldr	r1, [pc, #412]	; (8004fb8 <Setup0_Process+0x294>)
 8004e1a:	4788      	blx	r1
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8004e1c:	bb60      	cbnz	r0, 8004e78 <Setup0_Process+0x154>
 8004e1e:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8004e20:	f645 4050 	movw	r0, #23632	; 0x5c50
 8004e24:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004e28:	6801      	ldr	r1, [r0, #0]
 8004e2a:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004e2e:	b28a      	uxth	r2, r1
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8004e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e34:	18d0      	adds	r0, r2, r3
 8004e36:	0041      	lsls	r1, r0, #1
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4a60      	ldr	r2, [pc, #384]	; (8004fbc <Setup0_Process+0x298>)
 8004e3c:	600b      	str	r3, [r1, #0]
 8004e3e:	2030      	movs	r0, #48	; 0x30
 8004e40:	2106      	movs	r1, #6
 8004e42:	8010      	strh	r0, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8004e44:	7221      	strb	r1, [r4, #8]
 8004e46:	e7c2      	b.n	8004dce <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8004e48:	2908      	cmp	r1, #8
 8004e4a:	d148      	bne.n	8004ede <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004e4c:	7820      	ldrb	r0, [r4, #0]
 8004e4e:	0643      	lsls	r3, r0, #25
 8004e50:	d19f      	bne.n	8004d92 <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 8004e52:	4a5b      	ldr	r2, [pc, #364]	; (8004fc0 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8004e54:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8004e56:	61a2      	str	r2, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8004e58:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8004e5a:	4790      	blx	r2
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004e62:	8a1a      	ldrh	r2, [r3, #16]
 8004e64:	4282      	cmp	r2, r0
 8004e66:	d1a3      	bne.n	8004db0 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8004e68:	2109      	movs	r1, #9
 8004e6a:	7219      	strb	r1, [r3, #8]
 8004e6c:	e7af      	b.n	8004dce <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d071      	beq.n	8004f56 <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	f000 808d 	beq.w	8004f92 <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8004e78:	494c      	ldr	r1, [pc, #304]	; (8004fac <Setup0_Process+0x288>)
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	680a      	ldr	r2, [r1, #0]
 8004e7e:	6953      	ldr	r3, [r2, #20]
 8004e80:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8004e82:	2803      	cmp	r0, #3
 8004e84:	f000 80c5 	beq.w	8005012 <Setup0_Process+0x2ee>
 8004e88:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d0c8      	beq.n	8004e20 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 8004e8e:	2108      	movs	r1, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8004e90:	7221      	strb	r1, [r4, #8]
 8004e92:	e79c      	b.n	8004dce <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004e94:	7826      	ldrb	r6, [r4, #0]
 8004e96:	0673      	lsls	r3, r6, #25
 8004e98:	f47f af7b 	bne.w	8004d92 <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8004e9c:	78a2      	ldrb	r2, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8004e9e:	4e43      	ldr	r6, [pc, #268]	; (8004fac <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 8004ea0:	2a01      	cmp	r2, #1
 8004ea2:	f000 80b0 	beq.w	8005006 <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8004ea6:	2a02      	cmp	r2, #2
 8004ea8:	d05e      	beq.n	8004f68 <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8004eaa:	2a03      	cmp	r2, #3
 8004eac:	f47f af72 	bne.w	8004d94 <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8004eb0:	6830      	ldr	r0, [r6, #0]
 8004eb2:	6a42      	ldr	r2, [r0, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	d1cd      	bne.n	8004e54 <Setup0_Process+0x130>
 8004eb8:	e76c      	b.n	8004d94 <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8004eba:	6860      	ldr	r0, [r4, #4]
 8004ebc:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8004ec0:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8004ec4:	f47f af65 	bne.w	8004d92 <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004ec8:	7823      	ldrb	r3, [r4, #0]
 8004eca:	f013 007f 	ands.w	r0, r3, #127	; 0x7f
 8004ece:	f040 80a4 	bne.w	800501a <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 8004ed2:	88a3      	ldrh	r3, [r4, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f47f af5c 	bne.w	8004d92 <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8004eda:	4a3a      	ldr	r2, [pc, #232]	; (8004fc4 <Setup0_Process+0x2a0>)
 8004edc:	e7ba      	b.n	8004e54 <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8004ede:	290a      	cmp	r1, #10
 8004ee0:	f47f af57 	bne.w	8004d92 <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8004ee4:	7826      	ldrb	r6, [r4, #0]
 8004ee6:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8004eea:	2a01      	cmp	r2, #1
 8004eec:	f47f af51 	bne.w	8004d92 <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8004ef0:	7aa3      	ldrb	r3, [r4, #10]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f43f af4d 	beq.w	8004d92 <Setup0_Process+0x6e>
 8004ef8:	8863      	ldrh	r3, [r4, #2]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f47f af49 	bne.w	8004d92 <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8004f00:	6860      	ldr	r0, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8004f02:	4e2a      	ldr	r6, [pc, #168]	; (8004fac <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8004f04:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8004f08:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004f0c:	f47f af42 	bne.w	8004d94 <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8004f10:	6832      	ldr	r2, [r6, #0]
 8004f12:	4619      	mov	r1, r3
 8004f14:	7960      	ldrb	r0, [r4, #5]
 8004f16:	6993      	ldr	r3, [r2, #24]
 8004f18:	4798      	blx	r3
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	f040 80b8 	bne.w	8005090 <Setup0_Process+0x36c>
 8004f20:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8004f22:	4a29      	ldr	r2, [pc, #164]	; (8004fc8 <Setup0_Process+0x2a4>)
 8004f24:	e796      	b.n	8004e54 <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8004f26:	88d9      	ldrh	r1, [r3, #6]
 8004f28:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8004f2a:	9801      	ldr	r0, [sp, #4]
 8004f2c:	4282      	cmp	r2, r0
 8004f2e:	d817      	bhi.n	8004f60 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8004f30:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8004f32:	491e      	ldr	r1, [pc, #120]	; (8004fac <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8004f34:	d208      	bcs.n	8004f48 <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8004f36:	6808      	ldr	r0, [r1, #0]
 8004f38:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004f3c:	4282      	cmp	r2, r0
 8004f3e:	f080 808f 	bcs.w	8005060 <Setup0_Process+0x33c>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8004f42:	4a22      	ldr	r2, [pc, #136]	; (8004fcc <Setup0_Process+0x2a8>)
 8004f44:	2000      	movs	r0, #0
 8004f46:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8004f48:	6809      	ldr	r1, [r1, #0]
 8004f4a:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 8004f4e:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8004f50:	4b1f      	ldr	r3, [pc, #124]	; (8004fd0 <Setup0_Process+0x2ac>)
 8004f52:	4798      	blx	r3
 8004f54:	e73b      	b.n	8004dce <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8004f56:	2e0b      	cmp	r6, #11
 8004f58:	d18e      	bne.n	8004e78 <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 8004f5a:	481e      	ldr	r0, [pc, #120]	; (8004fd4 <Setup0_Process+0x2b0>)
 8004f5c:	4780      	blx	r0
 8004f5e:	e75d      	b.n	8004e1c <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8004f60:	9801      	ldr	r0, [sp, #4]
 8004f62:	4912      	ldr	r1, [pc, #72]	; (8004fac <Setup0_Process+0x288>)
 8004f64:	8218      	strh	r0, [r3, #16]
 8004f66:	e7ef      	b.n	8004f48 <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8004f68:	6833      	ldr	r3, [r6, #0]
 8004f6a:	6a1a      	ldr	r2, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8004f6c:	2a00      	cmp	r2, #0
 8004f6e:	f47f af71 	bne.w	8004e54 <Setup0_Process+0x130>
 8004f72:	e70f      	b.n	8004d94 <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8004f74:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	db88      	blt.n	8004e8e <Setup0_Process+0x16a>
 8004f7c:	78a1      	ldrb	r1, [r4, #2]
 8004f7e:	2900      	cmp	r1, #0
 8004f80:	d185      	bne.n	8004e8e <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 8004f82:	88a2      	ldrh	r2, [r4, #4]
 8004f84:	2a00      	cmp	r2, #0
 8004f86:	d182      	bne.n	8004e8e <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 8004f88:	7aa3      	ldrb	r3, [r4, #10]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f43f af48 	beq.w	8004e20 <Setup0_Process+0xfc>
 8004f90:	e77d      	b.n	8004e8e <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8004f92:	2e01      	cmp	r6, #1
 8004f94:	f43f af40 	beq.w	8004e18 <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8004f98:	2e03      	cmp	r6, #3
 8004f9a:	f47f af6d 	bne.w	8004e78 <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 8004f9e:	4c0e      	ldr	r4, [pc, #56]	; (8004fd8 <Setup0_Process+0x2b4>)
 8004fa0:	47a0      	blx	r4
 8004fa2:	e73b      	b.n	8004e1c <Setup0_Process+0xf8>
 8004fa4:	20001634 	.word	0x20001634
 8004fa8:	08005541 	.word	0x08005541
 8004fac:	2000160c 	.word	0x2000160c
 8004fb0:	2000163a 	.word	0x2000163a
 8004fb4:	08004bed 	.word	0x08004bed
 8004fb8:	08004a41 	.word	0x08004a41
 8004fbc:	2000163c 	.word	0x2000163c
 8004fc0:	08004805 	.word	0x08004805
 8004fc4:	08004855 	.word	0x08004855
 8004fc8:	0800482d 	.word	0x0800482d
 8004fcc:	200004bc 	.word	0x200004bc
 8004fd0:	080048f5 	.word	0x080048f5
 8004fd4:	080049f1 	.word	0x080049f1
 8004fd8:	08004b39 	.word	0x08004b39
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8004fdc:	78e2      	ldrb	r2, [r4, #3]
 8004fde:	2a01      	cmp	r2, #1
 8004fe0:	f47f af4a 	bne.w	8004e78 <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 8004fe4:	88a3      	ldrh	r3, [r4, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f47f af46 	bne.w	8004e78 <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8004fec:	7a60      	ldrb	r0, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8004fee:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <Setup0_Process+0x374>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8004ff0:	f040 0120 	orr.w	r1, r0, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8004ff4:	6813      	ldr	r3, [r2, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8004ff6:	7261      	strb	r1, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8004ff8:	69dc      	ldr	r4, [r3, #28]
 8004ffa:	47a0      	blx	r4
 8004ffc:	682c      	ldr	r4, [r5, #0]
 8004ffe:	e70f      	b.n	8004e20 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8005000:	4c26      	ldr	r4, [pc, #152]	; (800509c <Setup0_Process+0x378>)
 8005002:	47a0      	blx	r4
 8005004:	e70a      	b.n	8004e1c <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8005006:	6832      	ldr	r2, [r6, #0]
 8005008:	69d2      	ldr	r2, [r2, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800500a:	2a00      	cmp	r2, #0
 800500c:	f47f af22 	bne.w	8004e54 <Setup0_Process+0x130>
 8005010:	e6c0      	b.n	8004d94 <Setup0_Process+0x70>
 8005012:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 8005014:	2109      	movs	r1, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8005016:	7221      	strb	r1, [r4, #8]
 8005018:	e6d9      	b.n	8004dce <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800501a:	2801      	cmp	r0, #1
 800501c:	d02b      	beq.n	8005076 <Setup0_Process+0x352>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800501e:	2802      	cmp	r0, #2
 8005020:	f47f aeb7 	bne.w	8004d92 <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8005024:	7963      	ldrb	r3, [r4, #5]
 8005026:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800502a:	0096      	lsls	r6, r2, #2
 800502c:	f106 4080 	add.w	r0, r6, #1073741824	; 0x40000000
 8005030:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8005034:	061e      	lsls	r6, r3, #24
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8005036:	bf56      	itet	pl
 8005038:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800503a:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800503c:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8005040:	4817      	ldr	r0, [pc, #92]	; (80050a0 <Setup0_Process+0x37c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8005042:	bf48      	it	mi
 8005044:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8005048:	7800      	ldrb	r0, [r0, #0]
 800504a:	4282      	cmp	r2, r0
 800504c:	f4bf aea1 	bcs.w	8004d92 <Setup0_Process+0x6e>
 8005050:	f013 0f70 	tst.w	r3, #112	; 0x70
 8005054:	f47f ae9d 	bne.w	8004d92 <Setup0_Process+0x6e>
          && (Status != 0))
 8005058:	2e00      	cmp	r6, #0
 800505a:	f47f af3e 	bne.w	8004eda <Setup0_Process+0x1b6>
 800505e:	e698      	b.n	8004d92 <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8005060:	fb92 f4f0 	sdiv	r4, r2, r0
 8005064:	fb00 2214 	mls	r2, r0, r4, r2
 8005068:	2a00      	cmp	r2, #0
 800506a:	f47f af6d 	bne.w	8004f48 <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800506e:	4a0d      	ldr	r2, [pc, #52]	; (80050a4 <Setup0_Process+0x380>)
 8005070:	2001      	movs	r0, #1
 8005072:	7010      	strb	r0, [r2, #0]
 8005074:	e768      	b.n	8004f48 <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8005076:	4e0c      	ldr	r6, [pc, #48]	; (80050a8 <Setup0_Process+0x384>)
 8005078:	7960      	ldrb	r0, [r4, #5]
 800507a:	6833      	ldr	r3, [r6, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	4790      	blx	r2
 8005080:	b930      	cbnz	r0, 8005090 <Setup0_Process+0x36c>
          && (pInformation->Current_Configuration != 0))
 8005082:	682c      	ldr	r4, [r5, #0]
 8005084:	7aa0      	ldrb	r0, [r4, #10]
 8005086:	2800      	cmp	r0, #0
 8005088:	f47f af27 	bne.w	8004eda <Setup0_Process+0x1b6>
 800508c:	7861      	ldrb	r1, [r4, #1]
 800508e:	e681      	b.n	8004d94 <Setup0_Process+0x70>
 8005090:	6829      	ldr	r1, [r5, #0]
 8005092:	7849      	ldrb	r1, [r1, #1]
 8005094:	e67e      	b.n	8004d94 <Setup0_Process+0x70>
 8005096:	bf00      	nop
 8005098:	20001630 	.word	0x20001630
 800509c:	080049b5 	.word	0x080049b5
 80050a0:	20000308 	.word	0x20000308
 80050a4:	200004bc 	.word	0x200004bc
 80050a8:	2000160c 	.word	0x2000160c

080050ac <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 80050ac:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 80050ae:	4b28      	ldr	r3, [pc, #160]	; (8005150 <SetDeviceAddress+0xa4>)
 80050b0:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80050b2:	2e00      	cmp	r6, #0
 80050b4:	d043      	beq.n	800513e <SetDeviceAddress+0x92>
 80050b6:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 80050ba:	f2c4 0200 	movt	r2, #16384	; 0x4000
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80050be:	6814      	ldr	r4, [r2, #0]
 80050c0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80050c4:	4021      	ands	r1, r4
 80050c6:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 80050ca:	f043 0180 	orr.w	r1, r3, #128	; 0x80
 80050ce:	6011      	str	r1, [r2, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80050d0:	2201      	movs	r2, #1
 80050d2:	1e74      	subs	r4, r6, #1
 80050d4:	f645 4304 	movw	r3, #23556	; 0x5c04
 80050d8:	4296      	cmp	r6, r2
 80050da:	f004 0401 	and.w	r4, r4, #1
 80050de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80050e2:	d92c      	bls.n	800513e <SetDeviceAddress+0x92>
 80050e4:	b17c      	cbz	r4, 8005106 <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80050e6:	6819      	ldr	r1, [r3, #0]
 80050e8:	f640 720f 	movw	r2, #3855	; 0xf0f
 80050ec:	400a      	ands	r2, r1
 80050ee:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 80050f2:	f041 0281 	orr.w	r2, r1, #129	; 0x81
 80050f6:	601a      	str	r2, [r3, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80050f8:	2202      	movs	r2, #2
 80050fa:	f645 4308 	movw	r3, #23560	; 0x5c08
 80050fe:	4296      	cmp	r6, r2
 8005100:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005104:	d91b      	bls.n	800513e <SetDeviceAddress+0x92>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005106:	681f      	ldr	r7, [r3, #0]
 8005108:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 800510c:	f640 740f 	movw	r4, #3855	; 0xf0f
 8005110:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005114:	403c      	ands	r4, r7
 8005116:	ea45 0704 	orr.w	r7, r5, r4
 800511a:	4619      	mov	r1, r3
 800511c:	f841 7b04 	str.w	r7, [r1], #4
 8005120:	685f      	ldr	r7, [r3, #4]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005122:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005124:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8005128:	f640 740f 	movw	r4, #3855	; 0xf0f
 800512c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005130:	403c      	ands	r4, r7
 8005132:	432c      	orrs	r4, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005134:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005136:	605c      	str	r4, [r3, #4]
 8005138:	1d0b      	adds	r3, r1, #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800513a:	4296      	cmp	r6, r2
 800513c:	d8e3      	bhi.n	8005106 <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 800513e:	f645 434c 	movw	r3, #23628	; 0x5c4c
 8005142:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8005146:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800514a:	6018      	str	r0, [r3, #0]
}
 800514c:	bcf0      	pop	{r4, r5, r6, r7}
 800514e:	4770      	bx	lr
 8005150:	20000308 	.word	0x20000308

08005154 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8005154:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8005156:	4c14      	ldr	r4, [pc, #80]	; (80051a8 <In0_Process+0x54>)
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800515c:	2a02      	cmp	r2, #2
 800515e:	d012      	beq.n	8005186 <In0_Process+0x32>
 8005160:	2a04      	cmp	r2, #4
 8005162:	d010      	beq.n	8005186 <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8005164:	2a06      	cmp	r2, #6
 8005166:	d004      	beq.n	8005172 <In0_Process+0x1e>
 8005168:	2008      	movs	r0, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800516a:	7218      	strb	r0, [r3, #8]

  return Post0_Process();
 800516c:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <In0_Process+0x58>)
 800516e:	4798      	blx	r3
}
 8005170:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8005172:	7859      	ldrb	r1, [r3, #1]
 8005174:	2905      	cmp	r1, #5
 8005176:	d00b      	beq.n	8005190 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8005178:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <In0_Process+0x5c>)
 800517a:	6818      	ldr	r0, [r3, #0]
 800517c:	6881      	ldr	r1, [r0, #8]
 800517e:	4788      	blx	r1
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	2008      	movs	r0, #8
 8005184:	e7f1      	b.n	800516a <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8005186:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <In0_Process+0x60>)
 8005188:	4790      	blx	r2
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	7a18      	ldrb	r0, [r3, #8]
 800518e:	e7ec      	b.n	800516a <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8005190:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8005192:	0652      	lsls	r2, r2, #25
 8005194:	d1f0      	bne.n	8005178 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8005196:	78d8      	ldrb	r0, [r3, #3]
 8005198:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <In0_Process+0x64>)
 800519a:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 800519c:	4807      	ldr	r0, [pc, #28]	; (80051bc <In0_Process+0x68>)
 800519e:	6801      	ldr	r1, [r0, #0]
 80051a0:	6a0a      	ldr	r2, [r1, #32]
 80051a2:	4790      	blx	r2
 80051a4:	e7e8      	b.n	8005178 <In0_Process+0x24>
 80051a6:	bf00      	nop
 80051a8:	20001634 	.word	0x20001634
 80051ac:	08004bed 	.word	0x08004bed
 80051b0:	2000160c 	.word	0x2000160c
 80051b4:	080048f5 	.word	0x080048f5
 80051b8:	080050ad 	.word	0x080050ad
 80051bc:	20001630 	.word	0x20001630

080051c0 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop

080051c4 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 80051c4:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 80051c6:	f241 6214 	movw	r2, #5652	; 0x1614
 80051ca:	f241 6434 	movw	r4, #5684	; 0x1634
 80051ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80051d2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80051d6:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 80051d8:	2402      	movs	r4, #2
 80051da:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 80051dc:	f241 600c 	movw	r0, #5644	; 0x160c
 80051e0:	f240 2384 	movw	r3, #644	; 0x284
  pUser_Standard_Requests = &User_Standard_Requests;
 80051e4:	f241 6130 	movw	r1, #5680	; 0x1630
 80051e8:	f240 22b4 	movw	r2, #692	; 0x2b4
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 80051ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 80051f4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80051f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 80051fc:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 80051fe:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	4780      	blx	r0
 8005204:	bd10      	pop	{r4, pc}
 8005206:	bf00      	nop

08005208 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8005208:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800520c:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8005210:	1c53      	adds	r3, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8005212:	004a      	lsls	r2, r1, #1
  for (i = n; i != 0; i--)
 8005214:	1059      	asrs	r1, r3, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005216:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005218:	d02f      	beq.n	800527a <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800521a:	7845      	ldrb	r5, [r0, #1]
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 800521c:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800521e:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8005222:	3901      	subs	r1, #1
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005224:	ea44 2305 	orr.w	r3, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8005228:	f822 3b04 	strh.w	r3, [r2], #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800522c:	460b      	mov	r3, r1
 800522e:	3204      	adds	r2, #4
 8005230:	f001 0101 	and.w	r1, r1, #1
 8005234:	3002      	adds	r0, #2
 8005236:	b303      	cbz	r3, 800527a <UserToPMABufferCopy+0x72>
 8005238:	b159      	cbz	r1, 8005252 <UserToPMABufferCopy+0x4a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800523a:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800523e:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8005242:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005244:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8005248:	f822 1c04 	strh.w	r1, [r2, #-4]
 800524c:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800524e:	3b01      	subs	r3, #1
 8005250:	d013      	beq.n	800527a <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005252:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005256:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 800525a:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    *pdwVal++ = temp2;
 800525e:	f822 4c04 	strh.w	r4, [r2, #-4]
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005262:	7844      	ldrb	r4, [r0, #1]
 8005264:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005266:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 800526a:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800526c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8005270:	f822 1b04 	strh.w	r1, [r2], #4
 8005274:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005276:	3b02      	subs	r3, #2
 8005278:	d1eb      	bne.n	8005252 <UserToPMABufferCopy+0x4a>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800527a:	bc30      	pop	{r4, r5}
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop

08005280 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8005280:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8005284:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8005288:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800528a:	0059      	lsls	r1, r3, #1
  for (i = n; i != 0; i--)
 800528c:	1052      	asrs	r2, r2, #1
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800528e:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005290:	d01c      	beq.n	80052cc <PMAToUserBufferCopy+0x4c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8005292:	680b      	ldr	r3, [r1, #0]
 8005294:	3a01      	subs	r2, #1
 8005296:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800529a:	4613      	mov	r3, r2
 800529c:	3002      	adds	r0, #2
 800529e:	f002 0201 	and.w	r2, r2, #1
 80052a2:	b19b      	cbz	r3, 80052cc <PMAToUserBufferCopy+0x4c>
 80052a4:	b132      	cbz	r2, 80052b4 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80052a6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80052aa:	f820 2c02 	strh.w	r2, [r0, #-2]
 80052ae:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80052b0:	3b01      	subs	r3, #1
 80052b2:	d00b      	beq.n	80052cc <PMAToUserBufferCopy+0x4c>
 80052b4:	1d0c      	adds	r4, r1, #4
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80052b6:	684d      	ldr	r5, [r1, #4]
 80052b8:	6889      	ldr	r1, [r1, #8]
 80052ba:	4602      	mov	r2, r0
 80052bc:	f820 5c02 	strh.w	r5, [r0, #-2]
 80052c0:	f822 1b02 	strh.w	r1, [r2], #2
 80052c4:	1c90      	adds	r0, r2, #2
 80052c6:	1d21      	adds	r1, r4, #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80052c8:	3b02      	subs	r3, #2
 80052ca:	d1f3      	bne.n	80052b4 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 80052cc:	bc30      	pop	{r4, r5}
 80052ce:	4770      	bx	lr

080052d0 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 80052d0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80052d4:	f645 4250 	movw	r2, #23632	; 0x5c50
 80052d8:	4003      	ands	r3, r0
 80052da:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop

080052e4 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 80052e4:	0080      	lsls	r0, r0, #2
 80052e6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80052ea:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80052ee:	6810      	ldr	r0, [r2, #0]
 80052f0:	f648 138f 	movw	r3, #35215	; 0x898f
 80052f4:	4003      	ands	r3, r0
 80052f6:	4319      	orrs	r1, r3
 80052f8:	6011      	str	r1, [r2, #0]
 80052fa:	4770      	bx	lr

080052fc <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 80052fc:	0080      	lsls	r0, r0, #2
 80052fe:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005302:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8005306:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8005308:	f001 0010 	and.w	r0, r1, #16
 800530c:	6814      	ldr	r4, [r2, #0]
 800530e:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8005312:	b280      	uxth	r0, r0
 8005314:	4023      	ands	r3, r4
 8005316:	b968      	cbnz	r0, 8005334 <SetEPTxStatus+0x38>
 8005318:	b29b      	uxth	r3, r3
 800531a:	f001 0120 	and.w	r1, r1, #32
 800531e:	b288      	uxth	r0, r1
 8005320:	b108      	cbz	r0, 8005326 <SetEPTxStatus+0x2a>
 8005322:	f083 0320 	eor.w	r3, r3, #32
 8005326:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800532a:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 800532e:	6010      	str	r0, [r2, #0]
}
 8005330:	bc10      	pop	{r4}
 8005332:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8005334:	f083 0310 	eor.w	r3, r3, #16
 8005338:	e7ef      	b.n	800531a <SetEPTxStatus+0x1e>
 800533a:	bf00      	nop

0800533c <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800533c:	0080      	lsls	r0, r0, #2
 800533e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005342:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8005346:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8005348:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 800534c:	6814      	ldr	r4, [r2, #0]
 800534e:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8005352:	b280      	uxth	r0, r0
 8005354:	4023      	ands	r3, r4
 8005356:	b968      	cbnz	r0, 8005374 <SetEPRxStatus+0x38>
 8005358:	b29b      	uxth	r3, r3
 800535a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800535e:	b288      	uxth	r0, r1
 8005360:	b108      	cbz	r0, 8005366 <SetEPRxStatus+0x2a>
 8005362:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005366:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800536a:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 800536e:	6010      	str	r0, [r2, #0]
}
 8005370:	bc10      	pop	{r4}
 8005372:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8005374:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005378:	e7ef      	b.n	800535a <SetEPRxStatus+0x1e>
 800537a:	bf00      	nop

0800537c <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800537c:	0080      	lsls	r0, r0, #2
 800537e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005382:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8005386:	6801      	ldr	r1, [r0, #0]
 8005388:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800538c:	400b      	ands	r3, r1
 800538e:	f083 0230 	eor.w	r2, r3, #48	; 0x30
 8005392:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8005396:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 800539a:	6003      	str	r3, [r0, #0]
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop

080053a0 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 80053a0:	0080      	lsls	r0, r0, #2
 80053a2:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80053a6:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 80053aa:	6801      	ldr	r1, [r0, #0]
 80053ac:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80053b0:	400b      	ands	r3, r1
 80053b2:	f483 5240 	eor.w	r2, r3, #12288	; 0x3000
 80053b6:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 80053ba:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 80053be:	6003      	str	r3, [r0, #0]
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop

080053c4 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 80053c4:	0080      	lsls	r0, r0, #2
 80053c6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80053ca:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 80053ce:	6801      	ldr	r1, [r0, #0]
 80053d0:	f640 630f 	movw	r3, #3599	; 0xe0f
 80053d4:	400b      	ands	r3, r1
 80053d6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80053da:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 80053de:	6001      	str	r1, [r0, #0]
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop

080053e4 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 80053e4:	0080      	lsls	r0, r0, #2
 80053e6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80053ea:	f503 40b8 	add.w	r0, r3, #23552	; 0x5c00
 80053ee:	6802      	ldr	r2, [r0, #0]
 80053f0:	0451      	lsls	r1, r2, #17
 80053f2:	d508      	bpl.n	8005406 <ClearDTOG_RX+0x22>
 80053f4:	6801      	ldr	r1, [r0, #0]
 80053f6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80053fa:	400b      	ands	r3, r1
 80053fc:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8005400:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8005404:	6001      	str	r1, [r0, #0]
 8005406:	4770      	bx	lr

08005408 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8005408:	0080      	lsls	r0, r0, #2
 800540a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800540e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	0650      	lsls	r0, r2, #25
 8005416:	d508      	bpl.n	800542a <ClearDTOG_TX+0x22>
 8005418:	6819      	ldr	r1, [r3, #0]
 800541a:	f640 700f 	movw	r0, #3855	; 0xf0f
 800541e:	4008      	ands	r0, r1
 8005420:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 8005424:	f042 01c0 	orr.w	r1, r2, #192	; 0xc0
 8005428:	6019      	str	r1, [r3, #0]
 800542a:	4770      	bx	lr

0800542c <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800542c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005430:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800543a:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800543c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005440:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8005444:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 8005448:	0042      	lsls	r2, r0, #1
 800544a:	400b      	ands	r3, r1
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	4770      	bx	lr

08005450 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8005450:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005454:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800545e:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8005460:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005464:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005468:	18c3      	adds	r3, r0, r3
 800546a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800546e:	0058      	lsls	r0, r3, #1
 8005470:	400a      	ands	r2, r1
 8005472:	6002      	str	r2, [r0, #0]
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop

08005478 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8005478:	f645 4350 	movw	r3, #23632	; 0x5c50
 800547c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005480:	6819      	ldr	r1, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005482:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8005484:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005488:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800548c:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 8005490:	004a      	lsls	r2, r1, #1
}
 8005492:	8810      	ldrh	r0, [r2, #0]
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop

08005498 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8005498:	f645 4350 	movw	r3, #23632	; 0x5c50
 800549c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	f243 0104 	movw	r1, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80054a6:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 80054a8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80054ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80054b0:	1842      	adds	r2, r0, r1
 80054b2:	0051      	lsls	r1, r2, #1
}
 80054b4:	8808      	ldrh	r0, [r1, #0]
 80054b6:	4770      	bx	lr

080054b8 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80054b8:	f645 4350 	movw	r3, #23632	; 0x5c50
 80054bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80054c6:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80054c8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80054cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80054d0:	18c3      	adds	r3, r0, r3
 80054d2:	005a      	lsls	r2, r3, #1
 80054d4:	6011      	str	r1, [r2, #0]
 80054d6:	4770      	bx	lr

080054d8 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80054d8:	f645 4350 	movw	r3, #23632	; 0x5c50
 80054dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80054e6:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80054e8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80054ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80054f0:	18c3      	adds	r3, r0, r3
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	293e      	cmp	r1, #62	; 0x3e
 80054f6:	d909      	bls.n	800550c <SetEPRxCount+0x34>
 80054f8:	094a      	lsrs	r2, r1, #5
 80054fa:	06c9      	lsls	r1, r1, #27
 80054fc:	d101      	bne.n	8005502 <SetEPRxCount+0x2a>
 80054fe:	1e50      	subs	r0, r2, #1
 8005500:	b282      	uxth	r2, r0
 8005502:	0291      	lsls	r1, r2, #10
 8005504:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8005508:	6018      	str	r0, [r3, #0]
 800550a:	4770      	bx	lr
 800550c:	084a      	lsrs	r2, r1, #1
 800550e:	07c8      	lsls	r0, r1, #31
 8005510:	bf48      	it	mi
 8005512:	3201      	addmi	r2, #1
 8005514:	0291      	lsls	r1, r2, #10
 8005516:	6019      	str	r1, [r3, #0]
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop

0800551c <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800551c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005520:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	f243 0106 	movw	r1, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800552a:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800552c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005530:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005534:	1842      	adds	r2, r0, r1
 8005536:	0051      	lsls	r1, r2, #1
 8005538:	680b      	ldr	r3, [r1, #0]
}
 800553a:	0598      	lsls	r0, r3, #22
 800553c:	0d80      	lsrs	r0, r0, #22
 800553e:	4770      	bx	lr

08005540 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8005540:	b2c3      	uxtb	r3, r0
 8005542:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8005544:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop

0800554c <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 800554c:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800554e:	f241 6338 	movw	r3, #5688	; 0x1638
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8005552:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8005556:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800555a:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800555e:	2000      	movs	r0, #0
 8005560:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 8005564:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8005568:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800556c:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 800556e:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8005570:	6011      	str	r1, [r2, #0]
  return 0;
}
 8005572:	bc10      	pop	{r4}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop

08005578 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8005578:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800557a:	f245 531d 	movw	r3, #21789	; 0x551d
 800557e:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8005582:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005586:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8005588:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800558a:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800558c:	f245 4199 	movw	r1, #21657	; 0x5499
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8005590:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8005592:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005596:	4628      	mov	r0, r5
 8005598:	4788      	blx	r1
 800559a:	f245 2381 	movw	r3, #21121	; 0x5281
 800559e:	4601      	mov	r1, r0
 80055a0:	4622      	mov	r2, r4
 80055a2:	4630      	mov	r0, r6
 80055a4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80055a8:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 80055aa:	4620      	mov	r0, r4
 80055ac:	bd70      	pop	{r4, r5, r6, pc}
 80055ae:	bf00      	nop

080055b0 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 80055b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b4:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8005764 <CTR_LP+0x1b4>
 80055b8:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80055ba:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80055be:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80055c0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8005768 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80055c4:	4d62      	ldr	r5, [pc, #392]	; (8005750 <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80055c6:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80055ca:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 80055ce:	46d0      	mov	r8, sl
 80055d0:	f8db 0000 	ldr.w	r0, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80055d4:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80055d8:	b282      	uxth	r2, r0
 80055da:	0403      	lsls	r3, r0, #16
 80055dc:	f8aa 2000 	strh.w	r2, [sl]
 80055e0:	f140 80ab 	bpl.w	800573a <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80055e4:	f8b8 3000 	ldrh.w	r3, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80055e8:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80055ec:	f003 020f 	and.w	r2, r3, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80055f0:	0090      	lsls	r0, r2, #2
 80055f2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 80055f6:	4e57      	ldr	r6, [pc, #348]	; (8005754 <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 80055f8:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80055fc:	4f54      	ldr	r7, [pc, #336]	; (8005750 <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 80055fe:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8005600:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8005604:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 8005608:	2a00      	cmp	r2, #0
 800560a:	d133      	bne.n	8005674 <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800560c:	6822      	ldr	r2, [r4, #0]
 800560e:	b290      	uxth	r0, r2
 8005610:	8028      	strh	r0, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8005612:	882b      	ldrh	r3, [r5, #0]
 8005614:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005618:	8032      	strh	r2, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 800561a:	8828      	ldrh	r0, [r5, #0]
 800561c:	f400 5340 	and.w	r3, r0, #12288	; 0x3000
 8005620:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8005622:	6822      	ldr	r2, [r4, #0]
 8005624:	4011      	ands	r1, r2
 8005626:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800562a:	f081 0020 	eor.w	r0, r1, #32
 800562e:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8005632:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005636:	6022      	str	r2, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8005638:	f8b8 1000 	ldrh.w	r1, [r8]
 800563c:	f001 0010 	and.w	r0, r1, #16
 8005640:	b283      	uxth	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d049      	beq.n	80056da <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8005646:	6822      	ldr	r2, [r4, #0]
 8005648:	b291      	uxth	r1, r2
 800564a:	f8ad 1006 	strh.w	r1, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 800564e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8005652:	f400 6300 	and.w	r3, r0, #2048	; 0x800
 8005656:	b29a      	uxth	r2, r3
 8005658:	2a00      	cmp	r2, #0
 800565a:	d171      	bne.n	8005740 <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 800565c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8005660:	b208      	sxth	r0, r1
 8005662:	2800      	cmp	r0, #0
 8005664:	dab4      	bge.n	80055d0 <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	f640 738f 	movw	r3, #3983	; 0xf8f
 800566c:	4013      	ands	r3, r2
 800566e:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8005670:	4939      	ldr	r1, [pc, #228]	; (8005758 <CTR_LP+0x1a8>)
 8005672:	e038      	b.n	80056e6 <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8005674:	6804      	ldr	r4, [r0, #0]
 8005676:	b2a1      	uxth	r1, r4
 8005678:	f8ad 1006 	strh.w	r1, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 800567c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005680:	b214      	sxth	r4, r2
 8005682:	2c00      	cmp	r4, #0
 8005684:	db1b      	blt.n	80056be <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8005686:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800568a:	f001 0280 	and.w	r2, r1, #128	; 0x80
 800568e:	b293      	uxth	r3, r2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d09d      	beq.n	80055d0 <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8005694:	f899 4000 	ldrb.w	r4, [r9]
 8005698:	f648 730f 	movw	r3, #36623	; 0x8f0f
 800569c:	00a0      	lsls	r0, r4, #2
 800569e:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 80056a2:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 80056a6:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80056a8:	3c01      	subs	r4, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80056aa:	4003      	ands	r3, r0
 80056ac:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80056ae:	f240 2344 	movw	r3, #580	; 0x244
 80056b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80056b6:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80056ba:	4788      	blx	r1
 80056bc:	e788      	b.n	80055d0 <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 80056be:	6801      	ldr	r1, [r0, #0]
 80056c0:	f640 728f 	movw	r2, #3983	; 0xf8f
 80056c4:	400a      	ands	r2, r1
 80056c6:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80056c8:	f240 2060 	movw	r0, #608	; 0x260
 80056cc:	3b01      	subs	r3, #1
 80056ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80056d2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80056d6:	47a0      	blx	r4
 80056d8:	e7d5      	b.n	8005686 <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80056da:	6821      	ldr	r1, [r4, #0]
 80056dc:	f648 730f 	movw	r3, #36623	; 0x8f0f
 80056e0:	400b      	ands	r3, r1
        In0_Process();
 80056e2:	491e      	ldr	r1, [pc, #120]	; (800575c <CTR_LP+0x1ac>)
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80056e4:	6023      	str	r3, [r4, #0]
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 80056e6:	4788      	blx	r1
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80056e8:	6820      	ldr	r0, [r4, #0]
 80056ea:	883a      	ldrh	r2, [r7, #0]
 80056ec:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 80056f0:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 80056f4:	b28a      	uxth	r2, r1
 80056f6:	4003      	ands	r3, r0
 80056f8:	b10a      	cbz	r2, 80056fe <CTR_LP+0x14e>
 80056fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056fe:	8838      	ldrh	r0, [r7, #0]
 8005700:	f400 5100 	and.w	r1, r0, #8192	; 0x2000
 8005704:	b28a      	uxth	r2, r1
 8005706:	b10a      	cbz	r2, 800570c <CTR_LP+0x15c>
 8005708:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800570c:	8830      	ldrh	r0, [r6, #0]
 800570e:	f000 0110 	and.w	r1, r0, #16
 8005712:	b28a      	uxth	r2, r1
 8005714:	b10a      	cbz	r2, 800571a <CTR_LP+0x16a>
 8005716:	f083 0310 	eor.w	r3, r3, #16
 800571a:	8830      	ldrh	r0, [r6, #0]
 800571c:	f000 0120 	and.w	r1, r0, #32
 8005720:	b28a      	uxth	r2, r1
 8005722:	b10a      	cbz	r2, 8005728 <CTR_LP+0x178>
 8005724:	f083 0320 	eor.w	r3, r3, #32
 8005728:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 800572c:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8005730:	f040 0280 	orr.w	r2, r0, #128	; 0x80
 8005734:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8005738:	600a      	str	r2, [r1, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800573a:	b003      	add	sp, #12
 800573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8005740:	6820      	ldr	r0, [r4, #0]
 8005742:	f640 728f 	movw	r2, #3983	; 0xf8f
 8005746:	4002      	ands	r2, r0
 8005748:	6022      	str	r2, [r4, #0]
          Setup0_Process();
 800574a:	4905      	ldr	r1, [pc, #20]	; (8005760 <CTR_LP+0x1b0>)
 800574c:	e7cb      	b.n	80056e6 <CTR_LP+0x136>
 800574e:	bf00      	nop
 8005750:	2000163a 	.word	0x2000163a
 8005754:	2000163c 	.word	0x2000163c
 8005758:	08004c35 	.word	0x08004c35
 800575c:	08005155 	.word	0x08005155
 8005760:	08004d25 	.word	0x08004d25
 8005764:	20000ddc 	.word	0x20000ddc
 8005768:	20001610 	.word	0x20001610

0800576c <atan2>:
 800576c:	f000 b800 	b.w	8005770 <__ieee754_atan2>

08005770 <__ieee754_atan2>:
 8005770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	e9cd 2300 	strd	r2, r3, [sp]
 800577a:	e89d 1080 	ldmia.w	sp, {r7, ip}
 800577e:	f1c7 0900 	rsb	r9, r7, #0
 8005782:	2600      	movs	r6, #0
 8005784:	f02c 4800 	bic.w	r8, ip, #2147483648	; 0x80000000
 8005788:	ea49 0907 	orr.w	r9, r9, r7
 800578c:	ea48 79d9 	orr.w	r9, r8, r9, lsr #31
 8005790:	f6c7 76f0 	movt	r6, #32752	; 0x7ff0
 8005794:	45b1      	cmp	r9, r6
 8005796:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800579a:	4604      	mov	r4, r0
 800579c:	460d      	mov	r5, r1
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	d845      	bhi.n	8005830 <__ieee754_atan2+0xc0>
 80057a4:	f1c0 0a00 	rsb	sl, r0, #0
 80057a8:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 80057ac:	ea4a 0a00 	orr.w	sl, sl, r0
 80057b0:	ea49 7ada 	orr.w	sl, r9, sl, lsr #31
 80057b4:	45b2      	cmp	sl, r6
 80057b6:	d83b      	bhi.n	8005830 <__ieee754_atan2+0xc0>
 80057b8:	f10c 4c40 	add.w	ip, ip, #3221225472	; 0xc0000000
 80057bc:	f50c 1c80 	add.w	ip, ip, #1048576	; 0x100000
 80057c0:	ea5c 0c07 	orrs.w	ip, ip, r7
 80057c4:	f8dd a004 	ldr.w	sl, [sp, #4]
 80057c8:	d052      	beq.n	8005870 <__ieee754_atan2+0x100>
 80057ca:	ea4f 76aa 	mov.w	r6, sl, asr #30
 80057ce:	f006 0002 	and.w	r0, r6, #2
 80057d2:	ea59 0202 	orrs.w	r2, r9, r2
 80057d6:	ea40 76d1 	orr.w	r6, r0, r1, lsr #31
 80057da:	d036      	beq.n	800584a <__ieee754_atan2+0xda>
 80057dc:	ea58 0707 	orrs.w	r7, r8, r7
 80057e0:	d040      	beq.n	8005864 <__ieee754_atan2+0xf4>
 80057e2:	2100      	movs	r1, #0
 80057e4:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 80057e8:	4588      	cmp	r8, r1
 80057ea:	d052      	beq.n	8005892 <__ieee754_atan2+0x122>
 80057ec:	2700      	movs	r7, #0
 80057ee:	f6c7 77f0 	movt	r7, #32752	; 0x7ff0
 80057f2:	45b9      	cmp	r9, r7
 80057f4:	d036      	beq.n	8005864 <__ieee754_atan2+0xf4>
 80057f6:	ebc8 0809 	rsb	r8, r8, r9
 80057fa:	ea4f 5828 	mov.w	r8, r8, asr #20
 80057fe:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
 8005802:	dc42      	bgt.n	800588a <__ieee754_atan2+0x11a>
 8005804:	f1ba 0f00 	cmp.w	sl, #0
 8005808:	db7d      	blt.n	8005906 <__ieee754_atan2+0x196>
 800580a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800580e:	4620      	mov	r0, r4
 8005810:	4629      	mov	r1, r5
 8005812:	f7fa fedb 	bl	80005cc <__aeabi_ddiv>
 8005816:	f000 fa6b 	bl	8005cf0 <fabs>
 800581a:	f000 f8b5 	bl	8005988 <atan>
 800581e:	2e01      	cmp	r6, #1
 8005820:	d06d      	beq.n	80058fe <__ieee754_atan2+0x18e>
 8005822:	2e02      	cmp	r6, #2
 8005824:	d05c      	beq.n	80058e0 <__ieee754_atan2+0x170>
 8005826:	2e00      	cmp	r6, #0
 8005828:	d14d      	bne.n	80058c6 <__ieee754_atan2+0x156>
 800582a:	4604      	mov	r4, r0
 800582c:	460d      	mov	r5, r1
 800582e:	e007      	b.n	8005840 <__ieee754_atan2+0xd0>
 8005830:	4620      	mov	r0, r4
 8005832:	4629      	mov	r1, r5
 8005834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005838:	f7fa fbec 	bl	8000014 <__adddf3>
 800583c:	4604      	mov	r4, r0
 800583e:	460d      	mov	r5, r1
 8005840:	4620      	mov	r0, r4
 8005842:	4629      	mov	r1, r5
 8005844:	b004      	add	sp, #16
 8005846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584a:	2e03      	cmp	r6, #3
 800584c:	d8c6      	bhi.n	80057dc <__ieee754_atan2+0x6c>
 800584e:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <__ieee754_atan2+0xe4>)
 8005850:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8005854:	08005841 	.word	0x08005841
 8005858:	08005841 	.word	0x08005841
 800585c:	08005883 	.word	0x08005883
 8005860:	0800587b 	.word	0x0800587b
 8005864:	2b00      	cmp	r3, #0
 8005866:	db2a      	blt.n	80058be <__ieee754_atan2+0x14e>
 8005868:	a535      	add	r5, pc, #212	; (adr r5, 8005940 <__ieee754_atan2+0x1d0>)
 800586a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800586e:	e7e7      	b.n	8005840 <__ieee754_atan2+0xd0>
 8005870:	b004      	add	sp, #16
 8005872:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005876:	f000 b887 	b.w	8005988 <atan>
 800587a:	a533      	add	r5, pc, #204	; (adr r5, 8005948 <__ieee754_atan2+0x1d8>)
 800587c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005880:	e7de      	b.n	8005840 <__ieee754_atan2+0xd0>
 8005882:	a533      	add	r5, pc, #204	; (adr r5, 8005950 <__ieee754_atan2+0x1e0>)
 8005884:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005888:	e7da      	b.n	8005840 <__ieee754_atan2+0xd0>
 800588a:	a12d      	add	r1, pc, #180	; (adr r1, 8005940 <__ieee754_atan2+0x1d0>)
 800588c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005890:	e7c5      	b.n	800581e <__ieee754_atan2+0xae>
 8005892:	45c1      	cmp	r9, r8
 8005894:	d03e      	beq.n	8005914 <__ieee754_atan2+0x1a4>
 8005896:	2e03      	cmp	r6, #3
 8005898:	d8a8      	bhi.n	80057ec <__ieee754_atan2+0x7c>
 800589a:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <__ieee754_atan2+0x130>)
 800589c:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 80058a0:	080058b9 	.word	0x080058b9
 80058a4:	080058b1 	.word	0x080058b1
 80058a8:	08005883 	.word	0x08005883
 80058ac:	0800587b 	.word	0x0800587b
 80058b0:	2400      	movs	r4, #0
 80058b2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80058b6:	e7c3      	b.n	8005840 <__ieee754_atan2+0xd0>
 80058b8:	2400      	movs	r4, #0
 80058ba:	2500      	movs	r5, #0
 80058bc:	e7c0      	b.n	8005840 <__ieee754_atan2+0xd0>
 80058be:	a526      	add	r5, pc, #152	; (adr r5, 8005958 <__ieee754_atan2+0x1e8>)
 80058c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80058c4:	e7bc      	b.n	8005840 <__ieee754_atan2+0xd0>
 80058c6:	a326      	add	r3, pc, #152	; (adr r3, 8005960 <__ieee754_atan2+0x1f0>)
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	f7fa fba0 	bl	8000010 <__aeabi_dsub>
 80058d0:	a31f      	add	r3, pc, #124	; (adr r3, 8005950 <__ieee754_atan2+0x1e0>)
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f7fa fb9b 	bl	8000010 <__aeabi_dsub>
 80058da:	4604      	mov	r4, r0
 80058dc:	460d      	mov	r5, r1
 80058de:	e7af      	b.n	8005840 <__ieee754_atan2+0xd0>
 80058e0:	a31f      	add	r3, pc, #124	; (adr r3, 8005960 <__ieee754_atan2+0x1f0>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fb93 	bl	8000010 <__aeabi_dsub>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	a118      	add	r1, pc, #96	; (adr r1, 8005950 <__ieee754_atan2+0x1e0>)
 80058f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058f4:	f7fa fb8c 	bl	8000010 <__aeabi_dsub>
 80058f8:	4604      	mov	r4, r0
 80058fa:	460d      	mov	r5, r1
 80058fc:	e7a0      	b.n	8005840 <__ieee754_atan2+0xd0>
 80058fe:	4604      	mov	r4, r0
 8005900:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8005904:	e79c      	b.n	8005840 <__ieee754_atan2+0xd0>
 8005906:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
 800590a:	f6bf af7e 	bge.w	800580a <__ieee754_atan2+0x9a>
 800590e:	2000      	movs	r0, #0
 8005910:	2100      	movs	r1, #0
 8005912:	e784      	b.n	800581e <__ieee754_atan2+0xae>
 8005914:	2e03      	cmp	r6, #3
 8005916:	d8a5      	bhi.n	8005864 <__ieee754_atan2+0xf4>
 8005918:	e8df f006 	tbb	[pc, r6]
 800591c:	02060a0e 	.word	0x02060a0e
 8005920:	a511      	add	r5, pc, #68	; (adr r5, 8005968 <__ieee754_atan2+0x1f8>)
 8005922:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005926:	e78b      	b.n	8005840 <__ieee754_atan2+0xd0>
 8005928:	a511      	add	r5, pc, #68	; (adr r5, 8005970 <__ieee754_atan2+0x200>)
 800592a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800592e:	e787      	b.n	8005840 <__ieee754_atan2+0xd0>
 8005930:	a511      	add	r5, pc, #68	; (adr r5, 8005978 <__ieee754_atan2+0x208>)
 8005932:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005936:	e783      	b.n	8005840 <__ieee754_atan2+0xd0>
 8005938:	a511      	add	r5, pc, #68	; (adr r5, 8005980 <__ieee754_atan2+0x210>)
 800593a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800593e:	e77f      	b.n	8005840 <__ieee754_atan2+0xd0>
 8005940:	54442d18 	.word	0x54442d18
 8005944:	3ff921fb 	.word	0x3ff921fb
 8005948:	54442d18 	.word	0x54442d18
 800594c:	c00921fb 	.word	0xc00921fb
 8005950:	54442d18 	.word	0x54442d18
 8005954:	400921fb 	.word	0x400921fb
 8005958:	54442d18 	.word	0x54442d18
 800595c:	bff921fb 	.word	0xbff921fb
 8005960:	33145c07 	.word	0x33145c07
 8005964:	3ca1a626 	.word	0x3ca1a626
 8005968:	7f3321d2 	.word	0x7f3321d2
 800596c:	c002d97c 	.word	0xc002d97c
 8005970:	7f3321d2 	.word	0x7f3321d2
 8005974:	4002d97c 	.word	0x4002d97c
 8005978:	54442d18 	.word	0x54442d18
 800597c:	bfe921fb 	.word	0xbfe921fb
 8005980:	54442d18 	.word	0x54442d18
 8005984:	3fe921fb 	.word	0x3fe921fb

08005988 <atan>:
 8005988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005990:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005994:	f2c4 430f 	movt	r3, #17423	; 0x440f
 8005998:	429e      	cmp	r6, r3
 800599a:	4688      	mov	r8, r1
 800599c:	468a      	mov	sl, r1
 800599e:	4681      	mov	r9, r0
 80059a0:	dd1b      	ble.n	80059da <atan+0x52>
 80059a2:	2000      	movs	r0, #0
 80059a4:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 80059a8:	4286      	cmp	r6, r0
 80059aa:	464b      	mov	r3, r9
 80059ac:	f300 80be 	bgt.w	8005b2c <atan+0x1a4>
 80059b0:	f000 80b9 	beq.w	8005b26 <atan+0x19e>
 80059b4:	f242 18fb 	movw	r8, #8699	; 0x21fb
 80059b8:	4641      	mov	r1, r8
 80059ba:	f642 5918 	movw	r9, #11544	; 0x2d18
 80059be:	f6cb 78f9 	movt	r8, #49145	; 0xbff9
 80059c2:	f6c3 71f9 	movt	r1, #16377	; 0x3ff9
 80059c6:	f2c5 4944 	movt	r9, #21572	; 0x5444
 80059ca:	f1ba 0f00 	cmp.w	sl, #0
 80059ce:	bfc8      	it	gt
 80059d0:	4688      	movgt	r8, r1
 80059d2:	4648      	mov	r0, r9
 80059d4:	4641      	mov	r1, r8
 80059d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80059de:	f6c3 70db 	movt	r0, #16347	; 0x3fdb
 80059e2:	4286      	cmp	r6, r0
 80059e4:	f300 80bc 	bgt.w	8005b60 <atan+0x1d8>
 80059e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80059ec:	f6c3 611f 	movt	r1, #15903	; 0x3e1f
 80059f0:	428e      	cmp	r6, r1
 80059f2:	f340 80a4 	ble.w	8005b3e <atan+0x1b6>
 80059f6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80059fa:	464a      	mov	r2, r9
 80059fc:	4643      	mov	r3, r8
 80059fe:	4648      	mov	r0, r9
 8005a00:	4641      	mov	r1, r8
 8005a02:	f7fa fcb9 	bl	8000378 <__aeabi_dmul>
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	460f      	mov	r7, r1
 8005a0e:	f7fa fcb3 	bl	8000378 <__aeabi_dmul>
 8005a12:	a39d      	add	r3, pc, #628	; (adr r3, 8005c88 <atan+0x300>)
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	4604      	mov	r4, r0
 8005a1a:	460d      	mov	r5, r1
 8005a1c:	f7fa fcac 	bl	8000378 <__aeabi_dmul>
 8005a20:	a39b      	add	r3, pc, #620	; (adr r3, 8005c90 <atan+0x308>)
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f7fa faf5 	bl	8000014 <__adddf3>
 8005a2a:	4622      	mov	r2, r4
 8005a2c:	462b      	mov	r3, r5
 8005a2e:	f7fa fca3 	bl	8000378 <__aeabi_dmul>
 8005a32:	a399      	add	r3, pc, #612	; (adr r3, 8005c98 <atan+0x310>)
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f7fa faec 	bl	8000014 <__adddf3>
 8005a3c:	4622      	mov	r2, r4
 8005a3e:	462b      	mov	r3, r5
 8005a40:	f7fa fc9a 	bl	8000378 <__aeabi_dmul>
 8005a44:	a396      	add	r3, pc, #600	; (adr r3, 8005ca0 <atan+0x318>)
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f7fa fae3 	bl	8000014 <__adddf3>
 8005a4e:	4622      	mov	r2, r4
 8005a50:	462b      	mov	r3, r5
 8005a52:	f7fa fc91 	bl	8000378 <__aeabi_dmul>
 8005a56:	a394      	add	r3, pc, #592	; (adr r3, 8005ca8 <atan+0x320>)
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f7fa fada 	bl	8000014 <__adddf3>
 8005a60:	4622      	mov	r2, r4
 8005a62:	462b      	mov	r3, r5
 8005a64:	f7fa fc88 	bl	8000378 <__aeabi_dmul>
 8005a68:	a391      	add	r3, pc, #580	; (adr r3, 8005cb0 <atan+0x328>)
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f7fa fad1 	bl	8000014 <__adddf3>
 8005a72:	4632      	mov	r2, r6
 8005a74:	463b      	mov	r3, r7
 8005a76:	f7fa fc7f 	bl	8000378 <__aeabi_dmul>
 8005a7a:	a38f      	add	r3, pc, #572	; (adr r3, 8005cb8 <atan+0x330>)
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	4606      	mov	r6, r0
 8005a82:	460f      	mov	r7, r1
 8005a84:	4620      	mov	r0, r4
 8005a86:	4629      	mov	r1, r5
 8005a88:	f7fa fc76 	bl	8000378 <__aeabi_dmul>
 8005a8c:	a38c      	add	r3, pc, #560	; (adr r3, 8005cc0 <atan+0x338>)
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	f7fa fabd 	bl	8000010 <__aeabi_dsub>
 8005a96:	4622      	mov	r2, r4
 8005a98:	462b      	mov	r3, r5
 8005a9a:	f7fa fc6d 	bl	8000378 <__aeabi_dmul>
 8005a9e:	a38a      	add	r3, pc, #552	; (adr r3, 8005cc8 <atan+0x340>)
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f7fa fab4 	bl	8000010 <__aeabi_dsub>
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	462b      	mov	r3, r5
 8005aac:	f7fa fc64 	bl	8000378 <__aeabi_dmul>
 8005ab0:	a387      	add	r3, pc, #540	; (adr r3, 8005cd0 <atan+0x348>)
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f7fa faab 	bl	8000010 <__aeabi_dsub>
 8005aba:	4622      	mov	r2, r4
 8005abc:	462b      	mov	r3, r5
 8005abe:	f7fa fc5b 	bl	8000378 <__aeabi_dmul>
 8005ac2:	a385      	add	r3, pc, #532	; (adr r3, 8005cd8 <atan+0x350>)
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f7fa faa2 	bl	8000010 <__aeabi_dsub>
 8005acc:	4622      	mov	r2, r4
 8005ace:	462b      	mov	r3, r5
 8005ad0:	f7fa fc52 	bl	8000378 <__aeabi_dmul>
 8005ad4:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	d06f      	beq.n	8005bbe <atan+0x236>
 8005ade:	4630      	mov	r0, r6
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	f7fa fa97 	bl	8000014 <__adddf3>
 8005ae6:	4643      	mov	r3, r8
 8005ae8:	464a      	mov	r2, r9
 8005aea:	f7fa fc45 	bl	8000378 <__aeabi_dmul>
 8005aee:	4c7e      	ldr	r4, [pc, #504]	; (8005ce8 <atan+0x360>)
 8005af0:	4a7e      	ldr	r2, [pc, #504]	; (8005cec <atan+0x364>)
 8005af2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005af6:	445c      	add	r4, fp
 8005af8:	4493      	add	fp, r2
 8005afa:	e9db 2300 	ldrd	r2, r3, [fp]
 8005afe:	f7fa fa87 	bl	8000010 <__aeabi_dsub>
 8005b02:	4643      	mov	r3, r8
 8005b04:	464a      	mov	r2, r9
 8005b06:	f7fa fa83 	bl	8000010 <__aeabi_dsub>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005b12:	f7fa fa7d 	bl	8000010 <__aeabi_dsub>
 8005b16:	f1ba 0f00 	cmp.w	sl, #0
 8005b1a:	4681      	mov	r9, r0
 8005b1c:	bfb4      	ite	lt
 8005b1e:	f101 4800 	addlt.w	r8, r1, #2147483648	; 0x80000000
 8005b22:	4688      	movge	r8, r1
 8005b24:	e755      	b.n	80059d2 <atan+0x4a>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f43f af44 	beq.w	80059b4 <atan+0x2c>
 8005b2c:	4648      	mov	r0, r9
 8005b2e:	464a      	mov	r2, r9
 8005b30:	4641      	mov	r1, r8
 8005b32:	4643      	mov	r3, r8
 8005b34:	f7fa fa6e 	bl	8000014 <__adddf3>
 8005b38:	4681      	mov	r9, r0
 8005b3a:	4688      	mov	r8, r1
 8005b3c:	e749      	b.n	80059d2 <atan+0x4a>
 8005b3e:	a368      	add	r3, pc, #416	; (adr r3, 8005ce0 <atan+0x358>)
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	4648      	mov	r0, r9
 8005b46:	4641      	mov	r1, r8
 8005b48:	f7fa fa64 	bl	8000014 <__adddf3>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8005b54:	f7fa fea0 	bl	8000898 <__aeabi_dcmpgt>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	f47f af3a 	bne.w	80059d2 <atan+0x4a>
 8005b5e:	e74a      	b.n	80059f6 <atan+0x6e>
 8005b60:	4648      	mov	r0, r9
 8005b62:	f000 f8c5 	bl	8005cf0 <fabs>
 8005b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b6a:	f6c3 72f2 	movt	r2, #16370	; 0x3ff2
 8005b6e:	4296      	cmp	r6, r2
 8005b70:	4604      	mov	r4, r0
 8005b72:	460d      	mov	r5, r1
 8005b74:	dc36      	bgt.n	8005be4 <atan+0x25c>
 8005b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b7a:	f6c3 73e5 	movt	r3, #16357	; 0x3fe5
 8005b7e:	429e      	cmp	r6, r3
 8005b80:	dc64      	bgt.n	8005c4c <atan+0x2c4>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	f7fa fa45 	bl	8000014 <__adddf3>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8005b92:	f7fa fa3d 	bl	8000010 <__aeabi_dsub>
 8005b96:	2200      	movs	r2, #0
 8005b98:	4606      	mov	r6, r0
 8005b9a:	460f      	mov	r7, r1
 8005b9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	f7fa fa36 	bl	8000014 <__adddf3>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4630      	mov	r0, r6
 8005bae:	4639      	mov	r1, r7
 8005bb0:	f7fa fd0c 	bl	80005cc <__aeabi_ddiv>
 8005bb4:	f04f 0b00 	mov.w	fp, #0
 8005bb8:	4681      	mov	r9, r0
 8005bba:	4688      	mov	r8, r1
 8005bbc:	e71d      	b.n	80059fa <atan+0x72>
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	f7fa fa27 	bl	8000014 <__adddf3>
 8005bc6:	464a      	mov	r2, r9
 8005bc8:	4643      	mov	r3, r8
 8005bca:	f7fa fbd5 	bl	8000378 <__aeabi_dmul>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4648      	mov	r0, r9
 8005bd4:	4641      	mov	r1, r8
 8005bd6:	f7fa fa1b 	bl	8000010 <__aeabi_dsub>
 8005bda:	464c      	mov	r4, r9
 8005bdc:	4645      	mov	r5, r8
 8005bde:	4681      	mov	r9, r0
 8005be0:	4688      	mov	r8, r1
 8005be2:	e6f6      	b.n	80059d2 <atan+0x4a>
 8005be4:	f647 77ff 	movw	r7, #32767	; 0x7fff
 8005be8:	f2c4 0703 	movt	r7, #16387	; 0x4003
 8005bec:	42be      	cmp	r6, r7
 8005bee:	dc20      	bgt.n	8005c32 <atan+0x2aa>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8005bf8:	f7fa fa0a 	bl	8000010 <__aeabi_dsub>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460f      	mov	r7, r1
 8005c02:	2200      	movs	r2, #0
 8005c04:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8005c08:	4620      	mov	r0, r4
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	f7fa fbb4 	bl	8000378 <__aeabi_dmul>
 8005c10:	2300      	movs	r3, #0
 8005c12:	2200      	movs	r2, #0
 8005c14:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8005c18:	f7fa f9fc 	bl	8000014 <__adddf3>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4630      	mov	r0, r6
 8005c22:	4639      	mov	r1, r7
 8005c24:	f7fa fcd2 	bl	80005cc <__aeabi_ddiv>
 8005c28:	f04f 0b02 	mov.w	fp, #2
 8005c2c:	4681      	mov	r9, r0
 8005c2e:	4688      	mov	r8, r1
 8005c30:	e6e3      	b.n	80059fa <atan+0x72>
 8005c32:	2100      	movs	r1, #0
 8005c34:	2000      	movs	r0, #0
 8005c36:	f6cb 71f0 	movt	r1, #49136	; 0xbff0
 8005c3a:	4622      	mov	r2, r4
 8005c3c:	462b      	mov	r3, r5
 8005c3e:	f7fa fcc5 	bl	80005cc <__aeabi_ddiv>
 8005c42:	f04f 0b03 	mov.w	fp, #3
 8005c46:	4681      	mov	r9, r0
 8005c48:	4688      	mov	r8, r1
 8005c4a:	e6d6      	b.n	80059fa <atan+0x72>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8005c54:	f7fa f9dc 	bl	8000010 <__aeabi_dsub>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	460f      	mov	r7, r1
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8005c64:	4620      	mov	r0, r4
 8005c66:	4629      	mov	r1, r5
 8005c68:	f7fa f9d4 	bl	8000014 <__adddf3>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4630      	mov	r0, r6
 8005c72:	4639      	mov	r1, r7
 8005c74:	f7fa fcaa 	bl	80005cc <__aeabi_ddiv>
 8005c78:	f04f 0b01 	mov.w	fp, #1
 8005c7c:	4681      	mov	r9, r0
 8005c7e:	4688      	mov	r8, r1
 8005c80:	e6bb      	b.n	80059fa <atan+0x72>
 8005c82:	bf00      	nop
 8005c84:	f3af 8000 	nop.w
 8005c88:	e322da11 	.word	0xe322da11
 8005c8c:	3f90ad3a 	.word	0x3f90ad3a
 8005c90:	24760deb 	.word	0x24760deb
 8005c94:	3fa97b4b 	.word	0x3fa97b4b
 8005c98:	a0d03d51 	.word	0xa0d03d51
 8005c9c:	3fb10d66 	.word	0x3fb10d66
 8005ca0:	c54c206e 	.word	0xc54c206e
 8005ca4:	3fb745cd 	.word	0x3fb745cd
 8005ca8:	920083ff 	.word	0x920083ff
 8005cac:	3fc24924 	.word	0x3fc24924
 8005cb0:	5555550d 	.word	0x5555550d
 8005cb4:	3fd55555 	.word	0x3fd55555
 8005cb8:	2c6a6c2f 	.word	0x2c6a6c2f
 8005cbc:	bfa2b444 	.word	0xbfa2b444
 8005cc0:	52defd9a 	.word	0x52defd9a
 8005cc4:	3fadde2d 	.word	0x3fadde2d
 8005cc8:	af749a6d 	.word	0xaf749a6d
 8005ccc:	3fb3b0f2 	.word	0x3fb3b0f2
 8005cd0:	fe231671 	.word	0xfe231671
 8005cd4:	3fbc71c6 	.word	0x3fbc71c6
 8005cd8:	9998ebc4 	.word	0x9998ebc4
 8005cdc:	3fc99999 	.word	0x3fc99999
 8005ce0:	8800759c 	.word	0x8800759c
 8005ce4:	7e37e43c 	.word	0x7e37e43c
 8005ce8:	08006210 	.word	0x08006210
 8005cec:	080061f0 	.word	0x080061f0

08005cf0 <fabs>:
 8005cf0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	00000a0a 	.word	0x00000a0a
 8005cfc:	2a2a2a2a 	.word	0x2a2a2a2a
 8005d00:	2a2a2a2a 	.word	0x2a2a2a2a
 8005d04:	2a2a2a2a 	.word	0x2a2a2a2a
 8005d08:	2a2a2a2a 	.word	0x2a2a2a2a
 8005d0c:	2a2a2a2a 	.word	0x2a2a2a2a
 8005d10:	2a2a2a2a 	.word	0x2a2a2a2a
 8005d14:	2a2a2a2a 	.word	0x2a2a2a2a
 8005d18:	2a2a2a2a 	.word	0x2a2a2a2a
 8005d1c:	2a2a2a2a 	.word	0x2a2a2a2a
 8005d20:	2a2a2a2a 	.word	0x2a2a2a2a
 8005d24:	2a2a2a2a 	.word	0x2a2a2a2a
 8005d28:	2a2a2a2a 	.word	0x2a2a2a2a
 8005d2c:	2a2a2a2a 	.word	0x2a2a2a2a
 8005d30:	0a2a2a2a 	.word	0x0a2a2a2a
 8005d34:	00000000 	.word	0x00000000
 8005d38:	20202020 	.word	0x20202020
 8005d3c:	20202020 	.word	0x20202020
 8005d40:	20202020 	.word	0x20202020
 8005d44:	20202020 	.word	0x20202020
 8005d48:	20202020 	.word	0x20202020
 8005d4c:	504d2020 	.word	0x504d2020
 8005d50:	35303655 	.word	0x35303655
 8005d54:	20202030 	.word	0x20202030
 8005d58:	20202020 	.word	0x20202020
 8005d5c:	20202020 	.word	0x20202020
 8005d60:	20202020 	.word	0x20202020
 8005d64:	20202020 	.word	0x20202020
 8005d68:	20202020 	.word	0x20202020
 8005d6c:	0a202020 	.word	0x0a202020
 8005d70:	00000000 	.word	0x00000000
 8005d74:	2e31202a 	.word	0x2e31202a
 8005d78:	44434c20 	.word	0x44434c20
 8005d7c:	656c4320 	.word	0x656c4320
 8005d80:	20207261 	.word	0x20207261
 8005d84:	20202020 	.word	0x20202020
 8005d88:	20202020 	.word	0x20202020
 8005d8c:	20202020 	.word	0x20202020
 8005d90:	20202020 	.word	0x20202020
 8005d94:	20202020 	.word	0x20202020
 8005d98:	20202020 	.word	0x20202020
 8005d9c:	20202020 	.word	0x20202020
 8005da0:	20202020 	.word	0x20202020
 8005da4:	20202020 	.word	0x20202020
 8005da8:	0a2a2020 	.word	0x0a2a2020
 8005dac:	00000000 	.word	0x00000000
 8005db0:	2e32202a 	.word	0x2e32202a
 8005db4:	6f685320 	.word	0x6f685320
 8005db8:	63412077 	.word	0x63412077
 8005dbc:	20202063 	.word	0x20202063
 8005dc0:	20202020 	.word	0x20202020
 8005dc4:	20202020 	.word	0x20202020
 8005dc8:	20202020 	.word	0x20202020
 8005dcc:	20202020 	.word	0x20202020
 8005dd0:	20202020 	.word	0x20202020
 8005dd4:	20202020 	.word	0x20202020
 8005dd8:	20202020 	.word	0x20202020
 8005ddc:	20202020 	.word	0x20202020
 8005de0:	20202020 	.word	0x20202020
 8005de4:	0a2a2020 	.word	0x0a2a2020
 8005de8:	00000000 	.word	0x00000000
 8005dec:	2e33202a 	.word	0x2e33202a
 8005df0:	6f685320 	.word	0x6f685320
 8005df4:	504d2077 	.word	0x504d2077
 8005df8:	35303655 	.word	0x35303655
 8005dfc:	65522030 	.word	0x65522030
 8005e00:	20207367 	.word	0x20207367
 8005e04:	20202020 	.word	0x20202020
 8005e08:	20202020 	.word	0x20202020
 8005e0c:	20202020 	.word	0x20202020
 8005e10:	20202020 	.word	0x20202020
 8005e14:	20202020 	.word	0x20202020
 8005e18:	20202020 	.word	0x20202020
 8005e1c:	20202020 	.word	0x20202020
 8005e20:	0a2a2020 	.word	0x0a2a2020
 8005e24:	00000000 	.word	0x00000000
 8005e28:	2e34202a 	.word	0x2e34202a
 8005e2c:	6e6f5320 	.word	0x6e6f5320
 8005e30:	20206369 	.word	0x20206369
 8005e34:	20202020 	.word	0x20202020
 8005e38:	20202020 	.word	0x20202020
 8005e3c:	20202020 	.word	0x20202020
 8005e40:	20202020 	.word	0x20202020
 8005e44:	20202020 	.word	0x20202020
 8005e48:	20202020 	.word	0x20202020
 8005e4c:	20202020 	.word	0x20202020
 8005e50:	20202020 	.word	0x20202020
 8005e54:	20202020 	.word	0x20202020
 8005e58:	20202020 	.word	0x20202020
 8005e5c:	0a2a2020 	.word	0x0a2a2020
 8005e60:	00000000 	.word	0x00000000
 8005e64:	2e35202a 	.word	0x2e35202a
 8005e68:	6f685320 	.word	0x6f685320
 8005e6c:	6f432077 	.word	0x6f432077
 8005e70:	7361706d 	.word	0x7361706d
 8005e74:	20202073 	.word	0x20202073
 8005e78:	20202020 	.word	0x20202020
 8005e7c:	20202020 	.word	0x20202020
 8005e80:	20202020 	.word	0x20202020
 8005e84:	20202020 	.word	0x20202020
 8005e88:	20202020 	.word	0x20202020
 8005e8c:	20202020 	.word	0x20202020
 8005e90:	20202020 	.word	0x20202020
 8005e94:	20202020 	.word	0x20202020
 8005e98:	0a2a2020 	.word	0x0a2a2020
 8005e9c:	00000000 	.word	0x00000000
 8005ea0:	2e36202a 	.word	0x2e36202a
 8005ea4:	6f685320 	.word	0x6f685320
 8005ea8:	4d482077 	.word	0x4d482077
 8005eac:	38383543 	.word	0x38383543
 8005eb0:	65522033 	.word	0x65522033
 8005eb4:	20207367 	.word	0x20207367
 8005eb8:	20202020 	.word	0x20202020
 8005ebc:	20202020 	.word	0x20202020
 8005ec0:	20202020 	.word	0x20202020
 8005ec4:	20202020 	.word	0x20202020
 8005ec8:	20202020 	.word	0x20202020
 8005ecc:	20202020 	.word	0x20202020
 8005ed0:	20202020 	.word	0x20202020
 8005ed4:	0a2a2020 	.word	0x0a2a2020
 8005ed8:	00000000 	.word	0x00000000
 8005edc:	2e37202a 	.word	0x2e37202a
 8005ee0:	6f685320 	.word	0x6f685320
 8005ee4:	4d492077 	.word	0x4d492077
 8005ee8:	20202055 	.word	0x20202055
 8005eec:	20202020 	.word	0x20202020
 8005ef0:	20202020 	.word	0x20202020
 8005ef4:	20202020 	.word	0x20202020
 8005ef8:	20202020 	.word	0x20202020
 8005efc:	20202020 	.word	0x20202020
 8005f00:	20202020 	.word	0x20202020
 8005f04:	20202020 	.word	0x20202020
 8005f08:	20202020 	.word	0x20202020
 8005f0c:	20202020 	.word	0x20202020
 8005f10:	0a2a2020 	.word	0x0a2a2020
 8005f14:	00000000 	.word	0x00000000
 8005f18:	2e38202a 	.word	0x2e38202a
 8005f1c:	20202020 	.word	0x20202020
 8005f20:	20202020 	.word	0x20202020
 8005f24:	20202020 	.word	0x20202020
 8005f28:	20202020 	.word	0x20202020
 8005f2c:	20202020 	.word	0x20202020
 8005f30:	20202020 	.word	0x20202020
 8005f34:	20202020 	.word	0x20202020
 8005f38:	20202020 	.word	0x20202020
 8005f3c:	20202020 	.word	0x20202020
 8005f40:	20202020 	.word	0x20202020
 8005f44:	20202020 	.word	0x20202020
 8005f48:	20202020 	.word	0x20202020
 8005f4c:	0a2a2020 	.word	0x0a2a2020
 8005f50:	00000000 	.word	0x00000000
 8005f54:	2e39202a 	.word	0x2e39202a
 8005f58:	20202020 	.word	0x20202020
 8005f5c:	20202020 	.word	0x20202020
 8005f60:	20202020 	.word	0x20202020
 8005f64:	20202020 	.word	0x20202020
 8005f68:	20202020 	.word	0x20202020
 8005f6c:	20202020 	.word	0x20202020
 8005f70:	20202020 	.word	0x20202020
 8005f74:	20202020 	.word	0x20202020
 8005f78:	20202020 	.word	0x20202020
 8005f7c:	20202020 	.word	0x20202020
 8005f80:	20202020 	.word	0x20202020
 8005f84:	20202020 	.word	0x20202020
 8005f88:	0a2a2020 	.word	0x0a2a2020
 8005f8c:	00000000 	.word	0x00000000
 8005f90:	2e6d202a 	.word	0x2e6d202a
 8005f94:	654d2020 	.word	0x654d2020
 8005f98:	2020756e 	.word	0x2020756e
 8005f9c:	20202020 	.word	0x20202020
 8005fa0:	20202020 	.word	0x20202020
 8005fa4:	20202020 	.word	0x20202020
 8005fa8:	20202020 	.word	0x20202020
 8005fac:	20202020 	.word	0x20202020
 8005fb0:	20202020 	.word	0x20202020
 8005fb4:	20202020 	.word	0x20202020
 8005fb8:	20202020 	.word	0x20202020
 8005fbc:	20202020 	.word	0x20202020
 8005fc0:	20202020 	.word	0x20202020
 8005fc4:	0a2a2020 	.word	0x0a2a2020
 8005fc8:	00000000 	.word	0x00000000
 8005fcc:	00203e3e 	.word	0x00203e3e
 8005fd0:	72616d53 	.word	0x72616d53
 8005fd4:	626f5274 	.word	0x626f5274
 8005fd8:	4220746f 	.word	0x4220746f
 8005fdc:	00000044 	.word	0x00000044
 8005fe0:	2044434c 	.word	0x2044434c
 8005fe4:	61656c43 	.word	0x61656c43
 8005fe8:	000a2072 	.word	0x000a2072
 8005fec:	656d6954 	.word	0x656d6954
 8005ff0:	20642520 	.word	0x20642520
 8005ff4:	00000000 	.word	0x00000000
 8005ff8:	25205841 	.word	0x25205841
 8005ffc:	00002064 	.word	0x00002064
 8006000:	25205941 	.word	0x25205941
 8006004:	00002064 	.word	0x00002064
 8006008:	25205a41 	.word	0x25205a41
 800600c:	00002064 	.word	0x00002064
 8006010:	64252054 	.word	0x64252054
 8006014:	00000a20 	.word	0x00000a20
 8006018:	7830200a 	.word	0x7830200a
 800601c:	78323025 	.word	0x78323025
 8006020:	0000203a 	.word	0x0000203a
 8006024:	78323025 	.word	0x78323025
 8006028:	00000020 	.word	0x00000020
 800602c:	6425204c 	.word	0x6425204c
 8006030:	20522020 	.word	0x20522020
 8006034:	000a6425 	.word	0x000a6425
 8006038:	25205843 	.word	0x25205843
 800603c:	00002064 	.word	0x00002064
 8006040:	25205943 	.word	0x25205943
 8006044:	00002064 	.word	0x00002064
 8006048:	25205a43 	.word	0x25205a43
 800604c:	000a2064 	.word	0x000a2064
 8006050:	3a746552 	.word	0x3a746552
 8006054:	41206425 	.word	0x41206425
 8006058:	20726464 	.word	0x20726464
 800605c:	30257830 	.word	0x30257830
 8006060:	44207832 	.word	0x44207832
 8006064:	20617461 	.word	0x20617461
 8006068:	2578303a 	.word	0x2578303a
 800606c:	0a783230 	.word	0x0a783230
 8006070:	00000000 	.word	0x00000000
 8006074:	25204e45 	.word	0x25204e45
 8006078:	00002064 	.word	0x00002064
 800607c:	25204554 	.word	0x25204554
 8006080:	00002064 	.word	0x00002064
 8006084:	25205a43 	.word	0x25205a43
 8006088:	00000a64 	.word	0x00000a64
 800608c:	58676e41 	.word	0x58676e41
 8006090:	20642520 	.word	0x20642520
 8006094:	00000000 	.word	0x00000000
 8006098:	59676e41 	.word	0x59676e41
 800609c:	20642520 	.word	0x20642520
 80060a0:	0000000a 	.word	0x0000000a
 80060a4:	276e6143 	.word	0x276e6143
 80060a8:	69662074 	.word	0x69662074
 80060ac:	4d20646e 	.word	0x4d20646e
 80060b0:	30365550 	.word	0x30365550
 80060b4:	0a203035 	.word	0x0a203035
 80060b8:	00000000 	.word	0x00000000
 80060bc:	20727245 	.word	0x20727245
 80060c0:	74697277 	.word	0x74697277
 80060c4:	504d2065 	.word	0x504d2065
 80060c8:	35303655 	.word	0x35303655
 80060cc:	41525f30 	.word	0x41525f30
 80060d0:	5257505f 	.word	0x5257505f
 80060d4:	4d474d5f 	.word	0x4d474d5f
 80060d8:	20315f54 	.word	0x20315f54
 80060dc:	6425203a 	.word	0x6425203a
 80060e0:	0000000a 	.word	0x0000000a
 80060e4:	35434d48 	.word	0x35434d48
 80060e8:	20333838 	.word	0x20333838
 80060ec:	6c696146 	.word	0x6c696146
 80060f0:	206f7420 	.word	0x206f7420
 80060f4:	64616572 	.word	0x64616572
 80060f8:	20444920 	.word	0x20444920
 80060fc:	0000000a 	.word	0x0000000a
 8006100:	4d5f7748 	.word	0x4d5f7748
 8006104:	30365550 	.word	0x30365550
 8006108:	495f3035 	.word	0x495f3035
 800610c:	2074696e 	.word	0x2074696e
 8006110:	20746552 	.word	0x20746552
 8006114:	7830203a 	.word	0x7830203a
 8006118:	000a7825 	.word	0x000a7825
 800611c:	485f7748 	.word	0x485f7748
 8006120:	3835434d 	.word	0x3835434d
 8006124:	495f3338 	.word	0x495f3338
 8006128:	2074696e 	.word	0x2074696e
 800612c:	20746552 	.word	0x20746552
 8006130:	7830203a 	.word	0x7830203a
 8006134:	000a7825 	.word	0x000a7825

08006138 <Virtual_Com_Port_StringVendor>:
 8006138:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8006148:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8006158:	00630069 00000073                       i.c.s...

08006160 <Virtual_Com_Port_DeviceDescriptor>:
 8006160:	02000112 40000002 57400483 02010200     .......@..@W....
 8006170:	00000103                                ....

08006174 <Virtual_Com_Port_StringLangID>:
 8006174:	04090304                                ....

08006178 <Virtual_Com_Port_StringProduct>:
 8006178:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8006188:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8006198:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 80061a8:	00000020                                 ...

080061ac <Virtual_Com_Port_ConfigDescriptor>:
 80061ac:	00430209 c0000102 00040932 02020100     ..C.....2.......
 80061bc:	24050001 05011000 01000124 02022404     ...$....$....$..
 80061cc:	00062405 82050701 ff000803 00010409     .$..............
 80061dc:	00000a02 03050700 00004002 02810507     .........@......
 80061ec:	00000040                                @...

080061f0 <atanlo>:
 80061f0:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 8006200:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

08006210 <atanhi>:
 8006210:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 8006220:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
