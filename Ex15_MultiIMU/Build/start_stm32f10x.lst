   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"Hw_IMU.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.Hw_IMU_FreeIMU_Init,"ax",%progbits
  19              		.align	2
  20              		.global	Hw_IMU_FreeIMU_Init
  21              		.thumb
  22              		.thumb_func
  24              	Hw_IMU_FreeIMU_Init:
  25              	.LFB1:
  26              		.file 1 "../LIB_HW/Hw_IMU.c"
   1:../LIB_HW/Hw_IMU.c **** //----------------------------------------------------------------------------
   2:../LIB_HW/Hw_IMU.c **** //    프로그램명 	: IMU 센서 관련 함수
   3:../LIB_HW/Hw_IMU.c **** //
   4:../LIB_HW/Hw_IMU.c **** //    만든이     	: Cho Han Cheol(Baram)
   5:../LIB_HW/Hw_IMU.c **** //
   6:../LIB_HW/Hw_IMU.c **** //    날  짜     	: 
   7:../LIB_HW/Hw_IMU.c **** //    
   8:../LIB_HW/Hw_IMU.c **** //    최종 수정  	:
   9:../LIB_HW/Hw_IMU.c **** //
  10:../LIB_HW/Hw_IMU.c **** //    MPU_Type	:
  11:../LIB_HW/Hw_IMU.c **** //
  12:../LIB_HW/Hw_IMU.c **** //    파일명     	: Hw_IMU.c
  13:../LIB_HW/Hw_IMU.c **** //----------------------------------------------------------------------------
  14:../LIB_HW/Hw_IMU.c **** 
  15:../LIB_HW/Hw_IMU.c **** 
  16:../LIB_HW/Hw_IMU.c **** //----- 헤더파일 열기
  17:../LIB_HW/Hw_IMU.c **** //
  18:../LIB_HW/Hw_IMU.c **** #define  HW_IMU_LOCAL
  19:../LIB_HW/Hw_IMU.c **** 
  20:../LIB_HW/Hw_IMU.c **** 
  21:../LIB_HW/Hw_IMU.c **** #include "Hw_IMU.h"
  22:../LIB_HW/Hw_IMU.c **** #include "Lb_Printf.h"
  23:../LIB_HW/Hw_IMU.c **** #include "math.h"
  24:../LIB_HW/Hw_IMU.c **** 
  25:../LIB_HW/Hw_IMU.c **** 
  26:../LIB_HW/Hw_IMU.c **** 
  27:../LIB_HW/Hw_IMU.c **** //-- FreeIMU
  28:../LIB_HW/Hw_IMU.c **** //
  29:../LIB_HW/Hw_IMU.c **** 
  30:../LIB_HW/Hw_IMU.c **** #define DEBUG_PRINT(x)
  31:../LIB_HW/Hw_IMU.c **** 
  32:../LIB_HW/Hw_IMU.c **** #define twoKpDef  (2.0f * 0.5f) // 2 * proportional gain
  33:../LIB_HW/Hw_IMU.c **** #define twoKiDef  (2.0f * 0.1f) // 2 * integral gain
  34:../LIB_HW/Hw_IMU.c **** 
  35:../LIB_HW/Hw_IMU.c **** int* 			raw_acc, raw_gyro, raw_magn;
  36:../LIB_HW/Hw_IMU.c **** // calibration parameters
  37:../LIB_HW/Hw_IMU.c **** int16_t 		gyro_off_x, gyro_off_y, gyro_off_z;
  38:../LIB_HW/Hw_IMU.c **** 
  39:../LIB_HW/Hw_IMU.c **** 
  40:../LIB_HW/Hw_IMU.c **** 
  41:../LIB_HW/Hw_IMU.c **** float 			iq0, iq1, iq2, iq3;
  42:../LIB_HW/Hw_IMU.c **** float 			exInt, eyInt, ezInt;  	// scaled integral error
  43:../LIB_HW/Hw_IMU.c **** volatile float 	twoKp;      		// 2 * proportional gain (Kp)
  44:../LIB_HW/Hw_IMU.c **** volatile float 	twoKi;      		// 2 * integral gain (Ki)
  45:../LIB_HW/Hw_IMU.c **** volatile float 	q0, q1, q2, q3; 	// quaternion of sensor frame relative to auxiliary frame
  46:../LIB_HW/Hw_IMU.c **** volatile float 	integralFBx,  integralFBy, integralFBz;
  47:../LIB_HW/Hw_IMU.c **** //unsigned long 	lastUpdate, now; 	// sample period expressed in milliseconds
  48:../LIB_HW/Hw_IMU.c **** u16 			lastUpdate, now; 	// sample period expressed in milliseconds
  49:../LIB_HW/Hw_IMU.c **** 
  50:../LIB_HW/Hw_IMU.c **** float 			sampleFreq; 				// half the sample period expressed in seconds
  51:../LIB_HW/Hw_IMU.c **** 
  52:../LIB_HW/Hw_IMU.c **** 
  53:../LIB_HW/Hw_IMU.c **** HW_IMU_DATA_OBJ Hw_IMU_SaveData;
  54:../LIB_HW/Hw_IMU.c **** 
  55:../LIB_HW/Hw_IMU.c **** 
  56:../LIB_HW/Hw_IMU.c **** #define CALIBRATION_H
  57:../LIB_HW/Hw_IMU.c **** 
  58:../LIB_HW/Hw_IMU.c **** /*
  59:../LIB_HW/Hw_IMU.c **** const int acc_off_x = -243;
  60:../LIB_HW/Hw_IMU.c **** const int acc_off_y = -596;
  61:../LIB_HW/Hw_IMU.c **** const int acc_off_z = -2467;
  62:../LIB_HW/Hw_IMU.c **** const float acc_scale_x = 13634.366669;
  63:../LIB_HW/Hw_IMU.c **** const float acc_scale_y = 16414.402439;
  64:../LIB_HW/Hw_IMU.c **** const float acc_scale_z = 17145.649495;
  65:../LIB_HW/Hw_IMU.c **** 
  66:../LIB_HW/Hw_IMU.c **** const int magn_off_x = -99;
  67:../LIB_HW/Hw_IMU.c **** const int magn_off_y = -174;
  68:../LIB_HW/Hw_IMU.c **** const int magn_off_z = -257;
  69:../LIB_HW/Hw_IMU.c **** const float magn_scale_x = 524.728029;
  70:../LIB_HW/Hw_IMU.c **** const float magn_scale_y = 768.891697;
  71:../LIB_HW/Hw_IMU.c **** const float magn_scale_z = 850.038313;
  72:../LIB_HW/Hw_IMU.c **** */
  73:../LIB_HW/Hw_IMU.c **** 
  74:../LIB_HW/Hw_IMU.c **** const int acc_off_x = 342;
  75:../LIB_HW/Hw_IMU.c **** const int acc_off_y = -168;
  76:../LIB_HW/Hw_IMU.c **** const int acc_off_z = -2487;
  77:../LIB_HW/Hw_IMU.c **** const float acc_scale_x = 14398.798858;
  78:../LIB_HW/Hw_IMU.c **** const float acc_scale_y = 16412.149985;
  79:../LIB_HW/Hw_IMU.c **** const float acc_scale_z = 17198.799846;
  80:../LIB_HW/Hw_IMU.c **** 
  81:../LIB_HW/Hw_IMU.c **** const int magn_off_x = -87;
  82:../LIB_HW/Hw_IMU.c **** const int magn_off_y = -216;
  83:../LIB_HW/Hw_IMU.c **** const int magn_off_z = -156;
  84:../LIB_HW/Hw_IMU.c **** const float magn_scale_x = 548.279660;
  85:../LIB_HW/Hw_IMU.c **** const float magn_scale_y = 927.753161;
  86:../LIB_HW/Hw_IMU.c **** const float magn_scale_z = 1053.126182;
  87:../LIB_HW/Hw_IMU.c **** 
  88:../LIB_HW/Hw_IMU.c **** 
  89:../LIB_HW/Hw_IMU.c **** #ifndef CALIBRATION_H
  90:../LIB_HW/Hw_IMU.c **** int16_t 		acc_off_x, acc_off_y, acc_off_z, magn_off_x, magn_off_y, magn_off_z;
  91:../LIB_HW/Hw_IMU.c **** float 			acc_scale_x, acc_scale_y, acc_scale_z, magn_scale_x, magn_scale_y, magn_scale_z;
  92:../LIB_HW/Hw_IMU.c **** #endif
  93:../LIB_HW/Hw_IMU.c **** 
  94:../LIB_HW/Hw_IMU.c **** 
  95:../LIB_HW/Hw_IMU.c **** float invSqrt(float number);
  96:../LIB_HW/Hw_IMU.c **** void arr3_rad_to_deg(float * arr);
  97:../LIB_HW/Hw_IMU.c **** 
  98:../LIB_HW/Hw_IMU.c **** 
  99:../LIB_HW/Hw_IMU.c **** void Hw_IMU_FreeIMU_Init( void );
 100:../LIB_HW/Hw_IMU.c **** u16  Hw_IMU_FreeIMU_getRawValues(int * raw_values);
 101:../LIB_HW/Hw_IMU.c **** u16  Hw_IMU_FreeIMU_getValues(float * values);
 102:../LIB_HW/Hw_IMU.c **** u16  Hw_IMU_FreeIMU_zeroGyro( void );
 103:../LIB_HW/Hw_IMU.c **** void Hw_IMU_FreeIMU_AHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx
 104:../LIB_HW/Hw_IMU.c **** 
 105:../LIB_HW/Hw_IMU.c **** u16  Hw_IMU_FreeIMU_getQ(float * q);
 106:../LIB_HW/Hw_IMU.c **** u16  Hw_IMU_FreeIMU_getEulerRad(float * angles);
 107:../LIB_HW/Hw_IMU.c **** u16  Hw_IMU_FreeIMU_getYawPitchRollRad(float * ypr);
 108:../LIB_HW/Hw_IMU.c **** u16  Hw_IMU_FreeIMU_getYawPitchRoll(float * ypr);
 109:../LIB_HW/Hw_IMU.c **** 
 110:../LIB_HW/Hw_IMU.c **** 
 111:../LIB_HW/Hw_IMU.c **** 
 112:../LIB_HW/Hw_IMU.c **** /*---------------------------------------------------------------------------
 113:../LIB_HW/Hw_IMU.c ****      TITLE   : Hw_IMU_Init
 114:../LIB_HW/Hw_IMU.c ****      WORK    : 
 115:../LIB_HW/Hw_IMU.c ****      ARG     : void
 116:../LIB_HW/Hw_IMU.c ****      RET     : void
 117:../LIB_HW/Hw_IMU.c **** ---------------------------------------------------------------------------*/
 118:../LIB_HW/Hw_IMU.c **** u16 Hw_IMU_Init( void )
 119:../LIB_HW/Hw_IMU.c **** {
 120:../LIB_HW/Hw_IMU.c **** 	u16 Ret = 0;
 121:../LIB_HW/Hw_IMU.c **** 
 122:../LIB_HW/Hw_IMU.c **** 
 123:../LIB_HW/Hw_IMU.c **** 	Ret = Hw_MPU6050_Init();
 124:../LIB_HW/Hw_IMU.c **** 
 125:../LIB_HW/Hw_IMU.c **** 	if( Ret != 0 )
 126:../LIB_HW/Hw_IMU.c **** 	{
 127:../LIB_HW/Hw_IMU.c **** 		Lb_printf("Hw_MPU6050_Init Ret : 0x%x\n", Ret);
 128:../LIB_HW/Hw_IMU.c **** 		return Ret;
 129:../LIB_HW/Hw_IMU.c **** 	} 
 130:../LIB_HW/Hw_IMU.c **** 
 131:../LIB_HW/Hw_IMU.c **** 
 132:../LIB_HW/Hw_IMU.c **** 	Ret = Hw_HMC5883_Init();
 133:../LIB_HW/Hw_IMU.c **** 
 134:../LIB_HW/Hw_IMU.c **** 	if( Ret != 0 )
 135:../LIB_HW/Hw_IMU.c **** 	{
 136:../LIB_HW/Hw_IMU.c **** 		Lb_printf("Hw_HMC5883_Init Ret : 0x%x\n", Ret);
 137:../LIB_HW/Hw_IMU.c **** 		return Ret;
 138:../LIB_HW/Hw_IMU.c **** 	} 
 139:../LIB_HW/Hw_IMU.c **** 
 140:../LIB_HW/Hw_IMU.c **** 	Hw_IMU_FreeIMU_Init();
 141:../LIB_HW/Hw_IMU.c **** 	//Hw_MultiIMU_Init();
 142:../LIB_HW/Hw_IMU.c **** 
 143:../LIB_HW/Hw_IMU.c **** 	return Ret;
 144:../LIB_HW/Hw_IMU.c **** }
 145:../LIB_HW/Hw_IMU.c **** 
 146:../LIB_HW/Hw_IMU.c **** 
 147:../LIB_HW/Hw_IMU.c **** 
 148:../LIB_HW/Hw_IMU.c **** 
 149:../LIB_HW/Hw_IMU.c **** 
 150:../LIB_HW/Hw_IMU.c **** /*---------------------------------------------------------------------------
 151:../LIB_HW/Hw_IMU.c ****      TITLE   : Hw_IMU_FreeIMU_Init
 152:../LIB_HW/Hw_IMU.c ****      WORK    : 
 153:../LIB_HW/Hw_IMU.c ****      ARG     : void
 154:../LIB_HW/Hw_IMU.c ****      RET     : void
 155:../LIB_HW/Hw_IMU.c **** ---------------------------------------------------------------------------*/
 156:../LIB_HW/Hw_IMU.c **** void Hw_IMU_FreeIMU_Init( void )
 157:../LIB_HW/Hw_IMU.c **** {
  27              		.loc 1 157 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 2DE9F00F 		push	{r4, r5, r6, r7, r8, r9, sl, fp}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 32
  35              		.cfi_offset 4, -32
  36              		.cfi_offset 5, -28
  37              		.cfi_offset 6, -24
  38              		.cfi_offset 7, -20
  39              		.cfi_offset 8, -16
  40              		.cfi_offset 9, -12
  41              		.cfi_offset 10, -8
  42              		.cfi_offset 11, -4
 158:../LIB_HW/Hw_IMU.c **** 	// initialize quaternion
 159:../LIB_HW/Hw_IMU.c **** 	q0 = 1.0f;
 160:../LIB_HW/Hw_IMU.c **** 	q1 = 0.0f;
 161:../LIB_HW/Hw_IMU.c **** 	q2 = 0.0f;
 162:../LIB_HW/Hw_IMU.c **** 	q3 = 0.0f;
  43              		.loc 1 162 0
  44 0004 40F20006 		movw	r6, #:lower16:q3
 157:../LIB_HW/Hw_IMU.c **** {
  45              		.loc 1 157 0
  46 0008 88B0     		sub	sp, sp, #32
  47              	.LCFI1:
  48              		.cfi_def_cfa_offset 64
  49              		.loc 1 162 0
  50 000a C0F20006 		movt	r6, #:upper16:q3
  51 000e 0196     		str	r6, [sp, #4]
 163:../LIB_HW/Hw_IMU.c **** 	exInt = 0.0;
 164:../LIB_HW/Hw_IMU.c **** 	eyInt = 0.0;
 165:../LIB_HW/Hw_IMU.c **** 	ezInt = 0.0;
 166:../LIB_HW/Hw_IMU.c **** 	twoKp = twoKpDef;
 167:../LIB_HW/Hw_IMU.c **** 	twoKi = twoKiDef;
  52              		.loc 1 167 0
  53 0010 40F20006 		movw	r6, #:lower16:twoKi
  54 0014 C0F20006 		movt	r6, #:upper16:twoKi
  55 0018 0296     		str	r6, [sp, #8]
 168:../LIB_HW/Hw_IMU.c **** 	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
  56              		.loc 1 168 0
  57 001a 40F20006 		movw	r6, #:lower16:integralFBx
  58 001e C0F20006 		movt	r6, #:upper16:integralFBx
  59 0022 0396     		str	r6, [sp, #12]
  60 0024 40F20006 		movw	r6, #:lower16:integralFBy
  61 0028 C0F20006 		movt	r6, #:upper16:integralFBy
  62 002c 0496     		str	r6, [sp, #16]
  63 002e 40F20006 		movw	r6, #:lower16:integralFBz
  64 0032 C0F20006 		movt	r6, #:upper16:integralFBz
  65 0036 0596     		str	r6, [sp, #20]
 169:../LIB_HW/Hw_IMU.c **** 	lastUpdate = 0;
 170:../LIB_HW/Hw_IMU.c **** 	now = 0;
 171:../LIB_HW/Hw_IMU.c **** 
 172:../LIB_HW/Hw_IMU.c **** 	gyro_off_x = 0;
  66              		.loc 1 172 0
  67 0038 40F20006 		movw	r6, #:lower16:gyro_off_x
  68 003c C0F20006 		movt	r6, #:upper16:gyro_off_x
  69 0040 0696     		str	r6, [sp, #24]
 173:../LIB_HW/Hw_IMU.c **** 	gyro_off_y = 0;
  70              		.loc 1 173 0
  71 0042 40F20006 		movw	r6, #:lower16:gyro_off_y
  72 0046 C0F20006 		movt	r6, #:upper16:gyro_off_y
 159:../LIB_HW/Hw_IMU.c **** 	q0 = 1.0f;
  73              		.loc 1 159 0
  74 004a 40F2000B 		movw	fp, #:lower16:q0
  75              		.loc 1 173 0
  76 004e 0796     		str	r6, [sp, #28]
 169:../LIB_HW/Hw_IMU.c **** 	lastUpdate = 0;
  77              		.loc 1 169 0
  78 0050 40F20005 		movw	r5, #:lower16:lastUpdate
 159:../LIB_HW/Hw_IMU.c **** 	q0 = 1.0f;
  79              		.loc 1 159 0
  80 0054 4FF07E56 		mov	r6, #1065353216
  81 0058 C0F2000B 		movt	fp, #:upper16:q0
  82 005c CBF80060 		str	r6, [fp, #0]	@ float
 169:../LIB_HW/Hw_IMU.c **** 	lastUpdate = 0;
  83              		.loc 1 169 0
  84 0060 0022     		movs	r2, #0
  85 0062 C0F20005 		movt	r5, #:upper16:lastUpdate
 162:../LIB_HW/Hw_IMU.c **** 	q3 = 0.0f;
  86              		.loc 1 162 0
  87 0066 019E     		ldr	r6, [sp, #4]
 160:../LIB_HW/Hw_IMU.c **** 	q1 = 0.0f;
  88              		.loc 1 160 0
  89 0068 40F20009 		movw	r9, #:lower16:q1
 161:../LIB_HW/Hw_IMU.c **** 	q2 = 0.0f;
  90              		.loc 1 161 0
  91 006c 40F2000C 		movw	ip, #:lower16:q2
 166:../LIB_HW/Hw_IMU.c **** 	twoKp = twoKpDef;
  92              		.loc 1 166 0
  93 0070 40F20004 		movw	r4, #:lower16:twoKp
 170:../LIB_HW/Hw_IMU.c **** 	now = 0;
  94              		.loc 1 170 0
  95 0074 40F20000 		movw	r0, #:lower16:now
 160:../LIB_HW/Hw_IMU.c **** 	q1 = 0.0f;
  96              		.loc 1 160 0
  97 0078 0023     		movs	r3, #0
 166:../LIB_HW/Hw_IMU.c **** 	twoKp = twoKpDef;
  98              		.loc 1 166 0
  99 007a C0F20004 		movt	r4, #:upper16:twoKp
 170:../LIB_HW/Hw_IMU.c **** 	now = 0;
 100              		.loc 1 170 0
 101 007e C0F20000 		movt	r0, #:upper16:now
 169:../LIB_HW/Hw_IMU.c **** 	lastUpdate = 0;
 102              		.loc 1 169 0
 103 0082 2A80     		strh	r2, [r5, #0]	@ movhi
 160:../LIB_HW/Hw_IMU.c **** 	q1 = 0.0f;
 104              		.loc 1 160 0
 105 0084 C0F20009 		movt	r9, #:upper16:q1
 166:../LIB_HW/Hw_IMU.c **** 	twoKp = twoKpDef;
 106              		.loc 1 166 0
 107 0088 4FF07E55 		mov	r5, #1065353216
 161:../LIB_HW/Hw_IMU.c **** 	q2 = 0.0f;
 108              		.loc 1 161 0
 109 008c C0F2000C 		movt	ip, #:upper16:q2
 160:../LIB_HW/Hw_IMU.c **** 	q1 = 0.0f;
 110              		.loc 1 160 0
 111 0090 C9F80030 		str	r3, [r9, #0]	@ float
 170:../LIB_HW/Hw_IMU.c **** 	now = 0;
 112              		.loc 1 170 0
 113 0094 0280     		strh	r2, [r0, #0]	@ movhi
 161:../LIB_HW/Hw_IMU.c **** 	q2 = 0.0f;
 114              		.loc 1 161 0
 115 0096 CCF80030 		str	r3, [ip, #0]	@ float
 174:../LIB_HW/Hw_IMU.c **** 	gyro_off_z = 0;
 116              		.loc 1 174 0
 117 009a 40F20001 		movw	r1, #:lower16:gyro_off_z
 162:../LIB_HW/Hw_IMU.c **** 	q3 = 0.0f;
 118              		.loc 1 162 0
 119 009e 3360     		str	r3, [r6, #0]	@ float
 167:../LIB_HW/Hw_IMU.c **** 	twoKi = twoKiDef;
 120              		.loc 1 167 0
 121 00a0 0298     		ldr	r0, [sp, #8]
 166:../LIB_HW/Hw_IMU.c **** 	twoKp = twoKpDef;
 122              		.loc 1 166 0
 123 00a2 2560     		str	r5, [r4, #0]	@ float
 172:../LIB_HW/Hw_IMU.c **** 	gyro_off_x = 0;
 124              		.loc 1 172 0
 125 00a4 069E     		ldr	r6, [sp, #24]
 167:../LIB_HW/Hw_IMU.c **** 	twoKi = twoKiDef;
 126              		.loc 1 167 0
 127 00a6 4CF6CD44 		movw	r4, #52429
 128              		.loc 1 174 0
 129 00aa C0F20001 		movt	r1, #:upper16:gyro_off_z
 167:../LIB_HW/Hw_IMU.c **** 	twoKi = twoKiDef;
 130              		.loc 1 167 0
 131 00ae C3F64C64 		movt	r4, 15948
 132 00b2 0460     		str	r4, [r0, #0]	@ float
 172:../LIB_HW/Hw_IMU.c **** 	gyro_off_x = 0;
 133              		.loc 1 172 0
 134 00b4 3280     		strh	r2, [r6, #0]	@ movhi
 135              		.loc 1 174 0
 136 00b6 0A80     		strh	r2, [r1, #0]	@ movhi
 163:../LIB_HW/Hw_IMU.c **** 	exInt = 0.0;
 137              		.loc 1 163 0
 138 00b8 40F2000A 		movw	sl, #:lower16:exInt
 164:../LIB_HW/Hw_IMU.c **** 	eyInt = 0.0;
 139              		.loc 1 164 0
 140 00bc 40F20008 		movw	r8, #:lower16:eyInt
 165:../LIB_HW/Hw_IMU.c **** 	ezInt = 0.0;
 141              		.loc 1 165 0
 142 00c0 40F20007 		movw	r7, #:lower16:ezInt
 168:../LIB_HW/Hw_IMU.c **** 	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
 143              		.loc 1 168 0
 144 00c4 039C     		ldr	r4, [sp, #12]
 173:../LIB_HW/Hw_IMU.c **** 	gyro_off_y = 0;
 145              		.loc 1 173 0
 146 00c6 079D     		ldr	r5, [sp, #28]
 168:../LIB_HW/Hw_IMU.c **** 	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
 147              		.loc 1 168 0
 148 00c8 049E     		ldr	r6, [sp, #16]
 149 00ca 0599     		ldr	r1, [sp, #20]
 163:../LIB_HW/Hw_IMU.c **** 	exInt = 0.0;
 150              		.loc 1 163 0
 151 00cc C0F2000A 		movt	sl, #:upper16:exInt
 164:../LIB_HW/Hw_IMU.c **** 	eyInt = 0.0;
 152              		.loc 1 164 0
 153 00d0 C0F20008 		movt	r8, #:upper16:eyInt
 165:../LIB_HW/Hw_IMU.c **** 	ezInt = 0.0;
 154              		.loc 1 165 0
 155 00d4 C0F20007 		movt	r7, #:upper16:ezInt
 168:../LIB_HW/Hw_IMU.c **** 	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
 156              		.loc 1 168 0
 157 00d8 2360     		str	r3, [r4, #0]	@ float
 163:../LIB_HW/Hw_IMU.c **** 	exInt = 0.0;
 158              		.loc 1 163 0
 159 00da CAF80030 		str	r3, [sl, #0]	@ float
 168:../LIB_HW/Hw_IMU.c **** 	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
 160              		.loc 1 168 0
 161 00de 3360     		str	r3, [r6, #0]	@ float
 164:../LIB_HW/Hw_IMU.c **** 	eyInt = 0.0;
 162              		.loc 1 164 0
 163 00e0 C8F80030 		str	r3, [r8, #0]	@ float
 165:../LIB_HW/Hw_IMU.c **** 	ezInt = 0.0;
 164              		.loc 1 165 0
 165 00e4 3B60     		str	r3, [r7, #0]	@ float
 173:../LIB_HW/Hw_IMU.c **** 	gyro_off_y = 0;
 166              		.loc 1 173 0
 167 00e6 2A80     		strh	r2, [r5, #0]	@ movhi
 168:../LIB_HW/Hw_IMU.c **** 	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
 168              		.loc 1 168 0
 169 00e8 0B60     		str	r3, [r1, #0]	@ float
 175:../LIB_HW/Hw_IMU.c **** 
 176:../LIB_HW/Hw_IMU.c **** 
 177:../LIB_HW/Hw_IMU.c **** #ifndef CALIBRATION_H
 178:../LIB_HW/Hw_IMU.c ****     acc_off_x = 0;
 179:../LIB_HW/Hw_IMU.c ****     acc_off_y = 0;
 180:../LIB_HW/Hw_IMU.c ****     acc_off_z = 0;
 181:../LIB_HW/Hw_IMU.c ****     acc_scale_x = 1;
 182:../LIB_HW/Hw_IMU.c ****     acc_scale_y = 1;
 183:../LIB_HW/Hw_IMU.c ****     acc_scale_z = 1;
 184:../LIB_HW/Hw_IMU.c **** 
 185:../LIB_HW/Hw_IMU.c ****     magn_off_x = 0;
 186:../LIB_HW/Hw_IMU.c ****     magn_off_y = 0;
 187:../LIB_HW/Hw_IMU.c ****     magn_off_z = 0;
 188:../LIB_HW/Hw_IMU.c ****     magn_scale_x = 1;
 189:../LIB_HW/Hw_IMU.c ****     magn_scale_y = 1;
 190:../LIB_HW/Hw_IMU.c ****     magn_scale_z = 1;	
 191:../LIB_HW/Hw_IMU.c **** #endif
 192:../LIB_HW/Hw_IMU.c **** 
 193:../LIB_HW/Hw_IMU.c **** }
 170              		.loc 1 193 0
 171 00ea 08B0     		add	sp, sp, #32
 172 00ec BDE8F00F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp}
 173 00f0 7047     		bx	lr
 174              		.cfi_endproc
 175              	.LFE1:
 177 00f2 00BF     		.section	.text.Hw_IMU_Init,"ax",%progbits
 178              		.align	2
 179              		.global	Hw_IMU_Init
 180              		.thumb
 181              		.thumb_func
 183              	Hw_IMU_Init:
 184              	.LFB0:
 119:../LIB_HW/Hw_IMU.c **** {
 185              		.loc 1 119 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              	.LVL0:
 190 0000 10B5     		push	{r4, lr}
 191              	.LCFI2:
 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 4, -8
 194              		.cfi_offset 14, -4
 123:../LIB_HW/Hw_IMU.c **** 	Ret = Hw_MPU6050_Init();
 195              		.loc 1 123 0
 196 0002 0C4B     		ldr	r3, .L9
 197 0004 9847     		blx	r3
 198              	.LVL1:
 125:../LIB_HW/Hw_IMU.c **** 	if( Ret != 0 )
 199              		.loc 1 125 0
 200 0006 0446     		mov	r4, r0
 201 0008 68B9     		cbnz	r0, .L7
 132:../LIB_HW/Hw_IMU.c **** 	Ret = Hw_HMC5883_Init();
 202              		.loc 1 132 0
 203 000a 0B48     		ldr	r0, .L9+4
 204              	.LVL2:
 205 000c 8047     		blx	r0
 206              	.LVL3:
 134:../LIB_HW/Hw_IMU.c **** 	if( Ret != 0 )
 207              		.loc 1 134 0
 208 000e 0446     		mov	r4, r0
 209 0010 18B9     		cbnz	r0, .L8
 140:../LIB_HW/Hw_IMU.c **** 	Hw_IMU_FreeIMU_Init();
 210              		.loc 1 140 0
 211 0012 0A49     		ldr	r1, .L9+8
 212 0014 8847     		blx	r1
 213              	.LVL4:
 144:../LIB_HW/Hw_IMU.c **** }
 214              		.loc 1 144 0
 215 0016 2046     		mov	r0, r4
 216 0018 10BD     		pop	{r4, pc}
 217              	.LVL5:
 218              	.L8:
 136:../LIB_HW/Hw_IMU.c **** 		Lb_printf("Hw_HMC5883_Init Ret : 0x%x\n", Ret);
 219              		.loc 1 136 0
 220 001a 0948     		ldr	r0, .L9+12
 221              	.LVL6:
 222 001c 2146     		mov	r1, r4
 223 001e 094A     		ldr	r2, .L9+16
 224 0020 9047     		blx	r2
 225              	.LVL7:
 144:../LIB_HW/Hw_IMU.c **** }
 226              		.loc 1 144 0
 227 0022 2046     		mov	r0, r4
 228 0024 10BD     		pop	{r4, pc}
 229              	.LVL8:
 230              	.L7:
 127:../LIB_HW/Hw_IMU.c **** 		Lb_printf("Hw_MPU6050_Init Ret : 0x%x\n", Ret);
 231              		.loc 1 127 0
 232 0026 0848     		ldr	r0, .L9+20
 233              	.LVL9:
 234 0028 2146     		mov	r1, r4
 235 002a 064B     		ldr	r3, .L9+16
 236 002c 9847     		blx	r3
 237              	.LVL10:
 144:../LIB_HW/Hw_IMU.c **** }
 238              		.loc 1 144 0
 239 002e 2046     		mov	r0, r4
 240 0030 10BD     		pop	{r4, pc}
 241              	.L10:
 242 0032 00BF     		.align	2
 243              	.L9:
 244 0034 00000000 		.word	Hw_MPU6050_Init
 245 0038 00000000 		.word	Hw_HMC5883_Init
 246 003c 00000000 		.word	Hw_IMU_FreeIMU_Init
 247 0040 1C000000 		.word	.LC1
 248 0044 00000000 		.word	Lb_printf
 249 0048 00000000 		.word	.LC0
 250              		.cfi_endproc
 251              	.LFE0:
 253              		.global	__aeabi_i2d
 254              		.global	__aeabi_dadd
 255              		.global	__aeabi_dmul
 256              		.global	__aeabi_d2f
 257              		.global	__aeabi_f2iz
 258              		.section	.text.Hw_IMU_GetData,"ax",%progbits
 259              		.align	2
 260              		.global	Hw_IMU_GetData
 261              		.thumb
 262              		.thumb_func
 264              	Hw_IMU_GetData:
 265              	.LFB4:
 194:../LIB_HW/Hw_IMU.c **** 
 195:../LIB_HW/Hw_IMU.c **** 
 196:../LIB_HW/Hw_IMU.c **** 
 197:../LIB_HW/Hw_IMU.c **** 
 198:../LIB_HW/Hw_IMU.c **** /*---------------------------------------------------------------------------
 199:../LIB_HW/Hw_IMU.c ****      TITLE   : Hw_IMU_Reset
 200:../LIB_HW/Hw_IMU.c ****      WORK    : 
 201:../LIB_HW/Hw_IMU.c ****      ARG     : void
 202:../LIB_HW/Hw_IMU.c ****      RET     : void
 203:../LIB_HW/Hw_IMU.c **** ---------------------------------------------------------------------------*/
 204:../LIB_HW/Hw_IMU.c **** void Hw_IMU_Reset( HW_IMU_DATA_OBJ *ptr_data )
 205:../LIB_HW/Hw_IMU.c **** {
 206:../LIB_HW/Hw_IMU.c **** 	u16 Err;
 207:../LIB_HW/Hw_IMU.c **** 
 208:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_GetData( ptr_data );
 209:../LIB_HW/Hw_IMU.c **** 
 210:../LIB_HW/Hw_IMU.c **** 	if( Err == 0 )
 211:../LIB_HW/Hw_IMU.c **** 	{
 212:../LIB_HW/Hw_IMU.c **** 		ptr_data->X_Angle = ptr_data->X_AccAngle;
 213:../LIB_HW/Hw_IMU.c **** 		ptr_data->Y_Angle = ptr_data->Y_AccAngle;
 214:../LIB_HW/Hw_IMU.c **** 	}
 215:../LIB_HW/Hw_IMU.c **** }
 216:../LIB_HW/Hw_IMU.c **** 
 217:../LIB_HW/Hw_IMU.c **** 
 218:../LIB_HW/Hw_IMU.c **** 
 219:../LIB_HW/Hw_IMU.c **** 
 220:../LIB_HW/Hw_IMU.c **** 
 221:../LIB_HW/Hw_IMU.c **** /*---------------------------------------------------------------------------
 222:../LIB_HW/Hw_IMU.c ****      TITLE   : Hw_IMU_Update
 223:../LIB_HW/Hw_IMU.c ****      WORK    : 
 224:../LIB_HW/Hw_IMU.c ****      ARG     : void
 225:../LIB_HW/Hw_IMU.c ****      RET     : void
 226:../LIB_HW/Hw_IMU.c **** ---------------------------------------------------------------------------*/
 227:../LIB_HW/Hw_IMU.c **** u16 Hw_IMU_Update( HW_IMU_DATA_OBJ *ptr_data, u32 dt )
 228:../LIB_HW/Hw_IMU.c **** {
 229:../LIB_HW/Hw_IMU.c **** 	u16 Err;
 230:../LIB_HW/Hw_IMU.c **** 	f32 GyroRateX;
 231:../LIB_HW/Hw_IMU.c **** 	f32 GyroRateY;
 232:../LIB_HW/Hw_IMU.c **** 	f32 Q[4];
 233:../LIB_HW/Hw_IMU.c **** 	s16 raw_value[9];
 234:../LIB_HW/Hw_IMU.c **** 	f32 dt_sec;
 235:../LIB_HW/Hw_IMU.c **** 	f32 ypr[3];
 236:../LIB_HW/Hw_IMU.c **** 	f32 yprrad[3];
 237:../LIB_HW/Hw_IMU.c **** 	u32 i;
 238:../LIB_HW/Hw_IMU.c **** 
 239:../LIB_HW/Hw_IMU.c **** 
 240:../LIB_HW/Hw_IMU.c ****     int16_t head;
 241:../LIB_HW/Hw_IMU.c **** 
 242:../LIB_HW/Hw_IMU.c ****     float cosineRoll;
 243:../LIB_HW/Hw_IMU.c ****     float sineRoll;
 244:../LIB_HW/Hw_IMU.c ****     float cosinePitch;
 245:../LIB_HW/Hw_IMU.c ****     float sinePitch;
 246:../LIB_HW/Hw_IMU.c ****     float Xh;
 247:../LIB_HW/Hw_IMU.c ****     float Yh;
 248:../LIB_HW/Hw_IMU.c ****     float hd;
 249:../LIB_HW/Hw_IMU.c **** 
 250:../LIB_HW/Hw_IMU.c **** 	float dv;
 251:../LIB_HW/Hw_IMU.c **** 	float mx,my,mz;
 252:../LIB_HW/Hw_IMU.c **** 
 253:../LIB_HW/Hw_IMU.c ****     int16_t magneticDeclination = 0;
 254:../LIB_HW/Hw_IMU.c **** 
 255:../LIB_HW/Hw_IMU.c **** 
 256:../LIB_HW/Hw_IMU.c ****     #if 0
 257:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_FreeIMU_getYawPitchRoll( ypr );
 258:../LIB_HW/Hw_IMU.c **** 
 259:../LIB_HW/Hw_IMU.c **** 	if( Err == 0 )
 260:../LIB_HW/Hw_IMU.c **** 	{
 261:../LIB_HW/Hw_IMU.c **** 		Hw_IMU_SaveData.X_Angle = ypr[2];
 262:../LIB_HW/Hw_IMU.c **** 		Hw_IMU_SaveData.Y_Angle = ypr[1];
 263:../LIB_HW/Hw_IMU.c **** 		Hw_IMU_SaveData.Z_Angle = ypr[0];
 264:../LIB_HW/Hw_IMU.c **** 
 265:../LIB_HW/Hw_IMU.c **** 		*ptr_data = Hw_IMU_SaveData;
 266:../LIB_HW/Hw_IMU.c **** 	}
 267:../LIB_HW/Hw_IMU.c **** 	#endif
 268:../LIB_HW/Hw_IMU.c **** 
 269:../LIB_HW/Hw_IMU.c **** 	#if 1
 270:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_GetData( ptr_data );
 271:../LIB_HW/Hw_IMU.c **** 
 272:../LIB_HW/Hw_IMU.c **** 	if( Err == 0 )
 273:../LIB_HW/Hw_IMU.c **** 	{
 274:../LIB_HW/Hw_IMU.c **** 		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
 275:../LIB_HW/Hw_IMU.c **** 		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;
 276:../LIB_HW/Hw_IMU.c **** 
 277:../LIB_HW/Hw_IMU.c **** 		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->
 278:../LIB_HW/Hw_IMU.c ****   		ptr_data->Y_Angle = (0.93 * (ptr_data->Y_Angle+(GyroRateY*(f32)(dt)/1000)) ) + (0.07 * ptr_data
 279:../LIB_HW/Hw_IMU.c **** 		dt_sec = ((float)dt / 1000.);
 280:../LIB_HW/Hw_IMU.c **** 
 281:../LIB_HW/Hw_IMU.c **** 
 282:../LIB_HW/Hw_IMU.c **** 
 283:../LIB_HW/Hw_IMU.c **** 	    cosineRoll 	= cosf(ptr_data->X_Angle * M_PI / 180.);
 284:../LIB_HW/Hw_IMU.c **** 	    sineRoll 	= sinf(ptr_data->X_Angle * M_PI / 180.);
 285:../LIB_HW/Hw_IMU.c **** 	    cosinePitch = cosf(ptr_data->Y_Angle * M_PI / 180.);
 286:../LIB_HW/Hw_IMU.c **** 	    sinePitch 	= sinf(ptr_data->Y_Angle * M_PI / 180.);
 287:../LIB_HW/Hw_IMU.c **** 
 288:../LIB_HW/Hw_IMU.c **** 	    dv = invSqrt( ptr_data->X_Compass*ptr_data->X_Compass + ptr_data->Y_Compass*ptr_data->Y_Compas
 289:../LIB_HW/Hw_IMU.c **** 
 290:../LIB_HW/Hw_IMU.c **** 	    mx = dv*ptr_data->X_Compass;
 291:../LIB_HW/Hw_IMU.c **** 	    my = dv*ptr_data->Y_Compass;
 292:../LIB_HW/Hw_IMU.c **** 	    mz = dv*ptr_data->Z_Compass;
 293:../LIB_HW/Hw_IMU.c **** 
 294:../LIB_HW/Hw_IMU.c **** 
 295:../LIB_HW/Hw_IMU.c **** 	    //Xh = mx * cosinePitch + my * sineRoll * sinePitch + mz * sinePitch * cosineRoll;
 296:../LIB_HW/Hw_IMU.c **** 	    //Yh = my * cosineRoll  - mz * sineRoll;
 297:../LIB_HW/Hw_IMU.c **** 	    Xh = mx + my + mz;
 298:../LIB_HW/Hw_IMU.c **** 	    Yh = my - mz;
 299:../LIB_HW/Hw_IMU.c **** 
 300:../LIB_HW/Hw_IMU.c **** 	    //hd = (atan2f(Yh, Xh) * 180.0f / M_PI);
 301:../LIB_HW/Hw_IMU.c **** 		hd = (atan2f(mx, my) * 180.0f / M_PI);
 302:../LIB_HW/Hw_IMU.c **** 	    	    
 303:../LIB_HW/Hw_IMU.c **** 
 304:../LIB_HW/Hw_IMU.c **** 	    head = hd;
 305:../LIB_HW/Hw_IMU.c **** 	    if (head < 0)
 306:../LIB_HW/Hw_IMU.c **** 	    {
 307:../LIB_HW/Hw_IMU.c **** 	        head += 360;
 308:../LIB_HW/Hw_IMU.c **** 	    }
 309:../LIB_HW/Hw_IMU.c **** 
 310:../LIB_HW/Hw_IMU.c **** 	    Lb_printf("Head : %d  %d %d \n", head, cosineRoll*180./M_PI, sineRoll*180./M_PI);
 311:../LIB_HW/Hw_IMU.c **** 
 312:../LIB_HW/Hw_IMU.c **** 
 313:../LIB_HW/Hw_IMU.c **** 
 314:../LIB_HW/Hw_IMU.c **** 
 315:../LIB_HW/Hw_IMU.c **** 
 316:../LIB_HW/Hw_IMU.c **** 		raw_value[0] = ptr_data->X_Acc;
 317:../LIB_HW/Hw_IMU.c **** 		raw_value[1] = ptr_data->Y_Acc;
 318:../LIB_HW/Hw_IMU.c **** 		raw_value[2] = ptr_data->Z_Acc;
 319:../LIB_HW/Hw_IMU.c **** 
 320:../LIB_HW/Hw_IMU.c **** 		raw_value[3] = ptr_data->X_Gyro;
 321:../LIB_HW/Hw_IMU.c **** 		raw_value[4] = ptr_data->Y_Gyro;
 322:../LIB_HW/Hw_IMU.c **** 		raw_value[5] = ptr_data->Z_Gyro;
 323:../LIB_HW/Hw_IMU.c **** 
 324:../LIB_HW/Hw_IMU.c **** 
 325:../LIB_HW/Hw_IMU.c **** 		//raw_value[6] = (s16)(ptr_data->X_CompassScale + 0.5f);
 326:../LIB_HW/Hw_IMU.c **** 		//raw_value[7] = (s16)(ptr_data->Y_CompassScale + 0.5f);
 327:../LIB_HW/Hw_IMU.c **** 		//raw_value[8] = (s16)(ptr_data->Z_CompassScale + 0.5f);
 328:../LIB_HW/Hw_IMU.c **** 
 329:../LIB_HW/Hw_IMU.c **** 		raw_value[6] = ptr_data->X_Compass;
 330:../LIB_HW/Hw_IMU.c **** 		raw_value[7] = ptr_data->Y_Compass;
 331:../LIB_HW/Hw_IMU.c **** 		raw_value[8] = ptr_data->Z_Compass;
 332:../LIB_HW/Hw_IMU.c **** 
 333:../LIB_HW/Hw_IMU.c **** 		/*
 334:../LIB_HW/Hw_IMU.c **** 		for( i=0; i<9; i++ )
 335:../LIB_HW/Hw_IMU.c **** 		{
 336:../LIB_HW/Hw_IMU.c **** 			raw_value[i] = 0;
 337:../LIB_HW/Hw_IMU.c **** 		}
 338:../LIB_HW/Hw_IMU.c **** 		raw_value[0] = ptr_data->X_Acc;
 339:../LIB_HW/Hw_IMU.c **** 		raw_value[1] = ptr_data->Y_Acc;
 340:../LIB_HW/Hw_IMU.c **** 		raw_value[2] = ptr_data->Z_Acc;
 341:../LIB_HW/Hw_IMU.c **** 
 342:../LIB_HW/Hw_IMU.c **** 		raw_value[3] = 0;
 343:../LIB_HW/Hw_IMU.c **** 		raw_value[4] = 0;
 344:../LIB_HW/Hw_IMU.c **** 		raw_value[5] = ptr_data->Z_Gyro;
 345:../LIB_HW/Hw_IMU.c **** 		*/
 346:../LIB_HW/Hw_IMU.c **** 
 347:../LIB_HW/Hw_IMU.c **** 	}
 348:../LIB_HW/Hw_IMU.c **** 	#endif
 349:../LIB_HW/Hw_IMU.c **** 
 350:../LIB_HW/Hw_IMU.c **** 	return Err;
 351:../LIB_HW/Hw_IMU.c **** }
 352:../LIB_HW/Hw_IMU.c **** 
 353:../LIB_HW/Hw_IMU.c **** 
 354:../LIB_HW/Hw_IMU.c **** 
 355:../LIB_HW/Hw_IMU.c **** 
 356:../LIB_HW/Hw_IMU.c **** 
 357:../LIB_HW/Hw_IMU.c **** /*---------------------------------------------------------------------------
 358:../LIB_HW/Hw_IMU.c ****      TITLE   : Hw_IMU_GetData
 359:../LIB_HW/Hw_IMU.c ****      WORK    : 
 360:../LIB_HW/Hw_IMU.c ****      ARG     : void
 361:../LIB_HW/Hw_IMU.c ****      RET     : void
 362:../LIB_HW/Hw_IMU.c **** ---------------------------------------------------------------------------*/
 363:../LIB_HW/Hw_IMU.c **** u16 Hw_IMU_GetData( HW_IMU_DATA_OBJ *ptr_data )
 364:../LIB_HW/Hw_IMU.c **** {
 266              		.loc 1 364 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 48
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 270              	.LVL11:
 271 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 272              	.LCFI3:
 273              		.cfi_def_cfa_offset 36
 274              		.cfi_offset 4, -36
 275              		.cfi_offset 5, -32
 276              		.cfi_offset 6, -28
 277              		.cfi_offset 7, -24
 278              		.cfi_offset 8, -20
 279              		.cfi_offset 9, -16
 280              		.cfi_offset 10, -12
 281              		.cfi_offset 11, -8
 282              		.cfi_offset 14, -4
 365:../LIB_HW/Hw_IMU.c **** 	u16 Err = 0;
 366:../LIB_HW/Hw_IMU.c **** 
 367:../LIB_HW/Hw_IMU.c **** 	HW_MPU6050_DATA_OBJ MPU6050_Data;
 368:../LIB_HW/Hw_IMU.c **** 	HW_HMC5883_DATA_OBJ HMC5883_Data;
 369:../LIB_HW/Hw_IMU.c **** 
 370:../LIB_HW/Hw_IMU.c **** 
 371:../LIB_HW/Hw_IMU.c **** 	ptr_data->Enable_Acc     = FALSE;
 283              		.loc 1 371 0
 284 0004 4FF00008 		mov	r8, #0
 364:../LIB_HW/Hw_IMU.c **** {
 285              		.loc 1 364 0
 286 0008 8DB0     		sub	sp, sp, #52
 287              	.LCFI4:
 288              		.cfi_def_cfa_offset 88
 289              		.loc 1 371 0
 290 000a 80F80080 		strb	r8, [r0, #0]
 372:../LIB_HW/Hw_IMU.c **** 	ptr_data->Enable_Temp    = FALSE;
 291              		.loc 1 372 0
 292 000e 80F80180 		strb	r8, [r0, #1]
 373:../LIB_HW/Hw_IMU.c **** 	ptr_data->Enable_Gyro    = FALSE;
 293              		.loc 1 373 0
 294 0012 80F80280 		strb	r8, [r0, #2]
 374:../LIB_HW/Hw_IMU.c **** 	ptr_data->Enable_Compass = FALSE;
 295              		.loc 1 374 0
 296 0016 80F80380 		strb	r8, [r0, #3]
 375:../LIB_HW/Hw_IMU.c **** 
 376:../LIB_HW/Hw_IMU.c **** 
 377:../LIB_HW/Hw_IMU.c **** 	if( Hw_HMC5883_GetEnable() == TRUE )
 297              		.loc 1 377 0
 298 001a 434F     		ldr	r7, .L17+16
 364:../LIB_HW/Hw_IMU.c **** {
 299              		.loc 1 364 0
 300 001c 0646     		mov	r6, r0
 301              		.loc 1 377 0
 302 001e B847     		blx	r7
 303              	.LVL12:
 304 0020 0128     		cmp	r0, #1
 305 0022 0446     		mov	r4, r0
 306 0024 22D0     		beq	.L15
 307              	.LVL13:
 308              	.L12:
 378:../LIB_HW/Hw_IMU.c **** 	{
 379:../LIB_HW/Hw_IMU.c **** 		Err = Hw_MPU6050_GetData( &MPU6050_Data );
 380:../LIB_HW/Hw_IMU.c **** 
 381:../LIB_HW/Hw_IMU.c **** 		if( Err == 0 )
 382:../LIB_HW/Hw_IMU.c **** 		{
 383:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_Acc = MPU6050_Data.X_Acc;
 384:../LIB_HW/Hw_IMU.c **** 			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
 385:../LIB_HW/Hw_IMU.c **** 			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
 386:../LIB_HW/Hw_IMU.c **** 
 387:../LIB_HW/Hw_IMU.c **** 			ptr_data->Temp  = MPU6050_Data.Temp;
 388:../LIB_HW/Hw_IMU.c **** 
 389:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
 390:../LIB_HW/Hw_IMU.c **** 			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
 391:../LIB_HW/Hw_IMU.c **** 			ptr_data->Z_Gyro = MPU6050_Data.Z_Gyro;
 392:../LIB_HW/Hw_IMU.c **** 
 393:../LIB_HW/Hw_IMU.c **** 
 394:../LIB_HW/Hw_IMU.c **** 			ptr_data->Enable_Acc     = TRUE;
 395:../LIB_HW/Hw_IMU.c **** 			ptr_data->Enable_Temp    = TRUE;
 396:../LIB_HW/Hw_IMU.c **** 			ptr_data->Enable_Gyro    = TRUE;	
 397:../LIB_HW/Hw_IMU.c **** 
 398:../LIB_HW/Hw_IMU.c **** 			// 각도 계산 
 399:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_AccAngle = (atan2(MPU6050_Data.Y_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 400:../LIB_HW/Hw_IMU.c **** 			ptr_data->Y_AccAngle = (atan2(MPU6050_Data.X_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 401:../LIB_HW/Hw_IMU.c **** 		}
 402:../LIB_HW/Hw_IMU.c **** 	}
 403:../LIB_HW/Hw_IMU.c **** 
 404:../LIB_HW/Hw_IMU.c **** 
 405:../LIB_HW/Hw_IMU.c **** 
 406:../LIB_HW/Hw_IMU.c **** 	if( Hw_HMC5883_GetEnable() == TRUE )
 309              		.loc 1 406 0
 310 0026 B847     		blx	r7
 311              	.LVL14:
 312 0028 0128     		cmp	r0, #1
 313 002a 0446     		mov	r4, r0
 314 002c 03D0     		beq	.L16
 315              	.LVL15:
 316              	.L13:
 407:../LIB_HW/Hw_IMU.c **** 	{
 408:../LIB_HW/Hw_IMU.c **** 		Err = Hw_HMC5883_GetData( &HMC5883_Data );	
 409:../LIB_HW/Hw_IMU.c **** 
 410:../LIB_HW/Hw_IMU.c **** 		if( Err == 0 )
 411:../LIB_HW/Hw_IMU.c **** 		{
 412:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_Compass = HMC5883_Data.X_Compass;
 413:../LIB_HW/Hw_IMU.c **** 			ptr_data->Y_Compass = HMC5883_Data.Y_Compass;
 414:../LIB_HW/Hw_IMU.c **** 			ptr_data->Z_Compass = HMC5883_Data.Z_Compass;
 415:../LIB_HW/Hw_IMU.c **** 
 416:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_CompassScale = HMC5883_Data.X_CompassScale;
 417:../LIB_HW/Hw_IMU.c **** 			ptr_data->Y_CompassScale = HMC5883_Data.Y_CompassScale;
 418:../LIB_HW/Hw_IMU.c **** 			ptr_data->Z_CompassScale = HMC5883_Data.Z_CompassScale;
 419:../LIB_HW/Hw_IMU.c **** 
 420:../LIB_HW/Hw_IMU.c **** 
 421:../LIB_HW/Hw_IMU.c **** 			ptr_data->Enable_Compass = TRUE;			
 422:../LIB_HW/Hw_IMU.c **** 		}
 423:../LIB_HW/Hw_IMU.c **** 	}
 424:../LIB_HW/Hw_IMU.c **** 
 425:../LIB_HW/Hw_IMU.c **** 
 426:../LIB_HW/Hw_IMU.c **** 	return Err;
 427:../LIB_HW/Hw_IMU.c **** }
 317              		.loc 1 427 0
 318 002e 4046     		mov	r0, r8
 319 0030 0DB0     		add	sp, sp, #52
 320 0032 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 321              	.L16:
 408:../LIB_HW/Hw_IMU.c **** 		Err = Hw_HMC5883_GetData( &HMC5883_Data );	
 322              		.loc 1 408 0
 323 0036 07A8     		add	r0, sp, #28
 324 0038 3C4A     		ldr	r2, .L17+20
 325 003a 9047     		blx	r2
 326              	.LVL16:
 410:../LIB_HW/Hw_IMU.c **** 		if( Err == 0 )
 327              		.loc 1 410 0
 328 003c 8046     		mov	r8, r0
 329 003e 0028     		cmp	r0, #0
 330 0040 F5D1     		bne	.L13
 413:../LIB_HW/Hw_IMU.c **** 			ptr_data->Y_Compass = HMC5883_Data.Y_Compass;
 331              		.loc 1 413 0
 332 0042 BDF81E30 		ldrh	r3, [sp, #30]
 414:../LIB_HW/Hw_IMU.c **** 			ptr_data->Z_Compass = HMC5883_Data.Z_Compass;
 333              		.loc 1 414 0
 334 0046 BDF82010 		ldrh	r1, [sp, #32]
 412:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_Compass = HMC5883_Data.X_Compass;
 335              		.loc 1 412 0
 336 004a BDF81C00 		ldrh	r0, [sp, #28]
 337              	.LVL17:
 416:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_CompassScale = HMC5883_Data.X_CompassScale;
 338              		.loc 1 416 0
 339 004e 384D     		ldr	r5, .L17+24
 413:../LIB_HW/Hw_IMU.c **** 			ptr_data->Y_Compass = HMC5883_Data.Y_Compass;
 340              		.loc 1 413 0
 341 0050 B382     		strh	r3, [r6, #20]	@ movhi
 414:../LIB_HW/Hw_IMU.c **** 			ptr_data->Z_Compass = HMC5883_Data.Z_Compass;
 342              		.loc 1 414 0
 343 0052 F182     		strh	r1, [r6, #22]	@ movhi
 412:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_Compass = HMC5883_Data.X_Compass;
 344              		.loc 1 412 0
 345 0054 7082     		strh	r0, [r6, #18]	@ movhi
 416:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_CompassScale = HMC5883_Data.X_CompassScale;
 346              		.loc 1 416 0
 347 0056 0998     		ldr	r0, [sp, #36]	@ float
 348 0058 A847     		blx	r5
 349              	.LVL18:
 350 005a 3083     		strh	r0, [r6, #24]	@ movhi
 417:../LIB_HW/Hw_IMU.c **** 			ptr_data->Y_CompassScale = HMC5883_Data.Y_CompassScale;
 351              		.loc 1 417 0
 352 005c 0A98     		ldr	r0, [sp, #40]	@ float
 353 005e A847     		blx	r5
 354              	.LVL19:
 355 0060 7083     		strh	r0, [r6, #26]	@ movhi
 418:../LIB_HW/Hw_IMU.c **** 			ptr_data->Z_CompassScale = HMC5883_Data.Z_CompassScale;
 356              		.loc 1 418 0
 357 0062 0B98     		ldr	r0, [sp, #44]	@ float
 358 0064 A847     		blx	r5
 359              	.LVL20:
 421:../LIB_HW/Hw_IMU.c **** 			ptr_data->Enable_Compass = TRUE;			
 360              		.loc 1 421 0
 361 0066 F470     		strb	r4, [r6, #3]
 418:../LIB_HW/Hw_IMU.c **** 			ptr_data->Z_CompassScale = HMC5883_Data.Z_CompassScale;
 362              		.loc 1 418 0
 363 0068 B083     		strh	r0, [r6, #28]	@ movhi
 364 006a E0E7     		b	.L13
 365              	.LVL21:
 366              	.L15:
 379:../LIB_HW/Hw_IMU.c **** 		Err = Hw_MPU6050_GetData( &MPU6050_Data );
 367              		.loc 1 379 0
 368 006c 03A8     		add	r0, sp, #12
 369 006e 314B     		ldr	r3, .L17+28
 370 0070 9847     		blx	r3
 371              	.LVL22:
 381:../LIB_HW/Hw_IMU.c **** 		if( Err == 0 )
 372              		.loc 1 381 0
 373 0072 8046     		mov	r8, r0
 374 0074 0028     		cmp	r0, #0
 375 0076 D6D1     		bne	.L12
 383:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_Acc = MPU6050_Data.X_Acc;
 376              		.loc 1 383 0
 377 0078 BDF80C10 		ldrh	r1, [sp, #12]
 387:../LIB_HW/Hw_IMU.c **** 			ptr_data->Temp  = MPU6050_Data.Temp;
 378              		.loc 1 387 0
 379 007c BDF81220 		ldrh	r2, [sp, #18]
 390:../LIB_HW/Hw_IMU.c **** 			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
 380              		.loc 1 390 0
 381 0080 BDF81630 		ldrh	r3, [sp, #22]
 385:../LIB_HW/Hw_IMU.c **** 			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
 382              		.loc 1 385 0
 383 0084 BDF810A0 		ldrh	sl, [sp, #16]
 384:../LIB_HW/Hw_IMU.c **** 			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
 384              		.loc 1 384 0
 385 0088 BDF80E00 		ldrh	r0, [sp, #14]
 386              	.LVL23:
 389:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
 387              		.loc 1 389 0
 388 008c BDF81450 		ldrh	r5, [sp, #20]
 383:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_Acc = MPU6050_Data.X_Acc;
 389              		.loc 1 383 0
 390 0090 B180     		strh	r1, [r6, #4]	@ movhi
 391:../LIB_HW/Hw_IMU.c **** 			ptr_data->Z_Gyro = MPU6050_Data.Z_Gyro;
 391              		.loc 1 391 0
 392 0092 BDF81810 		ldrh	r1, [sp, #24]
 399:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_AccAngle = (atan2(MPU6050_Data.Y_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 393              		.loc 1 399 0
 394 0096 DFF8A890 		ldr	r9, .L17+40
 387:../LIB_HW/Hw_IMU.c **** 			ptr_data->Temp  = MPU6050_Data.Temp;
 395              		.loc 1 387 0
 396 009a 7281     		strh	r2, [r6, #10]	@ movhi
 390:../LIB_HW/Hw_IMU.c **** 			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
 397              		.loc 1 390 0
 398 009c F381     		strh	r3, [r6, #14]	@ movhi
 384:../LIB_HW/Hw_IMU.c **** 			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
 399              		.loc 1 384 0
 400 009e F080     		strh	r0, [r6, #6]	@ movhi
 385:../LIB_HW/Hw_IMU.c **** 			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
 401              		.loc 1 385 0
 402 00a0 A6F808A0 		strh	sl, [r6, #8]	@ movhi
 389:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
 403              		.loc 1 389 0
 404 00a4 B581     		strh	r5, [r6, #12]	@ movhi
 394:../LIB_HW/Hw_IMU.c **** 			ptr_data->Enable_Acc     = TRUE;
 405              		.loc 1 394 0
 406 00a6 3470     		strb	r4, [r6, #0]
 395:../LIB_HW/Hw_IMU.c **** 			ptr_data->Enable_Temp    = TRUE;
 407              		.loc 1 395 0
 408 00a8 7470     		strb	r4, [r6, #1]
 396:../LIB_HW/Hw_IMU.c **** 			ptr_data->Enable_Gyro    = TRUE;	
 409              		.loc 1 396 0
 410 00aa B470     		strb	r4, [r6, #2]
 391:../LIB_HW/Hw_IMU.c **** 			ptr_data->Z_Gyro = MPU6050_Data.Z_Gyro;
 411              		.loc 1 391 0
 412 00ac 3182     		strh	r1, [r6, #16]	@ movhi
 399:../LIB_HW/Hw_IMU.c **** 			ptr_data->X_AccAngle = (atan2(MPU6050_Data.Y_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 413              		.loc 1 399 0
 414 00ae 00B2     		sxth	r0, r0
 415 00b0 C847     		blx	r9
 416              	.LVL24:
 417 00b2 0446     		mov	r4, r0
 418 00b4 0FFA8AF0 		sxth	r0, sl
 419 00b8 0D46     		mov	r5, r1
 420 00ba C847     		blx	r9
 421              	.LVL25:
 422 00bc DFF884B0 		ldr	fp, .L17+44
 423 00c0 0246     		mov	r2, r0
 424 00c2 0B46     		mov	r3, r1
 425 00c4 2046     		mov	r0, r4
 426 00c6 2946     		mov	r1, r5
 427 00c8 D847     		blx	fp
 428              	.LVL26:
 429 00ca 13A3     		adr	r3, .L17
 430 00cc D3E90023 		ldrd	r2, [r3]
 431 00d0 DFF874A0 		ldr	sl, .L17+48
 432 00d4 D047     		blx	sl
 433              	.LVL27:
 434 00d6 12A3     		adr	r3, .L17+8
 435 00d8 D3E90023 		ldrd	r2, [r3]
 436 00dc 164D     		ldr	r5, .L17+32
 437 00de A847     		blx	r5
 438              	.LVL28:
 439 00e0 164C     		ldr	r4, .L17+36
 440 00e2 A047     		blx	r4
 441              	.LVL29:
 442 00e4 3062     		str	r0, [r6, #32]	@ float
 400:../LIB_HW/Hw_IMU.c **** 			ptr_data->Y_AccAngle = (atan2(MPU6050_Data.X_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 443              		.loc 1 400 0
 444 00e6 BDF90C00 		ldrsh	r0, [sp, #12]
 445 00ea C847     		blx	r9
 446              	.LVL30:
 447 00ec CDE90001 		strd	r0, [sp]
 448 00f0 BDF91000 		ldrsh	r0, [sp, #16]
 449 00f4 C847     		blx	r9
 450              	.LVL31:
 451 00f6 0246     		mov	r2, r0
 452 00f8 0B46     		mov	r3, r1
 453 00fa DDE90001 		ldrd	r0, [sp]
 454 00fe D847     		blx	fp
 455              	.LVL32:
 456 0100 05A3     		adr	r3, .L17
 457 0102 D3E90023 		ldrd	r2, [r3]
 458 0106 D047     		blx	sl
 459              	.LVL33:
 460 0108 05A3     		adr	r3, .L17+8
 461 010a D3E90023 		ldrd	r2, [r3]
 462 010e A847     		blx	r5
 463              	.LVL34:
 464 0110 A047     		blx	r4
 465              	.LVL35:
 466 0112 7062     		str	r0, [r6, #36]	@ float
 467 0114 87E7     		b	.L12
 468              	.L18:
 469 0116 00BF     		.align	3
 470              	.L17:
 471 0118 182D4454 		.word	1413754136
 472 011c FB210940 		.word	1074340347
 473 0120 00000020 		.word	536870912
 474 0124 DCA54C40 		.word	1078765020
 475 0128 00000000 		.word	Hw_HMC5883_GetEnable
 476 012c 00000000 		.word	Hw_HMC5883_GetData
 477 0130 00000000 		.word	__aeabi_f2iz
 478 0134 00000000 		.word	Hw_MPU6050_GetData
 479 0138 00000000 		.word	__aeabi_dmul
 480 013c 00000000 		.word	__aeabi_d2f
 481 0140 00000000 		.word	__aeabi_i2d
 482 0144 00000000 		.word	atan2
 483 0148 00000000 		.word	__aeabi_dadd
 484              		.cfi_endproc
 485              	.LFE4:
 487 014c AFF30080 		.section	.text.Hw_IMU_Reset,"ax",%progbits
 488              		.align	2
 489              		.global	Hw_IMU_Reset
 490              		.thumb
 491              		.thumb_func
 493              	Hw_IMU_Reset:
 494              	.LFB2:
 205:../LIB_HW/Hw_IMU.c **** {
 495              		.loc 1 205 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499              	.LVL36:
 500 0000 10B5     		push	{r4, lr}
 501              	.LCFI5:
 502              		.cfi_def_cfa_offset 8
 503              		.cfi_offset 4, -8
 504              		.cfi_offset 14, -4
 208:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_GetData( ptr_data );
 505              		.loc 1 208 0
 506 0002 044B     		ldr	r3, .L21
 205:../LIB_HW/Hw_IMU.c **** {
 507              		.loc 1 205 0
 508 0004 0446     		mov	r4, r0
 208:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_GetData( ptr_data );
 509              		.loc 1 208 0
 510 0006 9847     		blx	r3
 511              	.LVL37:
 210:../LIB_HW/Hw_IMU.c **** 	if( Err == 0 )
 512              		.loc 1 210 0
 513 0008 18B9     		cbnz	r0, .L19
 212:../LIB_HW/Hw_IMU.c **** 		ptr_data->X_Angle = ptr_data->X_AccAngle;
 514              		.loc 1 212 0
 515 000a 226A     		ldr	r2, [r4, #32]	@ float
 213:../LIB_HW/Hw_IMU.c **** 		ptr_data->Y_Angle = ptr_data->Y_AccAngle;
 516              		.loc 1 213 0
 517 000c 606A     		ldr	r0, [r4, #36]	@ float
 518              	.LVL38:
 212:../LIB_HW/Hw_IMU.c **** 		ptr_data->X_Angle = ptr_data->X_AccAngle;
 519              		.loc 1 212 0
 520 000e A263     		str	r2, [r4, #56]	@ float
 213:../LIB_HW/Hw_IMU.c **** 		ptr_data->Y_Angle = ptr_data->Y_AccAngle;
 521              		.loc 1 213 0
 522 0010 E063     		str	r0, [r4, #60]	@ float
 523              	.L19:
 524 0012 10BD     		pop	{r4, pc}
 525              	.L22:
 526              		.align	2
 527              	.L21:
 528 0014 00000000 		.word	Hw_IMU_GetData
 529              		.cfi_endproc
 530              	.LFE2:
 532              		.section	.text.Hw_IMU_FreeIMU_getRawValues,"ax",%progbits
 533              		.align	2
 534              		.global	Hw_IMU_FreeIMU_getRawValues
 535              		.thumb
 536              		.thumb_func
 538              	Hw_IMU_FreeIMU_getRawValues:
 539              	.LFB5:
 428:../LIB_HW/Hw_IMU.c **** 
 429:../LIB_HW/Hw_IMU.c **** 
 430:../LIB_HW/Hw_IMU.c **** 
 431:../LIB_HW/Hw_IMU.c **** 
 432:../LIB_HW/Hw_IMU.c **** 
 433:../LIB_HW/Hw_IMU.c **** /*---------------------------------------------------------------------------
 434:../LIB_HW/Hw_IMU.c ****      TITLE   : Hw_IMU_FreeIMU_getRawValues
 435:../LIB_HW/Hw_IMU.c ****      WORK    : 
 436:../LIB_HW/Hw_IMU.c ****      ARG     : void
 437:../LIB_HW/Hw_IMU.c ****      RET     : void
 438:../LIB_HW/Hw_IMU.c **** ---------------------------------------------------------------------------*/
 439:../LIB_HW/Hw_IMU.c **** u16 Hw_IMU_FreeIMU_getRawValues(int * raw_values) 
 440:../LIB_HW/Hw_IMU.c **** {
 540              		.loc 1 440 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 72
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              	.LVL39:
 545 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 546              	.LCFI6:
 547              		.cfi_def_cfa_offset 24
 548              		.cfi_offset 4, -24
 549              		.cfi_offset 5, -20
 550              		.cfi_offset 6, -16
 551              		.cfi_offset 7, -12
 552              		.cfi_offset 8, -8
 553              		.cfi_offset 14, -4
 554 0004 92B0     		sub	sp, sp, #72
 555              	.LCFI7:
 556              		.cfi_def_cfa_offset 96
 557              		.loc 1 440 0
 558 0006 0446     		mov	r4, r0
 441:../LIB_HW/Hw_IMU.c **** 	u16 Err;
 442:../LIB_HW/Hw_IMU.c **** 
 443:../LIB_HW/Hw_IMU.c **** 	HW_IMU_DATA_OBJ IMU_Data;
 444:../LIB_HW/Hw_IMU.c **** 
 445:../LIB_HW/Hw_IMU.c **** 
 446:../LIB_HW/Hw_IMU.c **** 
 447:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_GetData( &IMU_Data );   	
 559              		.loc 1 447 0
 560 0008 154B     		ldr	r3, .L25
 561 000a 01A8     		add	r0, sp, #4
 562              	.LVL40:
 563 000c 9847     		blx	r3
 564              	.LVL41:
 448:../LIB_HW/Hw_IMU.c **** 
 449:../LIB_HW/Hw_IMU.c **** 	if( Err == 0 )
 565              		.loc 1 449 0
 566 000e 0546     		mov	r5, r0
 567 0010 F0B9     		cbnz	r0, .L24
 450:../LIB_HW/Hw_IMU.c **** 	{
 451:../LIB_HW/Hw_IMU.c **** 		raw_values[0] = IMU_Data.X_Acc;
 452:../LIB_HW/Hw_IMU.c **** 		raw_values[1] = IMU_Data.Y_Acc;
 453:../LIB_HW/Hw_IMU.c **** 		raw_values[2] = IMU_Data.Z_Acc;
 454:../LIB_HW/Hw_IMU.c **** 
 455:../LIB_HW/Hw_IMU.c **** 		raw_values[3] = IMU_Data.X_Gyro;
 456:../LIB_HW/Hw_IMU.c **** 		raw_values[4] = IMU_Data.Y_Gyro;
 457:../LIB_HW/Hw_IMU.c **** 		raw_values[5] = IMU_Data.Z_Gyro;
 568              		.loc 1 457 0
 569 0012 BDF91400 		ldrsh	r0, [sp, #20]
 570              	.LVL42:
 458:../LIB_HW/Hw_IMU.c **** 
 459:../LIB_HW/Hw_IMU.c **** 		raw_values[6] = IMU_Data.X_Compass;
 571              		.loc 1 459 0
 572 0016 BDF91610 		ldrsh	r1, [sp, #22]
 460:../LIB_HW/Hw_IMU.c **** 		raw_values[7] = IMU_Data.Y_Compass;
 573              		.loc 1 460 0
 574 001a BDF91820 		ldrsh	r2, [sp, #24]
 461:../LIB_HW/Hw_IMU.c **** 		raw_values[8] = IMU_Data.Z_Compass;
 575              		.loc 1 461 0
 576 001e BDF91A30 		ldrsh	r3, [sp, #26]
 451:../LIB_HW/Hw_IMU.c **** 		raw_values[0] = IMU_Data.X_Acc;
 577              		.loc 1 451 0
 578 0022 BDF90880 		ldrsh	r8, [sp, #8]
 452:../LIB_HW/Hw_IMU.c **** 		raw_values[1] = IMU_Data.Y_Acc;
 579              		.loc 1 452 0
 580 0026 BDF90AC0 		ldrsh	ip, [sp, #10]
 453:../LIB_HW/Hw_IMU.c **** 		raw_values[2] = IMU_Data.Z_Acc;
 581              		.loc 1 453 0
 582 002a BDF90CE0 		ldrsh	lr, [sp, #12]
 455:../LIB_HW/Hw_IMU.c **** 		raw_values[3] = IMU_Data.X_Gyro;
 583              		.loc 1 455 0
 584 002e BDF91070 		ldrsh	r7, [sp, #16]
 456:../LIB_HW/Hw_IMU.c **** 		raw_values[4] = IMU_Data.Y_Gyro;
 585              		.loc 1 456 0
 586 0032 BDF91260 		ldrsh	r6, [sp, #18]
 457:../LIB_HW/Hw_IMU.c **** 		raw_values[5] = IMU_Data.Z_Gyro;
 587              		.loc 1 457 0
 588 0036 6061     		str	r0, [r4, #20]
 459:../LIB_HW/Hw_IMU.c **** 		raw_values[6] = IMU_Data.X_Compass;
 589              		.loc 1 459 0
 590 0038 A161     		str	r1, [r4, #24]
 460:../LIB_HW/Hw_IMU.c **** 		raw_values[7] = IMU_Data.Y_Compass;
 591              		.loc 1 460 0
 592 003a E261     		str	r2, [r4, #28]
 593              		.loc 1 461 0
 594 003c 2362     		str	r3, [r4, #32]
 453:../LIB_HW/Hw_IMU.c **** 		raw_values[2] = IMU_Data.Z_Acc;
 595              		.loc 1 453 0
 596 003e 84E80051 		stmia	r4, {r8, ip, lr}
 455:../LIB_HW/Hw_IMU.c **** 		raw_values[3] = IMU_Data.X_Gyro;
 597              		.loc 1 455 0
 598 0042 E760     		str	r7, [r4, #12]
 456:../LIB_HW/Hw_IMU.c **** 		raw_values[4] = IMU_Data.Y_Gyro;
 599              		.loc 1 456 0
 600 0044 2661     		str	r6, [r4, #16]
 462:../LIB_HW/Hw_IMU.c **** 
 463:../LIB_HW/Hw_IMU.c **** 		Hw_IMU_SaveData = IMU_Data;
 601              		.loc 1 463 0
 602 0046 0748     		ldr	r0, .L25+4
 603 0048 01A9     		add	r1, sp, #4
 604 004a 4422     		movs	r2, #68
 605 004c 064B     		ldr	r3, .L25+8
 606 004e 9847     		blx	r3
 607              	.LVL43:
 608              	.L24:
 464:../LIB_HW/Hw_IMU.c **** 	}	
 465:../LIB_HW/Hw_IMU.c **** 
 466:../LIB_HW/Hw_IMU.c **** 
 467:../LIB_HW/Hw_IMU.c **** 	int temp, press;
 468:../LIB_HW/Hw_IMU.c ****     
 469:../LIB_HW/Hw_IMU.c **** 	//TODO: possible loss of precision
 470:../LIB_HW/Hw_IMU.c **** 	temp = 25;
 471:../LIB_HW/Hw_IMU.c **** 	raw_values[9] = temp;
 609              		.loc 1 471 0
 610 0050 1920     		movs	r0, #25
 472:../LIB_HW/Hw_IMU.c **** 	press = 0;
 473:../LIB_HW/Hw_IMU.c **** 	raw_values[10] = press;
 611              		.loc 1 473 0
 612 0052 0021     		movs	r1, #0
 471:../LIB_HW/Hw_IMU.c **** 	raw_values[9] = temp;
 613              		.loc 1 471 0
 614 0054 6062     		str	r0, [r4, #36]
 615              	.LVL44:
 616              		.loc 1 473 0
 617 0056 A162     		str	r1, [r4, #40]
 474:../LIB_HW/Hw_IMU.c **** 
 475:../LIB_HW/Hw_IMU.c **** 	return Err;
 476:../LIB_HW/Hw_IMU.c **** }
 618              		.loc 1 476 0
 619 0058 2846     		mov	r0, r5
 620 005a 12B0     		add	sp, sp, #72
 621 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 622              	.L26:
 623              		.align	2
 624              	.L25:
 625 0060 00000000 		.word	Hw_IMU_GetData
 626 0064 00000000 		.word	Hw_IMU_SaveData
 627 0068 00000000 		.word	memcpy
 628              		.cfi_endproc
 629              	.LFE5:
 631              		.global	__aeabi_i2f
 632              		.global	__aeabi_fdiv
 633              		.global	__aeabi_fsub
 634              		.global	__aeabi_fadd
 635              		.section	.text.Hw_IMU_FreeIMU_getValues,"ax",%progbits
 636              		.align	2
 637              		.global	Hw_IMU_FreeIMU_getValues
 638              		.thumb
 639              		.thumb_func
 641              	Hw_IMU_FreeIMU_getValues:
 642              	.LFB6:
 477:../LIB_HW/Hw_IMU.c **** 
 478:../LIB_HW/Hw_IMU.c **** 
 479:../LIB_HW/Hw_IMU.c **** 
 480:../LIB_HW/Hw_IMU.c **** 
 481:../LIB_HW/Hw_IMU.c **** 
 482:../LIB_HW/Hw_IMU.c **** /*---------------------------------------------------------------------------
 483:../LIB_HW/Hw_IMU.c ****      TITLE   : Hw_IMU_FreeIMU_getValues
 484:../LIB_HW/Hw_IMU.c ****      WORK    : 
 485:../LIB_HW/Hw_IMU.c ****      ARG     : void
 486:../LIB_HW/Hw_IMU.c ****      RET     : void
 487:../LIB_HW/Hw_IMU.c **** ---------------------------------------------------------------------------*/
 488:../LIB_HW/Hw_IMU.c **** u16 Hw_IMU_FreeIMU_getValues(float * values) 
 489:../LIB_HW/Hw_IMU.c **** {  
 643              		.loc 1 489 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 88
 646              		@ frame_needed = 0, uses_anonymous_args = 0
 647              	.LVL45:
 648 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 649              	.LCFI8:
 650              		.cfi_def_cfa_offset 36
 651              		.cfi_offset 4, -36
 652              		.cfi_offset 5, -32
 653              		.cfi_offset 6, -28
 654              		.cfi_offset 7, -24
 655              		.cfi_offset 8, -20
 656              		.cfi_offset 9, -16
 657              		.cfi_offset 10, -12
 658              		.cfi_offset 11, -8
 659              		.cfi_offset 14, -4
 490:../LIB_HW/Hw_IMU.c ****     int16_t accgyroval[6];
 491:../LIB_HW/Hw_IMU.c ****     int i;
 492:../LIB_HW/Hw_IMU.c **** 
 493:../LIB_HW/Hw_IMU.c **** 	u16 Err;
 494:../LIB_HW/Hw_IMU.c **** 
 495:../LIB_HW/Hw_IMU.c **** 	HW_IMU_DATA_OBJ IMU_Data;
 496:../LIB_HW/Hw_IMU.c **** 
 497:../LIB_HW/Hw_IMU.c **** 
 498:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_GetData( &IMU_Data ); 
 660              		.loc 1 498 0
 661 0004 40F20003 		movw	r3, #:lower16:Hw_IMU_GetData
 489:../LIB_HW/Hw_IMU.c **** {  
 662              		.loc 1 489 0
 663 0008 97B0     		sub	sp, sp, #92
 664              	.LCFI9:
 665              		.cfi_def_cfa_offset 128
 489:../LIB_HW/Hw_IMU.c **** {  
 666              		.loc 1 489 0
 667 000a 0446     		mov	r4, r0
 668              		.loc 1 498 0
 669 000c C0F20003 		movt	r3, #:upper16:Hw_IMU_GetData
 670 0010 05A8     		add	r0, sp, #20
 671              	.LVL46:
 672 0012 9847     		blx	r3
 673              	.LVL47:
 499:../LIB_HW/Hw_IMU.c **** 
 500:../LIB_HW/Hw_IMU.c **** 	Hw_IMU_SaveData = IMU_Data;
 674              		.loc 1 500 0
 675 0014 40F20005 		movw	r5, #:lower16:memcpy
 498:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_GetData( &IMU_Data ); 
 676              		.loc 1 498 0
 677 0018 8046     		mov	r8, r0
 678              	.LVL48:
 679              		.loc 1 500 0
 680 001a 40F20000 		movw	r0, #:lower16:Hw_IMU_SaveData
 681              	.LVL49:
 682 001e 4422     		movs	r2, #68
 683 0020 05A9     		add	r1, sp, #20
 684 0022 C0F20005 		movt	r5, #:upper16:memcpy
 685 0026 C0F20000 		movt	r0, #:upper16:Hw_IMU_SaveData
 686 002a A847     		blx	r5
 687              	.LVL50:
 501:../LIB_HW/Hw_IMU.c **** 
 502:../LIB_HW/Hw_IMU.c **** 
 503:../LIB_HW/Hw_IMU.c **** 	accgyroval[0] = IMU_Data.X_Acc;
 504:../LIB_HW/Hw_IMU.c **** 	accgyroval[1] = IMU_Data.Y_Acc;
 505:../LIB_HW/Hw_IMU.c **** 	accgyroval[2] = IMU_Data.Z_Acc;
 506:../LIB_HW/Hw_IMU.c **** 
 507:../LIB_HW/Hw_IMU.c **** 	accgyroval[3] = IMU_Data.X_Gyro;
 508:../LIB_HW/Hw_IMU.c **** 	accgyroval[4] = IMU_Data.Y_Gyro;
 509:../LIB_HW/Hw_IMU.c **** 	accgyroval[5] = IMU_Data.Z_Gyro;
 510:../LIB_HW/Hw_IMU.c **** 
 511:../LIB_HW/Hw_IMU.c ****     
 512:../LIB_HW/Hw_IMU.c ****     // remove offsets from the gyroscope
 513:../LIB_HW/Hw_IMU.c ****     accgyroval[3] = accgyroval[3] - gyro_off_x;
 688              		.loc 1 513 0
 689 002c 40F20001 		movw	r1, #:lower16:gyro_off_x
 514:../LIB_HW/Hw_IMU.c ****     accgyroval[4] = accgyroval[4] - gyro_off_y;
 690              		.loc 1 514 0
 691 0030 40F20002 		movw	r2, #:lower16:gyro_off_y
 513:../LIB_HW/Hw_IMU.c ****     accgyroval[3] = accgyroval[3] - gyro_off_x;
 692              		.loc 1 513 0
 693 0034 C0F20001 		movt	r1, #:upper16:gyro_off_x
 694              		.loc 1 514 0
 695 0038 C0F20002 		movt	r2, #:upper16:gyro_off_y
 508:../LIB_HW/Hw_IMU.c **** 	accgyroval[4] = IMU_Data.Y_Gyro;
 696              		.loc 1 508 0
 697 003c BDF82230 		ldrh	r3, [sp, #34]
 513:../LIB_HW/Hw_IMU.c ****     accgyroval[3] = accgyroval[3] - gyro_off_x;
 698              		.loc 1 513 0
 699 0040 0D88     		ldrh	r5, [r1, #0]
 515:../LIB_HW/Hw_IMU.c ****     accgyroval[5] = accgyroval[5] - gyro_off_z;
 700              		.loc 1 515 0
 701 0042 40F20000 		movw	r0, #:lower16:gyro_off_z
 514:../LIB_HW/Hw_IMU.c ****     accgyroval[4] = accgyroval[4] - gyro_off_y;
 702              		.loc 1 514 0
 703 0046 1188     		ldrh	r1, [r2, #0]
 704              		.loc 1 515 0
 705 0048 C0F20000 		movt	r0, #:upper16:gyro_off_z
 514:../LIB_HW/Hw_IMU.c ****     accgyroval[4] = accgyroval[4] - gyro_off_y;
 706              		.loc 1 514 0
 707 004c 591A     		subs	r1, r3, r1
 708              		.loc 1 515 0
 709 004e 0288     		ldrh	r2, [r0, #0]
 509:../LIB_HW/Hw_IMU.c **** 	accgyroval[5] = IMU_Data.Z_Gyro;
 710              		.loc 1 509 0
 711 0050 BDF824B0 		ldrh	fp, [sp, #36]
 516:../LIB_HW/Hw_IMU.c **** 
 517:../LIB_HW/Hw_IMU.c ****     for(i = 0; i<6; i++) 
 518:../LIB_HW/Hw_IMU.c ****     {
 519:../LIB_HW/Hw_IMU.c ****       if(i < 3) 
 520:../LIB_HW/Hw_IMU.c ****       {
 521:../LIB_HW/Hw_IMU.c ****         values[i] = (float) accgyroval[i];
 712              		.loc 1 521 0
 713 0054 40F20006 		movw	r6, #:lower16:__aeabi_i2f
 714 0058 C0F20006 		movt	r6, #:upper16:__aeabi_i2f
 715 005c 0191     		str	r1, [sp, #4]
 716 005e BDF91800 		ldrsh	r0, [sp, #24]
 515:../LIB_HW/Hw_IMU.c ****     accgyroval[5] = accgyroval[5] - gyro_off_z;
 717              		.loc 1 515 0
 718 0062 C2EB0B0B 		rsb	fp, r2, fp
 719              	.LVL51:
 720              		.loc 1 521 0
 721 0066 B047     		blx	r6
 722              	.LVL52:
 504:../LIB_HW/Hw_IMU.c **** 	accgyroval[1] = IMU_Data.Y_Acc;
 723              		.loc 1 504 0
 724 0068 BDF81AA0 		ldrh	sl, [sp, #26]
 513:../LIB_HW/Hw_IMU.c ****     accgyroval[3] = accgyroval[3] - gyro_off_x;
 725              		.loc 1 513 0
 726 006c BDF82070 		ldrh	r7, [sp, #32]
 727              		.loc 1 521 0
 728 0070 2060     		str	r0, [r4, #0]	@ float
 729              	.LVL53:
 513:../LIB_HW/Hw_IMU.c ****     accgyroval[3] = accgyroval[3] - gyro_off_x;
 730              		.loc 1 513 0
 731 0072 7D1B     		subs	r5, r7, r5
 732              		.loc 1 521 0
 733 0074 0746     		mov	r7, r0
 734 0076 0FFA8AF0 		sxth	r0, sl
 735 007a B047     		blx	r6
 736              	.LVL54:
 505:../LIB_HW/Hw_IMU.c **** 	accgyroval[2] = IMU_Data.Z_Acc;
 737              		.loc 1 505 0
 738 007c BDF81C90 		ldrh	r9, [sp, #28]
 739              		.loc 1 521 0
 740 0080 8246     		mov	sl, r0
 741 0082 6060     		str	r0, [r4, #4]	@ float
 742              	.LVL55:
 743 0084 0FFA89F0 		sxth	r0, r9
 744 0088 B047     		blx	r6
 745              	.LVL56:
 746 008a 8146     		mov	r9, r0
 747 008c A060     		str	r0, [r4, #8]	@ float
 748              	.LVL57:
 522:../LIB_HW/Hw_IMU.c ****       }
 523:../LIB_HW/Hw_IMU.c ****       else 
 524:../LIB_HW/Hw_IMU.c ****       {
 525:../LIB_HW/Hw_IMU.c ****         values[i] = ((float) accgyroval[i]) / 16.4f; // NOTE: this depends on the sensitivity chose
 749              		.loc 1 525 0
 750 008e 28B2     		sxth	r0, r5
 751 0090 B047     		blx	r6
 752              	.LVL58:
 753 0092 40F20005 		movw	r5, #:lower16:__aeabi_fdiv
 754 0096 43F23331 		movw	r1, #13107
 755 009a C0F20005 		movt	r5, #:upper16:__aeabi_fdiv
 756 009e C4F28311 		movt	r1, 16771
 757 00a2 A847     		blx	r5
 758              	.LVL59:
 759 00a4 E060     		str	r0, [r4, #12]	@ float
 760              	.LVL60:
 761 00a6 0198     		ldr	r0, [sp, #4]
 762 00a8 00B2     		sxth	r0, r0
 763 00aa B047     		blx	r6
 764              	.LVL61:
 765 00ac 43F23331 		movw	r1, #13107
 766 00b0 C4F28311 		movt	r1, 16771
 767 00b4 A847     		blx	r5
 768              	.LVL62:
 769 00b6 2061     		str	r0, [r4, #16]	@ float
 770              	.LVL63:
 771 00b8 0FFA8BF0 		sxth	r0, fp
 772 00bc B047     		blx	r6
 773              	.LVL64:
 774 00be 43F23331 		movw	r1, #13107
 775 00c2 C4F28311 		movt	r1, 16771
 776 00c6 A847     		blx	r5
 777              	.LVL65:
 526:../LIB_HW/Hw_IMU.c ****       }
 527:../LIB_HW/Hw_IMU.c ****     }
 528:../LIB_HW/Hw_IMU.c ****   
 529:../LIB_HW/Hw_IMU.c ****   
 530:../LIB_HW/Hw_IMU.c **** 	// remove offsets and scale accelerometer (calibration)
 531:../LIB_HW/Hw_IMU.c **** 	values[0] = (values[0] - acc_off_x) / acc_scale_x;
 778              		.loc 1 531 0
 779 00c8 0021     		movs	r1, #0
 780 00ca 40F20002 		movw	r2, #:lower16:__aeabi_fsub
 781 00ce C0F20002 		movt	r2, #:upper16:__aeabi_fsub
 525:../LIB_HW/Hw_IMU.c ****         values[i] = ((float) accgyroval[i]) / 16.4f; // NOTE: this depends on the sensitivity chose
 782              		.loc 1 525 0
 783 00d2 6061     		str	r0, [r4, #20]	@ float
 784              	.LVL66:
 785              		.loc 1 531 0
 786 00d4 C4F2AB31 		movt	r1, 17323
 787 00d8 3846     		mov	r0, r7
 788 00da 9047     		blx	r2
 789              	.LVL67:
 790 00dc 4FF63231 		movw	r1, #64306
 791 00e0 C4F26061 		movt	r1, 18016
 792 00e4 A847     		blx	r5
 793              	.LVL68:
 532:../LIB_HW/Hw_IMU.c **** 	values[1] = (values[1] - acc_off_y) / acc_scale_y;
 794              		.loc 1 532 0
 795 00e6 40F20007 		movw	r7, #:lower16:__aeabi_fadd
 796 00ea 0021     		movs	r1, #0
 797 00ec C0F20007 		movt	r7, #:upper16:__aeabi_fadd
 531:../LIB_HW/Hw_IMU.c **** 	values[0] = (values[0] - acc_off_x) / acc_scale_x;
 798              		.loc 1 531 0
 799 00f0 2060     		str	r0, [r4, #0]	@ float
 800              		.loc 1 532 0
 801 00f2 C4F22831 		movt	r1, 17192
 802 00f6 5046     		mov	r0, sl
 803 00f8 B847     		blx	r7
 804              	.LVL69:
 805 00fa 43F64D01 		movw	r1, #14413
 806 00fe C4F28061 		movt	r1, 18048
 807 0102 A847     		blx	r5
 808              	.LVL70:
 533:../LIB_HW/Hw_IMU.c **** 	values[2] = (values[2] - acc_off_z) / acc_scale_z;
 809              		.loc 1 533 0
 810 0104 4FF4E041 		mov	r1, #28672
 532:../LIB_HW/Hw_IMU.c **** 	values[1] = (values[1] - acc_off_y) / acc_scale_y;
 811              		.loc 1 532 0
 812 0108 6060     		str	r0, [r4, #4]	@ float
 813              		.loc 1 533 0
 814 010a C4F21B51 		movt	r1, 17691
 815 010e 4846     		mov	r0, r9
 816 0110 B847     		blx	r7
 817              	.LVL71:
 818 0112 45F69A51 		movw	r1, #23962
 819 0116 C4F28661 		movt	r1, 18054
 820 011a A847     		blx	r5
 821              	.LVL72:
 822 011c A060     		str	r0, [r4, #8]	@ float
 534:../LIB_HW/Hw_IMU.c ****   
 535:../LIB_HW/Hw_IMU.c ****   
 536:../LIB_HW/Hw_IMU.c ****   	values[6] = IMU_Data.X_Compass;
 537:../LIB_HW/Hw_IMU.c **** 	values[7] = IMU_Data.Y_Compass;
 823              		.loc 1 537 0
 824 011e BDF92800 		ldrsh	r0, [sp, #40]
 825 0122 B047     		blx	r6
 826              	.LVL73:
 827 0124 8346     		mov	fp, r0
 538:../LIB_HW/Hw_IMU.c **** 	values[8] = IMU_Data.Z_Compass;
 828              		.loc 1 538 0
 829 0126 BDF92A00 		ldrsh	r0, [sp, #42]
 830 012a B047     		blx	r6
 831              	.LVL74:
 832 012c 8246     		mov	sl, r0
 536:../LIB_HW/Hw_IMU.c ****   	values[6] = IMU_Data.X_Compass;
 833              		.loc 1 536 0
 834 012e BDF92600 		ldrsh	r0, [sp, #38]
 835 0132 B047     		blx	r6
 836              	.LVL75:
 539:../LIB_HW/Hw_IMU.c **** 
 540:../LIB_HW/Hw_IMU.c **** 
 541:../LIB_HW/Hw_IMU.c **** 	values[6] = (values[6] - magn_off_x) / magn_scale_x;
 837              		.loc 1 541 0
 838 0134 0021     		movs	r1, #0
 839 0136 C4F2AE21 		movt	r1, 17070
 840 013a B847     		blx	r7
 841              	.LVL76:
 842 013c 41F2E611 		movw	r1, #4582
 843 0140 C4F20941 		movt	r1, 17417
 844 0144 A847     		blx	r5
 845              	.LVL77:
 542:../LIB_HW/Hw_IMU.c **** 	values[7] = (values[7] - magn_off_y) / magn_scale_y;
 846              		.loc 1 542 0
 847 0146 0021     		movs	r1, #0
 541:../LIB_HW/Hw_IMU.c **** 	values[6] = (values[6] - magn_off_x) / magn_scale_x;
 848              		.loc 1 541 0
 849 0148 8146     		mov	r9, r0
 850 014a A061     		str	r0, [r4, #24]	@ float
 851              		.loc 1 542 0
 852 014c C4F25831 		movt	r1, 17240
 853 0150 5846     		mov	r0, fp
 854 0152 B847     		blx	r7
 855              	.LVL78:
 856 0154 4FF23401 		movw	r1, #61492
 857 0158 C4F26741 		movt	r1, 17511
 858 015c A847     		blx	r5
 859              	.LVL79:
 543:../LIB_HW/Hw_IMU.c **** 	values[8] = (values[8] - magn_off_z) / magn_scale_z;
 860              		.loc 1 543 0
 861 015e 0021     		movs	r1, #0
 542:../LIB_HW/Hw_IMU.c **** 	values[7] = (values[7] - magn_off_y) / magn_scale_y;
 862              		.loc 1 542 0
 863 0160 0646     		mov	r6, r0
 864 0162 E661     		str	r6, [r4, #28]	@ float
 865              		.loc 1 543 0
 866 0164 C4F21C31 		movt	r1, 17180
 867 0168 5046     		mov	r0, sl
 868 016a B847     		blx	r7
 869              	.LVL80:
 870 016c 4AF20A41 		movw	r1, #41994
 871 0170 C4F28341 		movt	r1, 17539
 872 0174 A847     		blx	r5
 873              	.LVL81:
 544:../LIB_HW/Hw_IMU.c **** 
 545:../LIB_HW/Hw_IMU.c **** 
 546:../LIB_HW/Hw_IMU.c **** 	#if 0
 547:../LIB_HW/Hw_IMU.c **** 	values[0] = 0;
 548:../LIB_HW/Hw_IMU.c **** 	values[1] = 0;
 549:../LIB_HW/Hw_IMU.c **** 	values[2] = 0;
 550:../LIB_HW/Hw_IMU.c **** 
 551:../LIB_HW/Hw_IMU.c **** 	values[3] = 0;
 552:../LIB_HW/Hw_IMU.c **** 	values[4] = 0;
 553:../LIB_HW/Hw_IMU.c **** 	values[5] = 0;
 554:../LIB_HW/Hw_IMU.c **** 
 555:../LIB_HW/Hw_IMU.c **** 	values[6] = 1;
 556:../LIB_HW/Hw_IMU.c **** 	values[7] = 1;
 557:../LIB_HW/Hw_IMU.c **** 	values[8] = 1;
 558:../LIB_HW/Hw_IMU.c **** 	#endif
 559:../LIB_HW/Hw_IMU.c **** 
 560:../LIB_HW/Hw_IMU.c **** 	Lb_printf("mg %d %d %d\n", (s16)values[6], (s16)values[7], (s16)values[8] );
 874              		.loc 1 560 0
 875 0176 40F20005 		movw	r5, #:lower16:__aeabi_f2iz
 876 017a C0F20005 		movt	r5, #:upper16:__aeabi_f2iz
 543:../LIB_HW/Hw_IMU.c **** 	values[8] = (values[8] - magn_off_z) / magn_scale_z;
 877              		.loc 1 543 0
 878 017e 0746     		mov	r7, r0
 879 0180 2062     		str	r0, [r4, #32]	@ float
 880              		.loc 1 560 0
 881 0182 4846     		mov	r0, r9
 882 0184 A847     		blx	r5
 883              	.LVL82:
 884 0186 0FFA80F9 		sxth	r9, r0
 885 018a 3046     		mov	r0, r6
 886 018c A847     		blx	r5
 887              	.LVL83:
 888 018e 06B2     		sxth	r6, r0
 889 0190 3846     		mov	r0, r7
 890 0192 A847     		blx	r5
 891              	.LVL84:
 892 0194 40F20005 		movw	r5, #:lower16:.LC2
 893 0198 C0F20005 		movt	r5, #:upper16:.LC2
 894 019c 40F20004 		movw	r4, #:lower16:Lb_printf
 895              	.LVL85:
 896 01a0 03B2     		sxth	r3, r0
 897 01a2 4946     		mov	r1, r9
 898 01a4 2846     		mov	r0, r5
 899 01a6 3246     		mov	r2, r6
 900 01a8 C0F20004 		movt	r4, #:upper16:Lb_printf
 901 01ac A047     		blx	r4
 902              	.LVL86:
 561:../LIB_HW/Hw_IMU.c **** 
 562:../LIB_HW/Hw_IMU.c **** 
 563:../LIB_HW/Hw_IMU.c **** 	return Err;
 564:../LIB_HW/Hw_IMU.c **** }
 903              		.loc 1 564 0
 904 01ae 4046     		mov	r0, r8
 905 01b0 17B0     		add	sp, sp, #92
 906 01b2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 907              		.cfi_endproc
 908              	.LFE6:
 910 01b6 00BF     		.section	.text.Hw_IMU_FreeIMU_zeroGyro,"ax",%progbits
 911              		.align	2
 912              		.global	Hw_IMU_FreeIMU_zeroGyro
 913              		.thumb
 914              		.thumb_func
 916              	Hw_IMU_FreeIMU_zeroGyro:
 917              	.LFB7:
 565:../LIB_HW/Hw_IMU.c **** 
 566:../LIB_HW/Hw_IMU.c **** 
 567:../LIB_HW/Hw_IMU.c **** 
 568:../LIB_HW/Hw_IMU.c **** 
 569:../LIB_HW/Hw_IMU.c **** 
 570:../LIB_HW/Hw_IMU.c **** /*---------------------------------------------------------------------------
 571:../LIB_HW/Hw_IMU.c ****      TITLE   : Hw_IMU_FreeIMU_zeroGyro
 572:../LIB_HW/Hw_IMU.c ****      WORK    : 
 573:../LIB_HW/Hw_IMU.c ****      ARG     : void
 574:../LIB_HW/Hw_IMU.c ****      RET     : void
 575:../LIB_HW/Hw_IMU.c **** ---------------------------------------------------------------------------*/
 576:../LIB_HW/Hw_IMU.c **** u16 Hw_IMU_FreeIMU_zeroGyro( void ) 
 577:../LIB_HW/Hw_IMU.c **** {
 918              		.loc 1 577 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 48
 921              		@ frame_needed = 0, uses_anonymous_args = 0
 922              	.LVL87:
 923 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, sl, lr}
 924              	.LCFI10:
 925              		.cfi_def_cfa_offset 32
 926              		.cfi_offset 4, -32
 927              		.cfi_offset 5, -28
 928              		.cfi_offset 6, -24
 929              		.cfi_offset 7, -20
 930              		.cfi_offset 8, -16
 931              		.cfi_offset 9, -12
 932              		.cfi_offset 10, -8
 933              		.cfi_offset 14, -4
 934 0004 8CB0     		sub	sp, sp, #48
 935              	.LCFI11:
 936              		.cfi_def_cfa_offset 80
 937              	.LBB4:
 578:../LIB_HW/Hw_IMU.c **** 	u16 Err = 0;
 579:../LIB_HW/Hw_IMU.c **** 
 580:../LIB_HW/Hw_IMU.c ****   const int totSamples = 3;
 581:../LIB_HW/Hw_IMU.c ****   int raw[11];
 582:../LIB_HW/Hw_IMU.c ****   float tmpOffsets[] = {0,0,0};
 583:../LIB_HW/Hw_IMU.c ****   
 584:../LIB_HW/Hw_IMU.c ****   for (int i = 0; i < totSamples; i++)
 585:../LIB_HW/Hw_IMU.c ****   {
 586:../LIB_HW/Hw_IMU.c ****     Err = Hw_IMU_FreeIMU_getRawValues(raw);
 938              		.loc 1 586 0
 939 0006 01A8     		add	r0, sp, #4
 940 0008 DFF8D8A0 		ldr	sl, .L31+28
 941 000c D047     		blx	sl
 942              	.LVL88:
 587:../LIB_HW/Hw_IMU.c ****     tmpOffsets[0] += raw[3];
 943              		.loc 1 587 0
 944 000e 2E4D     		ldr	r5, .L31
 586:../LIB_HW/Hw_IMU.c ****     Err = Hw_IMU_FreeIMU_getRawValues(raw);
 945              		.loc 1 586 0
 946 0010 0646     		mov	r6, r0
 947              	.LVL89:
 948              		.loc 1 587 0
 949 0012 0498     		ldr	r0, [sp, #16]
 950              	.LVL90:
 951 0014 2D4C     		ldr	r4, .L31+4
 952 0016 A847     		blx	r5
 953              	.LVL91:
 954 0018 0021     		movs	r1, #0
 955 001a A047     		blx	r4
 956              	.LVL92:
 957 001c 8046     		mov	r8, r0
 958              	.LVL93:
 588:../LIB_HW/Hw_IMU.c ****     tmpOffsets[1] += raw[4];
 959              		.loc 1 588 0
 960 001e 0598     		ldr	r0, [sp, #20]
 961              	.LVL94:
 962 0020 A847     		blx	r5
 963              	.LVL95:
 964 0022 0021     		movs	r1, #0
 965 0024 A047     		blx	r4
 966              	.LVL96:
 967 0026 0746     		mov	r7, r0
 968              	.LVL97:
 589:../LIB_HW/Hw_IMU.c ****     tmpOffsets[2] += raw[5];
 969              		.loc 1 589 0
 970 0028 0698     		ldr	r0, [sp, #24]
 971              	.LVL98:
 972 002a A847     		blx	r5
 973              	.LVL99:
 974 002c 0021     		movs	r1, #0
 975 002e A047     		blx	r4
 976              	.LVL100:
 977 0030 8146     		mov	r9, r0
 978              	.LVL101:
 590:../LIB_HW/Hw_IMU.c **** 
 591:../LIB_HW/Hw_IMU.c ****     if( Err != 0 ) break;
 979              		.loc 1 591 0
 980 0032 002E     		cmp	r6, #0
 981 0034 2AD1     		bne	.L30
 982              	.LVL102:
 586:../LIB_HW/Hw_IMU.c ****     Err = Hw_IMU_FreeIMU_getRawValues(raw);
 983              		.loc 1 586 0
 984 0036 01A8     		add	r0, sp, #4
 985              	.LVL103:
 986 0038 D047     		blx	sl
 987              	.LVL104:
 988 003a 0646     		mov	r6, r0
 989              	.LVL105:
 587:../LIB_HW/Hw_IMU.c ****     tmpOffsets[0] += raw[3];
 990              		.loc 1 587 0
 991 003c 0498     		ldr	r0, [sp, #16]
 992              	.LVL106:
 993 003e A847     		blx	r5
 994              	.LVL107:
 995 0040 0146     		mov	r1, r0
 996 0042 4046     		mov	r0, r8
 997 0044 A047     		blx	r4
 998              	.LVL108:
 999 0046 8046     		mov	r8, r0
 1000              	.LVL109:
 588:../LIB_HW/Hw_IMU.c ****     tmpOffsets[1] += raw[4];
 1001              		.loc 1 588 0
 1002 0048 0598     		ldr	r0, [sp, #20]
 1003              	.LVL110:
 1004 004a A847     		blx	r5
 1005              	.LVL111:
 1006 004c 0146     		mov	r1, r0
 1007 004e 3846     		mov	r0, r7
 1008 0050 A047     		blx	r4
 1009              	.LVL112:
 1010 0052 0746     		mov	r7, r0
 1011              	.LVL113:
 589:../LIB_HW/Hw_IMU.c ****     tmpOffsets[2] += raw[5];
 1012              		.loc 1 589 0
 1013 0054 0698     		ldr	r0, [sp, #24]
 1014              	.LVL114:
 1015 0056 A847     		blx	r5
 1016              	.LVL115:
 1017 0058 0146     		mov	r1, r0
 1018 005a 4846     		mov	r0, r9
 1019 005c A047     		blx	r4
 1020              	.LVL116:
 1021 005e 8146     		mov	r9, r0
 1022              	.LVL117:
 1023              		.loc 1 591 0
 1024 0060 A6B9     		cbnz	r6, .L30
 1025              	.LVL118:
 586:../LIB_HW/Hw_IMU.c ****     Err = Hw_IMU_FreeIMU_getRawValues(raw);
 1026              		.loc 1 586 0
 1027 0062 01A8     		add	r0, sp, #4
 1028              	.LVL119:
 1029 0064 D047     		blx	sl
 1030              	.LVL120:
 1031 0066 0646     		mov	r6, r0
 1032              	.LVL121:
 587:../LIB_HW/Hw_IMU.c ****     tmpOffsets[0] += raw[3];
 1033              		.loc 1 587 0
 1034 0068 0498     		ldr	r0, [sp, #16]
 1035              	.LVL122:
 1036 006a A847     		blx	r5
 1037              	.LVL123:
 1038 006c 0146     		mov	r1, r0
 1039 006e 4046     		mov	r0, r8
 1040 0070 A047     		blx	r4
 1041              	.LVL124:
 1042 0072 8046     		mov	r8, r0
 1043              	.LVL125:
 588:../LIB_HW/Hw_IMU.c ****     tmpOffsets[1] += raw[4];
 1044              		.loc 1 588 0
 1045 0074 0598     		ldr	r0, [sp, #20]
 1046              	.LVL126:
 1047 0076 A847     		blx	r5
 1048              	.LVL127:
 1049 0078 0146     		mov	r1, r0
 1050 007a 3846     		mov	r0, r7
 1051 007c A047     		blx	r4
 1052              	.LVL128:
 1053 007e 0746     		mov	r7, r0
 1054              	.LVL129:
 589:../LIB_HW/Hw_IMU.c ****     tmpOffsets[2] += raw[5];
 1055              		.loc 1 589 0
 1056 0080 0698     		ldr	r0, [sp, #24]
 1057              	.LVL130:
 1058 0082 A847     		blx	r5
 1059              	.LVL131:
 1060 0084 0146     		mov	r1, r0
 1061 0086 4846     		mov	r0, r9
 1062 0088 A047     		blx	r4
 1063              	.LVL132:
 1064 008a 8146     		mov	r9, r0
 1065              	.LVL133:
 1066              	.L30:
 1067              	.LBE4:
 592:../LIB_HW/Hw_IMU.c ****   }
 593:../LIB_HW/Hw_IMU.c ****   
 594:../LIB_HW/Hw_IMU.c ****   gyro_off_x = tmpOffsets[0] / totSamples;
 1068              		.loc 1 594 0
 1069 008c 0021     		movs	r1, #0
 1070 008e 104D     		ldr	r5, .L31+8
 1071 0090 C4F24001 		movt	r1, 16448
 1072 0094 4046     		mov	r0, r8
 1073              	.LVL134:
 1074 0096 A847     		blx	r5
 1075              	.LVL135:
 1076 0098 0E4C     		ldr	r4, .L31+12
 1077 009a A047     		blx	r4
 1078              	.LVL136:
 1079 009c 0E4B     		ldr	r3, .L31+16
 595:../LIB_HW/Hw_IMU.c ****   gyro_off_y = tmpOffsets[1] / totSamples;
 1080              		.loc 1 595 0
 1081 009e 0021     		movs	r1, #0
 594:../LIB_HW/Hw_IMU.c ****   gyro_off_x = tmpOffsets[0] / totSamples;
 1082              		.loc 1 594 0
 1083 00a0 1880     		strh	r0, [r3, #0]	@ movhi
 1084              		.loc 1 595 0
 1085 00a2 C4F24001 		movt	r1, 16448
 1086 00a6 3846     		mov	r0, r7
 1087 00a8 A847     		blx	r5
 1088              	.LVL137:
 1089 00aa A047     		blx	r4
 1090              	.LVL138:
 1091 00ac 0B4A     		ldr	r2, .L31+20
 596:../LIB_HW/Hw_IMU.c ****   gyro_off_z = tmpOffsets[2] / totSamples;
 1092              		.loc 1 596 0
 1093 00ae 0021     		movs	r1, #0
 595:../LIB_HW/Hw_IMU.c ****   gyro_off_y = tmpOffsets[1] / totSamples;
 1094              		.loc 1 595 0
 1095 00b0 1080     		strh	r0, [r2, #0]	@ movhi
 1096              		.loc 1 596 0
 1097 00b2 C4F24001 		movt	r1, 16448
 1098 00b6 4846     		mov	r0, r9
 1099 00b8 A847     		blx	r5
 1100              	.LVL139:
 1101 00ba A047     		blx	r4
 1102              	.LVL140:
 1103 00bc 0849     		ldr	r1, .L31+24
 1104 00be 0880     		strh	r0, [r1, #0]	@ movhi
 597:../LIB_HW/Hw_IMU.c **** 
 598:../LIB_HW/Hw_IMU.c **** 
 599:../LIB_HW/Hw_IMU.c ****   return Err;
 600:../LIB_HW/Hw_IMU.c **** }
 1105              		.loc 1 600 0
 1106 00c0 3046     		mov	r0, r6
 1107 00c2 0CB0     		add	sp, sp, #48
 1108 00c4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 1109              	.L32:
 1110              		.align	2
 1111              	.L31:
 1112 00c8 00000000 		.word	__aeabi_i2f
 1113 00cc 00000000 		.word	__aeabi_fadd
 1114 00d0 00000000 		.word	__aeabi_fdiv
 1115 00d4 00000000 		.word	__aeabi_f2iz
 1116 00d8 00000000 		.word	gyro_off_x
 1117 00dc 00000000 		.word	gyro_off_y
 1118 00e0 00000000 		.word	gyro_off_z
 1119 00e4 00000000 		.word	Hw_IMU_FreeIMU_getRawValues
 1120              		.cfi_endproc
 1121              	.LFE7:
 1123              		.global	__aeabi_f2d
 1124              		.section	.text.arr3_rad_to_deg,"ax",%progbits
 1125              		.align	2
 1126              		.global	arr3_rad_to_deg
 1127              		.thumb
 1128              		.thumb_func
 1130              	arr3_rad_to_deg:
 1131              	.LFB13:
 601:../LIB_HW/Hw_IMU.c **** 
 602:../LIB_HW/Hw_IMU.c **** 
 603:../LIB_HW/Hw_IMU.c **** 
 604:../LIB_HW/Hw_IMU.c **** 
 605:../LIB_HW/Hw_IMU.c **** 
 606:../LIB_HW/Hw_IMU.c **** /*---------------------------------------------------------------------------
 607:../LIB_HW/Hw_IMU.c ****      TITLE   : Hw_IMU_FreeIMU_zeroGyro
 608:../LIB_HW/Hw_IMU.c ****      WORK    : 
 609:../LIB_HW/Hw_IMU.c ****      ARG     : void
 610:../LIB_HW/Hw_IMU.c ****      RET     : void
 611:../LIB_HW/Hw_IMU.c **** ---------------------------------------------------------------------------*/
 612:../LIB_HW/Hw_IMU.c **** void Hw_IMU_FreeIMU_AHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx
 613:../LIB_HW/Hw_IMU.c **** {
 614:../LIB_HW/Hw_IMU.c **** 
 615:../LIB_HW/Hw_IMU.c ****   float recipNorm;
 616:../LIB_HW/Hw_IMU.c ****   float q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
 617:../LIB_HW/Hw_IMU.c ****   float halfex = 0.0f, halfey = 0.0f, halfez = 0.0f;
 618:../LIB_HW/Hw_IMU.c ****   float qa, qb, qc;
 619:../LIB_HW/Hw_IMU.c **** 
 620:../LIB_HW/Hw_IMU.c ****   // Auxiliary variables to avoid repeated arithmetic
 621:../LIB_HW/Hw_IMU.c ****   q0q0 = q0 * q0;
 622:../LIB_HW/Hw_IMU.c ****   q0q1 = q0 * q1;
 623:../LIB_HW/Hw_IMU.c ****   q0q2 = q0 * q2;
 624:../LIB_HW/Hw_IMU.c ****   q0q3 = q0 * q3;
 625:../LIB_HW/Hw_IMU.c ****   q1q1 = q1 * q1;
 626:../LIB_HW/Hw_IMU.c ****   q1q2 = q1 * q2;
 627:../LIB_HW/Hw_IMU.c ****   q1q3 = q1 * q3;
 628:../LIB_HW/Hw_IMU.c ****   q2q2 = q2 * q2;
 629:../LIB_HW/Hw_IMU.c ****   q2q3 = q2 * q3;
 630:../LIB_HW/Hw_IMU.c ****   q3q3 = q3 * q3;
 631:../LIB_HW/Hw_IMU.c ****   
 632:../LIB_HW/Hw_IMU.c **** 
 633:../LIB_HW/Hw_IMU.c ****   // Use magnetometer measurement only when valid (avoids NaN in magnetometer normalisation)
 634:../LIB_HW/Hw_IMU.c ****   if((mx != 0.0f) && (my != 0.0f) && (mz != 0.0f)) 
 635:../LIB_HW/Hw_IMU.c ****   {
 636:../LIB_HW/Hw_IMU.c ****     float hx, hy, bx, bz;
 637:../LIB_HW/Hw_IMU.c ****     float halfwx, halfwy, halfwz;
 638:../LIB_HW/Hw_IMU.c ****     
 639:../LIB_HW/Hw_IMU.c **** 
 640:../LIB_HW/Hw_IMU.c ****     // Normalise magnetometer measurement
 641:../LIB_HW/Hw_IMU.c ****     recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 642:../LIB_HW/Hw_IMU.c ****     mx *= recipNorm;
 643:../LIB_HW/Hw_IMU.c ****     my *= recipNorm;
 644:../LIB_HW/Hw_IMU.c ****     mz *= recipNorm;
 645:../LIB_HW/Hw_IMU.c ****     
 646:../LIB_HW/Hw_IMU.c ****     // Reference direction of Earth's magnetic field
 647:../LIB_HW/Hw_IMU.c ****     hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
 648:../LIB_HW/Hw_IMU.c ****     hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz * (q2q3 - q0q1));
 649:../LIB_HW/Hw_IMU.c ****     bx = sqrt(hx * hx + hy * hy);
 650:../LIB_HW/Hw_IMU.c ****     bz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));
 651:../LIB_HW/Hw_IMU.c ****     
 652:../LIB_HW/Hw_IMU.c ****     // Estimated direction of magnetic field
 653:../LIB_HW/Hw_IMU.c ****     halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
 654:../LIB_HW/Hw_IMU.c ****     halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
 655:../LIB_HW/Hw_IMU.c ****     halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);
 656:../LIB_HW/Hw_IMU.c ****     
 657:../LIB_HW/Hw_IMU.c **** 
 658:../LIB_HW/Hw_IMU.c ****     // Error is sum of cross product between estimated direction and measured direction of field ve
 659:../LIB_HW/Hw_IMU.c ****     halfex = (my * halfwz - mz * halfwy);
 660:../LIB_HW/Hw_IMU.c ****     halfey = (mz * halfwx - mx * halfwz);
 661:../LIB_HW/Hw_IMU.c ****     halfez = (mx * halfwy - my * halfwx);
 662:../LIB_HW/Hw_IMU.c **** 
 663:../LIB_HW/Hw_IMU.c **** 
 664:../LIB_HW/Hw_IMU.c **** 	Lb_printf("mg %d %d %d  %d %d %d  %d %d %d \n", 
 665:../LIB_HW/Hw_IMU.c **** 			(s16)(halfex*10000), (s16)(halfey*10000), (s16)(halfez*10000),
 666:../LIB_HW/Hw_IMU.c **** 			(s16)(halfwx*10000), (s16)(halfwy*10000), (s16)(halfwz*10000),
 667:../LIB_HW/Hw_IMU.c **** 			(s16)(mx*1000), (s16)(my*1000), (s16)(mz*1000) );
 668:../LIB_HW/Hw_IMU.c **** 
 669:../LIB_HW/Hw_IMU.c ****   }
 670:../LIB_HW/Hw_IMU.c **** 
 671:../LIB_HW/Hw_IMU.c ****   // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalis
 672:../LIB_HW/Hw_IMU.c ****   if((ax != 0.0f) && (ay != 0.0f) && (az != 0.0f)) 
 673:../LIB_HW/Hw_IMU.c ****   {
 674:../LIB_HW/Hw_IMU.c ****     float halfvx, halfvy, halfvz;
 675:../LIB_HW/Hw_IMU.c ****     
 676:../LIB_HW/Hw_IMU.c ****     // Normalise accelerometer measurement
 677:../LIB_HW/Hw_IMU.c ****     recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 678:../LIB_HW/Hw_IMU.c ****     ax *= recipNorm;
 679:../LIB_HW/Hw_IMU.c ****     ay *= recipNorm;
 680:../LIB_HW/Hw_IMU.c ****     az *= recipNorm;
 681:../LIB_HW/Hw_IMU.c ****     
 682:../LIB_HW/Hw_IMU.c ****     // Estimated direction of gravity
 683:../LIB_HW/Hw_IMU.c ****     halfvx = q1q3 - q0q2;
 684:../LIB_HW/Hw_IMU.c ****     halfvy = q0q1 + q2q3;
 685:../LIB_HW/Hw_IMU.c ****     halfvz = q0q0 - 0.5f + q3q3;
 686:../LIB_HW/Hw_IMU.c ****   
 687:../LIB_HW/Hw_IMU.c **** 
 688:../LIB_HW/Hw_IMU.c ****     // Error is sum of cross product between estimated direction and measured direction of field ve
 689:../LIB_HW/Hw_IMU.c ****     halfex += (ay * halfvz - az * halfvy);
 690:../LIB_HW/Hw_IMU.c ****     halfey += (az * halfvx - ax * halfvz);
 691:../LIB_HW/Hw_IMU.c ****     halfez += (ax * halfvy - ay * halfvx);
 692:../LIB_HW/Hw_IMU.c ****   }
 693:../LIB_HW/Hw_IMU.c **** 
 694:../LIB_HW/Hw_IMU.c ****   // Apply feedback only when valid data has been gathered from the accelerometer or magnetometer
 695:../LIB_HW/Hw_IMU.c ****   if(halfex != 0.0f && halfey != 0.0f && halfez != 0.0f) 
 696:../LIB_HW/Hw_IMU.c ****   {
 697:../LIB_HW/Hw_IMU.c ****     // Compute and apply integral feedback if enabled
 698:../LIB_HW/Hw_IMU.c ****     if(twoKi > 0.0f) {
 699:../LIB_HW/Hw_IMU.c ****       integralFBx += twoKi * halfex * (1.0f / sampleFreq);  // integral error scaled by Ki
 700:../LIB_HW/Hw_IMU.c ****       integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 701:../LIB_HW/Hw_IMU.c ****       integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 702:../LIB_HW/Hw_IMU.c ****       gx += integralFBx;  // apply integral feedback
 703:../LIB_HW/Hw_IMU.c ****       gy += integralFBy;
 704:../LIB_HW/Hw_IMU.c ****       gz += integralFBz;
 705:../LIB_HW/Hw_IMU.c ****     }
 706:../LIB_HW/Hw_IMU.c ****     else {
 707:../LIB_HW/Hw_IMU.c ****       integralFBx = 0.0f; // prevent integral windup
 708:../LIB_HW/Hw_IMU.c ****       integralFBy = 0.0f;
 709:../LIB_HW/Hw_IMU.c ****       integralFBz = 0.0f;
 710:../LIB_HW/Hw_IMU.c ****     }
 711:../LIB_HW/Hw_IMU.c **** 
 712:../LIB_HW/Hw_IMU.c ****     // Apply proportional feedback
 713:../LIB_HW/Hw_IMU.c ****     gx += twoKp * halfex;
 714:../LIB_HW/Hw_IMU.c ****     gy += twoKp * halfey;
 715:../LIB_HW/Hw_IMU.c ****     gz += twoKp * halfez;
 716:../LIB_HW/Hw_IMU.c ****   }
 717:../LIB_HW/Hw_IMU.c ****   
 718:../LIB_HW/Hw_IMU.c ****   // Integrate rate of change of quaternion
 719:../LIB_HW/Hw_IMU.c ****   gx *= (0.5f * (1.0f / sampleFreq));   // pre-multiply common factors
 720:../LIB_HW/Hw_IMU.c ****   gy *= (0.5f * (1.0f / sampleFreq));
 721:../LIB_HW/Hw_IMU.c ****   gz *= (0.5f * (1.0f / sampleFreq));
 722:../LIB_HW/Hw_IMU.c ****   qa = q0;
 723:../LIB_HW/Hw_IMU.c ****   qb = q1;
 724:../LIB_HW/Hw_IMU.c ****   qc = q2;
 725:../LIB_HW/Hw_IMU.c ****   q0 += (-qb * gx - qc * gy - q3 * gz);
 726:../LIB_HW/Hw_IMU.c ****   q1 += (qa * gx + qc * gz - q3 * gy);
 727:../LIB_HW/Hw_IMU.c ****   q2 += (qa * gy - qb * gz + q3 * gx);
 728:../LIB_HW/Hw_IMU.c ****   q3 += (qa * gz + qb * gy - qc * gx);
 729:../LIB_HW/Hw_IMU.c ****   
 730:../LIB_HW/Hw_IMU.c ****   // Normalise quaternion
 731:../LIB_HW/Hw_IMU.c ****   recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 732:../LIB_HW/Hw_IMU.c ****   q0 *= recipNorm;
 733:../LIB_HW/Hw_IMU.c ****   q1 *= recipNorm;
 734:../LIB_HW/Hw_IMU.c ****   q2 *= recipNorm;
 735:../LIB_HW/Hw_IMU.c ****   q3 *= recipNorm;
 736:../LIB_HW/Hw_IMU.c **** }
 737:../LIB_HW/Hw_IMU.c **** 
 738:../LIB_HW/Hw_IMU.c **** 
 739:../LIB_HW/Hw_IMU.c **** 
 740:../LIB_HW/Hw_IMU.c **** 
 741:../LIB_HW/Hw_IMU.c **** 
 742:../LIB_HW/Hw_IMU.c **** /*---------------------------------------------------------------------------
 743:../LIB_HW/Hw_IMU.c ****      TITLE   : Hw_IMU_FreeIMU_getQ
 744:../LIB_HW/Hw_IMU.c ****      WORK    : 
 745:../LIB_HW/Hw_IMU.c ****      ARG     : void
 746:../LIB_HW/Hw_IMU.c ****      RET     : void
 747:../LIB_HW/Hw_IMU.c **** ---------------------------------------------------------------------------*/
 748:../LIB_HW/Hw_IMU.c **** u16 Hw_IMU_FreeIMU_getQ(float * q) 
 749:../LIB_HW/Hw_IMU.c **** {
 750:../LIB_HW/Hw_IMU.c ****   u16 Err;
 751:../LIB_HW/Hw_IMU.c ****   u16 time_gap;
 752:../LIB_HW/Hw_IMU.c **** 
 753:../LIB_HW/Hw_IMU.c ****   float val[9];
 754:../LIB_HW/Hw_IMU.c ****   
 755:../LIB_HW/Hw_IMU.c ****   Err = Hw_IMU_FreeIMU_getValues(val);
 756:../LIB_HW/Hw_IMU.c ****   
 757:../LIB_HW/Hw_IMU.c ****   DEBUG_PRINT(val[3] * M_PI/180);
 758:../LIB_HW/Hw_IMU.c ****   DEBUG_PRINT(val[4] * M_PI/180);
 759:../LIB_HW/Hw_IMU.c ****   DEBUG_PRINT(val[5] * M_PI/180);
 760:../LIB_HW/Hw_IMU.c ****   DEBUG_PRINT(val[0]);
 761:../LIB_HW/Hw_IMU.c ****   DEBUG_PRINT(val[1]);
 762:../LIB_HW/Hw_IMU.c ****   DEBUG_PRINT(val[2]);
 763:../LIB_HW/Hw_IMU.c ****   DEBUG_PRINT(val[6]);
 764:../LIB_HW/Hw_IMU.c ****   DEBUG_PRINT(val[7]);
 765:../LIB_HW/Hw_IMU.c ****   DEBUG_PRINT(val[8]);
 766:../LIB_HW/Hw_IMU.c ****   
 767:../LIB_HW/Hw_IMU.c ****   //now = micros();
 768:../LIB_HW/Hw_IMU.c ****   now = Hw_Timer_Get_u16Count_Usec();
 769:../LIB_HW/Hw_IMU.c ****   time_gap = now - lastUpdate;
 770:../LIB_HW/Hw_IMU.c **** 
 771:../LIB_HW/Hw_IMU.c ****   sampleFreq = 1.0 / ((time_gap) / 1000000.0);
 772:../LIB_HW/Hw_IMU.c **** 
 773:../LIB_HW/Hw_IMU.c ****   //Lb_printf("%d us %d \n", (u16)(sampleFreq*1000), time_gap);
 774:../LIB_HW/Hw_IMU.c **** 
 775:../LIB_HW/Hw_IMU.c ****   lastUpdate = now;
 776:../LIB_HW/Hw_IMU.c **** 
 777:../LIB_HW/Hw_IMU.c **** 
 778:../LIB_HW/Hw_IMU.c **** 
 779:../LIB_HW/Hw_IMU.c ****   // gyro values are expressed in deg/sec, the * M_PI/180 will convert it to radians/sec
 780:../LIB_HW/Hw_IMU.c ****   Hw_IMU_FreeIMU_AHRSupdate(val[3] * M_PI/180, val[4] * M_PI/180, val[5] * M_PI/180, val[0], val[1]
 781:../LIB_HW/Hw_IMU.c **** 
 782:../LIB_HW/Hw_IMU.c ****   
 783:../LIB_HW/Hw_IMU.c ****   q[0] = q0;
 784:../LIB_HW/Hw_IMU.c ****   q[1] = q1;
 785:../LIB_HW/Hw_IMU.c ****   q[2] = q2;
 786:../LIB_HW/Hw_IMU.c ****   q[3] = q3;
 787:../LIB_HW/Hw_IMU.c **** 
 788:../LIB_HW/Hw_IMU.c ****   return Err;
 789:../LIB_HW/Hw_IMU.c **** }
 790:../LIB_HW/Hw_IMU.c **** 
 791:../LIB_HW/Hw_IMU.c **** 
 792:../LIB_HW/Hw_IMU.c **** 
 793:../LIB_HW/Hw_IMU.c **** 
 794:../LIB_HW/Hw_IMU.c **** 
 795:../LIB_HW/Hw_IMU.c **** /*---------------------------------------------------------------------------
 796:../LIB_HW/Hw_IMU.c ****      TITLE   : Hw_IMU_FreeIMU_getEulerRad
 797:../LIB_HW/Hw_IMU.c ****      WORK    : 
 798:../LIB_HW/Hw_IMU.c ****      ARG     : void
 799:../LIB_HW/Hw_IMU.c ****      RET     : void
 800:../LIB_HW/Hw_IMU.c **** ---------------------------------------------------------------------------*/
 801:../LIB_HW/Hw_IMU.c **** u16 Hw_IMU_FreeIMU_getEulerRad(float * angles) 
 802:../LIB_HW/Hw_IMU.c **** {
 803:../LIB_HW/Hw_IMU.c ****   u16 Err;
 804:../LIB_HW/Hw_IMU.c ****   float q[4]; // quaternion
 805:../LIB_HW/Hw_IMU.c ****   Err = Hw_IMU_FreeIMU_getQ(q);
 806:../LIB_HW/Hw_IMU.c **** 
 807:../LIB_HW/Hw_IMU.c ****   angles[0] = atan2(2 * q[1] * q[2] - 2 * q[0] * q[3], 2 * q[0]*q[0] + 2 * q[1] * q[1] - 1); // psi
 808:../LIB_HW/Hw_IMU.c ****   angles[1] = -asin(2 * q[1] * q[3] + 2 * q[0] * q[2]); // theta
 809:../LIB_HW/Hw_IMU.c ****   angles[2] = atan2(2 * q[2] * q[3] - 2 * q[0] * q[1], 2 * q[0] * q[0] + 2 * q[3] * q[3] - 1); // p
 810:../LIB_HW/Hw_IMU.c **** 
 811:../LIB_HW/Hw_IMU.c ****   return Err;
 812:../LIB_HW/Hw_IMU.c **** }
 813:../LIB_HW/Hw_IMU.c **** 
 814:../LIB_HW/Hw_IMU.c **** 
 815:../LIB_HW/Hw_IMU.c **** 
 816:../LIB_HW/Hw_IMU.c **** 
 817:../LIB_HW/Hw_IMU.c **** /*---------------------------------------------------------------------------
 818:../LIB_HW/Hw_IMU.c ****      TITLE   : Hw_IMU_FreeIMU_getYawPitchRollRad
 819:../LIB_HW/Hw_IMU.c ****      WORK    : 
 820:../LIB_HW/Hw_IMU.c ****      ARG     : void
 821:../LIB_HW/Hw_IMU.c ****      RET     : void
 822:../LIB_HW/Hw_IMU.c **** ---------------------------------------------------------------------------*/
 823:../LIB_HW/Hw_IMU.c **** u16 Hw_IMU_FreeIMU_getYawPitchRollRad(float * ypr) 
 824:../LIB_HW/Hw_IMU.c **** {
 825:../LIB_HW/Hw_IMU.c ****   u16 Err;
 826:../LIB_HW/Hw_IMU.c ****   float q[4]; // quaternion
 827:../LIB_HW/Hw_IMU.c ****   float gx, gy, gz; // estimated gravity direction
 828:../LIB_HW/Hw_IMU.c ****   
 829:../LIB_HW/Hw_IMU.c ****   Err = Hw_IMU_FreeIMU_getQ(q);
 830:../LIB_HW/Hw_IMU.c ****   
 831:../LIB_HW/Hw_IMU.c ****   gx = 2 * (q[1]*q[3] - q[0]*q[2]);
 832:../LIB_HW/Hw_IMU.c ****   gy = 2 * (q[0]*q[1] + q[2]*q[3]);
 833:../LIB_HW/Hw_IMU.c ****   gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 834:../LIB_HW/Hw_IMU.c ****   
 835:../LIB_HW/Hw_IMU.c ****   ypr[0] = atan2(2 * q[1] * q[2] - 2 * q[0] * q[3], 2 * q[0]*q[0] + 2 * q[1] * q[1] - 1);
 836:../LIB_HW/Hw_IMU.c ****   ypr[1] = atan(gx / sqrt(gy*gy + gz*gz));
 837:../LIB_HW/Hw_IMU.c ****   ypr[2] = atan(gy / sqrt(gx*gx + gz*gz));
 838:../LIB_HW/Hw_IMU.c **** 
 839:../LIB_HW/Hw_IMU.c ****   return Err;
 840:../LIB_HW/Hw_IMU.c **** }
 841:../LIB_HW/Hw_IMU.c **** 
 842:../LIB_HW/Hw_IMU.c **** 
 843:../LIB_HW/Hw_IMU.c **** 
 844:../LIB_HW/Hw_IMU.c **** 
 845:../LIB_HW/Hw_IMU.c **** 
 846:../LIB_HW/Hw_IMU.c **** /*---------------------------------------------------------------------------
 847:../LIB_HW/Hw_IMU.c ****      TITLE   : Hw_IMU_FreeIMU_getYawPitchRollRad
 848:../LIB_HW/Hw_IMU.c ****      WORK    : 
 849:../LIB_HW/Hw_IMU.c ****      ARG     : void
 850:../LIB_HW/Hw_IMU.c ****      RET     : void
 851:../LIB_HW/Hw_IMU.c **** ---------------------------------------------------------------------------*/
 852:../LIB_HW/Hw_IMU.c **** u16 Hw_IMU_FreeIMU_getYawPitchRoll(float * ypr) 
 853:../LIB_HW/Hw_IMU.c **** {
 854:../LIB_HW/Hw_IMU.c **** 	u16 Err;
 855:../LIB_HW/Hw_IMU.c **** 
 856:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_FreeIMU_getYawPitchRollRad(ypr);
 857:../LIB_HW/Hw_IMU.c **** 	arr3_rad_to_deg(ypr);
 858:../LIB_HW/Hw_IMU.c **** 
 859:../LIB_HW/Hw_IMU.c **** 	return Err;
 860:../LIB_HW/Hw_IMU.c **** }
 861:../LIB_HW/Hw_IMU.c **** 
 862:../LIB_HW/Hw_IMU.c **** 
 863:../LIB_HW/Hw_IMU.c **** 
 864:../LIB_HW/Hw_IMU.c **** 
 865:../LIB_HW/Hw_IMU.c **** /**
 866:../LIB_HW/Hw_IMU.c ****  * Converts a 3 elements array arr of angles expressed in radians into degrees
 867:../LIB_HW/Hw_IMU.c **** */
 868:../LIB_HW/Hw_IMU.c **** void arr3_rad_to_deg(float * arr) {
 1132              		.loc 1 868 0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 0
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              	.LVL141:
 1137 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1138              	.LCFI12:
 1139              		.cfi_def_cfa_offset 24
 1140              		.cfi_offset 3, -24
 1141              		.cfi_offset 4, -20
 1142              		.cfi_offset 5, -16
 1143              		.cfi_offset 6, -12
 1144              		.cfi_offset 7, -8
 1145              		.cfi_offset 14, -4
 869:../LIB_HW/Hw_IMU.c ****   arr[0] *= 180/M_PI;
 1146              		.loc 1 869 0
 1147 0002 40F20007 		movw	r7, #:lower16:__aeabi_f2d
 868:../LIB_HW/Hw_IMU.c **** void arr3_rad_to_deg(float * arr) {
 1148              		.loc 1 868 0
 1149 0006 0446     		mov	r4, r0
 1150              		.loc 1 869 0
 1151 0008 C0F20007 		movt	r7, #:upper16:__aeabi_f2d
 1152 000c 0068     		ldr	r0, [r0, #0]	@ float
 1153              	.LVL142:
 1154 000e 40F20006 		movw	r6, #:lower16:__aeabi_dmul
 1155 0012 B847     		blx	r7
 1156              	.LVL143:
 1157 0014 0EA3     		adr	r3, .L34
 1158 0016 D3E90023 		ldrd	r2, [r3]
 1159 001a C0F20006 		movt	r6, #:upper16:__aeabi_dmul
 1160 001e 40F20005 		movw	r5, #:lower16:__aeabi_d2f
 1161 0022 B047     		blx	r6
 1162              	.LVL144:
 1163 0024 C0F20005 		movt	r5, #:upper16:__aeabi_d2f
 1164 0028 A847     		blx	r5
 1165              	.LVL145:
 1166 002a 2060     		str	r0, [r4, #0]	@ float
 870:../LIB_HW/Hw_IMU.c ****   arr[1] *= 180/M_PI;
 1167              		.loc 1 870 0
 1168 002c 6068     		ldr	r0, [r4, #4]	@ float
 1169 002e B847     		blx	r7
 1170              	.LVL146:
 1171 0030 07A3     		adr	r3, .L34
 1172 0032 D3E90023 		ldrd	r2, [r3]
 1173 0036 B047     		blx	r6
 1174              	.LVL147:
 1175 0038 A847     		blx	r5
 1176              	.LVL148:
 1177 003a 6060     		str	r0, [r4, #4]	@ float
 871:../LIB_HW/Hw_IMU.c ****   arr[2] *= 180/M_PI;
 1178              		.loc 1 871 0
 1179 003c A068     		ldr	r0, [r4, #8]	@ float
 1180 003e B847     		blx	r7
 1181              	.LVL149:
 1182 0040 03A3     		adr	r3, .L34
 1183 0042 D3E90023 		ldrd	r2, [r3]
 1184 0046 B047     		blx	r6
 1185              	.LVL150:
 1186 0048 A847     		blx	r5
 1187              	.LVL151:
 1188 004a A060     		str	r0, [r4, #8]	@ float
 1189 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1190              	.L35:
 1191 004e 00BF     		.align	3
 1192              	.L34:
 1193 0050 F8C1631A 		.word	442745336
 1194 0054 DCA54C40 		.word	1078765020
 1195              		.cfi_endproc
 1196              	.LFE13:
 1198              		.global	__aeabi_fmul
 1199              		.section	.text.invSqrt,"ax",%progbits
 1200              		.align	2
 1201              		.global	invSqrt
 1202              		.thumb
 1203              		.thumb_func
 1205              	invSqrt:
 1206              	.LFB14:
 872:../LIB_HW/Hw_IMU.c **** }
 873:../LIB_HW/Hw_IMU.c **** 
 874:../LIB_HW/Hw_IMU.c **** 
 875:../LIB_HW/Hw_IMU.c **** /**
 876:../LIB_HW/Hw_IMU.c ****  * Fast inverse square root implementation
 877:../LIB_HW/Hw_IMU.c ****  * @see http://en.wikipedia.org/wiki/Fast_inverse_square_root
 878:../LIB_HW/Hw_IMU.c **** */
 879:../LIB_HW/Hw_IMU.c **** float invSqrt(float number) 
 880:../LIB_HW/Hw_IMU.c **** {
 1207              		.loc 1 880 0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 16
 1210              		@ frame_needed = 0, uses_anonymous_args = 0
 1211              	.LVL152:
 1212 0000 70B5     		push	{r4, r5, r6, lr}
 1213              	.LCFI13:
 1214              		.cfi_def_cfa_offset 16
 1215              		.cfi_offset 4, -16
 1216              		.cfi_offset 5, -12
 1217              		.cfi_offset 6, -8
 1218              		.cfi_offset 14, -4
 881:../LIB_HW/Hw_IMU.c ****   volatile long i;
 882:../LIB_HW/Hw_IMU.c ****   volatile float x, y;
 883:../LIB_HW/Hw_IMU.c ****   volatile const float f = 1.5F;
 884:../LIB_HW/Hw_IMU.c **** 
 885:../LIB_HW/Hw_IMU.c ****   x = number * 0.5F;
 1219              		.loc 1 885 0
 1220 0002 40F20004 		movw	r4, #:lower16:__aeabi_fmul
 880:../LIB_HW/Hw_IMU.c **** {
 1221              		.loc 1 880 0
 1222 0006 84B0     		sub	sp, sp, #16
 1223              	.LCFI14:
 1224              		.cfi_def_cfa_offset 32
 1225              		.loc 1 885 0
 1226 0008 C0F20004 		movt	r4, #:upper16:__aeabi_fmul
 883:../LIB_HW/Hw_IMU.c ****   volatile const float f = 1.5F;
 1227              		.loc 1 883 0
 1228 000c 4FF07F53 		mov	r3, #1069547520
 1229              		.loc 1 885 0
 1230 0010 4FF07C51 		mov	r1, #1056964608
 883:../LIB_HW/Hw_IMU.c ****   volatile const float f = 1.5F;
 1231              		.loc 1 883 0
 1232 0014 0393     		str	r3, [sp, #12]	@ float
 1233              	.LVL153:
 880:../LIB_HW/Hw_IMU.c **** {
 1234              		.loc 1 880 0
 1235 0016 0546     		mov	r5, r0
 1236              		.loc 1 885 0
 1237 0018 A047     		blx	r4
 1238              	.LVL154:
 1239 001a 0190     		str	r0, [sp, #4]	@ float
 1240              	.LVL155:
 886:../LIB_HW/Hw_IMU.c ****   y = number;
 1241              		.loc 1 886 0
 1242 001c 0295     		str	r5, [sp, #8]	@ float
 1243              	.LVL156:
 887:../LIB_HW/Hw_IMU.c ****   i = * ( long * ) &y;
 1244              		.loc 1 887 0
 1245 001e 029A     		ldr	r2, [sp, #8]
 1246              	.LVL157:
 888:../LIB_HW/Hw_IMU.c ****   i = 0x5f375a86 - ( i >> 1 );
 1247              		.loc 1 888 0
 1248 0020 45F68620 		movw	r0, #23174
 887:../LIB_HW/Hw_IMU.c ****   i = * ( long * ) &y;
 1249              		.loc 1 887 0
 1250 0024 0092     		str	r2, [sp, #0]
 1251              	.LVL158:
 1252              		.loc 1 888 0
 1253 0026 0099     		ldr	r1, [sp, #0]
 1254 0028 C5F63770 		movt	r0, 24375
 1255 002c A0EB6106 		sub	r6, r0, r1, asr #1
 1256              	.LVL159:
 1257 0030 0096     		str	r6, [sp, #0]
 1258              	.LVL160:
 889:../LIB_HW/Hw_IMU.c ****   y = * ( float * ) &i;
 1259              		.loc 1 889 0
 1260 0032 009D     		ldr	r5, [sp, #0]	@ float
 1261              	.LVL161:
 1262 0034 0295     		str	r5, [sp, #8]	@ float
 1263              	.LVL162:
 890:../LIB_HW/Hw_IMU.c ****   y = y * ( f - ( x * y * y ) );
 1264              		.loc 1 890 0
 1265 0036 039E     		ldr	r6, [sp, #12]	@ float
 1266              	.LVL163:
 1267 0038 0198     		ldr	r0, [sp, #4]	@ float
 1268 003a 0299     		ldr	r1, [sp, #8]	@ float
 1269 003c 029D     		ldr	r5, [sp, #8]	@ float
 1270              	.LVL164:
 1271 003e A047     		blx	r4
 1272              	.LVL165:
 1273 0040 2946     		mov	r1, r5
 1274 0042 A047     		blx	r4
 1275              	.LVL166:
 1276 0044 029D     		ldr	r5, [sp, #8]	@ float
 1277 0046 40F20003 		movw	r3, #:lower16:__aeabi_fsub
 1278 004a 0146     		mov	r1, r0
 1279 004c C0F20003 		movt	r3, #:upper16:__aeabi_fsub
 1280 0050 3046     		mov	r0, r6
 1281 0052 9847     		blx	r3
 1282              	.LVL167:
 1283 0054 2946     		mov	r1, r5
 1284 0056 A047     		blx	r4
 1285              	.LVL168:
 1286 0058 0290     		str	r0, [sp, #8]	@ float
 891:../LIB_HW/Hw_IMU.c ****   return y;
 1287              		.loc 1 891 0
 1288 005a 0298     		ldr	r0, [sp, #8]	@ float
 892:../LIB_HW/Hw_IMU.c **** }...
 1289              		.loc 1 892 0
 1290 005c 04B0     		add	sp, sp, #16
 1291 005e 70BD     		pop	{r4, r5, r6, pc}
 1292              		.cfi_endproc
 1293              	.LFE14:
 1295              		.global	__aeabi_fcmpeq
 1296              		.global	__aeabi_fcmpgt
 1297              		.section	.text.Hw_IMU_FreeIMU_AHRSupdate,"ax",%progbits
 1298              		.align	2
 1299              		.global	Hw_IMU_FreeIMU_AHRSupdate
 1300              		.thumb
 1301              		.thumb_func
 1303              	Hw_IMU_FreeIMU_AHRSupdate:
 1304              	.LFB8:
 613:../LIB_HW/Hw_IMU.c **** {
 1305              		.loc 1 613 0
 1306              		.cfi_startproc
 1307              		@ args = 20, pretend = 0, frame = 112
 1308              		@ frame_needed = 0, uses_anonymous_args = 0
 1309              	.LVL169:
 1310 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1311              	.LCFI15:
 1312              		.cfi_def_cfa_offset 36
 1313              		.cfi_offset 4, -36
 1314              		.cfi_offset 5, -32
 1315              		.cfi_offset 6, -28
 1316              		.cfi_offset 7, -24
 1317              		.cfi_offset 8, -20
 1318              		.cfi_offset 9, -16
 1319              		.cfi_offset 10, -12
 1320              		.cfi_offset 11, -8
 1321              		.cfi_offset 14, -4
 621:../LIB_HW/Hw_IMU.c ****   q0q0 = q0 * q0;
 1322              		.loc 1 621 0
 1323 0004 40F20004 		movw	r4, #:lower16:q0
 1324 0008 C0F20004 		movt	r4, #:upper16:q0
 1325 000c 2568     		ldr	r5, [r4, #0]	@ float
 622:../LIB_HW/Hw_IMU.c ****   q0q1 = q0 * q1;
 1326              		.loc 1 622 0
 1327 000e DFF864A2 		ldr	sl, .L72+32
 621:../LIB_HW/Hw_IMU.c ****   q0q0 = q0 * q0;
 1328              		.loc 1 621 0
 1329 0012 40F20006 		movw	r6, #:lower16:q0
 622:../LIB_HW/Hw_IMU.c ****   q0q1 = q0 * q1;
 1330              		.loc 1 622 0
 1331 0016 40F2000E 		movw	lr, #:lower16:q0
 613:../LIB_HW/Hw_IMU.c **** {
 1332              		.loc 1 613 0
 1333 001a A3B0     		sub	sp, sp, #140
 1334              	.LCFI16:
 1335              		.cfi_def_cfa_offset 176
 622:../LIB_HW/Hw_IMU.c ****   q0q1 = q0 * q1;
 1336              		.loc 1 622 0
 1337 001c C0F2000E 		movt	lr, #:upper16:q0
 621:../LIB_HW/Hw_IMU.c ****   q0q0 = q0 * q0;
 1338              		.loc 1 621 0
 1339 0020 C0F20006 		movt	r6, #:upper16:q0
 1340 0024 3768     		ldr	r7, [r6, #0]	@ float
 1341 0026 1B95     		str	r5, [sp, #108]	@ float
 622:../LIB_HW/Hw_IMU.c ****   q0q1 = q0 * q1;
 1342              		.loc 1 622 0
 1343 0028 DEF80060 		ldr	r6, [lr, #0]	@ float
 1344 002c DAF80050 		ldr	r5, [sl, #0]	@ float
 1345 0030 884C     		ldr	r4, .L72
 613:../LIB_HW/Hw_IMU.c **** {
 1346              		.loc 1 613 0
 1347 0032 1093     		str	r3, [sp, #64]	@ float
 621:../LIB_HW/Hw_IMU.c ****   q0q0 = q0 * q0;
 1348              		.loc 1 621 0
 1349 0034 1C97     		str	r7, [sp, #112]	@ float
 1350              	.LVL170:
 613:../LIB_HW/Hw_IMU.c **** {
 1351              		.loc 1 613 0
 1352 0036 0A90     		str	r0, [sp, #40]	@ float
 1353 0038 0B91     		str	r1, [sp, #44]	@ float
 622:../LIB_HW/Hw_IMU.c ****   q0q1 = q0 * q1;
 1354              		.loc 1 622 0
 1355 003a 3046     		mov	r0, r6
 1356              	.LVL171:
 1357 003c 2946     		mov	r1, r5
 1358              	.LVL172:
 613:../LIB_HW/Hw_IMU.c **** {
 1359              		.loc 1 613 0
 1360 003e 0F92     		str	r2, [sp, #60]	@ float
 622:../LIB_HW/Hw_IMU.c ****   q0q1 = q0 * q1;
 1361              		.loc 1 622 0
 1362 0040 A047     		blx	r4
 1363              	.LVL173:
 623:../LIB_HW/Hw_IMU.c ****   q0q2 = q0 * q2;
 1364              		.loc 1 623 0
 1365 0042 DFF834B2 		ldr	fp, .L72+36
 1366 0046 40F20002 		movw	r2, #:lower16:q0
 1367 004a C0F20002 		movt	r2, #:upper16:q0
 622:../LIB_HW/Hw_IMU.c ****   q0q1 = q0 * q1;
 1368              		.loc 1 622 0
 1369 004e 1690     		str	r0, [sp, #88]	@ float
 1370              	.LVL174:
 623:../LIB_HW/Hw_IMU.c ****   q0q2 = q0 * q2;
 1371              		.loc 1 623 0
 1372 0050 1068     		ldr	r0, [r2, #0]	@ float
 1373              	.LVL175:
 1374 0052 DBF80010 		ldr	r1, [fp, #0]	@ float
 1375 0056 A047     		blx	r4
 1376              	.LVL176:
 624:../LIB_HW/Hw_IMU.c ****   q0q3 = q0 * q3;
 1377              		.loc 1 624 0
 1378 0058 7F4D     		ldr	r5, .L72+4
 1379 005a 40F20003 		movw	r3, #:lower16:q0
 1380 005e C0F20003 		movt	r3, #:upper16:q0
 623:../LIB_HW/Hw_IMU.c ****   q0q2 = q0 * q2;
 1381              		.loc 1 623 0
 1382 0062 1790     		str	r0, [sp, #92]	@ float
 1383              	.LVL177:
 624:../LIB_HW/Hw_IMU.c ****   q0q3 = q0 * q3;
 1384              		.loc 1 624 0
 1385 0064 1868     		ldr	r0, [r3, #0]	@ float
 1386              	.LVL178:
 1387 0066 2968     		ldr	r1, [r5, #0]	@ float
 625:../LIB_HW/Hw_IMU.c ****   q1q1 = q1 * q1;
 1388              		.loc 1 625 0
 1389 0068 DAF80070 		ldr	r7, [sl, #0]	@ float
 1390              	.LVL179:
 1391 006c DAF80060 		ldr	r6, [sl, #0]	@ float
 624:../LIB_HW/Hw_IMU.c ****   q0q3 = q0 * q3;
 1392              		.loc 1 624 0
 1393 0070 0E90     		str	r0, [sp, #56]	@ float
 626:../LIB_HW/Hw_IMU.c ****   q1q2 = q1 * q2;
 1394              		.loc 1 626 0
 1395 0072 DAF80090 		ldr	r9, [sl, #0]	@ float
 624:../LIB_HW/Hw_IMU.c ****   q0q3 = q0 * q3;
 1396              		.loc 1 624 0
 1397 0076 1391     		str	r1, [sp, #76]	@ float
 1398              	.LVL180:
 626:../LIB_HW/Hw_IMU.c ****   q1q2 = q1 * q2;
 1399              		.loc 1 626 0
 1400 0078 DBF80080 		ldr	r8, [fp, #0]	@ float
 625:../LIB_HW/Hw_IMU.c ****   q1q1 = q1 * q1;
 1401              		.loc 1 625 0
 1402 007c 1597     		str	r7, [sp, #84]	@ float
 627:../LIB_HW/Hw_IMU.c ****   q1q3 = q1 * q3;
 1403              		.loc 1 627 0
 1404 007e DAF80000 		ldr	r0, [sl, #0]	@ float
 1405              	.LVL181:
 625:../LIB_HW/Hw_IMU.c ****   q1q1 = q1 * q1;
 1406              		.loc 1 625 0
 1407 0082 1496     		str	r6, [sp, #80]	@ float
 1408              	.LVL182:
 627:../LIB_HW/Hw_IMU.c ****   q1q3 = q1 * q3;
 1409              		.loc 1 627 0
 1410 0084 2968     		ldr	r1, [r5, #0]	@ float
 1411              	.LVL183:
 1412 0086 A047     		blx	r4
 1413              	.LVL184:
 628:../LIB_HW/Hw_IMU.c ****   q2q2 = q2 * q2;
 1414              		.loc 1 628 0
 1415 0088 DBF80070 		ldr	r7, [fp, #0]	@ float
 1416              	.LVL185:
 627:../LIB_HW/Hw_IMU.c ****   q1q3 = q1 * q3;
 1417              		.loc 1 627 0
 1418 008c 1890     		str	r0, [sp, #96]	@ float
 1419              	.LVL186:
 628:../LIB_HW/Hw_IMU.c ****   q2q2 = q2 * q2;
 1420              		.loc 1 628 0
 1421 008e DBF80060 		ldr	r6, [fp, #0]	@ float
 1422              	.LVL187:
 629:../LIB_HW/Hw_IMU.c ****   q2q3 = q2 * q3;
 1423              		.loc 1 629 0
 1424 0092 DBF80000 		ldr	r0, [fp, #0]	@ float
 1425              	.LVL188:
 1426 0096 2968     		ldr	r1, [r5, #0]	@ float
 1427 0098 A047     		blx	r4
 1428              	.LVL189:
 1429 009a 1990     		str	r0, [sp, #100]	@ float
 1430              	.LVL190:
 630:../LIB_HW/Hw_IMU.c ****   q3q3 = q3 * q3;
 1431              		.loc 1 630 0
 1432 009c 2868     		ldr	r0, [r5, #0]	@ float
 1433              	.LVL191:
 1434 009e 2968     		ldr	r1, [r5, #0]	@ float
 1435 00a0 A047     		blx	r4
 1436              	.LVL192:
 634:../LIB_HW/Hw_IMU.c ****   if((mx != 0.0f) && (my != 0.0f) && (mz != 0.0f)) 
 1437              		.loc 1 634 0
 1438 00a2 40F20002 		movw	r2, #:lower16:__aeabi_fcmpeq
 630:../LIB_HW/Hw_IMU.c ****   q3q3 = q3 * q3;
 1439              		.loc 1 630 0
 1440 00a6 1A90     		str	r0, [sp, #104]	@ float
 1441              	.LVL193:
 634:../LIB_HW/Hw_IMU.c ****   if((mx != 0.0f) && (my != 0.0f) && (mz != 0.0f)) 
 1442              		.loc 1 634 0
 1443 00a8 0021     		movs	r1, #0
 1444 00aa 2E98     		ldr	r0, [sp, #184]	@ float
 1445              	.LVL194:
 1446 00ac C0F20002 		movt	r2, #:upper16:__aeabi_fcmpeq
 1447 00b0 9047     		blx	r2
 1448              	.LVL195:
 1449 00b2 48B9     		cbnz	r0, .L64
 634:../LIB_HW/Hw_IMU.c ****   if((mx != 0.0f) && (my != 0.0f) && (mz != 0.0f)) 
 1450              		.loc 1 634 0 is_stmt 0 discriminator 1
 1451 00b4 40F20003 		movw	r3, #:lower16:__aeabi_fcmpeq
 1452 00b8 2F98     		ldr	r0, [sp, #188]	@ float
 1453 00ba 0021     		movs	r1, #0
 1454 00bc C0F20003 		movt	r3, #:upper16:__aeabi_fcmpeq
 1455 00c0 9847     		blx	r3
 1456              	.LVL196:
 1457 00c2 0028     		cmp	r0, #0
 1458 00c4 00F04582 		beq	.L69
 1459              	.L64:
 1460 00c8 6448     		ldr	r0, .L72+8
 1461 00ca 6549     		ldr	r1, .L72+12
 617:../LIB_HW/Hw_IMU.c ****   float halfex = 0.0f, halfey = 0.0f, halfez = 0.0f;
 1462              		.loc 1 617 0 is_stmt 1
 1463 00cc 4FF00009 		mov	r9, #0
 1464              	.LVL197:
 1465 00d0 644E     		ldr	r6, .L72+16
 1466              	.LVL198:
 1467 00d2 CDF83490 		str	r9, [sp, #52]	@ float
 1468 00d6 CDF83090 		str	r9, [sp, #48]	@ float
 1469 00da 0E90     		str	r0, [sp, #56]
 1470 00dc 0991     		str	r1, [sp, #36]
 1471              	.LVL199:
 1472              	.L38:
 672:../LIB_HW/Hw_IMU.c ****   if((ax != 0.0f) && (ay != 0.0f) && (az != 0.0f)) 
 1473              		.loc 1 672 0
 1474 00de 40F20007 		movw	r7, #:lower16:__aeabi_fcmpeq
 1475 00e2 1098     		ldr	r0, [sp, #64]	@ float
 1476 00e4 0021     		movs	r1, #0
 1477 00e6 C0F20007 		movt	r7, #:upper16:__aeabi_fcmpeq
 1478 00ea B847     		blx	r7
 1479              	.LVL200:
 1480 00ec 28B9     		cbnz	r0, .L42
 672:../LIB_HW/Hw_IMU.c ****   if((ax != 0.0f) && (ay != 0.0f) && (az != 0.0f)) 
 1481              		.loc 1 672 0 is_stmt 0 discriminator 1
 1482 00ee 2C98     		ldr	r0, [sp, #176]	@ float
 1483 00f0 0021     		movs	r1, #0
 1484 00f2 B847     		blx	r7
 1485              	.LVL201:
 1486 00f4 0028     		cmp	r0, #0
 1487 00f6 00F0C381 		beq	.L70
 1488              	.LVL202:
 1489              	.L42:
 695:../LIB_HW/Hw_IMU.c ****   if(halfex != 0.0f && halfey != 0.0f && halfez != 0.0f) 
 1490              		.loc 1 695 0 is_stmt 1
 1491 00fa 0027     		movs	r7, #0
 1492 00fc 40F20008 		movw	r8, #:lower16:__aeabi_fcmpeq
 1493 0100 0C98     		ldr	r0, [sp, #48]	@ float
 1494 0102 3946     		mov	r1, r7
 1495 0104 C0F20008 		movt	r8, #:upper16:__aeabi_fcmpeq
 1496 0108 C047     		blx	r8
 1497              	.LVL203:
 1498 010a 0028     		cmp	r0, #0
 1499 010c 40F0B880 		bne	.L68
 695:../LIB_HW/Hw_IMU.c ****   if(halfex != 0.0f && halfey != 0.0f && halfez != 0.0f) 
 1500              		.loc 1 695 0 is_stmt 0 discriminator 1
 1501 0110 0D98     		ldr	r0, [sp, #52]	@ float
 1502 0112 3946     		mov	r1, r7
 1503 0114 C047     		blx	r8
 1504              	.LVL204:
 1505 0116 0028     		cmp	r0, #0
 1506 0118 40F0B280 		bne	.L68
 1507 011c 4846     		mov	r0, r9
 1508 011e 3946     		mov	r1, r7
 1509 0120 C047     		blx	r8
 1510              	.LVL205:
 1511 0122 0028     		cmp	r0, #0
 1512 0124 40F0AC80 		bne	.L68
 698:../LIB_HW/Hw_IMU.c ****     if(twoKi > 0.0f) {
 1513              		.loc 1 698 0 is_stmt 1
 1514 0128 40F20001 		movw	r1, #:lower16:twoKi
 1515 012c C0F20001 		movt	r1, #:upper16:twoKi
 1516 0130 0868     		ldr	r0, [r1, #0]	@ float
 1517 0132 4D4A     		ldr	r2, .L72+20
 1518 0134 3946     		mov	r1, r7
 1519 0136 9047     		blx	r2
 1520              	.LVL206:
 1521 0138 0028     		cmp	r0, #0
 1522 013a 00F08383 		beq	.L66
 699:../LIB_HW/Hw_IMU.c ****       integralFBx += twoKi * halfex * (1.0f / sampleFreq);  // integral error scaled by Ki
 1523              		.loc 1 699 0
 1524 013e 4B4F     		ldr	r7, .L72+24
 1525 0140 40F2000E 		movw	lr, #:lower16:twoKi
 1526 0144 C0F2000E 		movt	lr, #:upper16:twoKi
 1527 0148 DEF800C0 		ldr	ip, [lr, #0]	@ float
 1528 014c 3A68     		ldr	r2, [r7, #0]	@ float
 1529 014e DFF82C81 		ldr	r8, .L72+40
 1530 0152 1146     		mov	r1, r2
 1531 0154 0792     		str	r2, [sp, #28]
 1532 0156 CDF820C0 		str	ip, [sp, #32]
 1533 015a 4FF07E50 		mov	r0, #1065353216
 1534 015e C047     		blx	r8
 1535              	.LVL207:
 1536 0160 40F20003 		movw	r3, #:lower16:integralFBx
 1537 0164 C0F20003 		movt	r3, #:upper16:integralFBx
 1538 0168 1A68     		ldr	r2, [r3, #0]	@ float
 1539 016a DDF820C0 		ldr	ip, [sp, #32]
 1540 016e 0746     		mov	r7, r0
 1541 0170 0692     		str	r2, [sp, #24]
 1542 0172 6046     		mov	r0, ip
 1543 0174 0C99     		ldr	r1, [sp, #48]	@ float
 1544 0176 A047     		blx	r4
 1545              	.LVL208:
 1546 0178 3946     		mov	r1, r7
 1547 017a A047     		blx	r4
 1548              	.LVL209:
 1549 017c 0699     		ldr	r1, [sp, #24]
 1550 017e B047     		blx	r6
 1551              	.LVL210:
 1552 0180 40F20003 		movw	r3, #:lower16:integralFBx
 1553 0184 C0F20003 		movt	r3, #:upper16:integralFBx
 1554 0188 1860     		str	r0, [r3, #0]	@ float
 700:../LIB_HW/Hw_IMU.c ****       integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 1555              		.loc 1 700 0
 1556 018a 40F2000E 		movw	lr, #:lower16:integralFBy
 1557 018e 40F20000 		movw	r0, #:lower16:twoKi
 1558 0192 C0F2000E 		movt	lr, #:upper16:integralFBy
 1559 0196 C0F20000 		movt	r0, #:upper16:twoKi
 1560 019a 0068     		ldr	r0, [r0, #0]	@ float
 1561 019c DEF80020 		ldr	r2, [lr, #0]	@ float
 1562 01a0 0D99     		ldr	r1, [sp, #52]	@ float
 1563 01a2 0692     		str	r2, [sp, #24]
 1564 01a4 A047     		blx	r4
 1565              	.LVL211:
 1566 01a6 0146     		mov	r1, r0
 1567 01a8 3846     		mov	r0, r7
 1568 01aa A047     		blx	r4
 1569              	.LVL212:
 1570 01ac 0699     		ldr	r1, [sp, #24]
 1571 01ae B047     		blx	r6
 1572              	.LVL213:
 1573 01b0 40F20003 		movw	r3, #:lower16:integralFBy
 1574 01b4 C0F20003 		movt	r3, #:upper16:integralFBy
 1575 01b8 1860     		str	r0, [r3, #0]	@ float
 701:../LIB_HW/Hw_IMU.c ****       integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 1576              		.loc 1 701 0
 1577 01ba 40F2000C 		movw	ip, #:lower16:integralFBz
 1578 01be 40F20000 		movw	r0, #:lower16:twoKi
 1579 01c2 C0F2000C 		movt	ip, #:upper16:integralFBz
 1580 01c6 C0F20000 		movt	r0, #:upper16:twoKi
 1581 01ca 0068     		ldr	r0, [r0, #0]	@ float
 1582 01cc DCF80020 		ldr	r2, [ip, #0]	@ float
 1583 01d0 4946     		mov	r1, r9
 1584 01d2 0692     		str	r2, [sp, #24]
 1585 01d4 A047     		blx	r4
 1586              	.LVL214:
 1587 01d6 0146     		mov	r1, r0
 1588 01d8 3846     		mov	r0, r7
 1589 01da A047     		blx	r4
 1590              	.LVL215:
 1591 01dc 069F     		ldr	r7, [sp, #24]
 1592 01de 3946     		mov	r1, r7
 1593 01e0 B047     		blx	r6
 1594              	.LVL216:
 1595 01e2 40F20001 		movw	r1, #:lower16:integralFBz
 1596 01e6 C0F20001 		movt	r1, #:upper16:integralFBz
 702:../LIB_HW/Hw_IMU.c ****       gx += integralFBx;  // apply integral feedback
 1597              		.loc 1 702 0
 1598 01ea 40F2000E 		movw	lr, #:lower16:integralFBx
 1599 01ee C0F2000E 		movt	lr, #:upper16:integralFBx
 701:../LIB_HW/Hw_IMU.c ****       integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 1600              		.loc 1 701 0
 1601 01f2 0860     		str	r0, [r1, #0]	@ float
 702:../LIB_HW/Hw_IMU.c ****       gx += integralFBx;  // apply integral feedback
 1602              		.loc 1 702 0
 1603 01f4 DEF80010 		ldr	r1, [lr, #0]	@ float
 1604 01f8 0A98     		ldr	r0, [sp, #40]	@ float
 1605 01fa B047     		blx	r6
 1606              	.LVL217:
 703:../LIB_HW/Hw_IMU.c ****       gy += integralFBy;
 1607              		.loc 1 703 0
 1608 01fc 40F20003 		movw	r3, #:lower16:integralFBy
 1609 0200 C0F20003 		movt	r3, #:upper16:integralFBy
 1610 0204 1968     		ldr	r1, [r3, #0]	@ float
 702:../LIB_HW/Hw_IMU.c ****       gx += integralFBx;  // apply integral feedback
 1611              		.loc 1 702 0
 1612 0206 0A90     		str	r0, [sp, #40]	@ float
 1613              	.LVL218:
 703:../LIB_HW/Hw_IMU.c ****       gy += integralFBy;
 1614              		.loc 1 703 0
 1615 0208 0B98     		ldr	r0, [sp, #44]	@ float
 1616              	.LVL219:
 1617 020a B047     		blx	r6
 1618              	.LVL220:
 1619 020c 0B90     		str	r0, [sp, #44]	@ float
 1620              	.LVL221:
 704:../LIB_HW/Hw_IMU.c ****       gz += integralFBz;
 1621              		.loc 1 704 0
 1622 020e 40F20000 		movw	r0, #:lower16:integralFBz
 1623              	.LVL222:
 1624 0212 C0F20000 		movt	r0, #:upper16:integralFBz
 1625 0216 0168     		ldr	r1, [r0, #0]	@ float
 1626 0218 0F98     		ldr	r0, [sp, #60]	@ float
 1627 021a B047     		blx	r6
 1628              	.LVL223:
 1629 021c 079A     		ldr	r2, [sp, #28]
 1630 021e 0F90     		str	r0, [sp, #60]	@ float
 1631              	.LVL224:
 1632              	.L52:
 713:../LIB_HW/Hw_IMU.c ****     gx += twoKp * halfex;
 1633              		.loc 1 713 0
 1634 0220 134F     		ldr	r7, .L72+28
 1635 0222 0C99     		ldr	r1, [sp, #48]	@ float
 1636 0224 3868     		ldr	r0, [r7, #0]	@ float
 1637 0226 0792     		str	r2, [sp, #28]
 1638 0228 A047     		blx	r4
 1639              	.LVL225:
 1640 022a 0146     		mov	r1, r0
 1641 022c 0A98     		ldr	r0, [sp, #40]	@ float
 1642 022e B047     		blx	r6
 1643              	.LVL226:
 714:../LIB_HW/Hw_IMU.c ****     gy += twoKp * halfey;
 1644              		.loc 1 714 0
 1645 0230 0D99     		ldr	r1, [sp, #52]	@ float
 713:../LIB_HW/Hw_IMU.c ****     gx += twoKp * halfex;
 1646              		.loc 1 713 0
 1647 0232 0A90     		str	r0, [sp, #40]	@ float
 1648              	.LVL227:
 714:../LIB_HW/Hw_IMU.c ****     gy += twoKp * halfey;
 1649              		.loc 1 714 0
 1650 0234 3868     		ldr	r0, [r7, #0]	@ float
 1651              	.LVL228:
 1652 0236 A047     		blx	r4
 1653              	.LVL229:
 1654 0238 0146     		mov	r1, r0
 1655 023a 0B98     		ldr	r0, [sp, #44]	@ float
 1656 023c B047     		blx	r6
 1657              	.LVL230:
 715:../LIB_HW/Hw_IMU.c ****     gz += twoKp * halfez;
 1658              		.loc 1 715 0
 1659 023e 4946     		mov	r1, r9
 714:../LIB_HW/Hw_IMU.c ****     gy += twoKp * halfey;
 1660              		.loc 1 714 0
 1661 0240 0B90     		str	r0, [sp, #44]	@ float
 1662              	.LVL231:
 715:../LIB_HW/Hw_IMU.c ****     gz += twoKp * halfez;
 1663              		.loc 1 715 0
 1664 0242 3868     		ldr	r0, [r7, #0]	@ float
 1665              	.LVL232:
 1666 0244 A047     		blx	r4
 1667              	.LVL233:
 1668 0246 0146     		mov	r1, r0
 1669 0248 0F98     		ldr	r0, [sp, #60]	@ float
 1670 024a B047     		blx	r6
 1671              	.LVL234:
 1672 024c 079A     		ldr	r2, [sp, #28]
 1673 024e 0F90     		str	r0, [sp, #60]	@ float
 1674              	.LVL235:
 1675 0250 1AE0     		b	.L47
 1676              	.L73:
 1677 0252 00BF     		.align	2
 1678              	.L72:
 1679 0254 00000000 		.word	__aeabi_fmul
 1680 0258 00000000 		.word	q3
 1681 025c 00000000 		.word	invSqrt
 1682 0260 00000000 		.word	__aeabi_fsub
 1683 0264 00000000 		.word	__aeabi_fadd
 1684 0268 00000000 		.word	__aeabi_fcmpgt
 1685 026c 00000000 		.word	sampleFreq
 1686 0270 00000000 		.word	twoKp
 1687 0274 00000000 		.word	q1
 1688 0278 00000000 		.word	q2
 1689 027c 00000000 		.word	__aeabi_fdiv
 1690              	.LVL236:
 1691              	.L68:
 1692 0280 7D48     		ldr	r0, .L74
 1693 0282 DFF8F881 		ldr	r8, .L74+4
 1694 0286 0268     		ldr	r2, [r0, #0]	@ float
 1695              	.L47:
 719:../LIB_HW/Hw_IMU.c ****   gx *= (0.5f * (1.0f / sampleFreq));   // pre-multiply common factors
 1696              		.loc 1 719 0
 1697 0288 1146     		mov	r1, r2
 1698 028a 4FF07E50 		mov	r0, #1065353216
 1699 028e C047     		blx	r8
 1700              	.LVL237:
 1701 0290 4FF07C51 		mov	r1, #1056964608
 1702 0294 A047     		blx	r4
 1703              	.LVL238:
 1704 0296 0A99     		ldr	r1, [sp, #40]	@ float
 1705 0298 8146     		mov	r9, r0
 1706              	.LVL239:
 1707 029a A047     		blx	r4
 1708              	.LVL240:
 720:../LIB_HW/Hw_IMU.c ****   gy *= (0.5f * (1.0f / sampleFreq));
 1709              		.loc 1 720 0
 1710 029c 4946     		mov	r1, r9
 719:../LIB_HW/Hw_IMU.c ****   gx *= (0.5f * (1.0f / sampleFreq));   // pre-multiply common factors
 1711              		.loc 1 719 0
 1712 029e 0746     		mov	r7, r0
 1713              	.LVL241:
 720:../LIB_HW/Hw_IMU.c ****   gy *= (0.5f * (1.0f / sampleFreq));
 1714              		.loc 1 720 0
 1715 02a0 0B98     		ldr	r0, [sp, #44]	@ float
 1716              	.LVL242:
 1717 02a2 A047     		blx	r4
 1718              	.LVL243:
 721:../LIB_HW/Hw_IMU.c ****   gz *= (0.5f * (1.0f / sampleFreq));
 1719              		.loc 1 721 0
 1720 02a4 4946     		mov	r1, r9
 720:../LIB_HW/Hw_IMU.c ****   gy *= (0.5f * (1.0f / sampleFreq));
 1721              		.loc 1 720 0
 1722 02a6 8046     		mov	r8, r0
 1723              	.LVL244:
 721:../LIB_HW/Hw_IMU.c ****   gz *= (0.5f * (1.0f / sampleFreq));
 1724              		.loc 1 721 0
 1725 02a8 0F98     		ldr	r0, [sp, #60]	@ float
 1726              	.LVL245:
 1727 02aa A047     		blx	r4
 1728              	.LVL246:
 722:../LIB_HW/Hw_IMU.c ****   qa = q0;
 1729              		.loc 1 722 0
 1730 02ac 40F20001 		movw	r1, #:lower16:q0
 1731 02b0 C0F20001 		movt	r1, #:upper16:q0
 1732 02b4 0B68     		ldr	r3, [r1, #0]	@ float
 721:../LIB_HW/Hw_IMU.c ****   gz *= (0.5f * (1.0f / sampleFreq));
 1733              		.loc 1 721 0
 1734 02b6 8146     		mov	r9, r0
 1735              	.LVL247:
 722:../LIB_HW/Hw_IMU.c ****   qa = q0;
 1736              		.loc 1 722 0
 1737 02b8 0A93     		str	r3, [sp, #40]	@ float
 1738              	.LVL248:
 723:../LIB_HW/Hw_IMU.c ****   qb = q1;
 1739              		.loc 1 723 0
 1740 02ba DAF80030 		ldr	r3, [sl, #0]	@ float
 1741              	.LVL249:
 724:../LIB_HW/Hw_IMU.c ****   qc = q2;
 1742              		.loc 1 724 0
 1743 02be DBF80020 		ldr	r2, [fp, #0]	@ float
 725:../LIB_HW/Hw_IMU.c ****   q0 += (-qb * gx - qc * gy - q3 * gz);
 1744              		.loc 1 725 0
 1745 02c2 3946     		mov	r1, r7
 724:../LIB_HW/Hw_IMU.c ****   qc = q2;
 1746              		.loc 1 724 0
 1747 02c4 0B92     		str	r2, [sp, #44]	@ float
 1748              	.LVL250:
 725:../LIB_HW/Hw_IMU.c ****   q0 += (-qb * gx - qc * gy - q3 * gz);
 1749              		.loc 1 725 0
 1750 02c6 03F10040 		add	r0, r3, #-2147483648
 1751              	.LVL251:
 1752 02ca 0693     		str	r3, [sp, #24]
 1753 02cc A047     		blx	r4
 1754              	.LVL252:
 1755 02ce 2B68     		ldr	r3, [r5, #0]	@ float
 1756 02d0 8446     		mov	ip, r0
 1757 02d2 4146     		mov	r1, r8
 1758 02d4 0C93     		str	r3, [sp, #48]	@ float
 1759 02d6 0B98     		ldr	r0, [sp, #44]	@ float
 1760 02d8 CDF820C0 		str	ip, [sp, #32]
 1761 02dc A047     		blx	r4
 1762              	.LVL253:
 1763 02de DDF820C0 		ldr	ip, [sp, #32]
 1764 02e2 0146     		mov	r1, r0
 1765 02e4 099A     		ldr	r2, [sp, #36]
 1766 02e6 6046     		mov	r0, ip
 1767 02e8 9047     		blx	r2
 1768              	.LVL254:
 1769 02ea 40F20003 		movw	r3, #:lower16:q0
 1770 02ee C0F20003 		movt	r3, #:upper16:q0
 1771 02f2 1A68     		ldr	r2, [r3, #0]	@ float
 1772 02f4 8446     		mov	ip, r0
 1773 02f6 4946     		mov	r1, r9
 1774 02f8 0C98     		ldr	r0, [sp, #48]	@ float
 1775 02fa CDF820C0 		str	ip, [sp, #32]
 1776 02fe 0C92     		str	r2, [sp, #48]	@ float
 1777 0300 A047     		blx	r4
 1778              	.LVL255:
 1779 0302 DDF820C0 		ldr	ip, [sp, #32]
 1780 0306 099B     		ldr	r3, [sp, #36]
 1781 0308 0146     		mov	r1, r0
 1782 030a 6046     		mov	r0, ip
 1783 030c 9847     		blx	r3
 1784              	.LVL256:
 1785 030e 0C99     		ldr	r1, [sp, #48]	@ float
 1786 0310 B047     		blx	r6
 1787              	.LVL257:
 1788 0312 40F2000E 		movw	lr, #:lower16:q0
 1789 0316 C0F2000E 		movt	lr, #:upper16:q0
 1790 031a 0246     		mov	r2, r0
 1791 031c CEF80020 		str	r2, [lr, #0]	@ float
 726:../LIB_HW/Hw_IMU.c ****   q1 += (qa * gx + qc * gz - q3 * gy);
 1792              		.loc 1 726 0
 1793 0320 3946     		mov	r1, r7
 1794 0322 0A98     		ldr	r0, [sp, #40]	@ float
 1795 0324 A047     		blx	r4
 1796              	.LVL258:
 1797 0326 2B68     		ldr	r3, [r5, #0]	@ float
 1798 0328 8446     		mov	ip, r0
 1799 032a 0793     		str	r3, [sp, #28]
 1800 032c 4946     		mov	r1, r9
 1801 032e 0B98     		ldr	r0, [sp, #44]	@ float
 1802 0330 CDF820C0 		str	ip, [sp, #32]
 1803 0334 A047     		blx	r4
 1804              	.LVL259:
 1805 0336 DDF820C0 		ldr	ip, [sp, #32]
 1806 033a 0146     		mov	r1, r0
 1807 033c 6046     		mov	r0, ip
 1808 033e B047     		blx	r6
 1809              	.LVL260:
 1810 0340 DAF80020 		ldr	r2, [sl, #0]	@ float
 1811 0344 8446     		mov	ip, r0
 1812 0346 4146     		mov	r1, r8
 1813 0348 0798     		ldr	r0, [sp, #28]
 1814 034a 0C92     		str	r2, [sp, #48]	@ float
 1815 034c CDF820C0 		str	ip, [sp, #32]
 1816 0350 A047     		blx	r4
 1817              	.LVL261:
 1818 0352 DDF820C0 		ldr	ip, [sp, #32]
 1819 0356 099B     		ldr	r3, [sp, #36]
 1820 0358 0146     		mov	r1, r0
 1821 035a 6046     		mov	r0, ip
 1822 035c 9847     		blx	r3
 1823              	.LVL262:
 1824 035e 0C99     		ldr	r1, [sp, #48]	@ float
 1825 0360 B047     		blx	r6
 1826              	.LVL263:
 1827 0362 0246     		mov	r2, r0
 727:../LIB_HW/Hw_IMU.c ****   q2 += (qa * gy - qb * gz + q3 * gx);
 1828              		.loc 1 727 0
 1829 0364 4146     		mov	r1, r8
 726:../LIB_HW/Hw_IMU.c ****   q1 += (qa * gx + qc * gz - q3 * gy);
 1830              		.loc 1 726 0
 1831 0366 CAF80020 		str	r2, [sl, #0]	@ float
 727:../LIB_HW/Hw_IMU.c ****   q2 += (qa * gy - qb * gz + q3 * gx);
 1832              		.loc 1 727 0
 1833 036a 0A98     		ldr	r0, [sp, #40]	@ float
 1834 036c A047     		blx	r4
 1835              	.LVL264:
 1836 036e 2B68     		ldr	r3, [r5, #0]	@ float
 1837 0370 0699     		ldr	r1, [sp, #24]
 1838 0372 8446     		mov	ip, r0
 1839 0374 0C93     		str	r3, [sp, #48]	@ float
 1840 0376 0846     		mov	r0, r1
 1841 0378 CDF820C0 		str	ip, [sp, #32]
 1842 037c 4946     		mov	r1, r9
 1843 037e A047     		blx	r4
 1844              	.LVL265:
 1845 0380 DDF820C0 		ldr	ip, [sp, #32]
 1846 0384 099A     		ldr	r2, [sp, #36]
 1847 0386 0146     		mov	r1, r0
 1848 0388 6046     		mov	r0, ip
 1849 038a 9047     		blx	r2
 1850              	.LVL266:
 1851 038c DBF80030 		ldr	r3, [fp, #0]	@ float
 1852 0390 8446     		mov	ip, r0
 1853 0392 0793     		str	r3, [sp, #28]
 1854 0394 3946     		mov	r1, r7
 1855 0396 0C98     		ldr	r0, [sp, #48]	@ float
 1856 0398 CDF820C0 		str	ip, [sp, #32]
 1857 039c A047     		blx	r4
 1858              	.LVL267:
 1859 039e DDF820C0 		ldr	ip, [sp, #32]
 1860 03a2 0146     		mov	r1, r0
 1861 03a4 6046     		mov	r0, ip
 1862 03a6 B047     		blx	r6
 1863              	.LVL268:
 1864 03a8 0799     		ldr	r1, [sp, #28]
 1865 03aa B047     		blx	r6
 1866              	.LVL269:
 1867 03ac 0246     		mov	r2, r0
 1868 03ae CBF80020 		str	r2, [fp, #0]	@ float
 728:../LIB_HW/Hw_IMU.c ****   q3 += (qa * gz + qb * gy - qc * gx);
 1869              		.loc 1 728 0
 1870 03b2 4946     		mov	r1, r9
 1871 03b4 0A98     		ldr	r0, [sp, #40]	@ float
 1872 03b6 A047     		blx	r4
 1873              	.LVL270:
 1874 03b8 4146     		mov	r1, r8
 1875 03ba 8146     		mov	r9, r0
 1876              	.LVL271:
 1877 03bc 0698     		ldr	r0, [sp, #24]
 1878 03be A047     		blx	r4
 1879              	.LVL272:
 1880 03c0 0146     		mov	r1, r0
 1881 03c2 4846     		mov	r0, r9
 1882 03c4 B047     		blx	r6
 1883              	.LVL273:
 1884 03c6 3946     		mov	r1, r7
 1885 03c8 8046     		mov	r8, r0
 1886              	.LVL274:
 1887 03ca 0B98     		ldr	r0, [sp, #44]	@ float
 1888 03cc A047     		blx	r4
 1889              	.LVL275:
 1890 03ce 2F68     		ldr	r7, [r5, #0]	@ float
 1891              	.LVL276:
 1892 03d0 099B     		ldr	r3, [sp, #36]
 1893 03d2 0146     		mov	r1, r0
 1894 03d4 4046     		mov	r0, r8
 1895 03d6 9847     		blx	r3
 1896              	.LVL277:
 1897 03d8 3946     		mov	r1, r7
 1898 03da B047     		blx	r6
 1899              	.LVL278:
 731:../LIB_HW/Hw_IMU.c ****   recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 1900              		.loc 1 731 0
 1901 03dc 40F2000E 		movw	lr, #:lower16:q0
 1902 03e0 C0F2000E 		movt	lr, #:upper16:q0
 728:../LIB_HW/Hw_IMU.c ****   q3 += (qa * gz + qb * gy - qc * gx);
 1903              		.loc 1 728 0
 1904 03e4 2860     		str	r0, [r5, #0]	@ float
 731:../LIB_HW/Hw_IMU.c ****   recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 1905              		.loc 1 731 0
 1906 03e6 DEF80000 		ldr	r0, [lr, #0]	@ float
 1907 03ea DEF80010 		ldr	r1, [lr, #0]	@ float
 1908 03ee A047     		blx	r4
 1909              	.LVL279:
 1910 03f0 DAF80090 		ldr	r9, [sl, #0]	@ float
 1911 03f4 DAF80080 		ldr	r8, [sl, #0]	@ float
 1912 03f8 0746     		mov	r7, r0
 1913 03fa 4146     		mov	r1, r8
 1914 03fc 4846     		mov	r0, r9
 1915 03fe A047     		blx	r4
 1916              	.LVL280:
 1917 0400 0146     		mov	r1, r0
 1918 0402 3846     		mov	r0, r7
 1919 0404 B047     		blx	r6
 1920              	.LVL281:
 1921 0406 DBF80090 		ldr	r9, [fp, #0]	@ float
 1922 040a DBF80080 		ldr	r8, [fp, #0]	@ float
 1923 040e 0746     		mov	r7, r0
 1924 0410 4146     		mov	r1, r8
 1925 0412 4846     		mov	r0, r9
 1926 0414 A047     		blx	r4
 1927              	.LVL282:
 1928 0416 0146     		mov	r1, r0
 1929 0418 3846     		mov	r0, r7
 1930 041a B047     		blx	r6
 1931              	.LVL283:
 1932 041c D5F80090 		ldr	r9, [r5, #0]	@ float
 1933 0420 D5F80080 		ldr	r8, [r5, #0]	@ float
 1934 0424 0746     		mov	r7, r0
 1935 0426 4146     		mov	r1, r8
 1936 0428 4846     		mov	r0, r9
 1937 042a A047     		blx	r4
 1938              	.LVL284:
 1939 042c 0146     		mov	r1, r0
 1940 042e 3846     		mov	r0, r7
 1941 0430 B047     		blx	r6
 1942              	.LVL285:
 1943 0432 0E9E     		ldr	r6, [sp, #56]
 1944 0434 B047     		blx	r6
 1945              	.LVL286:
 732:../LIB_HW/Hw_IMU.c ****   q0 *= recipNorm;
 1946              		.loc 1 732 0
 1947 0436 40F20001 		movw	r1, #:lower16:q0
 731:../LIB_HW/Hw_IMU.c ****   recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 1948              		.loc 1 731 0
 1949 043a 0646     		mov	r6, r0
 1950              	.LVL287:
 732:../LIB_HW/Hw_IMU.c ****   q0 *= recipNorm;
 1951              		.loc 1 732 0
 1952 043c C0F20001 		movt	r1, #:upper16:q0
 1953 0440 0868     		ldr	r0, [r1, #0]	@ float
 1954              	.LVL288:
 1955 0442 3146     		mov	r1, r6
 1956 0444 A047     		blx	r4
 1957              	.LVL289:
 1958 0446 40F20002 		movw	r2, #:lower16:q0
 1959 044a C0F20002 		movt	r2, #:upper16:q0
 1960 044e 1060     		str	r0, [r2, #0]	@ float
 733:../LIB_HW/Hw_IMU.c ****   q1 *= recipNorm;
 1961              		.loc 1 733 0
 1962 0450 DAF80000 		ldr	r0, [sl, #0]	@ float
 1963 0454 3146     		mov	r1, r6
 1964 0456 A047     		blx	r4
 1965              	.LVL290:
 1966 0458 CAF80000 		str	r0, [sl, #0]	@ float
 734:../LIB_HW/Hw_IMU.c ****   q2 *= recipNorm;
 1967              		.loc 1 734 0
 1968 045c DBF80000 		ldr	r0, [fp, #0]	@ float
 1969 0460 3146     		mov	r1, r6
 1970 0462 A047     		blx	r4
 1971              	.LVL291:
 1972 0464 CBF80000 		str	r0, [fp, #0]	@ float
 735:../LIB_HW/Hw_IMU.c ****   q3 *= recipNorm;
 1973              		.loc 1 735 0
 1974 0468 2868     		ldr	r0, [r5, #0]	@ float
 1975 046a 3146     		mov	r1, r6
 1976 046c A047     		blx	r4
 1977              	.LVL292:
 1978 046e 2860     		str	r0, [r5, #0]	@ float
 736:../LIB_HW/Hw_IMU.c **** }
 1979              		.loc 1 736 0
 1980 0470 23B0     		add	sp, sp, #140
 1981 0472 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1982              	.L75:
 1983 0476 00BF     		.align	2
 1984              	.L74:
 1985 0478 00000000 		.word	sampleFreq
 1986 047c 00000000 		.word	__aeabi_fdiv
 1987              	.LVL293:
 1988              	.L70:
 672:../LIB_HW/Hw_IMU.c ****   if((ax != 0.0f) && (ay != 0.0f) && (az != 0.0f)) 
 1989              		.loc 1 672 0 discriminator 1
 1990 0480 2D98     		ldr	r0, [sp, #180]	@ float
 1991 0482 0021     		movs	r1, #0
 1992 0484 B847     		blx	r7
 1993              	.LVL294:
 1994 0486 0028     		cmp	r0, #0
 1995 0488 7FF437AE 		bne	.L42
 1996              	.LBB5:
 677:../LIB_HW/Hw_IMU.c ****     recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 1997              		.loc 1 677 0
 1998 048c 1098     		ldr	r0, [sp, #64]	@ float
 1999 048e 0146     		mov	r1, r0
 2000 0490 A047     		blx	r4
 2001              	.LVL295:
 2002 0492 0746     		mov	r7, r0
 2003 0494 2C98     		ldr	r0, [sp, #176]	@ float
 2004 0496 0146     		mov	r1, r0
 2005 0498 A047     		blx	r4
 2006              	.LVL296:
 2007 049a 0146     		mov	r1, r0
 2008 049c 3846     		mov	r0, r7
 2009 049e B047     		blx	r6
 2010              	.LVL297:
 2011 04a0 0746     		mov	r7, r0
 2012 04a2 2D98     		ldr	r0, [sp, #180]	@ float
 2013 04a4 0146     		mov	r1, r0
 2014 04a6 A047     		blx	r4
 2015              	.LVL298:
 2016 04a8 0146     		mov	r1, r0
 2017 04aa 3846     		mov	r0, r7
 2018 04ac B047     		blx	r6
 2019              	.LVL299:
 2020 04ae 0E9A     		ldr	r2, [sp, #56]
 2021 04b0 9047     		blx	r2
 2022              	.LVL300:
 2023 04b2 0746     		mov	r7, r0
 2024              	.LVL301:
 678:../LIB_HW/Hw_IMU.c ****     ax *= recipNorm;
 2025              		.loc 1 678 0
 2026 04b4 3946     		mov	r1, r7
 2027 04b6 1098     		ldr	r0, [sp, #64]	@ float
 2028              	.LVL302:
 2029 04b8 A047     		blx	r4
 2030              	.LVL303:
 679:../LIB_HW/Hw_IMU.c ****     ay *= recipNorm;
 2031              		.loc 1 679 0
 2032 04ba 3946     		mov	r1, r7
 678:../LIB_HW/Hw_IMU.c ****     ax *= recipNorm;
 2033              		.loc 1 678 0
 2034 04bc 1090     		str	r0, [sp, #64]	@ float
 2035              	.LVL304:
 679:../LIB_HW/Hw_IMU.c ****     ay *= recipNorm;
 2036              		.loc 1 679 0
 2037 04be 2C98     		ldr	r0, [sp, #176]	@ float
 2038              	.LVL305:
 2039 04c0 A047     		blx	r4
 2040              	.LVL306:
 680:../LIB_HW/Hw_IMU.c ****     az *= recipNorm;
 2041              		.loc 1 680 0
 2042 04c2 3946     		mov	r1, r7
 679:../LIB_HW/Hw_IMU.c ****     ay *= recipNorm;
 2043              		.loc 1 679 0
 2044 04c4 1190     		str	r0, [sp, #68]	@ float
 2045              	.LVL307:
 680:../LIB_HW/Hw_IMU.c ****     az *= recipNorm;
 2046              		.loc 1 680 0
 2047 04c6 2D98     		ldr	r0, [sp, #180]	@ float
 2048              	.LVL308:
 2049 04c8 A047     		blx	r4
 2050              	.LVL309:
 683:../LIB_HW/Hw_IMU.c ****     halfvx = q1q3 - q0q2;
 2051              		.loc 1 683 0
 2052 04ca 099B     		ldr	r3, [sp, #36]
 680:../LIB_HW/Hw_IMU.c ****     az *= recipNorm;
 2053              		.loc 1 680 0
 2054 04cc 0746     		mov	r7, r0
 2055              	.LVL310:
 683:../LIB_HW/Hw_IMU.c ****     halfvx = q1q3 - q0q2;
 2056              		.loc 1 683 0
 2057 04ce 1799     		ldr	r1, [sp, #92]	@ float
 2058 04d0 1898     		ldr	r0, [sp, #96]	@ float
 2059              	.LVL311:
 2060 04d2 9847     		blx	r3
 2061              	.LVL312:
 684:../LIB_HW/Hw_IMU.c ****     halfvy = q0q1 + q2q3;
 2062              		.loc 1 684 0
 2063 04d4 1999     		ldr	r1, [sp, #100]	@ float
 683:../LIB_HW/Hw_IMU.c ****     halfvx = q1q3 - q0q2;
 2064              		.loc 1 683 0
 2065 04d6 1290     		str	r0, [sp, #72]	@ float
 2066              	.LVL313:
 684:../LIB_HW/Hw_IMU.c ****     halfvy = q0q1 + q2q3;
 2067              		.loc 1 684 0
 2068 04d8 1698     		ldr	r0, [sp, #88]	@ float
 2069              	.LVL314:
 2070 04da B047     		blx	r6
 2071              	.LVL315:
 2072              	.LBE5:
 621:../LIB_HW/Hw_IMU.c ****   q0q0 = q0 * q0;
 2073              		.loc 1 621 0
 2074 04dc 1C99     		ldr	r1, [sp, #112]	@ float
 2075              	.LBB6:
 684:../LIB_HW/Hw_IMU.c ****     halfvy = q0q1 + q2q3;
 2076              		.loc 1 684 0
 2077 04de 8046     		mov	r8, r0
 2078              	.LVL316:
 2079              	.LBE6:
 621:../LIB_HW/Hw_IMU.c ****   q0q0 = q0 * q0;
 2080              		.loc 1 621 0
 2081 04e0 1B98     		ldr	r0, [sp, #108]	@ float
 2082              	.LVL317:
 2083 04e2 A047     		blx	r4
 2084              	.LVL318:
 2085              	.LBB7:
 685:../LIB_HW/Hw_IMU.c ****     halfvz = q0q0 - 0.5f + q3q3;
 2086              		.loc 1 685 0
 2087 04e4 099A     		ldr	r2, [sp, #36]
 2088 04e6 4FF07C51 		mov	r1, #1056964608
 2089 04ea 9047     		blx	r2
 2090              	.LVL319:
 2091 04ec 1A99     		ldr	r1, [sp, #104]	@ float
 2092 04ee B047     		blx	r6
 2093              	.LVL320:
 2094 04f0 0346     		mov	r3, r0
 2095              	.LVL321:
 689:../LIB_HW/Hw_IMU.c ****     halfex += (ay * halfvz - az * halfvy);
 2096              		.loc 1 689 0
 2097 04f2 1946     		mov	r1, r3
 2098 04f4 0693     		str	r3, [sp, #24]
 2099 04f6 1198     		ldr	r0, [sp, #68]	@ float
 2100              	.LVL322:
 2101 04f8 A047     		blx	r4
 2102              	.LVL323:
 2103 04fa 0246     		mov	r2, r0
 2104 04fc 0792     		str	r2, [sp, #28]
 2105 04fe 3846     		mov	r0, r7
 2106 0500 4146     		mov	r1, r8
 2107 0502 A047     		blx	r4
 2108              	.LVL324:
 2109 0504 099B     		ldr	r3, [sp, #36]
 2110 0506 0146     		mov	r1, r0
 2111 0508 0798     		ldr	r0, [sp, #28]
 2112 050a 9847     		blx	r3
 2113              	.LVL325:
 2114 050c 0146     		mov	r1, r0
 2115 050e 0C98     		ldr	r0, [sp, #48]	@ float
 2116 0510 B047     		blx	r6
 2117              	.LVL326:
 690:../LIB_HW/Hw_IMU.c ****     halfey += (az * halfvx - ax * halfvz);
 2118              		.loc 1 690 0
 2119 0512 1299     		ldr	r1, [sp, #72]	@ float
 689:../LIB_HW/Hw_IMU.c ****     halfex += (ay * halfvz - az * halfvy);
 2120              		.loc 1 689 0
 2121 0514 0C90     		str	r0, [sp, #48]	@ float
 2122              	.LVL327:
 690:../LIB_HW/Hw_IMU.c ****     halfey += (az * halfvx - ax * halfvz);
 2123              		.loc 1 690 0
 2124 0516 3846     		mov	r0, r7
 2125              	.LVL328:
 2126 0518 A047     		blx	r4
 2127              	.LVL329:
 2128 051a 0699     		ldr	r1, [sp, #24]
 2129 051c 0746     		mov	r7, r0
 2130              	.LVL330:
 2131 051e 1098     		ldr	r0, [sp, #64]	@ float
 2132 0520 A047     		blx	r4
 2133              	.LVL331:
 2134 0522 099A     		ldr	r2, [sp, #36]
 2135 0524 0146     		mov	r1, r0
 2136 0526 3846     		mov	r0, r7
 2137 0528 9047     		blx	r2
 2138              	.LVL332:
 2139 052a 0146     		mov	r1, r0
 2140 052c 0D98     		ldr	r0, [sp, #52]	@ float
 2141 052e B047     		blx	r6
 2142              	.LVL333:
 691:../LIB_HW/Hw_IMU.c ****     halfez += (ax * halfvy - ay * halfvx);
 2143              		.loc 1 691 0
 2144 0530 4146     		mov	r1, r8
 690:../LIB_HW/Hw_IMU.c ****     halfey += (az * halfvx - ax * halfvz);
 2145              		.loc 1 690 0
 2146 0532 0D90     		str	r0, [sp, #52]	@ float
 2147              	.LVL334:
 691:../LIB_HW/Hw_IMU.c ****     halfez += (ax * halfvy - ay * halfvx);
 2148              		.loc 1 691 0
 2149 0534 1098     		ldr	r0, [sp, #64]	@ float
 2150              	.LVL335:
 2151 0536 A047     		blx	r4
 2152              	.LVL336:
 2153 0538 1299     		ldr	r1, [sp, #72]	@ float
 2154 053a 0746     		mov	r7, r0
 2155 053c 1198     		ldr	r0, [sp, #68]	@ float
 2156 053e A047     		blx	r4
 2157              	.LVL337:
 2158 0540 099B     		ldr	r3, [sp, #36]
 2159 0542 0146     		mov	r1, r0
 2160 0544 3846     		mov	r0, r7
 2161 0546 9847     		blx	r3
 2162              	.LVL338:
 2163 0548 0146     		mov	r1, r0
 2164 054a 4846     		mov	r0, r9
 2165 054c B047     		blx	r6
 2166              	.LVL339:
 2167 054e 8146     		mov	r9, r0
 2168              	.LVL340:
 2169 0550 D3E5     		b	.L42
 2170              	.LVL341:
 2171              	.L69:
 2172              	.LBE7:
 634:../LIB_HW/Hw_IMU.c ****   if((mx != 0.0f) && (my != 0.0f) && (mz != 0.0f)) 
 2173              		.loc 1 634 0 discriminator 1
 2174 0552 40F20002 		movw	r2, #:lower16:__aeabi_fcmpeq
 2175 0556 3098     		ldr	r0, [sp, #192]	@ float
 2176 0558 0021     		movs	r1, #0
 2177 055a C0F20002 		movt	r2, #:upper16:__aeabi_fcmpeq
 2178 055e 9047     		blx	r2
 2179              	.LVL342:
 2180 0560 90B1     		cbz	r0, .L71
 2181 0562 064F     		ldr	r7, .L76
 2182              	.LVL343:
 2183 0564 064B     		ldr	r3, .L76+4
 617:../LIB_HW/Hw_IMU.c ****   float halfex = 0.0f, halfey = 0.0f, halfez = 0.0f;
 2184              		.loc 1 617 0
 2185 0566 4FF00009 		mov	r9, #0
 2186              	.LVL344:
 2187 056a 064E     		ldr	r6, .L76+8
 2188 056c 0E97     		str	r7, [sp, #56]
 2189 056e 0993     		str	r3, [sp, #36]
 2190 0570 CDF83490 		str	r9, [sp, #52]	@ float
 2191 0574 CDF83090 		str	r9, [sp, #48]	@ float
 2192 0578 B1E5     		b	.L38
 2193              	.L77:
 2194 057a 00BF     		.align	2
 2195              	.L76:
 2196 057c 00000000 		.word	invSqrt
 2197 0580 00000000 		.word	__aeabi_fsub
 2198 0584 00000000 		.word	__aeabi_fadd
 2199              	.LVL345:
 2200              	.L71:
 624:../LIB_HW/Hw_IMU.c ****   q0q3 = q0 * q3;
 2201              		.loc 1 624 0
 2202 0588 0E98     		ldr	r0, [sp, #56]	@ float
 2203 058a 1399     		ldr	r1, [sp, #76]	@ float
 2204 058c A047     		blx	r4
 2205              	.LVL346:
 626:../LIB_HW/Hw_IMU.c ****   q1q2 = q1 * q2;
 2206              		.loc 1 626 0
 2207 058e 4146     		mov	r1, r8
 624:../LIB_HW/Hw_IMU.c ****   q0q3 = q0 * q3;
 2208              		.loc 1 624 0
 2209 0590 1D90     		str	r0, [sp, #116]	@ float
 626:../LIB_HW/Hw_IMU.c ****   q1q2 = q1 * q2;
 2210              		.loc 1 626 0
 2211 0592 4846     		mov	r0, r9
 2212 0594 A047     		blx	r4
 2213              	.LVL347:
 628:../LIB_HW/Hw_IMU.c ****   q2q2 = q2 * q2;
 2214              		.loc 1 628 0
 2215 0596 3146     		mov	r1, r6
 626:../LIB_HW/Hw_IMU.c ****   q1q2 = q1 * q2;
 2216              		.loc 1 626 0
 2217 0598 8146     		mov	r9, r0
 2218              	.LVL348:
 628:../LIB_HW/Hw_IMU.c ****   q2q2 = q2 * q2;
 2219              		.loc 1 628 0
 2220 059a 3846     		mov	r0, r7
 2221 059c A047     		blx	r4
 2222              	.LVL349:
 2223 059e 2090     		str	r0, [sp, #128]	@ float
 2224              	.LBB8:
 641:../LIB_HW/Hw_IMU.c ****     recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 2225              		.loc 1 641 0
 2226 05a0 2E98     		ldr	r0, [sp, #184]	@ float
 2227 05a2 854E     		ldr	r6, .L78
 2228              	.LVL350:
 2229 05a4 0146     		mov	r1, r0
 2230 05a6 A047     		blx	r4
 2231              	.LVL351:
 2232 05a8 0746     		mov	r7, r0
 2233 05aa 2F98     		ldr	r0, [sp, #188]	@ float
 2234 05ac 0146     		mov	r1, r0
 2235 05ae A047     		blx	r4
 2236              	.LVL352:
 2237 05b0 0146     		mov	r1, r0
 2238 05b2 3846     		mov	r0, r7
 2239 05b4 B047     		blx	r6
 2240              	.LVL353:
 2241 05b6 0746     		mov	r7, r0
 2242 05b8 3098     		ldr	r0, [sp, #192]	@ float
 2243 05ba 0146     		mov	r1, r0
 2244 05bc A047     		blx	r4
 2245              	.LVL354:
 2246 05be 0146     		mov	r1, r0
 2247 05c0 3846     		mov	r0, r7
 2248 05c2 B047     		blx	r6
 2249              	.LVL355:
 2250 05c4 7D49     		ldr	r1, .L78+4
 2251 05c6 0E91     		str	r1, [sp, #56]
 2252 05c8 8847     		blx	r1
 2253              	.LVL356:
 2254 05ca 0746     		mov	r7, r0
 2255              	.LVL357:
 642:../LIB_HW/Hw_IMU.c ****     mx *= recipNorm;
 2256              		.loc 1 642 0
 2257 05cc 3946     		mov	r1, r7
 2258 05ce 2E98     		ldr	r0, [sp, #184]	@ float
 2259              	.LVL358:
 2260 05d0 A047     		blx	r4
 2261              	.LVL359:
 643:../LIB_HW/Hw_IMU.c ****     my *= recipNorm;
 2262              		.loc 1 643 0
 2263 05d2 3946     		mov	r1, r7
 642:../LIB_HW/Hw_IMU.c ****     mx *= recipNorm;
 2264              		.loc 1 642 0
 2265 05d4 1390     		str	r0, [sp, #76]	@ float
 2266              	.LVL360:
 643:../LIB_HW/Hw_IMU.c ****     my *= recipNorm;
 2267              		.loc 1 643 0
 2268 05d6 2F98     		ldr	r0, [sp, #188]	@ float
 2269              	.LVL361:
 2270 05d8 A047     		blx	r4
 2271              	.LVL362:
 647:../LIB_HW/Hw_IMU.c ****     hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
 2272              		.loc 1 647 0
 2273 05da 794A     		ldr	r2, .L78+8
 643:../LIB_HW/Hw_IMU.c ****     my *= recipNorm;
 2274              		.loc 1 643 0
 2275 05dc 1E90     		str	r0, [sp, #120]	@ float
 2276              	.LVL363:
 647:../LIB_HW/Hw_IMU.c ****     hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
 2277              		.loc 1 647 0
 2278 05de 0992     		str	r2, [sp, #36]
 644:../LIB_HW/Hw_IMU.c ****     mz *= recipNorm;
 2279              		.loc 1 644 0
 2280 05e0 3098     		ldr	r0, [sp, #192]	@ float
 2281              	.LVL364:
 2282 05e2 3946     		mov	r1, r7
 2283 05e4 A047     		blx	r4
 2284              	.LVL365:
 647:../LIB_HW/Hw_IMU.c ****     hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
 2285              		.loc 1 647 0
 2286 05e6 099B     		ldr	r3, [sp, #36]
 2287 05e8 2099     		ldr	r1, [sp, #128]	@ float
 644:../LIB_HW/Hw_IMU.c ****     mz *= recipNorm;
 2288              		.loc 1 644 0
 2289 05ea 1F90     		str	r0, [sp, #124]	@ float
 2290              	.LVL366:
 647:../LIB_HW/Hw_IMU.c ****     hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
 2291              		.loc 1 647 0
 2292 05ec 4FF07C50 		mov	r0, #1056964608
 2293              	.LVL367:
 2294 05f0 9847     		blx	r3
 2295              	.LVL368:
 2296 05f2 1A99     		ldr	r1, [sp, #104]	@ float
 2297 05f4 099F     		ldr	r7, [sp, #36]
 2298              	.LVL369:
 2299 05f6 B847     		blx	r7
 2300              	.LVL370:
 2301 05f8 099A     		ldr	r2, [sp, #36]
 2302 05fa 1D99     		ldr	r1, [sp, #116]	@ float
 2303 05fc 0C90     		str	r0, [sp, #48]	@ float
 2304 05fe 4846     		mov	r0, r9
 2305 0600 9047     		blx	r2
 2306              	.LVL371:
 2307 0602 1799     		ldr	r1, [sp, #92]	@ float
 2308 0604 0D90     		str	r0, [sp, #52]	@ float
 2309 0606 1898     		ldr	r0, [sp, #96]	@ float
 2310 0608 B047     		blx	r6
 2311              	.LVL372:
 2312 060a 1399     		ldr	r1, [sp, #76]	@ float
 2313 060c 2190     		str	r0, [sp, #132]	@ float
 2314 060e 0C98     		ldr	r0, [sp, #48]	@ float
 2315 0610 A047     		blx	r4
 2316              	.LVL373:
 2317 0612 1E99     		ldr	r1, [sp, #120]	@ float
 2318 0614 0746     		mov	r7, r0
 2319 0616 0D98     		ldr	r0, [sp, #52]	@ float
 2320 0618 A047     		blx	r4
 2321              	.LVL374:
 2322 061a 0146     		mov	r1, r0
 2323 061c 3846     		mov	r0, r7
 2324 061e B047     		blx	r6
 2325              	.LVL375:
 2326 0620 1F99     		ldr	r1, [sp, #124]	@ float
 2327 0622 0746     		mov	r7, r0
 2328 0624 2198     		ldr	r0, [sp, #132]	@ float
 2329 0626 A047     		blx	r4
 2330              	.LVL376:
 2331 0628 0146     		mov	r1, r0
 2332 062a 3846     		mov	r0, r7
 2333 062c B047     		blx	r6
 2334              	.LVL377:
 2335 062e 0146     		mov	r1, r0
 2336 0630 B047     		blx	r6
 2337              	.LVL378:
 2338 0632 0346     		mov	r3, r0
 2339              	.LVL379:
 2340              	.LBE8:
 625:../LIB_HW/Hw_IMU.c ****   q1q1 = q1 * q1;
 2341              		.loc 1 625 0
 2342 0634 0693     		str	r3, [sp, #24]
 2343 0636 1499     		ldr	r1, [sp, #80]	@ float
 2344 0638 1598     		ldr	r0, [sp, #84]	@ float
 2345              	.LVL380:
 2346 063a A047     		blx	r4
 2347              	.LVL381:
 2348              	.LBB9:
 648:../LIB_HW/Hw_IMU.c ****     hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz * (q2q3 - q0q1));
 2349              		.loc 1 648 0
 2350 063c 099A     		ldr	r2, [sp, #36]
 2351              	.LBE9:
 625:../LIB_HW/Hw_IMU.c ****   q1q1 = q1 * q1;
 2352              		.loc 1 625 0
 2353 063e 0146     		mov	r1, r0
 2354              	.LBB10:
 648:../LIB_HW/Hw_IMU.c ****     hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz * (q2q3 - q0q1));
 2355              		.loc 1 648 0
 2356 0640 4FF07C50 		mov	r0, #1056964608
 2357 0644 9047     		blx	r2
 2358              	.LVL382:
 2359 0646 1D99     		ldr	r1, [sp, #116]	@ float
 2360 0648 0746     		mov	r7, r0
 2361 064a 4846     		mov	r0, r9
 2362 064c B047     		blx	r6
 2363              	.LVL383:
 2364 064e 1399     		ldr	r1, [sp, #76]	@ float
 2365 0650 A047     		blx	r4
 2366              	.LVL384:
 2367 0652 099B     		ldr	r3, [sp, #36]
 2368 0654 1A99     		ldr	r1, [sp, #104]	@ float
 2369 0656 8046     		mov	r8, r0
 2370 0658 3846     		mov	r0, r7
 2371 065a 9847     		blx	r3
 2372              	.LVL385:
 2373 065c 1E99     		ldr	r1, [sp, #120]	@ float
 2374 065e A047     		blx	r4
 2375              	.LVL386:
 2376 0660 0146     		mov	r1, r0
 2377 0662 4046     		mov	r0, r8
 2378 0664 B047     		blx	r6
 2379              	.LVL387:
 2380 0666 099A     		ldr	r2, [sp, #36]
 2381 0668 1699     		ldr	r1, [sp, #88]	@ float
 2382 066a 8146     		mov	r9, r0
 2383 066c 1998     		ldr	r0, [sp, #100]	@ float
 2384 066e 9047     		blx	r2
 2385              	.LVL388:
 2386 0670 1F99     		ldr	r1, [sp, #124]	@ float
 2387 0672 A047     		blx	r4
 2388              	.LVL389:
 2389 0674 0146     		mov	r1, r0
 2390 0676 4846     		mov	r0, r9
 2391 0678 B047     		blx	r6
 2392              	.LVL390:
 2393 067a 0146     		mov	r1, r0
 2394 067c B047     		blx	r6
 2395              	.LVL391:
 2396 067e 8146     		mov	r9, r0
 2397              	.LVL392:
 649:../LIB_HW/Hw_IMU.c ****     bx = sqrt(hx * hx + hy * hy);
 2398              		.loc 1 649 0
 2399 0680 0698     		ldr	r0, [sp, #24]
 2400              	.LVL393:
 2401 0682 0146     		mov	r1, r0
 2402 0684 A047     		blx	r4
 2403              	.LVL394:
 2404 0686 4946     		mov	r1, r9
 2405 0688 8046     		mov	r8, r0
 2406 068a 4846     		mov	r0, r9
 2407 068c A047     		blx	r4
 2408              	.LVL395:
 2409 068e 0146     		mov	r1, r0
 2410 0690 4046     		mov	r0, r8
 2411 0692 B047     		blx	r6
 2412              	.LVL396:
 2413 0694 4B49     		ldr	r1, .L78+12
 2414 0696 8847     		blx	r1
 2415              	.LVL397:
 2416 0698 4B4B     		ldr	r3, .L78+16
 2417 069a 9847     		blx	r3
 2418              	.LVL398:
 2419 069c 4B4A     		ldr	r2, .L78+20
 2420 069e 9047     		blx	r2
 2421              	.LVL399:
 650:../LIB_HW/Hw_IMU.c ****     bz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));
 2422              		.loc 1 650 0
 2423 06a0 099B     		ldr	r3, [sp, #36]
 649:../LIB_HW/Hw_IMU.c ****     bx = sqrt(hx * hx + hy * hy);
 2424              		.loc 1 649 0
 2425 06a2 8146     		mov	r9, r0
 2426              	.LVL400:
 650:../LIB_HW/Hw_IMU.c ****     bz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));
 2427              		.loc 1 650 0
 2428 06a4 1799     		ldr	r1, [sp, #92]	@ float
 2429 06a6 1898     		ldr	r0, [sp, #96]	@ float
 2430              	.LVL401:
 2431 06a8 9847     		blx	r3
 2432              	.LVL402:
 2433 06aa 1699     		ldr	r1, [sp, #88]	@ float
 2434 06ac 8046     		mov	r8, r0
 2435 06ae 1998     		ldr	r0, [sp, #100]	@ float
 2436 06b0 B047     		blx	r6
 2437              	.LVL403:
 2438 06b2 2099     		ldr	r1, [sp, #128]	@ float
 2439 06b4 1490     		str	r0, [sp, #80]	@ float
 2440 06b6 3846     		mov	r0, r7
 2441 06b8 099F     		ldr	r7, [sp, #36]
 2442 06ba B847     		blx	r7
 2443              	.LVL404:
 2444 06bc 1399     		ldr	r1, [sp, #76]	@ float
 2445 06be 1D90     		str	r0, [sp, #116]	@ float
 2446 06c0 4046     		mov	r0, r8
 2447 06c2 A047     		blx	r4
 2448              	.LVL405:
 2449 06c4 1E99     		ldr	r1, [sp, #120]	@ float
 2450 06c6 0746     		mov	r7, r0
 2451 06c8 1498     		ldr	r0, [sp, #80]	@ float
 2452 06ca A047     		blx	r4
 2453              	.LVL406:
 2454 06cc 0146     		mov	r1, r0
 2455 06ce 3846     		mov	r0, r7
 2456 06d0 B047     		blx	r6
 2457              	.LVL407:
 2458 06d2 1F99     		ldr	r1, [sp, #124]	@ float
 2459 06d4 0746     		mov	r7, r0
 2460 06d6 1D98     		ldr	r0, [sp, #116]	@ float
 2461 06d8 A047     		blx	r4
 2462              	.LVL408:
 2463 06da 0146     		mov	r1, r0
 2464 06dc 3846     		mov	r0, r7
 2465 06de B047     		blx	r6
 2466              	.LVL409:
 2467 06e0 0146     		mov	r1, r0
 2468 06e2 B047     		blx	r6
 2469              	.LVL410:
 653:../LIB_HW/Hw_IMU.c ****     halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
 2470              		.loc 1 653 0
 2471 06e4 4946     		mov	r1, r9
 650:../LIB_HW/Hw_IMU.c ****     bz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));
 2472              		.loc 1 650 0
 2473 06e6 0746     		mov	r7, r0
 2474              	.LVL411:
 653:../LIB_HW/Hw_IMU.c ****     halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
 2475              		.loc 1 653 0
 2476 06e8 0C98     		ldr	r0, [sp, #48]	@ float
 2477              	.LVL412:
 2478 06ea A047     		blx	r4
 2479              	.LVL413:
 2480 06ec 0246     		mov	r2, r0
 2481 06ee 0692     		str	r2, [sp, #24]
 2482 06f0 3946     		mov	r1, r7
 2483 06f2 4046     		mov	r0, r8
 2484 06f4 A047     		blx	r4
 2485              	.LVL414:
 2486 06f6 0146     		mov	r1, r0
 2487 06f8 0698     		ldr	r0, [sp, #24]
 2488 06fa B047     		blx	r6
 2489              	.LVL415:
 654:../LIB_HW/Hw_IMU.c ****     halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
 2490              		.loc 1 654 0
 2491 06fc 4946     		mov	r1, r9
 653:../LIB_HW/Hw_IMU.c ****     halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
 2492              		.loc 1 653 0
 2493 06fe 1590     		str	r0, [sp, #84]	@ float
 2494              	.LVL416:
 654:../LIB_HW/Hw_IMU.c ****     halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
 2495              		.loc 1 654 0
 2496 0700 0D98     		ldr	r0, [sp, #52]	@ float
 2497              	.LVL417:
 2498 0702 A047     		blx	r4
 2499              	.LVL418:
 2500 0704 3946     		mov	r1, r7
 2501 0706 8046     		mov	r8, r0
 2502 0708 1498     		ldr	r0, [sp, #80]	@ float
 2503 070a A047     		blx	r4
 2504              	.LVL419:
 2505 070c 0146     		mov	r1, r0
 2506 070e 4046     		mov	r0, r8
 2507 0710 B047     		blx	r6
 2508              	.LVL420:
 655:../LIB_HW/Hw_IMU.c ****     halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);
 2509              		.loc 1 655 0
 2510 0712 4946     		mov	r1, r9
 654:../LIB_HW/Hw_IMU.c ****     halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
 2511              		.loc 1 654 0
 2512 0714 8046     		mov	r8, r0
 2513              	.LVL421:
 655:../LIB_HW/Hw_IMU.c ****     halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);
 2514              		.loc 1 655 0
 2515 0716 2198     		ldr	r0, [sp, #132]	@ float
 2516              	.LVL422:
 2517 0718 A047     		blx	r4
 2518              	.LVL423:
 2519 071a 3946     		mov	r1, r7
 2520 071c 8146     		mov	r9, r0
 2521              	.LVL424:
 2522 071e 1D98     		ldr	r0, [sp, #116]	@ float
 2523 0720 A047     		blx	r4
 2524              	.LVL425:
 2525 0722 0146     		mov	r1, r0
 2526 0724 4846     		mov	r0, r9
 2527 0726 B047     		blx	r6
 2528              	.LVL426:
 2529 0728 1490     		str	r0, [sp, #80]	@ float
 2530              	.LVL427:
 659:../LIB_HW/Hw_IMU.c ****     halfex = (my * halfwz - mz * halfwy);
 2531              		.loc 1 659 0
 2532 072a 1499     		ldr	r1, [sp, #80]	@ float
 2533 072c 1E98     		ldr	r0, [sp, #120]	@ float
 2534              	.LVL428:
 2535 072e A047     		blx	r4
 2536              	.LVL429:
 2537 0730 4146     		mov	r1, r8
 2538 0732 0746     		mov	r7, r0
 2539              	.LVL430:
 2540 0734 1F98     		ldr	r0, [sp, #124]	@ float
 2541 0736 A047     		blx	r4
 2542              	.LVL431:
 2543 0738 099B     		ldr	r3, [sp, #36]
 2544 073a 0146     		mov	r1, r0
 2545 073c 3846     		mov	r0, r7
 2546 073e 9847     		blx	r3
 2547              	.LVL432:
 660:../LIB_HW/Hw_IMU.c ****     halfey = (mz * halfwx - mx * halfwz);
 2548              		.loc 1 660 0
 2549 0740 1599     		ldr	r1, [sp, #84]	@ float
 659:../LIB_HW/Hw_IMU.c ****     halfex = (my * halfwz - mz * halfwy);
 2550              		.loc 1 659 0
 2551 0742 0C90     		str	r0, [sp, #48]	@ float
 2552              	.LVL433:
 660:../LIB_HW/Hw_IMU.c ****     halfey = (mz * halfwx - mx * halfwz);
 2553              		.loc 1 660 0
 2554 0744 1F98     		ldr	r0, [sp, #124]	@ float
 2555              	.LVL434:
 2556 0746 A047     		blx	r4
 2557              	.LVL435:
 2558 0748 1499     		ldr	r1, [sp, #80]	@ float
 2559 074a 0746     		mov	r7, r0
 2560 074c 1398     		ldr	r0, [sp, #76]	@ float
 2561 074e A047     		blx	r4
 2562              	.LVL436:
 2563 0750 099A     		ldr	r2, [sp, #36]
 2564 0752 0146     		mov	r1, r0
 2565 0754 3846     		mov	r0, r7
 2566 0756 9047     		blx	r2
 2567              	.LVL437:
 661:../LIB_HW/Hw_IMU.c ****     halfez = (mx * halfwy - my * halfwx);
 2568              		.loc 1 661 0
 2569 0758 4146     		mov	r1, r8
 660:../LIB_HW/Hw_IMU.c ****     halfey = (mz * halfwx - mx * halfwz);
 2570              		.loc 1 660 0
 2571 075a 0D90     		str	r0, [sp, #52]	@ float
 2572              	.LVL438:
 661:../LIB_HW/Hw_IMU.c ****     halfez = (mx * halfwy - my * halfwx);
 2573              		.loc 1 661 0
 2574 075c 1398     		ldr	r0, [sp, #76]	@ float
 2575              	.LVL439:
 2576 075e A047     		blx	r4
 2577              	.LVL440:
 2578 0760 1599     		ldr	r1, [sp, #84]	@ float
 2579 0762 0746     		mov	r7, r0
 2580 0764 1E98     		ldr	r0, [sp, #120]	@ float
 2581 0766 A047     		blx	r4
 2582              	.LVL441:
 2583 0768 099B     		ldr	r3, [sp, #36]
 2584 076a 0146     		mov	r1, r0
 2585 076c 3846     		mov	r0, r7
 2586 076e 9847     		blx	r3
 2587              	.LVL442:
 665:../LIB_HW/Hw_IMU.c **** 			(s16)(halfex*10000), (s16)(halfey*10000), (s16)(halfez*10000),
 2588              		.loc 1 665 0
 2589 0770 4FF48041 		mov	r1, #16384
 661:../LIB_HW/Hw_IMU.c ****     halfez = (mx * halfwy - my * halfwx);
 2590              		.loc 1 661 0
 2591 0774 8146     		mov	r9, r0
 2592              	.LVL443:
 665:../LIB_HW/Hw_IMU.c **** 			(s16)(halfex*10000), (s16)(halfey*10000), (s16)(halfez*10000),
 2593              		.loc 1 665 0
 2594 0776 C4F21C61 		movt	r1, 17948
 2595 077a 0C98     		ldr	r0, [sp, #48]	@ float
 2596              	.LVL444:
 2597 077c A047     		blx	r4
 2598              	.LVL445:
 2599 077e 144F     		ldr	r7, .L78+24
 2600 0780 B847     		blx	r7
 2601              	.LVL446:
 2602 0782 4FF48041 		mov	r1, #16384
 664:../LIB_HW/Hw_IMU.c **** 	Lb_printf("mg %d %d %d  %d %d %d  %d %d %d \n", 
 2603              		.loc 1 664 0
 2604 0786 00B2     		sxth	r0, r0
 665:../LIB_HW/Hw_IMU.c **** 			(s16)(halfex*10000), (s16)(halfey*10000), (s16)(halfez*10000),
 2605              		.loc 1 665 0
 2606 0788 C4F21C61 		movt	r1, 17948
 664:../LIB_HW/Hw_IMU.c **** 	Lb_printf("mg %d %d %d  %d %d %d  %d %d %d \n", 
 2607              		.loc 1 664 0
 2608 078c 1D90     		str	r0, [sp, #116]
 665:../LIB_HW/Hw_IMU.c **** 			(s16)(halfex*10000), (s16)(halfey*10000), (s16)(halfez*10000),
 2609              		.loc 1 665 0
 2610 078e 0D98     		ldr	r0, [sp, #52]	@ float
 2611 0790 A047     		blx	r4
 2612              	.LVL447:
 2613 0792 B847     		blx	r7
 2614              	.LVL448:
 2615 0794 4FF48041 		mov	r1, #16384
 664:../LIB_HW/Hw_IMU.c **** 	Lb_printf("mg %d %d %d  %d %d %d  %d %d %d \n", 
 2616              		.loc 1 664 0
 2617 0798 02B2     		sxth	r2, r0
 665:../LIB_HW/Hw_IMU.c **** 			(s16)(halfex*10000), (s16)(halfey*10000), (s16)(halfez*10000),
 2618              		.loc 1 665 0
 2619 079a 0792     		str	r2, [sp, #28]
 2620 079c C4F21C61 		movt	r1, 17948
 2621 07a0 4846     		mov	r0, r9
 2622 07a2 A047     		blx	r4
 2623              	.LVL449:
 2624 07a4 B847     		blx	r7
 2625              	.LVL450:
 666:../LIB_HW/Hw_IMU.c **** 			(s16)(halfwx*10000), (s16)(halfwy*10000), (s16)(halfwz*10000),
 2626              		.loc 1 666 0
 2627 07a6 4FF48041 		mov	r1, #16384
 664:../LIB_HW/Hw_IMU.c **** 	Lb_printf("mg %d %d %d  %d %d %d  %d %d %d \n", 
 2628              		.loc 1 664 0
 2629 07aa 0FFA80FC 		sxth	ip, r0
 666:../LIB_HW/Hw_IMU.c **** 			(s16)(halfwx*10000), (s16)(halfwy*10000), (s16)(halfwz*10000),
 2630              		.loc 1 666 0
 2631 07ae CDF820C0 		str	ip, [sp, #32]
 2632 07b2 C4F21C61 		movt	r1, 17948
 2633 07b6 0DE0     		b	.L79
 2634              	.L80:
 2635              		.align	2
 2636              	.L78:
 2637 07b8 00000000 		.word	__aeabi_fadd
 2638 07bc 00000000 		.word	invSqrt
 2639 07c0 00000000 		.word	__aeabi_fsub
 2640 07c4 00000000 		.word	__aeabi_f2d
 2641 07c8 00000000 		.word	sqrt
 2642 07cc 00000000 		.word	__aeabi_d2f
 2643 07d0 00000000 		.word	__aeabi_f2iz
 2644              	.L79:
 2645 07d4 1598     		ldr	r0, [sp, #84]	@ float
 2646 07d6 A047     		blx	r4
 2647              	.LVL451:
 2648 07d8 B847     		blx	r7
 2649              	.LVL452:
 2650 07da 4FF48041 		mov	r1, #16384
 664:../LIB_HW/Hw_IMU.c **** 	Lb_printf("mg %d %d %d  %d %d %d  %d %d %d \n", 
 2651              		.loc 1 664 0
 2652 07de 03B2     		sxth	r3, r0
 666:../LIB_HW/Hw_IMU.c **** 			(s16)(halfwx*10000), (s16)(halfwy*10000), (s16)(halfwz*10000),
 2653              		.loc 1 666 0
 2654 07e0 C4F21C61 		movt	r1, 17948
 2655 07e4 4046     		mov	r0, r8
 664:../LIB_HW/Hw_IMU.c **** 	Lb_printf("mg %d %d %d  %d %d %d  %d %d %d \n", 
 2656              		.loc 1 664 0
 2657 07e6 0093     		str	r3, [sp, #0]
 666:../LIB_HW/Hw_IMU.c **** 			(s16)(halfwx*10000), (s16)(halfwy*10000), (s16)(halfwz*10000),
 2658              		.loc 1 666 0
 2659 07e8 A047     		blx	r4
 2660              	.LVL453:
 2661 07ea B847     		blx	r7
 2662              	.LVL454:
 2663 07ec 4FF48041 		mov	r1, #16384
 664:../LIB_HW/Hw_IMU.c **** 	Lb_printf("mg %d %d %d  %d %d %d  %d %d %d \n", 
 2664              		.loc 1 664 0
 2665 07f0 02B2     		sxth	r2, r0
 2666 07f2 0192     		str	r2, [sp, #4]
 666:../LIB_HW/Hw_IMU.c **** 			(s16)(halfwx*10000), (s16)(halfwy*10000), (s16)(halfwz*10000),
 2667              		.loc 1 666 0
 2668 07f4 C4F21C61 		movt	r1, 17948
 2669 07f8 1498     		ldr	r0, [sp, #80]	@ float
 2670 07fa A047     		blx	r4
 2671              	.LVL455:
 2672 07fc B847     		blx	r7
 2673              	.LVL456:
 667:../LIB_HW/Hw_IMU.c **** 			(s16)(mx*1000), (s16)(my*1000), (s16)(mz*1000) );
 2674              		.loc 1 667 0
 2675 07fe 0021     		movs	r1, #0
 664:../LIB_HW/Hw_IMU.c **** 	Lb_printf("mg %d %d %d  %d %d %d  %d %d %d \n", 
 2676              		.loc 1 664 0
 2677 0800 03B2     		sxth	r3, r0
 2678 0802 0293     		str	r3, [sp, #8]
 667:../LIB_HW/Hw_IMU.c **** 			(s16)(mx*1000), (s16)(my*1000), (s16)(mz*1000) );
 2679              		.loc 1 667 0
 2680 0804 C4F27A41 		movt	r1, 17530
 2681 0808 1398     		ldr	r0, [sp, #76]	@ float
 2682 080a A047     		blx	r4
 2683              	.LVL457:
 2684 080c B847     		blx	r7
 2685              	.LVL458:
 2686 080e 0021     		movs	r1, #0
 664:../LIB_HW/Hw_IMU.c **** 	Lb_printf("mg %d %d %d  %d %d %d  %d %d %d \n", 
 2687              		.loc 1 664 0
 2688 0810 02B2     		sxth	r2, r0
 2689 0812 0392     		str	r2, [sp, #12]
 667:../LIB_HW/Hw_IMU.c **** 			(s16)(mx*1000), (s16)(my*1000), (s16)(mz*1000) );
 2690              		.loc 1 667 0
 2691 0814 C4F27A41 		movt	r1, 17530
 2692 0818 1E98     		ldr	r0, [sp, #120]	@ float
 2693 081a A047     		blx	r4
 2694              	.LVL459:
 2695 081c B847     		blx	r7
 2696              	.LVL460:
 2697 081e 0021     		movs	r1, #0
 664:../LIB_HW/Hw_IMU.c **** 	Lb_printf("mg %d %d %d  %d %d %d  %d %d %d \n", 
 2698              		.loc 1 664 0
 2699 0820 03B2     		sxth	r3, r0
 2700 0822 0493     		str	r3, [sp, #16]
 667:../LIB_HW/Hw_IMU.c **** 			(s16)(mx*1000), (s16)(my*1000), (s16)(mz*1000) );
 2701              		.loc 1 667 0
 2702 0824 C4F27A41 		movt	r1, 17530
 2703 0828 1F98     		ldr	r0, [sp, #124]	@ float
 2704 082a A047     		blx	r4
 2705              	.LVL461:
 2706 082c B847     		blx	r7
 2707              	.LVL462:
 664:../LIB_HW/Hw_IMU.c **** 	Lb_printf("mg %d %d %d  %d %d %d  %d %d %d \n", 
 2708              		.loc 1 664 0
 2709 082e DDF82080 		ldr	r8, [sp, #32]
 2710              	.LVL463:
 2711 0832 01B2     		sxth	r1, r0
 2712 0834 0591     		str	r1, [sp, #20]
 2713 0836 0948     		ldr	r0, .L81
 2714 0838 1D99     		ldr	r1, [sp, #116]
 2715 083a 079A     		ldr	r2, [sp, #28]
 2716 083c 4346     		mov	r3, r8
 2717 083e 084F     		ldr	r7, .L81+4
 2718 0840 B847     		blx	r7
 2719              	.LVL464:
 2720 0842 4CE4     		b	.L38
 2721              	.LVL465:
 2722              	.L66:
 2723 0844 074B     		ldr	r3, .L81+8
 2724              	.LBE10:
 707:../LIB_HW/Hw_IMU.c ****       integralFBx = 0.0f; // prevent integral windup
 2725              		.loc 1 707 0
 2726 0846 0848     		ldr	r0, .L81+12
 2727 0848 1A68     		ldr	r2, [r3, #0]	@ float
 708:../LIB_HW/Hw_IMU.c ****       integralFBy = 0.0f;
 2728              		.loc 1 708 0
 2729 084a 0849     		ldr	r1, .L81+16
 709:../LIB_HW/Hw_IMU.c ****       integralFBz = 0.0f;
 2730              		.loc 1 709 0
 2731 084c 084B     		ldr	r3, .L81+20
 707:../LIB_HW/Hw_IMU.c ****       integralFBx = 0.0f; // prevent integral windup
 2732              		.loc 1 707 0
 2733 084e 0760     		str	r7, [r0, #0]	@ float
 2734 0850 DFF82080 		ldr	r8, .L81+24
 708:../LIB_HW/Hw_IMU.c ****       integralFBy = 0.0f;
 2735              		.loc 1 708 0
 2736 0854 0F60     		str	r7, [r1, #0]	@ float
 709:../LIB_HW/Hw_IMU.c ****       integralFBz = 0.0f;
 2737              		.loc 1 709 0
 2738 0856 1F60     		str	r7, [r3, #0]	@ float
 2739 0858 E2E4     		b	.L52
 2740              	.L82:
 2741 085a 00BF     		.align	2
 2742              	.L81:
 2743 085c 48000000 		.word	.LC3
 2744 0860 00000000 		.word	Lb_printf
 2745 0864 00000000 		.word	sampleFreq
 2746 0868 00000000 		.word	integralFBx
 2747 086c 00000000 		.word	integralFBy
 2748 0870 00000000 		.word	integralFBz
 2749 0874 00000000 		.word	__aeabi_fdiv
 2750              		.cfi_endproc
 2751              	.LFE8:
 2753              		.global	__aeabi_ddiv
 2754              		.section	.text.Hw_IMU_FreeIMU_getQ,"ax",%progbits
 2755              		.align	2
 2756              		.global	Hw_IMU_FreeIMU_getQ
 2757              		.thumb
 2758              		.thumb_func
 2760              	Hw_IMU_FreeIMU_getQ:
 2761              	.LFB9:
 749:../LIB_HW/Hw_IMU.c **** {
 2762              		.loc 1 749 0
 2763              		.cfi_startproc
 2764              		@ args = 0, pretend = 0, frame = 40
 2765              		@ frame_needed = 0, uses_anonymous_args = 0
 2766              	.LVL466:
 2767 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2768              	.LCFI17:
 2769              		.cfi_def_cfa_offset 36
 2770              		.cfi_offset 4, -36
 2771              		.cfi_offset 5, -32
 2772              		.cfi_offset 6, -28
 2773              		.cfi_offset 7, -24
 2774              		.cfi_offset 8, -20
 2775              		.cfi_offset 9, -16
 2776              		.cfi_offset 10, -12
 2777              		.cfi_offset 11, -8
 2778              		.cfi_offset 14, -4
 755:../LIB_HW/Hw_IMU.c ****   Err = Hw_IMU_FreeIMU_getValues(val);
 2779              		.loc 1 755 0
 2780 0004 40F20003 		movw	r3, #:lower16:Hw_IMU_FreeIMU_getValues
 749:../LIB_HW/Hw_IMU.c **** {
 2781              		.loc 1 749 0
 2782 0008 91B0     		sub	sp, sp, #68
 2783              	.LCFI18:
 2784              		.cfi_def_cfa_offset 104
 749:../LIB_HW/Hw_IMU.c **** {
 2785              		.loc 1 749 0
 2786 000a 0746     		mov	r7, r0
 755:../LIB_HW/Hw_IMU.c ****   Err = Hw_IMU_FreeIMU_getValues(val);
 2787              		.loc 1 755 0
 2788 000c C0F20003 		movt	r3, #:upper16:Hw_IMU_FreeIMU_getValues
 2789 0010 07A8     		add	r0, sp, #28
 2790              	.LVL467:
 2791 0012 9847     		blx	r3
 2792              	.LVL468:
 2793 0014 8246     		mov	sl, r0
 2794              	.LVL469:
 768:../LIB_HW/Hw_IMU.c ****   now = Hw_Timer_Get_u16Count_Usec();
 2795              		.loc 1 768 0
 2796 0016 40F20000 		movw	r0, #:lower16:Hw_Timer_Get_u16Count_Usec
 2797              	.LVL470:
 2798 001a C0F20000 		movt	r0, #:upper16:Hw_Timer_Get_u16Count_Usec
 2799 001e 8047     		blx	r0
 2800              	.LVL471:
 769:../LIB_HW/Hw_IMU.c ****   time_gap = now - lastUpdate;
 2801              		.loc 1 769 0
 2802 0020 40F20008 		movw	r8, #:lower16:lastUpdate
 2803 0024 C0F20008 		movt	r8, #:upper16:lastUpdate
 2804 0028 B8F80010 		ldrh	r1, [r8, #0]
 768:../LIB_HW/Hw_IMU.c ****   now = Hw_Timer_Get_u16Count_Usec();
 2805              		.loc 1 768 0
 2806 002c 40F20002 		movw	r2, #:lower16:now
 2807 0030 8146     		mov	r9, r0
 769:../LIB_HW/Hw_IMU.c ****   time_gap = now - lastUpdate;
 2808              		.loc 1 769 0
 2809 0032 441A     		subs	r4, r0, r1
 768:../LIB_HW/Hw_IMU.c ****   now = Hw_Timer_Get_u16Count_Usec();
 2810              		.loc 1 768 0
 2811 0034 C0F20002 		movt	r2, #:upper16:now
 771:../LIB_HW/Hw_IMU.c ****   sampleFreq = 1.0 / ((time_gap) / 1000000.0);
 2812              		.loc 1 771 0
 2813 0038 40F20005 		movw	r5, #:lower16:__aeabi_i2d
 768:../LIB_HW/Hw_IMU.c ****   now = Hw_Timer_Get_u16Count_Usec();
 2814              		.loc 1 768 0
 2815 003c A2F80090 		strh	r9, [r2, #0]	@ movhi
 2816              	.LVL472:
 771:../LIB_HW/Hw_IMU.c ****   sampleFreq = 1.0 / ((time_gap) / 1000000.0);
 2817              		.loc 1 771 0
 2818 0040 C0F20005 		movt	r5, #:upper16:__aeabi_i2d
 2819 0044 A0B2     		uxth	r0, r4
 2820              	.LVL473:
 2821 0046 40F20004 		movw	r4, #:lower16:__aeabi_ddiv
 2822 004a A847     		blx	r5
 2823              	.LVL474:
 2824 004c 3CA3     		adr	r3, .L84
 2825 004e D3E90023 		ldrd	r2, [r3]
 2826 0052 C0F20004 		movt	r4, #:upper16:__aeabi_ddiv
 2827 0056 A047     		blx	r4
 2828              	.LVL475:
 2829 0058 0B46     		mov	r3, r1
 2830 005a 0021     		movs	r1, #0
 2831 005c 0246     		mov	r2, r0
 2832 005e C3F6F071 		movt	r1, 16368
 2833 0062 0020     		movs	r0, #0
 2834 0064 40F20005 		movw	r5, #:lower16:__aeabi_d2f
 2835 0068 A047     		blx	r4
 2836              	.LVL476:
 2837 006a C0F20005 		movt	r5, #:upper16:__aeabi_d2f
 2838 006e A847     		blx	r5
 2839              	.LVL477:
 2840 0070 40F20006 		movw	r6, #:lower16:sampleFreq
 2841 0074 C0F20006 		movt	r6, #:upper16:sampleFreq
 780:../LIB_HW/Hw_IMU.c ****   Hw_IMU_FreeIMU_AHRSupdate(val[3] * M_PI/180, val[4] * M_PI/180, val[5] * M_PI/180, val[0], val[1]
 2842              		.loc 1 780 0
 2843 0078 40F2000B 		movw	fp, #:lower16:__aeabi_f2d
 2844 007c C0F2000B 		movt	fp, #:upper16:__aeabi_f2d
 771:../LIB_HW/Hw_IMU.c ****   sampleFreq = 1.0 / ((time_gap) / 1000000.0);
 2845              		.loc 1 771 0
 2846 0080 3060     		str	r0, [r6, #0]	@ float
 775:../LIB_HW/Hw_IMU.c ****   lastUpdate = now;
 2847              		.loc 1 775 0
 2848 0082 A8F80090 		strh	r9, [r8, #0]	@ movhi
 780:../LIB_HW/Hw_IMU.c ****   Hw_IMU_FreeIMU_AHRSupdate(val[3] * M_PI/180, val[4] * M_PI/180, val[5] * M_PI/180, val[0], val[1]
 2849              		.loc 1 780 0
 2850 0086 0A98     		ldr	r0, [sp, #40]	@ float
 2851 0088 40F20006 		movw	r6, #:lower16:__aeabi_dmul
 2852 008c C0F20006 		movt	r6, #:upper16:__aeabi_dmul
 2853 0090 D847     		blx	fp
 2854              	.LVL478:
 2855 0092 2DA3     		adr	r3, .L84+8
 2856 0094 D3E90023 		ldrd	r2, [r3]
 2857 0098 B047     		blx	r6
 2858              	.LVL479:
 2859 009a 4FF40043 		mov	r3, #32768
 2860 009e 0022     		movs	r2, #0
 2861 00a0 C4F26603 		movt	r3, 16486
 2862 00a4 A047     		blx	r4
 2863              	.LVL480:
 2864 00a6 A847     		blx	r5
 2865              	.LVL481:
 2866 00a8 8146     		mov	r9, r0
 2867 00aa 0B98     		ldr	r0, [sp, #44]	@ float
 2868 00ac D847     		blx	fp
 2869              	.LVL482:
 2870 00ae 26A3     		adr	r3, .L84+8
 2871 00b0 D3E90023 		ldrd	r2, [r3]
 2872 00b4 B047     		blx	r6
 2873              	.LVL483:
 2874 00b6 4FF40043 		mov	r3, #32768
 2875 00ba 0022     		movs	r2, #0
 2876 00bc C4F26603 		movt	r3, 16486
 2877 00c0 A047     		blx	r4
 2878              	.LVL484:
 2879 00c2 A847     		blx	r5
 2880              	.LVL485:
 2881 00c4 8046     		mov	r8, r0
 2882 00c6 0C98     		ldr	r0, [sp, #48]	@ float
 2883 00c8 D847     		blx	fp
 2884              	.LVL486:
 2885 00ca 1FA3     		adr	r3, .L84+8
 2886 00cc D3E90023 		ldrd	r2, [r3]
 2887 00d0 B047     		blx	r6
 2888              	.LVL487:
 2889 00d2 4FF40043 		mov	r3, #32768
 2890 00d6 0022     		movs	r2, #0
 2891 00d8 C4F26603 		movt	r3, 16486
 2892 00dc A047     		blx	r4
 2893              	.LVL488:
 2894 00de A847     		blx	r5
 2895              	.LVL489:
 2896 00e0 089B     		ldr	r3, [sp, #32]	@ float
 2897 00e2 0999     		ldr	r1, [sp, #36]	@ float
 2898 00e4 0093     		str	r3, [sp, #0]	@ float
 2899 00e6 0D9B     		ldr	r3, [sp, #52]	@ float
 2900 00e8 0191     		str	r1, [sp, #4]	@ float
 2901 00ea 0293     		str	r3, [sp, #8]	@ float
 2902 00ec 0E99     		ldr	r1, [sp, #56]	@ float
 2903 00ee 0F9B     		ldr	r3, [sp, #60]	@ float
 2904 00f0 40F20004 		movw	r4, #:lower16:Hw_IMU_FreeIMU_AHRSupdate
 2905 00f4 0246     		mov	r2, r0
 2906 00f6 0391     		str	r1, [sp, #12]	@ float
 2907 00f8 4846     		mov	r0, r9
 2908 00fa 0493     		str	r3, [sp, #16]	@ float
 2909 00fc 4146     		mov	r1, r8
 2910 00fe 079B     		ldr	r3, [sp, #28]	@ float
 2911 0100 C0F20004 		movt	r4, #:upper16:Hw_IMU_FreeIMU_AHRSupdate
 2912 0104 A047     		blx	r4
 2913              	.LVL490:
 783:../LIB_HW/Hw_IMU.c ****   q[0] = q0;
 2914              		.loc 1 783 0
 2915 0106 40F20000 		movw	r0, #:lower16:q0
 2916 010a C0F20000 		movt	r0, #:upper16:q0
 2917 010e 0068     		ldr	r0, [r0, #0]	@ float
 784:../LIB_HW/Hw_IMU.c ****   q[1] = q1;
 2918              		.loc 1 784 0
 2919 0110 40F20001 		movw	r1, #:lower16:q1
 785:../LIB_HW/Hw_IMU.c ****   q[2] = q2;
 2920              		.loc 1 785 0
 2921 0114 40F20002 		movw	r2, #:lower16:q2
 786:../LIB_HW/Hw_IMU.c ****   q[3] = q3;
 2922              		.loc 1 786 0
 2923 0118 40F20003 		movw	r3, #:lower16:q3
 783:../LIB_HW/Hw_IMU.c ****   q[0] = q0;
 2924              		.loc 1 783 0
 2925 011c 3860     		str	r0, [r7, #0]	@ float
 784:../LIB_HW/Hw_IMU.c ****   q[1] = q1;
 2926              		.loc 1 784 0
 2927 011e C0F20001 		movt	r1, #:upper16:q1
 785:../LIB_HW/Hw_IMU.c ****   q[2] = q2;
 2928              		.loc 1 785 0
 2929 0122 C0F20002 		movt	r2, #:upper16:q2
 786:../LIB_HW/Hw_IMU.c ****   q[3] = q3;
 2930              		.loc 1 786 0
 2931 0126 C0F20003 		movt	r3, #:upper16:q3
 784:../LIB_HW/Hw_IMU.c ****   q[1] = q1;
 2932              		.loc 1 784 0
 2933 012a 0868     		ldr	r0, [r1, #0]	@ float
 785:../LIB_HW/Hw_IMU.c ****   q[2] = q2;
 2934              		.loc 1 785 0
 2935 012c 1168     		ldr	r1, [r2, #0]	@ float
 786:../LIB_HW/Hw_IMU.c ****   q[3] = q3;
 2936              		.loc 1 786 0
 2937 012e 1A68     		ldr	r2, [r3, #0]	@ float
 784:../LIB_HW/Hw_IMU.c ****   q[1] = q1;
 2938              		.loc 1 784 0
 2939 0130 7860     		str	r0, [r7, #4]	@ float
 785:../LIB_HW/Hw_IMU.c ****   q[2] = q2;
 2940              		.loc 1 785 0
 2941 0132 B960     		str	r1, [r7, #8]	@ float
 786:../LIB_HW/Hw_IMU.c ****   q[3] = q3;
 2942              		.loc 1 786 0
 2943 0134 FA60     		str	r2, [r7, #12]	@ float
 789:../LIB_HW/Hw_IMU.c **** }
 2944              		.loc 1 789 0
 2945 0136 5046     		mov	r0, sl
 2946 0138 11B0     		add	sp, sp, #68
 2947 013a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2948              	.L85:
 2949 013e 00BF     		.align	3
 2950              	.L84:
 2951 0140 00000000 		.word	0
 2952 0144 80842E41 		.word	1093567616
 2953 0148 182D4454 		.word	1413754136
 2954 014c FB210940 		.word	1074340347
 2955              		.cfi_endproc
 2956              	.LFE9:
 2958              		.section	.text.Hw_IMU_FreeIMU_getYawPitchRollRad,"ax",%progbits
 2959              		.align	2
 2960              		.global	Hw_IMU_FreeIMU_getYawPitchRollRad
 2961              		.thumb
 2962              		.thumb_func
 2964              	Hw_IMU_FreeIMU_getYawPitchRollRad:
 2965              	.LFB11:
 824:../LIB_HW/Hw_IMU.c **** {
 2966              		.loc 1 824 0
 2967              		.cfi_startproc
 2968              		@ args = 0, pretend = 0, frame = 56
 2969              		@ frame_needed = 0, uses_anonymous_args = 0
 2970              	.LVL491:
 2971 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2972              	.LCFI19:
 2973              		.cfi_def_cfa_offset 36
 2974              		.cfi_offset 4, -36
 2975              		.cfi_offset 5, -32
 2976              		.cfi_offset 6, -28
 2977              		.cfi_offset 7, -24
 2978              		.cfi_offset 8, -20
 2979              		.cfi_offset 9, -16
 2980              		.cfi_offset 10, -12
 2981              		.cfi_offset 11, -8
 2982              		.cfi_offset 14, -4
 829:../LIB_HW/Hw_IMU.c ****   Err = Hw_IMU_FreeIMU_getQ(q);
 2983              		.loc 1 829 0
 2984 0004 40F20003 		movw	r3, #:lower16:Hw_IMU_FreeIMU_getQ
 824:../LIB_HW/Hw_IMU.c **** {
 2985              		.loc 1 824 0
 2986 0008 8FB0     		sub	sp, sp, #60
 2987              	.LCFI20:
 2988              		.cfi_def_cfa_offset 96
 829:../LIB_HW/Hw_IMU.c ****   Err = Hw_IMU_FreeIMU_getQ(q);
 2989              		.loc 1 829 0
 2990 000a C0F20003 		movt	r3, #:upper16:Hw_IMU_FreeIMU_getQ
 824:../LIB_HW/Hw_IMU.c **** {
 2991              		.loc 1 824 0
 2992 000e 0390     		str	r0, [sp, #12]
 829:../LIB_HW/Hw_IMU.c ****   Err = Hw_IMU_FreeIMU_getQ(q);
 2993              		.loc 1 829 0
 2994 0010 0AA8     		add	r0, sp, #40
 2995              	.LVL492:
 2996 0012 9847     		blx	r3
 2997              	.LVL493:
 831:../LIB_HW/Hw_IMU.c ****   gx = 2 * (q[1]*q[3] - q[0]*q[2]);
 2998              		.loc 1 831 0
 2999 0014 DDF82CB0 		ldr	fp, [sp, #44]	@ float
 3000 0018 DDF83490 		ldr	r9, [sp, #52]	@ float
 3001 001c 40F20004 		movw	r4, #:lower16:__aeabi_fmul
 3002 0020 C0F20004 		movt	r4, #:upper16:__aeabi_fmul
 829:../LIB_HW/Hw_IMU.c ****   Err = Hw_IMU_FreeIMU_getQ(q);
 3003              		.loc 1 829 0
 3004 0024 0690     		str	r0, [sp, #24]
 3005              	.LVL494:
 831:../LIB_HW/Hw_IMU.c ****   gx = 2 * (q[1]*q[3] - q[0]*q[2]);
 3006              		.loc 1 831 0
 3007 0026 4946     		mov	r1, r9
 3008 0028 5846     		mov	r0, fp
 3009 002a A047     		blx	r4
 3010              	.LVL495:
 3011 002c 0A9F     		ldr	r7, [sp, #40]	@ float
 3012 002e 0C9E     		ldr	r6, [sp, #48]	@ float
 3013 0030 0546     		mov	r5, r0
 3014 0032 3146     		mov	r1, r6
 3015 0034 3846     		mov	r0, r7
 3016 0036 A047     		blx	r4
 3017              	.LVL496:
 3018 0038 40F2000A 		movw	sl, #:lower16:__aeabi_fsub
 3019 003c C0F2000A 		movt	sl, #:upper16:__aeabi_fsub
 3020 0040 0146     		mov	r1, r0
 3021 0042 2846     		mov	r0, r5
 3022 0044 D047     		blx	sl
 3023              	.LVL497:
 3024 0046 40F20005 		movw	r5, #:lower16:__aeabi_fadd
 3025 004a C0F20005 		movt	r5, #:upper16:__aeabi_fadd
 3026 004e 0146     		mov	r1, r0
 3027 0050 A847     		blx	r5
 3028              	.LVL498:
 832:../LIB_HW/Hw_IMU.c ****   gy = 2 * (q[0]*q[1] + q[2]*q[3]);
 3029              		.loc 1 832 0
 3030 0052 3946     		mov	r1, r7
 831:../LIB_HW/Hw_IMU.c ****   gx = 2 * (q[1]*q[3] - q[0]*q[2]);
 3031              		.loc 1 831 0
 3032 0054 0490     		str	r0, [sp, #16]	@ float
 3033              	.LVL499:
 832:../LIB_HW/Hw_IMU.c ****   gy = 2 * (q[0]*q[1] + q[2]*q[3]);
 3034              		.loc 1 832 0
 3035 0056 5846     		mov	r0, fp
 3036              	.LVL500:
 3037 0058 A047     		blx	r4
 3038              	.LVL501:
 3039 005a 3146     		mov	r1, r6
 3040 005c 8046     		mov	r8, r0
 3041 005e 4846     		mov	r0, r9
 3042 0060 A047     		blx	r4
 3043              	.LVL502:
 3044 0062 0146     		mov	r1, r0
 3045 0064 4046     		mov	r0, r8
 3046 0066 A847     		blx	r5
 3047              	.LVL503:
 3048 0068 0146     		mov	r1, r0
 3049 006a A847     		blx	r5
 3050              	.LVL504:
 3051 006c 8446     		mov	ip, r0
 3052              	.LVL505:
 833:../LIB_HW/Hw_IMU.c ****   gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 3053              		.loc 1 833 0
 3054 006e CDF800C0 		str	ip, [sp, #0]
 3055 0072 3946     		mov	r1, r7
 3056 0074 3846     		mov	r0, r7
 3057              	.LVL506:
 3058 0076 A047     		blx	r4
 3059              	.LVL507:
 3060 0078 5946     		mov	r1, fp
 3061 007a 8046     		mov	r8, r0
 3062 007c 5846     		mov	r0, fp
 3063 007e A047     		blx	r4
 3064              	.LVL508:
 3065 0080 0146     		mov	r1, r0
 3066 0082 4046     		mov	r0, r8
 3067 0084 D047     		blx	sl
 3068              	.LVL509:
 3069 0086 3146     		mov	r1, r6
 3070 0088 8046     		mov	r8, r0
 3071 008a 3046     		mov	r0, r6
 3072 008c A047     		blx	r4
 3073              	.LVL510:
 3074 008e 0146     		mov	r1, r0
 3075 0090 4046     		mov	r0, r8
 3076 0092 D047     		blx	sl
 3077              	.LVL511:
 3078 0094 4946     		mov	r1, r9
 3079 0096 8046     		mov	r8, r0
 3080 0098 4846     		mov	r0, r9
 3081 009a A047     		blx	r4
 3082              	.LVL512:
 3083 009c 0146     		mov	r1, r0
 3084 009e 4046     		mov	r0, r8
 3085 00a0 A847     		blx	r5
 3086              	.LVL513:
 835:../LIB_HW/Hw_IMU.c ****   ypr[0] = atan2(2 * q[1] * q[2] - 2 * q[0] * q[3], 2 * q[0]*q[0] + 2 * q[1] * q[1] - 1);
 3087              		.loc 1 835 0
 3088 00a2 5946     		mov	r1, fp
 833:../LIB_HW/Hw_IMU.c ****   gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 3089              		.loc 1 833 0
 3090 00a4 0790     		str	r0, [sp, #28]	@ float
 3091              	.LVL514:
 835:../LIB_HW/Hw_IMU.c ****   ypr[0] = atan2(2 * q[1] * q[2] - 2 * q[0] * q[3], 2 * q[0]*q[0] + 2 * q[1] * q[1] - 1);
 3092              		.loc 1 835 0
 3093 00a6 5846     		mov	r0, fp
 3094              	.LVL515:
 3095 00a8 A847     		blx	r5
 3096              	.LVL516:
 3097 00aa 3946     		mov	r1, r7
 3098 00ac 8046     		mov	r8, r0
 3099 00ae 3846     		mov	r0, r7
 3100 00b0 A847     		blx	r5
 3101              	.LVL517:
 3102 00b2 4146     		mov	r1, r8
 3103 00b4 0590     		str	r0, [sp, #20]	@ float
 3104 00b6 3046     		mov	r0, r6
 3105 00b8 A047     		blx	r4
 3106              	.LVL518:
 3107 00ba 0599     		ldr	r1, [sp, #20]	@ float
 3108 00bc 0646     		mov	r6, r0
 3109 00be 4846     		mov	r0, r9
 3110 00c0 A047     		blx	r4
 3111              	.LVL519:
 3112 00c2 0146     		mov	r1, r0
 3113 00c4 3046     		mov	r0, r6
 3114 00c6 40F20006 		movw	r6, #:lower16:__aeabi_f2d
 3115 00ca D047     		blx	sl
 3116              	.LVL520:
 3117 00cc C0F20006 		movt	r6, #:upper16:__aeabi_f2d
 3118 00d0 B047     		blx	r6
 3119              	.LVL521:
 3120 00d2 CDE90801 		strd	r0, [sp, #32]
 3121 00d6 0599     		ldr	r1, [sp, #20]	@ float
 3122 00d8 3846     		mov	r0, r7
 3123 00da A047     		blx	r4
 3124              	.LVL522:
 3125 00dc 4146     		mov	r1, r8
 3126 00de 0746     		mov	r7, r0
 3127 00e0 5846     		mov	r0, fp
 3128 00e2 A047     		blx	r4
 3129              	.LVL523:
 3130 00e4 0146     		mov	r1, r0
 3131 00e6 3846     		mov	r0, r7
 3132 00e8 A847     		blx	r5
 3133              	.LVL524:
 3134 00ea 4FF07E51 		mov	r1, #1065353216
 3135 00ee D047     		blx	sl
 3136              	.LVL525:
 3137 00f0 B047     		blx	r6
 3138              	.LVL526:
 3139 00f2 40F2000B 		movw	fp, #:lower16:atan2
 3140 00f6 0B46     		mov	r3, r1
 3141 00f8 0246     		mov	r2, r0
 3142 00fa C0F2000B 		movt	fp, #:upper16:atan2
 3143 00fe DDE90801 		ldrd	r0, [sp, #32]
 3144 0102 40F20007 		movw	r7, #:lower16:__aeabi_d2f
 3145 0106 D847     		blx	fp
 3146              	.LVL527:
 3147 0108 C0F20007 		movt	r7, #:upper16:__aeabi_d2f
 3148 010c B847     		blx	r7
 3149              	.LVL528:
 3150 010e 0399     		ldr	r1, [sp, #12]
 836:../LIB_HW/Hw_IMU.c ****   ypr[1] = atan(gx / sqrt(gy*gy + gz*gz));
 3151              		.loc 1 836 0
 3152 0110 40F2000A 		movw	sl, #:lower16:sqrt
 835:../LIB_HW/Hw_IMU.c ****   ypr[0] = atan2(2 * q[1] * q[2] - 2 * q[0] * q[3], 2 * q[0]*q[0] + 2 * q[1] * q[1] - 1);
 3153              		.loc 1 835 0
 3154 0114 0860     		str	r0, [r1, #0]	@ float
 836:../LIB_HW/Hw_IMU.c ****   ypr[1] = atan(gx / sqrt(gy*gy + gz*gz));
 3155              		.loc 1 836 0
 3156 0116 0798     		ldr	r0, [sp, #28]	@ float
 3157 0118 C0F2000A 		movt	sl, #:upper16:sqrt
 3158 011c 0146     		mov	r1, r0
 3159 011e A047     		blx	r4
 3160              	.LVL529:
 3161 0120 DDF80090 		ldr	r9, [sp, #0]
 3162 0124 8346     		mov	fp, r0
 3163 0126 4946     		mov	r1, r9
 3164 0128 4846     		mov	r0, r9
 3165 012a A047     		blx	r4
 3166              	.LVL530:
 3167 012c 5946     		mov	r1, fp
 3168 012e A847     		blx	r5
 3169              	.LVL531:
 3170 0130 B047     		blx	r6
 3171              	.LVL532:
 3172 0132 D047     		blx	sl
 3173              	.LVL533:
 3174 0134 0246     		mov	r2, r0
 3175 0136 0292     		str	r2, [sp, #8]
 3176 0138 0498     		ldr	r0, [sp, #16]	@ float
 3177 013a 0191     		str	r1, [sp, #4]
 3178 013c 40F20009 		movw	r9, #:lower16:__aeabi_ddiv
 3179 0140 B047     		blx	r6
 3180              	.LVL534:
 3181 0142 C0F20009 		movt	r9, #:upper16:__aeabi_ddiv
 3182 0146 029A     		ldr	r2, [sp, #8]
 3183 0148 019B     		ldr	r3, [sp, #4]
 3184 014a 40F20008 		movw	r8, #:lower16:atan
 3185 014e C847     		blx	r9
 3186              	.LVL535:
 3187 0150 C0F20008 		movt	r8, #:upper16:atan
 3188 0154 C047     		blx	r8
 3189              	.LVL536:
 3190 0156 B847     		blx	r7
 3191              	.LVL537:
 3192 0158 0399     		ldr	r1, [sp, #12]
 3193 015a 4860     		str	r0, [r1, #4]	@ float
 837:../LIB_HW/Hw_IMU.c ****   ypr[2] = atan(gy / sqrt(gx*gx + gz*gz));
 3194              		.loc 1 837 0
 3195 015c 0498     		ldr	r0, [sp, #16]	@ float
 3196 015e 0146     		mov	r1, r0
 3197 0160 A047     		blx	r4
 3198              	.LVL538:
 3199 0162 0146     		mov	r1, r0
 3200 0164 5846     		mov	r0, fp
 3201 0166 A847     		blx	r5
 3202              	.LVL539:
 3203 0168 B047     		blx	r6
 3204              	.LVL540:
 3205 016a D047     		blx	sl
 3206              	.LVL541:
 3207 016c DDF800C0 		ldr	ip, [sp, #0]
 3208 0170 0446     		mov	r4, r0
 3209 0172 0D46     		mov	r5, r1
 3210 0174 6046     		mov	r0, ip
 3211 0176 B047     		blx	r6
 3212              	.LVL542:
 3213 0178 2246     		mov	r2, r4
 3214 017a 2B46     		mov	r3, r5
 3215 017c C847     		blx	r9
 3216              	.LVL543:
 3217 017e C047     		blx	r8
 3218              	.LVL544:
 3219 0180 B847     		blx	r7
 3220              	.LVL545:
 3221 0182 039A     		ldr	r2, [sp, #12]
 3222 0184 9060     		str	r0, [r2, #8]	@ float
 840:../LIB_HW/Hw_IMU.c **** }
 3223              		.loc 1 840 0
 3224 0186 0698     		ldr	r0, [sp, #24]
 3225 0188 0FB0     		add	sp, sp, #60
 3226 018a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 3227              		.cfi_endproc
 3228              	.LFE11:
 3230 018e 00BF     		.section	.text.Hw_IMU_FreeIMU_getYawPitchRoll,"ax",%progbits
 3231              		.align	2
 3232              		.global	Hw_IMU_FreeIMU_getYawPitchRoll
 3233              		.thumb
 3234              		.thumb_func
 3236              	Hw_IMU_FreeIMU_getYawPitchRoll:
 3237              	.LFB12:
 853:../LIB_HW/Hw_IMU.c **** {
 3238              		.loc 1 853 0
 3239              		.cfi_startproc
 3240              		@ args = 0, pretend = 0, frame = 0
 3241              		@ frame_needed = 0, uses_anonymous_args = 0
 3242              	.LVL546:
 856:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_FreeIMU_getYawPitchRollRad(ypr);
 3243              		.loc 1 856 0
 3244 0000 40F20003 		movw	r3, #:lower16:Hw_IMU_FreeIMU_getYawPitchRollRad
 853:../LIB_HW/Hw_IMU.c **** {
 3245              		.loc 1 853 0
 3246 0004 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3247              	.LCFI21:
 3248              		.cfi_def_cfa_offset 24
 3249              		.cfi_offset 4, -24
 3250              		.cfi_offset 5, -20
 3251              		.cfi_offset 6, -16
 3252              		.cfi_offset 7, -12
 3253              		.cfi_offset 8, -8
 3254              		.cfi_offset 14, -4
 856:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_FreeIMU_getYawPitchRollRad(ypr);
 3255              		.loc 1 856 0
 3256 0008 C0F20003 		movt	r3, #:upper16:Hw_IMU_FreeIMU_getYawPitchRollRad
 853:../LIB_HW/Hw_IMU.c **** {
 3257              		.loc 1 853 0
 3258 000c 0446     		mov	r4, r0
 856:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_FreeIMU_getYawPitchRollRad(ypr);
 3259              		.loc 1 856 0
 3260 000e 9847     		blx	r3
 3261              	.LVL547:
 3262              	.LBB11:
 3263              	.LBB12:
 869:../LIB_HW/Hw_IMU.c ****   arr[0] *= 180/M_PI;
 3264              		.loc 1 869 0
 3265 0010 40F20007 		movw	r7, #:lower16:__aeabi_f2d
 3266 0014 C0F20007 		movt	r7, #:upper16:__aeabi_f2d
 3267              	.LBE12:
 3268              	.LBE11:
 856:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_FreeIMU_getYawPitchRollRad(ypr);
 3269              		.loc 1 856 0
 3270 0018 8046     		mov	r8, r0
 3271              	.LVL548:
 3272              	.LBB14:
 3273              	.LBB13:
 869:../LIB_HW/Hw_IMU.c ****   arr[0] *= 180/M_PI;
 3274              		.loc 1 869 0
 3275 001a 40F20006 		movw	r6, #:lower16:__aeabi_dmul
 3276 001e 2068     		ldr	r0, [r4, #0]	@ float
 3277              	.LVL549:
 3278 0020 B847     		blx	r7
 3279              	.LVL550:
 3280 0022 0FA3     		adr	r3, .L88
 3281 0024 D3E90023 		ldrd	r2, [r3]
 3282 0028 C0F20006 		movt	r6, #:upper16:__aeabi_dmul
 3283 002c 40F20005 		movw	r5, #:lower16:__aeabi_d2f
 3284 0030 B047     		blx	r6
 3285              	.LVL551:
 3286 0032 C0F20005 		movt	r5, #:upper16:__aeabi_d2f
 3287 0036 A847     		blx	r5
 3288              	.LVL552:
 3289 0038 2060     		str	r0, [r4, #0]	@ float
 870:../LIB_HW/Hw_IMU.c ****   arr[1] *= 180/M_PI;
 3290              		.loc 1 870 0
 3291 003a 6068     		ldr	r0, [r4, #4]	@ float
 3292 003c B847     		blx	r7
 3293              	.LVL553:
 3294 003e 08A3     		adr	r3, .L88
 3295 0040 D3E90023 		ldrd	r2, [r3]
 3296 0044 B047     		blx	r6
 3297              	.LVL554:
 3298 0046 A847     		blx	r5
 3299              	.LVL555:
 3300 0048 6060     		str	r0, [r4, #4]	@ float
 871:../LIB_HW/Hw_IMU.c ****   arr[2] *= 180/M_PI;
 3301              		.loc 1 871 0
 3302 004a A068     		ldr	r0, [r4, #8]	@ float
 3303 004c B847     		blx	r7
 3304              	.LVL556:
 3305 004e 04A3     		adr	r3, .L88
 3306 0050 D3E90023 		ldrd	r2, [r3]
 3307 0054 B047     		blx	r6
 3308              	.LVL557:
 3309 0056 A847     		blx	r5
 3310              	.LVL558:
 3311 0058 A060     		str	r0, [r4, #8]	@ float
 3312              	.LBE13:
 3313              	.LBE14:
 860:../LIB_HW/Hw_IMU.c **** }
 3314              		.loc 1 860 0
 3315 005a 4046     		mov	r0, r8
 3316 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3317              	.L89:
 3318              		.align	3
 3319              	.L88:
 3320 0060 F8C1631A 		.word	442745336
 3321 0064 DCA54C40 		.word	1078765020
 3322              		.cfi_endproc
 3323              	.LFE12:
 3325              		.section	.text.Hw_IMU_FreeIMU_getEulerRad,"ax",%progbits
 3326              		.align	2
 3327              		.global	Hw_IMU_FreeIMU_getEulerRad
 3328              		.thumb
 3329              		.thumb_func
 3331              	Hw_IMU_FreeIMU_getEulerRad:
 3332              	.LFB10:
 802:../LIB_HW/Hw_IMU.c **** {
 3333              		.loc 1 802 0
 3334              		.cfi_startproc
 3335              		@ args = 0, pretend = 0, frame = 40
 3336              		@ frame_needed = 0, uses_anonymous_args = 0
 3337              	.LVL559:
 3338 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 3339              	.LCFI22:
 3340              		.cfi_def_cfa_offset 36
 3341              		.cfi_offset 4, -36
 3342              		.cfi_offset 5, -32
 3343              		.cfi_offset 6, -28
 3344              		.cfi_offset 7, -24
 3345              		.cfi_offset 8, -20
 3346              		.cfi_offset 9, -16
 3347              		.cfi_offset 10, -12
 3348              		.cfi_offset 11, -8
 3349              		.cfi_offset 14, -4
 805:../LIB_HW/Hw_IMU.c ****   Err = Hw_IMU_FreeIMU_getQ(q);
 3350              		.loc 1 805 0
 3351 0004 40F20003 		movw	r3, #:lower16:Hw_IMU_FreeIMU_getQ
 802:../LIB_HW/Hw_IMU.c **** {
 3352              		.loc 1 802 0
 3353 0008 8BB0     		sub	sp, sp, #44
 3354              	.LCFI23:
 3355              		.cfi_def_cfa_offset 80
 805:../LIB_HW/Hw_IMU.c ****   Err = Hw_IMU_FreeIMU_getQ(q);
 3356              		.loc 1 805 0
 3357 000a C0F20003 		movt	r3, #:upper16:Hw_IMU_FreeIMU_getQ
 802:../LIB_HW/Hw_IMU.c **** {
 3358              		.loc 1 802 0
 3359 000e 0390     		str	r0, [sp, #12]
 805:../LIB_HW/Hw_IMU.c ****   Err = Hw_IMU_FreeIMU_getQ(q);
 3360              		.loc 1 805 0
 3361 0010 06A8     		add	r0, sp, #24
 3362              	.LVL560:
 3363 0012 9847     		blx	r3
 3364              	.LVL561:
 807:../LIB_HW/Hw_IMU.c ****   angles[0] = atan2(2 * q[1] * q[2] - 2 * q[0] * q[3], 2 * q[0]*q[0] + 2 * q[1] * q[1] - 1); // psi
 3365              		.loc 1 807 0
 3366 0014 079A     		ldr	r2, [sp, #28]	@ float
 3367 0016 40F20006 		movw	r6, #:lower16:__aeabi_fadd
 805:../LIB_HW/Hw_IMU.c ****   Err = Hw_IMU_FreeIMU_getQ(q);
 3368              		.loc 1 805 0
 3369 001a 8446     		mov	ip, r0
 3370              	.LVL562:
 807:../LIB_HW/Hw_IMU.c ****   angles[0] = atan2(2 * q[1] * q[2] - 2 * q[0] * q[3], 2 * q[0]*q[0] + 2 * q[1] * q[1] - 1); // psi
 3371              		.loc 1 807 0
 3372 001c 1146     		mov	r1, r2
 3373 001e 1046     		mov	r0, r2
 3374              	.LVL563:
 3375 0020 C0F20006 		movt	r6, #:upper16:__aeabi_fadd
 3376 0024 CDF800C0 		str	ip, [sp, #0]
 3377 0028 0192     		str	r2, [sp, #4]
 3378 002a B047     		blx	r6
 3379              	.LVL564:
 3380 002c 069C     		ldr	r4, [sp, #24]	@ float
 3381 002e 8246     		mov	sl, r0
 3382 0030 2146     		mov	r1, r4
 3383 0032 2046     		mov	r0, r4
 3384 0034 0294     		str	r4, [sp, #8]
 3385 0036 B047     		blx	r6
 3386              	.LVL565:
 3387 0038 40F20007 		movw	r7, #:lower16:__aeabi_fmul
 3388 003c C0F20007 		movt	r7, #:upper16:__aeabi_fmul
 3389 0040 8346     		mov	fp, r0
 3390 0042 0899     		ldr	r1, [sp, #32]	@ float
 3391 0044 5046     		mov	r0, sl
 3392 0046 B847     		blx	r7
 3393              	.LVL566:
 3394 0048 0999     		ldr	r1, [sp, #36]	@ float
 3395 004a 0546     		mov	r5, r0
 3396 004c 5846     		mov	r0, fp
 3397 004e B847     		blx	r7
 3398              	.LVL567:
 3399 0050 40F20009 		movw	r9, #:lower16:__aeabi_fsub
 3400 0054 C0F20009 		movt	r9, #:upper16:__aeabi_fsub
 3401 0058 0146     		mov	r1, r0
 3402 005a 40F20008 		movw	r8, #:lower16:__aeabi_f2d
 3403 005e 2846     		mov	r0, r5
 3404 0060 C847     		blx	r9
 3405              	.LVL568:
 3406 0062 C0F20008 		movt	r8, #:upper16:__aeabi_f2d
 3407 0066 C047     		blx	r8
 3408              	.LVL569:
 3409 0068 0446     		mov	r4, r0
 3410 006a 0D46     		mov	r5, r1
 3411 006c 0298     		ldr	r0, [sp, #8]
 3412 006e 5946     		mov	r1, fp
 3413 0070 B847     		blx	r7
 3414              	.LVL570:
 3415 0072 0199     		ldr	r1, [sp, #4]
 3416 0074 8346     		mov	fp, r0
 3417 0076 0846     		mov	r0, r1
 3418 0078 5146     		mov	r1, sl
 3419 007a B847     		blx	r7
 3420              	.LVL571:
 3421 007c 0146     		mov	r1, r0
 3422 007e 5846     		mov	r0, fp
 3423 0080 B047     		blx	r6
 3424              	.LVL572:
 3425 0082 4FF07E51 		mov	r1, #1065353216
 3426 0086 C847     		blx	r9
 3427              	.LVL573:
 3428 0088 C047     		blx	r8
 3429              	.LVL574:
 3430 008a 40F2000A 		movw	sl, #:lower16:atan2
 3431 008e 0246     		mov	r2, r0
 3432 0090 0B46     		mov	r3, r1
 3433 0092 C0F2000A 		movt	sl, #:upper16:atan2
 3434 0096 2046     		mov	r0, r4
 3435 0098 2946     		mov	r1, r5
 3436 009a 40F20004 		movw	r4, #:lower16:__aeabi_d2f
 3437 009e D047     		blx	sl
 3438              	.LVL575:
 3439 00a0 C0F20004 		movt	r4, #:upper16:__aeabi_d2f
 3440 00a4 A047     		blx	r4
 3441              	.LVL576:
 3442 00a6 039B     		ldr	r3, [sp, #12]
 3443 00a8 1860     		str	r0, [r3, #0]	@ float
 808:../LIB_HW/Hw_IMU.c ****   angles[1] = -asin(2 * q[1] * q[3] + 2 * q[0] * q[2]); // theta
 3444              		.loc 1 808 0
 3445 00aa 0798     		ldr	r0, [sp, #28]	@ float
 3446 00ac 0146     		mov	r1, r0
 3447 00ae B047     		blx	r6
 3448              	.LVL577:
 3449 00b0 0999     		ldr	r1, [sp, #36]	@ float
 3450 00b2 B847     		blx	r7
 3451              	.LVL578:
 3452 00b4 0546     		mov	r5, r0
 3453 00b6 0698     		ldr	r0, [sp, #24]	@ float
 3454 00b8 0146     		mov	r1, r0
 3455 00ba B047     		blx	r6
 3456              	.LVL579:
 3457 00bc 0899     		ldr	r1, [sp, #32]	@ float
 3458 00be B847     		blx	r7
 3459              	.LVL580:
 3460 00c0 0146     		mov	r1, r0
 3461 00c2 2846     		mov	r0, r5
 3462 00c4 B047     		blx	r6
 3463              	.LVL581:
 3464 00c6 C047     		blx	r8
 3465              	.LVL582:
 3466 00c8 40F20002 		movw	r2, #:lower16:asin
 3467 00cc C0F20002 		movt	r2, #:upper16:asin
 3468 00d0 9047     		blx	r2
 3469              	.LVL583:
 3470 00d2 A047     		blx	r4
 3471              	.LVL584:
 809:../LIB_HW/Hw_IMU.c ****   angles[2] = atan2(2 * q[2] * q[3] - 2 * q[0] * q[1], 2 * q[0] * q[0] + 2 * q[3] * q[3] - 1); // p
 3472              		.loc 1 809 0
 3473 00d4 069B     		ldr	r3, [sp, #24]	@ float
 808:../LIB_HW/Hw_IMU.c ****   angles[1] = -asin(2 * q[1] * q[3] + 2 * q[0] * q[2]); // theta
 3474              		.loc 1 808 0
 3475 00d6 039D     		ldr	r5, [sp, #12]
 3476 00d8 00F10040 		add	r0, r0, #-2147483648
 809:../LIB_HW/Hw_IMU.c ****   angles[2] = atan2(2 * q[2] * q[3] - 2 * q[0] * q[1], 2 * q[0] * q[0] + 2 * q[3] * q[3] - 1); // p
 3477              		.loc 1 809 0
 3478 00dc 1946     		mov	r1, r3
 808:../LIB_HW/Hw_IMU.c ****   angles[1] = -asin(2 * q[1] * q[3] + 2 * q[0] * q[2]); // theta
 3479              		.loc 1 808 0
 3480 00de 6860     		str	r0, [r5, #4]	@ float
 809:../LIB_HW/Hw_IMU.c ****   angles[2] = atan2(2 * q[2] * q[3] - 2 * q[0] * q[1], 2 * q[0] * q[0] + 2 * q[3] * q[3] - 1); // p
 3481              		.loc 1 809 0
 3482 00e0 1846     		mov	r0, r3
 3483 00e2 0193     		str	r3, [sp, #4]
 3484 00e4 B047     		blx	r6
 3485              	.LVL585:
 3486 00e6 8346     		mov	fp, r0
 3487 00e8 0898     		ldr	r0, [sp, #32]	@ float
 3488 00ea 099D     		ldr	r5, [sp, #36]	@ float
 3489 00ec 0146     		mov	r1, r0
 3490 00ee B047     		blx	r6
 3491              	.LVL586:
 3492 00f0 2946     		mov	r1, r5
 3493 00f2 B847     		blx	r7
 3494              	.LVL587:
 3495 00f4 0246     		mov	r2, r0
 3496 00f6 0292     		str	r2, [sp, #8]
 3497 00f8 0799     		ldr	r1, [sp, #28]	@ float
 3498 00fa 5846     		mov	r0, fp
 3499 00fc B847     		blx	r7
 3500              	.LVL588:
 3501 00fe 029B     		ldr	r3, [sp, #8]
 3502 0100 0146     		mov	r1, r0
 3503 0102 1846     		mov	r0, r3
 3504 0104 C847     		blx	r9
 3505              	.LVL589:
 3506 0106 C047     		blx	r8
 3507              	.LVL590:
 3508 0108 CDE90401 		strd	r0, [sp, #16]
 3509 010c 0199     		ldr	r1, [sp, #4]
 3510 010e 0846     		mov	r0, r1
 3511 0110 5946     		mov	r1, fp
 3512 0112 B847     		blx	r7
 3513              	.LVL591:
 3514 0114 2946     		mov	r1, r5
 3515 0116 8346     		mov	fp, r0
 3516 0118 2846     		mov	r0, r5
 3517 011a B047     		blx	r6
 3518              	.LVL592:
 3519 011c 0146     		mov	r1, r0
 3520 011e 2846     		mov	r0, r5
 3521 0120 B847     		blx	r7
 3522              	.LVL593:
 3523 0122 0146     		mov	r1, r0
 3524 0124 5846     		mov	r0, fp
 3525 0126 B047     		blx	r6
 3526              	.LVL594:
 3527 0128 4FF07E51 		mov	r1, #1065353216
 3528 012c C847     		blx	r9
 3529              	.LVL595:
 3530 012e C047     		blx	r8
 3531              	.LVL596:
 3532 0130 0246     		mov	r2, r0
 3533 0132 0B46     		mov	r3, r1
 3534 0134 DDE90401 		ldrd	r0, [sp, #16]
 3535 0138 D047     		blx	sl
 3536              	.LVL597:
 3537 013a A047     		blx	r4
 3538              	.LVL598:
 3539 013c 039A     		ldr	r2, [sp, #12]
 812:../LIB_HW/Hw_IMU.c **** }
 3540              		.loc 1 812 0
 3541 013e DDF800C0 		ldr	ip, [sp, #0]
 809:../LIB_HW/Hw_IMU.c ****   angles[2] = atan2(2 * q[2] * q[3] - 2 * q[0] * q[1], 2 * q[0] * q[0] + 2 * q[3] * q[3] - 1); // p
 3542              		.loc 1 809 0
 3543 0142 9060     		str	r0, [r2, #8]	@ float
 812:../LIB_HW/Hw_IMU.c **** }
 3544              		.loc 1 812 0
 3545 0144 6046     		mov	r0, ip
 3546 0146 0BB0     		add	sp, sp, #44
 3547 0148 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 3548              		.cfi_endproc
 3549              	.LFE10:
 3551              		.global	__aeabi_ui2f
 3552              		.section	.text.Hw_IMU_Update,"ax",%progbits
 3553              		.align	2
 3554              		.global	Hw_IMU_Update
 3555              		.thumb
 3556              		.thumb_func
 3558              	Hw_IMU_Update:
 3559              	.LFB3:
 228:../LIB_HW/Hw_IMU.c **** {
 3560              		.loc 1 228 0
 3561              		.cfi_startproc
 3562              		@ args = 0, pretend = 0, frame = 24
 3563              		@ frame_needed = 0, uses_anonymous_args = 0
 3564              	.LVL599:
 3565 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 3566              	.LCFI24:
 3567              		.cfi_def_cfa_offset 36
 3568              		.cfi_offset 4, -36
 3569              		.cfi_offset 5, -32
 3570              		.cfi_offset 6, -28
 3571              		.cfi_offset 7, -24
 3572              		.cfi_offset 8, -20
 3573              		.cfi_offset 9, -16
 3574              		.cfi_offset 10, -12
 3575              		.cfi_offset 11, -8
 3576              		.cfi_offset 14, -4
 270:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_GetData( ptr_data );
 3577              		.loc 1 270 0
 3578 0004 884B     		ldr	r3, .L94+24
 228:../LIB_HW/Hw_IMU.c **** {
 3579              		.loc 1 228 0
 3580 0006 89B0     		sub	sp, sp, #36
 3581              	.LCFI25:
 3582              		.cfi_def_cfa_offset 72
 228:../LIB_HW/Hw_IMU.c **** {
 3583              		.loc 1 228 0
 3584 0008 0446     		mov	r4, r0
 3585 000a 0D46     		mov	r5, r1
 270:../LIB_HW/Hw_IMU.c **** 	Err = Hw_IMU_GetData( ptr_data );
 3586              		.loc 1 270 0
 3587 000c 9847     		blx	r3
 3588              	.LVL600:
 272:../LIB_HW/Hw_IMU.c **** 	if( Err == 0 )
 3589              		.loc 1 272 0
 3590 000e 8046     		mov	r8, r0
 3591 0010 0028     		cmp	r0, #0
 3592 0012 40F0F780 		bne	.L92
 3593              	.LVL601:
 275:../LIB_HW/Hw_IMU.c **** 		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;
 3594              		.loc 1 275 0
 3595 0016 40F20002 		movw	r2, #:lower16:__aeabi_i2f
 3596 001a C0F20002 		movt	r2, #:upper16:__aeabi_i2f
 3597 001e B4F90E00 		ldrsh	r0, [r4, #14]
 3598              	.LVL602:
 3599 0022 9047     		blx	r2
 3600              	.LVL603:
 3601 0024 0021     		movs	r1, #0
 3602 0026 DFF83092 		ldr	r9, .L94+72
 3603 002a C4F20331 		movt	r1, 17155
 3604 002e C847     		blx	r9
 3605              	.LVL604:
 277:../LIB_HW/Hw_IMU.c **** 		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->
 3606              		.loc 1 277 0
 3607 0030 7E49     		ldr	r1, .L94+28
 275:../LIB_HW/Hw_IMU.c **** 		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;
 3608              		.loc 1 275 0
 3609 0032 0490     		str	r0, [sp, #16]	@ float
 3610              	.LVL605:
 277:../LIB_HW/Hw_IMU.c **** 		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->
 3611              		.loc 1 277 0
 3612 0034 2846     		mov	r0, r5
 3613              	.LVL606:
 3614 0036 8847     		blx	r1
 3615              	.LVL607:
 274:../LIB_HW/Hw_IMU.c **** 		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
 3616              		.loc 1 274 0
 3617 0038 40F20005 		movw	r5, #:lower16:__aeabi_i2f
 3618              	.LVL608:
 277:../LIB_HW/Hw_IMU.c **** 		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->
 3619              		.loc 1 277 0
 3620 003c 8346     		mov	fp, r0
 274:../LIB_HW/Hw_IMU.c **** 		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
 3621              		.loc 1 274 0
 3622 003e C0F20005 		movt	r5, #:upper16:__aeabi_i2f
 3623 0042 B4F90C00 		ldrsh	r0, [r4, #12]
 3624              	.LVL609:
 3625 0046 A847     		blx	r5
 3626              	.LVL610:
 3627 0048 0021     		movs	r1, #0
 3628 004a C4F20331 		movt	r1, 17155
 3629 004e C847     		blx	r9
 3630              	.LVL611:
 277:../LIB_HW/Hw_IMU.c **** 		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->
 3631              		.loc 1 277 0
 3632 0050 774D     		ldr	r5, .L94+32
 274:../LIB_HW/Hw_IMU.c **** 		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
 3633              		.loc 1 274 0
 3634 0052 0146     		mov	r1, r0
 277:../LIB_HW/Hw_IMU.c **** 		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->
 3635              		.loc 1 277 0
 3636 0054 5846     		mov	r0, fp
 3637 0056 A847     		blx	r5
 3638              	.LVL612:
 3639 0058 0021     		movs	r1, #0
 3640 005a C4F27A41 		movt	r1, 17530
 3641 005e C847     		blx	r9
 3642              	.LVL613:
 3643 0060 DFF8F8C1 		ldr	ip, .L94+76
 3644 0064 A16B     		ldr	r1, [r4, #56]	@ float
 3645 0066 CDF808C0 		str	ip, [sp, #8]
 3646 006a E047     		blx	ip
 3647              	.LVL614:
 3648 006c 714E     		ldr	r6, .L94+36
 3649 006e B047     		blx	r6
 3650              	.LVL615:
 3651 0070 67A3     		adr	r3, .L94
 3652 0072 D3E90023 		ldrd	r2, [r3]
 3653 0076 704F     		ldr	r7, .L94+40
 3654 0078 B847     		blx	r7
 3655              	.LVL616:
 3656 007a CDE90601 		strd	r0, [sp, #24]
 3657 007e 206A     		ldr	r0, [r4, #32]	@ float
 3658 0080 B047     		blx	r6
 3659              	.LVL617:
 3660 0082 65A3     		adr	r3, .L94+8
 3661 0084 D3E90023 		ldrd	r2, [r3]
 3662 0088 B847     		blx	r7
 3663              	.LVL618:
 3664 008a 40F2000A 		movw	sl, #:lower16:__aeabi_dadd
 3665 008e 0246     		mov	r2, r0
 3666 0090 0B46     		mov	r3, r1
 3667 0092 C0F2000A 		movt	sl, #:upper16:__aeabi_dadd
 3668 0096 DDE90601 		ldrd	r0, [sp, #24]
 3669 009a D047     		blx	sl
 3670              	.LVL619:
 3671 009c 40F20003 		movw	r3, #:lower16:__aeabi_d2f
 3672 00a0 C0F20003 		movt	r3, #:upper16:__aeabi_d2f
 3673 00a4 9847     		blx	r3
 3674              	.LVL620:
 278:../LIB_HW/Hw_IMU.c ****   		ptr_data->Y_Angle = (0.93 * (ptr_data->Y_Angle+(GyroRateY*(f32)(dt)/1000)) ) + (0.07 * ptr_data
 3675              		.loc 1 278 0
 3676 00a6 5946     		mov	r1, fp
 277:../LIB_HW/Hw_IMU.c **** 		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->
 3677              		.loc 1 277 0
 3678 00a8 8246     		mov	sl, r0
 3679 00aa A063     		str	r0, [r4, #56]	@ float
 278:../LIB_HW/Hw_IMU.c ****   		ptr_data->Y_Angle = (0.93 * (ptr_data->Y_Angle+(GyroRateY*(f32)(dt)/1000)) ) + (0.07 * ptr_data
 3680              		.loc 1 278 0
 3681 00ac 0498     		ldr	r0, [sp, #16]	@ float
 3682 00ae A847     		blx	r5
 3683              	.LVL621:
 3684 00b0 0021     		movs	r1, #0
 3685 00b2 C4F27A41 		movt	r1, 17530
 3686 00b6 C847     		blx	r9
 3687              	.LVL622:
 3688 00b8 E16B     		ldr	r1, [r4, #60]	@ float
 3689 00ba DDF80890 		ldr	r9, [sp, #8]
 3690 00be C847     		blx	r9
 3691              	.LVL623:
 3692 00c0 B047     		blx	r6
 3693              	.LVL624:
 3694 00c2 53A3     		adr	r3, .L94
 3695 00c4 D3E90023 		ldrd	r2, [r3]
 3696 00c8 B847     		blx	r7
 3697              	.LVL625:
 3698 00ca CDE90401 		strd	r0, [sp, #16]
 3699 00ce 606A     		ldr	r0, [r4, #36]	@ float
 3700 00d0 B047     		blx	r6
 3701              	.LVL626:
 3702 00d2 51A3     		adr	r3, .L94+8
 3703 00d4 D3E90023 		ldrd	r2, [r3]
 3704 00d8 B847     		blx	r7
 3705              	.LVL627:
 3706 00da 40F2000B 		movw	fp, #:lower16:__aeabi_dadd
 3707 00de 0B46     		mov	r3, r1
 3708 00e0 0246     		mov	r2, r0
 3709 00e2 C0F2000B 		movt	fp, #:upper16:__aeabi_dadd
 3710 00e6 DDE90401 		ldrd	r0, [sp, #16]
 3711 00ea D847     		blx	fp
 3712              	.LVL628:
 3713 00ec 40F20002 		movw	r2, #:lower16:__aeabi_d2f
 3714 00f0 C0F20002 		movt	r2, #:upper16:__aeabi_d2f
 3715 00f4 9047     		blx	r2
 3716              	.LVL629:
 3717 00f6 E063     		str	r0, [r4, #60]	@ float
 3718              	.LVL630:
 283:../LIB_HW/Hw_IMU.c **** 	    cosineRoll 	= cosf(ptr_data->X_Angle * M_PI / 180.);
 3719              		.loc 1 283 0
 3720 00f8 5046     		mov	r0, sl
 3721 00fa B047     		blx	r6
 3722              	.LVL631:
 3723 00fc 48A3     		adr	r3, .L94+16
 3724 00fe D3E90023 		ldrd	r2, [r3]
 3725 0102 B847     		blx	r7
 3726              	.LVL632:
 3727 0104 4FF40043 		mov	r3, #32768
 3728 0108 0022     		movs	r2, #0
 3729 010a DFF85491 		ldr	r9, .L94+80
 3730 010e C4F26603 		movt	r3, 16486
 3731 0112 C847     		blx	r9
 3732              	.LVL633:
 3733 0114 40F20003 		movw	r3, #:lower16:__aeabi_d2f
 3734 0118 C0F20003 		movt	r3, #:upper16:__aeabi_d2f
 3735 011c 9847     		blx	r3
 3736              	.LVL634:
 3737 011e 4749     		ldr	r1, .L94+44
 3738 0120 8246     		mov	sl, r0
 3739 0122 8847     		blx	r1
 3740              	.LVL635:
 3741 0124 8446     		mov	ip, r0
 3742              	.LVL636:
 284:../LIB_HW/Hw_IMU.c **** 	    sineRoll 	= sinf(ptr_data->X_Angle * M_PI / 180.);
 3743              		.loc 1 284 0
 3744 0126 CDF808C0 		str	ip, [sp, #8]
 3745 012a 5046     		mov	r0, sl
 3746              	.LVL637:
 3747 012c 444A     		ldr	r2, .L94+48
 3748 012e 9047     		blx	r2
 3749              	.LVL638:
 288:../LIB_HW/Hw_IMU.c **** 	    dv = invSqrt( ptr_data->X_Compass*ptr_data->X_Compass + ptr_data->Y_Compass*ptr_data->Y_Compas
 3750              		.loc 1 288 0
 3751 0130 B4F91430 		ldrsh	r3, [r4, #20]
 284:../LIB_HW/Hw_IMU.c **** 	    sineRoll 	= sinf(ptr_data->X_Angle * M_PI / 180.);
 3752              		.loc 1 284 0
 3753 0134 8246     		mov	sl, r0
 3754              	.LVL639:
 288:../LIB_HW/Hw_IMU.c **** 	    dv = invSqrt( ptr_data->X_Compass*ptr_data->X_Compass + ptr_data->Y_Compass*ptr_data->Y_Compas
 3755              		.loc 1 288 0
 3756 0136 03FB03F3 		mul	r3, r3, r3
 3757 013a B4F91200 		ldrsh	r0, [r4, #18]
 3758              	.LVL640:
 3759 013e B4F91620 		ldrsh	r2, [r4, #22]
 3760 0142 00FB0031 		mla	r1, r0, r0, r3
 3761 0146 40F20003 		movw	r3, #:lower16:__aeabi_i2f
 3762 014a C0F20003 		movt	r3, #:upper16:__aeabi_i2f
 3763 014e 02FB0210 		mla	r0, r2, r2, r1
 3764 0152 9847     		blx	r3
 3765              	.LVL641:
 3766 0154 3B49     		ldr	r1, .L94+52
 3767 0156 8847     		blx	r1
 3768              	.LVL642:
 290:../LIB_HW/Hw_IMU.c **** 	    mx = dv*ptr_data->X_Compass;
 3769              		.loc 1 290 0
 3770 0158 40F20002 		movw	r2, #:lower16:__aeabi_i2f
 3771 015c C0F20002 		movt	r2, #:upper16:__aeabi_i2f
 288:../LIB_HW/Hw_IMU.c **** 	    dv = invSqrt( ptr_data->X_Compass*ptr_data->X_Compass + ptr_data->Y_Compass*ptr_data->Y_Compas
 3772              		.loc 1 288 0
 3773 0160 8346     		mov	fp, r0
 3774              	.LVL643:
 290:../LIB_HW/Hw_IMU.c **** 	    mx = dv*ptr_data->X_Compass;
 3775              		.loc 1 290 0
 3776 0162 B4F91200 		ldrsh	r0, [r4, #18]
 3777              	.LVL644:
 3778 0166 9047     		blx	r2
 3779              	.LVL645:
 3780 0168 5946     		mov	r1, fp
 3781 016a A847     		blx	r5
 3782              	.LVL646:
 3783 016c 0346     		mov	r3, r0
 291:../LIB_HW/Hw_IMU.c **** 	    my = dv*ptr_data->Y_Compass;
 3784              		.loc 1 291 0
 3785 016e B4F91400 		ldrsh	r0, [r4, #20]
 3786              	.LVL647:
 3787 0172 40F20004 		movw	r4, #:lower16:__aeabi_i2f
 3788              	.LVL648:
 3789 0176 0393     		str	r3, [sp, #12]
 3790 0178 C0F20004 		movt	r4, #:upper16:__aeabi_i2f
 3791 017c A047     		blx	r4
 3792              	.LVL649:
 3793 017e 5946     		mov	r1, fp
 3794 0180 A847     		blx	r5
 3795              	.LVL650:
 301:../LIB_HW/Hw_IMU.c **** 		hd = (atan2f(mx, my) * 180.0f / M_PI);
 3796              		.loc 1 301 0
 3797 0182 314A     		ldr	r2, .L94+56
 291:../LIB_HW/Hw_IMU.c **** 	    my = dv*ptr_data->Y_Compass;
 3798              		.loc 1 291 0
 3799 0184 0146     		mov	r1, r0
 301:../LIB_HW/Hw_IMU.c **** 		hd = (atan2f(mx, my) * 180.0f / M_PI);
 3800              		.loc 1 301 0
 3801 0186 0398     		ldr	r0, [sp, #12]
 3802 0188 9047     		blx	r2
 3803              	.LVL651:
 3804 018a 0021     		movs	r1, #0
 3805 018c C4F23431 		movt	r1, 17204
 3806 0190 A847     		blx	r5
 3807              	.LVL652:
 3808 0192 B047     		blx	r6
 3809              	.LVL653:
 3810 0194 22A3     		adr	r3, .L94+16
 3811 0196 D3E90023 		ldrd	r2, [r3]
 3812 019a 40F20005 		movw	r5, #:lower16:__aeabi_d2f
 3813 019e C847     		blx	r9
 3814              	.LVL654:
 3815 01a0 C0F20005 		movt	r5, #:upper16:__aeabi_d2f
 3816 01a4 A847     		blx	r5
 3817              	.LVL655:
 304:../LIB_HW/Hw_IMU.c **** 	    head = hd;
 3818              		.loc 1 304 0
 3819 01a6 2949     		ldr	r1, .L94+60
 3820 01a8 8847     		blx	r1
 3821              	.LVL656:
 305:../LIB_HW/Hw_IMU.c **** 	    if (head < 0)
 3822              		.loc 1 305 0
 3823 01aa 03B2     		sxth	r3, r0
 3824 01ac 002B     		cmp	r3, #0
 3825 01ae DDF808C0 		ldr	ip, [sp, #8]
 304:../LIB_HW/Hw_IMU.c **** 	    head = hd;
 3826              		.loc 1 304 0
 3827 01b2 82B2     		uxth	r2, r0
 3828              	.LVL657:
 307:../LIB_HW/Hw_IMU.c **** 	        head += 360;
 3829              		.loc 1 307 0
 3830 01b4 BCBF     		itt	lt
 3831 01b6 00F5B472 		addlt	r2, r0, #360
 3832 01ba 92B2     		uxthlt	r2, r2
 3833              	.LVL658:
 310:../LIB_HW/Hw_IMU.c **** 	    Lb_printf("Head : %d  %d %d \n", head, cosineRoll*180./M_PI, sineRoll*180./M_PI);
 3834              		.loc 1 310 0
 3835 01bc 6046     		mov	r0, ip
 3836 01be 0FFA82FB 		sxth	fp, r2
 3837              	.LVL659:
 3838 01c2 B047     		blx	r6
 3839              	.LVL660:
 3840 01c4 4FF40043 		mov	r3, #32768
 3841 01c8 0022     		movs	r2, #0
 3842 01ca C4F26603 		movt	r3, 16486
 3843 01ce B847     		blx	r7
 3844              	.LVL661:
 3845 01d0 13A3     		adr	r3, .L94+16
 3846 01d2 D3E90023 		ldrd	r2, [r3]
 3847 01d6 C847     		blx	r9
 3848              	.LVL662:
 3849 01d8 0446     		mov	r4, r0
 3850 01da 5046     		mov	r0, sl
 3851 01dc 0D46     		mov	r5, r1
 3852 01de B047     		blx	r6
 3853              	.LVL663:
 3854 01e0 4FF40043 		mov	r3, #32768
 3855 01e4 0022     		movs	r2, #0
 3856 01e6 C4F26603 		movt	r3, 16486
 3857 01ea B847     		blx	r7
 3858              	.LVL664:
 3859 01ec 0CA3     		adr	r3, .L94+16
 3860 01ee D3E90023 		ldrd	r2, [r3]
 3861 01f2 C847     		blx	r9
 3862              	.LVL665:
 3863 01f4 2246     		mov	r2, r4
 3864 01f6 CDE90001 		strd	r0, [sp]
 3865 01fa 2B46     		mov	r3, r5
 3866 01fc 1448     		ldr	r0, .L94+64
 3867 01fe 5946     		mov	r1, fp
 3868 0200 144C     		ldr	r4, .L94+68
 3869 0202 A047     		blx	r4
 3870              	.LVL666:
 3871              	.L92:
 351:../LIB_HW/Hw_IMU.c **** }
 3872              		.loc 1 351 0
 3873 0204 4046     		mov	r0, r8
 3874 0206 09B0     		add	sp, sp, #36
 3875 0208 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 3876              	.L95:
 3877 020c AFF30080 		.align	3
 3878              	.L94:
 3879 0210 C3F5285C 		.word	1546188227
 3880 0214 8FC2ED3F 		.word	1072546447
 3881 0218 EC51B81E 		.word	515396076
 3882 021c 85EBB13F 		.word	1068624773
 3883 0220 182D4454 		.word	1413754136
 3884 0224 FB210940 		.word	1074340347
 3885 0228 00000000 		.word	Hw_IMU_GetData
 3886 022c 00000000 		.word	__aeabi_ui2f
 3887 0230 00000000 		.word	__aeabi_fmul
 3888 0234 00000000 		.word	__aeabi_f2d
 3889 0238 00000000 		.word	__aeabi_dmul
 3890 023c 00000000 		.word	cosf
 3891 0240 00000000 		.word	sinf
 3892 0244 00000000 		.word	invSqrt
 3893 0248 00000000 		.word	atan2f
 3894 024c 00000000 		.word	__aeabi_f2iz
 3895 0250 6C000000 		.word	.LC4
 3896 0254 00000000 		.word	Lb_printf
 3897 0258 00000000 		.word	__aeabi_fdiv
 3898 025c 00000000 		.word	__aeabi_fadd
 3899 0260 00000000 		.word	__aeabi_ddiv
 3900              		.cfi_endproc
 3901              	.LFE3:
 3903              		.global	magn_scale_z
 3904              		.global	magn_scale_y
 3905              		.global	magn_scale_x
 3906              		.global	magn_off_z
 3907              		.global	magn_off_y
 3908              		.global	magn_off_x
 3909              		.global	acc_scale_z
 3910              		.global	acc_scale_y
 3911              		.global	acc_scale_x
 3912              		.global	acc_off_z
 3913              		.global	acc_off_y
 3914              		.global	acc_off_x
 3915              		.comm	Hw_IMU_SaveData,68,4
 3916              		.comm	sampleFreq,4,4
 3917              		.comm	now,2,2
 3918              		.comm	lastUpdate,2,2
 3919              		.comm	integralFBz,4,4
 3920              		.comm	integralFBy,4,4
 3921              		.comm	integralFBx,4,4
 3922              		.comm	q3,4,4
 3923              		.comm	q2,4,4
 3924              		.comm	q1,4,4
 3925              		.comm	q0,4,4
 3926              		.comm	twoKi,4,4
 3927              		.comm	twoKp,4,4
 3928              		.comm	ezInt,4,4
 3929              		.comm	eyInt,4,4
 3930              		.comm	exInt,4,4
 3931              		.comm	iq3,4,4
 3932              		.comm	iq2,4,4
 3933              		.comm	iq1,4,4
 3934              		.comm	iq0,4,4
 3935              		.comm	gyro_off_z,2,2
 3936              		.comm	gyro_off_y,2,2
 3937              		.comm	gyro_off_x,2,2
 3938              		.comm	raw_magn,4,4
 3939              		.comm	raw_gyro,4,4
 3940              		.comm	raw_acc,4,4
 3941 0264 AFF30080 		.section	.rodata.acc_off_y,"a",%progbits
 3942              		.align	2
 3945              	acc_off_y:
 3946 0000 58FFFFFF 		.word	-168
 3947              		.section	.rodata.acc_off_z,"a",%progbits
 3948              		.align	2
 3951              	acc_off_z:
 3952 0000 49F6FFFF 		.word	-2487
 3953              		.section	.rodata.acc_scale_x,"a",%progbits
 3954              		.align	2
 3957              	acc_scale_x:
 3958 0000 32FB6046 		.word	1180760882
 3959              		.section	.rodata.acc_scale_y,"a",%progbits
 3960              		.align	2
 3963              	acc_scale_y:
 3964 0000 4D388046 		.word	1182808141
 3965              		.section	.rodata.acc_scale_z,"a",%progbits
 3966              		.align	2
 3969              	acc_scale_z:
 3970 0000 9A5D8646 		.word	1183210906
 3971              		.section	.rodata.acc_off_x,"a",%progbits
 3972              		.align	2
 3975              	acc_off_x:
 3976 0000 56010000 		.word	342
 3977              		.section	.rodata.magn_scale_x,"a",%progbits
 3978              		.align	2
 3981              	magn_scale_x:
 3982 0000 E6110944 		.word	1141445094
 3983              		.section	.rodata.magn_scale_y,"a",%progbits
 3984              		.align	2
 3987              	magn_scale_y:
 3988 0000 34F06744 		.word	1147662388
 3989              		.section	.rodata.magn_scale_z,"a",%progbits
 3990              		.align	2
 3993              	magn_scale_z:
 3994 0000 0AA48344 		.word	1149477898
 3995              		.section	.rodata.str1.4,"aMS",%progbits,1
 3996              		.align	2
 3997              	.LC0:
 3998 0000 48775F4D 		.ascii	"Hw_MPU6050_Init Ret : 0x%x\012\000"
 3998      50553630 
 3998      35305F49 
 3998      6E697420 
 3998      52657420 
 3999              	.LC1:
 4000 001c 48775F48 		.ascii	"Hw_HMC5883_Init Ret : 0x%x\012\000"
 4000      4D433538 
 4000      38335F49 
 4000      6E697420 
 4000      52657420 
 4001              	.LC2:
 4002 0038 6D672025 		.ascii	"mg %d %d %d\012\000"
 4002      64202564 
 4002      2025640A 
 4002      00
 4003 0045 000000   		.space	3
 4004              	.LC3:
 4005 0048 6D672025 		.ascii	"mg %d %d %d  %d %d %d  %d %d %d \012\000"
 4005      64202564 
 4005      20256420 
 4005      20256420 
 4005      25642025 
 4006 006a 0000     		.space	2
 4007              	.LC4:
 4008 006c 48656164 		.ascii	"Head : %d  %d %d \012\000"
 4008      203A2025 
 4008      64202025 
 4008      64202564 
 4008      200A00
 4009 007f 00       		.section	.rodata.magn_off_x,"a",%progbits
 4010              		.align	2
 4013              	magn_off_x:
 4014 0000 A9FFFFFF 		.word	-87
 4015              		.section	.rodata.magn_off_y,"a",%progbits
 4016              		.align	2
 4019              	magn_off_y:
 4020 0000 28FFFFFF 		.word	-216
 4021              		.section	.rodata.magn_off_z,"a",%progbits
 4022              		.align	2
 4025              	magn_off_z:
 4026 0000 64FFFFFF 		.word	-156
 4027              		.text
 4028              	.Letext0:
 4029              		.file 2 "../LIB_HW/Hw_Define.h"
 4030              		.file 3 "../LIB_HW/Hw_MPU6050.h"
 4031              		.file 4 "../LIB_HW/Hw_HMC5883.h"
 4032              		.file 5 "../LIB_HW/Hw_IMU.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Hw_IMU.c
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:19     .text.Hw_IMU_FreeIMU_Init:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:24     .text.Hw_IMU_FreeIMU_Init:0000000000000000 Hw_IMU_FreeIMU_Init
                            *COM*:0000000000000004 q3
                            *COM*:0000000000000004 twoKi
                            *COM*:0000000000000004 integralFBx
                            *COM*:0000000000000004 integralFBy
                            *COM*:0000000000000004 integralFBz
                            *COM*:0000000000000002 gyro_off_x
                            *COM*:0000000000000002 gyro_off_y
                            *COM*:0000000000000004 q0
                            *COM*:0000000000000002 lastUpdate
                            *COM*:0000000000000004 q1
                            *COM*:0000000000000004 q2
                            *COM*:0000000000000004 twoKp
                            *COM*:0000000000000002 now
                            *COM*:0000000000000002 gyro_off_z
                            *COM*:0000000000000004 exInt
                            *COM*:0000000000000004 eyInt
                            *COM*:0000000000000004 ezInt
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:178    .text.Hw_IMU_Init:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:183    .text.Hw_IMU_Init:0000000000000000 Hw_IMU_Init
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:244    .text.Hw_IMU_Init:0000000000000034 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:259    .text.Hw_IMU_GetData:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:264    .text.Hw_IMU_GetData:0000000000000000 Hw_IMU_GetData
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:471    .text.Hw_IMU_GetData:0000000000000118 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:488    .text.Hw_IMU_Reset:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:493    .text.Hw_IMU_Reset:0000000000000000 Hw_IMU_Reset
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:528    .text.Hw_IMU_Reset:0000000000000014 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:533    .text.Hw_IMU_FreeIMU_getRawValues:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:538    .text.Hw_IMU_FreeIMU_getRawValues:0000000000000000 Hw_IMU_FreeIMU_getRawValues
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:625    .text.Hw_IMU_FreeIMU_getRawValues:0000000000000060 $d
                            *COM*:0000000000000044 Hw_IMU_SaveData
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:636    .text.Hw_IMU_FreeIMU_getValues:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:641    .text.Hw_IMU_FreeIMU_getValues:0000000000000000 Hw_IMU_FreeIMU_getValues
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:4001   .rodata.str1.4:0000000000000038 .LC2
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:911    .text.Hw_IMU_FreeIMU_zeroGyro:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:916    .text.Hw_IMU_FreeIMU_zeroGyro:0000000000000000 Hw_IMU_FreeIMU_zeroGyro
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:1112   .text.Hw_IMU_FreeIMU_zeroGyro:00000000000000c8 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:1125   .text.arr3_rad_to_deg:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:1130   .text.arr3_rad_to_deg:0000000000000000 arr3_rad_to_deg
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:1193   .text.arr3_rad_to_deg:0000000000000050 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:1200   .text.invSqrt:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:1205   .text.invSqrt:0000000000000000 invSqrt
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:1298   .text.Hw_IMU_FreeIMU_AHRSupdate:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:1303   .text.Hw_IMU_FreeIMU_AHRSupdate:0000000000000000 Hw_IMU_FreeIMU_AHRSupdate
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:1679   .text.Hw_IMU_FreeIMU_AHRSupdate:0000000000000254 $d
                            *COM*:0000000000000004 sampleFreq
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:1692   .text.Hw_IMU_FreeIMU_AHRSupdate:0000000000000280 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:1985   .text.Hw_IMU_FreeIMU_AHRSupdate:0000000000000478 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:1990   .text.Hw_IMU_FreeIMU_AHRSupdate:0000000000000480 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:2196   .text.Hw_IMU_FreeIMU_AHRSupdate:000000000000057c $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:2202   .text.Hw_IMU_FreeIMU_AHRSupdate:0000000000000588 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:2637   .text.Hw_IMU_FreeIMU_AHRSupdate:00000000000007b8 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:2645   .text.Hw_IMU_FreeIMU_AHRSupdate:00000000000007d4 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:2743   .text.Hw_IMU_FreeIMU_AHRSupdate:000000000000085c $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:2755   .text.Hw_IMU_FreeIMU_getQ:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:2760   .text.Hw_IMU_FreeIMU_getQ:0000000000000000 Hw_IMU_FreeIMU_getQ
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:2951   .text.Hw_IMU_FreeIMU_getQ:0000000000000140 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:2959   .text.Hw_IMU_FreeIMU_getYawPitchRollRad:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:2964   .text.Hw_IMU_FreeIMU_getYawPitchRollRad:0000000000000000 Hw_IMU_FreeIMU_getYawPitchRollRad
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3231   .text.Hw_IMU_FreeIMU_getYawPitchRoll:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3236   .text.Hw_IMU_FreeIMU_getYawPitchRoll:0000000000000000 Hw_IMU_FreeIMU_getYawPitchRoll
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3320   .text.Hw_IMU_FreeIMU_getYawPitchRoll:0000000000000060 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3326   .text.Hw_IMU_FreeIMU_getEulerRad:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3331   .text.Hw_IMU_FreeIMU_getEulerRad:0000000000000000 Hw_IMU_FreeIMU_getEulerRad
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3553   .text.Hw_IMU_Update:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3558   .text.Hw_IMU_Update:0000000000000000 Hw_IMU_Update
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3879   .text.Hw_IMU_Update:0000000000000210 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3993   .rodata.magn_scale_z:0000000000000000 magn_scale_z
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3987   .rodata.magn_scale_y:0000000000000000 magn_scale_y
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3981   .rodata.magn_scale_x:0000000000000000 magn_scale_x
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:4025   .rodata.magn_off_z:0000000000000000 magn_off_z
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:4019   .rodata.magn_off_y:0000000000000000 magn_off_y
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:4013   .rodata.magn_off_x:0000000000000000 magn_off_x
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3969   .rodata.acc_scale_z:0000000000000000 acc_scale_z
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3963   .rodata.acc_scale_y:0000000000000000 acc_scale_y
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3957   .rodata.acc_scale_x:0000000000000000 acc_scale_x
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3951   .rodata.acc_off_z:0000000000000000 acc_off_z
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3945   .rodata.acc_off_y:0000000000000000 acc_off_y
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3975   .rodata.acc_off_x:0000000000000000 acc_off_x
                            *COM*:0000000000000004 iq3
                            *COM*:0000000000000004 iq2
                            *COM*:0000000000000004 iq1
                            *COM*:0000000000000004 iq0
                            *COM*:0000000000000004 raw_magn
                            *COM*:0000000000000004 raw_gyro
                            *COM*:0000000000000004 raw_acc
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3942   .rodata.acc_off_y:0000000000000000 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3948   .rodata.acc_off_z:0000000000000000 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3954   .rodata.acc_scale_x:0000000000000000 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3960   .rodata.acc_scale_y:0000000000000000 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3966   .rodata.acc_scale_z:0000000000000000 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3972   .rodata.acc_off_x:0000000000000000 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3978   .rodata.magn_scale_x:0000000000000000 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3984   .rodata.magn_scale_y:0000000000000000 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3990   .rodata.magn_scale_z:0000000000000000 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3996   .rodata.str1.4:0000000000000000 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:4010   .rodata.magn_off_x:0000000000000000 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:4016   .rodata.magn_off_y:0000000000000000 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:4022   .rodata.magn_off_z:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:487    .text.Hw_IMU_GetData:000000000000014c $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccz7HkVc.s:3941   .text.Hw_IMU_Update:0000000000000264 $t

UNDEFINED SYMBOLS
Hw_MPU6050_Init
Hw_HMC5883_Init
Lb_printf
__aeabi_i2d
__aeabi_dadd
__aeabi_dmul
__aeabi_d2f
__aeabi_f2iz
Hw_HMC5883_GetEnable
Hw_HMC5883_GetData
Hw_MPU6050_GetData
atan2
memcpy
__aeabi_i2f
__aeabi_fdiv
__aeabi_fsub
__aeabi_fadd
__aeabi_f2d
__aeabi_fmul
__aeabi_fcmpeq
__aeabi_fcmpgt
sqrt
__aeabi_ddiv
Hw_Timer_Get_u16Count_Usec
atan
asin
__aeabi_ui2f
cosf
sinf
atan2f
