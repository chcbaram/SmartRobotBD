
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008d18  08000000  08000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000030c  20000000  08008d18  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001300  20000400  08009200  00018400  2**9
                  ALLOC
  3 ._usrstack    00000100  20001700  0800a500  00018400  2**0
                  ALLOC
  4 .ARM.attributes 00000033  00000000  00000000  0001830c  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000ddc9  00000000  00000000  0001833f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000387d  00000000  00000000  00026108  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000d6ad  00000000  00000000  00029985  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000cd8  00000000  00000000  00037032  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000027c0  00000000  00000000  00037d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004480  00000000  00000000  0003a4ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002d89  00000000  00000000  0003e94a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000070  00000000  00000000  000416d3  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000024b0  00000000  00000000  00041744  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 e1 25 00 08                             .P. .%..

08000008 <__aeabi_drsub>:
 8000008:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800000c:	e002      	b.n	8000014 <__adddf3>
 800000e:	bf00      	nop

08000010 <__aeabi_dsub>:
 8000010:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000014 <__adddf3>:
 8000014:	b530      	push	{r4, r5, lr}
 8000016:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800001a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800001e:	ea94 0f05 	teq	r4, r5
 8000022:	bf08      	it	eq
 8000024:	ea90 0f02 	teqeq	r0, r2
 8000028:	bf1f      	itttt	ne
 800002a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800002e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000032:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000036:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800003a:	f000 80e2 	beq.w	8000202 <__adddf3+0x1ee>
 800003e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000042:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000046:	bfb8      	it	lt
 8000048:	426d      	neglt	r5, r5
 800004a:	dd0c      	ble.n	8000066 <__adddf3+0x52>
 800004c:	442c      	add	r4, r5
 800004e:	ea80 0202 	eor.w	r2, r0, r2
 8000052:	ea81 0303 	eor.w	r3, r1, r3
 8000056:	ea82 0000 	eor.w	r0, r2, r0
 800005a:	ea83 0101 	eor.w	r1, r3, r1
 800005e:	ea80 0202 	eor.w	r2, r0, r2
 8000062:	ea81 0303 	eor.w	r3, r1, r3
 8000066:	2d36      	cmp	r5, #54	; 0x36
 8000068:	bf88      	it	hi
 800006a:	bd30      	pophi	{r4, r5, pc}
 800006c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000070:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000074:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000078:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800007c:	d002      	beq.n	8000084 <__adddf3+0x70>
 800007e:	4240      	negs	r0, r0
 8000080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000084:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000088:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800008c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000090:	d002      	beq.n	8000098 <__adddf3+0x84>
 8000092:	4252      	negs	r2, r2
 8000094:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000098:	ea94 0f05 	teq	r4, r5
 800009c:	f000 80a7 	beq.w	80001ee <__adddf3+0x1da>
 80000a0:	f1a4 0401 	sub.w	r4, r4, #1
 80000a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80000a8:	db0d      	blt.n	80000c6 <__adddf3+0xb2>
 80000aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80000ae:	fa22 f205 	lsr.w	r2, r2, r5
 80000b2:	1880      	adds	r0, r0, r2
 80000b4:	f141 0100 	adc.w	r1, r1, #0
 80000b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80000bc:	1880      	adds	r0, r0, r2
 80000be:	fa43 f305 	asr.w	r3, r3, r5
 80000c2:	4159      	adcs	r1, r3
 80000c4:	e00e      	b.n	80000e4 <__adddf3+0xd0>
 80000c6:	f1a5 0520 	sub.w	r5, r5, #32
 80000ca:	f10e 0e20 	add.w	lr, lr, #32
 80000ce:	2a01      	cmp	r2, #1
 80000d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80000d4:	bf28      	it	cs
 80000d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80000da:	fa43 f305 	asr.w	r3, r3, r5
 80000de:	18c0      	adds	r0, r0, r3
 80000e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80000e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80000e8:	d507      	bpl.n	80000fa <__adddf3+0xe6>
 80000ea:	f04f 0e00 	mov.w	lr, #0
 80000ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80000f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80000f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80000fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80000fe:	d31b      	bcc.n	8000138 <__adddf3+0x124>
 8000100:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000104:	d30c      	bcc.n	8000120 <__adddf3+0x10c>
 8000106:	0849      	lsrs	r1, r1, #1
 8000108:	ea5f 0030 	movs.w	r0, r0, rrx
 800010c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000110:	f104 0401 	add.w	r4, r4, #1
 8000114:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000118:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800011c:	f080 809a 	bcs.w	8000254 <__adddf3+0x240>
 8000120:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000124:	bf08      	it	eq
 8000126:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800012a:	f150 0000 	adcs.w	r0, r0, #0
 800012e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000132:	ea41 0105 	orr.w	r1, r1, r5
 8000136:	bd30      	pop	{r4, r5, pc}
 8000138:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800013c:	4140      	adcs	r0, r0
 800013e:	eb41 0101 	adc.w	r1, r1, r1
 8000142:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000146:	f1a4 0401 	sub.w	r4, r4, #1
 800014a:	d1e9      	bne.n	8000120 <__adddf3+0x10c>
 800014c:	f091 0f00 	teq	r1, #0
 8000150:	bf04      	itt	eq
 8000152:	4601      	moveq	r1, r0
 8000154:	2000      	moveq	r0, #0
 8000156:	fab1 f381 	clz	r3, r1
 800015a:	bf08      	it	eq
 800015c:	3320      	addeq	r3, #32
 800015e:	f1a3 030b 	sub.w	r3, r3, #11
 8000162:	f1b3 0220 	subs.w	r2, r3, #32
 8000166:	da0c      	bge.n	8000182 <__adddf3+0x16e>
 8000168:	320c      	adds	r2, #12
 800016a:	dd08      	ble.n	800017e <__adddf3+0x16a>
 800016c:	f102 0c14 	add.w	ip, r2, #20
 8000170:	f1c2 020c 	rsb	r2, r2, #12
 8000174:	fa01 f00c 	lsl.w	r0, r1, ip
 8000178:	fa21 f102 	lsr.w	r1, r1, r2
 800017c:	e00c      	b.n	8000198 <__adddf3+0x184>
 800017e:	f102 0214 	add.w	r2, r2, #20
 8000182:	bfd8      	it	le
 8000184:	f1c2 0c20 	rsble	ip, r2, #32
 8000188:	fa01 f102 	lsl.w	r1, r1, r2
 800018c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000190:	bfdc      	itt	le
 8000192:	ea41 010c 	orrle.w	r1, r1, ip
 8000196:	4090      	lslle	r0, r2
 8000198:	1ae4      	subs	r4, r4, r3
 800019a:	bfa2      	ittt	ge
 800019c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80001a0:	4329      	orrge	r1, r5
 80001a2:	bd30      	popge	{r4, r5, pc}
 80001a4:	ea6f 0404 	mvn.w	r4, r4
 80001a8:	3c1f      	subs	r4, #31
 80001aa:	da1c      	bge.n	80001e6 <__adddf3+0x1d2>
 80001ac:	340c      	adds	r4, #12
 80001ae:	dc0e      	bgt.n	80001ce <__adddf3+0x1ba>
 80001b0:	f104 0414 	add.w	r4, r4, #20
 80001b4:	f1c4 0220 	rsb	r2, r4, #32
 80001b8:	fa20 f004 	lsr.w	r0, r0, r4
 80001bc:	fa01 f302 	lsl.w	r3, r1, r2
 80001c0:	ea40 0003 	orr.w	r0, r0, r3
 80001c4:	fa21 f304 	lsr.w	r3, r1, r4
 80001c8:	ea45 0103 	orr.w	r1, r5, r3
 80001cc:	bd30      	pop	{r4, r5, pc}
 80001ce:	f1c4 040c 	rsb	r4, r4, #12
 80001d2:	f1c4 0220 	rsb	r2, r4, #32
 80001d6:	fa20 f002 	lsr.w	r0, r0, r2
 80001da:	fa01 f304 	lsl.w	r3, r1, r4
 80001de:	ea40 0003 	orr.w	r0, r0, r3
 80001e2:	4629      	mov	r1, r5
 80001e4:	bd30      	pop	{r4, r5, pc}
 80001e6:	fa21 f004 	lsr.w	r0, r1, r4
 80001ea:	4629      	mov	r1, r5
 80001ec:	bd30      	pop	{r4, r5, pc}
 80001ee:	f094 0f00 	teq	r4, #0
 80001f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80001f6:	bf06      	itte	eq
 80001f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80001fc:	3401      	addeq	r4, #1
 80001fe:	3d01      	subne	r5, #1
 8000200:	e74e      	b.n	80000a0 <__adddf3+0x8c>
 8000202:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000206:	bf18      	it	ne
 8000208:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020c:	d029      	beq.n	8000262 <__adddf3+0x24e>
 800020e:	ea94 0f05 	teq	r4, r5
 8000212:	bf08      	it	eq
 8000214:	ea90 0f02 	teqeq	r0, r2
 8000218:	d005      	beq.n	8000226 <__adddf3+0x212>
 800021a:	ea54 0c00 	orrs.w	ip, r4, r0
 800021e:	bf04      	itt	eq
 8000220:	4619      	moveq	r1, r3
 8000222:	4610      	moveq	r0, r2
 8000224:	bd30      	pop	{r4, r5, pc}
 8000226:	ea91 0f03 	teq	r1, r3
 800022a:	bf1e      	ittt	ne
 800022c:	2100      	movne	r1, #0
 800022e:	2000      	movne	r0, #0
 8000230:	bd30      	popne	{r4, r5, pc}
 8000232:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000236:	d105      	bne.n	8000244 <__adddf3+0x230>
 8000238:	0040      	lsls	r0, r0, #1
 800023a:	4149      	adcs	r1, r1
 800023c:	bf28      	it	cs
 800023e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000242:	bd30      	pop	{r4, r5, pc}
 8000244:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000248:	bf3c      	itt	cc
 800024a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800024e:	bd30      	popcc	{r4, r5, pc}
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000258:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800025c:	f04f 0000 	mov.w	r0, #0
 8000260:	bd30      	pop	{r4, r5, pc}
 8000262:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000266:	bf1a      	itte	ne
 8000268:	4619      	movne	r1, r3
 800026a:	4610      	movne	r0, r2
 800026c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000270:	bf1c      	itt	ne
 8000272:	460b      	movne	r3, r1
 8000274:	4602      	movne	r2, r0
 8000276:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800027a:	bf06      	itte	eq
 800027c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000280:	ea91 0f03 	teqeq	r1, r3
 8000284:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000288:	bd30      	pop	{r4, r5, pc}
 800028a:	bf00      	nop

0800028c <__aeabi_ui2d>:
 800028c:	f090 0f00 	teq	r0, #0
 8000290:	bf04      	itt	eq
 8000292:	2100      	moveq	r1, #0
 8000294:	4770      	bxeq	lr
 8000296:	b530      	push	{r4, r5, lr}
 8000298:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800029c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80002a0:	f04f 0500 	mov.w	r5, #0
 80002a4:	f04f 0100 	mov.w	r1, #0
 80002a8:	e750      	b.n	800014c <__adddf3+0x138>
 80002aa:	bf00      	nop

080002ac <__aeabi_i2d>:
 80002ac:	f090 0f00 	teq	r0, #0
 80002b0:	bf04      	itt	eq
 80002b2:	2100      	moveq	r1, #0
 80002b4:	4770      	bxeq	lr
 80002b6:	b530      	push	{r4, r5, lr}
 80002b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80002bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80002c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	f04f 0100 	mov.w	r1, #0
 80002cc:	e73e      	b.n	800014c <__adddf3+0x138>
 80002ce:	bf00      	nop

080002d0 <__aeabi_f2d>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80002d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80002de:	bf1f      	itttt	ne
 80002e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80002e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80002e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80002ec:	4770      	bxne	lr
 80002ee:	f092 0f00 	teq	r2, #0
 80002f2:	bf14      	ite	ne
 80002f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80002f8:	4770      	bxeq	lr
 80002fa:	b530      	push	{r4, r5, lr}
 80002fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000308:	e720      	b.n	800014c <__adddf3+0x138>
 800030a:	bf00      	nop

0800030c <__aeabi_ul2d>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	b530      	push	{r4, r5, lr}
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	e00a      	b.n	8000332 <__aeabi_l2d+0x16>

0800031c <__aeabi_l2d>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	b530      	push	{r4, r5, lr}
 8000326:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800032a:	d502      	bpl.n	8000332 <__aeabi_l2d+0x16>
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000336:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800033a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800033e:	f43f aedc 	beq.w	80000fa <__adddf3+0xe6>
 8000342:	f04f 0203 	mov.w	r2, #3
 8000346:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800034a:	bf18      	it	ne
 800034c:	3203      	addne	r2, #3
 800034e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000352:	bf18      	it	ne
 8000354:	3203      	addne	r2, #3
 8000356:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 fe03 	lsl.w	lr, r1, r3
 800036a:	ea40 000e 	orr.w	r0, r0, lr
 800036e:	fa21 f102 	lsr.w	r1, r1, r2
 8000372:	4414      	add	r4, r2
 8000374:	e6c1      	b.n	80000fa <__adddf3+0xe6>
 8000376:	bf00      	nop

08000378 <__aeabi_dmul>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000382:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000386:	bf1d      	ittte	ne
 8000388:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800038c:	ea94 0f0c 	teqne	r4, ip
 8000390:	ea95 0f0c 	teqne	r5, ip
 8000394:	f000 f8de 	bleq	8000554 <__aeabi_dmul+0x1dc>
 8000398:	442c      	add	r4, r5
 800039a:	ea81 0603 	eor.w	r6, r1, r3
 800039e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80003a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80003a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80003aa:	bf18      	it	ne
 80003ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80003b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003b8:	d038      	beq.n	800042c <__aeabi_dmul+0xb4>
 80003ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80003be:	f04f 0500 	mov.w	r5, #0
 80003c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80003c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80003ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80003ce:	f04f 0600 	mov.w	r6, #0
 80003d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80003d6:	f09c 0f00 	teq	ip, #0
 80003da:	bf18      	it	ne
 80003dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80003e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80003e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80003e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80003ec:	d204      	bcs.n	80003f8 <__aeabi_dmul+0x80>
 80003ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80003f2:	416d      	adcs	r5, r5
 80003f4:	eb46 0606 	adc.w	r6, r6, r6
 80003f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80003fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000400:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000404:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000408:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800040c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000410:	bf88      	it	hi
 8000412:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000416:	d81e      	bhi.n	8000456 <__aeabi_dmul+0xde>
 8000418:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000430:	ea46 0101 	orr.w	r1, r6, r1
 8000434:	ea40 0002 	orr.w	r0, r0, r2
 8000438:	ea81 0103 	eor.w	r1, r1, r3
 800043c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000440:	bfc2      	ittt	gt
 8000442:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000446:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800044a:	bd70      	popgt	{r4, r5, r6, pc}
 800044c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000450:	f04f 0e00 	mov.w	lr, #0
 8000454:	3c01      	subs	r4, #1
 8000456:	f300 80ab 	bgt.w	80005b0 <__aeabi_dmul+0x238>
 800045a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800045e:	bfde      	ittt	le
 8000460:	2000      	movle	r0, #0
 8000462:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000466:	bd70      	pople	{r4, r5, r6, pc}
 8000468:	f1c4 0400 	rsb	r4, r4, #0
 800046c:	3c20      	subs	r4, #32
 800046e:	da35      	bge.n	80004dc <__aeabi_dmul+0x164>
 8000470:	340c      	adds	r4, #12
 8000472:	dc1b      	bgt.n	80004ac <__aeabi_dmul+0x134>
 8000474:	f104 0414 	add.w	r4, r4, #20
 8000478:	f1c4 0520 	rsb	r5, r4, #32
 800047c:	fa00 f305 	lsl.w	r3, r0, r5
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f205 	lsl.w	r2, r1, r5
 8000488:	ea40 0002 	orr.w	r0, r0, r2
 800048c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000490:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000494:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000498:	fa21 f604 	lsr.w	r6, r1, r4
 800049c:	eb42 0106 	adc.w	r1, r2, r6
 80004a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004a4:	bf08      	it	eq
 80004a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	f1c4 040c 	rsb	r4, r4, #12
 80004b0:	f1c4 0520 	rsb	r5, r4, #32
 80004b4:	fa00 f304 	lsl.w	r3, r0, r4
 80004b8:	fa20 f005 	lsr.w	r0, r0, r5
 80004bc:	fa01 f204 	lsl.w	r2, r1, r4
 80004c0:	ea40 0002 	orr.w	r0, r0, r2
 80004c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80004cc:	f141 0100 	adc.w	r1, r1, #0
 80004d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004d4:	bf08      	it	eq
 80004d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	f1c4 0520 	rsb	r5, r4, #32
 80004e0:	fa00 f205 	lsl.w	r2, r0, r5
 80004e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80004e8:	fa20 f304 	lsr.w	r3, r0, r4
 80004ec:	fa01 f205 	lsl.w	r2, r1, r5
 80004f0:	ea43 0302 	orr.w	r3, r3, r2
 80004f4:	fa21 f004 	lsr.w	r0, r1, r4
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000500:	ea20 0002 	bic.w	r0, r0, r2
 8000504:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000508:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800050c:	bf08      	it	eq
 800050e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000512:	bd70      	pop	{r4, r5, r6, pc}
 8000514:	f094 0f00 	teq	r4, #0
 8000518:	d10f      	bne.n	800053a <__aeabi_dmul+0x1c2>
 800051a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800051e:	0040      	lsls	r0, r0, #1
 8000520:	eb41 0101 	adc.w	r1, r1, r1
 8000524:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000528:	bf08      	it	eq
 800052a:	3c01      	subeq	r4, #1
 800052c:	d0f7      	beq.n	800051e <__aeabi_dmul+0x1a6>
 800052e:	ea41 0106 	orr.w	r1, r1, r6
 8000532:	f095 0f00 	teq	r5, #0
 8000536:	bf18      	it	ne
 8000538:	4770      	bxne	lr
 800053a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800053e:	0052      	lsls	r2, r2, #1
 8000540:	eb43 0303 	adc.w	r3, r3, r3
 8000544:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000548:	bf08      	it	eq
 800054a:	3d01      	subeq	r5, #1
 800054c:	d0f7      	beq.n	800053e <__aeabi_dmul+0x1c6>
 800054e:	ea43 0306 	orr.w	r3, r3, r6
 8000552:	4770      	bx	lr
 8000554:	ea94 0f0c 	teq	r4, ip
 8000558:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800055c:	bf18      	it	ne
 800055e:	ea95 0f0c 	teqne	r5, ip
 8000562:	d00c      	beq.n	800057e <__aeabi_dmul+0x206>
 8000564:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000568:	bf18      	it	ne
 800056a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800056e:	d1d1      	bne.n	8000514 <__aeabi_dmul+0x19c>
 8000570:	ea81 0103 	eor.w	r1, r1, r3
 8000574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000582:	bf06      	itte	eq
 8000584:	4610      	moveq	r0, r2
 8000586:	4619      	moveq	r1, r3
 8000588:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800058c:	d019      	beq.n	80005c2 <__aeabi_dmul+0x24a>
 800058e:	ea94 0f0c 	teq	r4, ip
 8000592:	d102      	bne.n	800059a <__aeabi_dmul+0x222>
 8000594:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000598:	d113      	bne.n	80005c2 <__aeabi_dmul+0x24a>
 800059a:	ea95 0f0c 	teq	r5, ip
 800059e:	d105      	bne.n	80005ac <__aeabi_dmul+0x234>
 80005a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80005a4:	bf1c      	itt	ne
 80005a6:	4610      	movne	r0, r2
 80005a8:	4619      	movne	r1, r3
 80005aa:	d10a      	bne.n	80005c2 <__aeabi_dmul+0x24a>
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80005b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005bc:	f04f 0000 	mov.w	r0, #0
 80005c0:	bd70      	pop	{r4, r5, r6, pc}
 80005c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80005c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80005ca:	bd70      	pop	{r4, r5, r6, pc}

080005cc <__aeabi_ddiv>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8a7 	bleq	800073a <__aeabi_ddiv+0x16e>
 80005ec:	eba4 0405 	sub.w	r4, r4, r5
 80005f0:	ea81 0e03 	eor.w	lr, r1, r3
 80005f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80005f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005fc:	f000 8088 	beq.w	8000710 <__aeabi_ddiv+0x144>
 8000600:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000604:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000608:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800060c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000610:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000614:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000618:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800061c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000620:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000624:	429d      	cmp	r5, r3
 8000626:	bf08      	it	eq
 8000628:	4296      	cmpeq	r6, r2
 800062a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800062e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000632:	d202      	bcs.n	800063a <__aeabi_ddiv+0x6e>
 8000634:	085b      	lsrs	r3, r3, #1
 8000636:	ea4f 0232 	mov.w	r2, r2, rrx
 800063a:	1ab6      	subs	r6, r6, r2
 800063c:	eb65 0503 	sbc.w	r5, r5, r3
 8000640:	085b      	lsrs	r3, r3, #1
 8000642:	ea4f 0232 	mov.w	r2, r2, rrx
 8000646:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800064a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800064e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000652:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000656:	bf22      	ittt	cs
 8000658:	1ab6      	subcs	r6, r6, r2
 800065a:	4675      	movcs	r5, lr
 800065c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000660:	085b      	lsrs	r3, r3, #1
 8000662:	ea4f 0232 	mov.w	r2, r2, rrx
 8000666:	ebb6 0e02 	subs.w	lr, r6, r2
 800066a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800066e:	bf22      	ittt	cs
 8000670:	1ab6      	subcs	r6, r6, r2
 8000672:	4675      	movcs	r5, lr
 8000674:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	ea4f 0232 	mov.w	r2, r2, rrx
 800067e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000682:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000686:	bf22      	ittt	cs
 8000688:	1ab6      	subcs	r6, r6, r2
 800068a:	4675      	movcs	r5, lr
 800068c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000690:	085b      	lsrs	r3, r3, #1
 8000692:	ea4f 0232 	mov.w	r2, r2, rrx
 8000696:	ebb6 0e02 	subs.w	lr, r6, r2
 800069a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800069e:	bf22      	ittt	cs
 80006a0:	1ab6      	subcs	r6, r6, r2
 80006a2:	4675      	movcs	r5, lr
 80006a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80006a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80006ac:	d018      	beq.n	80006e0 <__aeabi_ddiv+0x114>
 80006ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80006b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80006b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80006ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80006be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80006c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80006c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80006ca:	d1c0      	bne.n	800064e <__aeabi_ddiv+0x82>
 80006cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006d0:	d10b      	bne.n	80006ea <__aeabi_ddiv+0x11e>
 80006d2:	ea41 0100 	orr.w	r1, r1, r0
 80006d6:	f04f 0000 	mov.w	r0, #0
 80006da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80006de:	e7b6      	b.n	800064e <__aeabi_ddiv+0x82>
 80006e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e4:	bf04      	itt	eq
 80006e6:	4301      	orreq	r1, r0
 80006e8:	2000      	moveq	r0, #0
 80006ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ee:	bf88      	it	hi
 80006f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f4:	f63f aeaf 	bhi.w	8000456 <__aeabi_dmul+0xde>
 80006f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80006fc:	bf04      	itt	eq
 80006fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000702:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000714:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000718:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	e690      	b.n	8000456 <__aeabi_dmul+0xde>
 8000734:	ea45 0e06 	orr.w	lr, r5, r6
 8000738:	e68d      	b.n	8000456 <__aeabi_dmul+0xde>
 800073a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073e:	ea94 0f0c 	teq	r4, ip
 8000742:	bf08      	it	eq
 8000744:	ea95 0f0c 	teqeq	r5, ip
 8000748:	f43f af3b 	beq.w	80005c2 <__aeabi_dmul+0x24a>
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	d10a      	bne.n	8000768 <__aeabi_ddiv+0x19c>
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	f47f af34 	bne.w	80005c2 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	f47f af25 	bne.w	80005ac <__aeabi_dmul+0x234>
 8000762:	4610      	mov	r0, r2
 8000764:	4619      	mov	r1, r3
 8000766:	e72c      	b.n	80005c2 <__aeabi_dmul+0x24a>
 8000768:	ea95 0f0c 	teq	r5, ip
 800076c:	d106      	bne.n	800077c <__aeabi_ddiv+0x1b0>
 800076e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000772:	f43f aefd 	beq.w	8000570 <__aeabi_dmul+0x1f8>
 8000776:	4610      	mov	r0, r2
 8000778:	4619      	mov	r1, r3
 800077a:	e722      	b.n	80005c2 <__aeabi_dmul+0x24a>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	f47f aec5 	bne.w	8000514 <__aeabi_dmul+0x19c>
 800078a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800078e:	f47f af0d 	bne.w	80005ac <__aeabi_dmul+0x234>
 8000792:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000796:	f47f aeeb 	bne.w	8000570 <__aeabi_dmul+0x1f8>
 800079a:	e712      	b.n	80005c2 <__aeabi_dmul+0x24a>

0800079c <__gedf2>:
 800079c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007a0:	e006      	b.n	80007b0 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__ledf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	e002      	b.n	80007b0 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__cmpdf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c0:	bf18      	it	ne
 80007c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007c6:	d01b      	beq.n	8000800 <__cmpdf2+0x54>
 80007c8:	b001      	add	sp, #4
 80007ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ce:	bf0c      	ite	eq
 80007d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007d4:	ea91 0f03 	teqne	r1, r3
 80007d8:	bf02      	ittt	eq
 80007da:	ea90 0f02 	teqeq	r0, r2
 80007de:	2000      	moveq	r0, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	f110 0f00 	cmn.w	r0, #0
 80007e6:	ea91 0f03 	teq	r1, r3
 80007ea:	bf58      	it	pl
 80007ec:	4299      	cmppl	r1, r3
 80007ee:	bf08      	it	eq
 80007f0:	4290      	cmpeq	r0, r2
 80007f2:	bf2c      	ite	cs
 80007f4:	17d8      	asrcs	r0, r3, #31
 80007f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007fa:	f040 0001 	orr.w	r0, r0, #1
 80007fe:	4770      	bx	lr
 8000800:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000804:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000808:	d102      	bne.n	8000810 <__cmpdf2+0x64>
 800080a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800080e:	d107      	bne.n	8000820 <__cmpdf2+0x74>
 8000810:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000818:	d1d6      	bne.n	80007c8 <__cmpdf2+0x1c>
 800081a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800081e:	d0d3      	beq.n	80007c8 <__cmpdf2+0x1c>
 8000820:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <__aeabi_cdrcmple>:
 8000828:	4684      	mov	ip, r0
 800082a:	4610      	mov	r0, r2
 800082c:	4662      	mov	r2, ip
 800082e:	468c      	mov	ip, r1
 8000830:	4619      	mov	r1, r3
 8000832:	4663      	mov	r3, ip
 8000834:	e000      	b.n	8000838 <__aeabi_cdcmpeq>
 8000836:	bf00      	nop

08000838 <__aeabi_cdcmpeq>:
 8000838:	b501      	push	{r0, lr}
 800083a:	f7ff ffb7 	bl	80007ac <__cmpdf2>
 800083e:	2800      	cmp	r0, #0
 8000840:	bf48      	it	mi
 8000842:	f110 0f00 	cmnmi.w	r0, #0
 8000846:	bd01      	pop	{r0, pc}

08000848 <__aeabi_dcmpeq>:
 8000848:	f84d ed08 	str.w	lr, [sp, #-8]!
 800084c:	f7ff fff4 	bl	8000838 <__aeabi_cdcmpeq>
 8000850:	bf0c      	ite	eq
 8000852:	2001      	moveq	r0, #1
 8000854:	2000      	movne	r0, #0
 8000856:	f85d fb08 	ldr.w	pc, [sp], #8
 800085a:	bf00      	nop

0800085c <__aeabi_dcmplt>:
 800085c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000860:	f7ff ffea 	bl	8000838 <__aeabi_cdcmpeq>
 8000864:	bf34      	ite	cc
 8000866:	2001      	movcc	r0, #1
 8000868:	2000      	movcs	r0, #0
 800086a:	f85d fb08 	ldr.w	pc, [sp], #8
 800086e:	bf00      	nop

08000870 <__aeabi_dcmple>:
 8000870:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000874:	f7ff ffe0 	bl	8000838 <__aeabi_cdcmpeq>
 8000878:	bf94      	ite	ls
 800087a:	2001      	movls	r0, #1
 800087c:	2000      	movhi	r0, #0
 800087e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000882:	bf00      	nop

08000884 <__aeabi_dcmpge>:
 8000884:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000888:	f7ff ffce 	bl	8000828 <__aeabi_cdrcmple>
 800088c:	bf94      	ite	ls
 800088e:	2001      	movls	r0, #1
 8000890:	2000      	movhi	r0, #0
 8000892:	f85d fb08 	ldr.w	pc, [sp], #8
 8000896:	bf00      	nop

08000898 <__aeabi_dcmpgt>:
 8000898:	f84d ed08 	str.w	lr, [sp, #-8]!
 800089c:	f7ff ffc4 	bl	8000828 <__aeabi_cdrcmple>
 80008a0:	bf34      	ite	cc
 80008a2:	2001      	movcc	r0, #1
 80008a4:	2000      	movcs	r0, #0
 80008a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008aa:	bf00      	nop

080008ac <__aeabi_d2f>:
 80008ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008b4:	bf24      	itt	cs
 80008b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008be:	d90d      	bls.n	80008dc <__aeabi_d2f+0x30>
 80008c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008d4:	bf08      	it	eq
 80008d6:	f020 0001 	biceq.w	r0, r0, #1
 80008da:	4770      	bx	lr
 80008dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008e0:	d121      	bne.n	8000926 <__aeabi_d2f+0x7a>
 80008e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008e6:	bfbc      	itt	lt
 80008e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ec:	4770      	bxlt	lr
 80008ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008f6:	f1c2 0218 	rsb	r2, r2, #24
 80008fa:	f1c2 0c20 	rsb	ip, r2, #32
 80008fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000902:	fa20 f002 	lsr.w	r0, r0, r2
 8000906:	bf18      	it	ne
 8000908:	f040 0001 	orrne.w	r0, r0, #1
 800090c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000910:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000914:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000918:	ea40 000c 	orr.w	r0, r0, ip
 800091c:	fa23 f302 	lsr.w	r3, r3, r2
 8000920:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000924:	e7cc      	b.n	80008c0 <__aeabi_d2f+0x14>
 8000926:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800092a:	d107      	bne.n	800093c <__aeabi_d2f+0x90>
 800092c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000930:	bf1e      	ittt	ne
 8000932:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000936:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800093a:	4770      	bxne	lr
 800093c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000940:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000944:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_frsub>:
 800094c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000950:	e002      	b.n	8000958 <__addsf3>
 8000952:	bf00      	nop

08000954 <__aeabi_fsub>:
 8000954:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000958 <__addsf3>:
 8000958:	0042      	lsls	r2, r0, #1
 800095a:	bf1f      	itttt	ne
 800095c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000960:	ea92 0f03 	teqne	r2, r3
 8000964:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000968:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800096c:	d06a      	beq.n	8000a44 <__addsf3+0xec>
 800096e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000972:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000976:	bfc1      	itttt	gt
 8000978:	18d2      	addgt	r2, r2, r3
 800097a:	4041      	eorgt	r1, r0
 800097c:	4048      	eorgt	r0, r1
 800097e:	4041      	eorgt	r1, r0
 8000980:	bfb8      	it	lt
 8000982:	425b      	neglt	r3, r3
 8000984:	2b19      	cmp	r3, #25
 8000986:	bf88      	it	hi
 8000988:	4770      	bxhi	lr
 800098a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800098e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000992:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4249      	negne	r1, r1
 80009aa:	ea92 0f03 	teq	r2, r3
 80009ae:	d03f      	beq.n	8000a30 <__addsf3+0xd8>
 80009b0:	f1a2 0201 	sub.w	r2, r2, #1
 80009b4:	fa41 fc03 	asr.w	ip, r1, r3
 80009b8:	eb10 000c 	adds.w	r0, r0, ip
 80009bc:	f1c3 0320 	rsb	r3, r3, #32
 80009c0:	fa01 f103 	lsl.w	r1, r1, r3
 80009c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009c8:	d502      	bpl.n	80009d0 <__addsf3+0x78>
 80009ca:	4249      	negs	r1, r1
 80009cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009d4:	d313      	bcc.n	80009fe <__addsf3+0xa6>
 80009d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009da:	d306      	bcc.n	80009ea <__addsf3+0x92>
 80009dc:	0840      	lsrs	r0, r0, #1
 80009de:	ea4f 0131 	mov.w	r1, r1, rrx
 80009e2:	f102 0201 	add.w	r2, r2, #1
 80009e6:	2afe      	cmp	r2, #254	; 0xfe
 80009e8:	d251      	bcs.n	8000a8e <__addsf3+0x136>
 80009ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f2:	bf08      	it	eq
 80009f4:	f020 0001 	biceq.w	r0, r0, #1
 80009f8:	ea40 0003 	orr.w	r0, r0, r3
 80009fc:	4770      	bx	lr
 80009fe:	0049      	lsls	r1, r1, #1
 8000a00:	eb40 0000 	adc.w	r0, r0, r0
 8000a04:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a08:	f1a2 0201 	sub.w	r2, r2, #1
 8000a0c:	d1ed      	bne.n	80009ea <__addsf3+0x92>
 8000a0e:	fab0 fc80 	clz	ip, r0
 8000a12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a16:	ebb2 020c 	subs.w	r2, r2, ip
 8000a1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a1e:	bfaa      	itet	ge
 8000a20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a24:	4252      	neglt	r2, r2
 8000a26:	4318      	orrge	r0, r3
 8000a28:	bfbc      	itt	lt
 8000a2a:	40d0      	lsrlt	r0, r2
 8000a2c:	4318      	orrlt	r0, r3
 8000a2e:	4770      	bx	lr
 8000a30:	f092 0f00 	teq	r2, #0
 8000a34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a38:	bf06      	itte	eq
 8000a3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a3e:	3201      	addeq	r2, #1
 8000a40:	3b01      	subne	r3, #1
 8000a42:	e7b5      	b.n	80009b0 <__addsf3+0x58>
 8000a44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a4c:	bf18      	it	ne
 8000a4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a52:	d021      	beq.n	8000a98 <__addsf3+0x140>
 8000a54:	ea92 0f03 	teq	r2, r3
 8000a58:	d004      	beq.n	8000a64 <__addsf3+0x10c>
 8000a5a:	f092 0f00 	teq	r2, #0
 8000a5e:	bf08      	it	eq
 8000a60:	4608      	moveq	r0, r1
 8000a62:	4770      	bx	lr
 8000a64:	ea90 0f01 	teq	r0, r1
 8000a68:	bf1c      	itt	ne
 8000a6a:	2000      	movne	r0, #0
 8000a6c:	4770      	bxne	lr
 8000a6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a72:	d104      	bne.n	8000a7e <__addsf3+0x126>
 8000a74:	0040      	lsls	r0, r0, #1
 8000a76:	bf28      	it	cs
 8000a78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a7c:	4770      	bx	lr
 8000a7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a82:	bf3c      	itt	cc
 8000a84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bxcc	lr
 8000a8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	4770      	bx	lr
 8000a98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a9c:	bf16      	itet	ne
 8000a9e:	4608      	movne	r0, r1
 8000aa0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa4:	4601      	movne	r1, r0
 8000aa6:	0242      	lsls	r2, r0, #9
 8000aa8:	bf06      	itte	eq
 8000aaa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aae:	ea90 0f01 	teqeq	r0, r1
 8000ab2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_ui2f>:
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e004      	b.n	8000ac8 <__aeabi_i2f+0x8>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_i2f>:
 8000ac0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ac4:	bf48      	it	mi
 8000ac6:	4240      	negmi	r0, r0
 8000ac8:	ea5f 0c00 	movs.w	ip, r0
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	e01c      	b.n	8000b16 <__aeabi_l2f+0x2a>

08000adc <__aeabi_ul2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	e00a      	b.n	8000b00 <__aeabi_l2f+0x14>
 8000aea:	bf00      	nop

08000aec <__aeabi_l2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000af8:	d502      	bpl.n	8000b00 <__aeabi_l2f+0x14>
 8000afa:	4240      	negs	r0, r0
 8000afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b00:	ea5f 0c01 	movs.w	ip, r1
 8000b04:	bf02      	ittt	eq
 8000b06:	4684      	moveq	ip, r0
 8000b08:	4601      	moveq	r1, r0
 8000b0a:	2000      	moveq	r0, #0
 8000b0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b10:	bf08      	it	eq
 8000b12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b1a:	fabc f28c 	clz	r2, ip
 8000b1e:	3a08      	subs	r2, #8
 8000b20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b24:	db10      	blt.n	8000b48 <__aeabi_l2f+0x5c>
 8000b26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b38:	fa20 f202 	lsr.w	r2, r0, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f102 0220 	add.w	r2, r2, #32
 8000b4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b50:	f1c2 0220 	rsb	r2, r2, #32
 8000b54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b58:	fa21 f202 	lsr.w	r2, r1, r2
 8000b5c:	eb43 0002 	adc.w	r0, r3, r2
 8000b60:	bf08      	it	eq
 8000b62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bba:	2afd      	cmp	r2, #253	; 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	; 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	; 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	; 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <__gesf2>:
 8000e08:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e0c:	e006      	b.n	8000e1c <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__lesf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	e002      	b.n	8000e1c <__cmpsf2+0x4>
 8000e16:	bf00      	nop

08000e18 <__cmpsf2>:
 8000e18:	f04f 0c01 	mov.w	ip, #1
 8000e1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e2c:	bf18      	it	ne
 8000e2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e32:	d011      	beq.n	8000e58 <__cmpsf2+0x40>
 8000e34:	b001      	add	sp, #4
 8000e36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3a:	bf18      	it	ne
 8000e3c:	ea90 0f01 	teqne	r0, r1
 8000e40:	bf58      	it	pl
 8000e42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e46:	bf88      	it	hi
 8000e48:	17c8      	asrhi	r0, r1, #31
 8000e4a:	bf38      	it	cc
 8000e4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e50:	bf18      	it	ne
 8000e52:	f040 0001 	orrne.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e5c:	d102      	bne.n	8000e64 <__cmpsf2+0x4c>
 8000e5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e62:	d105      	bne.n	8000e70 <__cmpsf2+0x58>
 8000e64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e68:	d1e4      	bne.n	8000e34 <__cmpsf2+0x1c>
 8000e6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e6e:	d0e1      	beq.n	8000e34 <__cmpsf2+0x1c>
 8000e70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_cfrcmple>:
 8000e78:	4684      	mov	ip, r0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4661      	mov	r1, ip
 8000e7e:	e7ff      	b.n	8000e80 <__aeabi_cfcmpeq>

08000e80 <__aeabi_cfcmpeq>:
 8000e80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e82:	f7ff ffc9 	bl	8000e18 <__cmpsf2>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	bf48      	it	mi
 8000e8a:	f110 0f00 	cmnmi.w	r0, #0
 8000e8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e90 <__aeabi_fcmpeq>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff fff4 	bl	8000e80 <__aeabi_cfcmpeq>
 8000e98:	bf0c      	ite	eq
 8000e9a:	2001      	moveq	r0, #1
 8000e9c:	2000      	movne	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmplt>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffea 	bl	8000e80 <__aeabi_cfcmpeq>
 8000eac:	bf34      	ite	cc
 8000eae:	2001      	movcc	r0, #1
 8000eb0:	2000      	movcs	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmple>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffe0 	bl	8000e80 <__aeabi_cfcmpeq>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpge>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffd2 	bl	8000e78 <__aeabi_cfrcmple>
 8000ed4:	bf94      	ite	ls
 8000ed6:	2001      	movls	r0, #1
 8000ed8:	2000      	movhi	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmpgt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffc8 	bl	8000e78 <__aeabi_cfrcmple>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_f2iz>:
 8000ef4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000efc:	d30f      	bcc.n	8000f1e <__aeabi_f2iz+0x2a>
 8000efe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f06:	d90d      	bls.n	8000f24 <__aeabi_f2iz+0x30>
 8000f08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f10:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f14:	fa23 f002 	lsr.w	r0, r3, r2
 8000f18:	bf18      	it	ne
 8000f1a:	4240      	negne	r0, r0
 8000f1c:	4770      	bx	lr
 8000f1e:	f04f 0000 	mov.w	r0, #0
 8000f22:	4770      	bx	lr
 8000f24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f28:	d101      	bne.n	8000f2e <__aeabi_f2iz+0x3a>
 8000f2a:	0242      	lsls	r2, r0, #9
 8000f2c:	d105      	bne.n	8000f3a <__aeabi_f2iz+0x46>
 8000f2e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f32:	bf08      	it	eq
 8000f34:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	4770      	bx	lr

08000f40 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000f40:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 8000f42:	f642 2321 	movw	r3, #10785	; 0x2a21
 8000f46:	2000      	movs	r0, #0
 8000f48:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f4c:	4798      	blx	r3
 8000f4e:	bd08      	pop	{r3, pc}

08000f50 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 8000f54:	4b4d      	ldr	r3, [pc, #308]	; (800108c <main+0x13c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000f56:	b095      	sub	sp, #84	; 0x54
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 8000f58:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000f5a:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000f5c:	484c      	ldr	r0, [pc, #304]	; (8001090 <main+0x140>)
 8000f5e:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000f60:	4d4c      	ldr	r5, [pc, #304]	; (8001094 <main+0x144>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	4b4c      	ldr	r3, [pc, #304]	; (8001098 <main+0x148>)
 8000f66:	4620      	mov	r0, r4
 8000f68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f6c:	9400      	str	r4, [sp, #0]
 8000f6e:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );		
 8000f70:	4620      	mov	r0, r4
 8000f72:	494a      	ldr	r1, [pc, #296]	; (800109c <main+0x14c>)
 8000f74:	4788      	blx	r1

	Main_Init();

	//-- 명령어 처리
	//  
	Ap_GLcdMenu_ExeCmd();    
 8000f76:	4a4a      	ldr	r2, [pc, #296]	; (80010a0 <main+0x150>)
 8000f78:	4790      	blx	r2
 8000f7a:	4f4a      	ldr	r7, [pc, #296]	; (80010a4 <main+0x154>)
 8000f7c:	4e4a      	ldr	r6, [pc, #296]	; (80010a8 <main+0x158>)
 8000f7e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 80010b8 <main+0x168>
 8000f82:	4c4a      	ldr	r4, [pc, #296]	; (80010ac <main+0x15c>)
 8000f84:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80010bc <main+0x16c>


    while(1)
    {
    	key = get_byte();
 8000f88:	46ba      	mov	sl, r7
 8000f8a:	47b8      	blx	r7

    	if( key == 'r' )
 8000f8c:	2872      	cmp	r0, #114	; 0x72
 8000f8e:	d061      	beq.n	8001054 <main+0x104>
    		Hw_IMU_FreeIMU_getRawValues(raw_values);

    		Lb_printf("%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,\n", raw_values[0], raw_values[1], raw_values[2], raw_values[3], raw_values[4], raw_values[5], raw_values[6], raw_values[7], raw_values[8], raw_values[9], raw_values[10]);
    	}

    	if( key == 'v' )
 8000f90:	2876      	cmp	r0, #118	; 0x76
 8000f92:	d076      	beq.n	8001082 <main+0x132>
    		Hw_IMU_FreeIMU_getRawValues(raw_values);

    		Lb_printf("Baram \n");
    	}    

    	if( key == 'b' )
 8000f94:	2862      	cmp	r0, #98	; 0x62
 8000f96:	d1f8      	bne.n	8000f8a <main+0x3a>
    	{
    		uint8_t count = get_byte();
 8000f98:	47d0      	blx	sl

    		//int count = 50;

      		for(uint8_t i=0; i<count; i++) 
 8000f9a:	4683      	mov	fp, r0
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d0f4      	beq.n	8000f8a <main+0x3a>
 8000fa0:	2500      	movs	r5, #0
      		{
          		Hw_IMU_FreeIMU_getRawValues(raw_values);
 8000fa2:	a809      	add	r0, sp, #36	; 0x24
 8000fa4:	47b0      	blx	r6

          		for( int j=0; j<9; j++ )
          		{
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 0) & 0xFF) );
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8000fac:	47a0      	blx	r4
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 8) & 0xFF) );
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 8000fb4:	47a0      	blx	r4
      		{
          		Hw_IMU_FreeIMU_getRawValues(raw_values);

          		for( int j=0; j<9; j++ )
          		{
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 0) & 0xFF) );
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 8000fbc:	47a0      	blx	r4
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 8) & 0xFF) );
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 8000fc4:	47a0      	blx	r4
      		{
          		Hw_IMU_FreeIMU_getRawValues(raw_values);

          		for( int j=0; j<9; j++ )
          		{
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 0) & 0xFF) );
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8000fcc:	47a0      	blx	r4
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 8) & 0xFF) );
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 8000fd4:	47a0      	blx	r4
      		{
          		Hw_IMU_FreeIMU_getRawValues(raw_values);

          		for( int j=0; j<9; j++ )
          		{
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 0) & 0xFF) );
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 8000fdc:	47a0      	blx	r4
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 8) & 0xFF) );
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
 8000fe4:	47a0      	blx	r4
      		{
          		Hw_IMU_FreeIMU_getRawValues(raw_values);

          		for( int j=0; j<9; j++ )
          		{
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 0) & 0xFF) );
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8000fec:	47a0      	blx	r4
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 8) & 0xFF) );
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f89d 1035 	ldrb.w	r1, [sp, #53]	; 0x35
 8000ff4:	47a0      	blx	r4
      		{
          		Hw_IMU_FreeIMU_getRawValues(raw_values);

          		for( int j=0; j<9; j++ )
          		{
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 0) & 0xFF) );
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8000ffc:	47a0      	blx	r4
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 8) & 0xFF) );
 8000ffe:	2000      	movs	r0, #0
 8001000:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 8001004:	47a0      	blx	r4
      		{
          		Hw_IMU_FreeIMU_getRawValues(raw_values);

          		for( int j=0; j<9; j++ )
          		{
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 0) & 0xFF) );
 8001006:	2000      	movs	r0, #0
 8001008:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800100c:	47a0      	blx	r4
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 8) & 0xFF) );
 800100e:	2000      	movs	r0, #0
 8001010:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8001014:	47a0      	blx	r4
      		{
          		Hw_IMU_FreeIMU_getRawValues(raw_values);

          		for( int j=0; j<9; j++ )
          		{
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 0) & 0xFF) );
 8001016:	2000      	movs	r0, #0
 8001018:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800101c:	47a0      	blx	r4
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 8) & 0xFF) );
 800101e:	2000      	movs	r0, #0
 8001020:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
 8001024:	47a0      	blx	r4
      		{
          		Hw_IMU_FreeIMU_getRawValues(raw_values);

          		for( int j=0; j<9; j++ )
          		{
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 0) & 0xFF) );
 8001026:	2000      	movs	r0, #0
 8001028:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800102c:	47a0      	blx	r4
          			Hw_Uart_Putch(HW_UART_COM1, (u8)((raw_values[j] >> 8) & 0xFF) );
 800102e:	2000      	movs	r0, #0
 8001030:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
 8001034:	47a0      	blx	r4

          			//print_byte( raw_values[i] >> 16 );
          			//print_byte( raw_values[i] >> 24 );          			
          		}
        		//Lb_printf("\r\n");
        		Hw_Uart_Putch(HW_UART_COM1, 0x01 );
 8001036:	2000      	movs	r0, #0
 8001038:	2101      	movs	r1, #1
 800103a:	47a0      	blx	r4
        		Hw_Uart_Putch(HW_UART_COM1, 0x01 );
 800103c:	2000      	movs	r0, #0
 800103e:	2101      	movs	r1, #1
 8001040:	47a0      	blx	r4

        		Hw_Wait_ms(10);
 8001042:	200a      	movs	r0, #10
 8001044:	47c0      	blx	r8
    	{
    		uint8_t count = get_byte();

    		//int count = 50;

      		for(uint8_t i=0; i<count; i++) 
 8001046:	1c6b      	adds	r3, r5, #1
 8001048:	b2dd      	uxtb	r5, r3
 800104a:	455d      	cmp	r5, fp
 800104c:	d1a9      	bne.n	8000fa2 <main+0x52>
	Ap_GLcdMenu_ExeCmd();    


    while(1)
    {
    	key = get_byte();
 800104e:	47b8      	blx	r7

    	if( key == 'r' )
 8001050:	2872      	cmp	r0, #114	; 0x72
 8001052:	d19d      	bne.n	8000f90 <main+0x40>
    	{
    		Hw_IMU_FreeIMU_getRawValues(raw_values);
 8001054:	a809      	add	r0, sp, #36	; 0x24
 8001056:	47b0      	blx	r6

    		Lb_printf("%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,\n", raw_values[0], raw_values[1], raw_values[2], raw_values[3], raw_values[4], raw_values[5], raw_values[6], raw_values[7], raw_values[8], raw_values[9], raw_values[10]);
 8001058:	980c      	ldr	r0, [sp, #48]	; 0x30
 800105a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800105c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800105e:	9000      	str	r0, [sp, #0]
 8001060:	9101      	str	r1, [sp, #4]
 8001062:	9202      	str	r2, [sp, #8]
 8001064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001066:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001068:	9912      	ldr	r1, [sp, #72]	; 0x48
 800106a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800106c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800106e:	9303      	str	r3, [sp, #12]
 8001070:	9005      	str	r0, [sp, #20]
 8001072:	9504      	str	r5, [sp, #16]
 8001074:	9106      	str	r1, [sp, #24]
 8001076:	9207      	str	r2, [sp, #28]
 8001078:	ab09      	add	r3, sp, #36	; 0x24
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <main+0x160>)
 800107c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800107e:	47c8      	blx	r9
 8001080:	e783      	b.n	8000f8a <main+0x3a>
    	}

    	if( key == 'v' )
    	{
    		Hw_IMU_FreeIMU_getRawValues(raw_values);
 8001082:	a809      	add	r0, sp, #36	; 0x24
 8001084:	47b0      	blx	r6

    		Lb_printf("Baram \n");
 8001086:	480b      	ldr	r0, [pc, #44]	; (80010b4 <main+0x164>)
 8001088:	47c8      	blx	r9
 800108a:	e77e      	b.n	8000f8a <main+0x3a>
 800108c:	080026ad 	.word	0x080026ad
 8001090:	080010c1 	.word	0x080010c1
 8001094:	08002ea1 	.word	0x08002ea1
 8001098:	08000f41 	.word	0x08000f41
 800109c:	08002ec1 	.word	0x08002ec1
 80010a0:	08001199 	.word	0x08001199
 80010a4:	08002921 	.word	0x08002921
 80010a8:	080045c9 	.word	0x080045c9
 80010ac:	080028c9 	.word	0x080028c9
 80010b0:	080082d4 	.word	0x080082d4
 80010b4:	080082f8 	.word	0x080082f8
 80010b8:	0800203d 	.word	0x0800203d
 80010bc:	08002785 	.word	0x08002785

080010c0 <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <Ap_GLcdMenu_ShowMenu>:
	 WORK    : 
	 ARG     : void
	 RET     : void
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
 80010c4:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
 80010c6:	f248 3000 	movw	r0, #33536	; 0x8300
 80010ca:	f242 043d 	movw	r4, #8253	; 0x203d
	Lb_printf("*******************************************************\n");
 80010ce:	f248 3504 	movw	r5, #33540	; 0x8304
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 80010d2:	f6c0 0400 	movt	r4, #2048	; 0x800
	Lb_printf("*******************************************************\n");
 80010d6:	f6c0 0500 	movt	r5, #2048	; 0x800
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 80010da:	f6c0 0000 	movt	r0, #2048	; 0x800
 80010de:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80010e0:	4628      	mov	r0, r5
 80010e2:	47a0      	blx	r4
	Lb_printf("                      MPU6050                          \n");
 80010e4:	f248 3040 	movw	r0, #33600	; 0x8340
 80010e8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80010ec:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80010ee:	4628      	mov	r0, r5
 80010f0:	47a0      	blx	r4
	Lb_printf("* 1. LCD Clear                                        *\n");
 80010f2:	f248 307c 	movw	r0, #33660	; 0x837c
 80010f6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80010fa:	47a0      	blx	r4
	Lb_printf("* 2. Show Acc                                         *\n");
 80010fc:	f248 30b8 	movw	r0, #33720	; 0x83b8
 8001100:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001104:	47a0      	blx	r4
	Lb_printf("* 3. Show MPU6050 Regs                                *\n");
 8001106:	f248 30f4 	movw	r0, #33780	; 0x83f4
 800110a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800110e:	47a0      	blx	r4
	Lb_printf("* 4. Sonic                                            *\n");
 8001110:	f248 4030 	movw	r0, #33840	; 0x8430
 8001114:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001118:	47a0      	blx	r4
	Lb_printf("* 5. Show Compass                                     *\n");
 800111a:	f248 406c 	movw	r0, #33900	; 0x846c
 800111e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001122:	47a0      	blx	r4
	Lb_printf("* 6. Show HMC5883 Regs                                *\n");
 8001124:	f248 40a8 	movw	r0, #33960	; 0x84a8
 8001128:	f6c0 0000 	movt	r0, #2048	; 0x800
 800112c:	47a0      	blx	r4
	Lb_printf("* 7. Show IMU                                         *\n");
 800112e:	f248 40e4 	movw	r0, #34020	; 0x84e4
 8001132:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001136:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 8001138:	f248 5020 	movw	r0, #34080	; 0x8520
 800113c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001140:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 8001142:	f248 505c 	movw	r0, #34140	; 0x855c
 8001146:	f6c0 0000 	movt	r0, #2048	; 0x800
 800114a:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 800114c:	f248 5098 	movw	r0, #34200	; 0x8598
 8001150:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001154:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8001156:	4628      	mov	r0, r5
 8001158:	47a0      	blx	r4
	Lb_printf("\n");
 800115a:	f248 7064 	movw	r0, #34660	; 0x8764
 800115e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001162:	47a0      	blx	r4
 8001164:	bd38      	pop	{r3, r4, r5, pc}
 8001166:	bf00      	nop

08001168 <Ap_GLcdMenu_GetCmd>:
	 ARG     : void
	 RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_GetCmd(void)
{
 8001168:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 800116a:	f248 50d4 	movw	r0, #34260	; 0x85d4
 800116e:	f242 043d 	movw	r4, #8253	; 0x203d
 8001172:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001176:	f6c0 0000 	movt	r0, #2048	; 0x800
 800117a:	47a0      	blx	r4

	key=get_byte();
 800117c:	f642 1321 	movw	r3, #10529	; 0x2921
 8001180:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001184:	4798      	blx	r3
 8001186:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 8001188:	f248 7064 	movw	r0, #34660	; 0x8764
 800118c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001190:	47a0      	blx	r4
	
	return key;
}
 8001192:	4628      	mov	r0, r5
 8001194:	bd38      	pop	{r3, r4, r5, pc}
 8001196:	bf00      	nop

08001198 <Ap_GLcdMenu_ExeCmd>:
	 ARG     : void
	 RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 8001198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}



	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		
 800119c:	f241 01c5 	movw	r1, #4293	; 0x10c5
	 ARG     : void
	 RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 80011a0:	b0a1      	sub	sp, #132	; 0x84



	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		
 80011a2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80011a6:	4788      	blx	r1

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
 80011a8:	2000      	movs	r0, #0
 80011aa:	4601      	mov	r1, r0
 80011ac:	4aa9      	ldr	r2, [pc, #676]	; (8001454 <Ap_GLcdMenu_ExeCmd+0x2bc>)
 80011ae:	4baa      	ldr	r3, [pc, #680]	; (8001458 <Ap_GLcdMenu_ExeCmd+0x2c0>)
		Hw_N5110G_DrawRequest();
 80011b0:	f8df 8318 	ldr.w	r8, [pc, #792]	; 80014cc <Ap_GLcdMenu_ExeCmd+0x334>

	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
 80011b4:	4798      	blx	r3
		Hw_N5110G_DrawRequest();
 80011b6:	47c0      	blx	r8
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80011b8:	f8df 9314 	ldr.w	r9, [pc, #788]	; 80014d0 <Ap_GLcdMenu_ExeCmd+0x338>
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80011bc:	4ca7      	ldr	r4, [pc, #668]	; (800145c <Ap_GLcdMenu_ExeCmd+0x2c4>)

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
		Hw_N5110G_DrawRequest();
	}

	while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 80011be:	f241 1069 	movw	r0, #4457	; 0x1169
 80011c2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80011c6:	4780      	blx	r0
 80011c8:	4602      	mov	r2, r0
 80011ca:	2800      	cmp	r0, #0
 80011cc:	f000 830b 	beq.w	80017e6 <Ap_GLcdMenu_ExeCmd+0x64e>
	{
		switch(key)
 80011d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80011d4:	293c      	cmp	r1, #60	; 0x3c
 80011d6:	d8f2      	bhi.n	80011be <Ap_GLcdMenu_ExeCmd+0x26>
 80011d8:	a301      	add	r3, pc, #4	; (adr r3, 80011e0 <Ap_GLcdMenu_ExeCmd+0x48>)
 80011da:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80011de:	bf00      	nop
 80011e0:	080017c9 	.word	0x080017c9
 80011e4:	080016cb 	.word	0x080016cb
 80011e8:	08001647 	.word	0x08001647
 80011ec:	08001623 	.word	0x08001623
 80011f0:	080015c1 	.word	0x080015c1
 80011f4:	080014d5 	.word	0x080014d5
 80011f8:	080013db 	.word	0x080013db
 80011fc:	080012d5 	.word	0x080012d5
 8001200:	080011bf 	.word	0x080011bf
 8001204:	080011bf 	.word	0x080011bf
 8001208:	080011bf 	.word	0x080011bf
 800120c:	080011bf 	.word	0x080011bf
 8001210:	080011bf 	.word	0x080011bf
 8001214:	080011bf 	.word	0x080011bf
 8001218:	080011bf 	.word	0x080011bf
 800121c:	080011bf 	.word	0x080011bf
 8001220:	080011bf 	.word	0x080011bf
 8001224:	080011bf 	.word	0x080011bf
 8001228:	080011bf 	.word	0x080011bf
 800122c:	080011bf 	.word	0x080011bf
 8001230:	080011bf 	.word	0x080011bf
 8001234:	080011bf 	.word	0x080011bf
 8001238:	080011bf 	.word	0x080011bf
 800123c:	080011bf 	.word	0x080011bf
 8001240:	080011bf 	.word	0x080011bf
 8001244:	080011bf 	.word	0x080011bf
 8001248:	080011bf 	.word	0x080011bf
 800124c:	080011bf 	.word	0x080011bf
 8001250:	080017d3 	.word	0x080017d3
 8001254:	080011bf 	.word	0x080011bf
 8001258:	080011bf 	.word	0x080011bf
 800125c:	080011bf 	.word	0x080011bf
 8001260:	080011bf 	.word	0x080011bf
 8001264:	080011bf 	.word	0x080011bf
 8001268:	080011bf 	.word	0x080011bf
 800126c:	080011bf 	.word	0x080011bf
 8001270:	080011bf 	.word	0x080011bf
 8001274:	080011bf 	.word	0x080011bf
 8001278:	080011bf 	.word	0x080011bf
 800127c:	080011bf 	.word	0x080011bf
 8001280:	080011bf 	.word	0x080011bf
 8001284:	080011bf 	.word	0x080011bf
 8001288:	080011bf 	.word	0x080011bf
 800128c:	080011bf 	.word	0x080011bf
 8001290:	080011bf 	.word	0x080011bf
 8001294:	080011bf 	.word	0x080011bf
 8001298:	080011bf 	.word	0x080011bf
 800129c:	080011bf 	.word	0x080011bf
 80012a0:	080011bf 	.word	0x080011bf
 80012a4:	080011bf 	.word	0x080011bf
 80012a8:	080011bf 	.word	0x080011bf
 80012ac:	080011bf 	.word	0x080011bf
 80012b0:	080011bf 	.word	0x080011bf
 80012b4:	080011bf 	.word	0x080011bf
 80012b8:	080011bf 	.word	0x080011bf
 80012bc:	080011bf 	.word	0x080011bf
 80012c0:	080011bf 	.word	0x080011bf
 80012c4:	080011bf 	.word	0x080011bf
 80012c8:	080011bf 	.word	0x080011bf
 80012cc:	080011bf 	.word	0x080011bf
 80012d0:	080017d3 	.word	0x080017d3
 80012d4:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 80014a0 <Ap_GLcdMenu_ExeCmd+0x308>
		   case '8':
		   		//Hw_IMU_FreeIMU_zeroGyro();

				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 80012d8:	4f61      	ldr	r7, [pc, #388]	; (8001460 <Ap_GLcdMenu_ExeCmd+0x2c8>)
 80012da:	e016      	b.n	800130a <Ap_GLcdMenu_ExeCmd+0x172>

					x = HW_N5110G_WIDTH/2  - (IMU_Data.X_Angle-180);
					y = HW_N5110G_HEIGHT/2 - (IMU_Data.Y_Angle-180);

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
					if( x < 3 )                x = 3;
 80012dc:	2603      	movs	r6, #3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	f300 8284 	bgt.w	80017ec <Ap_GLcdMenu_ExeCmd+0x654>
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 80012e4:	b202      	sxth	r2, r0
 80012e6:	2a2c      	cmp	r2, #44	; 0x2c
 80012e8:	dc75      	bgt.n	80013d6 <Ap_GLcdMenu_ExeCmd+0x23e>
					if( y < 3 )                 y = 3;
 80012ea:	2503      	movs	r5, #3
 80012ec:	2a02      	cmp	r2, #2
 80012ee:	f300 8280 	bgt.w	80017f2 <Ap_GLcdMenu_ExeCmd+0x65a>

					Hw_N5110G_Clear();                                  
 80012f2:	485c      	ldr	r0, [pc, #368]	; (8001464 <Ap_GLcdMenu_ExeCmd+0x2cc>)
 80012f4:	4780      	blx	r0
					Hw_N5110G_DrawCircle(  x , y, 3, 0 );                           
 80012f6:	4629      	mov	r1, r5
 80012f8:	4630      	mov	r0, r6
 80012fa:	2203      	movs	r2, #3
 80012fc:	2300      	movs	r3, #0
 80012fe:	4d5a      	ldr	r5, [pc, #360]	; (8001468 <Ap_GLcdMenu_ExeCmd+0x2d0>)
 8001300:	47a8      	blx	r5
					Hw_N5110G_DrawRequest();
 8001302:	47c0      	blx	r8

					Hw_Wait_ms(10);
 8001304:	200a      	movs	r0, #10
 8001306:	4959      	ldr	r1, [pc, #356]	; (800146c <Ap_GLcdMenu_ExeCmd+0x2d4>)
 8001308:	4788      	blx	r1
			   break;  

		   case '8':
		   		//Hw_IMU_FreeIMU_zeroGyro();

				while( get_byte_check() == 0 )
 800130a:	47d0      	blx	sl
 800130c:	2800      	cmp	r0, #0
 800130e:	f47f af56 	bne.w	80011be <Ap_GLcdMenu_ExeCmd+0x26>
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8001312:	47b8      	blx	r7

					Ret = Hw_IMU_Update( &IMU_Data, 10 );
 8001314:	f244 6699 	movw	r6, #18073	; 0x4699
 8001318:	210a      	movs	r1, #10
		   case '8':
		   		//Hw_IMU_FreeIMU_zeroGyro();

				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 800131a:	4605      	mov	r5, r0

					Ret = Hw_IMU_Update( &IMU_Data, 10 );
 800131c:	f6c0 0600 	movt	r6, #2048	; 0x800
 8001320:	a80f      	add	r0, sp, #60	; 0x3c
 8001322:	47b0      	blx	r6

					Lb_printf("Time %05d ", (u16)(Hw_Timer_Get_u16Count_Usec() - TimeStart) );
 8001324:	47b8      	blx	r7
 8001326:	1b43      	subs	r3, r0, r5
 8001328:	b299      	uxth	r1, r3
 800132a:	4851      	ldr	r0, [pc, #324]	; (8001470 <Ap_GLcdMenu_ExeCmd+0x2d8>)
 800132c:	47a0      	blx	r4

					Lb_printf("GX %d \t", IMU_Data.X_Gyro - gyro_off_x );
 800132e:	4851      	ldr	r0, [pc, #324]	; (8001474 <Ap_GLcdMenu_ExeCmd+0x2dc>)
 8001330:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8001334:	f9b0 1000 	ldrsh.w	r1, [r0]
					Lb_printf("GY %d \t", IMU_Data.Y_Gyro - gyro_off_y );
 8001338:	4e4f      	ldr	r6, [pc, #316]	; (8001478 <Ap_GLcdMenu_ExeCmd+0x2e0>)

					Ret = Hw_IMU_Update( &IMU_Data, 10 );

					Lb_printf("Time %05d ", (u16)(Hw_Timer_Get_u16Count_Usec() - TimeStart) );

					Lb_printf("GX %d \t", IMU_Data.X_Gyro - gyro_off_x );
 800133a:	1a51      	subs	r1, r2, r1
 800133c:	484f      	ldr	r0, [pc, #316]	; (800147c <Ap_GLcdMenu_ExeCmd+0x2e4>)
 800133e:	47a0      	blx	r4
					Lb_printf("GY %d \t", IMU_Data.Y_Gyro - gyro_off_y );
 8001340:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001344:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8001348:	484d      	ldr	r0, [pc, #308]	; (8001480 <Ap_GLcdMenu_ExeCmd+0x2e8>)
 800134a:	1ae9      	subs	r1, r5, r3
 800134c:	47a0      	blx	r4
					Lb_printf("GZ %d \t", IMU_Data.Z_Gyro - gyro_off_z );
 800134e:	484d      	ldr	r0, [pc, #308]	; (8001484 <Ap_GLcdMenu_ExeCmd+0x2ec>)
 8001350:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8001354:	f9b0 1000 	ldrsh.w	r1, [r0]
 8001358:	484b      	ldr	r0, [pc, #300]	; (8001488 <Ap_GLcdMenu_ExeCmd+0x2f0>)
 800135a:	1a51      	subs	r1, r2, r1

					Lb_printf("AngX %03d %03d  \t", (s16)IMU_Data.X_AccAngle, (s16)IMU_Data.X_Angle );
 800135c:	4d4b      	ldr	r5, [pc, #300]	; (800148c <Ap_GLcdMenu_ExeCmd+0x2f4>)

					Lb_printf("Time %05d ", (u16)(Hw_Timer_Get_u16Count_Usec() - TimeStart) );

					Lb_printf("GX %d \t", IMU_Data.X_Gyro - gyro_off_x );
					Lb_printf("GY %d \t", IMU_Data.Y_Gyro - gyro_off_y );
					Lb_printf("GZ %d \t", IMU_Data.Z_Gyro - gyro_off_z );
 800135e:	47a0      	blx	r4

					Lb_printf("AngX %03d %03d  \t", (s16)IMU_Data.X_AccAngle, (s16)IMU_Data.X_Angle );
 8001360:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001362:	47a8      	blx	r5
 8001364:	b206      	sxth	r6, r0
 8001366:	981d      	ldr	r0, [sp, #116]	; 0x74
 8001368:	47a8      	blx	r5
 800136a:	4631      	mov	r1, r6
 800136c:	b202      	sxth	r2, r0
 800136e:	4848      	ldr	r0, [pc, #288]	; (8001490 <Ap_GLcdMenu_ExeCmd+0x2f8>)
 8001370:	47a0      	blx	r4
					Lb_printf("AngY %03d %03d  \t", (s16)IMU_Data.Y_AccAngle, (s16)IMU_Data.Y_Angle );
 8001372:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001374:	47a8      	blx	r5
 8001376:	b206      	sxth	r6, r0
 8001378:	981e      	ldr	r0, [sp, #120]	; 0x78
 800137a:	47a8      	blx	r5
 800137c:	4631      	mov	r1, r6
 800137e:	b202      	sxth	r2, r0
 8001380:	4844      	ldr	r0, [pc, #272]	; (8001494 <Ap_GLcdMenu_ExeCmd+0x2fc>)
 8001382:	47a0      	blx	r4
					Lb_printf("AngZ %03d %03d\n", (s16)IMU_Data.Z_AccAngle, (s16)IMU_Data.Z_Angle );
 8001384:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001386:	47a8      	blx	r5
 8001388:	b206      	sxth	r6, r0
 800138a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800138c:	47a8      	blx	r5
 800138e:	4631      	mov	r1, r6
 8001390:	b202      	sxth	r2, r0
 8001392:	4841      	ldr	r0, [pc, #260]	; (8001498 <Ap_GLcdMenu_ExeCmd+0x300>)
 8001394:	47a0      	blx	r4



					x = HW_N5110G_WIDTH/2  - (IMU_Data.X_Angle-180);
 8001396:	2100      	movs	r1, #0
 8001398:	4e40      	ldr	r6, [pc, #256]	; (800149c <Ap_GLcdMenu_ExeCmd+0x304>)
 800139a:	f2c4 3134 	movt	r1, #17204	; 0x4334
 800139e:	981d      	ldr	r0, [sp, #116]	; 0x74
 80013a0:	47b0      	blx	r6
 80013a2:	4601      	mov	r1, r0
 80013a4:	2000      	movs	r0, #0
 80013a6:	f2c4 2028 	movt	r0, #16936	; 0x4228
 80013aa:	47b0      	blx	r6
 80013ac:	47a8      	blx	r5
					y = HW_N5110G_HEIGHT/2 - (IMU_Data.Y_Angle-180);
 80013ae:	2100      	movs	r1, #0
					Lb_printf("AngY %03d %03d  \t", (s16)IMU_Data.Y_AccAngle, (s16)IMU_Data.Y_Angle );
					Lb_printf("AngZ %03d %03d\n", (s16)IMU_Data.Z_AccAngle, (s16)IMU_Data.Z_Angle );



					x = HW_N5110G_WIDTH/2  - (IMU_Data.X_Angle-180);
 80013b0:	4683      	mov	fp, r0
					y = HW_N5110G_HEIGHT/2 - (IMU_Data.Y_Angle-180);
 80013b2:	f2c4 3134 	movt	r1, #17204	; 0x4334
 80013b6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80013b8:	47b0      	blx	r6
 80013ba:	4601      	mov	r1, r0
 80013bc:	2000      	movs	r0, #0
 80013be:	f2c4 10c0 	movt	r0, #16832	; 0x41c0
 80013c2:	47b0      	blx	r6
 80013c4:	47a8      	blx	r5

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80013c6:	fa0f f38b 	sxth.w	r3, fp
 80013ca:	2b50      	cmp	r3, #80	; 0x50
 80013cc:	dd86      	ble.n	80012dc <Ap_GLcdMenu_ExeCmd+0x144>
					if( x < 3 )                x = 3;
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 80013ce:	b202      	sxth	r2, r0


					x = HW_N5110G_WIDTH/2  - (IMU_Data.X_Angle-180);
					y = HW_N5110G_HEIGHT/2 - (IMU_Data.Y_Angle-180);

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80013d0:	2650      	movs	r6, #80	; 0x50
					if( x < 3 )                x = 3;
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 80013d2:	2a2c      	cmp	r2, #44	; 0x2c
 80013d4:	dd89      	ble.n	80012ea <Ap_GLcdMenu_ExeCmd+0x152>
 80013d6:	252c      	movs	r5, #44	; 0x2c
 80013d8:	e78b      	b.n	80012f2 <Ap_GLcdMenu_ExeCmd+0x15a>
 80013da:	4e31      	ldr	r6, [pc, #196]	; (80014a0 <Ap_GLcdMenu_ExeCmd+0x308>)

		   case '7':

				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 80013dc:	4d20      	ldr	r5, [pc, #128]	; (8001460 <Ap_GLcdMenu_ExeCmd+0x2c8>)

					Ret = Hw_IMU_GetData( &IMU_Data );
 80013de:	4f31      	ldr	r7, [pc, #196]	; (80014a4 <Ap_GLcdMenu_ExeCmd+0x30c>)
 80013e0:	e033      	b.n	800144a <Ap_GLcdMenu_ExeCmd+0x2b2>

		   case '7':

				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 80013e2:	47a8      	blx	r5
 80013e4:	4682      	mov	sl, r0

					Ret = Hw_IMU_GetData( &IMU_Data );
 80013e6:	a80f      	add	r0, sp, #60	; 0x3c
 80013e8:	47b8      	blx	r7

					Lb_printf("Time %d ", Hw_Timer_Get_u16Count_Usec() - TimeStart );
 80013ea:	47a8      	blx	r5
 80013ec:	ebca 0100 	rsb	r1, sl, r0
 80013f0:	482d      	ldr	r0, [pc, #180]	; (80014a8 <Ap_GLcdMenu_ExeCmd+0x310>)
 80013f2:	47a0      	blx	r4

					Lb_printf("EN %d ", IMU_Data.Enable_Acc );
 80013f4:	482d      	ldr	r0, [pc, #180]	; (80014ac <Ap_GLcdMenu_ExeCmd+0x314>)
 80013f6:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80013fa:	47a0      	blx	r4
					Lb_printf("AX %d ", IMU_Data.X_Acc );
 80013fc:	482c      	ldr	r0, [pc, #176]	; (80014b0 <Ap_GLcdMenu_ExeCmd+0x318>)
 80013fe:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8001402:	47a0      	blx	r4
					Lb_printf("AY %d ", IMU_Data.Y_Acc );
 8001404:	482b      	ldr	r0, [pc, #172]	; (80014b4 <Ap_GLcdMenu_ExeCmd+0x31c>)
 8001406:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800140a:	47a0      	blx	r4
					Lb_printf("AZ %d ", IMU_Data.Z_Acc );
 800140c:	482a      	ldr	r0, [pc, #168]	; (80014b8 <Ap_GLcdMenu_ExeCmd+0x320>)
 800140e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8001412:	47a0      	blx	r4

					Lb_printf("EN %d ", IMU_Data.Enable_Temp );
 8001414:	4825      	ldr	r0, [pc, #148]	; (80014ac <Ap_GLcdMenu_ExeCmd+0x314>)
 8001416:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800141a:	47a0      	blx	r4
					Lb_printf("TE %d ", IMU_Data.Temp );
 800141c:	4827      	ldr	r0, [pc, #156]	; (80014bc <Ap_GLcdMenu_ExeCmd+0x324>)
 800141e:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 8001422:	47a0      	blx	r4

					Lb_printf("EN %d ", IMU_Data.Enable_Compass );
 8001424:	4821      	ldr	r0, [pc, #132]	; (80014ac <Ap_GLcdMenu_ExeCmd+0x314>)
 8001426:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800142a:	47a0      	blx	r4
					Lb_printf("CX %d ", IMU_Data.X_Compass );
 800142c:	4824      	ldr	r0, [pc, #144]	; (80014c0 <Ap_GLcdMenu_ExeCmd+0x328>)
 800142e:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8001432:	47a0      	blx	r4
					Lb_printf("CY %d ", IMU_Data.Y_Compass );
 8001434:	4823      	ldr	r0, [pc, #140]	; (80014c4 <Ap_GLcdMenu_ExeCmd+0x32c>)
 8001436:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	; 0x50
 800143a:	47a0      	blx	r4
					Lb_printf("CZ %d\n", IMU_Data.Z_Compass );
 800143c:	4822      	ldr	r0, [pc, #136]	; (80014c8 <Ap_GLcdMenu_ExeCmd+0x330>)
 800143e:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
 8001442:	47a0      	blx	r4

					Hw_Wait_ms(100);
 8001444:	2064      	movs	r0, #100	; 0x64
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <Ap_GLcdMenu_ExeCmd+0x2d4>)
 8001448:	4798      	blx	r3
		   		}
			   break;  

		   case '7':

				while( get_byte_check() == 0 )
 800144a:	47b0      	blx	r6
 800144c:	2800      	cmp	r0, #0
 800144e:	d0c8      	beq.n	80013e2 <Ap_GLcdMenu_ExeCmd+0x24a>
 8001450:	e6b5      	b.n	80011be <Ap_GLcdMenu_ExeCmd+0x26>
 8001452:	bf00      	nop
 8001454:	080085d8 	.word	0x080085d8
 8001458:	0800348d 	.word	0x0800348d
 800145c:	0800203d 	.word	0x0800203d
 8001460:	08002ee9 	.word	0x08002ee9
 8001464:	0800333d 	.word	0x0800333d
 8001468:	080034fd 	.word	0x080034fd
 800146c:	08002785 	.word	0x08002785
 8001470:	080086b0 	.word	0x080086b0
 8001474:	20000e38 	.word	0x20000e38
 8001478:	20000dcc 	.word	0x20000dcc
 800147c:	080086bc 	.word	0x080086bc
 8001480:	080086c4 	.word	0x080086c4
 8001484:	20000e48 	.word	0x20000e48
 8001488:	080086cc 	.word	0x080086cc
 800148c:	08000ef5 	.word	0x08000ef5
 8001490:	080086d4 	.word	0x080086d4
 8001494:	080086e8 	.word	0x080086e8
 8001498:	080086fc 	.word	0x080086fc
 800149c:	08000955 	.word	0x08000955
 80014a0:	08002931 	.word	0x08002931
 80014a4:	08004479 	.word	0x08004479
 80014a8:	080085f4 	.word	0x080085f4
 80014ac:	08008698 	.word	0x08008698
 80014b0:	08008600 	.word	0x08008600
 80014b4:	08008608 	.word	0x08008608
 80014b8:	08008610 	.word	0x08008610
 80014bc:	080086a0 	.word	0x080086a0
 80014c0:	08008640 	.word	0x08008640
 80014c4:	08008648 	.word	0x08008648
 80014c8:	080086a8 	.word	0x080086a8
 80014cc:	080034ed 	.word	0x080034ed
 80014d0:	08003d65 	.word	0x08003d65
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80014d4:	a905      	add	r1, sp, #20
 80014d6:	2000      	movs	r0, #0
 80014d8:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80014da:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80014de:	2200      	movs	r2, #0
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80014e0:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80014e2:	487c      	ldr	r0, [pc, #496]	; (80016d4 <Ap_GLcdMenu_ExeCmd+0x53c>)
 80014e4:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80014e6:	a905      	add	r1, sp, #20
 80014e8:	2001      	movs	r0, #1
 80014ea:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80014ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80014f0:	2201      	movs	r2, #1
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80014f2:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80014f4:	4877      	ldr	r0, [pc, #476]	; (80016d4 <Ap_GLcdMenu_ExeCmd+0x53c>)
 80014f6:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80014f8:	a905      	add	r1, sp, #20
 80014fa:	2002      	movs	r0, #2
 80014fc:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80014fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001502:	2202      	movs	r2, #2
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001504:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001506:	4873      	ldr	r0, [pc, #460]	; (80016d4 <Ap_GLcdMenu_ExeCmd+0x53c>)
 8001508:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800150a:	a905      	add	r1, sp, #20
 800150c:	2003      	movs	r0, #3
 800150e:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001510:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001514:	2203      	movs	r2, #3
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001516:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001518:	486e      	ldr	r0, [pc, #440]	; (80016d4 <Ap_GLcdMenu_ExeCmd+0x53c>)
 800151a:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800151c:	a905      	add	r1, sp, #20
 800151e:	2004      	movs	r0, #4
 8001520:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001522:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001526:	2204      	movs	r2, #4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001528:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800152a:	486a      	ldr	r0, [pc, #424]	; (80016d4 <Ap_GLcdMenu_ExeCmd+0x53c>)
 800152c:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800152e:	a905      	add	r1, sp, #20
 8001530:	2005      	movs	r0, #5
 8001532:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001534:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001538:	2205      	movs	r2, #5
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800153a:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800153c:	4865      	ldr	r0, [pc, #404]	; (80016d4 <Ap_GLcdMenu_ExeCmd+0x53c>)
 800153e:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001540:	a905      	add	r1, sp, #20
 8001542:	2006      	movs	r0, #6
 8001544:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001546:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800154a:	2206      	movs	r2, #6
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800154c:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800154e:	4861      	ldr	r0, [pc, #388]	; (80016d4 <Ap_GLcdMenu_ExeCmd+0x53c>)
 8001550:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001552:	a905      	add	r1, sp, #20
 8001554:	2007      	movs	r0, #7
 8001556:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001558:	f89d 3014 	ldrb.w	r3, [sp, #20]
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800155c:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800155e:	2207      	movs	r2, #7
 8001560:	485c      	ldr	r0, [pc, #368]	; (80016d4 <Ap_GLcdMenu_ExeCmd+0x53c>)
 8001562:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001564:	a905      	add	r1, sp, #20
 8001566:	2008      	movs	r0, #8
 8001568:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800156a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800156e:	2208      	movs	r2, #8
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001570:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001572:	4858      	ldr	r0, [pc, #352]	; (80016d4 <Ap_GLcdMenu_ExeCmd+0x53c>)
 8001574:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001576:	a905      	add	r1, sp, #20
 8001578:	2009      	movs	r0, #9
 800157a:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800157c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001580:	2209      	movs	r2, #9
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001582:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001584:	4853      	ldr	r0, [pc, #332]	; (80016d4 <Ap_GLcdMenu_ExeCmd+0x53c>)
 8001586:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001588:	a905      	add	r1, sp, #20
 800158a:	200a      	movs	r0, #10
 800158c:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800158e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001592:	220a      	movs	r2, #10
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001594:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001596:	484f      	ldr	r0, [pc, #316]	; (80016d4 <Ap_GLcdMenu_ExeCmd+0x53c>)
 8001598:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800159a:	a905      	add	r1, sp, #20
 800159c:	200b      	movs	r0, #11
 800159e:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80015a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80015a4:	220b      	movs	r2, #11
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80015a6:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80015a8:	484a      	ldr	r0, [pc, #296]	; (80016d4 <Ap_GLcdMenu_ExeCmd+0x53c>)
 80015aa:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80015ac:	a905      	add	r1, sp, #20
 80015ae:	200c      	movs	r0, #12
 80015b0:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80015b2:	220c      	movs	r2, #12
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80015b4:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80015b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80015ba:	4846      	ldr	r0, [pc, #280]	; (80016d4 <Ap_GLcdMenu_ExeCmd+0x53c>)
 80015bc:	47a0      	blx	r4
 80015be:	e5fe      	b.n	80011be <Ap_GLcdMenu_ExeCmd+0x26>
 80015c0:	4f45      	ldr	r7, [pc, #276]	; (80016d8 <Ap_GLcdMenu_ExeCmd+0x540>)
			   break;  

		   case '5':
				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 80015c2:	4e46      	ldr	r6, [pc, #280]	; (80016dc <Ap_GLcdMenu_ExeCmd+0x544>)

					Ret = Hw_HMC5883_GetData( &HMC5883_Data );
 80015c4:	f8df a150 	ldr.w	sl, [pc, #336]	; 8001718 <Ap_GLcdMenu_ExeCmd+0x580>
 80015c8:	e026      	b.n	8001618 <Ap_GLcdMenu_ExeCmd+0x480>
			   break;  

		   case '5':
				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 80015ca:	47b0      	blx	r6
 80015cc:	4683      	mov	fp, r0

					Ret = Hw_HMC5883_GetData( &HMC5883_Data );
 80015ce:	a80a      	add	r0, sp, #40	; 0x28
 80015d0:	47d0      	blx	sl

					Lb_printf("Time %d ", Hw_Timer_Get_u16Count_Usec() - TimeStart );
 80015d2:	47b0      	blx	r6
 80015d4:	ebcb 0100 	rsb	r1, fp, r0
 80015d8:	4841      	ldr	r0, [pc, #260]	; (80016e0 <Ap_GLcdMenu_ExeCmd+0x548>)
 80015da:	47a0      	blx	r4

					Lb_printf("CX %d ", HMC5883_Data.X_Compass );
 80015dc:	4841      	ldr	r0, [pc, #260]	; (80016e4 <Ap_GLcdMenu_ExeCmd+0x54c>)
 80015de:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80015e2:	47a0      	blx	r4
					Lb_printf("CY %d ", HMC5883_Data.Y_Compass );
 80015e4:	4840      	ldr	r0, [pc, #256]	; (80016e8 <Ap_GLcdMenu_ExeCmd+0x550>)
 80015e6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80015ea:	47a0      	blx	r4
					Lb_printf("CZ %d ", HMC5883_Data.Z_Compass );
 80015ec:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 80015f0:	483e      	ldr	r0, [pc, #248]	; (80016ec <Ap_GLcdMenu_ExeCmd+0x554>)
 80015f2:	47a0      	blx	r4

					Lb_printf("SX %d  ", (s16)HMC5883_Data.X_CompassScale );
 80015f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80015f6:	47a8      	blx	r5
 80015f8:	b201      	sxth	r1, r0
 80015fa:	483d      	ldr	r0, [pc, #244]	; (80016f0 <Ap_GLcdMenu_ExeCmd+0x558>)
 80015fc:	47a0      	blx	r4
					Lb_printf("SY %d  ", (s16)HMC5883_Data.Y_CompassScale );
 80015fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001600:	47a8      	blx	r5
 8001602:	b201      	sxth	r1, r0
 8001604:	483b      	ldr	r0, [pc, #236]	; (80016f4 <Ap_GLcdMenu_ExeCmd+0x55c>)
 8001606:	47a0      	blx	r4
					Lb_printf("SZ %d  \n", (s16)HMC5883_Data.Z_CompassScale );
 8001608:	980e      	ldr	r0, [sp, #56]	; 0x38
 800160a:	47a8      	blx	r5
 800160c:	b201      	sxth	r1, r0
 800160e:	483a      	ldr	r0, [pc, #232]	; (80016f8 <Ap_GLcdMenu_ExeCmd+0x560>)
 8001610:	47a0      	blx	r4

					Hw_Wait_ms(10);
 8001612:	200a      	movs	r0, #10
 8001614:	4a39      	ldr	r2, [pc, #228]	; (80016fc <Ap_GLcdMenu_ExeCmd+0x564>)
 8001616:	4790      	blx	r2

					Lb_printf("CX %d ", HMC5883_Data.X_Compass );
					Lb_printf("CY %d ", HMC5883_Data.Y_Compass );
					Lb_printf("CZ %d ", HMC5883_Data.Z_Compass );

					Lb_printf("SX %d  ", (s16)HMC5883_Data.X_CompassScale );
 8001618:	4d39      	ldr	r5, [pc, #228]	; (8001700 <Ap_GLcdMenu_ExeCmd+0x568>)
					Hw_Wait_ms(100);
				}            	
			   break;  

		   case '5':
				while( get_byte_check() == 0 )
 800161a:	47b8      	blx	r7
 800161c:	2800      	cmp	r0, #0
 800161e:	d0d4      	beq.n	80015ca <Ap_GLcdMenu_ExeCmd+0x432>
 8001620:	e5cd      	b.n	80011be <Ap_GLcdMenu_ExeCmd+0x26>
 8001622:	4e2d      	ldr	r6, [pc, #180]	; (80016d8 <Ap_GLcdMenu_ExeCmd+0x540>)
			   break; 

		   case '4':
				while( get_byte_check() == 0 )
				{
					Lb_printf("L %d  R %d\n", Hw_Sonic_GetDistanceMM(0), Hw_Sonic_GetDistanceMM(1) );
 8001624:	4d37      	ldr	r5, [pc, #220]	; (8001704 <Ap_GLcdMenu_ExeCmd+0x56c>)
					Hw_Wait_ms(100);
 8001626:	4f35      	ldr	r7, [pc, #212]	; (80016fc <Ap_GLcdMenu_ExeCmd+0x564>)
 8001628:	e009      	b.n	800163e <Ap_GLcdMenu_ExeCmd+0x4a6>
			   break; 

		   case '4':
				while( get_byte_check() == 0 )
				{
					Lb_printf("L %d  R %d\n", Hw_Sonic_GetDistanceMM(0), Hw_Sonic_GetDistanceMM(1) );
 800162a:	47a8      	blx	r5
 800162c:	4682      	mov	sl, r0
 800162e:	2001      	movs	r0, #1
 8001630:	47a8      	blx	r5
 8001632:	4651      	mov	r1, sl
 8001634:	4602      	mov	r2, r0
 8001636:	4834      	ldr	r0, [pc, #208]	; (8001708 <Ap_GLcdMenu_ExeCmd+0x570>)
 8001638:	47a0      	blx	r4
					Hw_Wait_ms(100);
 800163a:	2064      	movs	r0, #100	; 0x64
 800163c:	47b8      	blx	r7
					Lb_printf("%02x ", I2C_Data[0]);
				}           						
			   break; 

		   case '4':
				while( get_byte_check() == 0 )
 800163e:	47b0      	blx	r6
 8001640:	2800      	cmp	r0, #0
 8001642:	d0f2      	beq.n	800162a <Ap_GLcdMenu_ExeCmd+0x492>
 8001644:	e5bb      	b.n	80011be <Ap_GLcdMenu_ExeCmd+0x26>
		Hw_N5110G_DrawRequest();
	}

	while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
	{
		switch(key)
 8001646:	f04f 0a00 	mov.w	sl, #0
				break;

		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 800164a:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 800164e:	4f2f      	ldr	r7, [pc, #188]	; (800170c <Ap_GLcdMenu_ExeCmd+0x574>)
 8001650:	f6cc 45cc 	movt	r5, #52428	; 0xcccc

					I2C_Data[0] = 0x00;
 8001654:	4656      	mov	r6, sl
 8001656:	e026      	b.n	80016a6 <Ap_GLcdMenu_ExeCmd+0x50e>
					Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8001658:	a905      	add	r1, sp, #20
 800165a:	fa5f f08a 	uxtb.w	r0, sl
		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);

					I2C_Data[0] = 0x00;
 800165e:	f88d 6014 	strb.w	r6, [sp, #20]
					Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8001662:	47b8      	blx	r7
					Lb_printf("%02x ", I2C_Data[0]);
 8001664:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8001668:	4829      	ldr	r0, [pc, #164]	; (8001710 <Ap_GLcdMenu_ExeCmd+0x578>)
 800166a:	47a0      	blx	r4
				break;

		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 800166c:	fa1f f08b 	uxth.w	r0, fp
 8001670:	fba5 1200 	umull	r1, r2, r5, r0
 8001674:	08d1      	lsrs	r1, r2, #3
 8001676:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800167a:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 800167e:	b282      	uxth	r2, r0
 8001680:	2a00      	cmp	r2, #0
 8001682:	f000 80ac 	beq.w	80017de <Ap_GLcdMenu_ExeCmd+0x646>

					I2C_Data[0] = 0x00;
					Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8001686:	a905      	add	r1, sp, #20
 8001688:	fa5f f08b 	uxtb.w	r0, fp
		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);

					I2C_Data[0] = 0x00;
 800168c:	f88d 6014 	strb.w	r6, [sp, #20]
 8001690:	f10b 0a01 	add.w	sl, fp, #1
					Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8001694:	47b8      	blx	r7
					Lb_printf("%02x ", I2C_Data[0]);
 8001696:	481e      	ldr	r0, [pc, #120]	; (8001710 <Ap_GLcdMenu_ExeCmd+0x578>)
 8001698:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800169c:	47a0      	blx	r4
				}
				
				break;

		   case '3':
				for( i=0; i<=0x75; i++ )
 800169e:	f1ba 0f76 	cmp.w	sl, #118	; 0x76
 80016a2:	f43f ad8c 	beq.w	80011be <Ap_GLcdMenu_ExeCmd+0x26>
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 80016a6:	fa1f f08a 	uxth.w	r0, sl
 80016aa:	fba5 1300 	umull	r1, r3, r5, r0
 80016ae:	08d9      	lsrs	r1, r3, #3
 80016b0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80016b4:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 80016b8:	b283      	uxth	r3, r0
 80016ba:	f10a 0b01 	add.w	fp, sl, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ca      	bne.n	8001658 <Ap_GLcdMenu_ExeCmd+0x4c0>
 80016c2:	4651      	mov	r1, sl
 80016c4:	4813      	ldr	r0, [pc, #76]	; (8001714 <Ap_GLcdMenu_ExeCmd+0x57c>)
 80016c6:	47a0      	blx	r4
 80016c8:	e7c6      	b.n	8001658 <Ap_GLcdMenu_ExeCmd+0x4c0>
 80016ca:	4f03      	ldr	r7, [pc, #12]	; (80016d8 <Ap_GLcdMenu_ExeCmd+0x540>)

		   case '2':
				
				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 80016cc:	4d03      	ldr	r5, [pc, #12]	; (80016dc <Ap_GLcdMenu_ExeCmd+0x544>)

					Ret = Hw_MPU6050_GetData( &MPU6050_Data );
 80016ce:	f8df a04c 	ldr.w	sl, [pc, #76]	; 800171c <Ap_GLcdMenu_ExeCmd+0x584>
 80016d2:	e03c      	b.n	800174e <Ap_GLcdMenu_ExeCmd+0x5b6>
 80016d4:	08008674 	.word	0x08008674
 80016d8:	08002931 	.word	0x08002931
 80016dc:	08002ee9 	.word	0x08002ee9
 80016e0:	080085f4 	.word	0x080085f4
 80016e4:	08008640 	.word	0x08008640
 80016e8:	08008648 	.word	0x08008648
 80016ec:	08008650 	.word	0x08008650
 80016f0:	08008658 	.word	0x08008658
 80016f4:	08008660 	.word	0x08008660
 80016f8:	08008668 	.word	0x08008668
 80016fc:	08002785 	.word	0x08002785
 8001700:	08000ef5 	.word	0x08000ef5
 8001704:	0800417d 	.word	0x0800417d
 8001708:	08008634 	.word	0x08008634
 800170c:	08003d99 	.word	0x08003d99
 8001710:	0800862c 	.word	0x0800862c
 8001714:	08008620 	.word	0x08008620
 8001718:	08004299 	.word	0x08004299
 800171c:	08003fdd 	.word	0x08003fdd
					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
					if( x < 3 )                x = 3;
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 8001720:	b208      	sxth	r0, r1

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
					if( x < 3 )                x = 3;
 8001722:	2a02      	cmp	r2, #2
 8001724:	bfd8      	it	le
 8001726:	2603      	movle	r6, #3
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 8001728:	282c      	cmp	r0, #44	; 0x2c
 800172a:	dc4a      	bgt.n	80017c2 <Ap_GLcdMenu_ExeCmd+0x62a>
					if( y < 3 )                 y = 3;
 800172c:	2802      	cmp	r0, #2
 800172e:	bfcc      	ite	gt
 8001730:	469b      	movgt	fp, r3
 8001732:	f04f 0b03 	movle.w	fp, #3

					Hw_N5110G_Clear();                                  
 8001736:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <Ap_GLcdMenu_ExeCmd+0x660>)
 8001738:	4798      	blx	r3
					Hw_N5110G_DrawCircle(  x , y, 3, 0 );                           
 800173a:	4630      	mov	r0, r6
 800173c:	2203      	movs	r2, #3
 800173e:	4659      	mov	r1, fp
 8001740:	2300      	movs	r3, #0
 8001742:	4e2e      	ldr	r6, [pc, #184]	; (80017fc <Ap_GLcdMenu_ExeCmd+0x664>)
 8001744:	47b0      	blx	r6
					Hw_N5110G_DrawRequest();
 8001746:	47c0      	blx	r8
					Hw_Wait_ms(100);
 8001748:	2064      	movs	r0, #100	; 0x64
 800174a:	4a2d      	ldr	r2, [pc, #180]	; (8001800 <Ap_GLcdMenu_ExeCmd+0x668>)
 800174c:	4790      	blx	r2
				Hw_N5110G_Clear();
				break;

		   case '2':
				
				while( get_byte_check() == 0 )
 800174e:	47b8      	blx	r7
 8001750:	2800      	cmp	r0, #0
 8001752:	f47f ad34 	bne.w	80011be <Ap_GLcdMenu_ExeCmd+0x26>
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8001756:	47a8      	blx	r5
 8001758:	4606      	mov	r6, r0

					Ret = Hw_MPU6050_GetData( &MPU6050_Data );
 800175a:	a801      	add	r0, sp, #4
 800175c:	47d0      	blx	sl

					Lb_printf("Time %d ", Hw_Timer_Get_u16Count_Usec() - TimeStart );
 800175e:	47a8      	blx	r5
 8001760:	1b81      	subs	r1, r0, r6
 8001762:	4828      	ldr	r0, [pc, #160]	; (8001804 <Ap_GLcdMenu_ExeCmd+0x66c>)
 8001764:	47a0      	blx	r4

					Lb_printf("AX %d ", MPU6050_Data.X_Acc );
 8001766:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800176a:	4827      	ldr	r0, [pc, #156]	; (8001808 <Ap_GLcdMenu_ExeCmd+0x670>)
 800176c:	47a0      	blx	r4
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
 800176e:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 8001772:	4826      	ldr	r0, [pc, #152]	; (800180c <Ap_GLcdMenu_ExeCmd+0x674>)
 8001774:	47a0      	blx	r4
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
 8001776:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800177a:	4825      	ldr	r0, [pc, #148]	; (8001810 <Ap_GLcdMenu_ExeCmd+0x678>)
 800177c:	47a0      	blx	r4
					Lb_printf("T %d \n",  MPU6050_Data.Temp);
 800177e:	4825      	ldr	r0, [pc, #148]	; (8001814 <Ap_GLcdMenu_ExeCmd+0x67c>)
 8001780:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8001784:	47a0      	blx	r4

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 8001786:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 800178a:	f248 531f 	movw	r3, #34079	; 0x851f
 800178e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8001792:	fb83 6001 	smull	r6, r0, r3, r1
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 8001796:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800179a:	fb83 6302 	smull	r6, r3, r3, r2
					Lb_printf("AX %d ", MPU6050_Data.X_Acc );
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 800179e:	17ce      	asrs	r6, r1, #31
 80017a0:	eba6 11a0 	sub.w	r1, r6, r0, asr #6
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80017a4:	17d2      	asrs	r2, r2, #31
					Lb_printf("AX %d ", MPU6050_Data.X_Acc );
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80017a6:	312a      	adds	r1, #42	; 0x2a
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80017a8:	eba2 10a3 	sub.w	r0, r2, r3, asr #6
					Lb_printf("AX %d ", MPU6050_Data.X_Acc );
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80017ac:	b28e      	uxth	r6, r1
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80017ae:	3018      	adds	r0, #24

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80017b0:	b232      	sxth	r2, r6
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80017b2:	b283      	uxth	r3, r0

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80017b4:	2a50      	cmp	r2, #80	; 0x50
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80017b6:	b299      	uxth	r1, r3

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80017b8:	ddb2      	ble.n	8001720 <Ap_GLcdMenu_ExeCmd+0x588>
					if( x < 3 )                x = 3;
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 80017ba:	b208      	sxth	r0, r1
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80017bc:	2650      	movs	r6, #80	; 0x50
					if( x < 3 )                x = 3;
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 80017be:	282c      	cmp	r0, #44	; 0x2c
 80017c0:	ddb4      	ble.n	800172c <Ap_GLcdMenu_ExeCmd+0x594>
 80017c2:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 80017c6:	e7b6      	b.n	8001736 <Ap_GLcdMenu_ExeCmd+0x59e>
	while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
	{
		switch(key)
		{
		   case '1':
				Lb_printf("LCD Clear \n");
 80017c8:	4813      	ldr	r0, [pc, #76]	; (8001818 <Ap_GLcdMenu_ExeCmd+0x680>)
 80017ca:	47a0      	blx	r4
				Hw_N5110G_Clear();
 80017cc:	490a      	ldr	r1, [pc, #40]	; (80017f8 <Ap_GLcdMenu_ExeCmd+0x660>)
 80017ce:	4788      	blx	r1
				break;
 80017d0:	e4f5      	b.n	80011be <Ap_GLcdMenu_ExeCmd+0x26>
		   case '0':
			   break;

			case 'm':
			case 'M':
				Ap_GLcdMenu_ShowMenu();
 80017d2:	f241 06c5 	movw	r6, #4293	; 0x10c5
 80017d6:	f6c0 0600 	movt	r6, #2048	; 0x800
 80017da:	47b0      	blx	r6
				break;
 80017dc:	e4ef      	b.n	80011be <Ap_GLcdMenu_ExeCmd+0x26>
				break;

		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 80017de:	480f      	ldr	r0, [pc, #60]	; (800181c <Ap_GLcdMenu_ExeCmd+0x684>)
 80017e0:	4659      	mov	r1, fp
 80017e2:	47a0      	blx	r4
 80017e4:	e74f      	b.n	8001686 <Ap_GLcdMenu_ExeCmd+0x4ee>
			   break;
		}
	}
	
	return key;
}
 80017e6:	b021      	add	sp, #132	; 0x84
 80017e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017ec:	fa1f f68b 	uxth.w	r6, fp
 80017f0:	e578      	b.n	80012e4 <Ap_GLcdMenu_ExeCmd+0x14c>
 80017f2:	b285      	uxth	r5, r0
 80017f4:	e57d      	b.n	80012f2 <Ap_GLcdMenu_ExeCmd+0x15a>
 80017f6:	bf00      	nop
 80017f8:	0800333d 	.word	0x0800333d
 80017fc:	080034fd 	.word	0x080034fd
 8001800:	08002785 	.word	0x08002785
 8001804:	080085f4 	.word	0x080085f4
 8001808:	08008600 	.word	0x08008600
 800180c:	08008608 	.word	0x08008608
 8001810:	08008610 	.word	0x08008610
 8001814:	08008618 	.word	0x08008618
 8001818:	080085e8 	.word	0x080085e8
 800181c:	08008620 	.word	0x08008620

08001820 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 8001820:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 8001824:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 8001826:	7819      	ldrb	r1, [r3, #0]
 8001828:	b151      	cbz	r1, 8001840 <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <print_byte_out+0x2c>)
 800182c:	4908      	ldr	r1, [pc, #32]	; (8001850 <print_byte_out+0x30>)
 800182e:	6814      	ldr	r4, [r2, #0]
 8001830:	6808      	ldr	r0, [r1, #0]
 8001832:	1c63      	adds	r3, r4, #1
 8001834:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8001836:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8001838:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800183a:	2200      	movs	r2, #0
 800183c:	54ca      	strb	r2, [r1, r3]
 800183e:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <print_byte_out+0x34>)
 8001842:	4798      	blx	r3
 8001844:	bd38      	pop	{r3, r4, r5, pc}
 8001846:	bf00      	nop
 8001848:	20000404 	.word	0x20000404
 800184c:	20000400 	.word	0x20000400
 8001850:	200004bc 	.word	0x200004bc
 8001854:	080028e5 	.word	0x080028e5

08001858 <PrintString>:
        }
        return;
}

void PrintString(char *fmt, char *s)
{
 8001858:	b538      	push	{r3, r4, r5, lr}
        if (!fmt || !s) return;
 800185a:	b148      	cbz	r0, 8001870 <PrintString+0x18>
 800185c:	b141      	cbz	r1, 8001870 <PrintString+0x18>
        while (*s) print_byte_out(*s++);
 800185e:	7808      	ldrb	r0, [r1, #0]
 8001860:	b130      	cbz	r0, 8001870 <PrintString+0x18>
 8001862:	4d04      	ldr	r5, [pc, #16]	; (8001874 <PrintString+0x1c>)
 8001864:	460c      	mov	r4, r1
 8001866:	47a8      	blx	r5
 8001868:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800186c:	2800      	cmp	r0, #0
 800186e:	d1fa      	bne.n	8001866 <PrintString+0xe>
 8001870:	bd38      	pop	{r3, r4, r5, pc}
 8001872:	bf00      	nop
 8001874:	08001821 	.word	0x08001821

08001878 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 8001878:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 800187a:	b1c8      	cbz	r0, 80018b0 <DecToLong+0x38>
 800187c:	7803      	ldrb	r3, [r0, #0]
 800187e:	b1cb      	cbz	r3, 80018b4 <DecToLong+0x3c>


        for (*retval=0; *s; s++){
 8001880:	2300      	movs	r3, #0
 8001882:	600b      	str	r3, [r1, #0]
 8001884:	7802      	ldrb	r2, [r0, #0]
 8001886:	b192      	cbz	r2, 80018ae <DecToLong+0x36>
                if (*s < '0' || *s > '9') return false;
 8001888:	3a30      	subs	r2, #48	; 0x30
 800188a:	b2d4      	uxtb	r4, r2
 800188c:	2c09      	cmp	r4, #9
 800188e:	d902      	bls.n	8001896 <DecToLong+0x1e>
 8001890:	e012      	b.n	80018b8 <DecToLong+0x40>
 8001892:	2d09      	cmp	r5, #9
 8001894:	d810      	bhi.n	80018b8 <DecToLong+0x40>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 8001896:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800189a:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 800189e:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80018a0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 80018a4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80018a8:	b2d5      	uxtb	r5, r2
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80018aa:	2c00      	cmp	r4, #0
 80018ac:	d1f1      	bne.n	8001892 <DecToLong+0x1a>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 80018ae:	2001      	movs	r0, #1
}        // DecToLong.
 80018b0:	bc30      	pop	{r4, r5}
 80018b2:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 80018b4:	4618      	mov	r0, r3
 80018b6:	e7fb      	b.n	80018b0 <DecToLong+0x38>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 80018b8:	2000      	movs	r0, #0
 80018ba:	e7f9      	b.n	80018b0 <DecToLong+0x38>

080018bc <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 80018bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018c0:	4682      	mov	sl, r0
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80018c2:	7800      	ldrb	r0, [r0, #0]
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80018c4:	2300      	movs	r3, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 80018c6:	b084      	sub	sp, #16
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
 80018c8:	f1b1 0800 	subs.w	r8, r1, #0
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80018cc:	9300      	str	r3, [sp, #0]
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
		l = -l;	
 80018ce:	bfba      	itte	lt
 80018d0:	f1c8 0800 	rsblt	r8, r8, #0
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
 80018d4:	f04f 0901 	movlt.w	r9, #1
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;
 80018d8:	4699      	movge	r9, r3
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80018da:	2800      	cmp	r0, #0
 80018dc:	f000 8140 	beq.w	8001b60 <PrintDec+0x2a4>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 80018e0:	2500      	movs	r5, #0


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 80018e2:	2864      	cmp	r0, #100	; 0x64
 80018e4:	d029      	beq.n	800193a <PrintDec+0x7e>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 80018e6:	4ea1      	ldr	r6, [pc, #644]	; (8001b6c <PrintDec+0x2b0>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 80018e8:	462c      	mov	r4, r5
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 80018ea:	462f      	mov	r7, r5

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 80018ec:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
 80018f0:	2a08      	cmp	r2, #8
 80018f2:	f200 808e 	bhi.w	8001a12 <PrintDec+0x156>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80018f6:	f81a 2004 	ldrb.w	r2, [sl, r4]
 80018fa:	eb0a 0104 	add.w	r1, sl, r4
 80018fe:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8001902:	2809      	cmp	r0, #9
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	a801      	add	r0, sp, #4
 800190a:	d809      	bhi.n	8001920 <PrintDec+0x64>
			{
				tol[j] = s[i++];
 800190c:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800190e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
			{
				tol[j] = s[i++];
 8001912:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8001914:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8001918:	3301      	adds	r3, #1
 800191a:	f1be 0f09 	cmp.w	lr, #9
 800191e:	d9f5      	bls.n	800190c <PrintDec+0x50>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8001920:	a904      	add	r1, sp, #16
 8001922:	18ca      	adds	r2, r1, r3
			i--;
			DecToLong(tol, &flagcnt);
 8001924:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8001926:	f802 7c0c 	strb.w	r7, [r2, #-12]
			i--;
 800192a:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 800192c:	47b0      	blx	r6
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800192e:	3401      	adds	r4, #1
 8001930:	f81a 0004 	ldrb.w	r0, [sl, r4]
 8001934:	b108      	cbz	r0, 800193a <PrintDec+0x7e>
	{
		if (c=='d') break;
 8001936:	2864      	cmp	r0, #100	; 0x64
 8001938:	d1d8      	bne.n	80018ec <PrintDec+0x30>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 800193a:	f1b9 0f00 	cmp.w	r9, #0
 800193e:	f040 810b 	bne.w	8001b58 <PrintDec+0x29c>
 8001942:	4e8b      	ldr	r6, [pc, #556]	; (8001b70 <PrintDec+0x2b4>)


	// 위의 flag에 따라 출력.
	if (flagcnt)
 8001944:	9800      	ldr	r0, [sp, #0]
 8001946:	2800      	cmp	r0, #0
 8001948:	d067      	beq.n	8001a1a <PrintDec+0x15e>
	{
                if (flagcnt>9) flagcnt=9;
 800194a:	2809      	cmp	r0, #9
 800194c:	f300 80ff 	bgt.w	8001b4e <PrintDec+0x292>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 8001950:	1e44      	subs	r4, r0, #1


        while (cnt--){
 8001952:	1e81      	subs	r1, r0, #2
 8001954:	1ec7      	subs	r7, r0, #3
 8001956:	2c00      	cmp	r4, #0
 8001958:	f000 8104 	beq.w	8001b64 <PrintDec+0x2a8>
 800195c:	f001 0401 	and.w	r4, r1, #1
                retval *= num;
 8001960:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001962:	1e4a      	subs	r2, r1, #1
 8001964:	b171      	cbz	r1, 8001984 <PrintDec+0xc8>
 8001966:	b124      	cbz	r4, 8001972 <PrintDec+0xb6>
 8001968:	3a01      	subs	r2, #1
 800196a:	1c51      	adds	r1, r2, #1
                retval *= num;
 800196c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001970:	d008      	beq.n	8001984 <PrintDec+0xc8>
                retval *= num;
 8001972:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8001976:	00e1      	lsls	r1, r4, #3
 8001978:	eb01 0344 	add.w	r3, r1, r4, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800197c:	3a02      	subs	r2, #2
                retval *= num;
 800197e:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001980:	1c51      	adds	r1, r2, #1
 8001982:	d1f6      	bne.n	8001972 <PrintDec+0xb6>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8001984:	fb98 f2f3 	sdiv	r2, r8, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001988:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 800198a:	fb03 8812 	mls	r8, r3, r2, r8
{
        long retval=num;
        cnt--;


        while (cnt--){
 800198e:	f000 80eb 	beq.w	8001b68 <PrintDec+0x2ac>
 8001992:	f007 0001 	and.w	r0, r7, #1
                retval *= num;
 8001996:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001998:	1e79      	subs	r1, r7, #1
 800199a:	b177      	cbz	r7, 80019ba <PrintDec+0xfe>
 800199c:	b120      	cbz	r0, 80019a8 <PrintDec+0xec>
 800199e:	3901      	subs	r1, #1
 80019a0:	1c48      	adds	r0, r1, #1
                retval *= num;
 80019a2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80019a6:	d008      	beq.n	80019ba <PrintDec+0xfe>
                retval *= num;
 80019a8:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 80019ac:	00fc      	lsls	r4, r7, #3
 80019ae:	eb04 0347 	add.w	r3, r4, r7, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80019b2:	3902      	subs	r1, #2
                retval *= num;
 80019b4:	005c      	lsls	r4, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80019b6:	1c4f      	adds	r7, r1, #1
 80019b8:	d1f6      	bne.n	80019a8 <PrintDec+0xec>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80019ba:	f246 6767 	movw	r7, #26215	; 0x6667
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80019be:	f04f 0901 	mov.w	r9, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80019c2:	f2c6 6766 	movt	r7, #26214	; 0x6666
 80019c6:	e00f      	b.n	80019e8 <PrintDec+0x12c>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 80019c8:	2c01      	cmp	r4, #1
 80019ca:	d015      	beq.n	80019f8 <PrintDec+0x13c>


                        if (leading_zero==true){
 80019cc:	f1b9 0f00 	cmp.w	r9, #0
 80019d0:	d012      	beq.n	80019f8 <PrintDec+0x13c>
                                if (flag0)        print_byte_out('0');
 80019d2:	2030      	movs	r0, #48	; 0x30
 80019d4:	b905      	cbnz	r5, 80019d8 <PrintDec+0x11c>
                                else                print_byte_out(' ');
 80019d6:	2020      	movs	r0, #32
 80019d8:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80019da:	fb87 2004 	smull	r2, r0, r7, r4
 80019de:	17e1      	asrs	r1, r4, #31
 80019e0:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 80019e4:	2c00      	cmp	r4, #0
 80019e6:	dd11      	ble.n	8001a0c <PrintDec+0x150>
                        result = remainder/divisor;
 80019e8:	fb98 f2f4 	sdiv	r2, r8, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80019ec:	b2d0      	uxtb	r0, r2
 80019ee:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80019f0:	fb04 8812 	mls	r8, r4, r2, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 80019f4:	2a00      	cmp	r2, #0
 80019f6:	d0e7      	beq.n	80019c8 <PrintDec+0x10c>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80019f8:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80019fa:	fb87 2004 	smull	r2, r0, r7, r4
 80019fe:	17e1      	asrs	r1, r4, #31
 8001a00:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 8001a04:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8001a06:	f04f 0900 	mov.w	r9, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8001a0a:	dced      	bgt.n	80019e8 <PrintDec+0x12c>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 8001a0c:	b004      	add	sp, #16
 8001a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 8001a12:	2830      	cmp	r0, #48	; 0x30
 8001a14:	bf08      	it	eq
 8001a16:	2501      	moveq	r5, #1
 8001a18:	e789      	b.n	800192e <PrintDec+0x72>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001a1a:	f642 73a1 	movw	r3, #12193	; 0x2fa1
 8001a1e:	f2c4 43b8 	movt	r3, #17592	; 0x44b8
 8001a22:	fb83 2408 	smull	r2, r4, r3, r8
 8001a26:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 8001a2a:	f44f 424a 	mov.w	r2, #51712	; 0xca00
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001a2e:	ebc1 7024 	rsb	r0, r1, r4, asr #28
                        remainder %= divisor;
 8001a32:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
 8001a36:	fb02 8810 	mls	r8, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	f000 809a 	beq.w	8001b74 <PrintDec+0x2b8>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001a40:	b2c0      	uxtb	r0, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001a42:	f643 3489 	movw	r4, #15241	; 0x3b89
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001a46:	3030      	adds	r0, #48	; 0x30
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001a48:	f2c5 54e6 	movt	r4, #21990	; 0x55e6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001a4c:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001a4e:	fb84 2008 	smull	r2, r0, r4, r8
 8001a52:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 8001a56:	f44f 4261 	mov.w	r2, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001a5a:	ebc1 6060 	rsb	r0, r1, r0, asr #25
                        remainder %= divisor;
 8001a5e:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
 8001a62:	fb02 8410 	mls	r4, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001a66:	3030      	adds	r0, #48	; 0x30
 8001a68:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001a6a:	f64c 236b 	movw	r3, #51819	; 0xca6b
 8001a6e:	f6c6 335f 	movt	r3, #27487	; 0x6b5f
 8001a72:	fb83 2004 	smull	r2, r0, r3, r4
 8001a76:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 8001a78:	f249 6280 	movw	r2, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001a7c:	ebc1 50a0 	rsb	r0, r1, r0, asr #22
                        remainder %= divisor;
 8001a80:	f2c0 0298 	movt	r2, #152	; 0x98
 8001a84:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001a88:	3030      	adds	r0, #48	; 0x30
 8001a8a:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001a8c:	f64d 6383 	movw	r3, #56963	; 0xde83
 8001a90:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8001a94:	fb83 2004 	smull	r2, r0, r3, r4
 8001a98:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 8001a9a:	f244 2240 	movw	r2, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001a9e:	ebc1 40a0 	rsb	r0, r1, r0, asr #18
                        remainder %= divisor;
 8001aa2:	f2c0 020f 	movt	r2, #15
 8001aa6:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001aaa:	3030      	adds	r0, #48	; 0x30
 8001aac:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001aae:	f24b 5389 	movw	r3, #46473	; 0xb589
 8001ab2:	f2c1 43f8 	movt	r3, #5368	; 0x14f8
 8001ab6:	fb83 2004 	smull	r2, r0, r3, r4
 8001aba:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 8001abc:	f248 62a0 	movw	r2, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001ac0:	ebc1 3060 	rsb	r0, r1, r0, asr #13
                        remainder %= divisor;
 8001ac4:	f2c0 0201 	movt	r2, #1
 8001ac8:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001acc:	3030      	adds	r0, #48	; 0x30
 8001ace:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001ad0:	f648 33ad 	movw	r3, #35757	; 0x8bad
 8001ad4:	f6c6 03db 	movt	r3, #26843	; 0x68db
 8001ad8:	fb83 2004 	smull	r2, r0, r3, r4
 8001adc:	17e1      	asrs	r1, r4, #31
 8001ade:	ebc1 3020 	rsb	r0, r1, r0, asr #12
                        remainder %= divisor;
 8001ae2:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ae6:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001aea:	3030      	adds	r0, #48	; 0x30
 8001aec:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001aee:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8001af2:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8001af6:	fb83 2004 	smull	r2, r0, r3, r4
 8001afa:	17e1      	asrs	r1, r4, #31
 8001afc:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
                        remainder %= divisor;
 8001b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b04:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001b08:	3030      	adds	r0, #48	; 0x30
 8001b0a:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001b0c:	f248 531f 	movw	r3, #34079	; 0x851f
 8001b10:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8001b14:	fb83 2004 	smull	r2, r0, r3, r4
 8001b18:	17e1      	asrs	r1, r4, #31
 8001b1a:	ebc1 1060 	rsb	r0, r1, r0, asr #5
                        remainder %= divisor;
 8001b1e:	2264      	movs	r2, #100	; 0x64
 8001b20:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001b24:	3030      	adds	r0, #48	; 0x30
 8001b26:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001b28:	f246 6367 	movw	r3, #26215	; 0x6667
 8001b2c:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8001b30:	fb83 2004 	smull	r2, r0, r3, r4
 8001b34:	17e1      	asrs	r1, r4, #31
 8001b36:	ebc1 00a0 	rsb	r0, r1, r0, asr #2
                        remainder %= divisor;
 8001b3a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8001b3e:	eba4 0442 	sub.w	r4, r4, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001b42:	3030      	adds	r0, #48	; 0x30
 8001b44:	47b0      	blx	r6
 8001b46:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001b4a:	47b0      	blx	r6
 8001b4c:	e75e      	b.n	8001a0c <PrintDec+0x150>


	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 8001b4e:	2009      	movs	r0, #9
 8001b50:	9000      	str	r0, [sp, #0]
 8001b52:	2706      	movs	r7, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001b54:	2107      	movs	r1, #7
 8001b56:	e701      	b.n	800195c <PrintDec+0xa0>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 8001b58:	202d      	movs	r0, #45	; 0x2d
 8001b5a:	4e05      	ldr	r6, [pc, #20]	; (8001b70 <PrintDec+0x2b4>)
 8001b5c:	47b0      	blx	r6
 8001b5e:	e6f1      	b.n	8001944 <PrintDec+0x88>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 8001b60:	4605      	mov	r5, r0
 8001b62:	e6ea      	b.n	800193a <PrintDec+0x7e>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 8001b64:	230a      	movs	r3, #10
 8001b66:	e70d      	b.n	8001984 <PrintDec+0xc8>
 8001b68:	240a      	movs	r4, #10
 8001b6a:	e726      	b.n	80019ba <PrintDec+0xfe>
 8001b6c:	08001879 	.word	0x08001879
 8001b70:	08001821 	.word	0x08001821
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001b74:	f643 3389 	movw	r3, #15241	; 0x3b89
 8001b78:	f2c5 53e6 	movt	r3, #21990	; 0x55e6
 8001b7c:	fb83 2108 	smull	r2, r1, r3, r8
                        remainder %= divisor;
 8001b80:	f44f 4461 	mov.w	r4, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001b84:	ea4f 72e8 	mov.w	r2, r8, asr #31
 8001b88:	ebc2 6061 	rsb	r0, r2, r1, asr #25
                        remainder %= divisor;
 8001b8c:	f2c0 54f5 	movt	r4, #1525	; 0x5f5
 8001b90:	fb04 8410 	mls	r4, r4, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 8001b94:	2800      	cmp	r0, #0
 8001b96:	f47f af66 	bne.w	8001a66 <PrintDec+0x1aa>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001b9a:	f64c 206b 	movw	r0, #51819	; 0xca6b
 8001b9e:	f6c6 305f 	movt	r0, #27487	; 0x6b5f
 8001ba2:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 8001ba6:	f249 6380 	movw	r3, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001baa:	17e2      	asrs	r2, r4, #31
 8001bac:	ebc2 50a1 	rsb	r0, r2, r1, asr #22
                        remainder %= divisor;
 8001bb0:	f2c0 0398 	movt	r3, #152	; 0x98
 8001bb4:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	f47f af65 	bne.w	8001a88 <PrintDec+0x1cc>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001bbe:	f64d 6083 	movw	r0, #56963	; 0xde83
 8001bc2:	f2c4 301b 	movt	r0, #17179	; 0x431b
 8001bc6:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 8001bca:	f244 2340 	movw	r3, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001bce:	17e2      	asrs	r2, r4, #31
 8001bd0:	ebc2 40a1 	rsb	r0, r2, r1, asr #18
                        remainder %= divisor;
 8001bd4:	f2c0 030f 	movt	r3, #15
 8001bd8:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	f47f af64 	bne.w	8001aaa <PrintDec+0x1ee>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001be2:	f24b 5089 	movw	r0, #46473	; 0xb589
 8001be6:	f2c1 40f8 	movt	r0, #5368	; 0x14f8
 8001bea:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 8001bee:	f248 63a0 	movw	r3, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001bf2:	17e2      	asrs	r2, r4, #31
 8001bf4:	ebc2 3061 	rsb	r0, r2, r1, asr #13
                        remainder %= divisor;
 8001bf8:	f2c0 0301 	movt	r3, #1
 8001bfc:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001c00:	2800      	cmp	r0, #0
 8001c02:	f47f af63 	bne.w	8001acc <PrintDec+0x210>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001c06:	f648 30ad 	movw	r0, #35757	; 0x8bad
 8001c0a:	f6c6 00db 	movt	r0, #26843	; 0x68db
 8001c0e:	fb80 2104 	smull	r2, r1, r0, r4
 8001c12:	17e2      	asrs	r2, r4, #31
 8001c14:	ebc2 3021 	rsb	r0, r2, r1, asr #12
                        remainder %= divisor;
 8001c18:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c1c:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001c20:	2800      	cmp	r0, #0
 8001c22:	f47f af62 	bne.w	8001aea <PrintDec+0x22e>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001c26:	f644 50d3 	movw	r0, #19923	; 0x4dd3
 8001c2a:	f2c1 0062 	movt	r0, #4194	; 0x1062
 8001c2e:	fb80 2104 	smull	r2, r1, r0, r4
 8001c32:	17e2      	asrs	r2, r4, #31
 8001c34:	ebc2 10a1 	rsb	r0, r2, r1, asr #6
                        remainder %= divisor;
 8001c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3c:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001c40:	2800      	cmp	r0, #0
 8001c42:	f47f af61 	bne.w	8001b08 <PrintDec+0x24c>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001c46:	f248 501f 	movw	r0, #34079	; 0x851f
 8001c4a:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
 8001c4e:	fb80 2104 	smull	r2, r1, r0, r4
 8001c52:	17e2      	asrs	r2, r4, #31
 8001c54:	ebc2 1061 	rsb	r0, r2, r1, asr #5
                        remainder %= divisor;
 8001c58:	2364      	movs	r3, #100	; 0x64
 8001c5a:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001c5e:	2800      	cmp	r0, #0
 8001c60:	f47f af60 	bne.w	8001b24 <PrintDec+0x268>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001c64:	f246 6067 	movw	r0, #26215	; 0x6667
 8001c68:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8001c6c:	fb80 2104 	smull	r2, r1, r0, r4
 8001c70:	17e2      	asrs	r2, r4, #31
 8001c72:	ebc2 00a1 	rsb	r0, r2, r1, asr #2
                        remainder %= divisor;
 8001c76:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001c7a:	eba4 0443 	sub.w	r4, r4, r3, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	f43f af61 	beq.w	8001b46 <PrintDec+0x28a>
 8001c84:	e75d      	b.n	8001b42 <PrintDec+0x286>
 8001c86:	bf00      	nop

08001c88 <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8001c8c:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001c8e:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8001c90:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001c92:	4681      	mov	r9, r0
 8001c94:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8001c96:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80b7 	beq.w	8001e0c <PrintHex+0x184>
                if (c=='x') break;
 8001c9e:	2b78      	cmp	r3, #120	; 0x78
 8001ca0:	f000 80b4 	beq.w	8001e0c <PrintHex+0x184>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 8001ca4:	4fb4      	ldr	r7, [pc, #720]	; (8001f78 <PrintHex+0x2f0>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 8001ca6:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8001ca8:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 8001caa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8001cae:	2a08      	cmp	r2, #8
 8001cb0:	f200 80a8 	bhi.w	8001e04 <PrintHex+0x17c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8001cb4:	f819 2004 	ldrb.w	r2, [r9, r4]
 8001cb8:	eb09 0104 	add.w	r1, r9, r4
 8001cbc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001cc0:	2b09      	cmp	r3, #9
 8001cc2:	a803      	add	r0, sp, #12
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	d808      	bhi.n	8001cdc <PrintHex+0x54>
                                tol[j] = s[i++];
 8001cca:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8001ccc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 8001cd0:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8001cd2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	2d09      	cmp	r5, #9
 8001cda:	d9f6      	bls.n	8001cca <PrintHex+0x42>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8001cdc:	a906      	add	r1, sp, #24
 8001cde:	18ca      	adds	r2, r1, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 8001ce0:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8001ce2:	f802 8c0c 	strb.w	r8, [r2, #-12]
                        i--;
 8001ce6:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 8001ce8:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8001cea:	3401      	adds	r4, #1
 8001cec:	f819 3004 	ldrb.w	r3, [r9, r4]
 8001cf0:	b10b      	cbz	r3, 8001cf6 <PrintHex+0x6e>
                if (c=='x') break;
 8001cf2:	2b78      	cmp	r3, #120	; 0x78
 8001cf4:	d1d9      	bne.n	8001caa <PrintHex+0x22>
 8001cf6:	9901      	ldr	r1, [sp, #4]
 8001cf8:	9b02      	ldr	r3, [sp, #8]
 8001cfa:	ba0a      	rev	r2, r1
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8001cfc:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8087 	beq.w	8001e12 <PrintHex+0x18a>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8001d04:	07d8      	lsls	r0, r3, #31
 8001d06:	f100 810f 	bmi.w	8001f28 <PrintHex+0x2a0>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8001d0a:	2101      	movs	r1, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001d0c:	f1c3 0208 	rsb	r2, r3, #8
 8001d10:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
 8001d14:	105a      	asrs	r2, r3, #1
 8001d16:	2a03      	cmp	r2, #3
 8001d18:	f300 80c9 	bgt.w	8001eae <PrintHex+0x226>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001d1c:	ac01      	add	r4, sp, #4
 8001d1e:	18a5      	adds	r5, r4, r2
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8001d20:	462c      	mov	r4, r5
 8001d22:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001d26:	43ef      	mvns	r7, r5
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001d28:	0903      	lsrs	r3, r0, #4
 8001d2a:	f007 0901 	and.w	r9, r7, #1
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001d2e:	f10d 0808 	add.w	r8, sp, #8
 8001d32:	4d92      	ldr	r5, [pc, #584]	; (8001f7c <PrintHex+0x2f4>)
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001d34:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001d38:	f000 8131 	beq.w	8001f9e <PrintHex+0x316>
                        if (uHex<10) uHex+='0';
 8001d3c:	2b09      	cmp	r3, #9
 8001d3e:	f240 816e 	bls.w	800201e <PrintHex+0x396>
                        else         uHex+='A'-10;
 8001d42:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8001d46:	47a8      	blx	r5
 8001d48:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001d4a:	2f00      	cmp	r7, #0
 8001d4c:	f000 8130 	beq.w	8001fb0 <PrintHex+0x328>
                        if (lHex<10) lHex+='0';
 8001d50:	2f09      	cmp	r7, #9
 8001d52:	f240 8152 	bls.w	8001ffa <PrintHex+0x372>
                        else         lHex+='A'-10;
 8001d56:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001d5a:	47a8      	blx	r5
 8001d5c:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001d5e:	4544      	cmp	r4, r8
 8001d60:	f000 80a5 	beq.w	8001eae <PrintHex+0x226>
 8001d64:	f1b9 0f00 	cmp.w	r9, #0
 8001d68:	d017      	beq.n	8001d9a <PrintHex+0x112>
                        c = s[i];
 8001d6a:	f814 0b01 	ldrb.w	r0, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001d6e:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001d70:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001d74:	d031      	beq.n	8001dda <PrintHex+0x152>
                        if (uHex<10) uHex+='0';
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	f240 8142 	bls.w	8002000 <PrintHex+0x378>
                        else         uHex+='A'-10;
 8001d7c:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8001d80:	47a8      	blx	r5
 8001d82:	2200      	movs	r2, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001d84:	b3a7      	cbz	r7, 8001df0 <PrintHex+0x168>
                        if (lHex<10) lHex+='0';
 8001d86:	2f09      	cmp	r7, #9
 8001d88:	f240 813d 	bls.w	8002006 <PrintHex+0x37e>
                        else         lHex+='A'-10;
 8001d8c:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001d90:	47a8      	blx	r5
 8001d92:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001d94:	4544      	cmp	r4, r8
 8001d96:	f000 808a 	beq.w	8001eae <PrintHex+0x226>
                        c = s[i];
 8001d9a:	f814 3b01 	ldrb.w	r3, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001d9e:	091a      	lsrs	r2, r3, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001da0:	f003 070f 	and.w	r7, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001da4:	f000 80d4 	beq.w	8001f50 <PrintHex+0x2c8>
                        if (uHex<10) uHex+='0';
 8001da8:	2a09      	cmp	r2, #9
                        else         uHex+='A'-10;
 8001daa:	bf88      	it	hi
 8001dac:	f102 0037 	addhi.w	r0, r2, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001db0:	f240 812c 	bls.w	800200c <PrintHex+0x384>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8001db4:	47a8      	blx	r5
 8001db6:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001db8:	2f00      	cmp	r7, #0
 8001dba:	f000 80d2 	beq.w	8001f62 <PrintHex+0x2da>
                        if (lHex<10) lHex+='0';
 8001dbe:	2f09      	cmp	r7, #9
                        else         lHex+='A'-10;
 8001dc0:	bf88      	it	hi
 8001dc2:	f107 0037 	addhi.w	r0, r7, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001dc6:	f240 8124 	bls.w	8002012 <PrintHex+0x38a>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001dca:	47a8      	blx	r5
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8001dcc:	f814 0b01 	ldrb.w	r0, [r4], #1
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001dd0:	2100      	movs	r1, #0
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001dd2:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001dd4:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001dd8:	d1cd      	bne.n	8001d76 <PrintHex+0xee>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8001dda:	2900      	cmp	r1, #0
 8001ddc:	f000 8110 	beq.w	8002000 <PrintHex+0x378>
                                if (flag0) print_byte_out('0');
 8001de0:	2e00      	cmp	r6, #0
 8001de2:	f040 80cd 	bne.w	8001f80 <PrintHex+0x2f8>
                                else       print_byte_out(' ');
 8001de6:	2020      	movs	r0, #32
 8001de8:	47a8      	blx	r5
 8001dea:	2201      	movs	r2, #1
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001dec:	2f00      	cmp	r7, #0
 8001dee:	d1ca      	bne.n	8001d86 <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8001df0:	2a00      	cmp	r2, #0
 8001df2:	f000 8108 	beq.w	8002006 <PrintHex+0x37e>
                                if (flag0) print_byte_out('0');
 8001df6:	2e00      	cmp	r6, #0
 8001df8:	f040 80ba 	bne.w	8001f70 <PrintHex+0x2e8>
                                else       print_byte_out(' ');
 8001dfc:	2020      	movs	r0, #32
 8001dfe:	47a8      	blx	r5
 8001e00:	2101      	movs	r1, #1
 8001e02:	e7c7      	b.n	8001d94 <PrintHex+0x10c>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8001e04:	2b30      	cmp	r3, #48	; 0x30
 8001e06:	bf08      	it	eq
 8001e08:	2601      	moveq	r6, #1
 8001e0a:	e76e      	b.n	8001cea <PrintHex+0x62>
 8001e0c:	9c01      	ldr	r4, [sp, #4]
 8001e0e:	ba25      	rev	r5, r4
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8001e10:	9501      	str	r5, [sp, #4]
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001e12:	f89d 3004 	ldrb.w	r3, [sp, #4]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001e16:	091a      	lsrs	r2, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001e18:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001e1c:	d04a      	beq.n	8001eb4 <PrintHex+0x22c>
                        if (uHex<10) uHex+='0';
 8001e1e:	2a09      	cmp	r2, #9
 8001e20:	f240 80fa 	bls.w	8002018 <PrintHex+0x390>
                        else         uHex+='A'-10;
 8001e24:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8001e28:	4d54      	ldr	r5, [pc, #336]	; (8001f7c <PrintHex+0x2f4>)
 8001e2a:	47a8      	blx	r5
 8001e2c:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001e2e:	2c00      	cmp	r4, #0
 8001e30:	d144      	bne.n	8001ebc <PrintHex+0x234>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001e32:	2201      	movs	r2, #1
 8001e34:	2900      	cmp	r1, #0
 8001e36:	f000 80fb 	beq.w	8002030 <PrintHex+0x3a8>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001e3a:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001e3e:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001e40:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001e44:	d047      	beq.n	8001ed6 <PrintHex+0x24e>
                        if (uHex<10) uHex+='0';
 8001e46:	2909      	cmp	r1, #9
 8001e48:	f240 80ec 	bls.w	8002024 <PrintHex+0x39c>
                        else         uHex+='A'-10;
 8001e4c:	f101 0037 	add.w	r0, r1, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8001e50:	47a8      	blx	r5
 8001e52:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001e54:	2c00      	cmp	r4, #0
 8001e56:	d144      	bne.n	8001ee2 <PrintHex+0x25a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 80e5 	beq.w	800202a <PrintHex+0x3a2>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001e60:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001e64:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001e66:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001e6a:	d047      	beq.n	8001efc <PrintHex+0x274>
                        if (uHex<10) uHex+='0';
 8001e6c:	2b09      	cmp	r3, #9
 8001e6e:	f240 80be 	bls.w	8001fee <PrintHex+0x366>
                        else         uHex+='A'-10;
 8001e72:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8001e76:	47a8      	blx	r5
 8001e78:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001e7a:	2c00      	cmp	r4, #0
 8001e7c:	d143      	bne.n	8001f06 <PrintHex+0x27e>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2900      	cmp	r1, #0
 8001e82:	f000 80b7 	beq.w	8001ff4 <PrintHex+0x36c>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001e86:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001e8a:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001e8c:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001e90:	d045      	beq.n	8001f1e <PrintHex+0x296>
                        if (uHex<10) uHex+='0';
 8001e92:	2909      	cmp	r1, #9
                        else         uHex+='A'-10;
 8001e94:	bf88      	it	hi
 8001e96:	f101 0037 	addhi.w	r0, r1, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001e9a:	d942      	bls.n	8001f22 <PrintHex+0x29a>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8001e9c:	47a8      	blx	r5
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001e9e:	2c00      	cmp	r4, #0
 8001ea0:	d07a      	beq.n	8001f98 <PrintHex+0x310>
                        if (lHex<10) lHex+='0';
 8001ea2:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 8001ea4:	bf88      	it	hi
 8001ea6:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001eaa:	d975      	bls.n	8001f98 <PrintHex+0x310>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001eac:	47a8      	blx	r5
                }
        }
        return;
}
 8001eae:	b007      	add	sp, #28
 8001eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4d31      	ldr	r5, [pc, #196]	; (8001f7c <PrintHex+0x2f4>)
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001eb8:	2c00      	cmp	r4, #0
 8001eba:	d0ba      	beq.n	8001e32 <PrintHex+0x1aa>
                        if (lHex<10) lHex+='0';
 8001ebc:	2c09      	cmp	r4, #9
 8001ebe:	f240 80b7 	bls.w	8002030 <PrintHex+0x3a8>
                        else         lHex+='A'-10;
 8001ec2:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8001ec6:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001ec8:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001ecc:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001ece:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001ed0:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001ed4:	d1b7      	bne.n	8001e46 <PrintHex+0x1be>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8001ed6:	2a00      	cmp	r2, #0
 8001ed8:	f000 80a4 	beq.w	8002024 <PrintHex+0x39c>
 8001edc:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001ede:	2c00      	cmp	r4, #0
 8001ee0:	d0ba      	beq.n	8001e58 <PrintHex+0x1d0>
                        if (lHex<10) lHex+='0';
 8001ee2:	2c09      	cmp	r4, #9
 8001ee4:	f240 80a1 	bls.w	800202a <PrintHex+0x3a2>
                        else         lHex+='A'-10;
 8001ee8:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8001eec:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001eee:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001ef2:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001ef4:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001ef6:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001efa:	d1b7      	bne.n	8001e6c <PrintHex+0x1e4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8001efc:	2a00      	cmp	r2, #0
 8001efe:	d076      	beq.n	8001fee <PrintHex+0x366>
 8001f00:	2101      	movs	r1, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001f02:	2c00      	cmp	r4, #0
 8001f04:	d0bb      	beq.n	8001e7e <PrintHex+0x1f6>
                        if (lHex<10) lHex+='0';
 8001f06:	2c09      	cmp	r4, #9
 8001f08:	d974      	bls.n	8001ff4 <PrintHex+0x36c>
                        else         lHex+='A'-10;
 8001f0a:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8001f0e:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001f10:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001f14:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001f16:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001f18:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001f1c:	d1b9      	bne.n	8001e92 <PrintHex+0x20a>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	d1bd      	bne.n	8001e9e <PrintHex+0x216>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001f22:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8001f26:	e7b9      	b.n	8001e9c <PrintHex+0x214>
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8001f28:	43d8      	mvns	r0, r3
 8001f2a:	3008      	adds	r0, #8
 8001f2c:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8001f30:	aa06      	add	r2, sp, #24
 8001f32:	eb02 0163 	add.w	r1, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 8001f36:	f811 0c14 	ldrb.w	r0, [r1, #-20]
                        if (lHex!=0) leading_zero=false;
 8001f3a:	f010 030f 	ands.w	r3, r0, #15
 8001f3e:	d045      	beq.n	8001fcc <PrintHex+0x344>
                        if (lHex<10) lHex+='0';
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	d951      	bls.n	8001fe8 <PrintHex+0x360>
                        else         lHex+='A'-10;
 8001f44:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <PrintHex+0x2f4>)
 8001f4a:	4798      	blx	r3
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	e042      	b.n	8001fd6 <PrintHex+0x34e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8001f50:	2900      	cmp	r1, #0
 8001f52:	d05b      	beq.n	800200c <PrintHex+0x384>
                                if (flag0) print_byte_out('0');
 8001f54:	b1e6      	cbz	r6, 8001f90 <PrintHex+0x308>
 8001f56:	2030      	movs	r0, #48	; 0x30
 8001f58:	47a8      	blx	r5
 8001f5a:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001f5c:	2f00      	cmp	r7, #0
 8001f5e:	f47f af2e 	bne.w	8001dbe <PrintHex+0x136>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8001f62:	2900      	cmp	r1, #0
 8001f64:	d055      	beq.n	8002012 <PrintHex+0x38a>
                                if (flag0) print_byte_out('0');
 8001f66:	b17e      	cbz	r6, 8001f88 <PrintHex+0x300>
 8001f68:	2030      	movs	r0, #48	; 0x30
 8001f6a:	47a8      	blx	r5
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	e6fc      	b.n	8001d6a <PrintHex+0xe2>
 8001f70:	2030      	movs	r0, #48	; 0x30
 8001f72:	47a8      	blx	r5
 8001f74:	2101      	movs	r1, #1
 8001f76:	e70d      	b.n	8001d94 <PrintHex+0x10c>
 8001f78:	08001879 	.word	0x08001879
 8001f7c:	08001821 	.word	0x08001821
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8001f80:	2030      	movs	r0, #48	; 0x30
 8001f82:	47a8      	blx	r5
 8001f84:	2201      	movs	r2, #1
 8001f86:	e6fd      	b.n	8001d84 <PrintHex+0xfc>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8001f88:	2020      	movs	r0, #32
 8001f8a:	47a8      	blx	r5
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	e6ec      	b.n	8001d6a <PrintHex+0xe2>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8001f90:	2020      	movs	r0, #32
 8001f92:	47a8      	blx	r5
 8001f94:	2101      	movs	r1, #1
 8001f96:	e70f      	b.n	8001db8 <PrintHex+0x130>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001f98:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001f9c:	e786      	b.n	8001eac <PrintHex+0x224>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8001f9e:	2900      	cmp	r1, #0
 8001fa0:	d03d      	beq.n	800201e <PrintHex+0x396>
                                if (flag0) print_byte_out('0');
 8001fa2:	b17e      	cbz	r6, 8001fc4 <PrintHex+0x33c>
 8001fa4:	2030      	movs	r0, #48	; 0x30
 8001fa6:	47a8      	blx	r5
 8001fa8:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001faa:	2f00      	cmp	r7, #0
 8001fac:	f47f aed0 	bne.w	8001d50 <PrintHex+0xc8>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8001fb0:	b319      	cbz	r1, 8001ffa <PrintHex+0x372>
                                if (flag0) print_byte_out('0');
 8001fb2:	b11e      	cbz	r6, 8001fbc <PrintHex+0x334>
 8001fb4:	2030      	movs	r0, #48	; 0x30
 8001fb6:	47a8      	blx	r5
 8001fb8:	2101      	movs	r1, #1
 8001fba:	e6d0      	b.n	8001d5e <PrintHex+0xd6>
                                else       print_byte_out(' ');
 8001fbc:	2020      	movs	r0, #32
 8001fbe:	47a8      	blx	r5
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	e6cc      	b.n	8001d5e <PrintHex+0xd6>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8001fc4:	2020      	movs	r0, #32
 8001fc6:	47a8      	blx	r5
 8001fc8:	2101      	movs	r1, #1
 8001fca:	e6be      	b.n	8001d4a <PrintHex+0xc2>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8001fcc:	b13e      	cbz	r6, 8001fde <PrintHex+0x356>
 8001fce:	491a      	ldr	r1, [pc, #104]	; (8002038 <PrintHex+0x3b0>)
 8001fd0:	2030      	movs	r0, #48	; 0x30
 8001fd2:	4788      	blx	r1
 8001fd4:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 8001fd6:	9802      	ldr	r0, [sp, #8]
 8001fd8:	1e43      	subs	r3, r0, #1
 8001fda:	9302      	str	r3, [sp, #8]
 8001fdc:	e696      	b.n	8001d0c <PrintHex+0x84>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8001fde:	2020      	movs	r0, #32
 8001fe0:	4a15      	ldr	r2, [pc, #84]	; (8002038 <PrintHex+0x3b0>)
 8001fe2:	4790      	blx	r2
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	e7f6      	b.n	8001fd6 <PrintHex+0x34e>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8001fe8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001fec:	e7ac      	b.n	8001f48 <PrintHex+0x2c0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001fee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001ff2:	e740      	b.n	8001e76 <PrintHex+0x1ee>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001ff4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001ff8:	e789      	b.n	8001f0e <PrintHex+0x286>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001ffa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001ffe:	e6ac      	b.n	8001d5a <PrintHex+0xd2>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8002000:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002004:	e6bc      	b.n	8001d80 <PrintHex+0xf8>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8002006:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800200a:	e6c1      	b.n	8001d90 <PrintHex+0x108>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800200c:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8002010:	e6d0      	b.n	8001db4 <PrintHex+0x12c>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8002012:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002016:	e6d8      	b.n	8001dca <PrintHex+0x142>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8002018:	f102 0030 	add.w	r0, r2, #48	; 0x30
 800201c:	e704      	b.n	8001e28 <PrintHex+0x1a0>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800201e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002022:	e690      	b.n	8001d46 <PrintHex+0xbe>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8002024:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8002028:	e712      	b.n	8001e50 <PrintHex+0x1c8>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800202a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800202e:	e75d      	b.n	8001eec <PrintHex+0x264>
 8002030:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002034:	e747      	b.n	8001ec6 <PrintHex+0x23e>
 8002036:	bf00      	nop
 8002038:	08001821 	.word	0x08001821

0800203c <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 800203c:	b40f      	push	{r0, r1, r2, r3}
 800203e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002042:	b085      	sub	sp, #20
	int		i;
	va_list args;
	char	*s=fmt;
 8002044:	f10d 0930 	add.w	r9, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8002048:	4bac      	ldr	r3, [pc, #688]	; (80022fc <Lb_printf+0x2c0>)
 800204a:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 800204c:	f859 4b04 	ldr.w	r4, [r9], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8002050:	4dab      	ldr	r5, [pc, #684]	; (8002300 <Lb_printf+0x2c4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8002052:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 800230c <Lb_printf+0x2d0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8002056:	4fab      	ldr	r7, [pc, #684]	; (8002304 <Lb_printf+0x2c8>)
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8002058:	4eab      	ldr	r6, [pc, #684]	; (8002308 <Lb_printf+0x2cc>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 800205a:	701a      	strb	r2, [r3, #0]
	
	while (*s)
 800205c:	7820      	ldrb	r0, [r4, #0]
 800205e:	2800      	cmp	r0, #0
 8002060:	f000 80be 	beq.w	80021e0 <Lb_printf+0x1a4>
	{
		if (*s=='%')
 8002064:	2825      	cmp	r0, #37	; 0x25
 8002066:	f040 80c0 	bne.w	80021ea <Lb_printf+0x1ae>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800206a:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 800206c:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800206e:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8002072:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8002074:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002078:	f240 80d6 	bls.w	8002228 <Lb_printf+0x1ec>
 800207c:	2a78      	cmp	r2, #120	; 0x78
 800207e:	f000 80dd 	beq.w	800223c <Lb_printf+0x200>
 8002082:	2a73      	cmp	r2, #115	; 0x73
 8002084:	f000 80dd 	beq.w	8002242 <Lb_printf+0x206>
 8002088:	2a25      	cmp	r2, #37	; 0x25
 800208a:	f000 80dd 	beq.w	8002248 <Lb_printf+0x20c>
 800208e:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002090:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002094:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002098:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800209a:	2a01      	cmp	r2, #1
 800209c:	f240 80d6 	bls.w	800224c <Lb_printf+0x210>
 80020a0:	2978      	cmp	r1, #120	; 0x78
 80020a2:	f000 80d6 	beq.w	8002252 <Lb_printf+0x216>
 80020a6:	2973      	cmp	r1, #115	; 0x73
 80020a8:	f000 80d6 	beq.w	8002258 <Lb_printf+0x21c>
 80020ac:	2925      	cmp	r1, #37	; 0x25
 80020ae:	f000 80d6 	beq.w	800225e <Lb_printf+0x222>
 80020b2:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80020b4:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80020b8:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80020bc:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80020be:	2901      	cmp	r1, #1
 80020c0:	f240 80cf 	bls.w	8002262 <Lb_printf+0x226>
 80020c4:	2a78      	cmp	r2, #120	; 0x78
 80020c6:	f000 80cf 	beq.w	8002268 <Lb_printf+0x22c>
 80020ca:	2a73      	cmp	r2, #115	; 0x73
 80020cc:	f000 80cf 	beq.w	800226e <Lb_printf+0x232>
 80020d0:	2a25      	cmp	r2, #37	; 0x25
 80020d2:	f000 80cf 	beq.w	8002274 <Lb_printf+0x238>
 80020d6:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80020d8:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80020dc:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80020e0:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80020e2:	2a01      	cmp	r2, #1
 80020e4:	f240 80c8 	bls.w	8002278 <Lb_printf+0x23c>
 80020e8:	2978      	cmp	r1, #120	; 0x78
 80020ea:	f000 80c8 	beq.w	800227e <Lb_printf+0x242>
 80020ee:	2973      	cmp	r1, #115	; 0x73
 80020f0:	f000 80c8 	beq.w	8002284 <Lb_printf+0x248>
 80020f4:	2925      	cmp	r1, #37	; 0x25
 80020f6:	f000 80c8 	beq.w	800228a <Lb_printf+0x24e>
 80020fa:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80020fc:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002100:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002104:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002106:	2901      	cmp	r1, #1
 8002108:	f240 80c1 	bls.w	800228e <Lb_printf+0x252>
 800210c:	2a78      	cmp	r2, #120	; 0x78
 800210e:	f000 80c1 	beq.w	8002294 <Lb_printf+0x258>
 8002112:	2a73      	cmp	r2, #115	; 0x73
 8002114:	f000 80c1 	beq.w	800229a <Lb_printf+0x25e>
 8002118:	2a25      	cmp	r2, #37	; 0x25
 800211a:	f000 80c1 	beq.w	80022a0 <Lb_printf+0x264>
 800211e:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002120:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002124:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002128:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800212a:	2a01      	cmp	r2, #1
 800212c:	f240 80ba 	bls.w	80022a4 <Lb_printf+0x268>
 8002130:	2978      	cmp	r1, #120	; 0x78
 8002132:	f000 80ba 	beq.w	80022aa <Lb_printf+0x26e>
 8002136:	2973      	cmp	r1, #115	; 0x73
 8002138:	f000 80ba 	beq.w	80022b0 <Lb_printf+0x274>
 800213c:	2925      	cmp	r1, #37	; 0x25
 800213e:	f000 80ba 	beq.w	80022b6 <Lb_printf+0x27a>
 8002142:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002144:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002148:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800214c:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800214e:	2901      	cmp	r1, #1
 8002150:	f240 80b3 	bls.w	80022ba <Lb_printf+0x27e>
 8002154:	2a78      	cmp	r2, #120	; 0x78
 8002156:	f000 80b3 	beq.w	80022c0 <Lb_printf+0x284>
 800215a:	2a73      	cmp	r2, #115	; 0x73
 800215c:	f000 80b3 	beq.w	80022c6 <Lb_printf+0x28a>
 8002160:	2a25      	cmp	r2, #37	; 0x25
 8002162:	f000 80b3 	beq.w	80022cc <Lb_printf+0x290>
 8002166:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002168:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800216c:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 8002170:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002172:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002176:	f240 80ab 	bls.w	80022d0 <Lb_printf+0x294>
 800217a:	2978      	cmp	r1, #120	; 0x78
 800217c:	f000 80ab 	beq.w	80022d6 <Lb_printf+0x29a>
 8002180:	2973      	cmp	r1, #115	; 0x73
 8002182:	f000 80ab 	beq.w	80022dc <Lb_printf+0x2a0>
 8002186:	2925      	cmp	r1, #37	; 0x25
 8002188:	f000 80ab 	beq.w	80022e2 <Lb_printf+0x2a6>
 800218c:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800218e:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002192:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8002196:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002198:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800219c:	f240 80a3 	bls.w	80022e6 <Lb_printf+0x2aa>
 80021a0:	2a78      	cmp	r2, #120	; 0x78
 80021a2:	f000 80a3 	beq.w	80022ec <Lb_printf+0x2b0>
 80021a6:	2a73      	cmp	r2, #115	; 0x73
 80021a8:	f000 80a3 	beq.w	80022f2 <Lb_printf+0x2b6>
 80021ac:	2a25      	cmp	r2, #37	; 0x25
 80021ae:	f000 80a3 	beq.w	80022f8 <Lb_printf+0x2bc>
 80021b2:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80021b4:	f88d 200d 	strb.w	r2, [sp, #13]
 80021b8:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80021bc:	1c5c      	adds	r4, r3, #1
 80021be:	2864      	cmp	r0, #100	; 0x64
 80021c0:	d02b      	beq.n	800221a <Lb_printf+0x1de>
 80021c2:	d815      	bhi.n	80021f0 <Lb_printf+0x1b4>
 80021c4:	2825      	cmp	r0, #37	; 0x25
 80021c6:	d01f      	beq.n	8002208 <Lb_printf+0x1cc>
 80021c8:	2863      	cmp	r0, #99	; 0x63
 80021ca:	f47f af47 	bne.w	800205c <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80021ce:	f899 0000 	ldrb.w	r0, [r9]
 80021d2:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 80021d4:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 80021d6:	f109 0904 	add.w	r9, r9, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 80021da:	2800      	cmp	r0, #0
 80021dc:	f47f af42 	bne.w	8002064 <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 80021e0:	b005      	add	sp, #20
 80021e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021e6:	b004      	add	sp, #16
 80021e8:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80021ea:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 80021ec:	3401      	adds	r4, #1
 80021ee:	e735      	b.n	800205c <Lb_printf+0x20>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80021f0:	2873      	cmp	r0, #115	; 0x73
 80021f2:	d00b      	beq.n	800220c <Lb_printf+0x1d0>
 80021f4:	2878      	cmp	r0, #120	; 0x78
 80021f6:	f47f af31 	bne.w	800205c <Lb_printf+0x20>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 80021fa:	f8d9 1000 	ldr.w	r1, [r9]
 80021fe:	a801      	add	r0, sp, #4
 8002200:	f109 0904 	add.w	r9, r9, #4
 8002204:	47b0      	blx	r6
					break;
 8002206:	e729      	b.n	800205c <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8002208:	47a8      	blx	r5
 800220a:	e727      	b.n	800205c <Lb_printf+0x20>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 800220c:	f8d9 1000 	ldr.w	r1, [r9]
 8002210:	a801      	add	r0, sp, #4
 8002212:	f109 0904 	add.w	r9, r9, #4
 8002216:	47b8      	blx	r7
 					break;
 8002218:	e720      	b.n	800205c <Lb_printf+0x20>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800221a:	f8d9 1000 	ldr.w	r1, [r9]
 800221e:	a801      	add	r0, sp, #4
 8002220:	f109 0904 	add.w	r9, r9, #4
 8002224:	47c0      	blx	r8
					break;
 8002226:	e719      	b.n	800205c <Lb_printf+0x20>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002228:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800222a:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800222c:	aa04      	add	r2, sp, #16
 800222e:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 8002230:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8002232:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 8002236:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 800223a:	e7bf      	b.n	80021bc <Lb_printf+0x180>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800223c:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800223e:	2078      	movs	r0, #120	; 0x78
 8002240:	e7f4      	b.n	800222c <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8002242:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002244:	2073      	movs	r0, #115	; 0x73
 8002246:	e7f1      	b.n	800222c <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8002248:	2401      	movs	r4, #1
 800224a:	e7ef      	b.n	800222c <Lb_printf+0x1f0>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800224c:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800224e:	2402      	movs	r4, #2
 8002250:	e7ec      	b.n	800222c <Lb_printf+0x1f0>
 8002252:	2402      	movs	r4, #2
 8002254:	2078      	movs	r0, #120	; 0x78
 8002256:	e7e9      	b.n	800222c <Lb_printf+0x1f0>
 8002258:	2402      	movs	r4, #2
 800225a:	2073      	movs	r0, #115	; 0x73
 800225c:	e7e6      	b.n	800222c <Lb_printf+0x1f0>
 800225e:	2402      	movs	r4, #2
 8002260:	e7e4      	b.n	800222c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002262:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002264:	2403      	movs	r4, #3
 8002266:	e7e1      	b.n	800222c <Lb_printf+0x1f0>
 8002268:	2403      	movs	r4, #3
 800226a:	2078      	movs	r0, #120	; 0x78
 800226c:	e7de      	b.n	800222c <Lb_printf+0x1f0>
 800226e:	2403      	movs	r4, #3
 8002270:	2073      	movs	r0, #115	; 0x73
 8002272:	e7db      	b.n	800222c <Lb_printf+0x1f0>
 8002274:	2403      	movs	r4, #3
 8002276:	e7d9      	b.n	800222c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002278:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800227a:	2404      	movs	r4, #4
 800227c:	e7d6      	b.n	800222c <Lb_printf+0x1f0>
 800227e:	2404      	movs	r4, #4
 8002280:	2078      	movs	r0, #120	; 0x78
 8002282:	e7d3      	b.n	800222c <Lb_printf+0x1f0>
 8002284:	2404      	movs	r4, #4
 8002286:	2073      	movs	r0, #115	; 0x73
 8002288:	e7d0      	b.n	800222c <Lb_printf+0x1f0>
 800228a:	2404      	movs	r4, #4
 800228c:	e7ce      	b.n	800222c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800228e:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002290:	2405      	movs	r4, #5
 8002292:	e7cb      	b.n	800222c <Lb_printf+0x1f0>
 8002294:	2405      	movs	r4, #5
 8002296:	2078      	movs	r0, #120	; 0x78
 8002298:	e7c8      	b.n	800222c <Lb_printf+0x1f0>
 800229a:	2405      	movs	r4, #5
 800229c:	2073      	movs	r0, #115	; 0x73
 800229e:	e7c5      	b.n	800222c <Lb_printf+0x1f0>
 80022a0:	2405      	movs	r4, #5
 80022a2:	e7c3      	b.n	800222c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022a4:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022a6:	2406      	movs	r4, #6
 80022a8:	e7c0      	b.n	800222c <Lb_printf+0x1f0>
 80022aa:	2406      	movs	r4, #6
 80022ac:	2078      	movs	r0, #120	; 0x78
 80022ae:	e7bd      	b.n	800222c <Lb_printf+0x1f0>
 80022b0:	2406      	movs	r4, #6
 80022b2:	2073      	movs	r0, #115	; 0x73
 80022b4:	e7ba      	b.n	800222c <Lb_printf+0x1f0>
 80022b6:	2406      	movs	r4, #6
 80022b8:	e7b8      	b.n	800222c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022ba:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022bc:	2407      	movs	r4, #7
 80022be:	e7b5      	b.n	800222c <Lb_printf+0x1f0>
 80022c0:	2407      	movs	r4, #7
 80022c2:	2078      	movs	r0, #120	; 0x78
 80022c4:	e7b2      	b.n	800222c <Lb_printf+0x1f0>
 80022c6:	2407      	movs	r4, #7
 80022c8:	2073      	movs	r0, #115	; 0x73
 80022ca:	e7af      	b.n	800222c <Lb_printf+0x1f0>
 80022cc:	2407      	movs	r4, #7
 80022ce:	e7ad      	b.n	800222c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022d0:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022d2:	2408      	movs	r4, #8
 80022d4:	e7aa      	b.n	800222c <Lb_printf+0x1f0>
 80022d6:	2408      	movs	r4, #8
 80022d8:	2078      	movs	r0, #120	; 0x78
 80022da:	e7a7      	b.n	800222c <Lb_printf+0x1f0>
 80022dc:	2408      	movs	r4, #8
 80022de:	2073      	movs	r0, #115	; 0x73
 80022e0:	e7a4      	b.n	800222c <Lb_printf+0x1f0>
 80022e2:	2408      	movs	r4, #8
 80022e4:	e7a2      	b.n	800222c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022e6:	4610      	mov	r0, r2
 80022e8:	2409      	movs	r4, #9
 80022ea:	e79f      	b.n	800222c <Lb_printf+0x1f0>
 80022ec:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022ee:	2078      	movs	r0, #120	; 0x78
 80022f0:	e79c      	b.n	800222c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022f2:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022f4:	2073      	movs	r0, #115	; 0x73
 80022f6:	e799      	b.n	800222c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022f8:	2409      	movs	r4, #9
 80022fa:	e797      	b.n	800222c <Lb_printf+0x1f0>
 80022fc:	20000404 	.word	0x20000404
 8002300:	08001821 	.word	0x08001821
 8002304:	08001859 	.word	0x08001859
 8002308:	08001c89 	.word	0x08001c89
 800230c:	080018bd 	.word	0x080018bd

08002310 <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8002310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8002314:	4cab      	ldr	r4, [pc, #684]	; (80025c4 <Lb_vsprintf+0x2b4>)
	StrPrintBufIndex = 0;
 8002316:	4eac      	ldr	r6, [pc, #688]	; (80025c8 <Lb_vsprintf+0x2b8>)
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8002318:	6020      	str	r0, [r4, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 800231a:	4bac      	ldr	r3, [pc, #688]	; (80025cc <Lb_vsprintf+0x2bc>)
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 800231c:	2000      	movs	r0, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 800231e:	4615      	mov	r5, r2
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8002320:	6030      	str	r0, [r6, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8002322:	2201      	movs	r2, #1



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8002324:	4eaa      	ldr	r6, [pc, #680]	; (80025d0 <Lb_vsprintf+0x2c0>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8002326:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 80025d8 <Lb_vsprintf+0x2c8>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 800232a:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 80025dc <Lb_vsprintf+0x2cc>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800232e:	4fa9      	ldr	r7, [pc, #676]	; (80025d4 <Lb_vsprintf+0x2c4>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8002330:	b085      	sub	sp, #20
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8002332:	701a      	strb	r2, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
	int		i;
	char	*s=fmt;
 8002334:	460c      	mov	r4, r1
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8002336:	7820      	ldrb	r0, [r4, #0]
 8002338:	2800      	cmp	r0, #0
 800233a:	f000 80bc 	beq.w	80024b6 <Lb_vsprintf+0x1a6>
	{
		if (*s=='%')
 800233e:	2825      	cmp	r0, #37	; 0x25
 8002340:	f040 80bc 	bne.w	80024bc <Lb_vsprintf+0x1ac>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002344:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8002346:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002348:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800234c:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 800234e:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002352:	f240 80cc 	bls.w	80024ee <Lb_vsprintf+0x1de>
 8002356:	2a78      	cmp	r2, #120	; 0x78
 8002358:	f000 80d3 	beq.w	8002502 <Lb_vsprintf+0x1f2>
 800235c:	2a73      	cmp	r2, #115	; 0x73
 800235e:	f000 80d3 	beq.w	8002508 <Lb_vsprintf+0x1f8>
 8002362:	2a25      	cmp	r2, #37	; 0x25
 8002364:	f000 80d3 	beq.w	800250e <Lb_vsprintf+0x1fe>
 8002368:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800236a:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800236e:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002372:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002374:	2a01      	cmp	r2, #1
 8002376:	f240 80cc 	bls.w	8002512 <Lb_vsprintf+0x202>
 800237a:	2978      	cmp	r1, #120	; 0x78
 800237c:	f000 80cc 	beq.w	8002518 <Lb_vsprintf+0x208>
 8002380:	2973      	cmp	r1, #115	; 0x73
 8002382:	f000 80cc 	beq.w	800251e <Lb_vsprintf+0x20e>
 8002386:	2925      	cmp	r1, #37	; 0x25
 8002388:	f000 80cc 	beq.w	8002524 <Lb_vsprintf+0x214>
 800238c:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800238e:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002392:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002396:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002398:	2901      	cmp	r1, #1
 800239a:	f240 80c5 	bls.w	8002528 <Lb_vsprintf+0x218>
 800239e:	2a78      	cmp	r2, #120	; 0x78
 80023a0:	f000 80c5 	beq.w	800252e <Lb_vsprintf+0x21e>
 80023a4:	2a73      	cmp	r2, #115	; 0x73
 80023a6:	f000 80c5 	beq.w	8002534 <Lb_vsprintf+0x224>
 80023aa:	2a25      	cmp	r2, #37	; 0x25
 80023ac:	f000 80c5 	beq.w	800253a <Lb_vsprintf+0x22a>
 80023b0:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80023b2:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80023b6:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80023ba:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80023bc:	2a01      	cmp	r2, #1
 80023be:	f240 80be 	bls.w	800253e <Lb_vsprintf+0x22e>
 80023c2:	2978      	cmp	r1, #120	; 0x78
 80023c4:	f000 80be 	beq.w	8002544 <Lb_vsprintf+0x234>
 80023c8:	2973      	cmp	r1, #115	; 0x73
 80023ca:	f000 80be 	beq.w	800254a <Lb_vsprintf+0x23a>
 80023ce:	2925      	cmp	r1, #37	; 0x25
 80023d0:	f000 80be 	beq.w	8002550 <Lb_vsprintf+0x240>
 80023d4:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80023d6:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80023da:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80023de:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80023e0:	2901      	cmp	r1, #1
 80023e2:	f240 80b7 	bls.w	8002554 <Lb_vsprintf+0x244>
 80023e6:	2a78      	cmp	r2, #120	; 0x78
 80023e8:	f000 80b7 	beq.w	800255a <Lb_vsprintf+0x24a>
 80023ec:	2a73      	cmp	r2, #115	; 0x73
 80023ee:	f000 80b7 	beq.w	8002560 <Lb_vsprintf+0x250>
 80023f2:	2a25      	cmp	r2, #37	; 0x25
 80023f4:	f000 80b7 	beq.w	8002566 <Lb_vsprintf+0x256>
 80023f8:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80023fa:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80023fe:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002402:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002404:	2a01      	cmp	r2, #1
 8002406:	f240 80b0 	bls.w	800256a <Lb_vsprintf+0x25a>
 800240a:	2978      	cmp	r1, #120	; 0x78
 800240c:	f000 80b0 	beq.w	8002570 <Lb_vsprintf+0x260>
 8002410:	2973      	cmp	r1, #115	; 0x73
 8002412:	f000 80b0 	beq.w	8002576 <Lb_vsprintf+0x266>
 8002416:	2925      	cmp	r1, #37	; 0x25
 8002418:	f000 80b0 	beq.w	800257c <Lb_vsprintf+0x26c>
 800241c:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800241e:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002422:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002426:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002428:	2901      	cmp	r1, #1
 800242a:	f240 80a9 	bls.w	8002580 <Lb_vsprintf+0x270>
 800242e:	2a78      	cmp	r2, #120	; 0x78
 8002430:	f000 80a9 	beq.w	8002586 <Lb_vsprintf+0x276>
 8002434:	2a73      	cmp	r2, #115	; 0x73
 8002436:	f000 80a9 	beq.w	800258c <Lb_vsprintf+0x27c>
 800243a:	2a25      	cmp	r2, #37	; 0x25
 800243c:	f000 80a9 	beq.w	8002592 <Lb_vsprintf+0x282>
 8002440:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002442:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002446:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 800244a:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800244c:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002450:	f240 80a1 	bls.w	8002596 <Lb_vsprintf+0x286>
 8002454:	2978      	cmp	r1, #120	; 0x78
 8002456:	f000 80a1 	beq.w	800259c <Lb_vsprintf+0x28c>
 800245a:	2973      	cmp	r1, #115	; 0x73
 800245c:	f000 80a1 	beq.w	80025a2 <Lb_vsprintf+0x292>
 8002460:	2925      	cmp	r1, #37	; 0x25
 8002462:	f000 80a1 	beq.w	80025a8 <Lb_vsprintf+0x298>
 8002466:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002468:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800246c:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8002470:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002472:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002476:	f240 8099 	bls.w	80025ac <Lb_vsprintf+0x29c>
 800247a:	2a78      	cmp	r2, #120	; 0x78
 800247c:	f000 8099 	beq.w	80025b2 <Lb_vsprintf+0x2a2>
 8002480:	2a73      	cmp	r2, #115	; 0x73
 8002482:	f000 8099 	beq.w	80025b8 <Lb_vsprintf+0x2a8>
 8002486:	2a25      	cmp	r2, #37	; 0x25
 8002488:	f000 8099 	beq.w	80025be <Lb_vsprintf+0x2ae>
 800248c:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800248e:	f88d 200d 	strb.w	r2, [sp, #13]
 8002492:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8002496:	1c5c      	adds	r4, r3, #1
 8002498:	2864      	cmp	r0, #100	; 0x64
 800249a:	d023      	beq.n	80024e4 <Lb_vsprintf+0x1d4>
 800249c:	d811      	bhi.n	80024c2 <Lb_vsprintf+0x1b2>
 800249e:	2825      	cmp	r0, #37	; 0x25
 80024a0:	d019      	beq.n	80024d6 <Lb_vsprintf+0x1c6>
 80024a2:	2863      	cmp	r0, #99	; 0x63
 80024a4:	f47f af47 	bne.w	8002336 <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80024a8:	7828      	ldrb	r0, [r5, #0]
 80024aa:	47b0      	blx	r6
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 80024ac:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 80024ae:	3504      	adds	r5, #4
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 80024b0:	2800      	cmp	r0, #0
 80024b2:	f47f af44 	bne.w	800233e <Lb_vsprintf+0x2e>
			s++;
		}
	}
	
	return;
}
 80024b6:	b005      	add	sp, #20
 80024b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80024bc:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 80024be:	3401      	adds	r4, #1
 80024c0:	e739      	b.n	8002336 <Lb_vsprintf+0x26>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80024c2:	2873      	cmp	r0, #115	; 0x73
 80024c4:	d009      	beq.n	80024da <Lb_vsprintf+0x1ca>
 80024c6:	2878      	cmp	r0, #120	; 0x78
 80024c8:	f47f af35 	bne.w	8002336 <Lb_vsprintf+0x26>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 80024cc:	6829      	ldr	r1, [r5, #0]
 80024ce:	a801      	add	r0, sp, #4
 80024d0:	3504      	adds	r5, #4
 80024d2:	47b8      	blx	r7
					break;
 80024d4:	e72f      	b.n	8002336 <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80024d6:	47b0      	blx	r6
 80024d8:	e72d      	b.n	8002336 <Lb_vsprintf+0x26>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 80024da:	6829      	ldr	r1, [r5, #0]
 80024dc:	a801      	add	r0, sp, #4
 80024de:	3504      	adds	r5, #4
 80024e0:	47c0      	blx	r8
 					break;
 80024e2:	e728      	b.n	8002336 <Lb_vsprintf+0x26>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 80024e4:	6829      	ldr	r1, [r5, #0]
 80024e6:	a801      	add	r0, sp, #4
 80024e8:	3504      	adds	r5, #4
 80024ea:	47c8      	blx	r9
					break;
 80024ec:	e723      	b.n	8002336 <Lb_vsprintf+0x26>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80024ee:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80024f0:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80024f2:	aa04      	add	r2, sp, #16
 80024f4:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 80024f6:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80024f8:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 80024fc:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8002500:	e7c9      	b.n	8002496 <Lb_vsprintf+0x186>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8002502:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002504:	2078      	movs	r0, #120	; 0x78
 8002506:	e7f4      	b.n	80024f2 <Lb_vsprintf+0x1e2>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8002508:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800250a:	2073      	movs	r0, #115	; 0x73
 800250c:	e7f1      	b.n	80024f2 <Lb_vsprintf+0x1e2>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800250e:	2401      	movs	r4, #1
 8002510:	e7ef      	b.n	80024f2 <Lb_vsprintf+0x1e2>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002512:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002514:	2402      	movs	r4, #2
 8002516:	e7ec      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 8002518:	2402      	movs	r4, #2
 800251a:	2078      	movs	r0, #120	; 0x78
 800251c:	e7e9      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 800251e:	2402      	movs	r4, #2
 8002520:	2073      	movs	r0, #115	; 0x73
 8002522:	e7e6      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 8002524:	2402      	movs	r4, #2
 8002526:	e7e4      	b.n	80024f2 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002528:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800252a:	2403      	movs	r4, #3
 800252c:	e7e1      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 800252e:	2403      	movs	r4, #3
 8002530:	2078      	movs	r0, #120	; 0x78
 8002532:	e7de      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 8002534:	2403      	movs	r4, #3
 8002536:	2073      	movs	r0, #115	; 0x73
 8002538:	e7db      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 800253a:	2403      	movs	r4, #3
 800253c:	e7d9      	b.n	80024f2 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800253e:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002540:	2404      	movs	r4, #4
 8002542:	e7d6      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 8002544:	2404      	movs	r4, #4
 8002546:	2078      	movs	r0, #120	; 0x78
 8002548:	e7d3      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 800254a:	2404      	movs	r4, #4
 800254c:	2073      	movs	r0, #115	; 0x73
 800254e:	e7d0      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 8002550:	2404      	movs	r4, #4
 8002552:	e7ce      	b.n	80024f2 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002554:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002556:	2405      	movs	r4, #5
 8002558:	e7cb      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 800255a:	2405      	movs	r4, #5
 800255c:	2078      	movs	r0, #120	; 0x78
 800255e:	e7c8      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 8002560:	2405      	movs	r4, #5
 8002562:	2073      	movs	r0, #115	; 0x73
 8002564:	e7c5      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 8002566:	2405      	movs	r4, #5
 8002568:	e7c3      	b.n	80024f2 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800256a:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800256c:	2406      	movs	r4, #6
 800256e:	e7c0      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 8002570:	2406      	movs	r4, #6
 8002572:	2078      	movs	r0, #120	; 0x78
 8002574:	e7bd      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 8002576:	2406      	movs	r4, #6
 8002578:	2073      	movs	r0, #115	; 0x73
 800257a:	e7ba      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 800257c:	2406      	movs	r4, #6
 800257e:	e7b8      	b.n	80024f2 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002580:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002582:	2407      	movs	r4, #7
 8002584:	e7b5      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 8002586:	2407      	movs	r4, #7
 8002588:	2078      	movs	r0, #120	; 0x78
 800258a:	e7b2      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 800258c:	2407      	movs	r4, #7
 800258e:	2073      	movs	r0, #115	; 0x73
 8002590:	e7af      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 8002592:	2407      	movs	r4, #7
 8002594:	e7ad      	b.n	80024f2 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002596:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002598:	2408      	movs	r4, #8
 800259a:	e7aa      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 800259c:	2408      	movs	r4, #8
 800259e:	2078      	movs	r0, #120	; 0x78
 80025a0:	e7a7      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 80025a2:	2408      	movs	r4, #8
 80025a4:	2073      	movs	r0, #115	; 0x73
 80025a6:	e7a4      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 80025a8:	2408      	movs	r4, #8
 80025aa:	e7a2      	b.n	80024f2 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80025ac:	4610      	mov	r0, r2
 80025ae:	2409      	movs	r4, #9
 80025b0:	e79f      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 80025b2:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80025b4:	2078      	movs	r0, #120	; 0x78
 80025b6:	e79c      	b.n	80024f2 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80025b8:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80025ba:	2073      	movs	r0, #115	; 0x73
 80025bc:	e799      	b.n	80024f2 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80025be:	2409      	movs	r4, #9
 80025c0:	e797      	b.n	80024f2 <Lb_vsprintf+0x1e2>
 80025c2:	bf00      	nop
 80025c4:	200004bc 	.word	0x200004bc
 80025c8:	20000400 	.word	0x20000400
 80025cc:	20000404 	.word	0x20000404
 80025d0:	08001821 	.word	0x08001821
 80025d4:	08001c89 	.word	0x08001c89
 80025d8:	080018bd 	.word	0x080018bd
 80025dc:	08001859 	.word	0x08001859

080025e0 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 80025e0:	4668      	mov	r0, sp
 80025e2:	f020 0107 	bic.w	r1, r0, #7
 80025e6:	468d      	mov	sp, r1
 80025e8:	b579      	push	{r0, r3, r4, r5, r6, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80025ea:	492a      	ldr	r1, [pc, #168]	; (8002694 <zero_loop+0x62>)
 80025ec:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <zero_loop+0x66>)
 80025ee:	4299      	cmp	r1, r3
 80025f0:	d21b      	bcs.n	800262a <Hw_StartUp_Init+0x4a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 80025f2:	1cda      	adds	r2, r3, #3
 80025f4:	1d0c      	adds	r4, r1, #4
 80025f6:	1b15      	subs	r5, r2, r4
 80025f8:	4828      	ldr	r0, [pc, #160]	; (800269c <zero_loop+0x6a>)
 80025fa:	f025 0203 	bic.w	r2, r5, #3
 80025fe:	1d16      	adds	r6, r2, #4
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 8002600:	6805      	ldr	r5, [r0, #0]
 8002602:	2304      	movs	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002604:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8002606:	600d      	str	r5, [r1, #0]
 8002608:	f3c2 0280 	ubfx	r2, r2, #2, #1
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800260c:	d00d      	beq.n	800262a <Hw_StartUp_Init+0x4a>
 800260e:	b122      	cbz	r2, 800261a <Hw_StartUp_Init+0x3a>
	{
		*(pulDest++) = *(pulSrc++);
 8002610:	6842      	ldr	r2, [r0, #4]
 8002612:	2308      	movs	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002614:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8002616:	6022      	str	r2, [r4, #0]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002618:	d007      	beq.n	800262a <Hw_StartUp_Init+0x4a>
	{
		*(pulDest++) = *(pulSrc++);
 800261a:	581d      	ldr	r5, [r3, r0]
 800261c:	1d1a      	adds	r2, r3, #4
 800261e:	505d      	str	r5, [r3, r1]
 8002620:	5884      	ldr	r4, [r0, r2]
 8002622:	3308      	adds	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002624:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8002626:	508c      	str	r4, [r1, r2]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002628:	d1f7      	bne.n	800261a <Hw_StartUp_Init+0x3a>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 800262a:	481e      	ldr	r0, [pc, #120]	; (80026a4 <zero_loop+0x72>)
 800262c:	491e      	ldr	r1, [pc, #120]	; (80026a8 <zero_loop+0x76>)
 800262e:	f04f 0200 	mov.w	r2, #0

08002632 <zero_loop>:
 8002632:	4288      	cmp	r0, r1
 8002634:	bfb8      	it	lt
 8002636:	f840 2b04 	strlt.w	r2, [r0], #4
 800263a:	f6ff affa 	blt.w	8002632 <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 800263e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002642:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002646:	6811      	ldr	r1, [r2, #0]
 8002648:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800264c:	f441 3080 	orr.w	r0, r1, #65536	; 0x10000
 8002650:	6010      	str	r0, [r2, #0]
 8002652:	e004      	b.n	800265e <zero_loop+0x2c>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8002654:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8002656:	0381      	lsls	r1, r0, #14
 8002658:	d405      	bmi.n	8002666 <zero_loop+0x34>
 800265a:	3b01      	subs	r3, #1
 800265c:	d003      	beq.n	8002666 <zero_loop+0x34>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 800265e:	6811      	ldr	r1, [r2, #0]
 8002660:	3b01      	subs	r3, #1
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8002662:	0388      	lsls	r0, r1, #14
 8002664:	d5f6      	bpl.n	8002654 <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8002666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800266a:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800266e:	680a      	ldr	r2, [r1, #0]
 8002670:	f042 0010 	orr.w	r0, r2, #16
 8002674:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 8002676:	680b      	ldr	r3, [r1, #0]
 8002678:	f023 0203 	bic.w	r2, r3, #3
 800267c:	600a      	str	r2, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 800267e:	6808      	ldr	r0, [r1, #0]
 8002680:	f040 0302 	orr.w	r3, r0, #2
 8002684:	600b      	str	r3, [r1, #0]


    main();
 8002686:	4906      	ldr	r1, [pc, #24]	; (80026a0 <zero_loop+0x6e>)
 8002688:	4788      	blx	r1

}
 800268a:	e8bd 4079 	ldmia.w	sp!, {r0, r3, r4, r5, r6, lr}
 800268e:	4685      	mov	sp, r0
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000
 8002698:	2000030c 	.word	0x2000030c
 800269c:	08008d18 	.word	0x08008d18
 80026a0:	08000f51 	.word	0x08000f51
 80026a4:	20000400 	.word	0x20000400
 80026a8:	20001700 	.word	0x20001700

080026ac <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 80026ae:	f642 1349 	movw	r3, #10569	; 0x2949
 80026b2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80026b6:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 80026b8:	f642 3085 	movw	r0, #11141	; 0x2b85
 80026bc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80026c0:	4780      	blx	r0
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80026c2:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80026c6:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80026ca:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 80026ce:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 80026d2:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80026d6:	f241 0104 	movw	r1, #4100	; 0x1004
 80026da:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80026de:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 80026e2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80026e6:	f2c3 3044 	movt	r0, #13124	; 0x3344
 80026ea:	f2c4 0101 	movt	r1, #16385	; 0x4001
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80026ee:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80026f2:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 80026f6:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 80026fa:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 80026fe:	f643 03a1 	movw	r3, #14497	; 0x38a1
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8002702:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 8002706:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800270a:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800270c:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800270e:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8002710:	6008      	str	r0, [r1, #0]
	
	Hw_DMA_Init();
 8002712:	4798      	blx	r3
	Hw_Uart_Init();
 8002714:	f642 015d 	movw	r1, #10333	; 0x285d
 8002718:	f6c0 0100 	movt	r1, #2048	; 0x800
 800271c:	4788      	blx	r1
	Hw_Led_Init();
 800271e:	f642 10dd 	movw	r0, #10717	; 0x29dd
 8002722:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002726:	4780      	blx	r0
	Hw_Timer_Init();
 8002728:	f642 32d5 	movw	r2, #11221	; 0x2bd5
 800272c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002730:	4790      	blx	r2
	Hw_Si47xx_Init();
 8002732:	f243 0331 	movw	r3, #12337	; 0x3031
 8002736:	f6c0 0300 	movt	r3, #2048	; 0x800
 800273a:	4798      	blx	r3
	Hw_N5110G_Init();
 800273c:	f243 2159 	movw	r1, #12889	; 0x3259
 8002740:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002744:	4788      	blx	r1
	Hw_I2C_Init();
 8002746:	f642 7025 	movw	r0, #12069	; 0x2f25
 800274a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800274e:	4780      	blx	r0
	
	Hw_VCom_Init();
 8002750:	f642 62f9 	movw	r2, #12025	; 0x2ef9
 8002754:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002758:	4790      	blx	r2

	Hw_IMU_Init();
 800275a:	f244 432d 	movw	r3, #17453	; 0x442d
 800275e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002762:	4798      	blx	r3
 8002764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002766:	bf00      	nop

08002768 <Hw_Wait>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
 8002768:	b082      	sub	sp, #8
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 800276a:	2300      	movs	r3, #0
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	9901      	ldr	r1, [sp, #4]
 8002770:	4288      	cmp	r0, r1
 8002772:	d905      	bls.n	8002780 <Hw_Wait+0x18>
 8002774:	9a01      	ldr	r2, [sp, #4]
 8002776:	1c53      	adds	r3, r2, #1
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	9901      	ldr	r1, [sp, #4]
 800277c:	4281      	cmp	r1, r0
 800277e:	d3f9      	bcc.n	8002774 <Hw_Wait+0xc>
}
 8002780:	b002      	add	sp, #8
 8002782:	4770      	bx	lr

08002784 <Hw_Wait_ms>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 8002784:	f241 7370 	movw	r3, #6000	; 0x1770
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
 8002788:	b082      	sub	sp, #8
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 800278a:	2100      	movs	r1, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 800278c:	fb03 f000 	mul.w	r0, r3, r0
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8002790:	9101      	str	r1, [sp, #4]
 8002792:	9a01      	ldr	r2, [sp, #4]
 8002794:	4290      	cmp	r0, r2
 8002796:	d905      	bls.n	80027a4 <Hw_Wait_ms+0x20>
 8002798:	9b01      	ldr	r3, [sp, #4]
 800279a:	1c59      	adds	r1, r3, #1
 800279c:	9101      	str	r1, [sp, #4]
 800279e:	9a01      	ldr	r2, [sp, #4]
 80027a0:	4290      	cmp	r0, r2
 80027a2:	d8f9      	bhi.n	8002798 <Hw_Wait_ms+0x14>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
    Hw_Wait_Usec( msec*1000 );
}
 80027a4:	b002      	add	sp, #8
 80027a6:	4770      	bx	lr

080027a8 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80027a8:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80027aa:	f643 0304 	movw	r3, #14340	; 0x3804
 80027ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80027b2:	6818      	ldr	r0, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80027b4:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80027b6:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 80027b8:	f642 2295 	movw	r2, #10901	; 0x2a95
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80027bc:	f801 0d01 	strb.w	r0, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 80027c0:	f6c0 0200 	movt	r2, #2048	; 0x800
 80027c4:	2000      	movs	r0, #0
 80027c6:	4790      	blx	r2
}
 80027c8:	b003      	add	sp, #12
 80027ca:	bd00      	pop	{pc}

080027cc <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 80027cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80027d0:	f241 0618 	movw	r6, #4120	; 0x1018
 80027d4:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80027d8:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 80027da:	f240 43c0 	movw	r3, #1216	; 0x4c0
 80027de:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80027e2:	f643 040c 	movw	r4, #14348	; 0x380c
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80027e6:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 80027ea:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80027ee:	f643 0708 	movw	r7, #14344	; 0x3808
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 80027f2:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 80027f4:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80027f6:	f2c4 0401 	movt	r4, #16385	; 0x4001
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80027fa:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80027fc:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002800:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 8002804:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8002808:	200c      	movs	r0, #12
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800280a:	f240 2171 	movw	r1, #625	; 0x271
 800280e:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8002812:	f24e 1504 	movw	r5, #57604	; 0xe104
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8002816:	f8c6 8000 	str.w	r8, [r6]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800281a:	f2ce 0500 	movt	r5, #57344	; 0xe000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800281e:	6020      	str	r0, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002820:	f8cc 2000 	str.w	r2, [ip]
	REG_USART1_CR3  = 0;
 8002824:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8002828:	6039      	str	r1, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800282a:	682b      	ldr	r3, [r5, #0]
 800282c:	f043 0020 	orr.w	r0, r3, #32
 8002830:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8002832:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8002834:	f642 3399 	movw	r3, #11161	; 0x2b99
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8002838:	f041 0020 	orr.w	r0, r1, #32
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800283c:	f242 71a9 	movw	r1, #10153	; 0x27a9
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8002840:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8002842:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002846:	2025      	movs	r0, #37	; 0x25
 8002848:	f6c0 0300 	movt	r3, #2048	; 0x800
 800284c:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 800284e:	6822      	ldr	r2, [r4, #0]
 8002850:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 8002854:	6021      	str	r1, [r4, #0]
 8002856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800285a:	bf00      	nop

0800285c <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 800285c:	f642 2335 	movw	r3, #10805	; 0x2a35
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8002860:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 8002862:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002866:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002868:	f240 43c0 	movw	r3, #1216	; 0x4c0
 800286c:	2200      	movs	r2, #0
 800286e:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8002872:	f242 74cd 	movw	r4, #10189	; 0x27cd
 8002876:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800287a:	4611      	mov	r1, r2
 800287c:	f6c0 0400 	movt	r4, #2048	; 0x800
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002880:	605a      	str	r2, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8002882:	609a      	str	r2, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002884:	611a      	str	r2, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8002886:	615a      	str	r2, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002888:	61da      	str	r2, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800288a:	621a      	str	r2, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800288e:	62da      	str	r2, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002890:	635a      	str	r2, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8002894:	47a0      	blx	r4
 8002896:	bd10      	pop	{r4, pc}

08002898 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8002898:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 800289a:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 800289c:	b083      	sub	sp, #12
 800289e:	4d08      	ldr	r5, [pc, #32]	; (80028c0 <Hw_Uart_Getch+0x28>)
 80028a0:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 80028a2:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 80028a6:	4620      	mov	r0, r4
 80028a8:	47a8      	blx	r5
 80028aa:	2800      	cmp	r0, #0
 80028ac:	d0fb      	beq.n	80028a6 <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 80028ae:	4620      	mov	r0, r4
 80028b0:	f10d 0107 	add.w	r1, sp, #7
 80028b4:	4a03      	ldr	r2, [pc, #12]	; (80028c4 <Hw_Uart_Getch+0x2c>)
 80028b6:	4790      	blx	r2

	return Uart_GetData;
}
 80028b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80028bc:	b003      	add	sp, #12
 80028be:	bd30      	pop	{r4, r5, pc}
 80028c0:	08002a65 	.word	0x08002a65
 80028c4:	08002b0d 	.word	0x08002b0d

080028c8 <Hw_Uart_Putch>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80028c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028cc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80028d0:	6813      	ldr	r3, [r2, #0]
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	d5fc      	bpl.n	80028d0 <Hw_Uart_Putch+0x8>
    
    REG_USART1_DR = Uart_PutData;
 80028d6:	f643 0004 	movw	r0, #14340	; 0x3804
 80028da:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80028de:	6001      	str	r1, [r0, #0]
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop

080028e4 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 80028e4:	280a      	cmp	r0, #10
 80028e6:	d00d      	beq.n	8002904 <print_byte+0x20>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80028e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028ec:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80028f0:	6813      	ldr	r3, [r2, #0]
 80028f2:	0619      	lsls	r1, r3, #24
 80028f4:	d5fc      	bpl.n	80028f0 <print_byte+0xc>
    
    REG_USART1_DR = Uart_PutData;
 80028f6:	f643 0104 	movw	r1, #14340	; 0x3804
 80028fa:	b2c0      	uxtb	r0, r0
 80028fc:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8002900:	6008      	str	r0, [r1, #0]
 8002902:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8002904:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002908:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800290c:	6813      	ldr	r3, [r2, #0]
 800290e:	061b      	lsls	r3, r3, #24
 8002910:	d5fc      	bpl.n	800290c <print_byte+0x28>
    
    REG_USART1_DR = Uart_PutData;
 8002912:	f643 0104 	movw	r1, #14340	; 0x3804
 8002916:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800291a:	220d      	movs	r2, #13
 800291c:	600a      	str	r2, [r1, #0]
 800291e:	e7e3      	b.n	80028e8 <print_byte+0x4>

08002920 <get_byte>:
#endif    
}


char get_byte(void)
{
 8002920:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 8002922:	f642 0399 	movw	r3, #10393	; 0x2899
 8002926:	2000      	movs	r0, #0
 8002928:	f6c0 0300 	movt	r3, #2048	; 0x800
 800292c:	4798      	blx	r3
#endif
	
	return Ch;
}
 800292e:	bd08      	pop	{r3, pc}

08002930 <get_byte_check>:


char get_byte_check(void)
{
 8002930:	b508      	push	{r3, lr}
	char Ch = FALSE;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 ) Ch = TRUE;	
 8002932:	f642 2365 	movw	r3, #10853	; 0x2a65
 8002936:	2000      	movs	r0, #0
 8002938:	f6c0 0300 	movt	r3, #2048	; 0x800
 800293c:	4798      	blx	r3
#endif
	
	return Ch;
}
 800293e:	3000      	adds	r0, #0
 8002940:	bf18      	it	ne
 8002942:	2001      	movne	r0, #1
 8002944:	bd08      	pop	{r3, pc}
 8002946:	bf00      	nop

08002948 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8002948:	f241 0304 	movw	r3, #4100	; 0x1004
 800294c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002950:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8002952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8002956:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 800295a:	f020 02f0 	bic.w	r2, r0, #240	; 0xf0
 800295e:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8002960:	6818      	ldr	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8002962:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8002966:	f440 12e8 	orr.w	r2, r0, #1900544	; 0x1d0000
 800296a:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800296c:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800296e:	4608      	mov	r0, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8002970:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002974:	600a      	str	r2, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8002976:	6801      	ldr	r1, [r0, #0]
 8002978:	018b      	lsls	r3, r1, #6
 800297a:	d5fc      	bpl.n	8002976 <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 800297c:	f241 0304 	movw	r3, #4100	; 0x1004
 8002980:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002984:	6818      	ldr	r0, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8002986:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8002988:	f020 0103 	bic.w	r1, r0, #3
 800298c:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	f040 0102 	orr.w	r1, r0, #2
 8002994:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 800299c:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 80029a4:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 80029ac:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 80029b4:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	6018      	str	r0, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 80029ba:	6813      	ldr	r3, [r2, #0]
 80029bc:	f003 010c 	and.w	r1, r3, #12
 80029c0:	2908      	cmp	r1, #8
 80029c2:	d1fa      	bne.n	80029ba <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 80029c4:	f241 0018 	movw	r0, #4120	; 0x1018
 80029c8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80029cc:	6802      	ldr	r2, [r0, #0]
 80029ce:	f442 4380 	orr.w	r3, r2, #16384	; 0x4000
 80029d2:	f043 011d 	orr.w	r1, r3, #29
 80029d6:	6001      	str	r1, [r0, #0]
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop

080029dc <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80029dc:	2204      	movs	r2, #4
 80029de:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80029e2:	6811      	ldr	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80029e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80029e8:	f021 60e0 	bic.w	r0, r1, #117440512	; 0x7000000
 80029ec:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 80029ee:	6811      	ldr	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80029f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
 80029f4:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 80029f8:	6010      	str	r0, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80029fa:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80029fc:	f640 420c 	movw	r2, #3084	; 0xc0c
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8002a00:	f421 4070 	bic.w	r0, r1, #61440	; 0xf000
 8002a04:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8002a06:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8002a08:	f2c4 0201 	movt	r2, #16385	; 0x4001
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8002a0c:	f441 5040 	orr.w	r0, r1, #12288	; 0x3000
 8002a10:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	6019      	str	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8002a16:	6813      	ldr	r3, [r2, #0]
 8002a18:	f043 0008 	orr.w	r0, r3, #8
 8002a1c:	6010      	str	r0, [r2, #0]
 8002a1e:	4770      	bx	lr

08002a20 <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 8002a20:	b938      	cbnz	r0, 8002a32 <Hw_Led_Toggle+0x12>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 8002a22:	f640 430c 	movw	r3, #3084	; 0xc0c
 8002a26:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	f082 0008 	eor.w	r0, r2, #8
 8002a30:	6018      	str	r0, [r3, #0]
 8002a32:	4770      	bx	lr

08002a34 <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8002a34:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002a38:	f240 6204 	movw	r2, #1540	; 0x604
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002a42:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002a46:	800b      	strh	r3, [r1, #0]
 8002a48:	8013      	strh	r3, [r2, #0]
 8002a4a:	804b      	strh	r3, [r1, #2]
 8002a4c:	8053      	strh	r3, [r2, #2]
 8002a4e:	808b      	strh	r3, [r1, #4]
 8002a50:	8093      	strh	r3, [r2, #4]
 8002a52:	80cb      	strh	r3, [r1, #6]
 8002a54:	80d3      	strh	r3, [r2, #6]
 8002a56:	810b      	strh	r3, [r1, #8]
 8002a58:	8113      	strh	r3, [r2, #8]
 8002a5a:	814b      	strh	r3, [r1, #10]
 8002a5c:	8153      	strh	r3, [r2, #10]
 8002a5e:	818b      	strh	r3, [r1, #12]
 8002a60:	8193      	strh	r3, [r2, #12]
 8002a62:	4770      	bx	lr

08002a64 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HW_UART_Q_VAILD+0x28>)
 8002a66:	490a      	ldr	r1, [pc, #40]	; (8002a90 <HW_UART_Q_VAILD+0x2c>)
 8002a68:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8002a6c:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
 8002a70:	201f      	movs	r0, #31
 8002a72:	1ad2      	subs	r2, r2, r3
 8002a74:	3220      	adds	r2, #32
 8002a76:	f2c8 0000 	movt	r0, #32768	; 0x8000
 8002a7a:	4010      	ands	r0, r2
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	db00      	blt.n	8002a82 <HW_UART_Q_VAILD+0x1e>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8002a80:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002a82:	3801      	subs	r0, #1
 8002a84:	f060 011f 	orn	r1, r0, #31
 8002a88:	1c48      	adds	r0, r1, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8002a8a:	4770      	bx	lr
 8002a8c:	20000604 	.word	0x20000604
 8002a90:	200005f4 	.word	0x200005f4

08002a94 <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002a94:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <Hw_Uart_Q_Push+0x6c>)
 8002a96:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <Hw_Uart_Q_Push+0x70>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8002a98:	b4f0      	push	{r4, r5, r6, r7}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002a9a:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 8002a9e:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 8002aa2:	b22c      	sxth	r4, r5
 8002aa4:	231f      	movs	r3, #31
 8002aa6:	1ba6      	subs	r6, r4, r6
 8002aa8:	3620      	adds	r6, #32
 8002aaa:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8002aae:	4033      	ands	r3, r6
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	db18      	blt.n	8002ae6 <Hw_Uart_Q_Push+0x52>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8002ab4:	2b1f      	cmp	r3, #31
 8002ab6:	d01c      	beq.n	8002af2 <Hw_Uart_Q_Push+0x5e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8002ab8:	3501      	adds	r5, #1
 8002aba:	b2ad      	uxth	r5, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8002abc:	231f      	movs	r3, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8002abe:	780e      	ldrb	r6, [r1, #0]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8002ac0:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8002ac4:	b229      	sxth	r1, r5
 8002ac6:	400b      	ands	r3, r1
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8002ac8:	eb00 1740 	add.w	r7, r0, r0, lsl #5
 8002acc:	490e      	ldr	r1, [pc, #56]	; (8002b08 <Hw_Uart_Q_Push+0x74>)
 8002ace:	193c      	adds	r4, r7, r4
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8002ad0:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8002ad2:	550e      	strb	r6, [r1, r4]
 8002ad4:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8002ad8:	db0d      	blt.n	8002af6 <Hw_Uart_Q_Push+0x62>
 8002ada:	4909      	ldr	r1, [pc, #36]	; (8002b00 <Hw_Uart_Q_Push+0x6c>)
 8002adc:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

	return TRUE;
 8002ae0:	2001      	movs	r0, #1
}
 8002ae2:	bcf0      	pop	{r4, r5, r6, r7}
 8002ae4:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f063 031f 	orn	r3, r3, #31
 8002aec:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8002aee:	2b1f      	cmp	r3, #31
 8002af0:	d1e2      	bne.n	8002ab8 <Hw_Uart_Q_Push+0x24>
 8002af2:	2000      	movs	r0, #0
 8002af4:	e7f5      	b.n	8002ae2 <Hw_Uart_Q_Push+0x4e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8002af6:	1e5a      	subs	r2, r3, #1
 8002af8:	f062 031f 	orn	r3, r2, #31
 8002afc:	3301      	adds	r3, #1
 8002afe:	e7ec      	b.n	8002ada <Hw_Uart_Q_Push+0x46>
 8002b00:	20000604 	.word	0x20000604
 8002b04:	200005f4 	.word	0x200005f4
 8002b08:	200004fc 	.word	0x200004fc

08002b0c <Hw_Uart_Q_Pop>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002b0c:	4a1a      	ldr	r2, [pc, #104]	; (8002b78 <Hw_Uart_Q_Pop+0x6c>)
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <Hw_Uart_Q_Pop+0x70>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8002b10:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002b12:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 8002b16:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 8002b1a:	b22c      	sxth	r4, r5
 8002b1c:	231f      	movs	r3, #31
 8002b1e:	1b36      	subs	r6, r6, r4
 8002b20:	3620      	adds	r6, #32
 8002b22:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8002b26:	4033      	ands	r3, r6
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	db17      	blt.n	8002b5c <Hw_Uart_Q_Pop+0x50>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8002b2c:	b1e3      	cbz	r3, 8002b68 <Hw_Uart_Q_Pop+0x5c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8002b2e:	eb00 1640 	add.w	r6, r0, r0, lsl #5
 8002b32:	3501      	adds	r5, #1
 8002b34:	1934      	adds	r4, r6, r4
 8002b36:	4e12      	ldr	r6, [pc, #72]	; (8002b80 <Hw_Uart_Q_Pop+0x74>)
 8002b38:	b2ad      	uxth	r5, r5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8002b3a:	231f      	movs	r3, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8002b3c:	5d34      	ldrb	r4, [r6, r4]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8002b3e:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8002b42:	b22e      	sxth	r6, r5
 8002b44:	4033      	ands	r3, r6
 8002b46:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8002b48:	700c      	strb	r4, [r1, #0]
 8002b4a:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8002b4e:	db0d      	blt.n	8002b6c <Hw_Uart_Q_Pop+0x60>
 8002b50:	4909      	ldr	r1, [pc, #36]	; (8002b78 <Hw_Uart_Q_Pop+0x6c>)
 8002b52:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

    return TRUE;
 8002b56:	2001      	movs	r0, #1
}
 8002b58:	bc70      	pop	{r4, r5, r6}
 8002b5a:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	f063 031f 	orn	r3, r3, #31
 8002b62:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e2      	bne.n	8002b2e <Hw_Uart_Q_Pop+0x22>
 8002b68:	4618      	mov	r0, r3
 8002b6a:	e7f5      	b.n	8002b58 <Hw_Uart_Q_Pop+0x4c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8002b6c:	1e59      	subs	r1, r3, #1
 8002b6e:	f061 021f 	orn	r2, r1, #31
 8002b72:	1c53      	adds	r3, r2, #1
 8002b74:	e7ec      	b.n	8002b50 <Hw_Uart_Q_Pop+0x44>
 8002b76:	bf00      	nop
 8002b78:	200005f4 	.word	0x200005f4
 8002b7c:	20000604 	.word	0x20000604
 8002b80:	200004fc 	.word	0x200004fc

08002b84 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8002b84:	f640 0300 	movw	r3, #2048	; 0x800
 8002b88:	f64e 5208 	movw	r2, #60680	; 0xed08
 8002b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b90:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4770      	bx	lr

08002b98 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8002b98:	f640 0300 	movw	r3, #2048	; 0x800
 8002b9c:	3010      	adds	r0, #16
 8002b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ba2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8002ba6:	4770      	bx	lr

08002ba8 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8002ba8:	f640 0300 	movw	r3, #2048	; 0x800
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8002bac:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8002bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bb2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8002bb6:	4770      	bx	lr

08002bb8 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 8002bb8:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8002bba:	f642 6191 	movw	r1, #11921	; 0x2e91
 8002bbe:	f642 33a9 	movw	r3, #11177	; 0x2ba9
 8002bc2:	203c      	movs	r0, #60	; 0x3c
 8002bc4:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002bce:	4798      	blx	r3
 8002bd0:	bd08      	pop	{r3, pc}
 8002bd2:	bf00      	nop

08002bd4 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8002bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8002bd8:	4d40      	ldr	r5, [pc, #256]	; (8002cdc <Hw_Timer_Init+0x108>)
 8002bda:	782b      	ldrb	r3, [r5, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d07b      	beq.n	8002cd8 <Hw_Timer_Init+0x104>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8002be0:	483f      	ldr	r0, [pc, #252]	; (8002ce0 <Hw_Timer_Init+0x10c>)
 8002be2:	2400      	movs	r4, #0
 8002be4:	7004      	strb	r4, [r0, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002be6:	8044      	strh	r4, [r0, #2]
		Timer_Tbl[i].Timer_Init = 0;
 8002be8:	8084      	strh	r4, [r0, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 8002bea:	6084      	str	r4, [r0, #8]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8002bec:	7404      	strb	r4, [r0, #16]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002bee:	8244      	strh	r4, [r0, #18]
		Timer_Tbl[i].Timer_Init = 0;
 8002bf0:	8284      	strh	r4, [r0, #20]
		Timer_Tbl[i].TmrFnct    = NULL;
 8002bf2:	6184      	str	r4, [r0, #24]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8002bf4:	f880 4020 	strb.w	r4, [r0, #32]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002bf8:	8444      	strh	r4, [r0, #34]	; 0x22
		Timer_Tbl[i].Timer_Init = 0;
 8002bfa:	8484      	strh	r4, [r0, #36]	; 0x24
		Timer_Tbl[i].TmrFnct    = NULL;
 8002bfc:	6284      	str	r4, [r0, #40]	; 0x28
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8002bfe:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002c02:	8644      	strh	r4, [r0, #50]	; 0x32
		Timer_Tbl[i].Timer_Init = 0;
 8002c04:	8684      	strh	r4, [r0, #52]	; 0x34
		Timer_Tbl[i].TmrFnct    = NULL;
 8002c06:	6384      	str	r4, [r0, #56]	; 0x38
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8002c08:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002c0c:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
		Timer_Tbl[i].Timer_Init = 0;
 8002c10:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
		Timer_Tbl[i].TmrFnct    = NULL;
 8002c14:	6484      	str	r4, [r0, #72]	; 0x48
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8002c16:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002c1a:	f8a0 4052 	strh.w	r4, [r0, #82]	; 0x52
		Timer_Tbl[i].Timer_Init = 0;
 8002c1e:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
		Timer_Tbl[i].TmrFnct    = NULL;
 8002c22:	6584      	str	r4, [r0, #88]	; 0x58
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8002c24:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002c28:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
		Timer_Tbl[i].Timer_Init = 0;
 8002c2c:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		Timer_Tbl[i].TmrFnct    = NULL;
 8002c30:	6684      	str	r4, [r0, #104]	; 0x68
	}	                   
	
	
	Hw_Timer_SetupISR();
 8002c32:	492c      	ldr	r1, [pc, #176]	; (8002ce4 <Hw_Timer_Init+0x110>)
 8002c34:	4788      	blx	r1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8002c36:	f24e 0614 	movw	r6, #57364	; 0xe014
 8002c3a:	f641 173f 	movw	r7, #6463	; 0x193f
	
	REG_STK_VAL  = 0;	
 8002c3e:	f24e 0018 	movw	r0, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8002c42:	f2ce 0600 	movt	r6, #57344	; 0xe000
 8002c46:	f2c0 0701 	movt	r7, #1
	
	REG_STK_VAL  = 0;	
 8002c4a:	f2ce 0000 	movt	r0, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8002c4e:	f24e 0310 	movw	r3, #57360	; 0xe010
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8002c52:	6037      	str	r7, [r6, #0]
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8002c54:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8002c58:	6004      	str	r4, [r0, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8002c5a:	6819      	ldr	r1, [r3, #0]
void Hw_Timer_MeasureSetup( void )
{
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz
 8002c5c:	f241 0218 	movw	r2, #4120	; 0x1018

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8002c60:	f041 0604 	orr.w	r6, r1, #4
 8002c64:	601e      	str	r6, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8002c66:	681f      	ldr	r7, [r3, #0]
void Hw_Timer_MeasureSetup( void )
{
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz
 8002c68:	f2c4 0202 	movt	r2, #16386	; 0x4002
	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8002c6c:	f047 0002 	orr.w	r0, r7, #2
 8002c70:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8002c72:	6819      	ldr	r1, [r3, #0]
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz
 8002c74:	f642 4c28 	movw	ip, #11304	; 0x2c28
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8002c78:	f041 0601 	orr.w	r6, r1, #1
 8002c7c:	601e      	str	r6, [r3, #0]
void Hw_Timer_MeasureSetup( void )
{
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz
 8002c7e:	f8d2 8000 	ldr.w	r8, [r2]

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
 8002c82:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
void Hw_Timer_MeasureSetup( void )
{
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz
 8002c86:	f448 6800 	orr.w	r8, r8, #2048	; 0x800
 8002c8a:	f8c2 8000 	str.w	r8, [r2]

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz
 8002c8e:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8002c92:	2247      	movs	r2, #71	; 0x47
 8002c94:	f8cc 2000 	str.w	r2, [ip]


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
 8002c98:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002c9c:	2280      	movs	r2, #128	; 0x80
	REG_TIM1_CR2   = 0;					
 8002c9e:	f642 4704 	movw	r7, #11268	; 0x2c04
	REG_TIM1_CCMR2 = 0; 
 8002ca2:	f642 461c 	movw	r6, #11292	; 0x2c1c
	
	REG_TIM1_ARR   = 0xFFFF; 	
 8002ca6:	f642 402c 	movw	r0, #11308	; 0x2c2c

	REG_TIM1_CCER  = 0;	
 8002caa:	f642 4120 	movw	r1, #11296	; 0x2c20
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
 8002cae:	601a      	str	r2, [r3, #0]
	REG_TIM1_CR2   = 0;					
	REG_TIM1_CCMR2 = 0; 
	
	REG_TIM1_ARR   = 0xFFFF; 	
 8002cb0:	f2c4 0001 	movt	r0, #16385	; 0x4001

	REG_TIM1_CCER  = 0;	
 8002cb4:	f2c4 0101 	movt	r1, #16385	; 0x4001

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
	REG_TIM1_CR2   = 0;					
 8002cb8:	f2c4 0701 	movt	r7, #16385	; 0x4001
	REG_TIM1_CCMR2 = 0; 
 8002cbc:	f2c4 0601 	movt	r6, #16385	; 0x4001
	
	REG_TIM1_ARR   = 0xFFFF; 	
 8002cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
	REG_TIM1_CR2   = 0;					
 8002cc4:	603c      	str	r4, [r7, #0]
	REG_TIM1_CCMR2 = 0; 
 8002cc6:	6034      	str	r4, [r6, #0]
	
	REG_TIM1_ARR   = 0xFFFF; 	
 8002cc8:	6002      	str	r2, [r0, #0]

	REG_TIM1_CCER  = 0;	
 8002cca:	600c      	str	r4, [r1, #0]


	SET_BIT( REG_TIM1_CR1, 0 );			// Counter Enable 
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	f040 0101 	orr.w	r1, r0, #1
 8002cd2:	6019      	str	r1, [r3, #0]
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	
	Hw_Timer_MeasureSetup();	

	Excute = 1;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	702b      	strb	r3, [r5, #0]
 8002cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cdc:	20000405 	.word	0x20000405
 8002ce0:	20000408 	.word	0x20000408
 8002ce4:	08002bb9 	.word	0x08002bb9

08002ce8 <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8002ce8:	4b66      	ldr	r3, [pc, #408]	; (8002e84 <Hw_Timer_Tick+0x19c>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 8002cea:	4a67      	ldr	r2, [pc, #412]	; (8002e88 <Hw_Timer_Tick+0x1a0>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8002cec:	6819      	ldr	r1, [r3, #0]
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8002cee:	b510      	push	{r4, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8002cf0:	1c48      	adds	r0, r1, #1
 8002cf2:	6018      	str	r0, [r3, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8002cf4:	8814      	ldrh	r4, [r2, #0]
 8002cf6:	b2a3      	uxth	r3, r4
 8002cf8:	b11b      	cbz	r3, 8002d02 <Hw_Timer_Tick+0x1a>
 8002cfa:	8811      	ldrh	r1, [r2, #0]
 8002cfc:	1e48      	subs	r0, r1, #1
 8002cfe:	b284      	uxth	r4, r0
 8002d00:	8014      	strh	r4, [r2, #0]
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002d02:	4c62      	ldr	r4, [pc, #392]	; (8002e8c <Hw_Timer_Tick+0x1a4>)
 8002d04:	7822      	ldrb	r2, [r4, #0]
 8002d06:	2a01      	cmp	r2, #1
 8002d08:	d01d      	beq.n	8002d46 <Hw_Timer_Tick+0x5e>
 8002d0a:	7c20      	ldrb	r0, [r4, #16]
 8002d0c:	4a5f      	ldr	r2, [pc, #380]	; (8002e8c <Hw_Timer_Tick+0x1a4>)
 8002d0e:	2801      	cmp	r0, #1
 8002d10:	d02b      	beq.n	8002d6a <Hw_Timer_Tick+0x82>
 8002d12:	f894 0020 	ldrb.w	r0, [r4, #32]
 8002d16:	4a5d      	ldr	r2, [pc, #372]	; (8002e8c <Hw_Timer_Tick+0x1a4>)
 8002d18:	2801      	cmp	r0, #1
 8002d1a:	d038      	beq.n	8002d8e <Hw_Timer_Tick+0xa6>
 8002d1c:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002d20:	4a5a      	ldr	r2, [pc, #360]	; (8002e8c <Hw_Timer_Tick+0x1a4>)
 8002d22:	2801      	cmp	r0, #1
 8002d24:	d046      	beq.n	8002db4 <Hw_Timer_Tick+0xcc>
 8002d26:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8002d2a:	4a58      	ldr	r2, [pc, #352]	; (8002e8c <Hw_Timer_Tick+0x1a4>)
 8002d2c:	2801      	cmp	r0, #1
 8002d2e:	d054      	beq.n	8002dda <Hw_Timer_Tick+0xf2>
 8002d30:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8002d34:	4a55      	ldr	r2, [pc, #340]	; (8002e8c <Hw_Timer_Tick+0x1a4>)
 8002d36:	2801      	cmp	r0, #1
 8002d38:	d066      	beq.n	8002e08 <Hw_Timer_Tick+0x120>
 8002d3a:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8002d3e:	4a53      	ldr	r2, [pc, #332]	; (8002e8c <Hw_Timer_Tick+0x1a4>)
 8002d40:	2801      	cmp	r0, #1
 8002d42:	d078      	beq.n	8002e36 <Hw_Timer_Tick+0x14e>
 8002d44:	bd10      	pop	{r4, pc}
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002d46:	8863      	ldrh	r3, [r4, #2]
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	b288      	uxth	r0, r1
 8002d4c:	8060      	strh	r0, [r4, #2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	d1db      	bne.n	8002d0a <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002d52:	7862      	ldrb	r2, [r4, #1]
 8002d54:	2a01      	cmp	r2, #1
 8002d56:	f000 8086 	beq.w	8002e66 <Hw_Timer_Tick+0x17e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002d5a:	88a1      	ldrh	r1, [r4, #4]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002d5c:	68a3      	ldr	r3, [r4, #8]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002d5e:	8061      	strh	r1, [r4, #2]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002d60:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002d62:	7c20      	ldrb	r0, [r4, #16]
 8002d64:	4a49      	ldr	r2, [pc, #292]	; (8002e8c <Hw_Timer_Tick+0x1a4>)
 8002d66:	2801      	cmp	r0, #1
 8002d68:	d1d3      	bne.n	8002d12 <Hw_Timer_Tick+0x2a>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002d6a:	8a51      	ldrh	r1, [r2, #18]
 8002d6c:	1e4b      	subs	r3, r1, #1
 8002d6e:	b298      	uxth	r0, r3
 8002d70:	8250      	strh	r0, [r2, #18]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d1cd      	bne.n	8002d12 <Hw_Timer_Tick+0x2a>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002d76:	7c51      	ldrb	r1, [r2, #17]
 8002d78:	2901      	cmp	r1, #1
 8002d7a:	d072      	beq.n	8002e62 <Hw_Timer_Tick+0x17a>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002d7c:	8aa2      	ldrh	r2, [r4, #20]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002d7e:	69a3      	ldr	r3, [r4, #24]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002d80:	8262      	strh	r2, [r4, #18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002d82:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002d84:	f894 0020 	ldrb.w	r0, [r4, #32]
 8002d88:	4a40      	ldr	r2, [pc, #256]	; (8002e8c <Hw_Timer_Tick+0x1a4>)
 8002d8a:	2801      	cmp	r0, #1
 8002d8c:	d1c6      	bne.n	8002d1c <Hw_Timer_Tick+0x34>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002d8e:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8002d90:	1e4b      	subs	r3, r1, #1
 8002d92:	b298      	uxth	r0, r3
 8002d94:	8450      	strh	r0, [r2, #34]	; 0x22

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d1c0      	bne.n	8002d1c <Hw_Timer_Tick+0x34>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002d9a:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8002d9e:	2901      	cmp	r1, #1
 8002da0:	d06c      	beq.n	8002e7c <Hw_Timer_Tick+0x194>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002da2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002da4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002da6:	8462      	strh	r2, [r4, #34]	; 0x22

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002da8:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002daa:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002dae:	4a37      	ldr	r2, [pc, #220]	; (8002e8c <Hw_Timer_Tick+0x1a4>)
 8002db0:	2801      	cmp	r0, #1
 8002db2:	d1b8      	bne.n	8002d26 <Hw_Timer_Tick+0x3e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002db4:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 8002db6:	1e4b      	subs	r3, r1, #1
 8002db8:	b298      	uxth	r0, r3
 8002dba:	8650      	strh	r0, [r2, #50]	; 0x32

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	d1b2      	bne.n	8002d26 <Hw_Timer_Tick+0x3e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002dc0:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8002dc4:	2901      	cmp	r1, #1
 8002dc6:	d056      	beq.n	8002e76 <Hw_Timer_Tick+0x18e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002dc8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002dcc:	8662      	strh	r2, [r4, #50]	; 0x32

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002dce:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002dd0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8002dd4:	4a2d      	ldr	r2, [pc, #180]	; (8002e8c <Hw_Timer_Tick+0x1a4>)
 8002dd6:	2801      	cmp	r0, #1
 8002dd8:	d1aa      	bne.n	8002d30 <Hw_Timer_Tick+0x48>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002dda:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
 8002dde:	1e4b      	subs	r3, r1, #1
 8002de0:	b298      	uxth	r0, r3
 8002de2:	f8a2 0042 	strh.w	r0, [r2, #66]	; 0x42

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002de6:	2800      	cmp	r0, #0
 8002de8:	d1a2      	bne.n	8002d30 <Hw_Timer_Tick+0x48>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002dea:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
 8002dee:	2901      	cmp	r1, #1
 8002df0:	d03e      	beq.n	8002e70 <Hw_Timer_Tick+0x188>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002df2:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002df6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002df8:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002dfc:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002dfe:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8002e02:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <Hw_Timer_Tick+0x1a4>)
 8002e04:	2801      	cmp	r0, #1
 8002e06:	d198      	bne.n	8002d3a <Hw_Timer_Tick+0x52>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002e08:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
 8002e0c:	1e4b      	subs	r3, r1, #1
 8002e0e:	b298      	uxth	r0, r3
 8002e10:	f8a2 0052 	strh.w	r0, [r2, #82]	; 0x52

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d190      	bne.n	8002d3a <Hw_Timer_Tick+0x52>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002e18:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
 8002e1c:	2901      	cmp	r1, #1
 8002e1e:	d024      	beq.n	8002e6a <Hw_Timer_Tick+0x182>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002e20:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002e24:	6da3      	ldr	r3, [r4, #88]	; 0x58
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002e26:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002e2a:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002e2c:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8002e30:	4a16      	ldr	r2, [pc, #88]	; (8002e8c <Hw_Timer_Tick+0x1a4>)
 8002e32:	2801      	cmp	r0, #1
 8002e34:	d186      	bne.n	8002d44 <Hw_Timer_Tick+0x5c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002e36:	f8b2 1062 	ldrh.w	r1, [r2, #98]	; 0x62
 8002e3a:	1e4b      	subs	r3, r1, #1
 8002e3c:	b298      	uxth	r0, r3
 8002e3e:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002e42:	2800      	cmp	r0, #0
 8002e44:	f47f af7e 	bne.w	8002d44 <Hw_Timer_Tick+0x5c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002e48:	f892 1061 	ldrb.w	r1, [r2, #97]	; 0x61

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002e4c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002e4e:	2901      	cmp	r1, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8002e50:	bf08      	it	eq
 8002e52:	f882 0060 	strbeq.w	r0, [r2, #96]	; 0x60

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002e56:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 8002e5a:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002e5e:	4798      	blx	r3
 8002e60:	bd10      	pop	{r4, pc}

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8002e62:	7410      	strb	r0, [r2, #16]
 8002e64:	e78a      	b.n	8002d7c <Hw_Timer_Tick+0x94>
 8002e66:	7020      	strb	r0, [r4, #0]
 8002e68:	e777      	b.n	8002d5a <Hw_Timer_Tick+0x72>
 8002e6a:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 8002e6e:	e7d7      	b.n	8002e20 <Hw_Timer_Tick+0x138>
 8002e70:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
 8002e74:	e7bd      	b.n	8002df2 <Hw_Timer_Tick+0x10a>
 8002e76:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
 8002e7a:	e7a5      	b.n	8002dc8 <Hw_Timer_Tick+0xe0>
 8002e7c:	f882 0020 	strb.w	r0, [r2, #32]
 8002e80:	e78f      	b.n	8002da2 <Hw_Timer_Tick+0xba>
 8002e82:	bf00      	nop
 8002e84:	20000478 	.word	0x20000478
 8002e88:	2000047c 	.word	0x2000047c
 8002e8c:	20000408 	.word	0x20000408

08002e90 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );
void Hw_Timer_MeasureSetup( void );


void Hw_Timer_ISR(void)
{
 8002e90:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 8002e92:	f642 43e9 	movw	r3, #11497	; 0x2ce9
 8002e96:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002e9a:	4798      	blx	r3
 8002e9c:	bd08      	pop	{r3, pc}
 8002e9e:	bf00      	nop

08002ea0 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8002ea0:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8002ea2:	f240 4408 	movw	r4, #1032	; 0x408
 8002ea6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002eaa:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8002eae:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8002eb0:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8002eb2:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8002eb4:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 8002eb6:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 8002eb8:	8081      	strh	r1, [r0, #4]
}
 8002eba:	bc10      	pop	{r4}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop

08002ec0 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8002ec0:	2806      	cmp	r0, #6
 8002ec2:	d803      	bhi.n	8002ecc <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8002ec4:	4b02      	ldr	r3, [pc, #8]	; (8002ed0 <Hw_Timer_Start+0x10>)
 8002ec6:	0100      	lsls	r0, r0, #4
 8002ec8:	2201      	movs	r2, #1
 8002eca:	541a      	strb	r2, [r3, r0]
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000408 	.word	0x20000408

08002ed4 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8002ed4:	4a03      	ldr	r2, [pc, #12]	; (8002ee4 <Hw_Timer_Delay_ms+0x10>)
 8002ed6:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 8002ed8:	8813      	ldrh	r3, [r2, #0]
 8002eda:	b298      	uxth	r0, r3
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d1fb      	bne.n	8002ed8 <Hw_Timer_Delay_ms+0x4>
}
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	2000047c 	.word	0x2000047c

08002ee8 <Hw_Timer_Get_u16Count_Usec>:
     ARG
     RET
---------------------------------------------------------------------------*/
u16 Hw_Timer_Get_u16Count_Usec( void )
{
	return REG_TIM1_CNT;
 8002ee8:	f642 4324 	movw	r3, #11300	; 0x2c24
 8002eec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ef0:	6818      	ldr	r0, [r3, #0]
}
 8002ef2:	b280      	uxth	r0, r0
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop

08002ef8 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8002ef8:	b508      	push	{r3, lr}
	Set_System();
 8002efa:	f245 2359 	movw	r3, #21081	; 0x5259
 8002efe:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002f02:	4798      	blx	r3
	Set_USBClock();
 8002f04:	f245 2079 	movw	r0, #21113	; 0x5279
 8002f08:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002f0c:	4780      	blx	r0
	USB_Interrupts_Config();
 8002f0e:	f245 21bd 	movw	r1, #21181	; 0x52bd
 8002f12:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002f16:	4788      	blx	r1
	USB_Init();	
 8002f18:	f645 62a5 	movw	r2, #24229	; 0x5ea5
 8002f1c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002f20:	4790      	blx	r2
 8002f22:	bd08      	pop	{r3, pc}

08002f24 <Hw_I2C_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_Init( void )
{
 8002f24:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	#if HW_I2C_USE_SW_I2C == 1
	Hw_I2C_SW_Init();	
	#else
	Hw_I2C_HW_Init();		
 8002f26:	f642 737d 	movw	r3, #12157	; 0x2f7d
 8002f2a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002f2e:	4798      	blx	r3
 8002f30:	bd08      	pop	{r3, pc}
 8002f32:	bf00      	nop

08002f34 <Hw_I2C_HW_IO_Setup>:
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8002f34:	2204      	movs	r2, #4
 8002f36:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002f3a:	6811      	ldr	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8002f3c:	f640 4304 	movw	r3, #3076	; 0xc04
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8002f40:	f041 0002 	orr.w	r0, r1, #2
 8002f44:	6010      	str	r0, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8002f46:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	f022 010f 	bic.w	r1, r2, #15
 8002f50:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	f040 0203 	orr.w	r2, r0, #3
 8002f58:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	f041 000c 	orr.w	r0, r1, #12
 8002f60:	6018      	str	r0, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8002f68:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	f040 0230 	orr.w	r2, r0, #48	; 0x30
 8002f70:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 8002f72:	6819      	ldr	r1, [r3, #0]
 8002f74:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 8002f78:	6018      	str	r0, [r3, #0]
 8002f7a:	4770      	bx	lr

08002f7c <Hw_I2C_HW_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_HW_Init( void )
{
 8002f7c:	b538      	push	{r3, r4, r5, lr}
	u32 SR;


	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	
 8002f7e:	f642 7335 	movw	r3, #12085	; 0x2f35
 8002f82:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002f86:	4798      	blx	r3


	REG_I2C1_CR1 = 0;
 8002f88:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8002f8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002f90:	2500      	movs	r5, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8002f92:	f245 4404 	movw	r4, #21508	; 0x5404
	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	


	REG_I2C1_CR1 = 0;
 8002f96:	601d      	str	r5, [r3, #0]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8002f98:	f2c4 0400 	movt	r4, #16384	; 0x4000
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8002f9c:	f245 401c 	movw	r0, #21532	; 0x541c

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8002fa0:	2524      	movs	r5, #36	; 0x24
 8002fa2:	6025      	str	r5, [r4, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8002fa4:	f2c4 0000 	movt	r0, #16384	; 0x4000
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8002fa8:	f245 4120 	movw	r1, #21536	; 0x5420
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8002fac:	f248 041e 	movw	r4, #32798	; 0x801e
 8002fb0:	6004      	str	r4, [r0, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8002fb2:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002fb6:	2004      	movs	r0, #4


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8002fb8:	f241 021c 	movw	r2, #4124	; 0x101c
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8002fbc:	6008      	str	r0, [r1, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8002fbe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002fc2:	6810      	ldr	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8002fc4:	f245 4114 	movw	r1, #21524	; 0x5414
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8002fc8:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8002fcc:	6010      	str	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8002fce:	6818      	ldr	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8002fd0:	f245 4218 	movw	r2, #21528	; 0x5418
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8002fd4:	f020 0002 	bic.w	r0, r0, #2
 8002fd8:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8002fda:	6818      	ldr	r0, [r3, #0]

	SR = REG_I2C1_SR1;
 8002fdc:	f2c4 0100 	movt	r1, #16384	; 0x4000
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8002fe0:	f040 0001 	orr.w	r0, r0, #1
 8002fe4:	6018      	str	r0, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8002fe6:	f2c4 0200 	movt	r2, #16384	; 0x4000


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8002fea:	680b      	ldr	r3, [r1, #0]
	SR = REG_I2C1_SR2;
 8002fec:	6813      	ldr	r3, [r2, #0]
 8002fee:	bd38      	pop	{r3, r4, r5, pc}

08002ff0 <Hw_Si47xx_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
 8002ff0:	b538      	push	{r3, r4, r5, lr}
	Hw_Wait(100);
 8002ff2:	f242 7569 	movw	r5, #10089	; 0x2769
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8002ff6:	f640 440c 	movw	r4, #3084	; 0xc0c
 8002ffa:	f2c4 0401 	movt	r4, #16385	; 0x4001
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
 8002ffe:	f6c0 0500 	movt	r5, #2048	; 0x800
 8003002:	2064      	movs	r0, #100	; 0x64
 8003004:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8003006:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(100);
 8003008:	2064      	movs	r0, #100	; 0x64
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 800300a:	f043 0120 	orr.w	r1, r3, #32
 800300e:	6021      	str	r1, [r4, #0]
	Hw_Wait(100);
 8003010:	47a8      	blx	r5
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8003012:	6822      	ldr	r2, [r4, #0]
	Hw_Wait(500);	
 8003014:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8003018:	f022 0320 	bic.w	r3, r2, #32
 800301c:	6023      	str	r3, [r4, #0]
	Hw_Wait(500);	
 800301e:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8003020:	6821      	ldr	r1, [r4, #0]
	Hw_Wait(100);
 8003022:	2064      	movs	r0, #100	; 0x64
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
	Hw_Wait(500);	
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8003024:	f041 0220 	orr.w	r2, r1, #32
 8003028:	6022      	str	r2, [r4, #0]
	Hw_Wait(100);
 800302a:	47a8      	blx	r5
 800302c:	bd38      	pop	{r3, r4, r5, pc}
 800302e:	bf00      	nop

08003030 <Hw_Si47xx_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Init( void )
{
 8003030:	b508      	push	{r3, lr}
	Hw_I2C_Init();
 8003032:	f642 7325 	movw	r3, #12069	; 0x2f25
 8003036:	f6c0 0300 	movt	r3, #2048	; 0x800
 800303a:	4798      	blx	r3

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 800303c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003040:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003044:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 8003046:	f642 72f1 	movw	r2, #12273	; 0x2ff1

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 800304a:	f421 0370 	bic.w	r3, r1, #15728640	; 0xf00000
 800304e:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8003050:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 8003052:	f6c0 0200 	movt	r2, #2048	; 0x800
	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8003056:	f441 1340 	orr.w	r3, r1, #3145728	; 0x300000
 800305a:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 800305c:	6801      	ldr	r1, [r0, #0]
 800305e:	6001      	str	r1, [r0, #0]
	

	Hw_Si47xx_Reset();
 8003060:	4790      	blx	r2
 8003062:	bd08      	pop	{r3, pc}

08003064 <Hw_SPI_Ch2_Init>:

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8003064:	f640 4304 	movw	r3, #3076	; 0xc04
 8003068:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800306c:	6819      	ldr	r1, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 800306e:	f44f 5260 	mov.w	r2, #14336	; 0x3800

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8003072:	f421 2070 	bic.w	r0, r1, #983040	; 0xf0000
 8003076:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 8003078:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 800307a:	f643 0104 	movw	r1, #14340	; 0x3804
	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 800307e:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8003082:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 8003084:	6818      	ldr	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8003086:	f2c4 0200 	movt	r2, #16384	; 0x4000
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 800308a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800308e:	6018      	str	r0, [r3, #0]
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8003090:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8003092:	f2c4 0100 	movt	r1, #16384	; 0x4000
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8003096:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 800309a:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (20));	// MODE   - Output mode, max speed 50Mhz
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 80030a2:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (22));	// CNF    - Alternate function output Push-pull
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80030aa:	6018      	str	r0, [r3, #0]

	// PB15 - SPI2_MOSI
	REG_GPIOB_CRH &= ~(0x0F << (28));	// Clear
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80030b2:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (28));	// MODE   - Output mode, max speed 50Mhz
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
 80030ba:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (30));	// CNF    - Alternate function output Push-pull
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80030c2:	6018      	str	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 80030c4:	f244 031c 	movw	r3, #16412	; 0x401c
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 80030c8:	2004      	movs	r0, #4



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 80030ca:	6013      	str	r3, [r2, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 80030cc:	6008      	str	r0, [r1, #0]
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR1, 6 );
 80030ce:	6811      	ldr	r1, [r2, #0]
 80030d0:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	4770      	bx	lr

080030d8 <Hw_SPI_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Init(void)
{
 80030d8:	b510      	push	{r4, lr}
	static u8 Called = 0;


	if( Called == 1 ) return;
 80030da:	4c08      	ldr	r4, [pc, #32]	; (80030fc <Hw_SPI_Init+0x24>)
 80030dc:	7823      	ldrb	r3, [r4, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d00b      	beq.n	80030fa <Hw_SPI_Init+0x22>


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 80030e2:	f241 001c 	movw	r0, #4124	; 0x101c
 80030e6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80030ea:	6802      	ldr	r2, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <Hw_SPI_Init+0x28>)
	if( Called == 1 ) return;


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 80030ee:	f442 4180 	orr.w	r1, r2, #16384	; 0x4000
 80030f2:	6001      	str	r1, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 80030f4:	4798      	blx	r3

	Called = 1;	
 80030f6:	2001      	movs	r0, #1
 80030f8:	7020      	strb	r0, [r4, #0]
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	2000047e 	.word	0x2000047e
 8003100:	08003065 	.word	0x08003065

08003104 <Hw_SPI_StartDMA>:
              
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_StartDMA( u8 Ch )
{
	switch( Ch )
 8003104:	2801      	cmp	r0, #1
 8003106:	d10b      	bne.n	8003120 <Hw_SPI_StartDMA+0x1c>
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR2, 1 );	// TX DMA Enable
 8003108:	f643 0304 	movw	r3, #14340	; 0x3804
 800310c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	f042 0002 	orr.w	r0, r2, #2
 8003116:	6018      	str	r0, [r3, #0]
			SET_BIT( REG_SPI2_CR2, 0 );	// RX DMA Enable
 8003118:	6819      	ldr	r1, [r3, #0]
 800311a:	f041 0201 	orr.w	r2, r1, #1
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop

08003124 <Hw_SPI_Write8Bit>:
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8003124:	2801      	cmp	r0, #1
 8003126:	d001      	beq.n	800312c <Hw_SPI_Write8Bit+0x8>
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8003128:	2000      	movs	r0, #0
}
 800312a:	4770      	bx	lr
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 800312c:	f643 0208 	movw	r2, #14344	; 0x3808
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8003130:	f242 730f 	movw	r3, #9999	; 0x270f
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8003134:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003138:	e006      	b.n	8003148 <Hw_SPI_Write8Bit+0x24>
 800313a:	6810      	ldr	r0, [r2, #0]
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 800313c:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 800313e:	0780      	lsls	r0, r0, #30
 8003140:	d405      	bmi.n	800314e <Hw_SPI_Write8Bit+0x2a>
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 8003142:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8003146:	d305      	bcc.n	8003154 <Hw_SPI_Write8Bit+0x30>
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8003148:	6810      	ldr	r0, [r2, #0]
 800314a:	0780      	lsls	r0, r0, #30
 800314c:	d5f5      	bpl.n	800313a <Hw_SPI_Write8Bit+0x16>
			}
			if( TimeOut == 0 ) return 1;
 800314e:	b90b      	cbnz	r3, 8003154 <Hw_SPI_Write8Bit+0x30>
 8003150:	2001      	movs	r0, #1
 8003152:	4770      	bx	lr
			REG_SPI2_DR = WriteData;
 8003154:	f643 000c 	movw	r0, #14348	; 0x380c
 8003158:	f2c4 0000 	movt	r0, #16384	; 0x4000

			
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 800315c:	f643 0208 	movw	r2, #14344	; 0x3808
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
			}
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;
 8003160:	6001      	str	r1, [r0, #0]

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8003162:	f242 730f 	movw	r3, #9999	; 0x270f
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8003166:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800316a:	e006      	b.n	800317a <Hw_SPI_Write8Bit+0x56>
 800316c:	6810      	ldr	r0, [r2, #0]
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 800316e:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8003170:	07c1      	lsls	r1, r0, #31
 8003172:	d405      	bmi.n	8003180 <Hw_SPI_Write8Bit+0x5c>
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8003174:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8003178:	d304      	bcc.n	8003184 <Hw_SPI_Write8Bit+0x60>
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 800317a:	6811      	ldr	r1, [r2, #0]
 800317c:	07c8      	lsls	r0, r1, #31
 800317e:	d5f5      	bpl.n	800316c <Hw_SPI_Write8Bit+0x48>
			}
			if( TimeOut == 0 ) return 1;
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0e5      	beq.n	8003150 <Hw_SPI_Write8Bit+0x2c>
		
			ReadData = REG_SPI2_DR;
 8003184:	f643 020c 	movw	r2, #14348	; 0x380c
 8003188:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800318c:	6813      	ldr	r3, [r2, #0]
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 800318e:	2000      	movs	r0, #0
			}
			if( TimeOut == 0 ) return 1;
		
			ReadData = REG_SPI2_DR;
			
			break;
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop

08003194 <Hw_N5100G_FrameTick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5100G_FrameTick( void )
{
 8003194:	b508      	push	{r3, lr}
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
 8003196:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <Hw_N5100G_FrameTick+0x38>)
 8003198:	4798      	blx	r3
 800319a:	2801      	cmp	r0, #1
 800319c:	d00d      	beq.n	80031ba <Hw_N5100G_FrameTick+0x26>
 800319e:	480c      	ldr	r0, [pc, #48]	; (80031d0 <Hw_N5100G_FrameTick+0x3c>)
 80031a0:	6803      	ldr	r3, [r0, #0]
		{
			Hw_N5110G_Frame_DrawReq--;
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 80031a2:	b903      	cbnz	r3, 80031a6 <Hw_N5100G_FrameTick+0x12>
 80031a4:	bd08      	pop	{r3, pc}
	{
		Hw_DMA_SPI2_Setup( (u32)Hw_N5110G_TxFrameBuf, (u32)Hw_N5110G_RxFrameBuf, HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT );				
 80031a6:	480b      	ldr	r0, [pc, #44]	; (80031d4 <Hw_N5100G_FrameTick+0x40>)
 80031a8:	490b      	ldr	r1, [pc, #44]	; (80031d8 <Hw_N5100G_FrameTick+0x44>)
 80031aa:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <Hw_N5100G_FrameTick+0x48>)
 80031b0:	4798      	blx	r3
		Hw_SPI_StartDMA( HW_SPI_CH2 );			
 80031b2:	2001      	movs	r0, #1
 80031b4:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <Hw_N5100G_FrameTick+0x4c>)
 80031b6:	4790      	blx	r2
 80031b8:	bd08      	pop	{r3, pc}
{
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
	{
		if( Hw_N5110G_Frame_DrawReq > 0 )
 80031ba:	4a05      	ldr	r2, [pc, #20]	; (80031d0 <Hw_N5100G_FrameTick+0x3c>)
 80031bc:	6811      	ldr	r1, [r2, #0]
 80031be:	2900      	cmp	r1, #0
 80031c0:	d0f0      	beq.n	80031a4 <Hw_N5100G_FrameTick+0x10>
		{
			Hw_N5110G_Frame_DrawReq--;
 80031c2:	1e4b      	subs	r3, r1, #1
 80031c4:	6013      	str	r3, [r2, #0]
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0ec      	beq.n	80031a4 <Hw_N5100G_FrameTick+0x10>
 80031ca:	e7ec      	b.n	80031a6 <Hw_N5100G_FrameTick+0x12>
 80031cc:	0800393d 	.word	0x0800393d
 80031d0:	20000b8c 	.word	0x20000b8c
 80031d4:	20000990 	.word	0x20000990
 80031d8:	20000b90 	.word	0x20000b90
 80031dc:	080038c5 	.word	0x080038c5
 80031e0:	08003105 	.word	0x08003105

080031e4 <Hw_N5110G_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
 80031e4:	b510      	push	{r4, lr}
	HW_N5110G_RESET_ON();
 80031e6:	f640 440c 	movw	r4, #3084	; 0xc0c
 80031ea:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80031ee:	6822      	ldr	r2, [r4, #0]
	Hw_Timer_Delay_ms(10);
 80031f0:	f642 63d5 	movw	r3, #11989	; 0x2ed5
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
	HW_N5110G_RESET_ON();
 80031f4:	f422 6080 	bic.w	r0, r2, #1024	; 0x400
 80031f8:	6020      	str	r0, [r4, #0]
	Hw_Timer_Delay_ms(10);
 80031fa:	f6c0 0300 	movt	r3, #2048	; 0x800
 80031fe:	200a      	movs	r0, #10
 8003200:	4798      	blx	r3
	HW_N5110G_RESET_OFF();
 8003202:	6821      	ldr	r1, [r4, #0]
 8003204:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 8003208:	6022      	str	r2, [r4, #0]
 800320a:	bd10      	pop	{r4, pc}

0800320c <Hw_N5110G_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 800320c:	b510      	push	{r4, lr}
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 800320e:	f640 440c 	movw	r4, #3084	; 0xc0c
 8003212:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003216:	6823      	ldr	r3, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 8003218:	4601      	mov	r1, r0
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 800321a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 800321e:	f243 1325 	movw	r3, #12581	; 0x3125
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8003222:	6022      	str	r2, [r4, #0]
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 8003224:	2001      	movs	r0, #1
 8003226:	f6c0 0300 	movt	r3, #2048	; 0x800
 800322a:	4798      	blx	r3
	HW_N5110G_SEL_DATA();
 800322c:	6821      	ldr	r1, [r4, #0]
 800322e:	f441 6200 	orr.w	r2, r1, #2048	; 0x800
 8003232:	6022      	str	r2, [r4, #0]
	
	return Ret;
}
 8003234:	bd10      	pop	{r4, pc}
 8003236:	bf00      	nop

08003238 <Hw_N5110G_Goto>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 8003238:	b570      	push	{r4, r5, r6, lr}
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 800323a:	f243 240d 	movw	r4, #12813	; 0x320d
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 800323e:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 8003240:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003244:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 8003248:	47a0      	blx	r4
 800324a:	4606      	mov	r6, r0
	Ret |= Hw_N5110G_WriteCmd( 0x80|x );
 800324c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 8003250:	47a0      	blx	r4
 8003252:	4330      	orrs	r0, r6

	return Ret;
}
 8003254:	b280      	uxth	r0, r0
 8003256:	bd70      	pop	{r4, r5, r6, pc}

08003258 <Hw_N5110G_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8003258:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 800325a:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <Hw_N5110G_Init+0xbc>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 800325c:	b083      	sub	sp, #12
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 800325e:	4798      	blx	r3
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8003260:	f640 4004 	movw	r0, #3076	; 0xc04
 8003264:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003268:	6802      	ldr	r2, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 800326a:	f640 440c 	movw	r4, #3084	; 0xc0c
	
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 800326e:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 8003272:	6001      	str	r1, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 8003274:	6805      	ldr	r5, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 8003276:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 800327a:	f445 7640 	orr.w	r6, r5, #768	; 0x300
 800327e:	6006      	str	r6, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8003280:	6807      	ldr	r7, [r0, #0]
	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
	
	Hw_N5110G_Reset();
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8003282:	4d25      	ldr	r5, [pc, #148]	; (8003318 <Hw_N5110G_Init+0xc0>)
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8003284:	6007      	str	r7, [r0, #0]

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8003286:	6803      	ldr	r3, [r0, #0]
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8003288:	2600      	movs	r6, #0
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 800328a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800328e:	6002      	str	r2, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
 8003290:	6801      	ldr	r1, [r0, #0]
 8003292:	f441 5740 	orr.w	r7, r1, #12288	; 0x3000
 8003296:	6007      	str	r7, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 8003298:	6803      	ldr	r3, [r0, #0]
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
 800329a:	4f20      	ldr	r7, [pc, #128]	; (800331c <Hw_N5110G_Init+0xc4>)

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 800329c:	6003      	str	r3, [r0, #0]


	HW_N5110G_RESET_OFF();
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	f440 6280 	orr.w	r2, r0, #1024	; 0x400
 80032a4:	6022      	str	r2, [r4, #0]
	HW_N5110G_SEL_CMD();
 80032a6:	6821      	ldr	r1, [r4, #0]
	
	Hw_N5110G_Reset();
 80032a8:	481d      	ldr	r0, [pc, #116]	; (8003320 <Hw_N5110G_Init+0xc8>)
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
 80032aa:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 80032ae:	6023      	str	r3, [r4, #0]
	
	Hw_N5110G_Reset();
 80032b0:	4780      	blx	r0
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 80032b2:	2021      	movs	r0, #33	; 0x21
 80032b4:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0xC6);	// Write Vop
 80032b6:	20c6      	movs	r0, #198	; 0xc6
 80032b8:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x06);	// Set Temperature Coefficient
 80032ba:	2006      	movs	r0, #6
 80032bc:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x13);	// Set Bias System
 80032be:	2013      	movs	r0, #19
 80032c0:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x20);	// H = 0
 80032c2:	2020      	movs	r0, #32
 80032c4:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
 80032c6:	200c      	movs	r0, #12
 80032c8:	47a8      	blx	r5
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
 80032ca:	4631      	mov	r1, r6
 80032cc:	4a15      	ldr	r2, [pc, #84]	; (8003324 <Hw_N5110G_Init+0xcc>)
 80032ce:	4630      	mov	r0, r6
 80032d0:	4790      	blx	r2
	
	
	HW_N5110G_SEL_DATA();
 80032d2:	6821      	ldr	r1, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 80032d4:	2003      	movs	r0, #3
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
 80032d6:	f441 6300 	orr.w	r3, r1, #2048	; 0x800
 80032da:	6023      	str	r3, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
 80032dc:	4c12      	ldr	r4, [pc, #72]	; (8003328 <Hw_N5110G_Init+0xd0>)
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 80032de:	2121      	movs	r1, #33	; 0x21
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <Hw_N5110G_Init+0xd4>)
 80032e2:	9600      	str	r6, [sp, #0]
 80032e4:	2202      	movs	r2, #2
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 80032e6:	8026      	strh	r6, [r4, #0]
	Hw_N5110G_Frame_DrawReq	= 0;						
 80032e8:	603e      	str	r6, [r7, #0]
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 80032ea:	4c11      	ldr	r4, [pc, #68]	; (8003330 <Hw_N5110G_Init+0xd8>)
 80032ec:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
 80032ee:	2003      	movs	r0, #3
 80032f0:	4a10      	ldr	r2, [pc, #64]	; (8003334 <Hw_N5110G_Init+0xdc>)
 80032f2:	4790      	blx	r2
 80032f4:	4b10      	ldr	r3, [pc, #64]	; (8003338 <Hw_N5110G_Init+0xe0>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 80032f6:	4631      	mov	r1, r6
     TITLE   : Hw_5110G_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
 80032f8:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 80032fc:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 80032fe:	7059      	strb	r1, [r3, #1]
 8003300:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8003302:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8003304:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8003306:	d1f9      	bne.n	80032fc <Hw_N5110G_Init+0xa4>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8003308:	6839      	ldr	r1, [r7, #0]
 800330a:	1c88      	adds	r0, r1, #2
 800330c:	6038      	str	r0, [r7, #0]
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
	
	
	Hw_N5110G_Clear();	
	Hw_N5110G_DrawRequest();
}
 800330e:	b003      	add	sp, #12
 8003310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003312:	bf00      	nop
 8003314:	080030d9 	.word	0x080030d9
 8003318:	0800320d 	.word	0x0800320d
 800331c:	20000b8c 	.word	0x20000b8c
 8003320:	080031e5 	.word	0x080031e5
 8003324:	08003239 	.word	0x08003239
 8003328:	20000b88 	.word	0x20000b88
 800332c:	08003195 	.word	0x08003195
 8003330:	08002ea1 	.word	0x08002ea1
 8003334:	08002ec1 	.word	0x08002ec1
 8003338:	2000098f 	.word	0x2000098f

0800333c <Hw_N5110G_Clear>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
{
 800333c:	4b07      	ldr	r3, [pc, #28]	; (800335c <Hw_N5110G_Clear+0x20>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 800333e:	2100      	movs	r1, #0
     TITLE   : Hw_N5110G_Clear
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
 8003340:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8003344:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8003346:	7059      	strb	r1, [r3, #1]
 8003348:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 800334a:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 800334c:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 800334e:	d1f9      	bne.n	8003344 <Hw_N5110G_Clear+0x8>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8003350:	4903      	ldr	r1, [pc, #12]	; (8003360 <Hw_N5110G_Clear+0x24>)
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 8003352:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8003354:	680a      	ldr	r2, [r1, #0]
 8003356:	1c53      	adds	r3, r2, #1
 8003358:	600b      	str	r3, [r1, #0]
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 800335a:	4770      	bx	lr
 800335c:	2000098f 	.word	0x2000098f
 8003360:	20000b8c 	.word	0x20000b8c

08003364 <Hw_N5110G_WriteStr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 8003364:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8003368:	7807      	ldrb	r7, [r0, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 800336a:	b086      	sub	sp, #24
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 800336c:	2f00      	cmp	r7, #0
 800336e:	f000 8085 	beq.w	800347c <Hw_N5110G_WriteStr+0x118>
 8003372:	f640 3188 	movw	r1, #2952	; 0xb88
 8003376:	f2c2 0100 	movt	r1, #8192	; 0x2000
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 800337a:	f640 0c21 	movw	ip, #2081	; 0x821
 800337e:	f8b1 9000 	ldrh.w	r9, [r1]
 8003382:	f8df a104 	ldr.w	sl, [pc, #260]	; 8003488 <Hw_N5110G_WriteStr+0x124>
 8003386:	f2c2 0c82 	movt	ip, #8322	; 0x2082
 800338a:	9001      	str	r0, [sp, #4]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 800338c:	f109 0301 	add.w	r3, r9, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8003390:	b298      	uxth	r0, r3
 8003392:	08c2      	lsrs	r2, r0, #3
 8003394:	fbac 2402 	umull	r2, r4, ip, r2
 8003398:	08e5      	lsrs	r5, r4, #3
 800339a:	ebc5 1685 	rsb	r6, r5, r5, lsl #6
 800339e:	eba0 01c6 	sub.w	r1, r0, r6, lsl #3
 80033a2:	b289      	uxth	r1, r1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80033a4:	1c4b      	adds	r3, r1, #1
 80033a6:	b298      	uxth	r0, r3
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80033a8:	08c2      	lsrs	r2, r0, #3
 80033aa:	fbac 4502 	umull	r4, r5, ip, r2
 80033ae:	08ec      	lsrs	r4, r5, #3
 80033b0:	ebc4 1684 	rsb	r6, r4, r4, lsl #6
 80033b4:	eba0 03c6 	sub.w	r3, r0, r6, lsl #3
 80033b8:	b29a      	uxth	r2, r3
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80033ba:	1c50      	adds	r0, r2, #1
 80033bc:	b284      	uxth	r4, r0
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80033be:	08e5      	lsrs	r5, r4, #3
 80033c0:	fbac 5605 	umull	r5, r6, ip, r5
 80033c4:	08f3      	lsrs	r3, r6, #3
 80033c6:	ebc3 1083 	rsb	r0, r3, r3, lsl #6
 80033ca:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
 80033ce:	fa1f f884 	uxth.w	r8, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80033d2:	f108 0501 	add.w	r5, r8, #1
 80033d6:	b2ae      	uxth	r6, r5
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80033d8:	08f3      	lsrs	r3, r6, #3
 80033da:	fbac 4003 	umull	r4, r0, ip, r3
 80033de:	08c4      	lsrs	r4, r0, #3
 80033e0:	ebc4 1584 	rsb	r5, r4, r4, lsl #6
 80033e4:	eba6 06c5 	sub.w	r6, r6, r5, lsl #3
 80033e8:	b2b6      	uxth	r6, r6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80033ea:	1c73      	adds	r3, r6, #1
 80033ec:	b29c      	uxth	r4, r3
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80033ee:	08e0      	lsrs	r0, r4, #3
 80033f0:	fbac 5300 	umull	r5, r3, ip, r0
 80033f4:	08dd      	lsrs	r5, r3, #3
 80033f6:	ebc5 1085 	rsb	r0, r5, r5, lsl #6
 80033fa:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
 80033fe:	b2a5      	uxth	r5, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8003400:	1c6b      	adds	r3, r5, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8003402:	b298      	uxth	r0, r3
 8003404:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
 8003408:	fbac 340b 	umull	r3, r4, ip, fp
 800340c:	3f20      	subs	r7, #32
 800340e:	ea4f 0bd4 	mov.w	fp, r4, lsr #3
	u16 i;
	u8  Ch;
	
	for( i=0; i<6; i++ )
	{
		Ch = Hw_N5110G_Font6_8[CharData-32][i];
 8003412:	f240 0400 	movw	r4, #0
 8003416:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800341a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800341e:	eb04 0347 	add.w	r3, r4, r7, lsl #1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8003422:	f814 7017 	ldrb.w	r7, [r4, r7, lsl #1]
 8003426:	789c      	ldrb	r4, [r3, #2]
 8003428:	9702      	str	r7, [sp, #8]
 800342a:	9403      	str	r4, [sp, #12]
 800342c:	78dc      	ldrb	r4, [r3, #3]
 800342e:	785f      	ldrb	r7, [r3, #1]
 8003430:	9404      	str	r4, [sp, #16]
 8003432:	791c      	ldrb	r4, [r3, #4]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8003434:	ebcb 1b8b 	rsb	fp, fp, fp, lsl #6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8003438:	9405      	str	r4, [sp, #20]
 800343a:	9c02      	ldr	r4, [sp, #8]
 800343c:	795b      	ldrb	r3, [r3, #5]
 800343e:	f80a 4009 	strb.w	r4, [sl, r9]
 8003442:	f80a 7001 	strb.w	r7, [sl, r1]
 8003446:	9f03      	ldr	r7, [sp, #12]
 8003448:	9c05      	ldr	r4, [sp, #20]
 800344a:	f80a 7002 	strb.w	r7, [sl, r2]
 800344e:	9a04      	ldr	r2, [sp, #16]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8003450:	eba0 00cb 	sub.w	r0, r0, fp, lsl #3
 8003454:	f640 3188 	movw	r1, #2952	; 0xb88
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8003458:	f80a 2008 	strb.w	r2, [sl, r8]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 800345c:	fa1f f980 	uxth.w	r9, r0
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8003460:	f80a 4006 	strb.w	r4, [sl, r6]
 8003464:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003468:	f80a 3005 	strb.w	r3, [sl, r5]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 800346c:	9d01      	ldr	r5, [sp, #4]
 800346e:	f8a1 9000 	strh.w	r9, [r1]
 8003472:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 8003476:	9501      	str	r5, [sp, #4]
 8003478:	2f00      	cmp	r7, #0
 800347a:	d187      	bne.n	800338c <Hw_N5110G_WriteStr+0x28>
		Ret |= Hw_N5110G_WriteChar( *pStr );
		pStr++;
	}
		
	return Ret;
}
 800347c:	2000      	movs	r0, #0
 800347e:	b006      	add	sp, #24
 8003480:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000990 	.word	0x20000990

0800348c <Hw_N5110G_Print>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 800348c:	b40c      	push	{r2, r3}
 800348e:	b530      	push	{r4, r5, lr}
 8003490:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8003492:	aa36      	add	r2, sp, #216	; 0xd8
 8003494:	f242 3311 	movw	r3, #8977	; 0x2311
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 8003498:	460d      	mov	r5, r1
 800349a:	4604      	mov	r4, r0
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 800349c:	f852 1b04 	ldr.w	r1, [r2], #4
 80034a0:	4668      	mov	r0, sp
 80034a2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80034a6:	4798      	blx	r3

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 80034a8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80034ac:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80034b0:	004c      	lsls	r4, r1, #1
 80034b2:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 80034b6:	f640 3288 	movw	r2, #2952	; 0xb88

	Hw_N5110G_WriteStr( Str );		
 80034ba:	f243 3365 	movw	r3, #13157	; 0x3365

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 80034be:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80034c2:	eb04 0585 	add.w	r5, r4, r5, lsl #2

	Hw_N5110G_WriteStr( Str );		
 80034c6:	4668      	mov	r0, sp
 80034c8:	f6c0 0300 	movt	r3, #2048	; 0x800

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 80034cc:	8015      	strh	r5, [r2, #0]

	Hw_N5110G_WriteStr( Str );		
 80034ce:	4798      	blx	r3
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 80034d0:	f640 318c 	movw	r1, #2956	; 0xb8c
 80034d4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80034d8:	680a      	ldr	r2, [r1, #0]
	Hw_N5110G_DrawRequest();
	
	Lb_va_end(ap);		
	
	return Ret;
}
 80034da:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 80034dc:	1c53      	adds	r3, r2, #1
 80034de:	600b      	str	r3, [r1, #0]
	Hw_N5110G_DrawRequest();
	
	Lb_va_end(ap);		
	
	return Ret;
}
 80034e0:	b033      	add	sp, #204	; 0xcc
 80034e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034e6:	b002      	add	sp, #8
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop

080034ec <Hw_N5110G_DrawRequest>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 80034ec:	f640 338c 	movw	r3, #2956	; 0xb8c
 80034f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	1c50      	adds	r0, r2, #1
 80034f8:	6018      	str	r0, [r3, #0]
 80034fa:	4770      	bx	lr

080034fc <Hw_N5110G_DrawCircle>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 80034fc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003500:	b088      	sub	sp, #32
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8003502:	0054      	lsls	r4, r2, #1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8003504:	9005      	str	r0, [sp, #20]
 8003506:	9106      	str	r1, [sp, #24]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8003508:	f1c4 0003 	rsb	r0, r4, #3
 800350c:	9d05      	ldr	r5, [sp, #20]
 800350e:	9c06      	ldr	r4, [sp, #24]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8003510:	9304      	str	r3, [sp, #16]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8003512:	b283      	uxth	r3, r0
 8003514:	9303      	str	r3, [sp, #12]
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];
 8003516:	49a0      	ldr	r1, [pc, #640]	; (8003798 <Hw_N5110G_DrawCircle+0x29c>)
{
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8003518:	4620      	mov	r0, r4
 800351a:	9501      	str	r5, [sp, #4]
 800351c:	9502      	str	r5, [sp, #8]
	CurX = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	e0a5      	b.n	800366e <Hw_N5110G_DrawCircle+0x172>
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8003522:	f8dd b018 	ldr.w	fp, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003526:	f04f 0901 	mov.w	r9, #1
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
 800352a:	ebc2 060b 	rsb	r6, r2, fp
 800352e:	b2b6      	uxth	r6, r6
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003530:	f006 0807 	and.w	r8, r6, #7
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8003534:	eb02 050b 	add.w	r5, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003538:	fa09 fb08 	lsl.w	fp, r9, r8
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 800353c:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800353e:	f007 0a07 	and.w	sl, r7, #7
 8003542:	f000 0507 	and.w	r5, r0, #7
 8003546:	fa09 fc0a 	lsl.w	ip, r9, sl
 800354a:	f04f 0801 	mov.w	r8, #1
 800354e:	fa09 fa05 	lsl.w	sl, r9, r5
 8003552:	f004 0907 	and.w	r9, r4, #7
 8003556:	f8cd b01c 	str.w	fp, [sp, #28]
 800355a:	fa08 fb09 	lsl.w	fp, r8, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800355e:	2554      	movs	r5, #84	; 0x54
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8003560:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003562:	fb05 f707 	mul.w	r7, r5, r7
 8003566:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800356a:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800356c:	eb07 0809 	add.w	r8, r7, r9
 8003570:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003574:	f8cd b000 	str.w	fp, [sp]
 8003578:	f811 b008 	ldrb.w	fp, [r1, r8]
 800357c:	fa5f fc8c 	uxtb.w	ip, ip
 8003580:	ea4b 050c 	orr.w	r5, fp, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003584:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003588:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800358c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8003590:	f811 b008 	ldrb.w	fp, [r1, r8]
 8003594:	fa5f f589 	uxtb.w	r5, r9
 8003598:	ea4b 0b05 	orr.w	fp, fp, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800359c:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80035a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80035a4:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80035a8:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80035aa:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80035ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80035b2:	ea49 0c0c 	orr.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80035b6:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80035ba:	2754      	movs	r7, #84	; 0x54
 80035bc:	4446      	add	r6, r8
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 80035be:	f8dd 9014 	ldr.w	r9, [sp, #20]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80035c2:	fb07 f80b 	mul.w	r8, r7, fp
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80035c6:	f811 b006 	ldrb.w	fp, [r1, r6]
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 80035ca:	eb02 0709 	add.w	r7, r2, r9
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80035ce:	ea4b 0505 	orr.w	r5, fp, r5
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80035d2:	b2bf      	uxth	r7, r7
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80035d4:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80035d8:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80035dc:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80035de:	eb08 0607 	add.w	r6, r8, r7
 80035e2:	fb0b f50c 	mul.w	r5, fp, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80035e6:	f811 9006 	ldrb.w	r9, [r1, r6]
 80035ea:	fa5f fa8a 	uxtb.w	sl, sl
 80035ee:	f8dd b000 	ldr.w	fp, [sp]
 80035f2:	ea49 0c0a 	orr.w	ip, r9, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80035f6:	f801 c006 	strb.w	ip, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80035fa:	19ef      	adds	r7, r5, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80035fc:	fa5f f98b 	uxtb.w	r9, fp
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 8003600:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003604:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 8003606:	ebc2 0c0b 	rsb	ip, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800360a:	ea46 0609 	orr.w	r6, r6, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800360e:	fa1f fc8c 	uxth.w	ip, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003612:	55ce      	strb	r6, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003614:	44e0      	add	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003616:	f811 7008 	ldrb.w	r7, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800361a:	4465      	add	r5, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800361c:	ea47 0a0a 	orr.w	sl, r7, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003620:	f801 a008 	strb.w	sl, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003624:	5d4e      	ldrb	r6, [r1, r5]
 8003626:	ea46 0909 	orr.w	r9, r6, r9
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800362a:	f801 9005 	strb.w	r9, [r1, r5]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 800362e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003632:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 8003636:	f040 80a8 	bne.w	800378a <Hw_N5110G_DrawCircle+0x28e>
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 800363a:	9f03      	ldr	r7, [sp, #12]
 800363c:	1a9d      	subs	r5, r3, r2
 800363e:	370a      	adds	r7, #10
 8003640:	eb07 0685 	add.w	r6, r7, r5, lsl #2
			CurY--;
 8003644:	3a01      	subs	r2, #1
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8003646:	b2b7      	uxth	r7, r6
 8003648:	9703      	str	r7, [sp, #12]
			CurY--;
 800364a:	b292      	uxth	r2, r2
 800364c:	9d02      	ldr	r5, [sp, #8]
 800364e:	9f01      	ldr	r7, [sp, #4]
		}
		CurX++;
 8003650:	3301      	adds	r3, #1
 8003652:	1c6e      	adds	r6, r5, #1
 8003654:	b29b      	uxth	r3, r3
 8003656:	1e7d      	subs	r5, r7, #1
 8003658:	3001      	adds	r0, #1
 800365a:	3c01      	subs	r4, #1
 800365c:	b2b6      	uxth	r6, r6
 800365e:	b2ad      	uxth	r5, r5
  
	D    = 3 - (Radius << 1);
	CurX = 0;
	CurY = Radius;
	
	while (CurX <= CurY)
 8003660:	429a      	cmp	r2, r3
 8003662:	9602      	str	r6, [sp, #8]
 8003664:	9501      	str	r5, [sp, #4]
 8003666:	b280      	uxth	r0, r0
 8003668:	b2a4      	uxth	r4, r4
 800366a:	f0c0 8115 	bcc.w	8003898 <Hw_N5110G_DrawCircle+0x39c>
	{
		if( Mode == 0 )
 800366e:	9e04      	ldr	r6, [sp, #16]
 8003670:	2e00      	cmp	r6, #0
 8003672:	f43f af56 	beq.w	8003522 <Hw_N5110G_DrawCircle+0x26>
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
 8003676:	9d04      	ldr	r5, [sp, #16]
 8003678:	2d01      	cmp	r5, #1
 800367a:	f000 808f 	beq.w	800379c <Hw_N5110G_DrawCircle+0x2a0>
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
 800367e:	9f04      	ldr	r7, [sp, #16]
 8003680:	2f02      	cmp	r7, #2
 8003682:	d1d4      	bne.n	800362e <Hw_N5110G_DrawCircle+0x132>
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8003684:	9e06      	ldr	r6, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003686:	f04f 0901 	mov.w	r9, #1
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 800368a:	1995      	adds	r5, r2, r6
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
 800368c:	1ab6      	subs	r6, r6, r2
 800368e:	b2b6      	uxth	r6, r6
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8003690:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003692:	f006 0507 	and.w	r5, r6, #7
 8003696:	fa09 fa05 	lsl.w	sl, r9, r5
 800369a:	f007 0c07 	and.w	ip, r7, #7
 800369e:	f04f 0801 	mov.w	r8, #1
 80036a2:	fa08 fb0c 	lsl.w	fp, r8, ip
 80036a6:	f004 0c07 	and.w	ip, r4, #7
 80036aa:	fa09 f80c 	lsl.w	r8, r9, ip
 80036ae:	f000 0507 	and.w	r5, r0, #7
 80036b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80036b6:	fa09 fa05 	lsl.w	sl, r9, r5
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80036ba:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80036bc:	2554      	movs	r5, #84	; 0x54
 80036be:	fb05 f707 	mul.w	r7, r5, r7
 80036c2:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80036c6:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80036c8:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80036cc:	f8cd 8000 	str.w	r8, [sp]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80036d0:	eb07 0809 	add.w	r8, r7, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80036d4:	f811 5008 	ldrb.w	r5, [r1, r8]
 80036d8:	fa5f fc8b 	uxtb.w	ip, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80036dc:	f8dd 9008 	ldr.w	r9, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80036e0:	ea85 0b0c 	eor.w	fp, r5, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80036e4:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80036e8:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80036ec:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80036f0:	f811 9008 	ldrb.w	r9, [r1, r8]
 80036f4:	fa5f f58b 	uxtb.w	r5, fp
 80036f8:	ea89 0905 	eor.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80036fc:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003700:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003704:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003708:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800370a:	f811 b007 	ldrb.w	fp, [r1, r7]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800370e:	ea4f 08d0 	mov.w	r8, r0, lsr #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003712:	ea8b 0c0c 	eor.w	ip, fp, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003716:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800371a:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800371e:	444e      	add	r6, r9
 8003720:	fb0b f808 	mul.w	r8, fp, r8
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 8003724:	f8dd c014 	ldr.w	ip, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003728:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 800372a:	eb02 090c 	add.w	r9, r2, ip
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800372e:	407d      	eors	r5, r7
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003730:	fa1f f989 	uxth.w	r9, r9
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8003734:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003738:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800373a:	fb0b fc07 	mul.w	ip, fp, r7
 800373e:	eb08 0509 	add.w	r5, r8, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003742:	5d4f      	ldrb	r7, [r1, r5]
 8003744:	fa5f f68a 	uxtb.w	r6, sl
 8003748:	4077      	eors	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800374a:	554f      	strb	r7, [r1, r5]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800374c:	44e1      	add	r9, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800374e:	9d00      	ldr	r5, [sp, #0]
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 8003750:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003754:	f811 a009 	ldrb.w	sl, [r1, r9]
 8003758:	b2ed      	uxtb	r5, r5
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 800375a:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800375e:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003760:	ea8a 0a05 	eor.w	sl, sl, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003764:	f801 a009 	strb.w	sl, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003768:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800376a:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800376e:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003770:	ea89 0606 	eor.w	r6, r9, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003774:	f801 6008 	strb.w	r6, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003778:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 800377a:	f8dd c00c 	ldr.w	ip, [sp, #12]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800377e:	4075      	eors	r5, r6
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8003780:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003784:	55cd      	strb	r5, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8003786:	f43f af58 	beq.w	800363a <Hw_N5110G_DrawCircle+0x13e>
		{ 
			D += (CurX << 2) + 6;
 800378a:	eb0c 0583 	add.w	r5, ip, r3, lsl #2
 800378e:	1dae      	adds	r6, r5, #6
 8003790:	b2b7      	uxth	r7, r6
 8003792:	9703      	str	r7, [sp, #12]
 8003794:	e75a      	b.n	800364c <Hw_N5110G_DrawCircle+0x150>
 8003796:	bf00      	nop
 8003798:	20000990 	.word	0x20000990
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 800379c:	9e06      	ldr	r6, [sp, #24]
 800379e:	1997      	adds	r7, r2, r6
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 80037a0:	ebc2 0806 	rsb	r8, r2, r6
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 80037a4:	b2bf      	uxth	r7, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 80037a6:	fa1f f988 	uxth.w	r9, r8
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80037aa:	f007 0b07 	and.w	fp, r7, #7
 80037ae:	9e04      	ldr	r6, [sp, #16]
 80037b0:	fa05 fc0b 	lsl.w	ip, r5, fp
 80037b4:	f009 0507 	and.w	r5, r9, #7
 80037b8:	fa06 fa05 	lsl.w	sl, r6, r5
 80037bc:	9d04      	ldr	r5, [sp, #16]
 80037be:	f000 0607 	and.w	r6, r0, #7
 80037c2:	fa05 fb06 	lsl.w	fp, r5, r6
 80037c6:	f004 0607 	and.w	r6, r4, #7
 80037ca:	40b5      	lsls	r5, r6
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80037cc:	08ff      	lsrs	r7, r7, #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80037ce:	9507      	str	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80037d0:	2554      	movs	r5, #84	; 0x54
 80037d2:	fb05 f707 	mul.w	r7, r5, r7
 80037d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80037da:	ea4f 06d9 	mov.w	r6, r9, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80037de:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80037e0:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80037e4:	2554      	movs	r5, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80037e6:	ea6f 0c0c 	mvn.w	ip, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80037ea:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80037ee:	fa5f fc8c 	uxtb.w	ip, ip
 80037f2:	ea09 050c 	and.w	r5, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80037f6:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80037fa:	f8dd 8008 	ldr.w	r8, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80037fe:	ea6f 050a 	mvn.w	r5, sl
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003802:	44b0      	add	r8, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003804:	f811 9008 	ldrb.w	r9, [r1, r8]
 8003808:	b2ed      	uxtb	r5, r5
 800380a:	ea09 0a05 	and.w	sl, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800380e:	f801 a008 	strb.w	sl, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003812:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8003816:	ea4f 0ad0 	mov.w	sl, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800381a:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800381c:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003820:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003824:	ea09 0c0c 	and.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003828:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800382c:	f04f 0754 	mov.w	r7, #84	; 0x54
 8003830:	4446      	add	r6, r8
 8003832:	fb07 fa0a 	mul.w	sl, r7, sl
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 8003836:	f8dd 9014 	ldr.w	r9, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800383a:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 800383c:	eb02 0c09 	add.w	ip, r2, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003840:	fa1f f88c 	uxth.w	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003844:	403d      	ands	r5, r7
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003846:	558d      	strb	r5, [r1, r6]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8003848:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800384c:	eb0a 0508 	add.w	r5, sl, r8
 8003850:	2654      	movs	r6, #84	; 0x54
 8003852:	fb06 fc07 	mul.w	ip, r6, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003856:	5d4f      	ldrb	r7, [r1, r5]
 8003858:	ea6f 060b 	mvn.w	r6, fp
 800385c:	b2f6      	uxtb	r6, r6
 800385e:	4037      	ands	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003860:	554f      	strb	r7, [r1, r5]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003862:	9d07      	ldr	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003864:	44e0      	add	r8, ip
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 8003866:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800386a:	f811 9008 	ldrb.w	r9, [r1, r8]
 800386e:	43ef      	mvns	r7, r5
 8003870:	b2fd      	uxtb	r5, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 8003872:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003876:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003878:	ea09 0905 	and.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800387c:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003880:	44ba      	add	sl, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003882:	f811 800a 	ldrb.w	r8, [r1, sl]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003886:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003888:	ea08 0606 	and.w	r6, r8, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800388c:	f801 600a 	strb.w	r6, [r1, sl]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003890:	5dce      	ldrb	r6, [r1, r7]
 8003892:	4035      	ands	r5, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003894:	55cd      	strb	r5, [r1, r7]
 8003896:	e6ca      	b.n	800362e <Hw_N5110G_DrawCircle+0x132>
			D += ((CurX - CurY) << 2) + 10;
			CurY--;
		}
		CurX++;
	}
}
 8003898:	b008      	add	sp, #32
 800389a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800389e:	4770      	bx	lr

080038a0 <Hw_DMA_Init>:
void Hw_DMA_Init(void)
{
	static u8 Called = 0;


	if( Called == 1 ) return;
 80038a0:	4a07      	ldr	r2, [pc, #28]	; (80038c0 <Hw_DMA_Init+0x20>)
 80038a2:	7813      	ldrb	r3, [r2, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d009      	beq.n	80038bc <Hw_DMA_Init+0x1c>


	// 1. Clock Enable
	//
	REG_RCC_AHBENR |= (1<<0);		// DMA1 Clock enable
 80038a8:	f241 0014 	movw	r0, #4116	; 0x1014
 80038ac:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80038b0:	6801      	ldr	r1, [r0, #0]
 80038b2:	f041 0301 	orr.w	r3, r1, #1
 80038b6:	6003      	str	r3, [r0, #0]
	

	Called = 1;	
 80038b8:	2001      	movs	r0, #1
 80038ba:	7010      	strb	r0, [r2, #0]
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	2000047f 	.word	0x2000047f

080038c4 <Hw_DMA_SPI2_Setup>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
 80038c4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 80038c8:	2344      	movs	r3, #68	; 0x44
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 80038ca:	274c      	movs	r7, #76	; 0x4c
 80038cc:	f643 040c 	movw	r4, #14348	; 0x380c
	REG_DMA1_CMAR(4)  = ReadAddress;
 80038d0:	2650      	movs	r6, #80	; 0x50
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 80038d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80038d6:	f04f 0c00 	mov.w	ip, #0
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 80038da:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80038de:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(4)  = ReadAddress;
 80038e2:	f2c4 0602 	movt	r6, #16386	; 0x4002
	REG_DMA1_CNDTR(4) = BufSize;
 80038e6:	2548      	movs	r5, #72	; 0x48
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 80038e8:	f8c3 c000 	str.w	ip, [r3]
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 80038ec:	f2c4 0502 	movt	r5, #16386	; 0x4002
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 80038f0:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(4)  = ReadAddress;
 80038f2:	6031      	str	r1, [r6, #0]
	REG_DMA1_CNDTR(4) = BufSize;
	
	
	
	REG_DMA1_CCR(4) = 0
 80038f4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 80038f8:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(4) = 0
 80038fa:	6019      	str	r1, [r3, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 80038fc:	f8d3 8000 	ldr.w	r8, [r3]
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 8003900:	2158      	movs	r1, #88	; 0x58
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 8003902:	2760      	movs	r7, #96	; 0x60
	REG_DMA1_CMAR(5)  = WriteAddress;
 8003904:	2664      	movs	r6, #100	; 0x64
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 8003906:	f2c4 0102 	movt	r1, #16386	; 0x4002
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 800390a:	255c      	movs	r5, #92	; 0x5c
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 800390c:	f048 0801 	orr.w	r8, r8, #1
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 8003910:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(5)  = WriteAddress;
 8003914:	f2c4 0602 	movt	r6, #16386	; 0x4002
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8003918:	f8c3 8000 	str.w	r8, [r3]
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 800391c:	f2c4 0502 	movt	r5, #16386	; 0x4002
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 8003920:	f8c1 c000 	str.w	ip, [r1]
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 8003924:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(5)  = WriteAddress;
 8003926:	6030      	str	r0, [r6, #0]
	REG_DMA1_CNDTR(5) = BufSize;
	
	
	
	REG_DMA1_CCR(5) = 0
 8003928:	2090      	movs	r0, #144	; 0x90
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 800392a:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(5) = 0
 800392c:	6008      	str	r0, [r1, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(5) |= (1<<0);	// Channel enable
 800392e:	680a      	ldr	r2, [r1, #0]
 8003930:	f042 0301 	orr.w	r3, r2, #1
 8003934:	600b      	str	r3, [r1, #0]
}
 8003936:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800393a:	4770      	bx	lr

0800393c <Hw_DMA_SPI2_IsTransFinished>:
---------------------------------------------------------------------------*/
u8 Hw_DMA_SPI2_IsTransFinished( void )
{
	u8 Ret = 0;
	
	if( REG_DMA1_ISR & (1<<13) )
 800393c:	2300      	movs	r3, #0
 800393e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8003948:	d00a      	beq.n	8003960 <Hw_DMA_SPI2_IsTransFinished+0x24>
	{
		if( REG_DMA1_ISR & (1<<17) )
 800394a:	6819      	ldr	r1, [r3, #0]
 800394c:	f411 3000 	ands.w	r0, r1, #131072	; 0x20000
 8003950:	d006      	beq.n	8003960 <Hw_DMA_SPI2_IsTransFinished+0x24>
		{
			REG_DMA1_IFCR = (1<<17) | (1<<13);
 8003952:	2304      	movs	r3, #4
 8003954:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003958:	f44f 3208 	mov.w	r2, #139264	; 0x22000
 800395c:	601a      	str	r2, [r3, #0]
			Ret = 1;
 800395e:	2001      	movs	r0, #1
		}
	}
	return Ret;
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop

08003964 <Hw_I2C_IMU_IO_Setup>:
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8003964:	2204      	movs	r2, #4
 8003966:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800396a:	6811      	ldr	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 800396c:	f640 4304 	movw	r3, #3076	; 0xc04
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8003970:	f041 0002 	orr.w	r0, r1, #2
 8003974:	6010      	str	r0, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8003976:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	f022 010f 	bic.w	r1, r2, #15
 8003980:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	f040 0203 	orr.w	r2, r0, #3
 8003988:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 800398a:	6819      	ldr	r1, [r3, #0]
 800398c:	f041 000c 	orr.w	r0, r1, #12
 8003990:	6018      	str	r0, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8003998:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	f040 0230 	orr.w	r2, r0, #48	; 0x30
 80039a0:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 80039a2:	6819      	ldr	r1, [r3, #0]
 80039a4:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 80039a8:	6018      	str	r0, [r3, #0]
 80039aa:	4770      	bx	lr

080039ac <Hw_I2C_IMU_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_IMU_Init( void )
{
 80039ac:	b570      	push	{r4, r5, r6, lr}
	static u8 power_on = FALSE;
	u32 SR;



	if( power_on == TRUE ) return;
 80039ae:	4c1e      	ldr	r4, [pc, #120]	; (8003a28 <Hw_I2C_IMU_Init+0x7c>)
 80039b0:	7823      	ldrb	r3, [r4, #0]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d036      	beq.n	8003a24 <Hw_I2C_IMU_Init+0x78>


	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	
 80039b6:	481d      	ldr	r0, [pc, #116]	; (8003a2c <Hw_I2C_IMU_Init+0x80>)
 80039b8:	4780      	blx	r0


	REG_I2C1_CR1 = 0;
 80039ba:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80039be:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80039c2:	2600      	movs	r6, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 80039c4:	f245 4504 	movw	r5, #21508	; 0x5404
	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	


	REG_I2C1_CR1 = 0;
 80039c8:	601e      	str	r6, [r3, #0]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 80039ca:	f2c4 0500 	movt	r5, #16384	; 0x4000
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 80039ce:	f245 401c 	movw	r0, #21532	; 0x541c

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 80039d2:	2624      	movs	r6, #36	; 0x24
 80039d4:	602e      	str	r6, [r5, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 80039d6:	f2c4 0000 	movt	r0, #16384	; 0x4000
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 80039da:	f245 4120 	movw	r1, #21536	; 0x5420
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 80039de:	f248 051e 	movw	r5, #32798	; 0x801e
 80039e2:	6005      	str	r5, [r0, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 80039e4:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80039e8:	200b      	movs	r0, #11


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 80039ea:	f241 021c 	movw	r2, #4124	; 0x101c
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 80039ee:	6008      	str	r0, [r1, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 80039f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80039f4:	6810      	ldr	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 80039f6:	f245 4114 	movw	r1, #21524	; 0x5414
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 80039fa:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 80039fe:	6010      	str	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8003a00:	6818      	ldr	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8003a02:	f245 4218 	movw	r2, #21528	; 0x5418
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8003a06:	f020 0002 	bic.w	r0, r0, #2
 8003a0a:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8003a0c:	6818      	ldr	r0, [r3, #0]

	SR = REG_I2C1_SR1;
 8003a0e:	f2c4 0100 	movt	r1, #16384	; 0x4000
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8003a12:	f040 0001 	orr.w	r0, r0, #1
 8003a16:	6018      	str	r0, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8003a18:	f2c4 0200 	movt	r2, #16384	; 0x4000


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8003a1c:	680b      	ldr	r3, [r1, #0]
	SR = REG_I2C1_SR2;
 8003a1e:	6813      	ldr	r3, [r2, #0]


	power_on = TRUE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	7023      	strb	r3, [r4, #0]
 8003a24:	bd70      	pop	{r4, r5, r6, pc}
 8003a26:	bf00      	nop
 8003a28:	20000480 	.word	0x20000480
 8003a2c:	08003965 	.word	0x08003965

08003a30 <Hw_I2C_IMU_GetErrStatus>:
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
 8003a30:	f245 4314 	movw	r3, #21524	; 0x5414
 8003a34:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a38:	681a      	ldr	r2, [r3, #0]
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 8003a3a:	6819      	ldr	r1, [r3, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
 8003a3c:	f412 6f00 	tst.w	r2, #2048	; 0x800
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 8003a40:	681a      	ldr	r2, [r3, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
 8003a42:	bf14      	ite	ne
 8003a44:	200b      	movne	r0, #11
 8003a46:	2000      	moveq	r0, #0
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 8003a48:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8003a4c:	bf18      	it	ne
 8003a4e:	200a      	movne	r0, #10
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 8003a50:	0592      	lsls	r2, r2, #22
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
 8003a52:	b410      	push	{r4}
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 8003a54:	681b      	ldr	r3, [r3, #0]
	u16 Err = 0;
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 8003a56:	d505      	bpl.n	8003a64 <Hw_I2C_IMU_GetErrStatus+0x34>
 8003a58:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a5c:	bf14      	ite	ne
 8003a5e:	2008      	movne	r0, #8
 8003a60:	2009      	moveq	r0, #9
 8003a62:	e002      	b.n	8003a6a <Hw_I2C_IMU_GetErrStatus+0x3a>
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 8003a64:	05db      	lsls	r3, r3, #23
 8003a66:	d51a      	bpl.n	8003a9e <Hw_I2C_IMU_GetErrStatus+0x6e>
 8003a68:	2008      	movs	r0, #8

	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
	{
		CLR_BIT( REG_I2C1_CR1, 0 );		// Peripheral disable	
 8003a6a:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8003a6e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a72:	681c      	ldr	r4, [r3, #0]
		SR = REG_I2C1_SR1;
 8003a74:	f245 4114 	movw	r1, #21524	; 0x5414

	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
	{
		CLR_BIT( REG_I2C1_CR1, 0 );		// Peripheral disable	
 8003a78:	f024 0401 	bic.w	r4, r4, #1
		SR = REG_I2C1_SR1;
		SR = REG_I2C1_SR2;
 8003a7c:	f245 4218 	movw	r2, #21528	; 0x5418

	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
	{
		CLR_BIT( REG_I2C1_CR1, 0 );		// Peripheral disable	
 8003a80:	601c      	str	r4, [r3, #0]
		SR = REG_I2C1_SR1;
 8003a82:	f2c4 0100 	movt	r1, #16384	; 0x4000
		SR = REG_I2C1_SR2;
 8003a86:	f2c4 0200 	movt	r2, #16384	; 0x4000
	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
	{
		CLR_BIT( REG_I2C1_CR1, 0 );		// Peripheral disable	
		SR = REG_I2C1_SR1;
 8003a8a:	680c      	ldr	r4, [r1, #0]
		SR = REG_I2C1_SR2;
 8003a8c:	6814      	ldr	r4, [r2, #0]

		SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8003a8e:	681c      	ldr	r4, [r3, #0]
 8003a90:	f044 0401 	orr.w	r4, r4, #1
 8003a94:	601c      	str	r4, [r3, #0]
		SR = REG_I2C1_SR1;
 8003a96:	680b      	ldr	r3, [r1, #0]
		SR = REG_I2C1_SR2;
 8003a98:	6813      	ldr	r3, [r2, #0]
	}

	return Err;
}
 8003a9a:	bc10      	pop	{r4}
 8003a9c:	4770      	bx	lr
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;


	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	d0fb      	beq.n	8003a9a <Hw_I2C_IMU_GetErrStatus+0x6a>
 8003aa2:	e7e2      	b.n	8003a6a <Hw_I2C_IMU_GetErrStatus+0x3a>

08003aa4 <Hw_I2C_IMU_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_ReadRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8003aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa6:	b08d      	sub	sp, #52	; 0x34
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;


	if( len > 0 ) LastIndex = len - 1;
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8117 	beq.w	8003cdc <Hw_I2C_IMU_ReadRegs+0x238>
 8003aae:	1e5f      	subs	r7, r3, #1
 8003ab0:	b2ff      	uxtb	r7, r7
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 8003ab2:	f245 4514 	movw	r5, #21524	; 0x5414
 8003ab6:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8003aba:	682e      	ldr	r6, [r5, #0]
			SR2 = REG_I2C1_SR2;
 8003abc:	f245 4418 	movw	r4, #21528	; 0x5418
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 8003ac0:	9600      	str	r6, [sp, #0]
			SR2 = REG_I2C1_SR2;
 8003ac2:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003ac6:	6824      	ldr	r4, [r4, #0]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8003ac8:	f44f 46a8 	mov.w	r6, #21504	; 0x5400
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
			SR2 = REG_I2C1_SR2;
 8003acc:	9401      	str	r4, [sp, #4]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8003ace:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8003ad2:	f8d6 c000 	ldr.w	ip, [r6]
 8003ad6:	f242 7410 	movw	r4, #10000	; 0x2710
 8003ada:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8003ade:	f8c6 c000 	str.w	ip, [r6]
 8003ae2:	e008      	b.n	8003af6 <Hw_I2C_IMU_ReadRegs+0x52>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003ae4:	682e      	ldr	r6, [r5, #0]
 8003ae6:	9602      	str	r6, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003ae8:	9e02      	ldr	r6, [sp, #8]
 8003aea:	f016 0f01 	tst.w	r6, #1
 8003aee:	d108      	bne.n	8003b02 <Hw_I2C_IMU_ReadRegs+0x5e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003af0:	3c01      	subs	r4, #1
 8003af2:	f000 80f5 	beq.w	8003ce0 <Hw_I2C_IMU_ReadRegs+0x23c>
	{
		Reg = *reg_addr;
 8003af6:	682e      	ldr	r6, [r5, #0]
 8003af8:	3c01      	subs	r4, #1
 8003afa:	9602      	str	r6, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003afc:	9e02      	ldr	r6, [sp, #8]
 8003afe:	07f6      	lsls	r6, r6, #31
 8003b00:	d5f0      	bpl.n	8003ae4 <Hw_I2C_IMU_ReadRegs+0x40>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b02:	f245 4518 	movw	r5, #21528	; 0x5418

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b06:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b0a:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8003b0e:	e008      	b.n	8003b22 <Hw_I2C_IMU_ReadRegs+0x7e>
 8003b10:	682e      	ldr	r6, [r5, #0]
 8003b12:	9603      	str	r6, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b14:	9e03      	ldr	r6, [sp, #12]
 8003b16:	f016 0f01 	tst.w	r6, #1
 8003b1a:	d108      	bne.n	8003b2e <Hw_I2C_IMU_ReadRegs+0x8a>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003b1c:	3c01      	subs	r4, #1
 8003b1e:	f000 80df 	beq.w	8003ce0 <Hw_I2C_IMU_ReadRegs+0x23c>
	{
		Reg = *reg_addr;
 8003b22:	682e      	ldr	r6, [r5, #0]
 8003b24:	3c01      	subs	r4, #1
 8003b26:	9603      	str	r6, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b28:	9e03      	ldr	r6, [sp, #12]
 8003b2a:	07f6      	lsls	r6, r6, #31
 8003b2c:	d5f0      	bpl.n	8003b10 <Hw_I2C_IMU_ReadRegs+0x6c>



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8003b2e:	f245 4410 	movw	r4, #21520	; 0x5410
 8003b32:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003b36:	0040      	lsls	r0, r0, #1
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b38:	f245 4514 	movw	r5, #21524	; 0x5414



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8003b3c:	6020      	str	r0, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b3e:	f2c4 0500 	movt	r5, #16384	; 0x4000



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8003b42:	f242 7410 	movw	r4, #10000	; 0x2710
 8003b46:	e008      	b.n	8003b5a <Hw_I2C_IMU_ReadRegs+0xb6>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b48:	682e      	ldr	r6, [r5, #0]
 8003b4a:	9604      	str	r6, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b4c:	9e04      	ldr	r6, [sp, #16]
 8003b4e:	f016 0f02 	tst.w	r6, #2
 8003b52:	d108      	bne.n	8003b66 <Hw_I2C_IMU_ReadRegs+0xc2>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003b54:	3c01      	subs	r4, #1
 8003b56:	f000 80df 	beq.w	8003d18 <Hw_I2C_IMU_ReadRegs+0x274>
	{
		Reg = *reg_addr;
 8003b5a:	682e      	ldr	r6, [r5, #0]
 8003b5c:	3c01      	subs	r4, #1
 8003b5e:	9604      	str	r6, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b60:	9e04      	ldr	r6, [sp, #16]
 8003b62:	07b6      	lsls	r6, r6, #30
 8003b64:	d5f0      	bpl.n	8003b48 <Hw_I2C_IMU_ReadRegs+0xa4>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003b66:	f245 4518 	movw	r5, #21528	; 0x5418
 8003b6a:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8003b6e:	682c      	ldr	r4, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b70:	f245 4514 	movw	r5, #21524	; 0x5414
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003b74:	9401      	str	r4, [sp, #4]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b76:	f2c4 0500 	movt	r5, #16384	; 0x4000
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003b7a:	f242 7410 	movw	r4, #10000	; 0x2710
 8003b7e:	e008      	b.n	8003b92 <Hw_I2C_IMU_ReadRegs+0xee>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b80:	682e      	ldr	r6, [r5, #0]
 8003b82:	9605      	str	r6, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b84:	9e05      	ldr	r6, [sp, #20]
 8003b86:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003b8a:	d108      	bne.n	8003b9e <Hw_I2C_IMU_ReadRegs+0xfa>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003b8c:	3c01      	subs	r4, #1
 8003b8e:	f000 80cb 	beq.w	8003d28 <Hw_I2C_IMU_ReadRegs+0x284>
	{
		Reg = *reg_addr;
 8003b92:	682e      	ldr	r6, [r5, #0]
 8003b94:	3c01      	subs	r4, #1
 8003b96:	9605      	str	r6, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b98:	9e05      	ldr	r6, [sp, #20]
 8003b9a:	0636      	lsls	r6, r6, #24
 8003b9c:	d5f0      	bpl.n	8003b80 <Hw_I2C_IMU_ReadRegs+0xdc>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b9e:	f245 4514 	movw	r5, #21524	; 0x5414

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003ba2:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003ba6:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8003baa:	e008      	b.n	8003bbe <Hw_I2C_IMU_ReadRegs+0x11a>
 8003bac:	682e      	ldr	r6, [r5, #0]
 8003bae:	9606      	str	r6, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003bb0:	9e06      	ldr	r6, [sp, #24]
 8003bb2:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003bb6:	d109      	bne.n	8003bcc <Hw_I2C_IMU_ReadRegs+0x128>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003bb8:	3c01      	subs	r4, #1
 8003bba:	f000 80b5 	beq.w	8003d28 <Hw_I2C_IMU_ReadRegs+0x284>
	{
		Reg = *reg_addr;
 8003bbe:	682e      	ldr	r6, [r5, #0]
 8003bc0:	3c01      	subs	r4, #1
 8003bc2:	9606      	str	r6, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003bc4:	9e06      	ldr	r6, [sp, #24]
 8003bc6:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003bca:	d0ef      	beq.n	8003bac <Hw_I2C_IMU_ReadRegs+0x108>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 8003bcc:	f245 4510 	movw	r5, #21520	; 0x5410
 8003bd0:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003bd4:	f245 4414 	movw	r4, #21524	; 0x5414
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 8003bd8:	6029      	str	r1, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003bda:	f2c4 0400 	movt	r4, #16384	; 0x4000
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 8003bde:	f242 7110 	movw	r1, #10000	; 0x2710
 8003be2:	e008      	b.n	8003bf6 <Hw_I2C_IMU_ReadRegs+0x152>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003be4:	6825      	ldr	r5, [r4, #0]
 8003be6:	9507      	str	r5, [sp, #28]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003be8:	9d07      	ldr	r5, [sp, #28]
 8003bea:	f015 0f04 	tst.w	r5, #4
 8003bee:	d108      	bne.n	8003c02 <Hw_I2C_IMU_ReadRegs+0x15e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003bf0:	3901      	subs	r1, #1
 8003bf2:	f000 80a5 	beq.w	8003d40 <Hw_I2C_IMU_ReadRegs+0x29c>
	{
		Reg = *reg_addr;
 8003bf6:	6825      	ldr	r5, [r4, #0]
 8003bf8:	3901      	subs	r1, #1
 8003bfa:	9507      	str	r5, [sp, #28]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003bfc:	9d07      	ldr	r5, [sp, #28]
 8003bfe:	076d      	lsls	r5, r5, #29
 8003c00:	d5f0      	bpl.n	8003be4 <Hw_I2C_IMU_ReadRegs+0x140>



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8003c02:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8003c06:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8003c0a:	680d      	ldr	r5, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003c0c:	f245 4414 	movw	r4, #21524	; 0x5414



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8003c10:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8003c14:	600d      	str	r5, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003c16:	f2c4 0400 	movt	r4, #16384	; 0x4000



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8003c1a:	f242 7110 	movw	r1, #10000	; 0x2710
 8003c1e:	e007      	b.n	8003c30 <Hw_I2C_IMU_ReadRegs+0x18c>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003c20:	6825      	ldr	r5, [r4, #0]
 8003c22:	9508      	str	r5, [sp, #32]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003c24:	9d08      	ldr	r5, [sp, #32]
 8003c26:	f015 0f01 	tst.w	r5, #1
 8003c2a:	d108      	bne.n	8003c3e <Hw_I2C_IMU_ReadRegs+0x19a>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003c2c:	3901      	subs	r1, #1
 8003c2e:	d057      	beq.n	8003ce0 <Hw_I2C_IMU_ReadRegs+0x23c>
	{
		Reg = *reg_addr;
 8003c30:	6825      	ldr	r5, [r4, #0]
 8003c32:	3901      	subs	r1, #1
 8003c34:	9508      	str	r5, [sp, #32]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003c36:	9d08      	ldr	r5, [sp, #32]
 8003c38:	f015 0f01 	tst.w	r5, #1
 8003c3c:	d0f0      	beq.n	8003c20 <Hw_I2C_IMU_ReadRegs+0x17c>
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 8003c3e:	f245 4110 	movw	r1, #21520	; 0x5410
 8003c42:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8003c46:	f040 0001 	orr.w	r0, r0, #1
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003c4a:	f245 4414 	movw	r4, #21524	; 0x5414
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 8003c4e:	6008      	str	r0, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003c50:	f2c4 0400 	movt	r4, #16384	; 0x4000
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 8003c54:	f242 7110 	movw	r1, #10000	; 0x2710
 8003c58:	e006      	b.n	8003c68 <Hw_I2C_IMU_ReadRegs+0x1c4>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003c5a:	6820      	ldr	r0, [r4, #0]
 8003c5c:	9009      	str	r0, [sp, #36]	; 0x24

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c60:	0780      	lsls	r0, r0, #30
 8003c62:	d407      	bmi.n	8003c74 <Hw_I2C_IMU_ReadRegs+0x1d0>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003c64:	3901      	subs	r1, #1
 8003c66:	d057      	beq.n	8003d18 <Hw_I2C_IMU_ReadRegs+0x274>
	{
		Reg = *reg_addr;
 8003c68:	6820      	ldr	r0, [r4, #0]
 8003c6a:	3901      	subs	r1, #1
 8003c6c:	9009      	str	r0, [sp, #36]	; 0x24

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003c6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c70:	0780      	lsls	r0, r0, #30
 8003c72:	d5f2      	bpl.n	8003c5a <Hw_I2C_IMU_ReadRegs+0x1b6>
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003c74:	f245 4018 	movw	r0, #21528	; 0x5418
 8003c78:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003c7c:	6801      	ldr	r1, [r0, #0]
 8003c7e:	9101      	str	r1, [sp, #4]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8003c80:	b353      	cbz	r3, 8003cd8 <Hw_I2C_IMU_ReadRegs+0x234>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 8003c82:	f44f 45a8 	mov.w	r5, #21504	; 0x5400
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003c86:	f245 4014 	movw	r0, #21524	; 0x5414


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, HW_I2C_IMU_TIMEOUT );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 8003c8a:	f245 4c10 	movw	ip, #21520	; 0x5410
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8003c8e:	2600      	movs	r6, #0
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 8003c90:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003c94:	f2c4 0000 	movt	r0, #16384	; 0x4000


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, HW_I2C_IMU_TIMEOUT );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 8003c98:	f2c4 0c00 	movt	ip, #16384	; 0x4000

			//-- Read DATA
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
 8003c9c:	42b7      	cmp	r7, r6
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 8003c9e:	682c      	ldr	r4, [r5, #0]

			//-- Read DATA
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
 8003ca0:	d944      	bls.n	8003d2c <Hw_I2C_IMU_ReadRegs+0x288>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 8003ca2:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8003ca6:	602c      	str	r4, [r5, #0]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8003ca8:	f242 7110 	movw	r1, #10000	; 0x2710
 8003cac:	e007      	b.n	8003cbe <Hw_I2C_IMU_ReadRegs+0x21a>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003cae:	6804      	ldr	r4, [r0, #0]
 8003cb0:	940a      	str	r4, [sp, #40]	; 0x28

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003cb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003cb4:	f014 0f40 	tst.w	r4, #64	; 0x40
 8003cb8:	d107      	bne.n	8003cca <Hw_I2C_IMU_ReadRegs+0x226>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003cba:	3901      	subs	r1, #1
 8003cbc:	d03e      	beq.n	8003d3c <Hw_I2C_IMU_ReadRegs+0x298>
	{
		Reg = *reg_addr;
 8003cbe:	6804      	ldr	r4, [r0, #0]
 8003cc0:	3901      	subs	r1, #1
 8003cc2:	940a      	str	r4, [sp, #40]	; 0x28

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003cc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003cc6:	0664      	lsls	r4, r4, #25
 8003cc8:	d5f1      	bpl.n	8003cae <Hw_I2C_IMU_ReadRegs+0x20a>


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, HW_I2C_IMU_TIMEOUT );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 8003cca:	f8dc 4000 	ldr.w	r4, [ip]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8003cce:	1c71      	adds	r1, r6, #1


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, HW_I2C_IMU_TIMEOUT );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 8003cd0:	5594      	strb	r4, [r2, r6]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8003cd2:	b2ce      	uxtb	r6, r1
 8003cd4:	42b3      	cmp	r3, r6
 8003cd6:	d8e1      	bhi.n	8003c9c <Hw_I2C_IMU_ReadRegs+0x1f8>
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_ReadRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_reg, u16 len )
{
    u16 Ret = 0;
    u16 Err = 0;
 8003cd8:	2000      	movs	r0, #0
 8003cda:	e002      	b.n	8003ce2 <Hw_I2C_IMU_ReadRegs+0x23e>
	u8  i;
	u32 TimeOut;
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;
 8003cdc:	461f      	mov	r7, r3
 8003cde:	e6e8      	b.n	8003ab2 <Hw_I2C_IMU_ReadRegs+0xe>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 8003ce0:	2002      	movs	r0, #2
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003ce2:	f245 4218 	movw	r2, #21528	; 0x5418
				{
					ptr_reg[i] = REG_I2C1_DR;
				}
				else
				{
					Err = HW_I2C_ERR_RXE;
 8003ce6:	f242 7310 	movw	r3, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003cea:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003cee:	e006      	b.n	8003cfe <Hw_I2C_IMU_ReadRegs+0x25a>
 8003cf0:	6811      	ldr	r1, [r2, #0]
 8003cf2:	910b      	str	r1, [sp, #44]	; 0x2c

		if( IS_CLR_BIT( Reg, reg_bit ) ) break;
 8003cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003cf6:	0789      	lsls	r1, r1, #30
 8003cf8:	d507      	bpl.n	8003d0a <Hw_I2C_IMU_ReadRegs+0x266>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	d00a      	beq.n	8003d14 <Hw_I2C_IMU_ReadRegs+0x270>
	{
		Reg = *reg_addr;
 8003cfe:	6811      	ldr	r1, [r2, #0]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	910b      	str	r1, [sp, #44]	; 0x2c

		if( IS_CLR_BIT( Reg, reg_bit ) ) break;
 8003d04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d06:	0789      	lsls	r1, r1, #30
 8003d08:	d4f2      	bmi.n	8003cf0 <Hw_I2C_IMU_ReadRegs+0x24c>
	Ret = Hw_I2C_IMU_WaitForBitClr( (u32 *)&REG_I2C1_SR2, 1, HW_I2C_IMU_TIMEOUT );

	if( Ret != 0 )	Err = HW_I2C_ERR_END;


	if( Err == 0 )
 8003d0a:	b908      	cbnz	r0, 8003d10 <Hw_I2C_IMU_ReadRegs+0x26c>
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 8003d0c:	480d      	ldr	r0, [pc, #52]	; (8003d44 <Hw_I2C_IMU_ReadRegs+0x2a0>)
 8003d0e:	4780      	blx	r0
	}
	

    return Err;

}
 8003d10:	b00d      	add	sp, #52	; 0x34
 8003d12:	bdf0      	pop	{r4, r5, r6, r7, pc}

	//-- I2C가 Idle일때까지 기다린다.
	//
	Ret = Hw_I2C_IMU_WaitForBitClr( (u32 *)&REG_I2C1_SR2, 1, HW_I2C_IMU_TIMEOUT );

	if( Ret != 0 )	Err = HW_I2C_ERR_END;
 8003d14:	2007      	movs	r0, #7
 8003d16:	e7fb      	b.n	8003d10 <Hw_I2C_IMU_ReadRegs+0x26c>
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003d18:	f245 4318 	movw	r3, #21528	; 0x5418
 8003d1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003d20:	681a      	ldr	r2, [r3, #0]

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 8003d22:	2003      	movs	r0, #3
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003d24:	9201      	str	r2, [sp, #4]
 8003d26:	e7dc      	b.n	8003ce2 <Hw_I2C_IMU_ReadRegs+0x23e>

			
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, HW_I2C_IMU_TIMEOUT );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 8003d28:	2004      	movs	r0, #4
 8003d2a:	e7da      	b.n	8003ce2 <Hw_I2C_IMU_ReadRegs+0x23e>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 8003d2c:	f424 6180 	bic.w	r1, r4, #1024	; 0x400
 8003d30:	6029      	str	r1, [r5, #0]
					SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 8003d32:	682c      	ldr	r4, [r5, #0]
 8003d34:	f444 7100 	orr.w	r1, r4, #512	; 0x200
 8003d38:	6029      	str	r1, [r5, #0]
 8003d3a:	e7b5      	b.n	8003ca8 <Hw_I2C_IMU_ReadRegs+0x204>
				{
					ptr_reg[i] = REG_I2C1_DR;
				}
				else
				{
					Err = HW_I2C_ERR_RXE;
 8003d3c:	2005      	movs	r0, #5
 8003d3e:	e7d0      	b.n	8003ce2 <Hw_I2C_IMU_ReadRegs+0x23e>


			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, HW_I2C_IMU_TIMEOUT );	// BTF
			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_STOP;
 8003d40:	2006      	movs	r0, #6
 8003d42:	e7ce      	b.n	8003ce2 <Hw_I2C_IMU_ReadRegs+0x23e>
 8003d44:	08003a31 	.word	0x08003a31

08003d48 <Hw_I2C_IMU_HMC5883_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	4606      	mov	r6, r0
 8003d4c:	460d      	mov	r5, r1
	}
	

	return Ret;
	*/
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_reg, len );
 8003d4e:	f643 24a5 	movw	r4, #15013	; 0x3aa5
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8003d52:	4613      	mov	r3, r2
	}
	

	return Ret;
	*/
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_reg, len );
 8003d54:	201e      	movs	r0, #30
 8003d56:	4631      	mov	r1, r6
 8003d58:	462a      	mov	r2, r5
 8003d5a:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003d5e:	47a0      	blx	r4
}
 8003d60:	bd70      	pop	{r4, r5, r6, pc}
 8003d62:	bf00      	nop

08003d64 <Hw_I2C_IMU_HMC5883_ReadReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 8003d64:	4603      	mov	r3, r0
 8003d66:	b510      	push	{r4, lr}
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_reg, 1 );
 8003d68:	f643 24a5 	movw	r4, #15013	; 0x3aa5
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 8003d6c:	460a      	mov	r2, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_reg, 1 );
 8003d6e:	201e      	movs	r0, #30
 8003d70:	4619      	mov	r1, r3
 8003d72:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003d76:	2301      	movs	r3, #1
 8003d78:	47a0      	blx	r4
}
 8003d7a:	bd10      	pop	{r4, pc}

08003d7c <Hw_I2C_IMU_MPU6050_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	4606      	mov	r6, r0
 8003d80:	460d      	mov	r5, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, len );
 8003d82:	f643 24a5 	movw	r4, #15013	; 0x3aa5
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8003d86:	4613      	mov	r3, r2
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, len );
 8003d88:	2068      	movs	r0, #104	; 0x68
 8003d8a:	4631      	mov	r1, r6
 8003d8c:	462a      	mov	r2, r5
 8003d8e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003d92:	47a0      	blx	r4
}
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
 8003d96:	bf00      	nop

08003d98 <Hw_I2C_IMU_MPU6050_ReadReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 8003d98:	4603      	mov	r3, r0
 8003d9a:	b510      	push	{r4, lr}
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, 1 );
 8003d9c:	f643 24a5 	movw	r4, #15013	; 0x3aa5
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 8003da0:	460a      	mov	r2, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, 1 );
 8003da2:	2068      	movs	r0, #104	; 0x68
 8003da4:	4619      	mov	r1, r3
 8003da6:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003daa:	2301      	movs	r3, #1
 8003dac:	47a0      	blx	r4
}
 8003dae:	bd10      	pop	{r4, pc}

08003db0 <Hw_I2C_IMU_WriteRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 8003db0:	b570      	push	{r4, r5, r6, lr}

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8003db2:	f44f 44a8 	mov.w	r4, #21504	; 0x5400
 8003db6:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003dba:	6826      	ldr	r6, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003dbc:	f245 4514 	movw	r5, #21524	; 0x5414

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8003dc0:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 8003dc4:	6026      	str	r6, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 8003dc6:	b088      	sub	sp, #32

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8003dc8:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003dcc:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8003dd0:	e008      	b.n	8003de4 <Hw_I2C_IMU_WriteRegs+0x34>
 8003dd2:	682e      	ldr	r6, [r5, #0]
 8003dd4:	9601      	str	r6, [sp, #4]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003dd6:	9e01      	ldr	r6, [sp, #4]
 8003dd8:	f016 0f01 	tst.w	r6, #1
 8003ddc:	d109      	bne.n	8003df2 <Hw_I2C_IMU_WriteRegs+0x42>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003dde:	3c01      	subs	r4, #1
 8003de0:	f000 8097 	beq.w	8003f12 <Hw_I2C_IMU_WriteRegs+0x162>
	{
		Reg = *reg_addr;
 8003de4:	682e      	ldr	r6, [r5, #0]
 8003de6:	3c01      	subs	r4, #1
 8003de8:	9601      	str	r6, [sp, #4]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003dea:	9e01      	ldr	r6, [sp, #4]
 8003dec:	f016 0f01 	tst.w	r6, #1
 8003df0:	d0ef      	beq.n	8003dd2 <Hw_I2C_IMU_WriteRegs+0x22>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8003df2:	f245 4510 	movw	r5, #21520	; 0x5410
 8003df6:	0040      	lsls	r0, r0, #1
 8003df8:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003dfc:	f245 4414 	movw	r4, #21524	; 0x5414
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8003e00:	6028      	str	r0, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003e02:	f2c4 0400 	movt	r4, #16384	; 0x4000
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8003e06:	f242 7010 	movw	r0, #10000	; 0x2710
 8003e0a:	e007      	b.n	8003e1c <Hw_I2C_IMU_WriteRegs+0x6c>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003e0c:	6825      	ldr	r5, [r4, #0]
 8003e0e:	9502      	str	r5, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003e10:	9d02      	ldr	r5, [sp, #8]
 8003e12:	f015 0f02 	tst.w	r5, #2
 8003e16:	d107      	bne.n	8003e28 <Hw_I2C_IMU_WriteRegs+0x78>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003e18:	3801      	subs	r0, #1
 8003e1a:	d05b      	beq.n	8003ed4 <Hw_I2C_IMU_WriteRegs+0x124>
	{
		Reg = *reg_addr;
 8003e1c:	6825      	ldr	r5, [r4, #0]
 8003e1e:	3801      	subs	r0, #1
 8003e20:	9502      	str	r5, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003e22:	9d02      	ldr	r5, [sp, #8]
 8003e24:	07ad      	lsls	r5, r5, #30
 8003e26:	d5f1      	bpl.n	8003e0c <Hw_I2C_IMU_WriteRegs+0x5c>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003e28:	f245 4518 	movw	r5, #21528	; 0x5418
 8003e2c:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003e30:	f245 4414 	movw	r4, #21524	; 0x5414
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003e34:	6828      	ldr	r0, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003e36:	f2c4 0400 	movt	r4, #16384	; 0x4000
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003e3a:	f242 7010 	movw	r0, #10000	; 0x2710
 8003e3e:	e008      	b.n	8003e52 <Hw_I2C_IMU_WriteRegs+0xa2>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003e40:	6825      	ldr	r5, [r4, #0]
 8003e42:	9503      	str	r5, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003e44:	9d03      	ldr	r5, [sp, #12]
 8003e46:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003e4a:	d108      	bne.n	8003e5e <Hw_I2C_IMU_WriteRegs+0xae>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003e4c:	3801      	subs	r0, #1
 8003e4e:	f000 8082 	beq.w	8003f56 <Hw_I2C_IMU_WriteRegs+0x1a6>
	{
		Reg = *reg_addr;
 8003e52:	6825      	ldr	r5, [r4, #0]
 8003e54:	3801      	subs	r0, #1
 8003e56:	9503      	str	r5, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003e58:	9d03      	ldr	r5, [sp, #12]
 8003e5a:	062d      	lsls	r5, r5, #24
 8003e5c:	d5f0      	bpl.n	8003e40 <Hw_I2C_IMU_WriteRegs+0x90>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003e5e:	f245 4414 	movw	r4, #21524	; 0x5414

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003e62:	f242 7010 	movw	r0, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003e66:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003e6a:	e007      	b.n	8003e7c <Hw_I2C_IMU_WriteRegs+0xcc>
 8003e6c:	6825      	ldr	r5, [r4, #0]
 8003e6e:	9504      	str	r5, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003e70:	9d04      	ldr	r5, [sp, #16]
 8003e72:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003e76:	d108      	bne.n	8003e8a <Hw_I2C_IMU_WriteRegs+0xda>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003e78:	3801      	subs	r0, #1
 8003e7a:	d06c      	beq.n	8003f56 <Hw_I2C_IMU_WriteRegs+0x1a6>
	{
		Reg = *reg_addr;
 8003e7c:	6825      	ldr	r5, [r4, #0]
 8003e7e:	3801      	subs	r0, #1
 8003e80:	9504      	str	r5, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003e82:	9d04      	ldr	r5, [sp, #16]
 8003e84:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003e88:	d0f0      	beq.n	8003e6c <Hw_I2C_IMU_WriteRegs+0xbc>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;	
 8003e8a:	f245 4610 	movw	r6, #21520	; 0x5410
 8003e8e:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8003e92:	6031      	str	r1, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
    u16 Ret = 0;
    u16 Err = 0;
 8003e94:	4618      	mov	r0, r3

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d054      	beq.n	8003f44 <Hw_I2C_IMU_WriteRegs+0x194>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003e9a:	f245 4414 	movw	r4, #21524	; 0x5414

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 8003e9e:	2500      	movs	r5, #0
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003ea0:	f2c4 0400 	movt	r4, #16384	; 0x4000

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003ea4:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ea8:	e006      	b.n	8003eb8 <Hw_I2C_IMU_WriteRegs+0x108>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003eaa:	6820      	ldr	r0, [r4, #0]
 8003eac:	9005      	str	r0, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003eae:	9805      	ldr	r0, [sp, #20]
 8003eb0:	0600      	lsls	r0, r0, #24
 8003eb2:	d407      	bmi.n	8003ec4 <Hw_I2C_IMU_WriteRegs+0x114>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003eb4:	3901      	subs	r1, #1
 8003eb6:	d030      	beq.n	8003f1a <Hw_I2C_IMU_WriteRegs+0x16a>
	{
		Reg = *reg_addr;
 8003eb8:	6820      	ldr	r0, [r4, #0]
 8003eba:	3901      	subs	r1, #1
 8003ebc:	9005      	str	r0, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003ebe:	9805      	ldr	r0, [sp, #20]
 8003ec0:	0600      	lsls	r0, r0, #24
 8003ec2:	d5f2      	bpl.n	8003eaa <Hw_I2C_IMU_WriteRegs+0xfa>
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 8003ec4:	5d50      	ldrb	r0, [r2, r5]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 8003ec6:	3501      	adds	r5, #1
 8003ec8:	b2ed      	uxtb	r5, r5
 8003eca:	429d      	cmp	r5, r3
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 8003ecc:	6030      	str	r0, [r6, #0]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 8003ece:	d3e9      	bcc.n	8003ea4 <Hw_I2C_IMU_WriteRegs+0xf4>
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
    u16 Ret = 0;
    u16 Err = 0;
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	e023      	b.n	8003f1c <Hw_I2C_IMU_WriteRegs+0x16c>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003ed4:	f245 4318 	movw	r3, #21528	; 0x5418
 8003ed8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003edc:	681b      	ldr	r3, [r3, #0]

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 8003ede:	2003      	movs	r0, #3
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003ee0:	f245 4218 	movw	r2, #21528	; 0x5418
			if( len > 0 )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, HW_I2C_IMU_TIMEOUT );	// BTF
				if( Ret != 0 ) 
				{
					Err = HW_I2C_ERR_STOP;
 8003ee4:	f242 7310 	movw	r3, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003ee8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003eec:	e006      	b.n	8003efc <Hw_I2C_IMU_WriteRegs+0x14c>
 8003eee:	6811      	ldr	r1, [r2, #0]
 8003ef0:	9107      	str	r1, [sp, #28]

		if( IS_CLR_BIT( Reg, reg_bit ) ) break;
 8003ef2:	9907      	ldr	r1, [sp, #28]
 8003ef4:	0789      	lsls	r1, r1, #30
 8003ef6:	d507      	bpl.n	8003f08 <Hw_I2C_IMU_WriteRegs+0x158>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	d00c      	beq.n	8003f16 <Hw_I2C_IMU_WriteRegs+0x166>
	{
		Reg = *reg_addr;
 8003efc:	6811      	ldr	r1, [r2, #0]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	9107      	str	r1, [sp, #28]

		if( IS_CLR_BIT( Reg, reg_bit ) ) break;
 8003f02:	9907      	ldr	r1, [sp, #28]
 8003f04:	0789      	lsls	r1, r1, #30
 8003f06:	d4f2      	bmi.n	8003eee <Hw_I2C_IMU_WriteRegs+0x13e>

	if( Ret != 0 )	Err = HW_I2C_ERR_END;



	if( Err == 0 )
 8003f08:	b908      	cbnz	r0, 8003f0e <Hw_I2C_IMU_WriteRegs+0x15e>
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 8003f0a:	4815      	ldr	r0, [pc, #84]	; (8003f60 <Hw_I2C_IMU_WriteRegs+0x1b0>)
 8003f0c:	4780      	blx	r0
	}
	

    return Err;
}
 8003f0e:	b008      	add	sp, #32
 8003f10:	bd70      	pop	{r4, r5, r6, pc}
			SET_BIT( REG_I2C1_CR1, 8 );

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 0, HW_I2C_IMU_TIMEOUT );
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 8003f12:	2002      	movs	r0, #2
 8003f14:	e7e4      	b.n	8003ee0 <Hw_I2C_IMU_WriteRegs+0x130>

	//-- I2C가 Idle일때까지 기다린다.
	//
	Ret = Hw_I2C_IMU_WaitForBitClr( (u32 *)&REG_I2C1_SR2, 1, HW_I2C_IMU_TIMEOUT );

	if( Ret != 0 )	Err = HW_I2C_ERR_END;
 8003f16:	2007      	movs	r0, #7
 8003f18:	e7f9      	b.n	8003f0e <Hw_I2C_IMU_WriteRegs+0x15e>
			for( i=0; i<len; i++ )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, HW_I2C_IMU_TIMEOUT );	// TXE
				if( Ret != 0 )
				{
					Err = HW_I2C_ERR_TXE;
 8003f1a:	2004      	movs	r0, #4
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003f1c:	f245 4214 	movw	r2, #21524	; 0x5414
			for( i=0; i<len; i++ )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, HW_I2C_IMU_TIMEOUT );	// TXE
				if( Ret != 0 )
				{
					Err = HW_I2C_ERR_TXE;
 8003f20:	f242 7310 	movw	r3, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003f24:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003f28:	e006      	b.n	8003f38 <Hw_I2C_IMU_WriteRegs+0x188>
 8003f2a:	6811      	ldr	r1, [r2, #0]
 8003f2c:	9106      	str	r1, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003f2e:	9906      	ldr	r1, [sp, #24]
 8003f30:	0749      	lsls	r1, r1, #29
 8003f32:	d407      	bmi.n	8003f44 <Hw_I2C_IMU_WriteRegs+0x194>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003f34:	3b01      	subs	r3, #1
 8003f36:	d010      	beq.n	8003f5a <Hw_I2C_IMU_WriteRegs+0x1aa>
	{
		Reg = *reg_addr;
 8003f38:	6811      	ldr	r1, [r2, #0]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	9106      	str	r1, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003f3e:	9906      	ldr	r1, [sp, #24]
 8003f40:	0749      	lsls	r1, r1, #29
 8003f42:	d5f2      	bpl.n	8003f2a <Hw_I2C_IMU_WriteRegs+0x17a>
					Err = HW_I2C_ERR_STOP;
					break;
				}
			}

			SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 8003f44:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8003f48:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8003f4c:	680a      	ldr	r2, [r1, #0]
 8003f4e:	f442 7300 	orr.w	r3, r2, #512	; 0x200
 8003f52:	600b      	str	r3, [r1, #0]
			break;
 8003f54:	e7c4      	b.n	8003ee0 <Hw_I2C_IMU_WriteRegs+0x130>
			//Lb_printf("S2 %x\n", REG_I2C1_SR2);
				
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, HW_I2C_IMU_TIMEOUT );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 8003f56:	2004      	movs	r0, #4
 8003f58:	e7c2      	b.n	8003ee0 <Hw_I2C_IMU_WriteRegs+0x130>
			if( len > 0 )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, HW_I2C_IMU_TIMEOUT );	// BTF
				if( Ret != 0 ) 
				{
					Err = HW_I2C_ERR_STOP;
 8003f5a:	2006      	movs	r0, #6
 8003f5c:	e7c0      	b.n	8003ee0 <Hw_I2C_IMU_WriteRegs+0x130>
 8003f5e:	bf00      	nop
 8003f60:	08003a31 	.word	0x08003a31

08003f64 <Hw_I2C_IMU_HMC5883_WriteRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteRegs( u8 reg_addr, u8 *ptr_data, u16 len )
{
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	4606      	mov	r6, r0
 8003f68:	460d      	mov	r5, r1
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_data, len );
 8003f6a:	f643 54b1 	movw	r4, #15793	; 0x3db1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteRegs( u8 reg_addr, u8 *ptr_data, u16 len )
{
 8003f6e:	4613      	mov	r3, r2
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_data, len );
 8003f70:	201e      	movs	r0, #30
 8003f72:	4631      	mov	r1, r6
 8003f74:	462a      	mov	r2, r5
 8003f76:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003f7a:	47a0      	blx	r4
}
 8003f7c:	bd70      	pop	{r4, r5, r6, pc}
 8003f7e:	bf00      	nop

08003f80 <Hw_I2C_IMU_HMC5883_WriteReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteReg( u8 reg_addr, u8 reg_data )
{	
 8003f80:	b510      	push	{r4, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	4603      	mov	r3, r0
 8003f86:	aa02      	add	r2, sp, #8
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, &reg_data, 1 );
 8003f88:	f643 54b1 	movw	r4, #15793	; 0x3db1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteReg( u8 reg_addr, u8 reg_data )
{	
 8003f8c:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, &reg_data, 1 );
 8003f90:	201e      	movs	r0, #30
 8003f92:	4619      	mov	r1, r3
 8003f94:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003f98:	2301      	movs	r3, #1
 8003f9a:	47a0      	blx	r4
}
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd10      	pop	{r4, pc}

08003fa0 <Hw_I2C_IMU_HMC5883_WriteAddr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteAddr( u8 reg_addr )
{
 8003fa0:	b510      	push	{r4, lr}
	u8 reg_data;

	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, &reg_data, 0 );
 8003fa2:	f643 54b1 	movw	r4, #15793	; 0x3db1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteAddr( u8 reg_addr )
{
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	4601      	mov	r1, r0
	u8 reg_data;

	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, &reg_data, 0 );
 8003faa:	f10d 0207 	add.w	r2, sp, #7
 8003fae:	201e      	movs	r0, #30
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003fb6:	47a0      	blx	r4
}
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd10      	pop	{r4, pc}

08003fbc <Hw_I2C_IMU_MPU6050_WriteReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_WriteReg( u8 reg_addr, u8 reg_data )
{
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	aa02      	add	r2, sp, #8
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, &reg_data, 1 );
 8003fc4:	f643 54b1 	movw	r4, #15793	; 0x3db1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_WriteReg( u8 reg_addr, u8 reg_data )
{
 8003fc8:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, &reg_data, 1 );
 8003fcc:	2068      	movs	r0, #104	; 0x68
 8003fce:	4619      	mov	r1, r3
 8003fd0:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	47a0      	blx	r4
}
 8003fd8:	b002      	add	sp, #8
 8003fda:	bd10      	pop	{r4, pc}

08003fdc <Hw_MPU6050_GetData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_GetData( HW_MPU6050_DATA_OBJ *ptr_data )
{
 8003fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe0:	b089      	sub	sp, #36	; 0x24
 8003fe2:	4604      	mov	r4, r0
	s16 Temp;

	HW_MPU6050_RAW_DATA_OBJ raw_data;


	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );
 8003fe4:	a904      	add	r1, sp, #16
 8003fe6:	203b      	movs	r0, #59	; 0x3b
 8003fe8:	220e      	movs	r2, #14
 8003fea:	4b26      	ldr	r3, [pc, #152]	; (8004084 <Hw_MPU6050_GetData+0xa8>)
 8003fec:	4798      	blx	r3

	if( Err == 0 )
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	d145      	bne.n	800407e <Hw_MPU6050_GetData+0xa2>

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
 8003ff2:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8003ff6:	f89d 1017 	ldrb.w	r1, [sp, #23]
		Temp = Temp/340 + 36;
 8003ffa:	f246 0b61 	movw	fp, #24673	; 0x6061

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
 8003ffe:	ea41 2502 	orr.w	r5, r1, r2, lsl #8
		Temp = Temp/340 + 36;
 8004002:	b22b      	sxth	r3, r5
 8004004:	f2c6 0b60 	movt	fp, #24672	; 0x6060
 8004008:	fb8b 2b03 	smull	r2, fp, fp, r3
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 800400c:	f89d 2019 	ldrb.w	r2, [sp, #25]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8004010:	f89d 101a 	ldrb.w	r1, [sp, #26]
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8004014:	9201      	str	r2, [sp, #4]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8004016:	f89d 201b 	ldrb.w	r2, [sp, #27]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 800401a:	f89d a010 	ldrb.w	sl, [sp, #16]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 800401e:	f89d 8012 	ldrb.w	r8, [sp, #18]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 8004022:	f89d 7014 	ldrb.w	r7, [sp, #20]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 8004026:	f89d 9011 	ldrb.w	r9, [sp, #17]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 800402a:	f89d c013 	ldrb.w	ip, [sp, #19]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 800402e:	f89d 6015 	ldrb.w	r6, [sp, #21]

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8004032:	9102      	str	r1, [sp, #8]
 8004034:	9203      	str	r2, [sp, #12]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 8004036:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 800403a:	ea4c 2e08 	orr.w	lr, ip, r8, lsl #8
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 800403e:	ea46 2607 	orr.w	r6, r6, r7, lsl #8

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8004042:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8004046:	9f01      	ldr	r7, [sp, #4]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8004048:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800404c:	f89d 201d 	ldrb.w	r2, [sp, #29]

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8004050:	17db      	asrs	r3, r3, #31
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8004052:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004056:	f8dd a008 	ldr.w	sl, [sp, #8]
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 800405a:	ebc3 13eb 	rsb	r3, r3, fp, asr #7
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 800405e:	ea47 2505 	orr.w	r5, r7, r5, lsl #8
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8004062:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8004066:	ea48 270a 	orr.w	r7, r8, sl, lsl #8
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 800406a:	3324      	adds	r3, #36	; 0x24

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 800406c:	f8a4 9000 	strh.w	r9, [r4]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8004070:	f8a4 e002 	strh.w	lr, [r4, #2]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 8004074:	80a6      	strh	r6, [r4, #4]

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8004076:	8125      	strh	r5, [r4, #8]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8004078:	8167      	strh	r7, [r4, #10]
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 800407a:	81a1      	strh	r1, [r4, #12]

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
		ptr_data->Temp = Temp;
 800407c:	80e3      	strh	r3, [r4, #6]
	}

	return Err;
}
 800407e:	b009      	add	sp, #36	; 0x24
 8004080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004084:	08003d7d 	.word	0x08003d7d

08004088 <Hw_MPU6050_I2CAuxMasterDisable>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_I2CAuxMasterDisable( void )
{
 8004088:	b500      	push	{lr}
 800408a:	b087      	sub	sp, #28
	u16 Err;
	u8  RegData[20];

	//-- I2C_BYPASS_EN = 1
	//
	Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_INT_PIN_CFG, RegData );
 800408c:	2037      	movs	r0, #55	; 0x37
 800408e:	a901      	add	r1, sp, #4
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <Hw_MPU6050_I2CAuxMasterDisable+0x28>)
 8004092:	4798      	blx	r3
	if( Err ) return Err;
 8004094:	b948      	cbnz	r0, 80040aa <Hw_MPU6050_I2CAuxMasterDisable+0x22>

	SET_BIT( RegData[0], 1 );
 8004096:	f89d 1004 	ldrb.w	r1, [sp, #4]

	Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_INT_PIN_CFG, RegData[0] );
 800409a:	2037      	movs	r0, #55	; 0x37
	//-- I2C_BYPASS_EN = 1
	//
	Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_INT_PIN_CFG, RegData );
	if( Err ) return Err;

	SET_BIT( RegData[0], 1 );
 800409c:	f041 0202 	orr.w	r2, r1, #2

	Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_INT_PIN_CFG, RegData[0] );
 80040a0:	4611      	mov	r1, r2
 80040a2:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <Hw_MPU6050_I2CAuxMasterDisable+0x2c>)
	//-- I2C_BYPASS_EN = 1
	//
	Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_INT_PIN_CFG, RegData );
	if( Err ) return Err;

	SET_BIT( RegData[0], 1 );
 80040a4:	f88d 2004 	strb.w	r2, [sp, #4]

	Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_INT_PIN_CFG, RegData[0] );
 80040a8:	4798      	blx	r3

	return Err;
}
 80040aa:	b007      	add	sp, #28
 80040ac:	bd00      	pop	{pc}
 80040ae:	bf00      	nop
 80040b0:	08003d99 	.word	0x08003d99
 80040b4:	08003fbd 	.word	0x08003fbd

080040b8 <Hw_MPU6050_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_Init( void )
{
 80040b8:	b570      	push	{r4, r5, r6, lr}
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_MPU6050_EnableFlag == TRUE ) return TRUE;
 80040ba:	4e26      	ldr	r6, [pc, #152]	; (8004154 <Hw_MPU6050_Init+0x9c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_Init( void )
{
 80040bc:	b086      	sub	sp, #24
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_MPU6050_EnableFlag == TRUE ) return TRUE;
 80040be:	7833      	ldrb	r3, [r6, #0]
 80040c0:	4925      	ldr	r1, [pc, #148]	; (8004158 <Hw_MPU6050_Init+0xa0>)
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d03d      	beq.n	8004142 <Hw_MPU6050_Init+0x8a>


	Hw_MPU6050_EnableFlag = FALSE;
 80040c6:	2200      	movs	r2, #0

	Hw_Wait_ms(36);
 80040c8:	2024      	movs	r0, #36	; 0x24
 80040ca:	4c24      	ldr	r4, [pc, #144]	; (800415c <Hw_MPU6050_Init+0xa4>)


	if( power_on == TRUE && Hw_MPU6050_EnableFlag == TRUE ) return TRUE;


	Hw_MPU6050_EnableFlag = FALSE;
 80040cc:	700a      	strb	r2, [r1, #0]

	Hw_Wait_ms(36);
 80040ce:	47a0      	blx	r4


	//-- I2C 초기화
	//
	Hw_I2C_IMU_Init();	
 80040d0:	4823      	ldr	r0, [pc, #140]	; (8004160 <Hw_MPU6050_Init+0xa8>)
 80040d2:	4780      	blx	r0


	while(1)
	{

		Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_WHO_AM_I, RegData );
 80040d4:	4d23      	ldr	r5, [pc, #140]	; (8004164 <Hw_MPU6050_Init+0xac>)
 80040d6:	2075      	movs	r0, #117	; 0x75
 80040d8:	a901      	add	r1, sp, #4
 80040da:	47a8      	blx	r5
		if( Err != 0 )
 80040dc:	4604      	mov	r4, r0
 80040de:	b9d8      	cbnz	r0, 8004118 <Hw_MPU6050_Init+0x60>
			Lb_printf("Can't find MPU6050 \n");
			break;
		}


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
 80040e0:	4621      	mov	r1, r4
 80040e2:	206b      	movs	r0, #107	; 0x6b
 80040e4:	4d20      	ldr	r5, [pc, #128]	; (8004168 <Hw_MPU6050_Init+0xb0>)
 80040e6:	47a8      	blx	r5
		if( Err != 0 )
 80040e8:	4604      	mov	r4, r0
 80040ea:	2800      	cmp	r0, #0
 80040ec:	d12d      	bne.n	800414a <Hw_MPU6050_Init+0x92>

		break;
	}


	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_SMPLRT_DIV  , 0x07 );	// Set the sample rate to 1000Hz - 8kHz/(7+1) = 1000Hz
 80040ee:	2107      	movs	r1, #7
 80040f0:	2019      	movs	r0, #25
 80040f2:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_CONFIG      , 0x00 );	// Disable FSYNC and set 260 Hz Acc filtering, 256 Hz Gyro filtering, 8 KHz sampling
 80040f4:	4621      	mov	r1, r4
 80040f6:	201a      	movs	r0, #26
 80040f8:	47a8      	blx	r5
	//Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_GYRO_CONFIG , 0x00 );	// Set Gyro Full Scale Range to ±250deg/s
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_GYRO_CONFIG , 0x03 << 3 );	// Set Gyro Full Scale Range to ±2000deg/s
 80040fa:	2118      	movs	r1, #24
 80040fc:	201b      	movs	r0, #27
 80040fe:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_ACCEL_CONFIG, 0x00 );	// Set Accelerometer Full Scale Range to ±2g	
 8004100:	4621      	mov	r1, r4
 8004102:	201c      	movs	r0, #28
 8004104:	47a8      	blx	r5


	Hw_MPU6050_I2CAuxMasterDisable();
 8004106:	4b19      	ldr	r3, [pc, #100]	; (800416c <Hw_MPU6050_Init+0xb4>)
 8004108:	4798      	blx	r3
	power_on = TRUE;


	if( Err == 0 )
	{
		Hw_MPU6050_EnableFlag = TRUE;
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <Hw_MPU6050_Init+0xa0>)

	Hw_MPU6050_I2CAuxMasterDisable();



	power_on = TRUE;
 800410c:	2101      	movs	r1, #1
 800410e:	7031      	strb	r1, [r6, #0]


	if( Err == 0 )
	{
		Hw_MPU6050_EnableFlag = TRUE;
 8004110:	7011      	strb	r1, [r2, #0]
	}


	return Err;
}
 8004112:	4620      	mov	r0, r4
 8004114:	b006      	add	sp, #24
 8004116:	bd70      	pop	{r4, r5, r6, pc}
	{

		Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_WHO_AM_I, RegData );
		if( Err != 0 )
		{
			Lb_printf("Can't find MPU6050 \n");
 8004118:	4d15      	ldr	r5, [pc, #84]	; (8004170 <Hw_MPU6050_Init+0xb8>)
 800411a:	4816      	ldr	r0, [pc, #88]	; (8004174 <Hw_MPU6050_Init+0xbc>)
 800411c:	47a8      	blx	r5
 800411e:	4d12      	ldr	r5, [pc, #72]	; (8004168 <Hw_MPU6050_Init+0xb0>)

		break;
	}


	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_SMPLRT_DIV  , 0x07 );	// Set the sample rate to 1000Hz - 8kHz/(7+1) = 1000Hz
 8004120:	2107      	movs	r1, #7
 8004122:	2019      	movs	r0, #25
 8004124:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_CONFIG      , 0x00 );	// Disable FSYNC and set 260 Hz Acc filtering, 256 Hz Gyro filtering, 8 KHz sampling
 8004126:	2100      	movs	r1, #0
 8004128:	201a      	movs	r0, #26
 800412a:	47a8      	blx	r5
	//Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_GYRO_CONFIG , 0x00 );	// Set Gyro Full Scale Range to ±250deg/s
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_GYRO_CONFIG , 0x03 << 3 );	// Set Gyro Full Scale Range to ±2000deg/s
 800412c:	2118      	movs	r1, #24
 800412e:	201b      	movs	r0, #27
 8004130:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_ACCEL_CONFIG, 0x00 );	// Set Accelerometer Full Scale Range to ±2g	
 8004132:	2100      	movs	r1, #0
 8004134:	201c      	movs	r0, #28
 8004136:	47a8      	blx	r5


	Hw_MPU6050_I2CAuxMasterDisable();
 8004138:	480c      	ldr	r0, [pc, #48]	; (800416c <Hw_MPU6050_Init+0xb4>)
 800413a:	4780      	blx	r0



	power_on = TRUE;
 800413c:	2101      	movs	r1, #1
 800413e:	7031      	strb	r1, [r6, #0]
 8004140:	e7e7      	b.n	8004112 <Hw_MPU6050_Init+0x5a>
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_MPU6050_EnableFlag == TRUE ) return TRUE;
 8004142:	780c      	ldrb	r4, [r1, #0]
 8004144:	2c01      	cmp	r4, #1
 8004146:	d1be      	bne.n	80040c6 <Hw_MPU6050_Init+0xe>
 8004148:	e7e3      	b.n	8004112 <Hw_MPU6050_Init+0x5a>


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
		if( Err != 0 )
		{
			Lb_printf("Err write MPU6050_RA_PWR_MGMT_1 : %d\n", Err);
 800414a:	480b      	ldr	r0, [pc, #44]	; (8004178 <Hw_MPU6050_Init+0xc0>)
 800414c:	4621      	mov	r1, r4
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <Hw_MPU6050_Init+0xb8>)
 8004150:	4798      	blx	r3
			break;
 8004152:	e7e5      	b.n	8004120 <Hw_MPU6050_Init+0x68>
 8004154:	20000482 	.word	0x20000482
 8004158:	20000481 	.word	0x20000481
 800415c:	08002785 	.word	0x08002785
 8004160:	080039ad 	.word	0x080039ad
 8004164:	08003d99 	.word	0x08003d99
 8004168:	08003fbd 	.word	0x08003fbd
 800416c:	08004089 	.word	0x08004089
 8004170:	0800203d 	.word	0x0800203d
 8004174:	0800870c 	.word	0x0800870c
 8004178:	08008724 	.word	0x08008724

0800417c <Hw_Sonic_GetDistanceMM>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Sonic_GetDistanceMM( u8 Ch )
{
	return Hw_Sonic_Log[Ch].DistanceMM;
 800417c:	f640 5388 	movw	r3, #3464	; 0xd88
 8004180:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004184:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004188:	eb03 0140 	add.w	r1, r3, r0, lsl #1
}
 800418c:	8908      	ldrh	r0, [r1, #8]
 800418e:	4770      	bx	lr

08004190 <Hw_HMC5883_CheckID>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_HMC5883_CheckID( void )
{
 8004190:	b500      	push	{lr}
 8004192:	b087      	sub	sp, #28
	u8  Ret = TRUE;
	u16 Err = 0;
	u8  RegData[20];
	u16 i;

	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_ID_A, RegData, 3 );
 8004194:	200a      	movs	r0, #10
 8004196:	a901      	add	r1, sp, #4
 8004198:	2203      	movs	r2, #3
 800419a:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <Hw_HMC5883_CheckID+0x38>)
 800419c:	4798      	blx	r3

	//Lb_printf(" %x  %x  %x\n", RegData[0], RegData[1], RegData[2] );
	if( Err == 0 )
 800419e:	b960      	cbnz	r0, 80041ba <Hw_HMC5883_CheckID+0x2a>
	{
		if( RegData[0] != 0x48 ) Ret = FALSE;
		if( RegData[1] != 0x34 ) Ret = FALSE;
 80041a0:	f89d 1005 	ldrb.w	r1, [sp, #5]
	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_ID_A, RegData, 3 );

	//Lb_printf(" %x  %x  %x\n", RegData[0], RegData[1], RegData[2] );
	if( Err == 0 )
	{
		if( RegData[0] != 0x48 ) Ret = FALSE;
 80041a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
		if( RegData[1] != 0x34 ) Ret = FALSE;
 80041a8:	2934      	cmp	r1, #52	; 0x34
 80041aa:	d008      	beq.n	80041be <Hw_HMC5883_CheckID+0x2e>
		if( RegData[2] != 0x33 ) Ret = FALSE;				
 80041ac:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80041b0:	2933      	cmp	r1, #51	; 0x33
 80041b2:	bf18      	it	ne
 80041b4:	2000      	movne	r0, #0
	}

	if( Err != 0 ) Ret = FALSE;

	return Ret;	
}
 80041b6:	b007      	add	sp, #28
 80041b8:	bd00      	pop	{pc}
		if( RegData[0] != 0x48 ) Ret = FALSE;
		if( RegData[1] != 0x34 ) Ret = FALSE;
		if( RegData[2] != 0x33 ) Ret = FALSE;				
	}

	if( Err != 0 ) Ret = FALSE;
 80041ba:	2000      	movs	r0, #0
 80041bc:	e7fb      	b.n	80041b6 <Hw_HMC5883_CheckID+0x26>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_HMC5883_CheckID( void )
{
	u8  Ret = TRUE;
 80041be:	f1b2 0348 	subs.w	r3, r2, #72	; 0x48
 80041c2:	4258      	negs	r0, r3
 80041c4:	4158      	adcs	r0, r3
 80041c6:	e7f1      	b.n	80041ac <Hw_HMC5883_CheckID+0x1c>
 80041c8:	08003d49 	.word	0x08003d49

080041cc <Hw_HMC5883_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_HMC5883_Init( void )
{
 80041cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_HMC5883_EnableFlag == TRUE ) return TRUE;
 80041ce:	4d27      	ldr	r5, [pc, #156]	; (800426c <Hw_HMC5883_Init+0xa0>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_HMC5883_Init( void )
{
 80041d0:	b087      	sub	sp, #28
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_HMC5883_EnableFlag == TRUE ) return TRUE;
 80041d2:	782b      	ldrb	r3, [r5, #0]
 80041d4:	4926      	ldr	r1, [pc, #152]	; (8004270 <Hw_HMC5883_Init+0xa4>)
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d01a      	beq.n	8004210 <Hw_HMC5883_Init+0x44>


	Hw_HMC5883_EnableFlag = FALSE;

	Hw_Wait_ms(10);
 80041da:	200a      	movs	r0, #10
 80041dc:	4a25      	ldr	r2, [pc, #148]	; (8004274 <Hw_HMC5883_Init+0xa8>)


	if( power_on == TRUE && Hw_HMC5883_EnableFlag == TRUE ) return TRUE;


	Hw_HMC5883_EnableFlag = FALSE;
 80041de:	2400      	movs	r4, #0
 80041e0:	700c      	strb	r4, [r1, #0]

	Hw_Wait_ms(10);
 80041e2:	4790      	blx	r2


	//-- I2C 초기화
	//
	Hw_I2C_IMU_Init();	
 80041e4:	4824      	ldr	r0, [pc, #144]	; (8004278 <Hw_HMC5883_Init+0xac>)
 80041e6:	4780      	blx	r0



	if( Hw_HMC5883_CheckID() == FALSE )
 80041e8:	4b24      	ldr	r3, [pc, #144]	; (800427c <Hw_HMC5883_Init+0xb0>)
 80041ea:	4798      	blx	r3
 80041ec:	b158      	cbz	r0, 8004206 <Hw_HMC5883_Init+0x3a>
		Lb_printf("HMC5883 Fail to read ID \n");
		Err = HW_I2C_ERR_CHECK_ID;
	}
	else
	{
		Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );
 80041ee:	4620      	mov	r0, r4
 80041f0:	a901      	add	r1, sp, #4
 80041f2:	4c23      	ldr	r4, [pc, #140]	; (8004280 <Hw_HMC5883_Init+0xb4>)
 80041f4:	2203      	movs	r2, #3
 80041f6:	47a0      	blx	r4

		if( Err == 0 )
 80041f8:	4604      	mov	r4, r0
 80041fa:	b168      	cbz	r0, 8004218 <Hw_HMC5883_Init+0x4c>
		}
	}



	power_on = TRUE;
 80041fc:	2301      	movs	r3, #1
 80041fe:	702b      	strb	r3, [r5, #0]
		Hw_HMC5883_EnableFlag = TRUE;
	}


	return Err;
}
 8004200:	4620      	mov	r0, r4
 8004202:	b007      	add	sp, #28
 8004204:	bdf0      	pop	{r4, r5, r6, r7, pc}



	if( Hw_HMC5883_CheckID() == FALSE )
	{
		Lb_printf("HMC5883 Fail to read ID \n");
 8004206:	4c1f      	ldr	r4, [pc, #124]	; (8004284 <Hw_HMC5883_Init+0xb8>)
 8004208:	481f      	ldr	r0, [pc, #124]	; (8004288 <Hw_HMC5883_Init+0xbc>)
 800420a:	47a0      	blx	r4
		Err = HW_I2C_ERR_CHECK_ID;
 800420c:	2408      	movs	r4, #8
 800420e:	e7f5      	b.n	80041fc <Hw_HMC5883_Init+0x30>
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_HMC5883_EnableFlag == TRUE ) return TRUE;
 8004210:	780c      	ldrb	r4, [r1, #0]
 8004212:	2c01      	cmp	r4, #1
 8004214:	d1e1      	bne.n	80041da <Hw_HMC5883_Init+0xe>
 8004216:	e7f3      	b.n	8004200 <Hw_HMC5883_Init+0x34>
		Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );

		if( Err == 0 )
		{

			Hw_I2C_IMU_HMC5883_WriteReg( HW_HMC5883_REG_MODE, 0 );
 8004218:	4601      	mov	r1, r0
 800421a:	4e1c      	ldr	r6, [pc, #112]	; (800428c <Hw_HMC5883_Init+0xc0>)
 800421c:	2002      	movs	r0, #2
 800421e:	47b0      	blx	r6

			//-- 75Hz로 출력 설정
			//
			SET_BIT( RegData[0], 4 );	// DO2 = 1
			SET_BIT( RegData[0], 3 );	// DO1 = 1
			CLR_BIT( RegData[0], 2 );	// DO0 = 0
 8004220:	f89d 7004 	ldrb.w	r7, [sp, #4]


			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0
 8004224:	f89d 1006 	ldrb.w	r1, [sp, #6]

			//-- 75Hz로 출력 설정
			//
			SET_BIT( RegData[0], 4 );	// DO2 = 1
			SET_BIT( RegData[0], 3 );	// DO1 = 1
			CLR_BIT( RegData[0], 2 );	// DO0 = 0
 8004228:	f027 0004 	bic.w	r0, r7, #4


			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0
 800422c:	f021 0303 	bic.w	r3, r1, #3

			Err = Hw_I2C_IMU_HMC5883_WriteRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );
 8004230:	2203      	movs	r2, #3

			//-- 75Hz로 출력 설정
			//
			SET_BIT( RegData[0], 4 );	// DO2 = 1
			SET_BIT( RegData[0], 3 );	// DO1 = 1
			CLR_BIT( RegData[0], 2 );	// DO0 = 0
 8004232:	f040 0778 	orr.w	r7, r0, #120	; 0x78
			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0

			Err = Hw_I2C_IMU_HMC5883_WriteRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );
 8004236:	a901      	add	r1, sp, #4
 8004238:	4620      	mov	r0, r4


			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0
 800423a:	f88d 3006 	strb.w	r3, [sp, #6]

			Err = Hw_I2C_IMU_HMC5883_WriteRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );
 800423e:	4b14      	ldr	r3, [pc, #80]	; (8004290 <Hw_HMC5883_Init+0xc4>)
			SET_BIT( RegData[0], 4 );	// DO2 = 1
			SET_BIT( RegData[0], 3 );	// DO1 = 1
			CLR_BIT( RegData[0], 2 );	// DO0 = 0


			RegData[1] = 0;
 8004240:	f88d 4005 	strb.w	r4, [sp, #5]

			//-- 75Hz로 출력 설정
			//
			SET_BIT( RegData[0], 4 );	// DO2 = 1
			SET_BIT( RegData[0], 3 );	// DO1 = 1
			CLR_BIT( RegData[0], 2 );	// DO0 = 0
 8004244:	f88d 7004 	strb.w	r7, [sp, #4]
			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0

			Err = Hw_I2C_IMU_HMC5883_WriteRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );
 8004248:	4798      	blx	r3


			//Hw_HMC5883_Calibrate(1);
			Hw_I2C_IMU_HMC5883_WriteReg( HW_HMC5883_REG_CFG_A, 0x78 );
 800424a:	4620      	mov	r0, r4
 800424c:	2178      	movs	r1, #120	; 0x78
 800424e:	47b0      	blx	r6
			Hw_I2C_IMU_HMC5883_WriteReg( HW_HMC5883_REG_MODE, 0 );			
 8004250:	4621      	mov	r1, r4
 8004252:	2002      	movs	r0, #2
 8004254:	47b0      	blx	r6


			Err = Hw_I2C_IMU_HMC5883_WriteAddr( HW_HMC5883_REG_DATA_X_MSB );
 8004256:	2003      	movs	r0, #3
 8004258:	4a0e      	ldr	r2, [pc, #56]	; (8004294 <Hw_HMC5883_Init+0xc8>)
 800425a:	4790      	blx	r2
		}
	}



	power_on = TRUE;
 800425c:	2101      	movs	r1, #1


	if( Err == 0 )
 800425e:	4604      	mov	r4, r0
		}
	}



	power_on = TRUE;
 8004260:	7029      	strb	r1, [r5, #0]


	if( Err == 0 )
 8004262:	2800      	cmp	r0, #0
 8004264:	d1cc      	bne.n	8004200 <Hw_HMC5883_Init+0x34>
	{
		Hw_HMC5883_EnableFlag = TRUE;
 8004266:	4802      	ldr	r0, [pc, #8]	; (8004270 <Hw_HMC5883_Init+0xa4>)
 8004268:	7001      	strb	r1, [r0, #0]
 800426a:	e7c9      	b.n	8004200 <Hw_HMC5883_Init+0x34>
 800426c:	20000484 	.word	0x20000484
 8004270:	20000483 	.word	0x20000483
 8004274:	08002785 	.word	0x08002785
 8004278:	080039ad 	.word	0x080039ad
 800427c:	08004191 	.word	0x08004191
 8004280:	08003d49 	.word	0x08003d49
 8004284:	0800203d 	.word	0x0800203d
 8004288:	0800874c 	.word	0x0800874c
 800428c:	08003f81 	.word	0x08003f81
 8004290:	08003f65 	.word	0x08003f65
 8004294:	08003fa1 	.word	0x08003fa1

08004298 <Hw_HMC5883_GetData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_HMC5883_GetData( HW_HMC5883_DATA_OBJ *ptr_data )
{
 8004298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	4604      	mov	r4, r0
	u16 Err;

	HW_HMC5883_RAW_DATA_OBJ raw_data;


	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_DATA_X_MSB, (u8 *)&raw_data, 6 );
 80042a0:	4669      	mov	r1, sp
 80042a2:	2003      	movs	r0, #3
 80042a4:	2206      	movs	r2, #6
 80042a6:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <Hw_HMC5883_GetData+0x78>)
 80042a8:	4798      	blx	r3


	if( Err == 0 )
 80042aa:	bb50      	cbnz	r0, 8004302 <Hw_HMC5883_GetData+0x6a>
	{
		ptr_data->X_Compass = (s16)((raw_data.X_Compass_H<<8) | (raw_data.X_Compass_L<<0));	
		ptr_data->Y_Compass = (s16)((raw_data.Y_Compass_H<<8) | (raw_data.Y_Compass_L<<0));	
 80042ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_DATA_X_MSB, (u8 *)&raw_data, 6 );


	if( Err == 0 )
	{
		ptr_data->X_Compass = (s16)((raw_data.X_Compass_H<<8) | (raw_data.X_Compass_L<<0));	
 80042b0:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80042b4:	f89d 0000 	ldrb.w	r0, [sp]
		ptr_data->Y_Compass = (s16)((raw_data.Y_Compass_H<<8) | (raw_data.Y_Compass_L<<0));	
		ptr_data->Z_Compass = (s16)((raw_data.Z_Compass_H<<8) | (raw_data.Z_Compass_L<<0));	
 80042b8:	f89d 5003 	ldrb.w	r5, [sp, #3]


	if( Err == 0 )
	{
		ptr_data->X_Compass = (s16)((raw_data.X_Compass_H<<8) | (raw_data.X_Compass_L<<0));	
		ptr_data->Y_Compass = (s16)((raw_data.Y_Compass_H<<8) | (raw_data.Y_Compass_L<<0));	
 80042bc:	f89d 8004 	ldrb.w	r8, [sp, #4]
		ptr_data->Z_Compass = (s16)((raw_data.Z_Compass_H<<8) | (raw_data.Z_Compass_L<<0));	
 80042c0:	f89d 7002 	ldrb.w	r7, [sp, #2]
	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_DATA_X_MSB, (u8 *)&raw_data, 6 );


	if( Err == 0 )
	{
		ptr_data->X_Compass = (s16)((raw_data.X_Compass_H<<8) | (raw_data.X_Compass_L<<0));	
 80042c4:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
		ptr_data->Y_Compass = (s16)((raw_data.Y_Compass_H<<8) | (raw_data.Y_Compass_L<<0));	
 80042c8:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
		ptr_data->Z_Compass = (s16)((raw_data.Z_Compass_H<<8) | (raw_data.Z_Compass_L<<0));	
 80042cc:	ea45 2707 	orr.w	r7, r5, r7, lsl #8
	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_DATA_X_MSB, (u8 *)&raw_data, 6 );


	if( Err == 0 )
	{
		ptr_data->X_Compass = (s16)((raw_data.X_Compass_H<<8) | (raw_data.X_Compass_L<<0));	
 80042d0:	8023      	strh	r3, [r4, #0]
		ptr_data->Y_Compass = (s16)((raw_data.Y_Compass_H<<8) | (raw_data.Y_Compass_L<<0));	
		ptr_data->Z_Compass = (s16)((raw_data.Z_Compass_H<<8) | (raw_data.Z_Compass_L<<0));	


  		ptr_data->X_CompassScale = ((float) ptr_data->X_Compass) / x_scale;
 80042d2:	b218      	sxth	r0, r3
 80042d4:	4e0f      	ldr	r6, [pc, #60]	; (8004314 <Hw_HMC5883_GetData+0x7c>)


	if( Err == 0 )
	{
		ptr_data->X_Compass = (s16)((raw_data.X_Compass_H<<8) | (raw_data.X_Compass_L<<0));	
		ptr_data->Y_Compass = (s16)((raw_data.Y_Compass_H<<8) | (raw_data.Y_Compass_L<<0));	
 80042d6:	f8a4 8002 	strh.w	r8, [r4, #2]
		ptr_data->Z_Compass = (s16)((raw_data.Z_Compass_H<<8) | (raw_data.Z_Compass_L<<0));	
 80042da:	80a7      	strh	r7, [r4, #4]


  		ptr_data->X_CompassScale = ((float) ptr_data->X_Compass) / x_scale;
 80042dc:	47b0      	blx	r6
 80042de:	490e      	ldr	r1, [pc, #56]	; (8004318 <Hw_HMC5883_GetData+0x80>)
 80042e0:	4d0e      	ldr	r5, [pc, #56]	; (800431c <Hw_HMC5883_GetData+0x84>)
 80042e2:	6809      	ldr	r1, [r1, #0]
 80042e4:	47a8      	blx	r5
 80042e6:	60a0      	str	r0, [r4, #8]
  		ptr_data->Y_CompassScale = ((float) ptr_data->Y_Compass) / y_scale;
 80042e8:	fa0f f088 	sxth.w	r0, r8
 80042ec:	47b0      	blx	r6
 80042ee:	4a0c      	ldr	r2, [pc, #48]	; (8004320 <Hw_HMC5883_GetData+0x88>)
 80042f0:	6811      	ldr	r1, [r2, #0]
 80042f2:	47a8      	blx	r5
 80042f4:	60e0      	str	r0, [r4, #12]
  		ptr_data->Z_CompassScale = ((float) ptr_data->Z_Compass) / z_scale;
 80042f6:	b238      	sxth	r0, r7
 80042f8:	47b0      	blx	r6
 80042fa:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <Hw_HMC5883_GetData+0x8c>)
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	47a8      	blx	r5
 8004300:	6120      	str	r0, [r4, #16]

	}
	

	Err = Hw_I2C_IMU_HMC5883_WriteAddr( HW_HMC5883_REG_DATA_X_MSB );
 8004302:	2003      	movs	r0, #3
 8004304:	4908      	ldr	r1, [pc, #32]	; (8004328 <Hw_HMC5883_GetData+0x90>)
 8004306:	4788      	blx	r1

	return Err;
}
 8004308:	b002      	add	sp, #8
 800430a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800430e:	bf00      	nop
 8004310:	08003d49 	.word	0x08003d49
 8004314:	08000ac1 	.word	0x08000ac1
 8004318:	20000dac 	.word	0x20000dac
 800431c:	08000cd1 	.word	0x08000cd1
 8004320:	20000da0 	.word	0x20000da0
 8004324:	20000d9c 	.word	0x20000d9c
 8004328:	08003fa1 	.word	0x08003fa1

0800432c <Hw_HMC5883_GetEnable>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_HMC5883_GetEnable( void )
{
	return Hw_HMC5883_EnableFlag;
 800432c:	f240 4383 	movw	r3, #1155	; 0x483
 8004330:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8004334:	7818      	ldrb	r0, [r3, #0]
 8004336:	4770      	bx	lr

08004338 <Hw_IMU_FreeIMU_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_IMU_FreeIMU_Init( void )
{
 8004338:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// initialize quaternion
	q0 = 1.0f;
	q1 = 0.0f;
	q2 = 0.0f;
	q3 = 0.0f;
 800433c:	f640 56d8 	movw	r6, #3544	; 0xdd8
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_IMU_FreeIMU_Init( void )
{
 8004340:	b088      	sub	sp, #32
	// initialize quaternion
	q0 = 1.0f;
	q1 = 0.0f;
	q2 = 0.0f;
	q3 = 0.0f;
 8004342:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8004346:	9601      	str	r6, [sp, #4]
	exInt = 0.0;
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
	twoKi = twoKiDef;
 8004348:	f640 6634 	movw	r6, #3636	; 0xe34
 800434c:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8004350:	9602      	str	r6, [sp, #8]
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
 8004352:	f640 6640 	movw	r6, #3648	; 0xe40
 8004356:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800435a:	9603      	str	r6, [sp, #12]
 800435c:	f640 56d4 	movw	r6, #3540	; 0xdd4
 8004360:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8004364:	9604      	str	r6, [sp, #16]
 8004366:	f640 663c 	movw	r6, #3644	; 0xe3c
 800436a:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800436e:	9605      	str	r6, [sp, #20]
	lastUpdate = 0;
	now = 0;

	gyro_off_x = 0;
 8004370:	f640 6638 	movw	r6, #3640	; 0xe38
 8004374:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8004378:	9606      	str	r6, [sp, #24]
	gyro_off_y = 0;
 800437a:	f640 56cc 	movw	r6, #3532	; 0xdcc
 800437e:	f2c2 0600 	movt	r6, #8192	; 0x2000
     RET     : void
---------------------------------------------------------------------------*/
void Hw_IMU_FreeIMU_Init( void )
{
	// initialize quaternion
	q0 = 1.0f;
 8004382:	f640 6b50 	movw	fp, #3664	; 0xe50
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
	lastUpdate = 0;
	now = 0;

	gyro_off_x = 0;
	gyro_off_y = 0;
 8004386:	9607      	str	r6, [sp, #28]
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
	twoKi = twoKiDef;
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
	lastUpdate = 0;
 8004388:	f640 55c4 	movw	r5, #3524	; 0xdc4
     RET     : void
---------------------------------------------------------------------------*/
void Hw_IMU_FreeIMU_Init( void )
{
	// initialize quaternion
	q0 = 1.0f;
 800438c:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 8004390:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 8004394:	f8cb 6000 	str.w	r6, [fp]
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
	twoKi = twoKiDef;
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
	lastUpdate = 0;
 8004398:	2200      	movs	r2, #0
 800439a:	f2c2 0500 	movt	r5, #8192	; 0x2000
{
	// initialize quaternion
	q0 = 1.0f;
	q1 = 0.0f;
	q2 = 0.0f;
	q3 = 0.0f;
 800439e:	9e01      	ldr	r6, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_IMU_FreeIMU_Init( void )
{
	// initialize quaternion
	q0 = 1.0f;
	q1 = 0.0f;
 80043a0:	f640 59dc 	movw	r9, #3548	; 0xddc
	q2 = 0.0f;
 80043a4:	f640 5cc0 	movw	ip, #3520	; 0xdc0
	q3 = 0.0f;
	exInt = 0.0;
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
 80043a8:	f640 6454 	movw	r4, #3668	; 0xe54
	twoKi = twoKiDef;
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
	lastUpdate = 0;
	now = 0;
 80043ac:	f640 50b4 	movw	r0, #3508	; 0xdb4
---------------------------------------------------------------------------*/
void Hw_IMU_FreeIMU_Init( void )
{
	// initialize quaternion
	q0 = 1.0f;
	q1 = 0.0f;
 80043b0:	2300      	movs	r3, #0
	q2 = 0.0f;
	q3 = 0.0f;
	exInt = 0.0;
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
 80043b2:	f2c2 0400 	movt	r4, #8192	; 0x2000
	twoKi = twoKiDef;
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
	lastUpdate = 0;
	now = 0;
 80043b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
	twoKi = twoKiDef;
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
	lastUpdate = 0;
 80043ba:	802a      	strh	r2, [r5, #0]
---------------------------------------------------------------------------*/
void Hw_IMU_FreeIMU_Init( void )
{
	// initialize quaternion
	q0 = 1.0f;
	q1 = 0.0f;
 80043bc:	f2c2 0900 	movt	r9, #8192	; 0x2000
	q2 = 0.0f;
	q3 = 0.0f;
	exInt = 0.0;
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
 80043c0:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
void Hw_IMU_FreeIMU_Init( void )
{
	// initialize quaternion
	q0 = 1.0f;
	q1 = 0.0f;
	q2 = 0.0f;
 80043c4:	f2c2 0c00 	movt	ip, #8192	; 0x2000
---------------------------------------------------------------------------*/
void Hw_IMU_FreeIMU_Init( void )
{
	// initialize quaternion
	q0 = 1.0f;
	q1 = 0.0f;
 80043c8:	f8c9 3000 	str.w	r3, [r9]
	ezInt = 0.0;
	twoKp = twoKpDef;
	twoKi = twoKiDef;
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
	lastUpdate = 0;
	now = 0;
 80043cc:	8002      	strh	r2, [r0, #0]
void Hw_IMU_FreeIMU_Init( void )
{
	// initialize quaternion
	q0 = 1.0f;
	q1 = 0.0f;
	q2 = 0.0f;
 80043ce:	f8cc 3000 	str.w	r3, [ip]
	lastUpdate = 0;
	now = 0;

	gyro_off_x = 0;
	gyro_off_y = 0;
	gyro_off_z = 0;
 80043d2:	f640 6148 	movw	r1, #3656	; 0xe48
{
	// initialize quaternion
	q0 = 1.0f;
	q1 = 0.0f;
	q2 = 0.0f;
	q3 = 0.0f;
 80043d6:	6033      	str	r3, [r6, #0]
	exInt = 0.0;
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
	twoKi = twoKiDef;
 80043d8:	9802      	ldr	r0, [sp, #8]
	q2 = 0.0f;
	q3 = 0.0f;
	exInt = 0.0;
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
 80043da:	6025      	str	r5, [r4, #0]
	twoKi = twoKiDef;
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
	lastUpdate = 0;
	now = 0;

	gyro_off_x = 0;
 80043dc:	9e06      	ldr	r6, [sp, #24]
	q3 = 0.0f;
	exInt = 0.0;
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
	twoKi = twoKiDef;
 80043de:	f64c 44cd 	movw	r4, #52429	; 0xcccd
	lastUpdate = 0;
	now = 0;

	gyro_off_x = 0;
	gyro_off_y = 0;
	gyro_off_z = 0;
 80043e2:	f2c2 0100 	movt	r1, #8192	; 0x2000
	q3 = 0.0f;
	exInt = 0.0;
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
	twoKi = twoKiDef;
 80043e6:	f6c3 644c 	movt	r4, #15948	; 0x3e4c
 80043ea:	6004      	str	r4, [r0, #0]
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
	lastUpdate = 0;
	now = 0;

	gyro_off_x = 0;
 80043ec:	8032      	strh	r2, [r6, #0]
	gyro_off_y = 0;
	gyro_off_z = 0;
 80043ee:	800a      	strh	r2, [r1, #0]
	// initialize quaternion
	q0 = 1.0f;
	q1 = 0.0f;
	q2 = 0.0f;
	q3 = 0.0f;
	exInt = 0.0;
 80043f0:	f640 5abc 	movw	sl, #3516	; 0xdbc
	eyInt = 0.0;
 80043f4:	f640 58e0 	movw	r8, #3552	; 0xde0
	ezInt = 0.0;
 80043f8:	f640 672c 	movw	r7, #3628	; 0xe2c
	twoKp = twoKpDef;
	twoKi = twoKiDef;
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
 80043fc:	9c03      	ldr	r4, [sp, #12]
	lastUpdate = 0;
	now = 0;

	gyro_off_x = 0;
	gyro_off_y = 0;
 80043fe:	9d07      	ldr	r5, [sp, #28]
	exInt = 0.0;
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
	twoKi = twoKiDef;
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
 8004400:	9e04      	ldr	r6, [sp, #16]
 8004402:	9905      	ldr	r1, [sp, #20]
	// initialize quaternion
	q0 = 1.0f;
	q1 = 0.0f;
	q2 = 0.0f;
	q3 = 0.0f;
	exInt = 0.0;
 8004404:	f2c2 0a00 	movt	sl, #8192	; 0x2000
	eyInt = 0.0;
 8004408:	f2c2 0800 	movt	r8, #8192	; 0x2000
	ezInt = 0.0;
 800440c:	f2c2 0700 	movt	r7, #8192	; 0x2000
	twoKp = twoKpDef;
	twoKi = twoKiDef;
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
 8004410:	6023      	str	r3, [r4, #0]
	// initialize quaternion
	q0 = 1.0f;
	q1 = 0.0f;
	q2 = 0.0f;
	q3 = 0.0f;
	exInt = 0.0;
 8004412:	f8ca 3000 	str.w	r3, [sl]
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
	twoKi = twoKiDef;
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
 8004416:	6033      	str	r3, [r6, #0]
	q0 = 1.0f;
	q1 = 0.0f;
	q2 = 0.0f;
	q3 = 0.0f;
	exInt = 0.0;
	eyInt = 0.0;
 8004418:	f8c8 3000 	str.w	r3, [r8]
	ezInt = 0.0;
 800441c:	603b      	str	r3, [r7, #0]
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
	lastUpdate = 0;
	now = 0;

	gyro_off_x = 0;
	gyro_off_y = 0;
 800441e:	802a      	strh	r2, [r5, #0]
	exInt = 0.0;
	eyInt = 0.0;
	ezInt = 0.0;
	twoKp = twoKpDef;
	twoKi = twoKiDef;
	integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
 8004420:	600b      	str	r3, [r1, #0]
    magn_scale_x = 1;
    magn_scale_y = 1;
    magn_scale_z = 1;	
#endif

}
 8004422:	b008      	add	sp, #32
 8004424:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop

0800442c <Hw_IMU_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_Init( void )
{
 800442c:	b510      	push	{r4, lr}
	u16 Ret = 0;


	Ret = Hw_MPU6050_Init();
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <Hw_IMU_Init+0x34>)
 8004430:	4798      	blx	r3

	if( Ret != 0 )
 8004432:	4604      	mov	r4, r0
 8004434:	b968      	cbnz	r0, 8004452 <Hw_IMU_Init+0x26>
		Lb_printf("Hw_MPU6050_Init Ret : 0x%x\n", Ret);
		return Ret;
	} 


	Ret = Hw_HMC5883_Init();
 8004436:	480b      	ldr	r0, [pc, #44]	; (8004464 <Hw_IMU_Init+0x38>)
 8004438:	4780      	blx	r0

	if( Ret != 0 )
 800443a:	4604      	mov	r4, r0
 800443c:	b918      	cbnz	r0, 8004446 <Hw_IMU_Init+0x1a>
	{
		Lb_printf("Hw_HMC5883_Init Ret : 0x%x\n", Ret);
		return Ret;
	} 

	Hw_IMU_FreeIMU_Init();
 800443e:	490a      	ldr	r1, [pc, #40]	; (8004468 <Hw_IMU_Init+0x3c>)
 8004440:	4788      	blx	r1
	//Hw_MultiIMU_Init();

	return Ret;
}
 8004442:	4620      	mov	r0, r4
 8004444:	bd10      	pop	{r4, pc}

	Ret = Hw_HMC5883_Init();

	if( Ret != 0 )
	{
		Lb_printf("Hw_HMC5883_Init Ret : 0x%x\n", Ret);
 8004446:	4809      	ldr	r0, [pc, #36]	; (800446c <Hw_IMU_Init+0x40>)
 8004448:	4621      	mov	r1, r4
 800444a:	4a09      	ldr	r2, [pc, #36]	; (8004470 <Hw_IMU_Init+0x44>)
 800444c:	4790      	blx	r2

	Hw_IMU_FreeIMU_Init();
	//Hw_MultiIMU_Init();

	return Ret;
}
 800444e:	4620      	mov	r0, r4
 8004450:	bd10      	pop	{r4, pc}

	Ret = Hw_MPU6050_Init();

	if( Ret != 0 )
	{
		Lb_printf("Hw_MPU6050_Init Ret : 0x%x\n", Ret);
 8004452:	4808      	ldr	r0, [pc, #32]	; (8004474 <Hw_IMU_Init+0x48>)
 8004454:	4621      	mov	r1, r4
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <Hw_IMU_Init+0x44>)
 8004458:	4798      	blx	r3

	Hw_IMU_FreeIMU_Init();
	//Hw_MultiIMU_Init();

	return Ret;
}
 800445a:	4620      	mov	r0, r4
 800445c:	bd10      	pop	{r4, pc}
 800445e:	bf00      	nop
 8004460:	080040b9 	.word	0x080040b9
 8004464:	080041cd 	.word	0x080041cd
 8004468:	08004339 	.word	0x08004339
 800446c:	080087cc 	.word	0x080087cc
 8004470:	0800203d 	.word	0x0800203d
 8004474:	080087b0 	.word	0x080087b0

08004478 <Hw_IMU_GetData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_GetData( HW_IMU_DATA_OBJ *ptr_data )
{
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	HW_MPU6050_DATA_OBJ MPU6050_Data;
	HW_HMC5883_DATA_OBJ HMC5883_Data;


	ptr_data->Enable_Acc     = FALSE;
 800447c:	f04f 0800 	mov.w	r8, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_GetData( HW_IMU_DATA_OBJ *ptr_data )
{
 8004480:	b08d      	sub	sp, #52	; 0x34

	HW_MPU6050_DATA_OBJ MPU6050_Data;
	HW_HMC5883_DATA_OBJ HMC5883_Data;


	ptr_data->Enable_Acc     = FALSE;
 8004482:	f880 8000 	strb.w	r8, [r0]
	ptr_data->Enable_Temp    = FALSE;
 8004486:	f880 8001 	strb.w	r8, [r0, #1]
	ptr_data->Enable_Gyro    = FALSE;
 800448a:	f880 8002 	strb.w	r8, [r0, #2]
	ptr_data->Enable_Compass = FALSE;
 800448e:	f880 8003 	strb.w	r8, [r0, #3]


	if( Hw_HMC5883_GetEnable() == TRUE )
 8004492:	4f43      	ldr	r7, [pc, #268]	; (80045a0 <Hw_IMU_GetData+0x128>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_GetData( HW_IMU_DATA_OBJ *ptr_data )
{
 8004494:	4606      	mov	r6, r0
	ptr_data->Enable_Temp    = FALSE;
	ptr_data->Enable_Gyro    = FALSE;
	ptr_data->Enable_Compass = FALSE;


	if( Hw_HMC5883_GetEnable() == TRUE )
 8004496:	47b8      	blx	r7
 8004498:	2801      	cmp	r0, #1
 800449a:	4604      	mov	r4, r0
 800449c:	d022      	beq.n	80044e4 <Hw_IMU_GetData+0x6c>
		}
	}



	if( Hw_HMC5883_GetEnable() == TRUE )
 800449e:	47b8      	blx	r7
 80044a0:	2801      	cmp	r0, #1
 80044a2:	4604      	mov	r4, r0
 80044a4:	d003      	beq.n	80044ae <Hw_IMU_GetData+0x36>
		}
	}


	return Err;
}
 80044a6:	4640      	mov	r0, r8
 80044a8:	b00d      	add	sp, #52	; 0x34
 80044aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}



	if( Hw_HMC5883_GetEnable() == TRUE )
	{
		Err = Hw_HMC5883_GetData( &HMC5883_Data );	
 80044ae:	a807      	add	r0, sp, #28
 80044b0:	4a3c      	ldr	r2, [pc, #240]	; (80045a4 <Hw_IMU_GetData+0x12c>)
 80044b2:	4790      	blx	r2

		if( Err == 0 )
 80044b4:	4680      	mov	r8, r0
 80044b6:	2800      	cmp	r0, #0
 80044b8:	d1f5      	bne.n	80044a6 <Hw_IMU_GetData+0x2e>
		{
			ptr_data->X_Compass = HMC5883_Data.X_Compass;
			ptr_data->Y_Compass = HMC5883_Data.Y_Compass;
 80044ba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
			ptr_data->Z_Compass = HMC5883_Data.Z_Compass;
 80044be:	f8bd 1020 	ldrh.w	r1, [sp, #32]
	{
		Err = Hw_HMC5883_GetData( &HMC5883_Data );	

		if( Err == 0 )
		{
			ptr_data->X_Compass = HMC5883_Data.X_Compass;
 80044c2:	f8bd 001c 	ldrh.w	r0, [sp, #28]
			ptr_data->Y_Compass = HMC5883_Data.Y_Compass;
			ptr_data->Z_Compass = HMC5883_Data.Z_Compass;

			ptr_data->X_CompassScale = HMC5883_Data.X_CompassScale;
 80044c6:	4d38      	ldr	r5, [pc, #224]	; (80045a8 <Hw_IMU_GetData+0x130>)
		Err = Hw_HMC5883_GetData( &HMC5883_Data );	

		if( Err == 0 )
		{
			ptr_data->X_Compass = HMC5883_Data.X_Compass;
			ptr_data->Y_Compass = HMC5883_Data.Y_Compass;
 80044c8:	82b3      	strh	r3, [r6, #20]
			ptr_data->Z_Compass = HMC5883_Data.Z_Compass;
 80044ca:	82f1      	strh	r1, [r6, #22]
	{
		Err = Hw_HMC5883_GetData( &HMC5883_Data );	

		if( Err == 0 )
		{
			ptr_data->X_Compass = HMC5883_Data.X_Compass;
 80044cc:	8270      	strh	r0, [r6, #18]
			ptr_data->Y_Compass = HMC5883_Data.Y_Compass;
			ptr_data->Z_Compass = HMC5883_Data.Z_Compass;

			ptr_data->X_CompassScale = HMC5883_Data.X_CompassScale;
 80044ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044d0:	47a8      	blx	r5
 80044d2:	8330      	strh	r0, [r6, #24]
			ptr_data->Y_CompassScale = HMC5883_Data.Y_CompassScale;
 80044d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80044d6:	47a8      	blx	r5
 80044d8:	8370      	strh	r0, [r6, #26]
			ptr_data->Z_CompassScale = HMC5883_Data.Z_CompassScale;
 80044da:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80044dc:	47a8      	blx	r5


			ptr_data->Enable_Compass = TRUE;			
 80044de:	70f4      	strb	r4, [r6, #3]
			ptr_data->Y_Compass = HMC5883_Data.Y_Compass;
			ptr_data->Z_Compass = HMC5883_Data.Z_Compass;

			ptr_data->X_CompassScale = HMC5883_Data.X_CompassScale;
			ptr_data->Y_CompassScale = HMC5883_Data.Y_CompassScale;
			ptr_data->Z_CompassScale = HMC5883_Data.Z_CompassScale;
 80044e0:	83b0      	strh	r0, [r6, #28]
 80044e2:	e7e0      	b.n	80044a6 <Hw_IMU_GetData+0x2e>
	ptr_data->Enable_Compass = FALSE;


	if( Hw_HMC5883_GetEnable() == TRUE )
	{
		Err = Hw_MPU6050_GetData( &MPU6050_Data );
 80044e4:	a803      	add	r0, sp, #12
 80044e6:	4b31      	ldr	r3, [pc, #196]	; (80045ac <Hw_IMU_GetData+0x134>)
 80044e8:	4798      	blx	r3

		if( Err == 0 )
 80044ea:	4680      	mov	r8, r0
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d1d6      	bne.n	800449e <Hw_IMU_GetData+0x26>
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
 80044f0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;

			ptr_data->Temp  = MPU6050_Data.Temp;
 80044f4:	f8bd 2012 	ldrh.w	r2, [sp, #18]

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
 80044f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]

		if( Err == 0 )
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
 80044fc:	f8bd a010 	ldrh.w	sl, [sp, #16]
		Err = Hw_MPU6050_GetData( &MPU6050_Data );

		if( Err == 0 )
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
 8004500:	f8bd 000e 	ldrh.w	r0, [sp, #14]
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;

			ptr_data->Temp  = MPU6050_Data.Temp;

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
 8004504:	f8bd 5014 	ldrh.w	r5, [sp, #20]
	{
		Err = Hw_MPU6050_GetData( &MPU6050_Data );

		if( Err == 0 )
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
 8004508:	80b1      	strh	r1, [r6, #4]

			ptr_data->Temp  = MPU6050_Data.Temp;

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
			ptr_data->Z_Gyro = MPU6050_Data.Z_Gyro;
 800450a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
			ptr_data->Enable_Acc     = TRUE;
			ptr_data->Enable_Temp    = TRUE;
			ptr_data->Enable_Gyro    = TRUE;	

			// 각도 계산 
			ptr_data->X_AccAngle = (atan2(MPU6050_Data.Y_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 800450e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80045b8 <Hw_IMU_GetData+0x140>
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;

			ptr_data->Temp  = MPU6050_Data.Temp;
 8004512:	8172      	strh	r2, [r6, #10]

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
 8004514:	81f3      	strh	r3, [r6, #14]
		Err = Hw_MPU6050_GetData( &MPU6050_Data );

		if( Err == 0 )
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
 8004516:	80f0      	strh	r0, [r6, #6]
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
 8004518:	f8a6 a008 	strh.w	sl, [r6, #8]

			ptr_data->Temp  = MPU6050_Data.Temp;

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
 800451c:	81b5      	strh	r5, [r6, #12]
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
			ptr_data->Z_Gyro = MPU6050_Data.Z_Gyro;


			ptr_data->Enable_Acc     = TRUE;
 800451e:	7034      	strb	r4, [r6, #0]
			ptr_data->Enable_Temp    = TRUE;
 8004520:	7074      	strb	r4, [r6, #1]
			ptr_data->Enable_Gyro    = TRUE;	
 8004522:	70b4      	strb	r4, [r6, #2]

			ptr_data->Temp  = MPU6050_Data.Temp;

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
			ptr_data->Z_Gyro = MPU6050_Data.Z_Gyro;
 8004524:	8231      	strh	r1, [r6, #16]
			ptr_data->Enable_Acc     = TRUE;
			ptr_data->Enable_Temp    = TRUE;
			ptr_data->Enable_Gyro    = TRUE;	

			// 각도 계산 
			ptr_data->X_AccAngle = (atan2(MPU6050_Data.Y_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 8004526:	b200      	sxth	r0, r0
 8004528:	47c8      	blx	r9
 800452a:	4604      	mov	r4, r0
 800452c:	fa0f f08a 	sxth.w	r0, sl
 8004530:	460d      	mov	r5, r1
 8004532:	47c8      	blx	r9
 8004534:	f8df b084 	ldr.w	fp, [pc, #132]	; 80045bc <Hw_IMU_GetData+0x144>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4620      	mov	r0, r4
 800453e:	4629      	mov	r1, r5
 8004540:	47d8      	blx	fp
 8004542:	a313      	add	r3, pc, #76	; (adr r3, 8004590 <Hw_IMU_GetData+0x118>)
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f8df a074 	ldr.w	sl, [pc, #116]	; 80045c0 <Hw_IMU_GetData+0x148>
 800454c:	47d0      	blx	sl
 800454e:	a312      	add	r3, pc, #72	; (adr r3, 8004598 <Hw_IMU_GetData+0x120>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	4d16      	ldr	r5, [pc, #88]	; (80045b0 <Hw_IMU_GetData+0x138>)
 8004556:	47a8      	blx	r5
 8004558:	4c16      	ldr	r4, [pc, #88]	; (80045b4 <Hw_IMU_GetData+0x13c>)
 800455a:	47a0      	blx	r4
 800455c:	6230      	str	r0, [r6, #32]
			ptr_data->Y_AccAngle = (atan2(MPU6050_Data.X_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 800455e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8004562:	47c8      	blx	r9
 8004564:	e9cd 0100 	strd	r0, r1, [sp]
 8004568:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 800456c:	47c8      	blx	r9
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004576:	47d8      	blx	fp
 8004578:	a305      	add	r3, pc, #20	; (adr r3, 8004590 <Hw_IMU_GetData+0x118>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	47d0      	blx	sl
 8004580:	a305      	add	r3, pc, #20	; (adr r3, 8004598 <Hw_IMU_GetData+0x120>)
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	47a8      	blx	r5
 8004588:	47a0      	blx	r4
 800458a:	6270      	str	r0, [r6, #36]	; 0x24
 800458c:	e787      	b.n	800449e <Hw_IMU_GetData+0x26>
 800458e:	bf00      	nop
 8004590:	54442d18 	.word	0x54442d18
 8004594:	400921fb 	.word	0x400921fb
 8004598:	20000000 	.word	0x20000000
 800459c:	404ca5dc 	.word	0x404ca5dc
 80045a0:	0800432d 	.word	0x0800432d
 80045a4:	08004299 	.word	0x08004299
 80045a8:	08000ef5 	.word	0x08000ef5
 80045ac:	08003fdd 	.word	0x08003fdd
 80045b0:	08000379 	.word	0x08000379
 80045b4:	080008ad 	.word	0x080008ad
 80045b8:	080002ad 	.word	0x080002ad
 80045bc:	080069f9 	.word	0x080069f9
 80045c0:	08000015 	.word	0x08000015
 80045c4:	f3af 8000 	nop.w

080045c8 <Hw_IMU_FreeIMU_getRawValues>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_FreeIMU_getRawValues(int * raw_values) 
{
 80045c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045cc:	b092      	sub	sp, #72	; 0x48
 80045ce:	4604      	mov	r4, r0

	HW_IMU_DATA_OBJ IMU_Data;



	Err = Hw_IMU_GetData( &IMU_Data );   	
 80045d0:	4b15      	ldr	r3, [pc, #84]	; (8004628 <Hw_IMU_FreeIMU_getRawValues+0x60>)
 80045d2:	a801      	add	r0, sp, #4
 80045d4:	4798      	blx	r3

	if( Err == 0 )
 80045d6:	4605      	mov	r5, r0
 80045d8:	b9f0      	cbnz	r0, 8004618 <Hw_IMU_FreeIMU_getRawValues+0x50>
		raw_values[1] = IMU_Data.Y_Acc;
		raw_values[2] = IMU_Data.Z_Acc;

		raw_values[3] = IMU_Data.X_Gyro;
		raw_values[4] = IMU_Data.Y_Gyro;
		raw_values[5] = IMU_Data.Z_Gyro;
 80045da:	f9bd 0014 	ldrsh.w	r0, [sp, #20]

		raw_values[6] = IMU_Data.X_Compass;
 80045de:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
		raw_values[7] = IMU_Data.Y_Compass;
 80045e2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
		raw_values[8] = IMU_Data.Z_Compass;
 80045e6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]

	Err = Hw_IMU_GetData( &IMU_Data );   	

	if( Err == 0 )
	{
		raw_values[0] = IMU_Data.X_Acc;
 80045ea:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
		raw_values[1] = IMU_Data.Y_Acc;
 80045ee:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
		raw_values[2] = IMU_Data.Z_Acc;
 80045f2:	f9bd e00c 	ldrsh.w	lr, [sp, #12]

		raw_values[3] = IMU_Data.X_Gyro;
 80045f6:	f9bd 7010 	ldrsh.w	r7, [sp, #16]
		raw_values[4] = IMU_Data.Y_Gyro;
 80045fa:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
		raw_values[5] = IMU_Data.Z_Gyro;
 80045fe:	6160      	str	r0, [r4, #20]

		raw_values[6] = IMU_Data.X_Compass;
 8004600:	61a1      	str	r1, [r4, #24]
		raw_values[7] = IMU_Data.Y_Compass;
 8004602:	61e2      	str	r2, [r4, #28]
		raw_values[8] = IMU_Data.Z_Compass;
 8004604:	6223      	str	r3, [r4, #32]

	if( Err == 0 )
	{
		raw_values[0] = IMU_Data.X_Acc;
		raw_values[1] = IMU_Data.Y_Acc;
		raw_values[2] = IMU_Data.Z_Acc;
 8004606:	e884 5100 	stmia.w	r4, {r8, ip, lr}

		raw_values[3] = IMU_Data.X_Gyro;
 800460a:	60e7      	str	r7, [r4, #12]
		raw_values[4] = IMU_Data.Y_Gyro;
 800460c:	6126      	str	r6, [r4, #16]

		raw_values[6] = IMU_Data.X_Compass;
		raw_values[7] = IMU_Data.Y_Compass;
		raw_values[8] = IMU_Data.Z_Compass;

		Hw_IMU_SaveData = IMU_Data;
 800460e:	4807      	ldr	r0, [pc, #28]	; (800462c <Hw_IMU_FreeIMU_getRawValues+0x64>)
 8004610:	a901      	add	r1, sp, #4
 8004612:	2244      	movs	r2, #68	; 0x44
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <Hw_IMU_FreeIMU_getRawValues+0x68>)
 8004616:	4798      	blx	r3

	int temp, press;
    
	//TODO: possible loss of precision
	temp = 25;
	raw_values[9] = temp;
 8004618:	2019      	movs	r0, #25
	press = 0;
	raw_values[10] = press;
 800461a:	2100      	movs	r1, #0

	int temp, press;
    
	//TODO: possible loss of precision
	temp = 25;
	raw_values[9] = temp;
 800461c:	6260      	str	r0, [r4, #36]	; 0x24
	press = 0;
	raw_values[10] = press;
 800461e:	62a1      	str	r1, [r4, #40]	; 0x28

	return Err;
}
 8004620:	4628      	mov	r0, r5
 8004622:	b012      	add	sp, #72	; 0x48
 8004624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004628:	08004479 	.word	0x08004479
 800462c:	20000de8 	.word	0x20000de8
 8004630:	0800644d 	.word	0x0800644d

08004634 <invSqrt>:
/**
 * Fast inverse square root implementation
 * @see http://en.wikipedia.org/wiki/Fast_inverse_square_root
*/
float invSqrt(float number) 
{
 8004634:	b570      	push	{r4, r5, r6, lr}
  volatile long i;
  volatile float x, y;
  volatile const float f = 1.5F;

  x = number * 0.5F;
 8004636:	f640 3469 	movw	r4, #2921	; 0xb69
/**
 * Fast inverse square root implementation
 * @see http://en.wikipedia.org/wiki/Fast_inverse_square_root
*/
float invSqrt(float number) 
{
 800463a:	b084      	sub	sp, #16
  volatile long i;
  volatile float x, y;
  volatile const float f = 1.5F;

  x = number * 0.5F;
 800463c:	f6c0 0400 	movt	r4, #2048	; 0x800
*/
float invSqrt(float number) 
{
  volatile long i;
  volatile float x, y;
  volatile const float f = 1.5F;
 8004640:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000

  x = number * 0.5F;
 8004644:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
*/
float invSqrt(float number) 
{
  volatile long i;
  volatile float x, y;
  volatile const float f = 1.5F;
 8004648:	9303      	str	r3, [sp, #12]
/**
 * Fast inverse square root implementation
 * @see http://en.wikipedia.org/wiki/Fast_inverse_square_root
*/
float invSqrt(float number) 
{
 800464a:	4605      	mov	r5, r0
  volatile long i;
  volatile float x, y;
  volatile const float f = 1.5F;

  x = number * 0.5F;
 800464c:	47a0      	blx	r4
 800464e:	9001      	str	r0, [sp, #4]
  y = number;
 8004650:	9502      	str	r5, [sp, #8]
  i = * ( long * ) &y;
 8004652:	9a02      	ldr	r2, [sp, #8]
  i = 0x5f375a86 - ( i >> 1 );
 8004654:	f645 2086 	movw	r0, #23174	; 0x5a86
  volatile float x, y;
  volatile const float f = 1.5F;

  x = number * 0.5F;
  y = number;
  i = * ( long * ) &y;
 8004658:	9200      	str	r2, [sp, #0]
  i = 0x5f375a86 - ( i >> 1 );
 800465a:	9900      	ldr	r1, [sp, #0]
 800465c:	f6c5 7037 	movt	r0, #24375	; 0x5f37
 8004660:	eba0 0661 	sub.w	r6, r0, r1, asr #1
 8004664:	9600      	str	r6, [sp, #0]
  y = * ( float * ) &i;
 8004666:	9d00      	ldr	r5, [sp, #0]
 8004668:	9502      	str	r5, [sp, #8]
  y = y * ( f - ( x * y * y ) );
 800466a:	9e03      	ldr	r6, [sp, #12]
 800466c:	9801      	ldr	r0, [sp, #4]
 800466e:	9902      	ldr	r1, [sp, #8]
 8004670:	9d02      	ldr	r5, [sp, #8]
 8004672:	47a0      	blx	r4
 8004674:	4629      	mov	r1, r5
 8004676:	47a0      	blx	r4
 8004678:	9d02      	ldr	r5, [sp, #8]
 800467a:	f640 1355 	movw	r3, #2389	; 0x955
 800467e:	4601      	mov	r1, r0
 8004680:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004684:	4630      	mov	r0, r6
 8004686:	4798      	blx	r3
 8004688:	4629      	mov	r1, r5
 800468a:	47a0      	blx	r4
 800468c:	9002      	str	r0, [sp, #8]
  return y;
 800468e:	9802      	ldr	r0, [sp, #8]
 8004690:	b004      	add	sp, #16
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	0000      	movs	r0, r0
	...

08004698 <Hw_IMU_Update>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_Update( HW_IMU_DATA_OBJ *ptr_data, u32 dt )
{
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		*ptr_data = Hw_IMU_SaveData;
	}
	#endif

	#if 1
	Err = Hw_IMU_GetData( ptr_data );
 800469c:	4b88      	ldr	r3, [pc, #544]	; (80048c0 <Hw_IMU_Update+0x228>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_Update( HW_IMU_DATA_OBJ *ptr_data, u32 dt )
{
 800469e:	b089      	sub	sp, #36	; 0x24
 80046a0:	4604      	mov	r4, r0
 80046a2:	460d      	mov	r5, r1
		*ptr_data = Hw_IMU_SaveData;
	}
	#endif

	#if 1
	Err = Hw_IMU_GetData( ptr_data );
 80046a4:	4798      	blx	r3

	if( Err == 0 )
 80046a6:	4680      	mov	r8, r0
 80046a8:	2800      	cmp	r0, #0
 80046aa:	f040 80f7 	bne.w	800489c <Hw_IMU_Update+0x204>
	{
		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;
 80046ae:	f640 22c1 	movw	r2, #2753	; 0xac1
 80046b2:	f6c0 0200 	movt	r2, #2048	; 0x800
 80046b6:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 80046ba:	4790      	blx	r2
 80046bc:	2100      	movs	r1, #0
 80046be:	f8df 9230 	ldr.w	r9, [pc, #560]	; 80048f0 <Hw_IMU_Update+0x258>
 80046c2:	f2c4 3103 	movt	r1, #17155	; 0x4303
 80046c6:	47c8      	blx	r9

		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->X_AccAngle);
 80046c8:	497e      	ldr	r1, [pc, #504]	; (80048c4 <Hw_IMU_Update+0x22c>)
	Err = Hw_IMU_GetData( ptr_data );

	if( Err == 0 )
	{
		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;
 80046ca:	9004      	str	r0, [sp, #16]

		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->X_AccAngle);
 80046cc:	4628      	mov	r0, r5
 80046ce:	4788      	blx	r1
	#if 1
	Err = Hw_IMU_GetData( ptr_data );

	if( Err == 0 )
	{
		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
 80046d0:	f640 25c1 	movw	r5, #2753	; 0xac1
		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;

		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->X_AccAngle);
 80046d4:	4683      	mov	fp, r0
	#if 1
	Err = Hw_IMU_GetData( ptr_data );

	if( Err == 0 )
	{
		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
 80046d6:	f6c0 0500 	movt	r5, #2048	; 0x800
 80046da:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80046de:	47a8      	blx	r5
 80046e0:	2100      	movs	r1, #0
 80046e2:	f2c4 3103 	movt	r1, #17155	; 0x4303
 80046e6:	47c8      	blx	r9
		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;

		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->X_AccAngle);
 80046e8:	4d77      	ldr	r5, [pc, #476]	; (80048c8 <Hw_IMU_Update+0x230>)
	#if 1
	Err = Hw_IMU_GetData( ptr_data );

	if( Err == 0 )
	{
		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
 80046ea:	4601      	mov	r1, r0
		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;

		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->X_AccAngle);
 80046ec:	4658      	mov	r0, fp
 80046ee:	47a8      	blx	r5
 80046f0:	2100      	movs	r1, #0
 80046f2:	f2c4 417a 	movt	r1, #17530	; 0x447a
 80046f6:	47c8      	blx	r9
 80046f8:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 80048f4 <Hw_IMU_Update+0x25c>
 80046fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80046fe:	f8cd c008 	str.w	ip, [sp, #8]
 8004702:	47e0      	blx	ip
 8004704:	4e71      	ldr	r6, [pc, #452]	; (80048cc <Hw_IMU_Update+0x234>)
 8004706:	47b0      	blx	r6
 8004708:	a367      	add	r3, pc, #412	; (adr r3, 80048a8 <Hw_IMU_Update+0x210>)
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	4f70      	ldr	r7, [pc, #448]	; (80048d0 <Hw_IMU_Update+0x238>)
 8004710:	47b8      	blx	r7
 8004712:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004716:	6a20      	ldr	r0, [r4, #32]
 8004718:	47b0      	blx	r6
 800471a:	a365      	add	r3, pc, #404	; (adr r3, 80048b0 <Hw_IMU_Update+0x218>)
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	47b8      	blx	r7
 8004722:	f240 0a15 	movw	sl, #21
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	f6c0 0a00 	movt	sl, #2048	; 0x800
 800472e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004732:	47d0      	blx	sl
 8004734:	f640 03ad 	movw	r3, #2221	; 0x8ad
 8004738:	f6c0 0300 	movt	r3, #2048	; 0x800
 800473c:	4798      	blx	r3
  		ptr_data->Y_Angle = (0.93 * (ptr_data->Y_Angle+(GyroRateY*(f32)(dt)/1000)) ) + (0.07 * ptr_data->Y_AccAngle); 
 800473e:	4659      	mov	r1, fp
	if( Err == 0 )
	{
		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;

		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->X_AccAngle);
 8004740:	4682      	mov	sl, r0
 8004742:	63a0      	str	r0, [r4, #56]	; 0x38
  		ptr_data->Y_Angle = (0.93 * (ptr_data->Y_Angle+(GyroRateY*(f32)(dt)/1000)) ) + (0.07 * ptr_data->Y_AccAngle); 
 8004744:	9804      	ldr	r0, [sp, #16]
 8004746:	47a8      	blx	r5
 8004748:	2100      	movs	r1, #0
 800474a:	f2c4 417a 	movt	r1, #17530	; 0x447a
 800474e:	47c8      	blx	r9
 8004750:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004752:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004756:	47c8      	blx	r9
 8004758:	47b0      	blx	r6
 800475a:	a353      	add	r3, pc, #332	; (adr r3, 80048a8 <Hw_IMU_Update+0x210>)
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	47b8      	blx	r7
 8004762:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004766:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004768:	47b0      	blx	r6
 800476a:	a351      	add	r3, pc, #324	; (adr r3, 80048b0 <Hw_IMU_Update+0x218>)
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	47b8      	blx	r7
 8004772:	f240 0b15 	movw	fp, #21
 8004776:	460b      	mov	r3, r1
 8004778:	4602      	mov	r2, r0
 800477a:	f6c0 0b00 	movt	fp, #2048	; 0x800
 800477e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004782:	47d8      	blx	fp
 8004784:	f640 02ad 	movw	r2, #2221	; 0x8ad
 8004788:	f6c0 0200 	movt	r2, #2048	; 0x800
 800478c:	4790      	blx	r2
 800478e:	63e0      	str	r0, [r4, #60]	; 0x3c
		dt_sec = ((float)dt / 1000.);



	    cosineRoll 	= cosf(ptr_data->X_Angle * M_PI / 180.);
 8004790:	4650      	mov	r0, sl
 8004792:	47b0      	blx	r6
 8004794:	a348      	add	r3, pc, #288	; (adr r3, 80048b8 <Hw_IMU_Update+0x220>)
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	47b8      	blx	r7
 800479c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8df 9154 	ldr.w	r9, [pc, #340]	; 80048f8 <Hw_IMU_Update+0x260>
 80047a6:	f2c4 0366 	movt	r3, #16486	; 0x4066
 80047aa:	47c8      	blx	r9
 80047ac:	f640 03ad 	movw	r3, #2221	; 0x8ad
 80047b0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80047b4:	4798      	blx	r3
 80047b6:	4947      	ldr	r1, [pc, #284]	; (80048d4 <Hw_IMU_Update+0x23c>)
 80047b8:	4682      	mov	sl, r0
 80047ba:	4788      	blx	r1
 80047bc:	4684      	mov	ip, r0
	    sineRoll 	= sinf(ptr_data->X_Angle * M_PI / 180.);
 80047be:	f8cd c008 	str.w	ip, [sp, #8]
 80047c2:	4650      	mov	r0, sl
 80047c4:	4a44      	ldr	r2, [pc, #272]	; (80048d8 <Hw_IMU_Update+0x240>)
 80047c6:	4790      	blx	r2
	    cosinePitch = cosf(ptr_data->Y_Angle * M_PI / 180.);
	    sinePitch 	= sinf(ptr_data->Y_Angle * M_PI / 180.);

	    dv = invSqrt( ptr_data->X_Compass*ptr_data->X_Compass + ptr_data->Y_Compass*ptr_data->Y_Compass + ptr_data->Z_Compass*ptr_data->Z_Compass );
 80047c8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
		dt_sec = ((float)dt / 1000.);



	    cosineRoll 	= cosf(ptr_data->X_Angle * M_PI / 180.);
	    sineRoll 	= sinf(ptr_data->X_Angle * M_PI / 180.);
 80047cc:	4682      	mov	sl, r0
	    cosinePitch = cosf(ptr_data->Y_Angle * M_PI / 180.);
	    sinePitch 	= sinf(ptr_data->Y_Angle * M_PI / 180.);

	    dv = invSqrt( ptr_data->X_Compass*ptr_data->X_Compass + ptr_data->Y_Compass*ptr_data->Y_Compass + ptr_data->Z_Compass*ptr_data->Z_Compass );
 80047ce:	fb03 f303 	mul.w	r3, r3, r3
 80047d2:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 80047d6:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80047da:	fb00 3100 	mla	r1, r0, r0, r3
 80047de:	f640 23c1 	movw	r3, #2753	; 0xac1
 80047e2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80047e6:	fb02 1002 	mla	r0, r2, r2, r1
 80047ea:	4798      	blx	r3
 80047ec:	493b      	ldr	r1, [pc, #236]	; (80048dc <Hw_IMU_Update+0x244>)
 80047ee:	4788      	blx	r1

	    mx = dv*ptr_data->X_Compass;
 80047f0:	f640 22c1 	movw	r2, #2753	; 0xac1
 80047f4:	f6c0 0200 	movt	r2, #2048	; 0x800
	    cosineRoll 	= cosf(ptr_data->X_Angle * M_PI / 180.);
	    sineRoll 	= sinf(ptr_data->X_Angle * M_PI / 180.);
	    cosinePitch = cosf(ptr_data->Y_Angle * M_PI / 180.);
	    sinePitch 	= sinf(ptr_data->Y_Angle * M_PI / 180.);

	    dv = invSqrt( ptr_data->X_Compass*ptr_data->X_Compass + ptr_data->Y_Compass*ptr_data->Y_Compass + ptr_data->Z_Compass*ptr_data->Z_Compass );
 80047f8:	4683      	mov	fp, r0

	    mx = dv*ptr_data->X_Compass;
 80047fa:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 80047fe:	4790      	blx	r2
 8004800:	4659      	mov	r1, fp
 8004802:	47a8      	blx	r5
 8004804:	4603      	mov	r3, r0
	    my = dv*ptr_data->Y_Compass;
 8004806:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 800480a:	f640 24c1 	movw	r4, #2753	; 0xac1
 800480e:	9303      	str	r3, [sp, #12]
 8004810:	f6c0 0400 	movt	r4, #2048	; 0x800
 8004814:	47a0      	blx	r4
 8004816:	4659      	mov	r1, fp
 8004818:	47a8      	blx	r5
	    //Yh = my * cosineRoll  - mz * sineRoll;
	    Xh = mx + my + mz;
	    Yh = my - mz;

	    //hd = (atan2f(Yh, Xh) * 180.0f / M_PI);
		hd = (atan2f(mx, my) * 180.0f / M_PI);
 800481a:	4a31      	ldr	r2, [pc, #196]	; (80048e0 <Hw_IMU_Update+0x248>)
	    sinePitch 	= sinf(ptr_data->Y_Angle * M_PI / 180.);

	    dv = invSqrt( ptr_data->X_Compass*ptr_data->X_Compass + ptr_data->Y_Compass*ptr_data->Y_Compass + ptr_data->Z_Compass*ptr_data->Z_Compass );

	    mx = dv*ptr_data->X_Compass;
	    my = dv*ptr_data->Y_Compass;
 800481c:	4601      	mov	r1, r0
	    //Yh = my * cosineRoll  - mz * sineRoll;
	    Xh = mx + my + mz;
	    Yh = my - mz;

	    //hd = (atan2f(Yh, Xh) * 180.0f / M_PI);
		hd = (atan2f(mx, my) * 180.0f / M_PI);
 800481e:	9803      	ldr	r0, [sp, #12]
 8004820:	4790      	blx	r2
 8004822:	2100      	movs	r1, #0
 8004824:	f2c4 3134 	movt	r1, #17204	; 0x4334
 8004828:	47a8      	blx	r5
 800482a:	47b0      	blx	r6
 800482c:	a322      	add	r3, pc, #136	; (adr r3, 80048b8 <Hw_IMU_Update+0x220>)
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	f640 05ad 	movw	r5, #2221	; 0x8ad
 8004836:	47c8      	blx	r9
 8004838:	f6c0 0500 	movt	r5, #2048	; 0x800
 800483c:	47a8      	blx	r5
	    	    

	    head = hd;
 800483e:	4929      	ldr	r1, [pc, #164]	; (80048e4 <Hw_IMU_Update+0x24c>)
 8004840:	4788      	blx	r1
	    if (head < 0)
 8004842:	b203      	sxth	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	f8dd c008 	ldr.w	ip, [sp, #8]

	    //hd = (atan2f(Yh, Xh) * 180.0f / M_PI);
		hd = (atan2f(mx, my) * 180.0f / M_PI);
	    	    

	    head = hd;
 800484a:	b282      	uxth	r2, r0
	    if (head < 0)
	    {
	        head += 360;
 800484c:	bfbc      	itt	lt
 800484e:	f500 72b4 	addlt.w	r2, r0, #360	; 0x168
 8004852:	b292      	uxthlt	r2, r2
	    }

	    Lb_printf("Head : %d  %d %d \n", head, cosineRoll*180./M_PI, sineRoll*180./M_PI);
 8004854:	4660      	mov	r0, ip
 8004856:	fa0f fb82 	sxth.w	fp, r2
 800485a:	47b0      	blx	r6
 800485c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004860:	2200      	movs	r2, #0
 8004862:	f2c4 0366 	movt	r3, #16486	; 0x4066
 8004866:	47b8      	blx	r7
 8004868:	a313      	add	r3, pc, #76	; (adr r3, 80048b8 <Hw_IMU_Update+0x220>)
 800486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486e:	47c8      	blx	r9
 8004870:	4604      	mov	r4, r0
 8004872:	4650      	mov	r0, sl
 8004874:	460d      	mov	r5, r1
 8004876:	47b0      	blx	r6
 8004878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487c:	2200      	movs	r2, #0
 800487e:	f2c4 0366 	movt	r3, #16486	; 0x4066
 8004882:	47b8      	blx	r7
 8004884:	a30c      	add	r3, pc, #48	; (adr r3, 80048b8 <Hw_IMU_Update+0x220>)
 8004886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488a:	47c8      	blx	r9
 800488c:	4622      	mov	r2, r4
 800488e:	e9cd 0100 	strd	r0, r1, [sp]
 8004892:	462b      	mov	r3, r5
 8004894:	4814      	ldr	r0, [pc, #80]	; (80048e8 <Hw_IMU_Update+0x250>)
 8004896:	4659      	mov	r1, fp
 8004898:	4c14      	ldr	r4, [pc, #80]	; (80048ec <Hw_IMU_Update+0x254>)
 800489a:	47a0      	blx	r4

	}
	#endif

	return Err;
}
 800489c:	4640      	mov	r0, r8
 800489e:	b009      	add	sp, #36	; 0x24
 80048a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a4:	f3af 8000 	nop.w
 80048a8:	5c28f5c3 	.word	0x5c28f5c3
 80048ac:	3fedc28f 	.word	0x3fedc28f
 80048b0:	1eb851ec 	.word	0x1eb851ec
 80048b4:	3fb1eb85 	.word	0x3fb1eb85
 80048b8:	54442d18 	.word	0x54442d18
 80048bc:	400921fb 	.word	0x400921fb
 80048c0:	08004479 	.word	0x08004479
 80048c4:	08000ab9 	.word	0x08000ab9
 80048c8:	08000b69 	.word	0x08000b69
 80048cc:	080002d1 	.word	0x080002d1
 80048d0:	08000379 	.word	0x08000379
 80048d4:	08006919 	.word	0x08006919
 80048d8:	08006981 	.word	0x08006981
 80048dc:	08004635 	.word	0x08004635
 80048e0:	080069fd 	.word	0x080069fd
 80048e4:	08000ef5 	.word	0x08000ef5
 80048e8:	0800881c 	.word	0x0800881c
 80048ec:	0800203d 	.word	0x0800203d
 80048f0:	08000cd1 	.word	0x08000cd1
 80048f4:	08000959 	.word	0x08000959
 80048f8:	080005cd 	.word	0x080005cd
 80048fc:	f3af 8000 	nop.w

08004900 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8004900:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <EP1_IN_Callback+0x58>)
 8004904:	781a      	ldrb	r2, [r3, #0]
 8004906:	2a01      	cmp	r2, #1
 8004908:	d000      	beq.n	800490c <EP1_IN_Callback+0xc>
 800490a:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 800490c:	4c13      	ldr	r4, [pc, #76]	; (800495c <EP1_IN_Callback+0x5c>)
 800490e:	6820      	ldr	r0, [r4, #0]
 8004910:	b300      	cbz	r0, 8004954 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8004912:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8004914:	4a12      	ldr	r2, [pc, #72]	; (8004960 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8004916:	d814      	bhi.n	8004942 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8004918:	6811      	ldr	r1, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 800491a:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 800491c:	1808      	adds	r0, r1, r0
 800491e:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 8004920:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8004922:	b28b      	uxth	r3, r1
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8004924:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8004926:	480f      	ldr	r0, [pc, #60]	; (8004964 <EP1_IN_Callback+0x64>)
 8004928:	21c0      	movs	r1, #192	; 0xc0
 800492a:	18c0      	adds	r0, r0, r3
 800492c:	462a      	mov	r2, r5
 800492e:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <EP1_IN_Callback+0x68>)
 8004930:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8004932:	2001      	movs	r0, #1
 8004934:	4629      	mov	r1, r5
 8004936:	4a0d      	ldr	r2, [pc, #52]	; (800496c <EP1_IN_Callback+0x6c>)
 8004938:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 800493a:	2001      	movs	r0, #1
 800493c:	490c      	ldr	r1, [pc, #48]	; (8004970 <EP1_IN_Callback+0x70>)
 800493e:	4788      	blx	r1
 8004940:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8004942:	6815      	ldr	r5, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8004944:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8004946:	f105 0140 	add.w	r1, r5, #64	; 0x40
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 800494a:	b2ab      	uxth	r3, r5
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 800494c:	6020      	str	r0, [r4, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800494e:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8004950:	2540      	movs	r5, #64	; 0x40
 8004952:	e7e8      	b.n	8004926 <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8004954:	7018      	strb	r0, [r3, #0]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	200004a8 	.word	0x200004a8
 800495c:	200004b4 	.word	0x200004b4
 8004960:	200004b0 	.word	0x200004b0
 8004964:	20000ec4 	.word	0x20000ec4
 8004968:	08005ee9 	.word	0x08005ee9
 800496c:	08006199 	.word	0x08006199
 8004970:	0800605d 	.word	0x0800605d

08004974 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8004974:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8004976:	f640 645c 	movw	r4, #3676	; 0xe5c
 800497a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800497e:	f246 2359 	movw	r3, #25177	; 0x6259
 8004982:	4621      	mov	r1, r4
 8004984:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004988:	2003      	movs	r0, #3
 800498a:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 800498c:	f245 3289 	movw	r2, #21385	; 0x5389
 8004990:	b2c1      	uxtb	r1, r0
 8004992:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004996:	4620      	mov	r0, r4
 8004998:	4790      	blx	r2
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 800499a:	f246 0181 	movw	r1, #24705	; 0x6081
 800499e:	2003      	movs	r0, #3
 80049a0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80049a4:	4788      	blx	r1
 80049a6:	bd10      	pop	{r4, pc}

080049a8 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 80049a8:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 80049aa:	4b08      	ldr	r3, [pc, #32]	; (80049cc <SOF_Callback+0x24>)
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	2805      	cmp	r0, #5
 80049b0:	d000      	beq.n	80049b4 <SOF_Callback+0xc>
 80049b2:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 80049b4:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <SOF_Callback+0x28>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	1c51      	adds	r1, r2, #1
 80049ba:	2a05      	cmp	r2, #5
 80049bc:	6019      	str	r1, [r3, #0]
 80049be:	d1f8      	bne.n	80049b2 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 80049c0:	2000      	movs	r0, #0
 80049c2:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <SOF_Callback+0x2c>)
 80049c6:	4798      	blx	r3
 80049c8:	e7f3      	b.n	80049b2 <SOF_Callback+0xa>
 80049ca:	bf00      	nop
 80049cc:	2000049c 	.word	0x2000049c
 80049d0:	20000488 	.word	0x20000488
 80049d4:	080053f9 	.word	0x080053f9

080049d8 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80049d8:	f645 4244 	movw	r2, #23620	; 0x5c44
 80049dc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80049e0:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 80049e2:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80049e4:	4c8f      	ldr	r4, [pc, #572]	; (8004c24 <USB_Istr+0x24c>)
 80049e6:	b298      	uxth	r0, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80049e8:	4d8f      	ldr	r5, [pc, #572]	; (8004c28 <USB_Istr+0x250>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80049ea:	8020      	strh	r0, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80049ec:	8821      	ldrh	r1, [r4, #0]
 80049ee:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 80049f0:	b089      	sub	sp, #36	; 0x24
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80049f2:	4019      	ands	r1, r3
 80049f4:	f401 7000 	and.w	r0, r1, #512	; 0x200
 80049f8:	b281      	uxth	r1, r0
 80049fa:	2900      	cmp	r1, #0
 80049fc:	d168      	bne.n	8004ad0 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 80049fe:	8822      	ldrh	r2, [r4, #0]
 8004a00:	f402 4100 	and.w	r1, r2, #32768	; 0x8000
 8004a04:	420b      	tst	r3, r1
 8004a06:	d15f      	bne.n	8004ac8 <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8004a08:	8822      	ldrh	r2, [r4, #0]
 8004a0a:	f402 6180 	and.w	r1, r2, #1024	; 0x400
 8004a0e:	420b      	tst	r3, r1
 8004a10:	d14e      	bne.n	8004ab0 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8004a12:	8820      	ldrh	r0, [r4, #0]
 8004a14:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
 8004a18:	4213      	tst	r3, r2
 8004a1a:	d006      	beq.n	8004a2a <USB_Istr+0x52>
  {
    _SetISTR((uint16_t)CLR_ERR);
 8004a1c:	f645 4044 	movw	r0, #23620	; 0x5c44
 8004a20:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004a24:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8004a28:	6001      	str	r1, [r0, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8004a2a:	8822      	ldrh	r2, [r4, #0]
 8004a2c:	f402 5080 	and.w	r0, r2, #4096	; 0x1000
 8004a30:	4203      	tst	r3, r0
 8004a32:	d131      	bne.n	8004a98 <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8004a34:	8820      	ldrh	r0, [r4, #0]
 8004a36:	f400 6100 	and.w	r1, r0, #2048	; 0x800
 8004a3a:	420b      	tst	r3, r1
 8004a3c:	d00e      	beq.n	8004a5c <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 8004a3e:	4b7b      	ldr	r3, [pc, #492]	; (8004c2c <USB_Istr+0x254>)
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	2a00      	cmp	r2, #0
 8004a44:	d125      	bne.n	8004a92 <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8004a46:	2002      	movs	r0, #2
 8004a48:	4979      	ldr	r1, [pc, #484]	; (8004c30 <USB_Istr+0x258>)
 8004a4a:	4788      	blx	r1
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8004a4c:	f645 4244 	movw	r2, #23620	; 0x5c44
 8004a50:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004a54:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8004a58:	882b      	ldrh	r3, [r5, #0]
 8004a5a:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8004a5c:	8820      	ldrh	r0, [r4, #0]
 8004a5e:	f400 7280 	and.w	r2, r0, #256	; 0x100
 8004a62:	4213      	tst	r3, r2
 8004a64:	d013      	beq.n	8004a8e <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8004a66:	f645 4344 	movw	r3, #23620	; 0x5c44
 8004a6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8004a6e:	f645 4048 	movw	r0, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8004a72:	f64f 61ff 	movw	r1, #65279	; 0xfeff
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8004a76:	f2c4 0000 	movt	r0, #16384	; 0x4000

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8004a7a:	6019      	str	r1, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8004a7c:	6802      	ldr	r2, [r0, #0]
 8004a7e:	0410      	lsls	r0, r2, #16
 8004a80:	d432      	bmi.n	8004ae8 <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8004a82:	4b6c      	ldr	r3, [pc, #432]	; (8004c34 <USB_Istr+0x25c>)
 8004a84:	2000      	movs	r0, #0
 8004a86:	6018      	str	r0, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8004a88:	2007      	movs	r0, #7
 8004a8a:	4b69      	ldr	r3, [pc, #420]	; (8004c30 <USB_Istr+0x258>)
 8004a8c:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8004a8e:	b009      	add	sp, #36	; 0x24
 8004a90:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 8004a92:	4869      	ldr	r0, [pc, #420]	; (8004c38 <USB_Istr+0x260>)
 8004a94:	4780      	blx	r0
 8004a96:	e7d9      	b.n	8004a4c <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8004a98:	f645 4344 	movw	r3, #23620	; 0x5c44
 8004a9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004aa0:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8004aa4:	6019      	str	r1, [r3, #0]
    Resume(RESUME_EXTERNAL);
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	4a61      	ldr	r2, [pc, #388]	; (8004c30 <USB_Istr+0x258>)
 8004aaa:	4790      	blx	r2
 8004aac:	882b      	ldrh	r3, [r5, #0]
 8004aae:	e7c1      	b.n	8004a34 <USB_Istr+0x5c>
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
    Device_Property.Reset();
 8004ab0:	4a62      	ldr	r2, [pc, #392]	; (8004c3c <USB_Istr+0x264>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8004ab2:	f645 4344 	movw	r3, #23620	; 0x5c44
 8004ab6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004aba:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8004abe:	6018      	str	r0, [r3, #0]
    Device_Property.Reset();
 8004ac0:	6851      	ldr	r1, [r2, #4]
 8004ac2:	4788      	blx	r1
 8004ac4:	882b      	ldrh	r3, [r5, #0]
 8004ac6:	e7a4      	b.n	8004a12 <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8004ac8:	485d      	ldr	r0, [pc, #372]	; (8004c40 <USB_Istr+0x268>)
 8004aca:	4780      	blx	r0
 8004acc:	882b      	ldrh	r3, [r5, #0]
 8004ace:	e79b      	b.n	8004a08 <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8004ad0:	4b5c      	ldr	r3, [pc, #368]	; (8004c44 <USB_Istr+0x26c>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8004ad2:	f64f 50ff 	movw	r0, #65023	; 0xfdff
 8004ad6:	6010      	str	r0, [r2, #0]
    bIntPackSOF++;
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	1c51      	adds	r1, r2, #1
 8004adc:	b2c8      	uxtb	r0, r1
 8004ade:	7018      	strb	r0, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8004ae0:	4b59      	ldr	r3, [pc, #356]	; (8004c48 <USB_Istr+0x270>)
 8004ae2:	4798      	blx	r3
 8004ae4:	882b      	ldrh	r3, [r5, #0]
 8004ae6:	e78a      	b.n	80049fe <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8004ae8:	4852      	ldr	r0, [pc, #328]	; (8004c34 <USB_Istr+0x25c>)
 8004aea:	6801      	ldr	r1, [r0, #0]
 8004aec:	1c4a      	adds	r2, r1, #1
 8004aee:	6002      	str	r2, [r0, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8004af0:	6801      	ldr	r1, [r0, #0]
 8004af2:	2903      	cmp	r1, #3
 8004af4:	d9c8      	bls.n	8004a88 <USB_Istr+0xb0>
 8004af6:	f645 4240 	movw	r2, #23616	; 0x5c40
 8004afa:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004afe:	6811      	ldr	r1, [r2, #0]
 8004b00:	0709      	lsls	r1, r1, #28
 8004b02:	d4c1      	bmi.n	8004a88 <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8004b04:	6815      	ldr	r5, [r2, #0]
 8004b06:	4951      	ldr	r1, [pc, #324]	; (8004c4c <USB_Istr+0x274>)
 8004b08:	b2ad      	uxth	r5, r5
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004b0a:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8004b0e:	600d      	str	r5, [r1, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004b10:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004b14:	6825      	ldr	r5, [r4, #0]
 8004b16:	f645 4404 	movw	r4, #23556	; 0x5c04
 8004b1a:	b2ad      	uxth	r5, r5
 8004b1c:	9500      	str	r5, [sp, #0]
 8004b1e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004b22:	6825      	ldr	r5, [r4, #0]
 8004b24:	f645 4408 	movw	r4, #23560	; 0x5c08
 8004b28:	b2ad      	uxth	r5, r5
 8004b2a:	9501      	str	r5, [sp, #4]
 8004b2c:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004b30:	6825      	ldr	r5, [r4, #0]
 8004b32:	f645 440c 	movw	r4, #23564	; 0x5c0c
 8004b36:	b2ad      	uxth	r5, r5
 8004b38:	9502      	str	r5, [sp, #8]
 8004b3a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004b3e:	6825      	ldr	r5, [r4, #0]
 8004b40:	f645 4410 	movw	r4, #23568	; 0x5c10
 8004b44:	b2ad      	uxth	r5, r5
 8004b46:	9503      	str	r5, [sp, #12]
 8004b48:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004b4c:	6825      	ldr	r5, [r4, #0]
 8004b4e:	f645 4414 	movw	r4, #23572	; 0x5c14
 8004b52:	b2ad      	uxth	r5, r5
 8004b54:	9504      	str	r5, [sp, #16]
 8004b56:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004b5a:	6825      	ldr	r5, [r4, #0]
 8004b5c:	f645 4418 	movw	r4, #23576	; 0x5c18
 8004b60:	b2ad      	uxth	r5, r5
 8004b62:	9505      	str	r5, [sp, #20]
 8004b64:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004b68:	6825      	ldr	r5, [r4, #0]
 8004b6a:	f645 441c 	movw	r4, #23580	; 0x5c1c
 8004b6e:	b2ad      	uxth	r5, r5
 8004b70:	9506      	str	r5, [sp, #24]
 8004b72:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004b76:	6824      	ldr	r4, [r4, #0]
 8004b78:	b2a4      	uxth	r4, r4
 8004b7a:	9407      	str	r4, [sp, #28]
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8004b7c:	680c      	ldr	r4, [r1, #0]
 8004b7e:	f044 0401 	orr.w	r4, r4, #1
 8004b82:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 8004b84:	680c      	ldr	r4, [r1, #0]
 8004b86:	b2a4      	uxth	r4, r4
 8004b88:	6014      	str	r4, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8004b8a:	680c      	ldr	r4, [r1, #0]
 8004b8c:	f024 0401 	bic.w	r4, r4, #1
 8004b90:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 8004b92:	6809      	ldr	r1, [r1, #0]
 8004b94:	b289      	uxth	r1, r1
 8004b96:	6011      	str	r1, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	f645 4244 	movw	r2, #23620	; 0x5c44
 8004b9e:	0549      	lsls	r1, r1, #21
 8004ba0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004ba4:	d5f8      	bpl.n	8004b98 <USB_Istr+0x1c0>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8004ba6:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8004baa:	6013      	str	r3, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8004bac:	9900      	ldr	r1, [sp, #0]
 8004bae:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8004bb2:	b28a      	uxth	r2, r1
 8004bb4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	9901      	ldr	r1, [sp, #4]
 8004bbc:	f645 4304 	movw	r3, #23556	; 0x5c04
 8004bc0:	b28a      	uxth	r2, r1
 8004bc2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	9902      	ldr	r1, [sp, #8]
 8004bca:	f645 4308 	movw	r3, #23560	; 0x5c08
 8004bce:	b28a      	uxth	r2, r1
 8004bd0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	9903      	ldr	r1, [sp, #12]
 8004bd8:	f645 430c 	movw	r3, #23564	; 0x5c0c
 8004bdc:	b28a      	uxth	r2, r1
 8004bde:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	9904      	ldr	r1, [sp, #16]
 8004be6:	f645 4310 	movw	r3, #23568	; 0x5c10
 8004bea:	b28a      	uxth	r2, r1
 8004bec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	9905      	ldr	r1, [sp, #20]
 8004bf4:	f645 4314 	movw	r3, #23572	; 0x5c14
 8004bf8:	b28a      	uxth	r2, r1
 8004bfa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	9906      	ldr	r1, [sp, #24]
 8004c02:	f645 4318 	movw	r3, #23576	; 0x5c18
 8004c06:	b28a      	uxth	r2, r1
 8004c08:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	9907      	ldr	r1, [sp, #28]
 8004c10:	f645 431c 	movw	r3, #23580	; 0x5c1c
 8004c14:	b28a      	uxth	r2, r1
 8004c16:	f2c4 0300 	movt	r3, #16384	; 0x4000
      
        esof_counter = 0;
 8004c1a:	2100      	movs	r1, #0
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8004c1c:	601a      	str	r2, [r3, #0]
      
        esof_counter = 0;
 8004c1e:	6001      	str	r1, [r0, #0]
 8004c20:	e732      	b.n	8004a88 <USB_Istr+0xb0>
 8004c22:	bf00      	nop
 8004c24:	20000e9c 	.word	0x20000e9c
 8004c28:	200016f8 	.word	0x200016f8
 8004c2c:	200004a0 	.word	0x200004a0
 8004c30:	08005105 	.word	0x08005105
 8004c34:	20000494 	.word	0x20000494
 8004c38:	08004f35 	.word	0x08004f35
 8004c3c:	20000284 	.word	0x20000284
 8004c40:	08006291 	.word	0x08006291
 8004c44:	20000490 	.word	0x20000490
 8004c48:	080049a9 	.word	0x080049a9
 8004c4c:	2000048c 	.word	0x2000048c

08004c50 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8004c50:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <Virtual_Com_Port_SetConfiguration+0x10>)
 8004c52:	7a98      	ldrb	r0, [r3, #10]
 8004c54:	b110      	cbz	r0, 8004c5c <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8004c56:	4903      	ldr	r1, [pc, #12]	; (8004c64 <Virtual_Com_Port_SetConfiguration+0x14>)
 8004c58:	2205      	movs	r2, #5
 8004c5a:	600a      	str	r2, [r1, #0]
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	200016d4 	.word	0x200016d4
 8004c64:	2000049c 	.word	0x2000049c

08004c68 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8004c68:	f240 439c 	movw	r3, #1180	; 0x49c
 8004c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c70:	2204      	movs	r2, #4
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop

08004c78 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <Virtual_Com_Port_Status_In+0x10>)
 8004c7a:	781a      	ldrb	r2, [r3, #0]
 8004c7c:	2a20      	cmp	r2, #32
 8004c7e:	d101      	bne.n	8004c84 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8004c80:	2000      	movs	r0, #0
 8004c82:	7018      	strb	r0, [r3, #0]
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000498 	.word	0x20000498

08004c8c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop

08004c90 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8004c90:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8004c92:	b510      	push	{r4, lr}
 8004c94:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8004c96:	d003      	beq.n	8004ca0 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8004c98:	2820      	cmp	r0, #32
 8004c9a:	d011      	beq.n	8004cc0 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8004c9c:	2002      	movs	r0, #2
 8004c9e:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8004ca0:	4a0f      	ldr	r2, [pc, #60]	; (8004ce0 <Virtual_Com_Port_Data_Setup+0x50>)
 8004ca2:	6813      	ldr	r3, [r2, #0]
 8004ca4:	7818      	ldrb	r0, [r3, #0]
 8004ca6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8004caa:	2921      	cmp	r1, #33	; 0x21
 8004cac:	d1f6      	bne.n	8004c9c <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8004cae:	490d      	ldr	r1, [pc, #52]	; (8004ce4 <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8004cb0:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8004cb2:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 8004cb4:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8004cb6:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8004cb8:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8004cba:	4788      	blx	r1
  return USB_SUCCESS;
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8004cc0:	4a07      	ldr	r2, [pc, #28]	; (8004ce0 <Virtual_Com_Port_Data_Setup+0x50>)
 8004cc2:	6811      	ldr	r1, [r2, #0]
 8004cc4:	7808      	ldrb	r0, [r1, #0]
 8004cc6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8004cca:	2921      	cmp	r1, #33	; 0x21
 8004ccc:	d003      	beq.n	8004cd6 <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8004cce:	4a06      	ldr	r2, [pc, #24]	; (8004ce8 <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8004cd0:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8004cd2:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8004cd4:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8004cd6:	4c04      	ldr	r4, [pc, #16]	; (8004ce8 <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8004cd8:	4904      	ldr	r1, [pc, #16]	; (8004cec <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 8004cda:	7023      	strb	r3, [r4, #0]
 8004cdc:	e7e8      	b.n	8004cb0 <Virtual_Com_Port_Data_Setup+0x20>
 8004cde:	bf00      	nop
 8004ce0:	200016f4 	.word	0x200016f4
 8004ce4:	08004d25 	.word	0x08004d25
 8004ce8:	20000498 	.word	0x20000498
 8004cec:	08004d3d 	.word	0x08004d3d

08004cf0 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8004cf0:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <Virtual_Com_Port_NoData_Setup+0x20>)
 8004cf2:	6819      	ldr	r1, [r3, #0]
 8004cf4:	780a      	ldrb	r2, [r1, #0]
 8004cf6:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8004cfa:	2b21      	cmp	r3, #33	; 0x21
 8004cfc:	d001      	beq.n	8004d02 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8004cfe:	2002      	movs	r0, #2
}
 8004d00:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8004d02:	2802      	cmp	r0, #2
 8004d04:	d001      	beq.n	8004d0a <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 8004d06:	2822      	cmp	r0, #34	; 0x22
 8004d08:	d1f9      	bne.n	8004cfe <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	200016f4 	.word	0x200016f4

08004d14 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8004d14:	b109      	cbz	r1, 8004d1a <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 8004d16:	2002      	movs	r0, #2
 8004d18:	4770      	bx	lr
  }
  else if (Interface > 1)
 8004d1a:	2801      	cmp	r0, #1
 8004d1c:	d8fb      	bhi.n	8004d16 <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8004d1e:	4608      	mov	r0, r1
}
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop

08004d24 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8004d24:	b108      	cbz	r0, 8004d2a <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8004d26:	4803      	ldr	r0, [pc, #12]	; (8004d34 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8004d28:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8004d2a:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <Virtual_Com_Port_GetLineCoding+0x14>)
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	6819      	ldr	r1, [r3, #0]
 8004d30:	820a      	strh	r2, [r1, #16]
    return NULL;
 8004d32:	4770      	bx	lr
 8004d34:	20000300 	.word	0x20000300
 8004d38:	200016f4 	.word	0x200016f4

08004d3c <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8004d3c:	b108      	cbz	r0, 8004d42 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8004d3e:	4803      	ldr	r0, [pc, #12]	; (8004d4c <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8004d40:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8004d42:	4b03      	ldr	r3, [pc, #12]	; (8004d50 <Virtual_Com_Port_SetLineCoding+0x14>)
 8004d44:	2208      	movs	r2, #8
 8004d46:	6819      	ldr	r1, [r3, #0]
 8004d48:	820a      	strh	r2, [r1, #16]
    return NULL;
 8004d4a:	4770      	bx	lr
 8004d4c:	20000300 	.word	0x20000300
 8004d50:	200016f4 	.word	0x200016f4

08004d54 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8004d54:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8004d56:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8004d58:	6819      	ldr	r1, [r3, #0]
 8004d5a:	78ca      	ldrb	r2, [r1, #3]
  if (wValue0 > 4)
 8004d5c:	2a04      	cmp	r2, #4
 8004d5e:	d805      	bhi.n	8004d6c <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8004d62:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8004d66:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8004d68:	4790      	blx	r2
 8004d6a:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 8004d6c:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 8004d6e:	bd08      	pop	{r3, pc}
 8004d70:	200016f4 	.word	0x200016f4
 8004d74:	200002e0 	.word	0x200002e0
 8004d78:	080058b1 	.word	0x080058b1

08004d7c <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8004d7c:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8004d7e:	f240 217c 	movw	r1, #636	; 0x27c
 8004d82:	f645 03b1 	movw	r3, #22705	; 0x58b1
 8004d86:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004d8a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004d8e:	4798      	blx	r3
}
 8004d90:	bd08      	pop	{r3, pc}
 8004d92:	bf00      	nop

08004d94 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8004d94:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8004d96:	f240 21d8 	movw	r1, #728	; 0x2d8
 8004d9a:	f645 03b1 	movw	r3, #22705	; 0x58b1
 8004d9e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004da2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004da6:	4798      	blx	r3
}
 8004da8:	bd08      	pop	{r3, pc}
 8004daa:	bf00      	nop

08004dac <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8004dac:	f241 62f4 	movw	r2, #5876	; 0x16f4

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8004db0:	f648 03a4 	movw	r3, #34980	; 0x88a4
 8004db4:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8004db8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004dbc:	6810      	ldr	r0, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8004dbe:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8004dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8004dc4:	2400      	movs	r4, #0
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8004dc6:	f645 75b1 	movw	r5, #24497	; 0x5fb1
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8004dca:	7241      	strb	r1, [r0, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8004dcc:	7284      	strb	r4, [r0, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8004dce:	72c4      	strb	r4, [r0, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8004dd0:	f6c0 0500 	movt	r5, #2048	; 0x800
 8004dd4:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8004dd6:	f645 76c5 	movw	r6, #24517	; 0x5fc5
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8004dda:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8004ddc:	f6c0 0600 	movt	r6, #2048	; 0x800
 8004de0:	4620      	mov	r0, r4
 8004de2:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8004de6:	f645 75dd 	movw	r5, #24541	; 0x5fdd
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8004dea:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8004dec:	f6c0 0500 	movt	r5, #2048	; 0x800
 8004df0:	2110      	movs	r1, #16
 8004df2:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8004df4:	f246 1a31 	movw	sl, #24881	; 0x6131

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8004df8:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8004dfa:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8004dfe:	2140      	movs	r1, #64	; 0x40
 8004e00:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8004e02:	f246 180d 	movw	r8, #24845	; 0x610d
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8004e06:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8004e08:	f6c0 0800 	movt	r8, #2048	; 0x800
 8004e0c:	2180      	movs	r1, #128	; 0x80
 8004e0e:	4620      	mov	r0, r4
  Clear_Status_Out(ENDP0);
 8004e10:	f246 07a5 	movw	r7, #24741	; 0x60a5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8004e14:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8004e16:	f6c0 0700 	movt	r7, #2048	; 0x800
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	47b8      	blx	r7
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8004e1e:	f240 2284 	movw	r2, #644	; 0x284
 8004e22:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004e26:	f246 19b9 	movw	r9, #25017	; 0x61b9
 8004e2a:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8004e2e:	f6c0 0900 	movt	r9, #2048	; 0x800
 8004e32:	4620      	mov	r0, r4
 8004e34:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8004e36:	f246 0381 	movw	r3, #24705	; 0x6081
 8004e3a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004e3e:	4620      	mov	r0, r4
 8004e40:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8004e42:	2001      	movs	r0, #1
 8004e44:	4621      	mov	r1, r4
 8004e46:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8004e48:	2001      	movs	r0, #1
 8004e4a:	21c0      	movs	r1, #192	; 0xc0
 8004e4c:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8004e4e:	f246 071d 	movw	r7, #24605	; 0x601d
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8004e52:	2001      	movs	r0, #1
 8004e54:	2120      	movs	r1, #32
 8004e56:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8004e58:	f6c0 0700 	movt	r7, #2048	; 0x800
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	4621      	mov	r1, r4
 8004e60:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8004e62:	2002      	movs	r0, #2
 8004e64:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e68:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8004e6a:	2002      	movs	r0, #2
 8004e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e70:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8004e72:	2002      	movs	r0, #2
 8004e74:	4621      	mov	r1, r4
 8004e76:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8004e78:	2002      	movs	r0, #2
 8004e7a:	2120      	movs	r1, #32
 8004e7c:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8004e7e:	2003      	movs	r0, #3
 8004e80:	4621      	mov	r1, r4
 8004e82:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8004e84:	2003      	movs	r0, #3
 8004e86:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004e8a:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8004e8c:	2003      	movs	r0, #3
 8004e8e:	2140      	movs	r1, #64	; 0x40
 8004e90:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8004e92:	2003      	movs	r0, #3
 8004e94:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e98:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	2003      	movs	r0, #3
 8004e9e:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8004ea0:	f645 518d 	movw	r1, #23949	; 0x5d8d
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004eaa:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 8004eac:	f240 409c 	movw	r0, #1180	; 0x49c
 8004eb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	6002      	str	r2, [r0, #0]
 8004eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004ebc <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8004ebc:	f245 439d 	movw	r3, #21661	; 0x549d
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8004ec0:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8004ec2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004ec6:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 8004ec8:	f241 60f4 	movw	r0, #5876	; 0x16f4
 8004ecc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004ed0:	6802      	ldr	r2, [r0, #0]
 8004ed2:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 8004ed4:	f644 61f9 	movw	r1, #20217	; 0x4ef9

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8004ed8:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 8004eda:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004ede:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8004ee0:	f246 232d 	movw	r3, #25133	; 0x622d
 8004ee4:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004ee8:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 8004eea:	f240 409c 	movw	r0, #1180	; 0x49c
 8004eee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004ef2:	6004      	str	r4, [r0, #0]
 8004ef4:	bd10      	pop	{r4, pc}
 8004ef6:	bf00      	nop

08004ef8 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8004ef8:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8004efa:	f245 336d 	movw	r3, #21357	; 0x536d
 8004efe:	2001      	movs	r0, #1
 8004f00:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004f04:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8004f06:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8004f0a:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8004f0e:	f241 62f8 	movw	r2, #5880	; 0x16f8
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8004f12:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8004f16:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8004f18:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8004f1c:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8004f1e:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8004f22:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8004f26:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8004f28:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 8004f2a:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8004f2c:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8004f2e:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 8004f30:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 8004f32:	bd38      	pop	{r3, r4, r5, pc}

08004f34 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8004f34:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8004f36:	2100      	movs	r1, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8004f38:	b083      	sub	sp, #12
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8004f3a:	f645 4340 	movw	r3, #23616	; 0x5c40

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004f3e:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8004f42:	9101      	str	r1, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8004f44:	f2c4 0300 	movt	r3, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004f48:	f2c4 0200 	movt	r2, #16384	; 0x4000
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8004f4c:	6818      	ldr	r0, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004f4e:	6814      	ldr	r4, [r2, #0]
 8004f50:	4960      	ldr	r1, [pc, #384]	; (80050d4 <Suspend+0x1a0>)
 8004f52:	b2a5      	uxth	r5, r4
 8004f54:	f645 4604 	movw	r6, #23556	; 0x5c04
 8004f58:	600d      	str	r5, [r1, #0]
 8004f5a:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8004f5e:	6837      	ldr	r7, [r6, #0]
 8004f60:	f645 4208 	movw	r2, #23560	; 0x5c08
 8004f64:	b2bc      	uxth	r4, r7
 8004f66:	604c      	str	r4, [r1, #4]
 8004f68:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004f6c:	6815      	ldr	r5, [r2, #0]
 8004f6e:	f645 460c 	movw	r6, #23564	; 0x5c0c
 8004f72:	b2af      	uxth	r7, r5
 8004f74:	608f      	str	r7, [r1, #8]
 8004f76:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8004f7a:	6834      	ldr	r4, [r6, #0]
 8004f7c:	f645 4210 	movw	r2, #23568	; 0x5c10
 8004f80:	b2a5      	uxth	r5, r4
 8004f82:	60cd      	str	r5, [r1, #12]
 8004f84:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004f88:	6816      	ldr	r6, [r2, #0]
 8004f8a:	f645 4714 	movw	r7, #23572	; 0x5c14
 8004f8e:	b2b4      	uxth	r4, r6
 8004f90:	610c      	str	r4, [r1, #16]
 8004f92:	f2c4 0700 	movt	r7, #16384	; 0x4000
 8004f96:	683d      	ldr	r5, [r7, #0]
 8004f98:	f645 4218 	movw	r2, #23576	; 0x5c18
 8004f9c:	b2ae      	uxth	r6, r5
 8004f9e:	614e      	str	r6, [r1, #20]
 8004fa0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004fa4:	6817      	ldr	r7, [r2, #0]
 8004fa6:	f645 451c 	movw	r5, #23580	; 0x5c1c
 8004faa:	b2bc      	uxth	r4, r7
 8004fac:	618c      	str	r4, [r1, #24]
 8004fae:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8004fb2:	682e      	ldr	r6, [r5, #0]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8004fb4:	b282      	uxth	r2, r0
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8004fb6:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8004fba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8004fbe:	4004      	ands	r4, r0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004fc0:	b2b7      	uxth	r7, r6
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8004fc2:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8004fc6:	f042 0601 	orr.w	r6, r2, #1
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8004fca:	f645 4044 	movw	r0, #23620	; 0x5c44
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004fce:	61cf      	str	r7, [r1, #28]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8004fd0:	f2c4 0000 	movt	r0, #16384	; 0x4000
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8004fd4:	601a      	str	r2, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8004fd6:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8004fd8:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8004fda:	6802      	ldr	r2, [r0, #0]
 8004fdc:	f645 4344 	movw	r3, #23620	; 0x5c44
 8004fe0:	0552      	lsls	r2, r2, #21
 8004fe2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004fe6:	d5f8      	bpl.n	8004fda <Suspend+0xa6>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8004fe8:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8004fec:	6018      	str	r0, [r3, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8004fee:	6808      	ldr	r0, [r1, #0]
 8004ff0:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8004ff4:	b280      	uxth	r0, r0
 8004ff6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004ffa:	6010      	str	r0, [r2, #0]
 8004ffc:	6848      	ldr	r0, [r1, #4]
 8004ffe:	f645 4204 	movw	r2, #23556	; 0x5c04
 8005002:	b280      	uxth	r0, r0
 8005004:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005008:	6010      	str	r0, [r2, #0]
 800500a:	6888      	ldr	r0, [r1, #8]
 800500c:	f645 4208 	movw	r2, #23560	; 0x5c08
 8005010:	b280      	uxth	r0, r0
 8005012:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005016:	6010      	str	r0, [r2, #0]
 8005018:	68c8      	ldr	r0, [r1, #12]
 800501a:	f645 420c 	movw	r2, #23564	; 0x5c0c
 800501e:	b280      	uxth	r0, r0
 8005020:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005024:	6010      	str	r0, [r2, #0]
 8005026:	6908      	ldr	r0, [r1, #16]
 8005028:	f645 4210 	movw	r2, #23568	; 0x5c10
 800502c:	b280      	uxth	r0, r0
 800502e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005032:	6010      	str	r0, [r2, #0]
 8005034:	6948      	ldr	r0, [r1, #20]
 8005036:	f645 4214 	movw	r2, #23572	; 0x5c14
 800503a:	b280      	uxth	r0, r0
 800503c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005040:	6010      	str	r0, [r2, #0]
 8005042:	6988      	ldr	r0, [r1, #24]
 8005044:	f645 4218 	movw	r2, #23576	; 0x5c18
 8005048:	b280      	uxth	r0, r0
 800504a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800504e:	6010      	str	r0, [r2, #0]
 8005050:	69c8      	ldr	r0, [r1, #28]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8005052:	f645 4240 	movw	r2, #23616	; 0x5c40
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8005056:	f645 411c 	movw	r1, #23580	; 0x5c1c
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800505a:	f2c4 0200 	movt	r2, #16384	; 0x4000
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 800505e:	b280      	uxth	r0, r0
 8005060:	f2c4 0100 	movt	r1, #16384	; 0x4000
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 8005064:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8005068:	6008      	str	r0, [r1, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800506a:	6014      	str	r4, [r2, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 800506c:	6810      	ldr	r0, [r2, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800506e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 8005072:	b284      	uxth	r4, r0
 8005074:	f044 0004 	orr.w	r0, r4, #4
 8005078:	6010      	str	r0, [r2, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800507a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800507e:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8005080:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8005084:	9001      	str	r0, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 8005086:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8005088:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 800508c:	f020 0003 	bic.w	r0, r0, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 8005090:	f040 0001 	orr.w	r0, r0, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 8005094:	6008      	str	r0, [r1, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8005096:	6820      	ldr	r0, [r4, #0]
 8005098:	f040 0004 	orr.w	r0, r0, #4
 800509c:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	04c0      	lsls	r0, r0, #19
 80050a2:	d50f      	bpl.n	80050c4 <Suspend+0x190>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 80050a4:	f64e 70ff 	movw	r0, #61439	; 0xefff
 80050a8:	6018      	str	r0, [r3, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 80050aa:	6810      	ldr	r0, [r2, #0]
        wCNTR&=~CNTR_FSUSP;
 80050ac:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80050b0:	4003      	ands	r3, r0
        _SetCNTR(wCNTR);
 80050b2:	6013      	str	r3, [r2, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 80050b4:	9a01      	ldr	r2, [sp, #4]
 80050b6:	600a      	str	r2, [r1, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 80050b8:	6821      	ldr	r1, [r4, #0]
 80050ba:	f021 0004 	bic.w	r0, r1, #4
 80050be:	6020      	str	r0, [r4, #0]
#endif
    }
}
 80050c0:	b003      	add	sp, #12
 80050c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 80050c4:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <Suspend+0x1a4>)
 80050c6:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 80050c8:	6822      	ldr	r2, [r4, #0]
 80050ca:	f022 0104 	bic.w	r1, r2, #4
 80050ce:	6021      	str	r1, [r4, #0]
 80050d0:	e7f6      	b.n	80050c0 <Suspend+0x18c>
 80050d2:	bf00      	nop
 80050d4:	20000ea4 	.word	0x20000ea4
 80050d8:	080054e1 	.word	0x080054e1

080050dc <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 80050dc:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 80050de:	f645 4440 	movw	r4, #23616	; 0x5c40
 80050e2:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80050e6:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 80050e8:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80050ec:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 80050ee:	f245 209d 	movw	r0, #21149	; 0x529d
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 80050f2:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 80050f4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80050f8:	4780      	blx	r0

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 80050fa:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 80050fe:	6021      	str	r1, [r4, #0]
 8005100:	bd10      	pop	{r4, pc}
 8005102:	bf00      	nop

08005104 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8005104:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 8005106:	4c2b      	ldr	r4, [pc, #172]	; (80051b4 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8005108:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 800510a:	bf18      	it	ne
 800510c:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 800510e:	7823      	ldrb	r3, [r4, #0]
 8005110:	2b05      	cmp	r3, #5
 8005112:	d819      	bhi.n	8005148 <Resume+0x44>
 8005114:	e8df f003 	tbb	[pc, r3]
 8005118:	2f2a221b 	.word	0x2f2a221b
 800511c:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 800511e:	7860      	ldrb	r0, [r4, #1]
 8005120:	1e41      	subs	r1, r0, #1
 8005122:	b2ca      	uxtb	r2, r1
 8005124:	7062      	strb	r2, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8005126:	7863      	ldrb	r3, [r4, #1]
 8005128:	b983      	cbnz	r3, 800514c <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 800512a:	f645 4240 	movw	r2, #23616	; 0x5c40
 800512e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005132:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 8005134:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005138:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 800513a:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 800513c:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <Resume+0xb0>)
        remotewakeupon = 0;
 800513e:	491e      	ldr	r1, [pc, #120]	; (80051b8 <Resume+0xb4>)
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 8005140:	2006      	movs	r0, #6
 8005142:	7010      	strb	r0, [r2, #0]
        remotewakeupon = 0;
 8005144:	600b      	str	r3, [r1, #0]
 8005146:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8005148:	2106      	movs	r1, #6
 800514a:	7021      	strb	r1, [r4, #0]
 800514c:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 800514e:	4a1a      	ldr	r2, [pc, #104]	; (80051b8 <Resume+0xb4>)
 8005150:	6811      	ldr	r1, [r2, #0]
 8005152:	2900      	cmp	r1, #0
 8005154:	d028      	beq.n	80051a8 <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8005156:	2005      	movs	r0, #5
 8005158:	7020      	strb	r0, [r4, #0]
 800515a:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 800515c:	4a17      	ldr	r2, [pc, #92]	; (80051bc <Resume+0xb8>)
 800515e:	4790      	blx	r2
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 8005160:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <Resume+0xb4>)
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8005162:	2104      	movs	r1, #4
      remotewakeupon = 1;
 8005164:	2001      	movs	r0, #1
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8005166:	7021      	strb	r1, [r4, #0]
      remotewakeupon = 1;
 8005168:	6018      	str	r0, [r3, #0]
      break;
 800516a:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 800516c:	2302      	movs	r3, #2
      ResumeS.eState = RESUME_WAIT;
 800516e:	2003      	movs	r0, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8005170:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8005172:	7020      	strb	r0, [r4, #0]
      break;
 8005174:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 8005176:	7862      	ldrb	r2, [r4, #1]
 8005178:	1e51      	subs	r1, r2, #1
 800517a:	b2cb      	uxtb	r3, r1
 800517c:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800517e:	7860      	ldrb	r0, [r4, #1]
 8005180:	2800      	cmp	r0, #0
 8005182:	d1e3      	bne.n	800514c <Resume+0x48>
        ResumeS.eState = RESUME_START;
 8005184:	490b      	ldr	r1, [pc, #44]	; (80051b4 <Resume+0xb0>)
 8005186:	2204      	movs	r2, #4
 8005188:	700a      	strb	r2, [r1, #0]
 800518a:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 800518c:	f645 4340 	movw	r3, #23616	; 0x5c40
 8005190:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005194:	6818      	ldr	r0, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8005196:	b282      	uxth	r2, r0
 8005198:	f042 0110 	orr.w	r1, r2, #16
 800519c:	6019      	str	r1, [r3, #0]
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 800519e:	200a      	movs	r0, #10
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 80051a0:	2305      	movs	r3, #5
 80051a2:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 80051a4:	7060      	strb	r0, [r4, #1]
      break;
 80051a6:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 80051a8:	4b04      	ldr	r3, [pc, #16]	; (80051bc <Resume+0xb8>)
 80051aa:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 80051ac:	2206      	movs	r2, #6
 80051ae:	7022      	strb	r2, [r4, #0]
 80051b0:	bd10      	pop	{r4, pc}
 80051b2:	bf00      	nop
 80051b4:	20000ea0 	.word	0x20000ea0
 80051b8:	200004a4 	.word	0x200004a4
 80051bc:	080050dd 	.word	0x080050dd

080051c0 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 80051c0:	f240 4314 	movw	r3, #1044	; 0x414
 80051c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80051c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	4770      	bx	lr

080051d0 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 80051d0:	b470      	push	{r4, r5, r6}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80051d2:	b38a      	cbz	r2, 8005238 <IntToUnicode+0x68>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80051d4:	1e56      	subs	r6, r2, #1
 80051d6:	b2f2      	uxtb	r2, r6
 80051d8:	1c53      	adds	r3, r2, #1
 80051da:	005e      	lsls	r6, r3, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80051dc:	0f03      	lsrs	r3, r0, #28
 80051de:	1eb2      	subs	r2, r6, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80051e0:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80051e2:	2b09      	cmp	r3, #9
 80051e4:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80051e8:	d928      	bls.n	800523c <IntToUnicode+0x6c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80051ea:	3337      	adds	r3, #55	; 0x37
 80051ec:	700b      	strb	r3, [r1, #0]
 80051ee:	2302      	movs	r3, #2
    }
    
    value = value << 4;
 80051f0:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80051f2:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80051f4:	704c      	strb	r4, [r1, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80051f6:	d01f      	beq.n	8005238 <IntToUnicode+0x68>
 80051f8:	b152      	cbz	r2, 8005210 <IntToUnicode+0x40>
  {
    if( ((value >> 28)) < 0xA )
 80051fa:	0f02      	lsrs	r2, r0, #28
 80051fc:	2a09      	cmp	r2, #9
 80051fe:	d913      	bls.n	8005228 <IntToUnicode+0x58>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8005200:	3237      	adds	r2, #55	; 0x37
 8005202:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8005204:	18ca      	adds	r2, r1, r3
 8005206:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8005208:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800520a:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800520c:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800520e:	d013      	beq.n	8005238 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8005210:	0f05      	lsrs	r5, r0, #28
 8005212:	2d09      	cmp	r5, #9
 8005214:	d815      	bhi.n	8005242 <IntToUnicode+0x72>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8005216:	3530      	adds	r5, #48	; 0x30
 8005218:	54cd      	strb	r5, [r1, r3]
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 800521a:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 800521c:	0f02      	lsrs	r2, r0, #28
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800521e:	18cd      	adds	r5, r1, r3
 8005220:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8005222:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8005224:	706c      	strb	r4, [r5, #1]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8005226:	d8eb      	bhi.n	8005200 <IntToUnicode+0x30>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8005228:	3230      	adds	r2, #48	; 0x30
 800522a:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800522c:	18ca      	adds	r2, r1, r3
 800522e:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8005230:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8005232:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8005234:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8005236:	d1eb      	bne.n	8005210 <IntToUnicode+0x40>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8005238:	bc70      	pop	{r4, r5, r6}
 800523a:	4770      	bx	lr
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800523c:	3330      	adds	r3, #48	; 0x30
 800523e:	700b      	strb	r3, [r1, #0]
 8005240:	e7d5      	b.n	80051ee <IntToUnicode+0x1e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8005242:	3537      	adds	r5, #55	; 0x37
 8005244:	54cd      	strb	r5, [r1, r3]
 8005246:	e7e8      	b.n	800521a <IntToUnicode+0x4a>

08005248 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8005248:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 800524a:	f644 13d9 	movw	r3, #18905	; 0x49d9
 800524e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005252:	4798      	blx	r3
 8005254:	bd08      	pop	{r3, pc}
 8005256:	bf00      	nop

08005258 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8005258:	f241 0304 	movw	r3, #4100	; 0x1004
 800525c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	f422 0070 	bic.w	r0, r2, #15728640	; 0xf00000
 8005266:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 8005268:	6819      	ldr	r1, [r3, #0]
 800526a:	f441 1200 	orr.w	r2, r1, #2097152	; 0x200000
 800526e:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	6018      	str	r0, [r3, #0]
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop

08005278 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8005278:	f241 0204 	movw	r2, #4100	; 0x1004
 800527c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005280:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8005282:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8005286:	f421 0080 	bic.w	r0, r1, #4194304	; 0x400000
 800528a:	6010      	str	r0, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 800528c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	f442 0100 	orr.w	r1, r2, #8388608	; 0x800000
 8005296:	6019      	str	r1, [r3, #0]
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop

0800529c <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <Leave_LowPowerMode+0x18>)
 800529e:	7a98      	ldrb	r0, [r3, #10]
 80052a0:	b918      	cbnz	r0, 80052aa <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 80052a2:	4905      	ldr	r1, [pc, #20]	; (80052b8 <Leave_LowPowerMode+0x1c>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	600a      	str	r2, [r1, #0]
 80052a8:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 80052aa:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <Leave_LowPowerMode+0x1c>)
 80052ac:	2005      	movs	r0, #5
 80052ae:	6018      	str	r0, [r3, #0]
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	200016d4 	.word	0x200016d4
 80052b8:	2000049c 	.word	0x2000049c

080052bc <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 80052bc:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 80052c0:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 80052c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80052c6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 80052ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 80052ce:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 80052d0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80052d4:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 80052d6:	f240 4404 	movw	r4, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 80052da:	f420 2580 	bic.w	r5, r0, #262144	; 0x40000
 80052de:	601d      	str	r5, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 80052e0:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80052e4:	6822      	ldr	r2, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 80052e6:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 80052ea:	f422 2080 	bic.w	r0, r2, #262144	; 0x40000
 80052ee:	6020      	str	r0, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 80052f0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80052f4:	680c      	ldr	r4, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 80052f6:	f240 450c 	movw	r5, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 80052fa:	f444 2280 	orr.w	r2, r4, #262144	; 0x40000
 80052fe:	600a      	str	r2, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8005300:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8005304:	6829      	ldr	r1, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8005306:	f642 34a9 	movw	r4, #11177	; 0x2ba9
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800530a:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 800530e:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8005310:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8005312:	f245 2149 	movw	r1, #21065	; 0x5249
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8005316:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800531a:	2090      	movs	r0, #144	; 0x90
 800531c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005320:	2200      	movs	r2, #0
 8005322:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8005326:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8005328:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 800532a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800532e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005332:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8005334:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8005336:	f442 1180 	orr.w	r1, r2, #1048576	; 0x100000
 800533a:	6019      	str	r1, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 800533c:	f245 11c1 	movw	r1, #20929	; 0x51c1
 8005340:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005344:	2200      	movs	r2, #0
 8005346:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8005348:	f24e 1004 	movw	r0, #57604	; 0xe104
 800534c:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8005350:	6802      	ldr	r2, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8005352:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8005356:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 800535a:	6001      	str	r1, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 800535c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	f440 2280 	orr.w	r2, r0, #262144	; 0x40000
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	bd38      	pop	{r3, r4, r5, pc}
 800536a:	bf00      	nop

0800536c <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 800536c:	f241 030c 	movw	r3, #4108	; 0x100c
 8005370:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005374:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 8005376:	b918      	cbnz	r0, 8005380 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8005378:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 800537c:	6018      	str	r0, [r3, #0]
 800537e:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8005380:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005384:	6019      	str	r1, [r3, #0]
 8005386:	4770      	bx	lr

08005388 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8005388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800538c:	460f      	mov	r7, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800538e:	b082      	sub	sp, #8
 8005390:	4605      	mov	r5, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8005392:	b361      	cbz	r1, 80053ee <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8005394:	7803      	ldrb	r3, [r0, #0]
 8005396:	1e4a      	subs	r2, r1, #1
    Hw_Uart_Q_Push( 5, &UartData );	//
 8005398:	2005      	movs	r0, #5
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800539a:	2401      	movs	r4, #1
 800539c:	4e15      	ldr	r6, [pc, #84]	; (80053f4 <USB_To_USART_Send_Data+0x6c>)
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 800539e:	f10d 0107 	add.w	r1, sp, #7
 80053a2:	ea02 0804 	and.w	r8, r2, r4
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80053a6:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80053aa:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80053ac:	42bc      	cmp	r4, r7
 80053ae:	d21e      	bcs.n	80053ee <USB_To_USART_Send_Data+0x66>
 80053b0:	f1b8 0f00 	cmp.w	r8, #0
 80053b4:	d009      	beq.n	80053ca <USB_To_USART_Send_Data+0x42>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80053b6:	786b      	ldrb	r3, [r5, #1]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80053b8:	2005      	movs	r0, #5
 80053ba:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80053be:	2402      	movs	r4, #2
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80053c0:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80053c4:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80053c6:	42bc      	cmp	r4, r7
 80053c8:	d211      	bcs.n	80053ee <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80053ca:	5d2a      	ldrb	r2, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80053cc:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80053d0:	3401      	adds	r4, #1
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 80053d2:	2005      	movs	r0, #5
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80053d4:	f88d 2007 	strb.w	r2, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80053d8:	47b0      	blx	r6
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80053da:	5d2b      	ldrb	r3, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80053dc:	2005      	movs	r0, #5
 80053de:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80053e2:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80053e4:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80053e8:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80053ea:	42bc      	cmp	r4, r7
 80053ec:	d3ed      	bcc.n	80053ca <USB_To_USART_Send_Data+0x42>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 80053ee:	b002      	add	sp, #8
 80053f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f4:	08002a95 	.word	0x08002a95

080053f8 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 80053f8:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 80053fa:	4c20      	ldr	r4, [pc, #128]	; (800547c <Handle_USBAsynchXfer+0x84>)
 80053fc:	7823      	ldrb	r3, [r4, #0]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d023      	beq.n	800544a <Handle_USBAsynchXfer+0x52>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8005402:	4d1f      	ldr	r5, [pc, #124]	; (8005480 <Handle_USBAsynchXfer+0x88>)
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800540a:	d02c      	beq.n	8005466 <Handle_USBAsynchXfer+0x6e>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800540c:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <Handle_USBAsynchXfer+0x8c>)
 800540e:	6811      	ldr	r1, [r2, #0]
 8005410:	428b      	cmp	r3, r1
 8005412:	d02f      	beq.n	8005474 <Handle_USBAsynchXfer+0x7c>
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8005414:	d81a      	bhi.n	800544c <Handle_USBAsynchXfer+0x54>
 8005416:	b298      	uxth	r0, r3
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8005418:	1ace      	subs	r6, r1, r3
 800541a:	4a1b      	ldr	r2, [pc, #108]	; (8005488 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800541c:	2e40      	cmp	r6, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800541e:	6016      	str	r6, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8005420:	d91b      	bls.n	800545a <Handle_USBAsynchXfer+0x62>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8005422:	3e40      	subs	r6, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8005424:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8005426:	6016      	str	r6, [r2, #0]
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8005428:	602b      	str	r3, [r5, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800542a:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800542c:	4b17      	ldr	r3, [pc, #92]	; (800548c <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 800542e:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8005430:	1818      	adds	r0, r3, r0
 8005432:	4632      	mov	r2, r6
 8005434:	21c0      	movs	r1, #192	; 0xc0
 8005436:	4b16      	ldr	r3, [pc, #88]	; (8005490 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8005438:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800543a:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 800543c:	4628      	mov	r0, r5
 800543e:	4631      	mov	r1, r6
 8005440:	4a14      	ldr	r2, [pc, #80]	; (8005494 <Handle_USBAsynchXfer+0x9c>)
 8005442:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 8005444:	4628      	mov	r0, r5
 8005446:	4914      	ldr	r1, [pc, #80]	; (8005498 <Handle_USBAsynchXfer+0xa0>)
 8005448:	4788      	blx	r1
 800544a:	bd70      	pop	{r4, r5, r6, pc}
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800544c:	f5c3 6600 	rsb	r6, r3, #2048	; 0x800
 8005450:	4a0d      	ldr	r2, [pc, #52]	; (8005488 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8005452:	2e40      	cmp	r6, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8005454:	6016      	str	r6, [r2, #0]
 8005456:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8005458:	d8e3      	bhi.n	8005422 <Handle_USBAsynchXfer+0x2a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 800545a:	18f1      	adds	r1, r6, r3
 800545c:	6029      	str	r1, [r5, #0]
      USART_Rx_length = 0;
 800545e:	2500      	movs	r5, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 8005460:	b2b6      	uxth	r6, r6
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8005462:	6015      	str	r5, [r2, #0]
 8005464:	e7e2      	b.n	800542c <Handle_USBAsynchXfer+0x34>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8005466:	4907      	ldr	r1, [pc, #28]	; (8005484 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8005468:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800546a:	6809      	ldr	r1, [r1, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 800546c:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800546e:	b109      	cbz	r1, 8005474 <Handle_USBAsynchXfer+0x7c>
 8005470:	4603      	mov	r3, r0
 8005472:	e7d1      	b.n	8005418 <Handle_USBAsynchXfer+0x20>
    {
      USB_Tx_State = 0; 
 8005474:	2000      	movs	r0, #0
 8005476:	7020      	strb	r0, [r4, #0]
      return;
 8005478:	bd70      	pop	{r4, r5, r6, pc}
 800547a:	bf00      	nop
 800547c:	200004a8 	.word	0x200004a8
 8005480:	200004b0 	.word	0x200004b0
 8005484:	200004ac 	.word	0x200004ac
 8005488:	200004b4 	.word	0x200004b4
 800548c:	20000ec4 	.word	0x20000ec4
 8005490:	08005ee9 	.word	0x08005ee9
 8005494:	08006199 	.word	0x08006199
 8005498:	0800605d 	.word	0x0800605d

0800549c <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 800549c:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800549e:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80054a2:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80054a6:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80054aa:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80054ae:	6810      	ldr	r0, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 80054b0:	681a      	ldr	r2, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 80054b2:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 80054b6:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80054ba:	1880      	adds	r0, r0, r2
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 80054bc:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80054be:	d007      	beq.n	80054d0 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 80054c0:	4904      	ldr	r1, [pc, #16]	; (80054d4 <Get_SerialNum+0x38>)
 80054c2:	2208      	movs	r2, #8
 80054c4:	4d04      	ldr	r5, [pc, #16]	; (80054d8 <Get_SerialNum+0x3c>)
 80054c6:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 80054c8:	4620      	mov	r0, r4
 80054ca:	4904      	ldr	r1, [pc, #16]	; (80054dc <Get_SerialNum+0x40>)
 80054cc:	2204      	movs	r2, #4
 80054ce:	47a8      	blx	r5
 80054d0:	bd38      	pop	{r3, r4, r5, pc}
 80054d2:	bf00      	nop
 80054d4:	2000022a 	.word	0x2000022a
 80054d8:	080051d1 	.word	0x080051d1
 80054dc:	2000023a 	.word	0x2000023a

080054e0 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 80054e0:	bf30      	wfi
 80054e2:	4770      	bx	lr

080054e4 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 80054e4:	b508      	push	{r3, lr}
  if (Length == 0)
 80054e6:	b138      	cbz	r0, 80054f8 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 80054e8:	4b06      	ldr	r3, [pc, #24]	; (8005504 <Standard_GetConfiguration+0x20>)
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	6801      	ldr	r1, [r0, #0]
 80054ee:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_Configuration;
 80054f0:	4a05      	ldr	r2, [pc, #20]	; (8005508 <Standard_GetConfiguration+0x24>)
 80054f2:	6810      	ldr	r0, [r2, #0]
 80054f4:	300a      	adds	r0, #10
}
 80054f6:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80054f8:	4b03      	ldr	r3, [pc, #12]	; (8005508 <Standard_GetConfiguration+0x24>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	6819      	ldr	r1, [r3, #0]
 80054fe:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8005500:	bd08      	pop	{r3, pc}
 8005502:	bf00      	nop
 8005504:	200016f0 	.word	0x200016f0
 8005508:	200016f4 	.word	0x200016f4

0800550c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800550c:	b508      	push	{r3, lr}
  if (Length == 0)
 800550e:	b138      	cbz	r0, 8005520 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8005510:	4b06      	ldr	r3, [pc, #24]	; (800552c <Standard_GetInterface+0x20>)
 8005512:	6818      	ldr	r0, [r3, #0]
 8005514:	6881      	ldr	r1, [r0, #8]
 8005516:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8005518:	4a05      	ldr	r2, [pc, #20]	; (8005530 <Standard_GetInterface+0x24>)
 800551a:	6810      	ldr	r0, [r2, #0]
 800551c:	300c      	adds	r0, #12
}
 800551e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8005520:	4b03      	ldr	r3, [pc, #12]	; (8005530 <Standard_GetInterface+0x24>)
 8005522:	2201      	movs	r2, #1
 8005524:	6819      	ldr	r1, [r3, #0]
 8005526:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8005528:	bd08      	pop	{r3, pc}
 800552a:	bf00      	nop
 800552c:	200016f0 	.word	0x200016f0
 8005530:	200016f4 	.word	0x200016f4

08005534 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8005534:	b508      	push	{r3, lr}
  if (Length == 0)
 8005536:	2800      	cmp	r0, #0
 8005538:	d03b      	beq.n	80055b2 <Standard_GetStatus+0x7e>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800553a:	4b23      	ldr	r3, [pc, #140]	; (80055c8 <Standard_GetStatus+0x94>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800553c:	4823      	ldr	r0, [pc, #140]	; (80055cc <Standard_GetStatus+0x98>)
 800553e:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005540:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8005542:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005544:	7813      	ldrb	r3, [r2, #0]
 8005546:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800554a:	d112      	bne.n	8005572 <Standard_GetStatus+0x3e>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 800554c:	7a53      	ldrb	r3, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800554e:	f003 0220 	and.w	r2, r3, #32
 8005552:	b2d1      	uxtb	r1, r2
 8005554:	bb59      	cbnz	r1, 80055ae <Standard_GetStatus+0x7a>
 8005556:	7802      	ldrb	r2, [r0, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	b2d9      	uxtb	r1, r3
 800555e:	b311      	cbz	r1, 80055a6 <Standard_GetStatus+0x72>
    {
      SetBit(StatusInfo0, 0);
 8005560:	f042 0301 	orr.w	r3, r2, #1
 8005564:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8005566:	481a      	ldr	r0, [pc, #104]	; (80055d0 <Standard_GetStatus+0x9c>)
 8005568:	6801      	ldr	r1, [r0, #0]
 800556a:	690a      	ldr	r2, [r1, #16]
 800556c:	4790      	blx	r2
  return (uint8_t *)&StatusInfo;
 800556e:	4817      	ldr	r0, [pc, #92]	; (80055cc <Standard_GetStatus+0x98>)
 8005570:	bd08      	pop	{r3, pc}
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8005572:	2b01      	cmp	r3, #1
 8005574:	d016      	beq.n	80055a4 <Standard_GetStatus+0x70>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8005576:	2b02      	cmp	r3, #2
 8005578:	d113      	bne.n	80055a2 <Standard_GetStatus+0x6e>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800557a:	7951      	ldrb	r1, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 800557c:	f001 020f 	and.w	r2, r1, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8005580:	0093      	lsls	r3, r2, #2
 8005582:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8005586:	f502 43b8 	add.w	r3, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800558a:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800558e:	6819      	ldr	r1, [r3, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8005590:	d114      	bne.n	80055bc <Standard_GetStatus+0x88>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8005592:	f401 5240 	and.w	r2, r1, #12288	; 0x3000
 8005596:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800559a:	d1e4      	bne.n	8005566 <Standard_GetStatus+0x32>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 800559c:	2101      	movs	r1, #1
 800559e:	7001      	strb	r1, [r0, #0]
 80055a0:	e7e1      	b.n	8005566 <Standard_GetStatus+0x32>
    }

  }
  else
  {
    return NULL;
 80055a2:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 80055a4:	bd08      	pop	{r3, pc}
    {
      SetBit(StatusInfo0, 0);
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 80055a6:	f022 0201 	bic.w	r2, r2, #1
 80055aa:	7002      	strb	r2, [r0, #0]
 80055ac:	e7db      	b.n	8005566 <Standard_GetStatus+0x32>
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 80055ae:	2202      	movs	r2, #2
 80055b0:	e7d2      	b.n	8005558 <Standard_GetStatus+0x24>
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <Standard_GetStatus+0x94>)
 80055b4:	2202      	movs	r2, #2
 80055b6:	6819      	ldr	r1, [r3, #0]
 80055b8:	820a      	strh	r2, [r1, #16]
    return 0;
 80055ba:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80055bc:	f001 0330 	and.w	r3, r1, #48	; 0x30
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d1d0      	bne.n	8005566 <Standard_GetStatus+0x32>
 80055c4:	e7ea      	b.n	800559c <Standard_GetStatus+0x68>
 80055c6:	bf00      	nop
 80055c8:	200016f4 	.word	0x200016f4
 80055cc:	200016c4 	.word	0x200016c4
 80055d0:	200016f0 	.word	0x200016f0

080055d4 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80055d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80055d8:	4e27      	ldr	r6, [pc, #156]	; (8005678 <DataStageIn+0xa4>)
 80055da:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 80055dc:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 80055de:	7a27      	ldrb	r7, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80055e0:	b923      	cbnz	r3, 80055ec <DataStageIn+0x18>
 80055e2:	2f04      	cmp	r7, #4
 80055e4:	d02a      	beq.n	800563c <DataStageIn+0x68>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80055e6:	8aa5      	ldrh	r5, [r4, #20]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80055e8:	2704      	movs	r7, #4
 80055ea:	e003      	b.n	80055f4 <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80055ec:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 80055ee:	42ab      	cmp	r3, r5
 80055f0:	d9fa      	bls.n	80055e8 <DataStageIn+0x14>
 80055f2:	2702      	movs	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80055f4:	429d      	cmp	r5, r3
 80055f6:	bf28      	it	cs
 80055f8:	461d      	movcs	r5, r3
 80055fa:	69a1      	ldr	r1, [r4, #24]
 80055fc:	4628      	mov	r0, r5
 80055fe:	4788      	blx	r1
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8005600:	4a1e      	ldr	r2, [pc, #120]	; (800567c <DataStageIn+0xa8>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8005602:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8005604:	2000      	movs	r0, #0
 8005606:	4790      	blx	r2
 8005608:	462a      	mov	r2, r5
 800560a:	4601      	mov	r1, r0
 800560c:	4b1c      	ldr	r3, [pc, #112]	; (8005680 <DataStageIn+0xac>)
 800560e:	4640      	mov	r0, r8
 8005610:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8005612:	4629      	mov	r1, r5
 8005614:	2000      	movs	r0, #0
 8005616:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <DataStageIn+0xb0>)
 8005618:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 800561a:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800561c:	8a61      	ldrh	r1, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800561e:	1b43      	subs	r3, r0, r5
 8005620:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8005622:	186d      	adds	r5, r5, r1
  vSetEPTxStatus(EP_TX_VALID);
 8005624:	4818      	ldr	r0, [pc, #96]	; (8005688 <DataStageIn+0xb4>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8005626:	4b19      	ldr	r3, [pc, #100]	; (800568c <DataStageIn+0xb8>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8005628:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 800562a:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800562c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005630:	6834      	ldr	r4, [r6, #0]

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8005632:	8002      	strh	r2, [r0, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8005634:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8005636:	7227      	strb	r7, [r4, #8]
 8005638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 800563c:	4a14      	ldr	r2, [pc, #80]	; (8005690 <DataStageIn+0xbc>)
 800563e:	7810      	ldrb	r0, [r2, #0]
 8005640:	2801      	cmp	r0, #1
 8005642:	d006      	beq.n	8005652 <DataStageIn+0x7e>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8005644:	4910      	ldr	r1, [pc, #64]	; (8005688 <DataStageIn+0xb4>)
 8005646:	2710      	movs	r7, #16
 8005648:	800f      	strh	r7, [r1, #0]
 800564a:	2707      	movs	r7, #7
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800564c:	7227      	strb	r7, [r4, #8]
 800564e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8005652:	f645 4050 	movw	r0, #23632	; 0x5c50
 8005656:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	f243 0102 	movw	r1, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8005660:	b280      	uxth	r0, r0
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8005662:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005666:	1841      	adds	r1, r0, r1
 8005668:	0048      	lsls	r0, r1, #1
 800566a:	4907      	ldr	r1, [pc, #28]	; (8005688 <DataStageIn+0xb4>)
 800566c:	6003      	str	r3, [r0, #0]
 800566e:	2030      	movs	r0, #48	; 0x30
 8005670:	8008      	strh	r0, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8005672:	7013      	strb	r3, [r2, #0]
 8005674:	e7df      	b.n	8005636 <DataStageIn+0x62>
 8005676:	bf00      	nop
 8005678:	200016f4 	.word	0x200016f4
 800567c:	08006159 	.word	0x08006159
 8005680:	08005ee9 	.word	0x08005ee9
 8005684:	08006199 	.word	0x08006199
 8005688:	200016fc 	.word	0x200016fc
 800568c:	200016fa 	.word	0x200016fa
 8005690:	200004b8 	.word	0x200004b8

08005694 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8005694:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8005696:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <Standard_SetConfiguration+0x30>)
 8005698:	4a0b      	ldr	r2, [pc, #44]	; (80056c8 <Standard_SetConfiguration+0x34>)
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	7851      	ldrb	r1, [r2, #1]
 800569e:	78c3      	ldrb	r3, [r0, #3]
 80056a0:	4299      	cmp	r1, r3
 80056a2:	d201      	bcs.n	80056a8 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 80056a4:	2002      	movs	r0, #2
  }
}
 80056a6:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80056a8:	7882      	ldrb	r2, [r0, #2]
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	d1fa      	bne.n	80056a4 <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 80056ae:	8884      	ldrh	r4, [r0, #4]
 80056b0:	2c00      	cmp	r4, #0
 80056b2:	d1f7      	bne.n	80056a4 <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 80056b4:	7283      	strb	r3, [r0, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 80056b6:	4805      	ldr	r0, [pc, #20]	; (80056cc <Standard_SetConfiguration+0x38>)
 80056b8:	6801      	ldr	r1, [r0, #0]
 80056ba:	684b      	ldr	r3, [r1, #4]
 80056bc:	4798      	blx	r3
    return USB_SUCCESS;
 80056be:	4620      	mov	r0, r4
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	bf00      	nop
 80056c4:	200016f4 	.word	0x200016f4
 80056c8:	20000308 	.word	0x20000308
 80056cc:	200016f0 	.word	0x200016f0

080056d0 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 80056d0:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 80056d2:	4a10      	ldr	r2, [pc, #64]	; (8005714 <Standard_SetInterface+0x44>)
 80056d4:	4c10      	ldr	r4, [pc, #64]	; (8005718 <Standard_SetInterface+0x48>)
 80056d6:	6811      	ldr	r1, [r2, #0]
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	698a      	ldr	r2, [r1, #24]
 80056dc:	7958      	ldrb	r0, [r3, #5]
 80056de:	78d9      	ldrb	r1, [r3, #3]
 80056e0:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	7a99      	ldrb	r1, [r3, #10]
 80056e6:	b909      	cbnz	r1, 80056ec <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 80056e8:	2002      	movs	r0, #2
}
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d1fb      	bne.n	80056e8 <Standard_SetInterface+0x18>
 80056f0:	7918      	ldrb	r0, [r3, #4]
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d1f8      	bne.n	80056e8 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 80056f6:	789d      	ldrb	r5, [r3, #2]
 80056f8:	2d00      	cmp	r5, #0
 80056fa:	d1f5      	bne.n	80056e8 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 80056fc:	4a07      	ldr	r2, [pc, #28]	; (800571c <Standard_SetInterface+0x4c>)
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	68d9      	ldr	r1, [r3, #12]
 8005702:	4788      	blx	r1
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8005704:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8005706:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8005708:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800570a:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800570c:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800570e:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8005710:	bd38      	pop	{r3, r4, r5, pc}
 8005712:	bf00      	nop
 8005714:	200016cc 	.word	0x200016cc
 8005718:	200016f4 	.word	0x200016f4
 800571c:	200016f0 	.word	0x200016f0

08005720 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8005720:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8005722:	4b35      	ldr	r3, [pc, #212]	; (80057f8 <Standard_ClearFeature+0xd8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005728:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800572c:	d003      	beq.n	8005736 <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800572e:	2802      	cmp	r0, #2
 8005730:	d006      	beq.n	8005740 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 8005732:	2002      	movs	r0, #2
}
 8005734:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8005736:	7a59      	ldrb	r1, [r3, #9]
 8005738:	f021 0220 	bic.w	r2, r1, #32
 800573c:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800573e:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8005740:	885a      	ldrh	r2, [r3, #2]
 8005742:	2a00      	cmp	r2, #0
 8005744:	d1f6      	bne.n	8005734 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8005746:	7919      	ldrb	r1, [r3, #4]
 8005748:	2900      	cmp	r1, #0
 800574a:	d1f3      	bne.n	8005734 <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 800574c:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 800574e:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8005752:	0081      	lsls	r1, r0, #2
 8005754:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8005758:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800575a:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800575e:	bf56      	itet	pl
 8005760:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8005762:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8005764:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8005768:	4c24      	ldr	r4, [pc, #144]	; (80057fc <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800576a:	bf48      	it	mi
 800576c:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8005770:	7824      	ldrb	r4, [r4, #0]
 8005772:	42a0      	cmp	r0, r4
 8005774:	d2dd      	bcs.n	8005732 <Standard_ClearFeature+0x12>
 8005776:	2d00      	cmp	r5, #0
 8005778:	d0db      	beq.n	8005732 <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 800577a:	7a9b      	ldrb	r3, [r3, #10]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0d8      	beq.n	8005732 <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8005780:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005784:	b2d3      	uxtb	r3, r2
 8005786:	b173      	cbz	r3, 80057a6 <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8005788:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800578c:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 8005790:	6813      	ldr	r3, [r2, #0]
 8005792:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8005796:	2910      	cmp	r1, #16
 8005798:	d021      	beq.n	80057de <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800579a:	4819      	ldr	r0, [pc, #100]	; (8005800 <Standard_ClearFeature+0xe0>)
 800579c:	6801      	ldr	r1, [r0, #0]
 800579e:	694a      	ldr	r2, [r1, #20]
 80057a0:	4790      	blx	r2
    return USB_SUCCESS;
 80057a2:	2000      	movs	r0, #0
 80057a4:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80057a6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80057aa:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 80057ae:	6822      	ldr	r2, [r4, #0]
 80057b0:	f402 5340 	and.w	r3, r2, #12288	; 0x3000
 80057b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b8:	d1ef      	bne.n	800579a <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 80057ba:	b9c8      	cbnz	r0, 80057f0 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 80057bc:	4a11      	ldr	r2, [pc, #68]	; (8005804 <Standard_ClearFeature+0xe4>)
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <Standard_ClearFeature+0xe8>)
 80057c0:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 80057c4:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 80057c6:	6820      	ldr	r0, [r4, #0]
 80057c8:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 80057cc:	4001      	ands	r1, r0
 80057ce:	f481 5240 	eor.w	r2, r1, #12288	; 0x3000
 80057d2:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80057d6:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 80057da:	6020      	str	r0, [r4, #0]
 80057dc:	e7dd      	b.n	800579a <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 80057de:	b2c4      	uxtb	r4, r0
 80057e0:	4620      	mov	r0, r4
 80057e2:	4a0a      	ldr	r2, [pc, #40]	; (800580c <Standard_ClearFeature+0xec>)
 80057e4:	4790      	blx	r2
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 80057e6:	4620      	mov	r0, r4
 80057e8:	2130      	movs	r1, #48	; 0x30
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <Standard_ClearFeature+0xf0>)
 80057ec:	4798      	blx	r3
 80057ee:	e7d4      	b.n	800579a <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 80057f0:	4908      	ldr	r1, [pc, #32]	; (8005814 <Standard_ClearFeature+0xf4>)
 80057f2:	4788      	blx	r1
 80057f4:	e7e7      	b.n	80057c6 <Standard_ClearFeature+0xa6>
 80057f6:	bf00      	nop
 80057f8:	200016f4 	.word	0x200016f4
 80057fc:	20000308 	.word	0x20000308
 8005800:	200016f0 	.word	0x200016f0
 8005804:	20000284 	.word	0x20000284
 8005808:	080061b9 	.word	0x080061b9
 800580c:	080060e9 	.word	0x080060e9
 8005810:	08005fdd 	.word	0x08005fdd
 8005814:	080060c5 	.word	0x080060c5

08005818 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8005818:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800581a:	4b22      	ldr	r3, [pc, #136]	; (80058a4 <Standard_SetEndPointFeature+0x8c>)
 800581c:	6819      	ldr	r1, [r3, #0]
 800581e:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 8005820:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8005824:	0090      	lsls	r0, r2, #2
 8005826:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 800582a:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800582c:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8005830:	bf56      	itet	pl
 8005832:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8005834:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8005836:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800583a:	4c1b      	ldr	r4, [pc, #108]	; (80058a8 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800583c:	bf48      	it	mi
 800583e:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8005842:	7824      	ldrb	r4, [r4, #0]
 8005844:	42a2      	cmp	r2, r4
 8005846:	d301      	bcc.n	800584c <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8005848:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 800584a:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 800584c:	884a      	ldrh	r2, [r1, #2]
 800584e:	2a00      	cmp	r2, #0
 8005850:	d1fa      	bne.n	8005848 <Standard_SetEndPointFeature+0x30>
 8005852:	2d00      	cmp	r5, #0
 8005854:	d0f8      	beq.n	8005848 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 8005856:	7a89      	ldrb	r1, [r1, #10]
 8005858:	2900      	cmp	r1, #0
 800585a:	d0f5      	beq.n	8005848 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8005860:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005864:	f500 42b8 	add.w	r2, r0, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8005868:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800586a:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800586c:	b17b      	cbz	r3, 800588e <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800586e:	f648 70bf 	movw	r0, #36799	; 0x8fbf
 8005872:	4008      	ands	r0, r1
 8005874:	f080 0110 	eor.w	r1, r0, #16
 8005878:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 800587c:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8005880:	6010      	str	r0, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8005882:	4a0a      	ldr	r2, [pc, #40]	; (80058ac <Standard_SetEndPointFeature+0x94>)
 8005884:	6811      	ldr	r1, [r2, #0]
 8005886:	698b      	ldr	r3, [r1, #24]
 8005888:	4798      	blx	r3
  return USB_SUCCESS;
 800588a:	2000      	movs	r0, #0
 800588c:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800588e:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8005892:	400b      	ands	r3, r1
 8005894:	f483 5080 	eor.w	r0, r3, #4096	; 0x1000
 8005898:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 800589c:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	e7ee      	b.n	8005882 <Standard_SetEndPointFeature+0x6a>
 80058a4:	200016f4 	.word	0x200016f4
 80058a8:	20000308 	.word	0x20000308
 80058ac:	200016f0 	.word	0x200016f0

080058b0 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 80058b0:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <Standard_GetDescriptorData+0x18>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 80058b6:	b110      	cbz	r0, 80058be <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 80058b8:	6808      	ldr	r0, [r1, #0]
 80058ba:	1880      	adds	r0, r0, r2
}
 80058bc:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 80058be:	8889      	ldrh	r1, [r1, #4]
 80058c0:	1a8a      	subs	r2, r1, r2
 80058c2:	821a      	strh	r2, [r3, #16]
    return 0;
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	200016f4 	.word	0x200016f4

080058cc <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 80058cc:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80058ce:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <Post0_Process+0x34>)
 80058d0:	2000      	movs	r0, #0
 80058d2:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80058d6:	4a0b      	ldr	r2, [pc, #44]	; (8005904 <Post0_Process+0x38>)
 80058d8:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 80058da:	480b      	ldr	r0, [pc, #44]	; (8005908 <Post0_Process+0x3c>)
 80058dc:	6801      	ldr	r1, [r0, #0]
 80058de:	7a08      	ldrb	r0, [r1, #8]
 80058e0:	2808      	cmp	r0, #8
 80058e2:	d106      	bne.n	80058f2 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 80058e4:	4b09      	ldr	r3, [pc, #36]	; (800590c <Post0_Process+0x40>)
 80058e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058ea:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 80058ec:	4a08      	ldr	r2, [pc, #32]	; (8005910 <Post0_Process+0x44>)
 80058ee:	2110      	movs	r1, #16
 80058f0:	8011      	strh	r1, [r2, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 80058f2:	f1b0 0c09 	subs.w	ip, r0, #9
 80058f6:	f1dc 0000 	rsbs	r0, ip, #0
 80058fa:	eb50 000c 	adcs.w	r0, r0, ip
 80058fe:	bd08      	pop	{r3, pc}
 8005900:	20000284 	.word	0x20000284
 8005904:	080061b9 	.word	0x080061b9
 8005908:	200016f4 	.word	0x200016f4
 800590c:	200016fa 	.word	0x200016fa
 8005910:	200016fc 	.word	0x200016fc

08005914 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 8005916:	4d33      	ldr	r5, [pc, #204]	; (80059e4 <Out0_Process+0xd0>)
 8005918:	682c      	ldr	r4, [r5, #0]
 800591a:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800591c:	2b02      	cmp	r3, #2
 800591e:	d007      	beq.n	8005930 <Out0_Process+0x1c>
 8005920:	2b04      	cmp	r3, #4
 8005922:	d005      	beq.n	8005930 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8005924:	2b03      	cmp	r3, #3
 8005926:	d008      	beq.n	800593a <Out0_Process+0x26>
 8005928:	2b05      	cmp	r3, #5
 800592a:	d006      	beq.n	800593a <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 800592c:	2b07      	cmp	r3, #7
 800592e:	d00d      	beq.n	800594c <Out0_Process+0x38>
 8005930:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8005932:	7222      	strb	r2, [r4, #8]

  return Post0_Process();
 8005934:	4b2c      	ldr	r3, [pc, #176]	; (80059e8 <Out0_Process+0xd4>)
 8005936:	4798      	blx	r3
 8005938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 800593a:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 800593c:	8a20      	ldrh	r0, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 800593e:	b311      	cbz	r1, 8005986 <Out0_Process+0x72>
 8005940:	b958      	cbnz	r0, 800595a <Out0_Process+0x46>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8005942:	8aa4      	ldrh	r4, [r4, #20]
 8005944:	2c00      	cmp	r4, #0
 8005946:	d045      	beq.n	80059d4 <Out0_Process+0xc0>
 8005948:	4a28      	ldr	r2, [pc, #160]	; (80059ec <Out0_Process+0xd8>)
 800594a:	e02e      	b.n	80059aa <Out0_Process+0x96>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 800594c:	4828      	ldr	r0, [pc, #160]	; (80059f0 <Out0_Process+0xdc>)
 800594e:	6801      	ldr	r1, [r0, #0]
 8005950:	68ca      	ldr	r2, [r1, #12]
 8005952:	4790      	blx	r2
 8005954:	682c      	ldr	r4, [r5, #0]
 8005956:	2208      	movs	r2, #8
 8005958:	e7eb      	b.n	8005932 <Out0_Process+0x1e>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 800595a:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800595c:	4286      	cmp	r6, r0
 800595e:	bf28      	it	cs
 8005960:	4606      	movcs	r6, r0
 8005962:	4630      	mov	r0, r6
 8005964:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8005966:	8a63      	ldrh	r3, [r4, #18]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8005968:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800596a:	8a20      	ldrh	r0, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800596c:	18f1      	adds	r1, r6, r3
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 800596e:	1b82      	subs	r2, r0, r6
 8005970:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8005972:	8261      	strh	r1, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8005974:	4b1f      	ldr	r3, [pc, #124]	; (80059f4 <Out0_Process+0xe0>)
 8005976:	2000      	movs	r0, #0
 8005978:	4798      	blx	r3
 800597a:	4632      	mov	r2, r6
 800597c:	4601      	mov	r1, r0
 800597e:	4b1e      	ldr	r3, [pc, #120]	; (80059f8 <Out0_Process+0xe4>)
 8005980:	4638      	mov	r0, r7
 8005982:	4798      	blx	r3
 8005984:	8a20      	ldrh	r0, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8005986:	2800      	cmp	r0, #0
 8005988:	d0db      	beq.n	8005942 <Out0_Process+0x2e>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800598a:	4b1c      	ldr	r3, [pc, #112]	; (80059fc <Out0_Process+0xe8>)
    SetEPTxCount(ENDP0, 0);
 800598c:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800598e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8005992:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8005994:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8005996:	4a1a      	ldr	r2, [pc, #104]	; (8005a00 <Out0_Process+0xec>)
 8005998:	4790      	blx	r2
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800599a:	8a23      	ldrh	r3, [r4, #16]
 800599c:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800599e:	4a13      	ldr	r2, [pc, #76]	; (80059ec <Out0_Process+0xd8>)
 80059a0:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80059a2:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80059a4:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80059a6:	d915      	bls.n	80059d4 <Out0_Process+0xc0>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 80059a8:	b9c3      	cbnz	r3, 80059dc <Out0_Process+0xc8>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80059aa:	682c      	ldr	r4, [r5, #0]
 80059ac:	2106      	movs	r1, #6
      USB_StatusIn();
 80059ae:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80059b2:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 80059b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80059be:	b281      	uxth	r1, r0
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 80059c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059c4:	18c8      	adds	r0, r1, r3
 80059c6:	0043      	lsls	r3, r0, #1
 80059c8:	2100      	movs	r1, #0
 80059ca:	6019      	str	r1, [r3, #0]
 80059cc:	2030      	movs	r0, #48	; 0x30
 80059ce:	8010      	strh	r0, [r2, #0]
 80059d0:	7a22      	ldrb	r2, [r4, #8]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 80059d2:	e7ae      	b.n	8005932 <Out0_Process+0x1e>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 80059d4:	682c      	ldr	r4, [r5, #0]
 80059d6:	2203      	movs	r2, #3
 80059d8:	7222      	strb	r2, [r4, #8]
 80059da:	e7aa      	b.n	8005932 <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 80059dc:	682c      	ldr	r4, [r5, #0]
 80059de:	2205      	movs	r2, #5
 80059e0:	7222      	strb	r2, [r4, #8]
 80059e2:	e7a6      	b.n	8005932 <Out0_Process+0x1e>
 80059e4:	200016f4 	.word	0x200016f4
 80059e8:	080058cd 	.word	0x080058cd
 80059ec:	200016fc 	.word	0x200016fc
 80059f0:	200016cc 	.word	0x200016cc
 80059f4:	08006179 	.word	0x08006179
 80059f8:	08005f61 	.word	0x08005f61
 80059fc:	200016fa 	.word	0x200016fa
 8005a00:	08006199 	.word	0x08006199

08005a04 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8005a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8005a06:	f645 4350 	movw	r3, #23632	; 0x5c50

  if (pInformation->ControlState != PAUSE)
 8005a0a:	4d9e      	ldr	r5, [pc, #632]	; (8005c84 <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8005a0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005a10:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8005a12:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8005a14:	f243 0004 	movw	r0, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8005a18:	b291      	uxth	r1, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8005a1a:	f2c2 0000 	movt	r0, #8192	; 0x2000

  if (pInformation->ControlState != PAUSE)
 8005a1e:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8005a20:	180e      	adds	r6, r1, r0
 8005a22:	0073      	lsls	r3, r6, #1

  if (pInformation->ControlState != PAUSE)
 8005a24:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8005a26:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8005a28:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8005a2a:	d044      	beq.n	8005ab6 <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8005a2c:	b2b7      	uxth	r7, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8005a2e:	0078      	lsls	r0, r7, #1
 8005a30:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 8005a34:	f501 46c0 	add.w	r6, r1, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8005a38:	7832      	ldrb	r2, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8005a3a:	4f93      	ldr	r7, [pc, #588]	; (8005c88 <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8005a3c:	7022      	strb	r2, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8005a3e:	7873      	ldrb	r3, [r6, #1]
 8005a40:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8005a42:	88b0      	ldrh	r0, [r6, #4]
 8005a44:	47b8      	blx	r7
 8005a46:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8005a48:	8930      	ldrh	r0, [r6, #8]
 8005a4a:	682c      	ldr	r4, [r5, #0]
 8005a4c:	47b8      	blx	r7
 8005a4e:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8005a50:	89b0      	ldrh	r0, [r6, #12]
 8005a52:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 8005a54:	2101      	movs	r1, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8005a56:	80e0      	strh	r0, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8005a58:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d030      	beq.n	8005ac0 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 8005a5e:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8005a60:	2906      	cmp	r1, #6
 8005a62:	f000 8087 	beq.w	8005b74 <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8005a66:	2900      	cmp	r1, #0
 8005a68:	d15e      	bne.n	8005b28 <Setup0_Process+0x124>
 8005a6a:	8863      	ldrh	r3, [r4, #2]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 8094 	beq.w	8005b9a <Setup0_Process+0x196>
 8005a72:	4e86      	ldr	r6, [pc, #536]	; (8005c8c <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8005a74:	6833      	ldr	r3, [r6, #0]
 8005a76:	4608      	mov	r0, r1
 8005a78:	6919      	ldr	r1, [r3, #16]
 8005a7a:	4788      	blx	r1
    if (Result == USB_NOT_READY)
 8005a7c:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 8005a7e:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 8005a80:	d062      	beq.n	8005b48 <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8005a82:	8a1a      	ldrh	r2, [r3, #16]
 8005a84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005a88:	428a      	cmp	r2, r1
 8005a8a:	d05d      	beq.n	8005b48 <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8005a8c:	2802      	cmp	r0, #2
 8005a8e:	d00c      	beq.n	8005aaa <Setup0_Process+0xa6>
 8005a90:	b15a      	cbz	r2, 8005aaa <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8005a92:	f993 1000 	ldrsb.w	r1, [r3]
 8005a96:	2900      	cmp	r1, #0
 8005a98:	f2c0 80b5 	blt.w	8005c06 <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8005aa0:	4b7b      	ldr	r3, [pc, #492]	; (8005c90 <Setup0_Process+0x28c>)
 8005aa2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8005aa6:	8018      	strh	r0, [r3, #0]
 8005aa8:	e001      	b.n	8005aae <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8005aaa:	2008      	movs	r0, #8
 8005aac:	7218      	strb	r0, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8005aae:	4b79      	ldr	r3, [pc, #484]	; (8005c94 <Setup0_Process+0x290>)
 8005ab0:	4798      	blx	r3
}
 8005ab2:	b003      	add	sp, #12
 8005ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab6:	88e0      	ldrh	r0, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8005ab8:	2101      	movs	r1, #1
 8005aba:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d1ce      	bne.n	8005a5e <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005ac0:	7822      	ldrb	r2, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8005ac2:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005ac4:	f012 037f 	ands.w	r3, r2, #127	; 0x7f
 8005ac8:	d141      	bne.n	8005b4e <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8005aca:	2e09      	cmp	r6, #9
 8005acc:	f000 8108 	beq.w	8005ce0 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8005ad0:	2e05      	cmp	r6, #5
 8005ad2:	f000 80bf 	beq.w	8005c54 <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8005ad6:	2e03      	cmp	r6, #3
 8005ad8:	f000 80f0 	beq.w	8005cbc <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8005adc:	2e01      	cmp	r6, #1
 8005ade:	d13b      	bne.n	8005b58 <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8005ae0:	78e1      	ldrb	r1, [r4, #3]
 8005ae2:	2901      	cmp	r1, #1
 8005ae4:	d138      	bne.n	8005b58 <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 8005ae6:	88a2      	ldrh	r2, [r4, #4]
 8005ae8:	2a00      	cmp	r2, #0
 8005aea:	d135      	bne.n	8005b58 <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 8005aec:	7a63      	ldrb	r3, [r4, #9]
 8005aee:	f003 0420 	and.w	r4, r3, #32
 8005af2:	b2e0      	uxtb	r0, r4
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d02f      	beq.n	8005b58 <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8005af8:	4967      	ldr	r1, [pc, #412]	; (8005c98 <Setup0_Process+0x294>)
 8005afa:	4788      	blx	r1
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8005afc:	bb60      	cbnz	r0, 8005b58 <Setup0_Process+0x154>
 8005afe:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8005b00:	f645 4050 	movw	r0, #23632	; 0x5c50
 8005b04:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005b08:	6801      	ldr	r1, [r0, #0]
 8005b0a:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8005b0e:	b28a      	uxth	r2, r1
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8005b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b14:	18d0      	adds	r0, r2, r3
 8005b16:	0041      	lsls	r1, r0, #1
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4a60      	ldr	r2, [pc, #384]	; (8005c9c <Setup0_Process+0x298>)
 8005b1c:	600b      	str	r3, [r1, #0]
 8005b1e:	2030      	movs	r0, #48	; 0x30
 8005b20:	2106      	movs	r1, #6
 8005b22:	8010      	strh	r0, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8005b24:	7221      	strb	r1, [r4, #8]
 8005b26:	e7c2      	b.n	8005aae <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8005b28:	2908      	cmp	r1, #8
 8005b2a:	d148      	bne.n	8005bbe <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005b2c:	7820      	ldrb	r0, [r4, #0]
 8005b2e:	0643      	lsls	r3, r0, #25
 8005b30:	d19f      	bne.n	8005a72 <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 8005b32:	4a5b      	ldr	r2, [pc, #364]	; (8005ca0 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8005b34:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8005b36:	61a2      	str	r2, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8005b38:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8005b3a:	4790      	blx	r2
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005b42:	8a1a      	ldrh	r2, [r3, #16]
 8005b44:	4282      	cmp	r2, r0
 8005b46:	d1a3      	bne.n	8005a90 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8005b48:	2109      	movs	r1, #9
 8005b4a:	7219      	strb	r1, [r3, #8]
 8005b4c:	e7af      	b.n	8005aae <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d071      	beq.n	8005c36 <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	f000 808d 	beq.w	8005c72 <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8005b58:	494c      	ldr	r1, [pc, #304]	; (8005c8c <Setup0_Process+0x288>)
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	680a      	ldr	r2, [r1, #0]
 8005b5e:	6953      	ldr	r3, [r2, #20]
 8005b60:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8005b62:	2803      	cmp	r0, #3
 8005b64:	f000 80c5 	beq.w	8005cf2 <Setup0_Process+0x2ee>
 8005b68:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d0c8      	beq.n	8005b00 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 8005b6e:	2108      	movs	r1, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8005b70:	7221      	strb	r1, [r4, #8]
 8005b72:	e79c      	b.n	8005aae <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005b74:	7826      	ldrb	r6, [r4, #0]
 8005b76:	0673      	lsls	r3, r6, #25
 8005b78:	f47f af7b 	bne.w	8005a72 <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8005b7c:	78a2      	ldrb	r2, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8005b7e:	4e43      	ldr	r6, [pc, #268]	; (8005c8c <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 8005b80:	2a01      	cmp	r2, #1
 8005b82:	f000 80b0 	beq.w	8005ce6 <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8005b86:	2a02      	cmp	r2, #2
 8005b88:	d05e      	beq.n	8005c48 <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8005b8a:	2a03      	cmp	r2, #3
 8005b8c:	f47f af72 	bne.w	8005a74 <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8005b90:	6830      	ldr	r0, [r6, #0]
 8005b92:	6a42      	ldr	r2, [r0, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8005b94:	2a00      	cmp	r2, #0
 8005b96:	d1cd      	bne.n	8005b34 <Setup0_Process+0x130>
 8005b98:	e76c      	b.n	8005a74 <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8005b9a:	6860      	ldr	r0, [r4, #4]
 8005b9c:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8005ba0:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8005ba4:	f47f af65 	bne.w	8005a72 <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005ba8:	7823      	ldrb	r3, [r4, #0]
 8005baa:	f013 007f 	ands.w	r0, r3, #127	; 0x7f
 8005bae:	f040 80a4 	bne.w	8005cfa <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 8005bb2:	88a3      	ldrh	r3, [r4, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f47f af5c 	bne.w	8005a72 <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8005bba:	4a3a      	ldr	r2, [pc, #232]	; (8005ca4 <Setup0_Process+0x2a0>)
 8005bbc:	e7ba      	b.n	8005b34 <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8005bbe:	290a      	cmp	r1, #10
 8005bc0:	f47f af57 	bne.w	8005a72 <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8005bc4:	7826      	ldrb	r6, [r4, #0]
 8005bc6:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8005bca:	2a01      	cmp	r2, #1
 8005bcc:	f47f af51 	bne.w	8005a72 <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8005bd0:	7aa3      	ldrb	r3, [r4, #10]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f43f af4d 	beq.w	8005a72 <Setup0_Process+0x6e>
 8005bd8:	8863      	ldrh	r3, [r4, #2]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f47f af49 	bne.w	8005a72 <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8005be0:	6860      	ldr	r0, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8005be2:	4e2a      	ldr	r6, [pc, #168]	; (8005c8c <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8005be4:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8005be8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005bec:	f47f af42 	bne.w	8005a74 <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8005bf0:	6832      	ldr	r2, [r6, #0]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	7960      	ldrb	r0, [r4, #5]
 8005bf6:	6993      	ldr	r3, [r2, #24]
 8005bf8:	4798      	blx	r3
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	f040 80b8 	bne.w	8005d70 <Setup0_Process+0x36c>
 8005c00:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8005c02:	4a29      	ldr	r2, [pc, #164]	; (8005ca8 <Setup0_Process+0x2a4>)
 8005c04:	e796      	b.n	8005b34 <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8005c06:	88d9      	ldrh	r1, [r3, #6]
 8005c08:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8005c0a:	9801      	ldr	r0, [sp, #4]
 8005c0c:	4282      	cmp	r2, r0
 8005c0e:	d817      	bhi.n	8005c40 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8005c10:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8005c12:	491e      	ldr	r1, [pc, #120]	; (8005c8c <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8005c14:	d208      	bcs.n	8005c28 <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8005c16:	6808      	ldr	r0, [r1, #0]
 8005c18:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8005c1c:	4282      	cmp	r2, r0
 8005c1e:	f080 808f 	bcs.w	8005d40 <Setup0_Process+0x33c>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8005c22:	4a22      	ldr	r2, [pc, #136]	; (8005cac <Setup0_Process+0x2a8>)
 8005c24:	2000      	movs	r0, #0
 8005c26:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8005c28:	6809      	ldr	r1, [r1, #0]
 8005c2a:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 8005c2e:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8005c30:	4b1f      	ldr	r3, [pc, #124]	; (8005cb0 <Setup0_Process+0x2ac>)
 8005c32:	4798      	blx	r3
 8005c34:	e73b      	b.n	8005aae <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8005c36:	2e0b      	cmp	r6, #11
 8005c38:	d18e      	bne.n	8005b58 <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 8005c3a:	481e      	ldr	r0, [pc, #120]	; (8005cb4 <Setup0_Process+0x2b0>)
 8005c3c:	4780      	blx	r0
 8005c3e:	e75d      	b.n	8005afc <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8005c40:	9801      	ldr	r0, [sp, #4]
 8005c42:	4912      	ldr	r1, [pc, #72]	; (8005c8c <Setup0_Process+0x288>)
 8005c44:	8218      	strh	r0, [r3, #16]
 8005c46:	e7ef      	b.n	8005c28 <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8005c48:	6833      	ldr	r3, [r6, #0]
 8005c4a:	6a1a      	ldr	r2, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	f47f af71 	bne.w	8005b34 <Setup0_Process+0x130>
 8005c52:	e70f      	b.n	8005a74 <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8005c54:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	db88      	blt.n	8005b6e <Setup0_Process+0x16a>
 8005c5c:	78a1      	ldrb	r1, [r4, #2]
 8005c5e:	2900      	cmp	r1, #0
 8005c60:	d185      	bne.n	8005b6e <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 8005c62:	88a2      	ldrh	r2, [r4, #4]
 8005c64:	2a00      	cmp	r2, #0
 8005c66:	d182      	bne.n	8005b6e <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 8005c68:	7aa3      	ldrb	r3, [r4, #10]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f43f af48 	beq.w	8005b00 <Setup0_Process+0xfc>
 8005c70:	e77d      	b.n	8005b6e <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8005c72:	2e01      	cmp	r6, #1
 8005c74:	f43f af40 	beq.w	8005af8 <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8005c78:	2e03      	cmp	r6, #3
 8005c7a:	f47f af6d 	bne.w	8005b58 <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 8005c7e:	4c0e      	ldr	r4, [pc, #56]	; (8005cb8 <Setup0_Process+0x2b4>)
 8005c80:	47a0      	blx	r4
 8005c82:	e73b      	b.n	8005afc <Setup0_Process+0xf8>
 8005c84:	200016f4 	.word	0x200016f4
 8005c88:	08006221 	.word	0x08006221
 8005c8c:	200016cc 	.word	0x200016cc
 8005c90:	200016fa 	.word	0x200016fa
 8005c94:	080058cd 	.word	0x080058cd
 8005c98:	08005721 	.word	0x08005721
 8005c9c:	200016fc 	.word	0x200016fc
 8005ca0:	080054e5 	.word	0x080054e5
 8005ca4:	08005535 	.word	0x08005535
 8005ca8:	0800550d 	.word	0x0800550d
 8005cac:	200004b8 	.word	0x200004b8
 8005cb0:	080055d5 	.word	0x080055d5
 8005cb4:	080056d1 	.word	0x080056d1
 8005cb8:	08005819 	.word	0x08005819
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8005cbc:	78e2      	ldrb	r2, [r4, #3]
 8005cbe:	2a01      	cmp	r2, #1
 8005cc0:	f47f af4a 	bne.w	8005b58 <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 8005cc4:	88a3      	ldrh	r3, [r4, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f47f af46 	bne.w	8005b58 <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8005ccc:	7a60      	ldrb	r0, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8005cce:	4a2a      	ldr	r2, [pc, #168]	; (8005d78 <Setup0_Process+0x374>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8005cd0:	f040 0120 	orr.w	r1, r0, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8005cd4:	6813      	ldr	r3, [r2, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8005cd6:	7261      	strb	r1, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8005cd8:	69dc      	ldr	r4, [r3, #28]
 8005cda:	47a0      	blx	r4
 8005cdc:	682c      	ldr	r4, [r5, #0]
 8005cde:	e70f      	b.n	8005b00 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8005ce0:	4c26      	ldr	r4, [pc, #152]	; (8005d7c <Setup0_Process+0x378>)
 8005ce2:	47a0      	blx	r4
 8005ce4:	e70a      	b.n	8005afc <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8005ce6:	6832      	ldr	r2, [r6, #0]
 8005ce8:	69d2      	ldr	r2, [r2, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8005cea:	2a00      	cmp	r2, #0
 8005cec:	f47f af22 	bne.w	8005b34 <Setup0_Process+0x130>
 8005cf0:	e6c0      	b.n	8005a74 <Setup0_Process+0x70>
 8005cf2:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 8005cf4:	2109      	movs	r1, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8005cf6:	7221      	strb	r1, [r4, #8]
 8005cf8:	e6d9      	b.n	8005aae <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8005cfa:	2801      	cmp	r0, #1
 8005cfc:	d02b      	beq.n	8005d56 <Setup0_Process+0x352>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8005cfe:	2802      	cmp	r0, #2
 8005d00:	f47f aeb7 	bne.w	8005a72 <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8005d04:	7963      	ldrb	r3, [r4, #5]
 8005d06:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8005d0a:	0096      	lsls	r6, r2, #2
 8005d0c:	f106 4080 	add.w	r0, r6, #1073741824	; 0x40000000
 8005d10:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8005d14:	061e      	lsls	r6, r3, #24
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8005d16:	bf56      	itet	pl
 8005d18:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8005d1a:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8005d1c:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8005d20:	4817      	ldr	r0, [pc, #92]	; (8005d80 <Setup0_Process+0x37c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8005d22:	bf48      	it	mi
 8005d24:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8005d28:	7800      	ldrb	r0, [r0, #0]
 8005d2a:	4282      	cmp	r2, r0
 8005d2c:	f4bf aea1 	bcs.w	8005a72 <Setup0_Process+0x6e>
 8005d30:	f013 0f70 	tst.w	r3, #112	; 0x70
 8005d34:	f47f ae9d 	bne.w	8005a72 <Setup0_Process+0x6e>
          && (Status != 0))
 8005d38:	2e00      	cmp	r6, #0
 8005d3a:	f47f af3e 	bne.w	8005bba <Setup0_Process+0x1b6>
 8005d3e:	e698      	b.n	8005a72 <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8005d40:	fb92 f4f0 	sdiv	r4, r2, r0
 8005d44:	fb00 2214 	mls	r2, r0, r4, r2
 8005d48:	2a00      	cmp	r2, #0
 8005d4a:	f47f af6d 	bne.w	8005c28 <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8005d4e:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <Setup0_Process+0x380>)
 8005d50:	2001      	movs	r0, #1
 8005d52:	7010      	strb	r0, [r2, #0]
 8005d54:	e768      	b.n	8005c28 <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8005d56:	4e0c      	ldr	r6, [pc, #48]	; (8005d88 <Setup0_Process+0x384>)
 8005d58:	7960      	ldrb	r0, [r4, #5]
 8005d5a:	6833      	ldr	r3, [r6, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	4790      	blx	r2
 8005d60:	b930      	cbnz	r0, 8005d70 <Setup0_Process+0x36c>
          && (pInformation->Current_Configuration != 0))
 8005d62:	682c      	ldr	r4, [r5, #0]
 8005d64:	7aa0      	ldrb	r0, [r4, #10]
 8005d66:	2800      	cmp	r0, #0
 8005d68:	f47f af27 	bne.w	8005bba <Setup0_Process+0x1b6>
 8005d6c:	7861      	ldrb	r1, [r4, #1]
 8005d6e:	e681      	b.n	8005a74 <Setup0_Process+0x70>
 8005d70:	6829      	ldr	r1, [r5, #0]
 8005d72:	7849      	ldrb	r1, [r1, #1]
 8005d74:	e67e      	b.n	8005a74 <Setup0_Process+0x70>
 8005d76:	bf00      	nop
 8005d78:	200016f0 	.word	0x200016f0
 8005d7c:	08005695 	.word	0x08005695
 8005d80:	20000308 	.word	0x20000308
 8005d84:	200004b8 	.word	0x200004b8
 8005d88:	200016cc 	.word	0x200016cc

08005d8c <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8005d8c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8005d8e:	4b28      	ldr	r3, [pc, #160]	; (8005e30 <SetDeviceAddress+0xa4>)
 8005d90:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005d92:	2e00      	cmp	r6, #0
 8005d94:	d043      	beq.n	8005e1e <SetDeviceAddress+0x92>
 8005d96:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8005d9a:	f2c4 0200 	movt	r2, #16384	; 0x4000
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005d9e:	6814      	ldr	r4, [r2, #0]
 8005da0:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005da4:	4021      	ands	r1, r4
 8005da6:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8005daa:	f043 0180 	orr.w	r1, r3, #128	; 0x80
 8005dae:	6011      	str	r1, [r2, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005db0:	2201      	movs	r2, #1
 8005db2:	1e74      	subs	r4, r6, #1
 8005db4:	f645 4304 	movw	r3, #23556	; 0x5c04
 8005db8:	4296      	cmp	r6, r2
 8005dba:	f004 0401 	and.w	r4, r4, #1
 8005dbe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005dc2:	d92c      	bls.n	8005e1e <SetDeviceAddress+0x92>
 8005dc4:	b17c      	cbz	r4, 8005de6 <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005dc6:	6819      	ldr	r1, [r3, #0]
 8005dc8:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005dcc:	400a      	ands	r2, r1
 8005dce:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8005dd2:	f041 0281 	orr.w	r2, r1, #129	; 0x81
 8005dd6:	601a      	str	r2, [r3, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005dd8:	2202      	movs	r2, #2
 8005dda:	f645 4308 	movw	r3, #23560	; 0x5c08
 8005dde:	4296      	cmp	r6, r2
 8005de0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005de4:	d91b      	bls.n	8005e1e <SetDeviceAddress+0x92>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005de6:	681f      	ldr	r7, [r3, #0]
 8005de8:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8005dec:	f640 740f 	movw	r4, #3855	; 0xf0f
 8005df0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005df4:	403c      	ands	r4, r7
 8005df6:	ea45 0704 	orr.w	r7, r5, r4
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	f841 7b04 	str.w	r7, [r1], #4
 8005e00:	685f      	ldr	r7, [r3, #4]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005e02:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005e04:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8005e08:	f640 740f 	movw	r4, #3855	; 0xf0f
 8005e0c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005e10:	403c      	ands	r4, r7
 8005e12:	432c      	orrs	r4, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005e14:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005e16:	605c      	str	r4, [r3, #4]
 8005e18:	1d0b      	adds	r3, r1, #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005e1a:	4296      	cmp	r6, r2
 8005e1c:	d8e3      	bhi.n	8005de6 <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8005e1e:	f645 434c 	movw	r3, #23628	; 0x5c4c
 8005e22:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8005e26:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005e2a:	6018      	str	r0, [r3, #0]
}
 8005e2c:	bcf0      	pop	{r4, r5, r6, r7}
 8005e2e:	4770      	bx	lr
 8005e30:	20000308 	.word	0x20000308

08005e34 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8005e34:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8005e36:	4c14      	ldr	r4, [pc, #80]	; (8005e88 <In0_Process+0x54>)
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8005e3c:	2a02      	cmp	r2, #2
 8005e3e:	d012      	beq.n	8005e66 <In0_Process+0x32>
 8005e40:	2a04      	cmp	r2, #4
 8005e42:	d010      	beq.n	8005e66 <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8005e44:	2a06      	cmp	r2, #6
 8005e46:	d004      	beq.n	8005e52 <In0_Process+0x1e>
 8005e48:	2008      	movs	r0, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8005e4a:	7218      	strb	r0, [r3, #8]

  return Post0_Process();
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <In0_Process+0x58>)
 8005e4e:	4798      	blx	r3
}
 8005e50:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8005e52:	7859      	ldrb	r1, [r3, #1]
 8005e54:	2905      	cmp	r1, #5
 8005e56:	d00b      	beq.n	8005e70 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8005e58:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <In0_Process+0x5c>)
 8005e5a:	6818      	ldr	r0, [r3, #0]
 8005e5c:	6881      	ldr	r1, [r0, #8]
 8005e5e:	4788      	blx	r1
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	2008      	movs	r0, #8
 8005e64:	e7f1      	b.n	8005e4a <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8005e66:	4a0b      	ldr	r2, [pc, #44]	; (8005e94 <In0_Process+0x60>)
 8005e68:	4790      	blx	r2
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	7a18      	ldrb	r0, [r3, #8]
 8005e6e:	e7ec      	b.n	8005e4a <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8005e70:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8005e72:	0652      	lsls	r2, r2, #25
 8005e74:	d1f0      	bne.n	8005e58 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8005e76:	78d8      	ldrb	r0, [r3, #3]
 8005e78:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <In0_Process+0x64>)
 8005e7a:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8005e7c:	4807      	ldr	r0, [pc, #28]	; (8005e9c <In0_Process+0x68>)
 8005e7e:	6801      	ldr	r1, [r0, #0]
 8005e80:	6a0a      	ldr	r2, [r1, #32]
 8005e82:	4790      	blx	r2
 8005e84:	e7e8      	b.n	8005e58 <In0_Process+0x24>
 8005e86:	bf00      	nop
 8005e88:	200016f4 	.word	0x200016f4
 8005e8c:	080058cd 	.word	0x080058cd
 8005e90:	200016cc 	.word	0x200016cc
 8005e94:	080055d5 	.word	0x080055d5
 8005e98:	08005d8d 	.word	0x08005d8d
 8005e9c:	200016f0 	.word	0x200016f0

08005ea0 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop

08005ea4 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8005ea4:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 8005ea6:	f241 62d4 	movw	r2, #5844	; 0x16d4
 8005eaa:	f241 64f4 	movw	r4, #5876	; 0x16f4
 8005eae:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005eb2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005eb6:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 8005eb8:	2402      	movs	r4, #2
 8005eba:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 8005ebc:	f241 60cc 	movw	r0, #5836	; 0x16cc
 8005ec0:	f240 2384 	movw	r3, #644	; 0x284
  pUser_Standard_Requests = &User_Standard_Requests;
 8005ec4:	f241 61f0 	movw	r1, #5872	; 0x16f0
 8005ec8:	f240 22b4 	movw	r2, #692	; 0x2b4
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8005ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ed0:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 8005ed4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005ed8:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8005edc:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8005ede:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	4780      	blx	r0
 8005ee4:	bd10      	pop	{r4, pc}
 8005ee6:	bf00      	nop

08005ee8 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8005ee8:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8005eec:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8005ef0:	1c53      	adds	r3, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8005ef2:	004a      	lsls	r2, r1, #1
  for (i = n; i != 0; i--)
 8005ef4:	1059      	asrs	r1, r3, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ef6:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005ef8:	d02f      	beq.n	8005f5a <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005efa:	7845      	ldrb	r5, [r0, #1]
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8005efc:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005efe:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8005f02:	3901      	subs	r1, #1
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005f04:	ea44 2305 	orr.w	r3, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8005f08:	f822 3b04 	strh.w	r3, [r2], #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	3204      	adds	r2, #4
 8005f10:	f001 0101 	and.w	r1, r1, #1
 8005f14:	3002      	adds	r0, #2
 8005f16:	b303      	cbz	r3, 8005f5a <UserToPMABufferCopy+0x72>
 8005f18:	b159      	cbz	r1, 8005f32 <UserToPMABufferCopy+0x4a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005f1a:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005f1e:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8005f22:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005f24:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8005f28:	f822 1c04 	strh.w	r1, [r2, #-4]
 8005f2c:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	d013      	beq.n	8005f5a <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005f32:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005f36:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8005f3a:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8005f3e:	f822 4c04 	strh.w	r4, [r2, #-4]
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005f42:	7844      	ldrb	r4, [r0, #1]
 8005f44:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005f46:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8005f4a:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005f4c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8005f50:	f822 1b04 	strh.w	r1, [r2], #4
 8005f54:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005f56:	3b02      	subs	r3, #2
 8005f58:	d1eb      	bne.n	8005f32 <UserToPMABufferCopy+0x4a>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8005f5a:	bc30      	pop	{r4, r5}
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop

08005f60 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8005f60:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8005f64:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8005f68:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8005f6a:	0059      	lsls	r1, r3, #1
  for (i = n; i != 0; i--)
 8005f6c:	1052      	asrs	r2, r2, #1
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f6e:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005f70:	d01c      	beq.n	8005fac <PMAToUserBufferCopy+0x4c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8005f72:	680b      	ldr	r3, [r1, #0]
 8005f74:	3a01      	subs	r2, #1
 8005f76:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	3002      	adds	r0, #2
 8005f7e:	f002 0201 	and.w	r2, r2, #1
 8005f82:	b19b      	cbz	r3, 8005fac <PMAToUserBufferCopy+0x4c>
 8005f84:	b132      	cbz	r2, 8005f94 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8005f86:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8005f8a:	f820 2c02 	strh.w	r2, [r0, #-2]
 8005f8e:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005f90:	3b01      	subs	r3, #1
 8005f92:	d00b      	beq.n	8005fac <PMAToUserBufferCopy+0x4c>
 8005f94:	1d0c      	adds	r4, r1, #4
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8005f96:	684d      	ldr	r5, [r1, #4]
 8005f98:	6889      	ldr	r1, [r1, #8]
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	f820 5c02 	strh.w	r5, [r0, #-2]
 8005fa0:	f822 1b02 	strh.w	r1, [r2], #2
 8005fa4:	1c90      	adds	r0, r2, #2
 8005fa6:	1d21      	adds	r1, r4, #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005fa8:	3b02      	subs	r3, #2
 8005faa:	d1f3      	bne.n	8005f94 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8005fac:	bc30      	pop	{r4, r5}
 8005fae:	4770      	bx	lr

08005fb0 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8005fb0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8005fb4:	f645 4250 	movw	r2, #23632	; 0x5c50
 8005fb8:	4003      	ands	r3, r0
 8005fba:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop

08005fc4 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8005fc4:	0080      	lsls	r0, r0, #2
 8005fc6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005fca:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8005fce:	6810      	ldr	r0, [r2, #0]
 8005fd0:	f648 138f 	movw	r3, #35215	; 0x898f
 8005fd4:	4003      	ands	r3, r0
 8005fd6:	4319      	orrs	r1, r3
 8005fd8:	6011      	str	r1, [r2, #0]
 8005fda:	4770      	bx	lr

08005fdc <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8005fdc:	0080      	lsls	r0, r0, #2
 8005fde:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005fe2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8005fe6:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8005fe8:	f001 0010 	and.w	r0, r1, #16
 8005fec:	6814      	ldr	r4, [r2, #0]
 8005fee:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8005ff2:	b280      	uxth	r0, r0
 8005ff4:	4023      	ands	r3, r4
 8005ff6:	b968      	cbnz	r0, 8006014 <SetEPTxStatus+0x38>
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	f001 0120 	and.w	r1, r1, #32
 8005ffe:	b288      	uxth	r0, r1
 8006000:	b108      	cbz	r0, 8006006 <SetEPTxStatus+0x2a>
 8006002:	f083 0320 	eor.w	r3, r3, #32
 8006006:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800600a:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 800600e:	6010      	str	r0, [r2, #0]
}
 8006010:	bc10      	pop	{r4}
 8006012:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8006014:	f083 0310 	eor.w	r3, r3, #16
 8006018:	e7ef      	b.n	8005ffa <SetEPTxStatus+0x1e>
 800601a:	bf00      	nop

0800601c <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800601c:	0080      	lsls	r0, r0, #2
 800601e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8006022:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8006026:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8006028:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 800602c:	6814      	ldr	r4, [r2, #0]
 800602e:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8006032:	b280      	uxth	r0, r0
 8006034:	4023      	ands	r3, r4
 8006036:	b968      	cbnz	r0, 8006054 <SetEPRxStatus+0x38>
 8006038:	b29b      	uxth	r3, r3
 800603a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800603e:	b288      	uxth	r0, r1
 8006040:	b108      	cbz	r0, 8006046 <SetEPRxStatus+0x2a>
 8006042:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006046:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800604a:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 800604e:	6010      	str	r0, [r2, #0]
}
 8006050:	bc10      	pop	{r4}
 8006052:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8006054:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006058:	e7ef      	b.n	800603a <SetEPRxStatus+0x1e>
 800605a:	bf00      	nop

0800605c <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800605c:	0080      	lsls	r0, r0, #2
 800605e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8006062:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8006066:	6801      	ldr	r1, [r0, #0]
 8006068:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800606c:	400b      	ands	r3, r1
 800606e:	f083 0230 	eor.w	r2, r3, #48	; 0x30
 8006072:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8006076:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 800607a:	6003      	str	r3, [r0, #0]
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop

08006080 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8006080:	0080      	lsls	r0, r0, #2
 8006082:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8006086:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 800608a:	6801      	ldr	r1, [r0, #0]
 800608c:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8006090:	400b      	ands	r3, r1
 8006092:	f483 5240 	eor.w	r2, r3, #12288	; 0x3000
 8006096:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 800609a:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 800609e:	6003      	str	r3, [r0, #0]
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop

080060a4 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 80060a4:	0080      	lsls	r0, r0, #2
 80060a6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80060aa:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 80060ae:	6801      	ldr	r1, [r0, #0]
 80060b0:	f640 630f 	movw	r3, #3599	; 0xe0f
 80060b4:	400b      	ands	r3, r1
 80060b6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80060ba:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 80060be:	6001      	str	r1, [r0, #0]
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop

080060c4 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 80060c4:	0080      	lsls	r0, r0, #2
 80060c6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80060ca:	f503 40b8 	add.w	r0, r3, #23552	; 0x5c00
 80060ce:	6802      	ldr	r2, [r0, #0]
 80060d0:	0451      	lsls	r1, r2, #17
 80060d2:	d508      	bpl.n	80060e6 <ClearDTOG_RX+0x22>
 80060d4:	6801      	ldr	r1, [r0, #0]
 80060d6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80060da:	400b      	ands	r3, r1
 80060dc:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 80060e0:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 80060e4:	6001      	str	r1, [r0, #0]
 80060e6:	4770      	bx	lr

080060e8 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 80060e8:	0080      	lsls	r0, r0, #2
 80060ea:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80060ee:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	0650      	lsls	r0, r2, #25
 80060f6:	d508      	bpl.n	800610a <ClearDTOG_TX+0x22>
 80060f8:	6819      	ldr	r1, [r3, #0]
 80060fa:	f640 700f 	movw	r0, #3855	; 0xf0f
 80060fe:	4008      	ands	r0, r1
 8006100:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 8006104:	f042 01c0 	orr.w	r1, r2, #192	; 0xc0
 8006108:	6019      	str	r1, [r3, #0]
 800610a:	4770      	bx	lr

0800610c <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800610c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8006110:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800611a:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800611c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8006120:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8006124:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 8006128:	0042      	lsls	r2, r0, #1
 800612a:	400b      	ands	r3, r1
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	4770      	bx	lr

08006130 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8006130:	f645 4350 	movw	r3, #23632	; 0x5c50
 8006134:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800613e:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8006140:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8006144:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006148:	18c3      	adds	r3, r0, r3
 800614a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800614e:	0058      	lsls	r0, r3, #1
 8006150:	400a      	ands	r2, r1
 8006152:	6002      	str	r2, [r0, #0]
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop

08006158 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8006158:	f645 4350 	movw	r3, #23632	; 0x5c50
 800615c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006160:	6819      	ldr	r1, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8006162:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8006164:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8006168:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800616c:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 8006170:	004a      	lsls	r2, r1, #1
}
 8006172:	8810      	ldrh	r0, [r2, #0]
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop

08006178 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8006178:	f645 4350 	movw	r3, #23632	; 0x5c50
 800617c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	f243 0104 	movw	r1, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8006186:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8006188:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800618c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8006190:	1842      	adds	r2, r0, r1
 8006192:	0051      	lsls	r1, r2, #1
}
 8006194:	8808      	ldrh	r0, [r1, #0]
 8006196:	4770      	bx	lr

08006198 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8006198:	f645 4350 	movw	r3, #23632	; 0x5c50
 800619c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80061a6:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80061a8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80061ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061b0:	18c3      	adds	r3, r0, r3
 80061b2:	005a      	lsls	r2, r3, #1
 80061b4:	6011      	str	r1, [r2, #0]
 80061b6:	4770      	bx	lr

080061b8 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80061b8:	f645 4350 	movw	r3, #23632	; 0x5c50
 80061bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80061c6:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80061c8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80061cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061d0:	18c3      	adds	r3, r0, r3
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	293e      	cmp	r1, #62	; 0x3e
 80061d6:	d909      	bls.n	80061ec <SetEPRxCount+0x34>
 80061d8:	094a      	lsrs	r2, r1, #5
 80061da:	06c9      	lsls	r1, r1, #27
 80061dc:	d101      	bne.n	80061e2 <SetEPRxCount+0x2a>
 80061de:	1e50      	subs	r0, r2, #1
 80061e0:	b282      	uxth	r2, r0
 80061e2:	0291      	lsls	r1, r2, #10
 80061e4:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 80061e8:	6018      	str	r0, [r3, #0]
 80061ea:	4770      	bx	lr
 80061ec:	084a      	lsrs	r2, r1, #1
 80061ee:	07c8      	lsls	r0, r1, #31
 80061f0:	bf48      	it	mi
 80061f2:	3201      	addmi	r2, #1
 80061f4:	0291      	lsls	r1, r2, #10
 80061f6:	6019      	str	r1, [r3, #0]
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop

080061fc <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 80061fc:	f645 4350 	movw	r3, #23632	; 0x5c50
 8006200:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	f243 0106 	movw	r1, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800620a:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800620c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8006210:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8006214:	1842      	adds	r2, r0, r1
 8006216:	0051      	lsls	r1, r2, #1
 8006218:	680b      	ldr	r3, [r1, #0]
}
 800621a:	0598      	lsls	r0, r3, #22
 800621c:	0d80      	lsrs	r0, r0, #22
 800621e:	4770      	bx	lr

08006220 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8006220:	b2c3      	uxtb	r3, r0
 8006222:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8006224:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop

0800622c <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 800622c:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800622e:	f241 63f8 	movw	r3, #5880	; 0x16f8
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8006232:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8006236:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800623a:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800623e:	2000      	movs	r0, #0
 8006240:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 8006244:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8006248:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800624c:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 800624e:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8006250:	6011      	str	r1, [r2, #0]
  return 0;
}
 8006252:	bc10      	pop	{r4}
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop

08006258 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8006258:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800625a:	f246 13fd 	movw	r3, #25085	; 0x61fd
 800625e:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8006262:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006266:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8006268:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800626a:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800626c:	f246 1179 	movw	r1, #24953	; 0x6179
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8006270:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8006272:	f6c0 0100 	movt	r1, #2048	; 0x800
 8006276:	4628      	mov	r0, r5
 8006278:	4788      	blx	r1
 800627a:	f645 7361 	movw	r3, #24417	; 0x5f61
 800627e:	4601      	mov	r1, r0
 8006280:	4622      	mov	r2, r4
 8006282:	4630      	mov	r0, r6
 8006284:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006288:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 800628a:	4620      	mov	r0, r4
 800628c:	bd70      	pop	{r4, r5, r6, pc}
 800628e:	bf00      	nop

08006290 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8006290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006294:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8006444 <CTR_LP+0x1b4>
 8006298:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800629a:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800629e:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80062a0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8006448 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80062a4:	4d62      	ldr	r5, [pc, #392]	; (8006430 <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80062a6:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80062aa:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 80062ae:	46d0      	mov	r8, sl
 80062b0:	f8db 0000 	ldr.w	r0, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80062b4:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80062b8:	b282      	uxth	r2, r0
 80062ba:	0403      	lsls	r3, r0, #16
 80062bc:	f8aa 2000 	strh.w	r2, [sl]
 80062c0:	f140 80ab 	bpl.w	800641a <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80062c4:	f8b8 3000 	ldrh.w	r3, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80062c8:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80062cc:	f003 020f 	and.w	r2, r3, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80062d0:	0090      	lsls	r0, r2, #2
 80062d2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 80062d6:	4e57      	ldr	r6, [pc, #348]	; (8006434 <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 80062d8:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80062dc:	4f54      	ldr	r7, [pc, #336]	; (8006430 <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 80062de:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80062e0:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80062e4:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	d133      	bne.n	8006354 <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80062ec:	6822      	ldr	r2, [r4, #0]
 80062ee:	b290      	uxth	r0, r2
 80062f0:	8028      	strh	r0, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 80062f2:	882b      	ldrh	r3, [r5, #0]
 80062f4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80062f8:	8032      	strh	r2, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 80062fa:	8828      	ldrh	r0, [r5, #0]
 80062fc:	f400 5340 	and.w	r3, r0, #12288	; 0x3000
 8006300:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8006302:	6822      	ldr	r2, [r4, #0]
 8006304:	4011      	ands	r1, r2
 8006306:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800630a:	f081 0020 	eor.w	r0, r1, #32
 800630e:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8006312:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006316:	6022      	str	r2, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8006318:	f8b8 1000 	ldrh.w	r1, [r8]
 800631c:	f001 0010 	and.w	r0, r1, #16
 8006320:	b283      	uxth	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d049      	beq.n	80063ba <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	b291      	uxth	r1, r2
 800632a:	f8ad 1006 	strh.w	r1, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 800632e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8006332:	f400 6300 	and.w	r3, r0, #2048	; 0x800
 8006336:	b29a      	uxth	r2, r3
 8006338:	2a00      	cmp	r2, #0
 800633a:	d171      	bne.n	8006420 <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 800633c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8006340:	b208      	sxth	r0, r1
 8006342:	2800      	cmp	r0, #0
 8006344:	dab4      	bge.n	80062b0 <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 8006346:	6822      	ldr	r2, [r4, #0]
 8006348:	f640 738f 	movw	r3, #3983	; 0xf8f
 800634c:	4013      	ands	r3, r2
 800634e:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8006350:	4939      	ldr	r1, [pc, #228]	; (8006438 <CTR_LP+0x1a8>)
 8006352:	e038      	b.n	80063c6 <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8006354:	6804      	ldr	r4, [r0, #0]
 8006356:	b2a1      	uxth	r1, r4
 8006358:	f8ad 1006 	strh.w	r1, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 800635c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006360:	b214      	sxth	r4, r2
 8006362:	2c00      	cmp	r4, #0
 8006364:	db1b      	blt.n	800639e <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8006366:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800636a:	f001 0280 	and.w	r2, r1, #128	; 0x80
 800636e:	b293      	uxth	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d09d      	beq.n	80062b0 <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8006374:	f899 4000 	ldrb.w	r4, [r9]
 8006378:	f648 730f 	movw	r3, #36623	; 0x8f0f
 800637c:	00a0      	lsls	r0, r4, #2
 800637e:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 8006382:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 8006386:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8006388:	3c01      	subs	r4, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800638a:	4003      	ands	r3, r0
 800638c:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800638e:	f240 2344 	movw	r3, #580	; 0x244
 8006392:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006396:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800639a:	4788      	blx	r1
 800639c:	e788      	b.n	80062b0 <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800639e:	6801      	ldr	r1, [r0, #0]
 80063a0:	f640 728f 	movw	r2, #3983	; 0xf8f
 80063a4:	400a      	ands	r2, r1
 80063a6:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80063a8:	f240 2060 	movw	r0, #608	; 0x260
 80063ac:	3b01      	subs	r3, #1
 80063ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80063b2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80063b6:	47a0      	blx	r4
 80063b8:	e7d5      	b.n	8006366 <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80063ba:	6821      	ldr	r1, [r4, #0]
 80063bc:	f648 730f 	movw	r3, #36623	; 0x8f0f
 80063c0:	400b      	ands	r3, r1
        In0_Process();
 80063c2:	491e      	ldr	r1, [pc, #120]	; (800643c <CTR_LP+0x1ac>)
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80063c4:	6023      	str	r3, [r4, #0]
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 80063c6:	4788      	blx	r1
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80063c8:	6820      	ldr	r0, [r4, #0]
 80063ca:	883a      	ldrh	r2, [r7, #0]
 80063cc:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 80063d0:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 80063d4:	b28a      	uxth	r2, r1
 80063d6:	4003      	ands	r3, r0
 80063d8:	b10a      	cbz	r2, 80063de <CTR_LP+0x14e>
 80063da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063de:	8838      	ldrh	r0, [r7, #0]
 80063e0:	f400 5100 	and.w	r1, r0, #8192	; 0x2000
 80063e4:	b28a      	uxth	r2, r1
 80063e6:	b10a      	cbz	r2, 80063ec <CTR_LP+0x15c>
 80063e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063ec:	8830      	ldrh	r0, [r6, #0]
 80063ee:	f000 0110 	and.w	r1, r0, #16
 80063f2:	b28a      	uxth	r2, r1
 80063f4:	b10a      	cbz	r2, 80063fa <CTR_LP+0x16a>
 80063f6:	f083 0310 	eor.w	r3, r3, #16
 80063fa:	8830      	ldrh	r0, [r6, #0]
 80063fc:	f000 0120 	and.w	r1, r0, #32
 8006400:	b28a      	uxth	r2, r1
 8006402:	b10a      	cbz	r2, 8006408 <CTR_LP+0x178>
 8006404:	f083 0320 	eor.w	r3, r3, #32
 8006408:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 800640c:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8006410:	f040 0280 	orr.w	r2, r0, #128	; 0x80
 8006414:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8006418:	600a      	str	r2, [r1, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800641a:	b003      	add	sp, #12
 800641c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	f640 728f 	movw	r2, #3983	; 0xf8f
 8006426:	4002      	ands	r2, r0
 8006428:	6022      	str	r2, [r4, #0]
          Setup0_Process();
 800642a:	4905      	ldr	r1, [pc, #20]	; (8006440 <CTR_LP+0x1b0>)
 800642c:	e7cb      	b.n	80063c6 <CTR_LP+0x136>
 800642e:	bf00      	nop
 8006430:	200016fa 	.word	0x200016fa
 8006434:	200016fc 	.word	0x200016fc
 8006438:	08005915 	.word	0x08005915
 800643c:	08005e35 	.word	0x08005e35
 8006440:	08005a05 	.word	0x08005a05
 8006444:	20000e9c 	.word	0x20000e9c
 8006448:	200016d0 	.word	0x200016d0

0800644c <memcpy>:
 800644c:	2a0f      	cmp	r2, #15
 800644e:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8006452:	f240 80a1 	bls.w	8006598 <memcpy+0x14c>
 8006456:	ea41 0300 	orr.w	r3, r1, r0
 800645a:	079b      	lsls	r3, r3, #30
 800645c:	f040 809e 	bne.w	800659c <memcpy+0x150>
 8006460:	680c      	ldr	r4, [r1, #0]
 8006462:	f1a2 0510 	sub.w	r5, r2, #16
 8006466:	6004      	str	r4, [r0, #0]
 8006468:	684b      	ldr	r3, [r1, #4]
 800646a:	46ac      	mov	ip, r5
 800646c:	6043      	str	r3, [r0, #4]
 800646e:	688c      	ldr	r4, [r1, #8]
 8006470:	f1bc 0f0f 	cmp.w	ip, #15
 8006474:	6084      	str	r4, [r0, #8]
 8006476:	68cc      	ldr	r4, [r1, #12]
 8006478:	f3c5 1500 	ubfx	r5, r5, #4, #1
 800647c:	60c4      	str	r4, [r0, #12]
 800647e:	f100 0310 	add.w	r3, r0, #16
 8006482:	f101 0410 	add.w	r4, r1, #16
 8006486:	d92b      	bls.n	80064e0 <memcpy+0x94>
 8006488:	b175      	cbz	r5, 80064a8 <memcpy+0x5c>
 800648a:	6825      	ldr	r5, [r4, #0]
 800648c:	f1ac 0c10 	sub.w	ip, ip, #16
 8006490:	601d      	str	r5, [r3, #0]
 8006492:	6865      	ldr	r5, [r4, #4]
 8006494:	605d      	str	r5, [r3, #4]
 8006496:	68a5      	ldr	r5, [r4, #8]
 8006498:	609d      	str	r5, [r3, #8]
 800649a:	68e5      	ldr	r5, [r4, #12]
 800649c:	3410      	adds	r4, #16
 800649e:	60dd      	str	r5, [r3, #12]
 80064a0:	3310      	adds	r3, #16
 80064a2:	f1bc 0f0f 	cmp.w	ip, #15
 80064a6:	d91b      	bls.n	80064e0 <memcpy+0x94>
 80064a8:	6827      	ldr	r7, [r4, #0]
 80064aa:	f104 0610 	add.w	r6, r4, #16
 80064ae:	601f      	str	r7, [r3, #0]
 80064b0:	6867      	ldr	r7, [r4, #4]
 80064b2:	f103 0510 	add.w	r5, r3, #16
 80064b6:	605f      	str	r7, [r3, #4]
 80064b8:	68a7      	ldr	r7, [r4, #8]
 80064ba:	f1ac 0c20 	sub.w	ip, ip, #32
 80064be:	609f      	str	r7, [r3, #8]
 80064c0:	68e7      	ldr	r7, [r4, #12]
 80064c2:	60df      	str	r7, [r3, #12]
 80064c4:	6924      	ldr	r4, [r4, #16]
 80064c6:	611c      	str	r4, [r3, #16]
 80064c8:	6877      	ldr	r7, [r6, #4]
 80064ca:	f106 0410 	add.w	r4, r6, #16
 80064ce:	606f      	str	r7, [r5, #4]
 80064d0:	68b7      	ldr	r7, [r6, #8]
 80064d2:	3320      	adds	r3, #32
 80064d4:	60af      	str	r7, [r5, #8]
 80064d6:	68f6      	ldr	r6, [r6, #12]
 80064d8:	f1bc 0f0f 	cmp.w	ip, #15
 80064dc:	60ee      	str	r6, [r5, #12]
 80064de:	d8e3      	bhi.n	80064a8 <memcpy+0x5c>
 80064e0:	f1a2 0810 	sub.w	r8, r2, #16
 80064e4:	f028 030f 	bic.w	r3, r8, #15
 80064e8:	f002 040f 	and.w	r4, r2, #15
 80064ec:	f103 0c10 	add.w	ip, r3, #16
 80064f0:	2c03      	cmp	r4, #3
 80064f2:	eb00 030c 	add.w	r3, r0, ip
 80064f6:	eb01 080c 	add.w	r8, r1, ip
 80064fa:	d951      	bls.n	80065a0 <memcpy+0x154>
 80064fc:	1f21      	subs	r1, r4, #4
 80064fe:	ea4f 0991 	mov.w	r9, r1, lsr #2
 8006502:	4644      	mov	r4, r8
 8006504:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
 8006508:	f854 6b04 	ldr.w	r6, [r4], #4
 800650c:	ebc8 010c 	rsb	r1, r8, ip
 8006510:	f10c 0c04 	add.w	ip, ip, #4
 8006514:	461d      	mov	r5, r3
 8006516:	4564      	cmp	r4, ip
 8006518:	f845 6b04 	str.w	r6, [r5], #4
 800651c:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8006520:	d012      	beq.n	8006548 <memcpy+0xfc>
 8006522:	b129      	cbz	r1, 8006530 <memcpy+0xe4>
 8006524:	f854 1b04 	ldr.w	r1, [r4], #4
 8006528:	4564      	cmp	r4, ip
 800652a:	f845 1b04 	str.w	r1, [r5], #4
 800652e:	d00b      	beq.n	8006548 <memcpy+0xfc>
 8006530:	4627      	mov	r7, r4
 8006532:	f857 1b04 	ldr.w	r1, [r7], #4
 8006536:	462e      	mov	r6, r5
 8006538:	f846 1b04 	str.w	r1, [r6], #4
 800653c:	6864      	ldr	r4, [r4, #4]
 800653e:	606c      	str	r4, [r5, #4]
 8006540:	1d3c      	adds	r4, r7, #4
 8006542:	1d35      	adds	r5, r6, #4
 8006544:	4564      	cmp	r4, ip
 8006546:	d1f3      	bne.n	8006530 <memcpy+0xe4>
 8006548:	f109 0c01 	add.w	ip, r9, #1
 800654c:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8006550:	f002 0203 	and.w	r2, r2, #3
 8006554:	eb08 0109 	add.w	r1, r8, r9
 8006558:	444b      	add	r3, r9
 800655a:	b1d2      	cbz	r2, 8006592 <memcpy+0x146>
 800655c:	780d      	ldrb	r5, [r1, #0]
 800655e:	189a      	adds	r2, r3, r2
 8006560:	43dc      	mvns	r4, r3
 8006562:	f803 5b01 	strb.w	r5, [r3], #1
 8006566:	1914      	adds	r4, r2, r4
 8006568:	4293      	cmp	r3, r2
 800656a:	f004 0401 	and.w	r4, r4, #1
 800656e:	d010      	beq.n	8006592 <memcpy+0x146>
 8006570:	b12c      	cbz	r4, 800657e <memcpy+0x132>
 8006572:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006576:	f803 4b01 	strb.w	r4, [r3], #1
 800657a:	4293      	cmp	r3, r2
 800657c:	d009      	beq.n	8006592 <memcpy+0x146>
 800657e:	784d      	ldrb	r5, [r1, #1]
 8006580:	461c      	mov	r4, r3
 8006582:	f804 5b01 	strb.w	r5, [r4], #1
 8006586:	788d      	ldrb	r5, [r1, #2]
 8006588:	3102      	adds	r1, #2
 800658a:	705d      	strb	r5, [r3, #1]
 800658c:	1c63      	adds	r3, r4, #1
 800658e:	4293      	cmp	r3, r2
 8006590:	d1f5      	bne.n	800657e <memcpy+0x132>
 8006592:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8006596:	4770      	bx	lr
 8006598:	4603      	mov	r3, r0
 800659a:	e7de      	b.n	800655a <memcpy+0x10e>
 800659c:	4603      	mov	r3, r0
 800659e:	e7dd      	b.n	800655c <memcpy+0x110>
 80065a0:	4641      	mov	r1, r8
 80065a2:	4622      	mov	r2, r4
 80065a4:	e7d9      	b.n	800655a <memcpy+0x10e>
 80065a6:	bf00      	nop

080065a8 <atan>:
 80065a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065b0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80065b4:	f2c4 430f 	movt	r3, #17423	; 0x440f
 80065b8:	429e      	cmp	r6, r3
 80065ba:	4688      	mov	r8, r1
 80065bc:	468a      	mov	sl, r1
 80065be:	4681      	mov	r9, r0
 80065c0:	dd1b      	ble.n	80065fa <atan+0x52>
 80065c2:	2000      	movs	r0, #0
 80065c4:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 80065c8:	4286      	cmp	r6, r0
 80065ca:	464b      	mov	r3, r9
 80065cc:	f300 80be 	bgt.w	800674c <atan+0x1a4>
 80065d0:	f000 80b9 	beq.w	8006746 <atan+0x19e>
 80065d4:	f242 18fb 	movw	r8, #8699	; 0x21fb
 80065d8:	4641      	mov	r1, r8
 80065da:	f642 5918 	movw	r9, #11544	; 0x2d18
 80065de:	f6cb 78f9 	movt	r8, #49145	; 0xbff9
 80065e2:	f6c3 71f9 	movt	r1, #16377	; 0x3ff9
 80065e6:	f2c5 4944 	movt	r9, #21572	; 0x5444
 80065ea:	f1ba 0f00 	cmp.w	sl, #0
 80065ee:	bfc8      	it	gt
 80065f0:	4688      	movgt	r8, r1
 80065f2:	4648      	mov	r0, r9
 80065f4:	4641      	mov	r1, r8
 80065f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80065fe:	f6c3 70db 	movt	r0, #16347	; 0x3fdb
 8006602:	4286      	cmp	r6, r0
 8006604:	f300 80bc 	bgt.w	8006780 <atan+0x1d8>
 8006608:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800660c:	f6c3 611f 	movt	r1, #15903	; 0x3e1f
 8006610:	428e      	cmp	r6, r1
 8006612:	f340 80a4 	ble.w	800675e <atan+0x1b6>
 8006616:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800661a:	464a      	mov	r2, r9
 800661c:	4643      	mov	r3, r8
 800661e:	4648      	mov	r0, r9
 8006620:	4641      	mov	r1, r8
 8006622:	f7f9 fea9 	bl	8000378 <__aeabi_dmul>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4606      	mov	r6, r0
 800662c:	460f      	mov	r7, r1
 800662e:	f7f9 fea3 	bl	8000378 <__aeabi_dmul>
 8006632:	a39d      	add	r3, pc, #628	; (adr r3, 80068a8 <atan+0x300>)
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	4604      	mov	r4, r0
 800663a:	460d      	mov	r5, r1
 800663c:	f7f9 fe9c 	bl	8000378 <__aeabi_dmul>
 8006640:	a39b      	add	r3, pc, #620	; (adr r3, 80068b0 <atan+0x308>)
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f7f9 fce5 	bl	8000014 <__adddf3>
 800664a:	4622      	mov	r2, r4
 800664c:	462b      	mov	r3, r5
 800664e:	f7f9 fe93 	bl	8000378 <__aeabi_dmul>
 8006652:	a399      	add	r3, pc, #612	; (adr r3, 80068b8 <atan+0x310>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f7f9 fcdc 	bl	8000014 <__adddf3>
 800665c:	4622      	mov	r2, r4
 800665e:	462b      	mov	r3, r5
 8006660:	f7f9 fe8a 	bl	8000378 <__aeabi_dmul>
 8006664:	a396      	add	r3, pc, #600	; (adr r3, 80068c0 <atan+0x318>)
 8006666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666a:	f7f9 fcd3 	bl	8000014 <__adddf3>
 800666e:	4622      	mov	r2, r4
 8006670:	462b      	mov	r3, r5
 8006672:	f7f9 fe81 	bl	8000378 <__aeabi_dmul>
 8006676:	a394      	add	r3, pc, #592	; (adr r3, 80068c8 <atan+0x320>)
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f7f9 fcca 	bl	8000014 <__adddf3>
 8006680:	4622      	mov	r2, r4
 8006682:	462b      	mov	r3, r5
 8006684:	f7f9 fe78 	bl	8000378 <__aeabi_dmul>
 8006688:	a391      	add	r3, pc, #580	; (adr r3, 80068d0 <atan+0x328>)
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f7f9 fcc1 	bl	8000014 <__adddf3>
 8006692:	4632      	mov	r2, r6
 8006694:	463b      	mov	r3, r7
 8006696:	f7f9 fe6f 	bl	8000378 <__aeabi_dmul>
 800669a:	a38f      	add	r3, pc, #572	; (adr r3, 80068d8 <atan+0x330>)
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	4606      	mov	r6, r0
 80066a2:	460f      	mov	r7, r1
 80066a4:	4620      	mov	r0, r4
 80066a6:	4629      	mov	r1, r5
 80066a8:	f7f9 fe66 	bl	8000378 <__aeabi_dmul>
 80066ac:	a38c      	add	r3, pc, #560	; (adr r3, 80068e0 <atan+0x338>)
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f7f9 fcad 	bl	8000010 <__aeabi_dsub>
 80066b6:	4622      	mov	r2, r4
 80066b8:	462b      	mov	r3, r5
 80066ba:	f7f9 fe5d 	bl	8000378 <__aeabi_dmul>
 80066be:	a38a      	add	r3, pc, #552	; (adr r3, 80068e8 <atan+0x340>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f7f9 fca4 	bl	8000010 <__aeabi_dsub>
 80066c8:	4622      	mov	r2, r4
 80066ca:	462b      	mov	r3, r5
 80066cc:	f7f9 fe54 	bl	8000378 <__aeabi_dmul>
 80066d0:	a387      	add	r3, pc, #540	; (adr r3, 80068f0 <atan+0x348>)
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f7f9 fc9b 	bl	8000010 <__aeabi_dsub>
 80066da:	4622      	mov	r2, r4
 80066dc:	462b      	mov	r3, r5
 80066de:	f7f9 fe4b 	bl	8000378 <__aeabi_dmul>
 80066e2:	a385      	add	r3, pc, #532	; (adr r3, 80068f8 <atan+0x350>)
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f7f9 fc92 	bl	8000010 <__aeabi_dsub>
 80066ec:	4622      	mov	r2, r4
 80066ee:	462b      	mov	r3, r5
 80066f0:	f7f9 fe42 	bl	8000378 <__aeabi_dmul>
 80066f4:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	d06f      	beq.n	80067de <atan+0x236>
 80066fe:	4630      	mov	r0, r6
 8006700:	4639      	mov	r1, r7
 8006702:	f7f9 fc87 	bl	8000014 <__adddf3>
 8006706:	4643      	mov	r3, r8
 8006708:	464a      	mov	r2, r9
 800670a:	f7f9 fe35 	bl	8000378 <__aeabi_dmul>
 800670e:	4c7e      	ldr	r4, [pc, #504]	; (8006908 <atan+0x360>)
 8006710:	4a7e      	ldr	r2, [pc, #504]	; (800690c <atan+0x364>)
 8006712:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006716:	445c      	add	r4, fp
 8006718:	4493      	add	fp, r2
 800671a:	e9db 2300 	ldrd	r2, r3, [fp]
 800671e:	f7f9 fc77 	bl	8000010 <__aeabi_dsub>
 8006722:	4643      	mov	r3, r8
 8006724:	464a      	mov	r2, r9
 8006726:	f7f9 fc73 	bl	8000010 <__aeabi_dsub>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006732:	f7f9 fc6d 	bl	8000010 <__aeabi_dsub>
 8006736:	f1ba 0f00 	cmp.w	sl, #0
 800673a:	4681      	mov	r9, r0
 800673c:	bfb4      	ite	lt
 800673e:	f101 4800 	addlt.w	r8, r1, #2147483648	; 0x80000000
 8006742:	4688      	movge	r8, r1
 8006744:	e755      	b.n	80065f2 <atan+0x4a>
 8006746:	2b00      	cmp	r3, #0
 8006748:	f43f af44 	beq.w	80065d4 <atan+0x2c>
 800674c:	4648      	mov	r0, r9
 800674e:	464a      	mov	r2, r9
 8006750:	4641      	mov	r1, r8
 8006752:	4643      	mov	r3, r8
 8006754:	f7f9 fc5e 	bl	8000014 <__adddf3>
 8006758:	4681      	mov	r9, r0
 800675a:	4688      	mov	r8, r1
 800675c:	e749      	b.n	80065f2 <atan+0x4a>
 800675e:	a368      	add	r3, pc, #416	; (adr r3, 8006900 <atan+0x358>)
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	4648      	mov	r0, r9
 8006766:	4641      	mov	r1, r8
 8006768:	f7f9 fc54 	bl	8000014 <__adddf3>
 800676c:	2300      	movs	r3, #0
 800676e:	2200      	movs	r2, #0
 8006770:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8006774:	f7fa f890 	bl	8000898 <__aeabi_dcmpgt>
 8006778:	2800      	cmp	r0, #0
 800677a:	f47f af3a 	bne.w	80065f2 <atan+0x4a>
 800677e:	e74a      	b.n	8006616 <atan+0x6e>
 8006780:	4648      	mov	r0, r9
 8006782:	f000 f8c5 	bl	8006910 <fabs>
 8006786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800678a:	f6c3 72f2 	movt	r2, #16370	; 0x3ff2
 800678e:	4296      	cmp	r6, r2
 8006790:	4604      	mov	r4, r0
 8006792:	460d      	mov	r5, r1
 8006794:	dc36      	bgt.n	8006804 <atan+0x25c>
 8006796:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800679a:	f6c3 73e5 	movt	r3, #16357	; 0x3fe5
 800679e:	429e      	cmp	r6, r3
 80067a0:	dc64      	bgt.n	800686c <atan+0x2c4>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	f7f9 fc35 	bl	8000014 <__adddf3>
 80067aa:	2300      	movs	r3, #0
 80067ac:	2200      	movs	r2, #0
 80067ae:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80067b2:	f7f9 fc2d 	bl	8000010 <__aeabi_dsub>
 80067b6:	2200      	movs	r2, #0
 80067b8:	4606      	mov	r6, r0
 80067ba:	460f      	mov	r7, r1
 80067bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067c0:	4620      	mov	r0, r4
 80067c2:	4629      	mov	r1, r5
 80067c4:	f7f9 fc26 	bl	8000014 <__adddf3>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4630      	mov	r0, r6
 80067ce:	4639      	mov	r1, r7
 80067d0:	f7f9 fefc 	bl	80005cc <__aeabi_ddiv>
 80067d4:	f04f 0b00 	mov.w	fp, #0
 80067d8:	4681      	mov	r9, r0
 80067da:	4688      	mov	r8, r1
 80067dc:	e71d      	b.n	800661a <atan+0x72>
 80067de:	4630      	mov	r0, r6
 80067e0:	4639      	mov	r1, r7
 80067e2:	f7f9 fc17 	bl	8000014 <__adddf3>
 80067e6:	464a      	mov	r2, r9
 80067e8:	4643      	mov	r3, r8
 80067ea:	f7f9 fdc5 	bl	8000378 <__aeabi_dmul>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4648      	mov	r0, r9
 80067f4:	4641      	mov	r1, r8
 80067f6:	f7f9 fc0b 	bl	8000010 <__aeabi_dsub>
 80067fa:	464c      	mov	r4, r9
 80067fc:	4645      	mov	r5, r8
 80067fe:	4681      	mov	r9, r0
 8006800:	4688      	mov	r8, r1
 8006802:	e6f6      	b.n	80065f2 <atan+0x4a>
 8006804:	f647 77ff 	movw	r7, #32767	; 0x7fff
 8006808:	f2c4 0703 	movt	r7, #16387	; 0x4003
 800680c:	42be      	cmp	r6, r7
 800680e:	dc20      	bgt.n	8006852 <atan+0x2aa>
 8006810:	2300      	movs	r3, #0
 8006812:	2200      	movs	r2, #0
 8006814:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8006818:	f7f9 fbfa 	bl	8000010 <__aeabi_dsub>
 800681c:	2300      	movs	r3, #0
 800681e:	4606      	mov	r6, r0
 8006820:	460f      	mov	r7, r1
 8006822:	2200      	movs	r2, #0
 8006824:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8006828:	4620      	mov	r0, r4
 800682a:	4629      	mov	r1, r5
 800682c:	f7f9 fda4 	bl	8000378 <__aeabi_dmul>
 8006830:	2300      	movs	r3, #0
 8006832:	2200      	movs	r2, #0
 8006834:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8006838:	f7f9 fbec 	bl	8000014 <__adddf3>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4630      	mov	r0, r6
 8006842:	4639      	mov	r1, r7
 8006844:	f7f9 fec2 	bl	80005cc <__aeabi_ddiv>
 8006848:	f04f 0b02 	mov.w	fp, #2
 800684c:	4681      	mov	r9, r0
 800684e:	4688      	mov	r8, r1
 8006850:	e6e3      	b.n	800661a <atan+0x72>
 8006852:	2100      	movs	r1, #0
 8006854:	2000      	movs	r0, #0
 8006856:	f6cb 71f0 	movt	r1, #49136	; 0xbff0
 800685a:	4622      	mov	r2, r4
 800685c:	462b      	mov	r3, r5
 800685e:	f7f9 feb5 	bl	80005cc <__aeabi_ddiv>
 8006862:	f04f 0b03 	mov.w	fp, #3
 8006866:	4681      	mov	r9, r0
 8006868:	4688      	mov	r8, r1
 800686a:	e6d6      	b.n	800661a <atan+0x72>
 800686c:	2300      	movs	r3, #0
 800686e:	2200      	movs	r2, #0
 8006870:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8006874:	f7f9 fbcc 	bl	8000010 <__aeabi_dsub>
 8006878:	2300      	movs	r3, #0
 800687a:	4606      	mov	r6, r0
 800687c:	460f      	mov	r7, r1
 800687e:	2200      	movs	r2, #0
 8006880:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8006884:	4620      	mov	r0, r4
 8006886:	4629      	mov	r1, r5
 8006888:	f7f9 fbc4 	bl	8000014 <__adddf3>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4630      	mov	r0, r6
 8006892:	4639      	mov	r1, r7
 8006894:	f7f9 fe9a 	bl	80005cc <__aeabi_ddiv>
 8006898:	f04f 0b01 	mov.w	fp, #1
 800689c:	4681      	mov	r9, r0
 800689e:	4688      	mov	r8, r1
 80068a0:	e6bb      	b.n	800661a <atan+0x72>
 80068a2:	bf00      	nop
 80068a4:	f3af 8000 	nop.w
 80068a8:	e322da11 	.word	0xe322da11
 80068ac:	3f90ad3a 	.word	0x3f90ad3a
 80068b0:	24760deb 	.word	0x24760deb
 80068b4:	3fa97b4b 	.word	0x3fa97b4b
 80068b8:	a0d03d51 	.word	0xa0d03d51
 80068bc:	3fb10d66 	.word	0x3fb10d66
 80068c0:	c54c206e 	.word	0xc54c206e
 80068c4:	3fb745cd 	.word	0x3fb745cd
 80068c8:	920083ff 	.word	0x920083ff
 80068cc:	3fc24924 	.word	0x3fc24924
 80068d0:	5555550d 	.word	0x5555550d
 80068d4:	3fd55555 	.word	0x3fd55555
 80068d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80068dc:	bfa2b444 	.word	0xbfa2b444
 80068e0:	52defd9a 	.word	0x52defd9a
 80068e4:	3fadde2d 	.word	0x3fadde2d
 80068e8:	af749a6d 	.word	0xaf749a6d
 80068ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80068f0:	fe231671 	.word	0xfe231671
 80068f4:	3fbc71c6 	.word	0x3fbc71c6
 80068f8:	9998ebc4 	.word	0x9998ebc4
 80068fc:	3fc99999 	.word	0x3fc99999
 8006900:	8800759c 	.word	0x8800759c
 8006904:	7e37e43c 	.word	0x7e37e43c
 8006908:	08008908 	.word	0x08008908
 800690c:	080088e8 	.word	0x080088e8

08006910 <fabs>:
 8006910:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop

08006918 <cosf>:
 8006918:	b500      	push	{lr}
 800691a:	f640 73d8 	movw	r3, #4056	; 0xfd8
 800691e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006922:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 8006926:	429a      	cmp	r2, r3
 8006928:	b083      	sub	sp, #12
 800692a:	4601      	mov	r1, r0
 800692c:	dd15      	ble.n	800695a <cosf+0x42>
 800692e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006932:	db03      	blt.n	800693c <cosf+0x24>
 8006934:	f7fa f80e 	bl	8000954 <__aeabi_fsub>
 8006938:	b003      	add	sp, #12
 800693a:	bd00      	pop	{pc}
 800693c:	4669      	mov	r1, sp
 800693e:	f000 fa11 	bl	8006d64 <__ieee754_rem_pio2f>
 8006942:	f000 0203 	and.w	r2, r0, #3
 8006946:	2a01      	cmp	r2, #1
 8006948:	9800      	ldr	r0, [sp, #0]
 800694a:	9901      	ldr	r1, [sp, #4]
 800694c:	d00e      	beq.n	800696c <cosf+0x54>
 800694e:	2a02      	cmp	r2, #2
 8006950:	d007      	beq.n	8006962 <cosf+0x4a>
 8006952:	b982      	cbnz	r2, 8006976 <cosf+0x5e>
 8006954:	f000 fbb2 	bl	80070bc <__kernel_cosf>
 8006958:	e7ee      	b.n	8006938 <cosf+0x20>
 800695a:	2100      	movs	r1, #0
 800695c:	f000 fbae 	bl	80070bc <__kernel_cosf>
 8006960:	e7ea      	b.n	8006938 <cosf+0x20>
 8006962:	f000 fbab 	bl	80070bc <__kernel_cosf>
 8006966:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800696a:	e7e5      	b.n	8006938 <cosf+0x20>
 800696c:	f001 fa52 	bl	8007e14 <__kernel_sinf>
 8006970:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006974:	e7e0      	b.n	8006938 <cosf+0x20>
 8006976:	2201      	movs	r2, #1
 8006978:	f001 fa4c 	bl	8007e14 <__kernel_sinf>
 800697c:	e7dc      	b.n	8006938 <cosf+0x20>
 800697e:	bf00      	nop

08006980 <sinf>:
 8006980:	b500      	push	{lr}
 8006982:	f640 73d8 	movw	r3, #4056	; 0xfd8
 8006986:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800698a:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 800698e:	429a      	cmp	r2, r3
 8006990:	b083      	sub	sp, #12
 8006992:	4601      	mov	r1, r0
 8006994:	dd16      	ble.n	80069c4 <sinf+0x44>
 8006996:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800699a:	db03      	blt.n	80069a4 <sinf+0x24>
 800699c:	f7f9 ffda 	bl	8000954 <__aeabi_fsub>
 80069a0:	b003      	add	sp, #12
 80069a2:	bd00      	pop	{pc}
 80069a4:	4669      	mov	r1, sp
 80069a6:	f000 f9dd 	bl	8006d64 <__ieee754_rem_pio2f>
 80069aa:	f000 0003 	and.w	r0, r0, #3
 80069ae:	2801      	cmp	r0, #1
 80069b0:	d015      	beq.n	80069de <sinf+0x5e>
 80069b2:	2802      	cmp	r0, #2
 80069b4:	d00b      	beq.n	80069ce <sinf+0x4e>
 80069b6:	b9b8      	cbnz	r0, 80069e8 <sinf+0x68>
 80069b8:	9800      	ldr	r0, [sp, #0]
 80069ba:	9901      	ldr	r1, [sp, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f001 fa29 	bl	8007e14 <__kernel_sinf>
 80069c2:	e7ed      	b.n	80069a0 <sinf+0x20>
 80069c4:	2100      	movs	r1, #0
 80069c6:	2200      	movs	r2, #0
 80069c8:	f001 fa24 	bl	8007e14 <__kernel_sinf>
 80069cc:	e7e8      	b.n	80069a0 <sinf+0x20>
 80069ce:	9800      	ldr	r0, [sp, #0]
 80069d0:	9901      	ldr	r1, [sp, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f001 fa1e 	bl	8007e14 <__kernel_sinf>
 80069d8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80069dc:	e7e0      	b.n	80069a0 <sinf+0x20>
 80069de:	9800      	ldr	r0, [sp, #0]
 80069e0:	9901      	ldr	r1, [sp, #4]
 80069e2:	f000 fb6b 	bl	80070bc <__kernel_cosf>
 80069e6:	e7db      	b.n	80069a0 <sinf+0x20>
 80069e8:	9800      	ldr	r0, [sp, #0]
 80069ea:	9901      	ldr	r1, [sp, #4]
 80069ec:	f000 fb66 	bl	80070bc <__kernel_cosf>
 80069f0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80069f4:	e7d4      	b.n	80069a0 <sinf+0x20>
 80069f6:	bf00      	nop

080069f8 <atan2>:
 80069f8:	f000 b802 	b.w	8006a00 <__ieee754_atan2>

080069fc <atan2f>:
 80069fc:	f000 b90c 	b.w	8006c18 <__ieee754_atan2f>

08006a00 <__ieee754_atan2>:
 8006a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	e9cd 2300 	strd	r2, r3, [sp]
 8006a0a:	e89d 1080 	ldmia.w	sp, {r7, ip}
 8006a0e:	f1c7 0900 	rsb	r9, r7, #0
 8006a12:	2600      	movs	r6, #0
 8006a14:	f02c 4800 	bic.w	r8, ip, #2147483648	; 0x80000000
 8006a18:	ea49 0907 	orr.w	r9, r9, r7
 8006a1c:	ea48 79d9 	orr.w	r9, r8, r9, lsr #31
 8006a20:	f6c7 76f0 	movt	r6, #32752	; 0x7ff0
 8006a24:	45b1      	cmp	r9, r6
 8006a26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	460d      	mov	r5, r1
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	d845      	bhi.n	8006ac0 <__ieee754_atan2+0xc0>
 8006a34:	f1c0 0a00 	rsb	sl, r0, #0
 8006a38:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8006a3c:	ea4a 0a00 	orr.w	sl, sl, r0
 8006a40:	ea49 7ada 	orr.w	sl, r9, sl, lsr #31
 8006a44:	45b2      	cmp	sl, r6
 8006a46:	d83b      	bhi.n	8006ac0 <__ieee754_atan2+0xc0>
 8006a48:	f10c 4c40 	add.w	ip, ip, #3221225472	; 0xc0000000
 8006a4c:	f50c 1c80 	add.w	ip, ip, #1048576	; 0x100000
 8006a50:	ea5c 0c07 	orrs.w	ip, ip, r7
 8006a54:	f8dd a004 	ldr.w	sl, [sp, #4]
 8006a58:	d052      	beq.n	8006b00 <__ieee754_atan2+0x100>
 8006a5a:	ea4f 76aa 	mov.w	r6, sl, asr #30
 8006a5e:	f006 0002 	and.w	r0, r6, #2
 8006a62:	ea59 0202 	orrs.w	r2, r9, r2
 8006a66:	ea40 76d1 	orr.w	r6, r0, r1, lsr #31
 8006a6a:	d036      	beq.n	8006ada <__ieee754_atan2+0xda>
 8006a6c:	ea58 0707 	orrs.w	r7, r8, r7
 8006a70:	d040      	beq.n	8006af4 <__ieee754_atan2+0xf4>
 8006a72:	2100      	movs	r1, #0
 8006a74:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 8006a78:	4588      	cmp	r8, r1
 8006a7a:	d052      	beq.n	8006b22 <__ieee754_atan2+0x122>
 8006a7c:	2700      	movs	r7, #0
 8006a7e:	f6c7 77f0 	movt	r7, #32752	; 0x7ff0
 8006a82:	45b9      	cmp	r9, r7
 8006a84:	d036      	beq.n	8006af4 <__ieee754_atan2+0xf4>
 8006a86:	ebc8 0809 	rsb	r8, r8, r9
 8006a8a:	ea4f 5828 	mov.w	r8, r8, asr #20
 8006a8e:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
 8006a92:	dc42      	bgt.n	8006b1a <__ieee754_atan2+0x11a>
 8006a94:	f1ba 0f00 	cmp.w	sl, #0
 8006a98:	db7d      	blt.n	8006b96 <__ieee754_atan2+0x196>
 8006a9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	f7f9 fd93 	bl	80005cc <__aeabi_ddiv>
 8006aa6:	f7ff ff33 	bl	8006910 <fabs>
 8006aaa:	f7ff fd7d 	bl	80065a8 <atan>
 8006aae:	2e01      	cmp	r6, #1
 8006ab0:	d06d      	beq.n	8006b8e <__ieee754_atan2+0x18e>
 8006ab2:	2e02      	cmp	r6, #2
 8006ab4:	d05c      	beq.n	8006b70 <__ieee754_atan2+0x170>
 8006ab6:	2e00      	cmp	r6, #0
 8006ab8:	d14d      	bne.n	8006b56 <__ieee754_atan2+0x156>
 8006aba:	4604      	mov	r4, r0
 8006abc:	460d      	mov	r5, r1
 8006abe:	e007      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ac8:	f7f9 faa4 	bl	8000014 <__adddf3>
 8006acc:	4604      	mov	r4, r0
 8006ace:	460d      	mov	r5, r1
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	b004      	add	sp, #16
 8006ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ada:	2e03      	cmp	r6, #3
 8006adc:	d8c6      	bhi.n	8006a6c <__ieee754_atan2+0x6c>
 8006ade:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <__ieee754_atan2+0xe4>)
 8006ae0:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8006ae4:	08006ad1 	.word	0x08006ad1
 8006ae8:	08006ad1 	.word	0x08006ad1
 8006aec:	08006b13 	.word	0x08006b13
 8006af0:	08006b0b 	.word	0x08006b0b
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	db2a      	blt.n	8006b4e <__ieee754_atan2+0x14e>
 8006af8:	a535      	add	r5, pc, #212	; (adr r5, 8006bd0 <__ieee754_atan2+0x1d0>)
 8006afa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006afe:	e7e7      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006b00:	b004      	add	sp, #16
 8006b02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b06:	f7ff bd4f 	b.w	80065a8 <atan>
 8006b0a:	a533      	add	r5, pc, #204	; (adr r5, 8006bd8 <__ieee754_atan2+0x1d8>)
 8006b0c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b10:	e7de      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006b12:	a533      	add	r5, pc, #204	; (adr r5, 8006be0 <__ieee754_atan2+0x1e0>)
 8006b14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b18:	e7da      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006b1a:	a12d      	add	r1, pc, #180	; (adr r1, 8006bd0 <__ieee754_atan2+0x1d0>)
 8006b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b20:	e7c5      	b.n	8006aae <__ieee754_atan2+0xae>
 8006b22:	45c1      	cmp	r9, r8
 8006b24:	d03e      	beq.n	8006ba4 <__ieee754_atan2+0x1a4>
 8006b26:	2e03      	cmp	r6, #3
 8006b28:	d8a8      	bhi.n	8006a7c <__ieee754_atan2+0x7c>
 8006b2a:	a201      	add	r2, pc, #4	; (adr r2, 8006b30 <__ieee754_atan2+0x130>)
 8006b2c:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8006b30:	08006b49 	.word	0x08006b49
 8006b34:	08006b41 	.word	0x08006b41
 8006b38:	08006b13 	.word	0x08006b13
 8006b3c:	08006b0b 	.word	0x08006b0b
 8006b40:	2400      	movs	r4, #0
 8006b42:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006b46:	e7c3      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006b48:	2400      	movs	r4, #0
 8006b4a:	2500      	movs	r5, #0
 8006b4c:	e7c0      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006b4e:	a526      	add	r5, pc, #152	; (adr r5, 8006be8 <__ieee754_atan2+0x1e8>)
 8006b50:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b54:	e7bc      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006b56:	a326      	add	r3, pc, #152	; (adr r3, 8006bf0 <__ieee754_atan2+0x1f0>)
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	f7f9 fa58 	bl	8000010 <__aeabi_dsub>
 8006b60:	a31f      	add	r3, pc, #124	; (adr r3, 8006be0 <__ieee754_atan2+0x1e0>)
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	f7f9 fa53 	bl	8000010 <__aeabi_dsub>
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	460d      	mov	r5, r1
 8006b6e:	e7af      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006b70:	a31f      	add	r3, pc, #124	; (adr r3, 8006bf0 <__ieee754_atan2+0x1f0>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f7f9 fa4b 	bl	8000010 <__aeabi_dsub>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	a118      	add	r1, pc, #96	; (adr r1, 8006be0 <__ieee754_atan2+0x1e0>)
 8006b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b84:	f7f9 fa44 	bl	8000010 <__aeabi_dsub>
 8006b88:	4604      	mov	r4, r0
 8006b8a:	460d      	mov	r5, r1
 8006b8c:	e7a0      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006b8e:	4604      	mov	r4, r0
 8006b90:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8006b94:	e79c      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006b96:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
 8006b9a:	f6bf af7e 	bge.w	8006a9a <__ieee754_atan2+0x9a>
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	e784      	b.n	8006aae <__ieee754_atan2+0xae>
 8006ba4:	2e03      	cmp	r6, #3
 8006ba6:	d8a5      	bhi.n	8006af4 <__ieee754_atan2+0xf4>
 8006ba8:	e8df f006 	tbb	[pc, r6]
 8006bac:	02060a0e 	.word	0x02060a0e
 8006bb0:	a511      	add	r5, pc, #68	; (adr r5, 8006bf8 <__ieee754_atan2+0x1f8>)
 8006bb2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006bb6:	e78b      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006bb8:	a511      	add	r5, pc, #68	; (adr r5, 8006c00 <__ieee754_atan2+0x200>)
 8006bba:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006bbe:	e787      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006bc0:	a511      	add	r5, pc, #68	; (adr r5, 8006c08 <__ieee754_atan2+0x208>)
 8006bc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006bc6:	e783      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006bc8:	a511      	add	r5, pc, #68	; (adr r5, 8006c10 <__ieee754_atan2+0x210>)
 8006bca:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006bce:	e77f      	b.n	8006ad0 <__ieee754_atan2+0xd0>
 8006bd0:	54442d18 	.word	0x54442d18
 8006bd4:	3ff921fb 	.word	0x3ff921fb
 8006bd8:	54442d18 	.word	0x54442d18
 8006bdc:	c00921fb 	.word	0xc00921fb
 8006be0:	54442d18 	.word	0x54442d18
 8006be4:	400921fb 	.word	0x400921fb
 8006be8:	54442d18 	.word	0x54442d18
 8006bec:	bff921fb 	.word	0xbff921fb
 8006bf0:	33145c07 	.word	0x33145c07
 8006bf4:	3ca1a626 	.word	0x3ca1a626
 8006bf8:	7f3321d2 	.word	0x7f3321d2
 8006bfc:	c002d97c 	.word	0xc002d97c
 8006c00:	7f3321d2 	.word	0x7f3321d2
 8006c04:	4002d97c 	.word	0x4002d97c
 8006c08:	54442d18 	.word	0x54442d18
 8006c0c:	bfe921fb 	.word	0xbfe921fb
 8006c10:	54442d18 	.word	0x54442d18
 8006c14:	3fe921fb 	.word	0x3fe921fb

08006c18 <__ieee754_atan2f>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006c1e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006c22:	4603      	mov	r3, r0
 8006c24:	dc17      	bgt.n	8006c56 <__ieee754_atan2f+0x3e>
 8006c26:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8006c2a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006c2e:	4606      	mov	r6, r0
 8006c30:	dc11      	bgt.n	8006c56 <__ieee754_atan2f+0x3e>
 8006c32:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8006c36:	d042      	beq.n	8006cbe <__ieee754_atan2f+0xa6>
 8006c38:	178f      	asrs	r7, r1, #30
 8006c3a:	f007 0002 	and.w	r0, r7, #2
 8006c3e:	ea40 77d3 	orr.w	r7, r0, r3, lsr #31
 8006c42:	b975      	cbnz	r5, 8006c62 <__ieee754_atan2f+0x4a>
 8006c44:	2f02      	cmp	r7, #2
 8006c46:	d035      	beq.n	8006cb4 <__ieee754_atan2f+0x9c>
 8006c48:	2f03      	cmp	r7, #3
 8006c4a:	d108      	bne.n	8006c5e <__ieee754_atan2f+0x46>
 8006c4c:	f640 73db 	movw	r3, #4059	; 0xfdb
 8006c50:	f2cc 0349 	movt	r3, #49225	; 0xc049
 8006c54:	e003      	b.n	8006c5e <__ieee754_atan2f+0x46>
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7f9 fe7e 	bl	8000958 <__addsf3>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	4618      	mov	r0, r3
 8006c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c62:	b1d4      	cbz	r4, 8006c9a <__ieee754_atan2f+0x82>
 8006c64:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006c68:	d02d      	beq.n	8006cc6 <__ieee754_atan2f+0xae>
 8006c6a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006c6e:	d014      	beq.n	8006c9a <__ieee754_atan2f+0x82>
 8006c70:	1b2c      	subs	r4, r5, r4
 8006c72:	15e4      	asrs	r4, r4, #23
 8006c74:	2c3c      	cmp	r4, #60	; 0x3c
 8006c76:	dc18      	bgt.n	8006caa <__ieee754_atan2f+0x92>
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	db52      	blt.n	8006d22 <__ieee754_atan2f+0x10a>
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fa f827 	bl	8000cd0 <__aeabi_fdiv>
 8006c82:	f001 fa73 	bl	800816c <fabsf>
 8006c86:	f001 f945 	bl	8007f14 <atanf>
 8006c8a:	2f01      	cmp	r7, #1
 8006c8c:	d046      	beq.n	8006d1c <__ieee754_atan2f+0x104>
 8006c8e:	2f02      	cmp	r7, #2
 8006c90:	d035      	beq.n	8006cfe <__ieee754_atan2f+0xe6>
 8006c92:	2f00      	cmp	r7, #0
 8006c94:	d125      	bne.n	8006ce2 <__ieee754_atan2f+0xca>
 8006c96:	4603      	mov	r3, r0
 8006c98:	e7e1      	b.n	8006c5e <__ieee754_atan2f+0x46>
 8006c9a:	2e00      	cmp	r6, #0
 8006c9c:	f640 73db 	movw	r3, #4059	; 0xfdb
 8006ca0:	db1c      	blt.n	8006cdc <__ieee754_atan2f+0xc4>
 8006ca2:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006caa:	f640 70db 	movw	r0, #4059	; 0xfdb
 8006cae:	f6c3 70c9 	movt	r0, #16329	; 0x3fc9
 8006cb2:	e7ea      	b.n	8006c8a <__ieee754_atan2f+0x72>
 8006cb4:	f640 73db 	movw	r3, #4059	; 0xfdb
 8006cb8:	f2c4 0349 	movt	r3, #16457	; 0x4049
 8006cbc:	e7cf      	b.n	8006c5e <__ieee754_atan2f+0x46>
 8006cbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006cc2:	f001 b927 	b.w	8007f14 <atanf>
 8006cc6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006cca:	d02f      	beq.n	8006d2c <__ieee754_atan2f+0x114>
 8006ccc:	2f02      	cmp	r7, #2
 8006cce:	d0f1      	beq.n	8006cb4 <__ieee754_atan2f+0x9c>
 8006cd0:	2f03      	cmp	r7, #3
 8006cd2:	d0bb      	beq.n	8006c4c <__ieee754_atan2f+0x34>
 8006cd4:	2f01      	cmp	r7, #1
 8006cd6:	d034      	beq.n	8006d42 <__ieee754_atan2f+0x12a>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	e7c0      	b.n	8006c5e <__ieee754_atan2f+0x46>
 8006cdc:	f6cb 73c9 	movt	r3, #49097	; 0xbfc9
 8006ce0:	e7bd      	b.n	8006c5e <__ieee754_atan2f+0x46>
 8006ce2:	f64b 512e 	movw	r1, #48430	; 0xbd2e
 8006ce6:	f2c3 31bb 	movt	r1, #13243	; 0x33bb
 8006cea:	f7f9 fe35 	bl	8000958 <__addsf3>
 8006cee:	f640 71db 	movw	r1, #4059	; 0xfdb
 8006cf2:	f2c4 0149 	movt	r1, #16457	; 0x4049
 8006cf6:	f7f9 fe2d 	bl	8000954 <__aeabi_fsub>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	e7af      	b.n	8006c5e <__ieee754_atan2f+0x46>
 8006cfe:	f64b 512e 	movw	r1, #48430	; 0xbd2e
 8006d02:	f2c3 31bb 	movt	r1, #13243	; 0x33bb
 8006d06:	f7f9 fe27 	bl	8000958 <__addsf3>
 8006d0a:	4601      	mov	r1, r0
 8006d0c:	f640 70db 	movw	r0, #4059	; 0xfdb
 8006d10:	f2c4 0049 	movt	r0, #16457	; 0x4049
 8006d14:	f7f9 fe1e 	bl	8000954 <__aeabi_fsub>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	e7a0      	b.n	8006c5e <__ieee754_atan2f+0x46>
 8006d1c:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8006d20:	e79d      	b.n	8006c5e <__ieee754_atan2f+0x46>
 8006d22:	f114 0f3c 	cmn.w	r4, #60	; 0x3c
 8006d26:	daa9      	bge.n	8006c7c <__ieee754_atan2f+0x64>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	e7ae      	b.n	8006c8a <__ieee754_atan2f+0x72>
 8006d2c:	2f02      	cmp	r7, #2
 8006d2e:	d013      	beq.n	8006d58 <__ieee754_atan2f+0x140>
 8006d30:	2f03      	cmp	r7, #3
 8006d32:	d00c      	beq.n	8006d4e <__ieee754_atan2f+0x136>
 8006d34:	2f01      	cmp	r7, #1
 8006d36:	f640 73db 	movw	r3, #4059	; 0xfdb
 8006d3a:	d005      	beq.n	8006d48 <__ieee754_atan2f+0x130>
 8006d3c:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 8006d40:	e78d      	b.n	8006c5e <__ieee754_atan2f+0x46>
 8006d42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d46:	e78a      	b.n	8006c5e <__ieee754_atan2f+0x46>
 8006d48:	f6cb 7349 	movt	r3, #48969	; 0xbf49
 8006d4c:	e787      	b.n	8006c5e <__ieee754_atan2f+0x46>
 8006d4e:	f64c 33e4 	movw	r3, #52196	; 0xcbe4
 8006d52:	f2cc 0316 	movt	r3, #49174	; 0xc016
 8006d56:	e782      	b.n	8006c5e <__ieee754_atan2f+0x46>
 8006d58:	f64c 33e4 	movw	r3, #52196	; 0xcbe4
 8006d5c:	f2c4 0316 	movt	r3, #16406	; 0x4016
 8006d60:	e77d      	b.n	8006c5e <__ieee754_atan2f+0x46>
 8006d62:	bf00      	nop

08006d64 <__ieee754_rem_pio2f>:
 8006d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d68:	f640 73d8 	movw	r3, #4056	; 0xfd8
 8006d6c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8006d70:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 8006d74:	429c      	cmp	r4, r3
 8006d76:	b089      	sub	sp, #36	; 0x24
 8006d78:	4606      	mov	r6, r0
 8006d7a:	460d      	mov	r5, r1
 8006d7c:	f340 808b 	ble.w	8006e96 <__ieee754_rem_pio2f+0x132>
 8006d80:	f64c 31e3 	movw	r1, #52195	; 0xcbe3
 8006d84:	f2c4 0116 	movt	r1, #16406	; 0x4016
 8006d88:	428c      	cmp	r4, r1
 8006d8a:	dc26      	bgt.n	8006dda <__ieee754_rem_pio2f+0x76>
 8006d8c:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8006d90:	2800      	cmp	r0, #0
 8006d92:	f6c3 71c9 	movt	r1, #16329	; 0x3fc9
 8006d96:	f340 812b 	ble.w	8006ff0 <__ieee754_rem_pio2f+0x28c>
 8006d9a:	f7f9 fddb 	bl	8000954 <__aeabi_fsub>
 8006d9e:	f44f 627d 	mov.w	r2, #4048	; 0xfd0
 8006da2:	f024 040f 	bic.w	r4, r4, #15
 8006da6:	f6c3 72c9 	movt	r2, #16329	; 0x3fc9
 8006daa:	4294      	cmp	r4, r2
 8006dac:	4606      	mov	r6, r0
 8006dae:	f000 8081 	beq.w	8006eb4 <__ieee754_rem_pio2f+0x150>
 8006db2:	f244 4143 	movw	r1, #17475	; 0x4443
 8006db6:	f2c3 7135 	movt	r1, #14133	; 0x3735
 8006dba:	f7f9 fdcb 	bl	8000954 <__aeabi_fsub>
 8006dbe:	4601      	mov	r1, r0
 8006dc0:	6028      	str	r0, [r5, #0]
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f7f9 fdc6 	bl	8000954 <__aeabi_fsub>
 8006dc8:	f244 4143 	movw	r1, #17475	; 0x4443
 8006dcc:	f2c3 7135 	movt	r1, #14133	; 0x3735
 8006dd0:	f7f9 fdc0 	bl	8000954 <__aeabi_fsub>
 8006dd4:	2701      	movs	r7, #1
 8006dd6:	6068      	str	r0, [r5, #4]
 8006dd8:	e061      	b.n	8006e9e <__ieee754_rem_pio2f+0x13a>
 8006dda:	f44f 6778 	mov.w	r7, #3968	; 0xf80
 8006dde:	f2c4 3749 	movt	r7, #17225	; 0x4349
 8006de2:	42bc      	cmp	r4, r7
 8006de4:	f340 8081 	ble.w	8006eea <__ieee754_rem_pio2f+0x186>
 8006de8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006dec:	da5b      	bge.n	8006ea6 <__ieee754_rem_pio2f+0x142>
 8006dee:	ea4f 59e4 	mov.w	r9, r4, asr #23
 8006df2:	f1a9 0986 	sub.w	r9, r9, #134	; 0x86
 8006df6:	eba4 54c9 	sub.w	r4, r4, r9, lsl #23
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f7fa f87a 	bl	8000ef4 <__aeabi_f2iz>
 8006e00:	f7f9 fe5e 	bl	8000ac0 <__aeabi_i2f>
 8006e04:	4602      	mov	r2, r0
 8006e06:	4601      	mov	r1, r0
 8006e08:	4620      	mov	r0, r4
 8006e0a:	9205      	str	r2, [sp, #20]
 8006e0c:	f7f9 fda2 	bl	8000954 <__aeabi_fsub>
 8006e10:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8006e14:	f7f9 fea8 	bl	8000b68 <__aeabi_fmul>
 8006e18:	4607      	mov	r7, r0
 8006e1a:	f7fa f86b 	bl	8000ef4 <__aeabi_f2iz>
 8006e1e:	f7f9 fe4f 	bl	8000ac0 <__aeabi_i2f>
 8006e22:	4601      	mov	r1, r0
 8006e24:	4604      	mov	r4, r0
 8006e26:	4638      	mov	r0, r7
 8006e28:	9406      	str	r4, [sp, #24]
 8006e2a:	f7f9 fd93 	bl	8000954 <__aeabi_fsub>
 8006e2e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8006e32:	f7f9 fe99 	bl	8000b68 <__aeabi_fmul>
 8006e36:	2100      	movs	r1, #0
 8006e38:	9007      	str	r0, [sp, #28]
 8006e3a:	f7fa f829 	bl	8000e90 <__aeabi_fcmpeq>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f000 80f6 	beq.w	8007030 <__ieee754_rem_pio2f+0x2cc>
 8006e44:	2703      	movs	r7, #3
 8006e46:	4620      	mov	r0, r4
 8006e48:	2100      	movs	r1, #0
 8006e4a:	f10d 0818 	add.w	r8, sp, #24
 8006e4e:	3f01      	subs	r7, #1
 8006e50:	f7fa f81e 	bl	8000e90 <__aeabi_fcmpeq>
 8006e54:	b140      	cbz	r0, 8006e68 <__ieee754_rem_pio2f+0x104>
 8006e56:	f858 4d04 	ldr.w	r4, [r8, #-4]!
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	3f01      	subs	r7, #1
 8006e60:	f7fa f816 	bl	8000e90 <__aeabi_fcmpeq>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d1f6      	bne.n	8006e56 <__ieee754_rem_pio2f+0xf2>
 8006e68:	4b92      	ldr	r3, [pc, #584]	; (80070b4 <__ieee754_rem_pio2f+0x350>)
 8006e6a:	2002      	movs	r0, #2
 8006e6c:	9000      	str	r0, [sp, #0]
 8006e6e:	9301      	str	r3, [sp, #4]
 8006e70:	a805      	add	r0, sp, #20
 8006e72:	463b      	mov	r3, r7
 8006e74:	4629      	mov	r1, r5
 8006e76:	464a      	mov	r2, r9
 8006e78:	f000 f9fc 	bl	8007274 <__kernel_rem_pio2f>
 8006e7c:	2e00      	cmp	r6, #0
 8006e7e:	4607      	mov	r7, r0
 8006e80:	da0d      	bge.n	8006e9e <__ieee754_rem_pio2f+0x13a>
 8006e82:	e895 000c 	ldmia.w	r5, {r2, r3}
 8006e86:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8006e8a:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8006e8e:	6029      	str	r1, [r5, #0]
 8006e90:	606a      	str	r2, [r5, #4]
 8006e92:	4247      	negs	r7, r0
 8006e94:	e003      	b.n	8006e9e <__ieee754_rem_pio2f+0x13a>
 8006e96:	2300      	movs	r3, #0
 8006e98:	6028      	str	r0, [r5, #0]
 8006e9a:	2700      	movs	r7, #0
 8006e9c:	604b      	str	r3, [r1, #4]
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	b009      	add	sp, #36	; 0x24
 8006ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea6:	4601      	mov	r1, r0
 8006ea8:	f7f9 fd54 	bl	8000954 <__aeabi_fsub>
 8006eac:	2700      	movs	r7, #0
 8006eae:	6068      	str	r0, [r5, #4]
 8006eb0:	6028      	str	r0, [r5, #0]
 8006eb2:	e7f4      	b.n	8006e9e <__ieee754_rem_pio2f+0x13a>
 8006eb4:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8006eb8:	f2c3 7135 	movt	r1, #14133	; 0x3735
 8006ebc:	f7f9 fd4a 	bl	8000954 <__aeabi_fsub>
 8006ec0:	f24a 3108 	movw	r1, #41736	; 0xa308
 8006ec4:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 8006ec8:	4604      	mov	r4, r0
 8006eca:	f7f9 fd43 	bl	8000954 <__aeabi_fsub>
 8006ece:	4601      	mov	r1, r0
 8006ed0:	6028      	str	r0, [r5, #0]
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f7f9 fd3e 	bl	8000954 <__aeabi_fsub>
 8006ed8:	f24a 3108 	movw	r1, #41736	; 0xa308
 8006edc:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 8006ee0:	f7f9 fd38 	bl	8000954 <__aeabi_fsub>
 8006ee4:	2701      	movs	r7, #1
 8006ee6:	6068      	str	r0, [r5, #4]
 8006ee8:	e7d9      	b.n	8006e9e <__ieee754_rem_pio2f+0x13a>
 8006eea:	f001 f93f 	bl	800816c <fabsf>
 8006eee:	f64f 1184 	movw	r1, #63876	; 0xf984
 8006ef2:	f6c3 7122 	movt	r1, #16162	; 0x3f22
 8006ef6:	4680      	mov	r8, r0
 8006ef8:	f7f9 fe36 	bl	8000b68 <__aeabi_fmul>
 8006efc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006f00:	f7f9 fd2a 	bl	8000958 <__addsf3>
 8006f04:	f7f9 fff6 	bl	8000ef4 <__aeabi_f2iz>
 8006f08:	4607      	mov	r7, r0
 8006f0a:	f7f9 fdd9 	bl	8000ac0 <__aeabi_i2f>
 8006f0e:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8006f12:	f6c3 71c9 	movt	r1, #16329	; 0x3fc9
 8006f16:	4683      	mov	fp, r0
 8006f18:	f7f9 fe26 	bl	8000b68 <__aeabi_fmul>
 8006f1c:	4601      	mov	r1, r0
 8006f1e:	4640      	mov	r0, r8
 8006f20:	f7f9 fd18 	bl	8000954 <__aeabi_fsub>
 8006f24:	f244 4143 	movw	r1, #17475	; 0x4443
 8006f28:	4681      	mov	r9, r0
 8006f2a:	f2c3 7135 	movt	r1, #14133	; 0x3735
 8006f2e:	4658      	mov	r0, fp
 8006f30:	f7f9 fe1a 	bl	8000b68 <__aeabi_fmul>
 8006f34:	2f1f      	cmp	r7, #31
 8006f36:	4682      	mov	sl, r0
 8006f38:	4651      	mov	r1, sl
 8006f3a:	4648      	mov	r0, r9
 8006f3c:	dc1f      	bgt.n	8006f7e <__ieee754_rem_pio2f+0x21a>
 8006f3e:	4b5e      	ldr	r3, [pc, #376]	; (80070b8 <__ieee754_rem_pio2f+0x354>)
 8006f40:	1e7a      	subs	r2, r7, #1
 8006f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f46:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d017      	beq.n	8006f7e <__ieee754_rem_pio2f+0x21a>
 8006f4e:	f7f9 fd01 	bl	8000954 <__aeabi_fsub>
 8006f52:	4680      	mov	r8, r0
 8006f54:	f8c5 8000 	str.w	r8, [r5]
 8006f58:	4641      	mov	r1, r8
 8006f5a:	4648      	mov	r0, r9
 8006f5c:	f7f9 fcfa 	bl	8000954 <__aeabi_fsub>
 8006f60:	4651      	mov	r1, sl
 8006f62:	f7f9 fcf7 	bl	8000954 <__aeabi_fsub>
 8006f66:	2e00      	cmp	r6, #0
 8006f68:	6068      	str	r0, [r5, #4]
 8006f6a:	da98      	bge.n	8006e9e <__ieee754_rem_pio2f+0x13a>
 8006f6c:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 8006f70:	f100 4100 	add.w	r1, r0, #2147483648	; 0x80000000
 8006f74:	f8c5 8000 	str.w	r8, [r5]
 8006f78:	6069      	str	r1, [r5, #4]
 8006f7a:	427f      	negs	r7, r7
 8006f7c:	e78f      	b.n	8006e9e <__ieee754_rem_pio2f+0x13a>
 8006f7e:	f7f9 fce9 	bl	8000954 <__aeabi_fsub>
 8006f82:	15e3      	asrs	r3, r4, #23
 8006f84:	4680      	mov	r8, r0
 8006f86:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 8006f8a:	1a19      	subs	r1, r3, r0
 8006f8c:	2908      	cmp	r1, #8
 8006f8e:	dde1      	ble.n	8006f54 <__ieee754_rem_pio2f+0x1f0>
 8006f90:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8006f94:	f2c3 7135 	movt	r1, #14133	; 0x3735
 8006f98:	4658      	mov	r0, fp
 8006f9a:	9303      	str	r3, [sp, #12]
 8006f9c:	f7f9 fde4 	bl	8000b68 <__aeabi_fmul>
 8006fa0:	4682      	mov	sl, r0
 8006fa2:	4651      	mov	r1, sl
 8006fa4:	4648      	mov	r0, r9
 8006fa6:	f7f9 fcd5 	bl	8000954 <__aeabi_fsub>
 8006faa:	4604      	mov	r4, r0
 8006fac:	4621      	mov	r1, r4
 8006fae:	4648      	mov	r0, r9
 8006fb0:	f7f9 fcd0 	bl	8000954 <__aeabi_fsub>
 8006fb4:	4651      	mov	r1, sl
 8006fb6:	f7f9 fccd 	bl	8000954 <__aeabi_fsub>
 8006fba:	f24a 3108 	movw	r1, #41736	; 0xa308
 8006fbe:	4681      	mov	r9, r0
 8006fc0:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 8006fc4:	4658      	mov	r0, fp
 8006fc6:	f7f9 fdcf 	bl	8000b68 <__aeabi_fmul>
 8006fca:	4649      	mov	r1, r9
 8006fcc:	f7f9 fcc2 	bl	8000954 <__aeabi_fsub>
 8006fd0:	4682      	mov	sl, r0
 8006fd2:	4651      	mov	r1, sl
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f7f9 fcbd 	bl	8000954 <__aeabi_fsub>
 8006fda:	9b03      	ldr	r3, [sp, #12]
 8006fdc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006fe0:	4680      	mov	r8, r0
 8006fe2:	1a98      	subs	r0, r3, r2
 8006fe4:	2819      	cmp	r0, #25
 8006fe6:	dc41      	bgt.n	800706c <__ieee754_rem_pio2f+0x308>
 8006fe8:	f8c5 8000 	str.w	r8, [r5]
 8006fec:	46a1      	mov	r9, r4
 8006fee:	e7b3      	b.n	8006f58 <__ieee754_rem_pio2f+0x1f4>
 8006ff0:	f7f9 fcb2 	bl	8000958 <__addsf3>
 8006ff4:	f44f 677d 	mov.w	r7, #4048	; 0xfd0
 8006ff8:	f024 040f 	bic.w	r4, r4, #15
 8006ffc:	f6c3 77c9 	movt	r7, #16329	; 0x3fc9
 8007000:	42bc      	cmp	r4, r7
 8007002:	4606      	mov	r6, r0
 8007004:	d016      	beq.n	8007034 <__ieee754_rem_pio2f+0x2d0>
 8007006:	f244 4143 	movw	r1, #17475	; 0x4443
 800700a:	f2c3 7135 	movt	r1, #14133	; 0x3735
 800700e:	f7f9 fca3 	bl	8000958 <__addsf3>
 8007012:	4601      	mov	r1, r0
 8007014:	6028      	str	r0, [r5, #0]
 8007016:	4630      	mov	r0, r6
 8007018:	f7f9 fc9c 	bl	8000954 <__aeabi_fsub>
 800701c:	f244 4143 	movw	r1, #17475	; 0x4443
 8007020:	f2c3 7135 	movt	r1, #14133	; 0x3735
 8007024:	f7f9 fc98 	bl	8000958 <__addsf3>
 8007028:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800702c:	6068      	str	r0, [r5, #4]
 800702e:	e736      	b.n	8006e9e <__ieee754_rem_pio2f+0x13a>
 8007030:	2703      	movs	r7, #3
 8007032:	e719      	b.n	8006e68 <__ieee754_rem_pio2f+0x104>
 8007034:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8007038:	f2c3 7135 	movt	r1, #14133	; 0x3735
 800703c:	f7f9 fc8c 	bl	8000958 <__addsf3>
 8007040:	f24a 3108 	movw	r1, #41736	; 0xa308
 8007044:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 8007048:	4604      	mov	r4, r0
 800704a:	f7f9 fc85 	bl	8000958 <__addsf3>
 800704e:	4601      	mov	r1, r0
 8007050:	6028      	str	r0, [r5, #0]
 8007052:	4620      	mov	r0, r4
 8007054:	f7f9 fc7e 	bl	8000954 <__aeabi_fsub>
 8007058:	f24a 3108 	movw	r1, #41736	; 0xa308
 800705c:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 8007060:	f7f9 fc7a 	bl	8000958 <__addsf3>
 8007064:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007068:	6068      	str	r0, [r5, #4]
 800706a:	e718      	b.n	8006e9e <__ieee754_rem_pio2f+0x13a>
 800706c:	f44f 4123 	mov.w	r1, #41728	; 0xa300
 8007070:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 8007074:	4658      	mov	r0, fp
 8007076:	f7f9 fd77 	bl	8000b68 <__aeabi_fmul>
 800707a:	4680      	mov	r8, r0
 800707c:	4641      	mov	r1, r8
 800707e:	4620      	mov	r0, r4
 8007080:	f7f9 fc68 	bl	8000954 <__aeabi_fsub>
 8007084:	4681      	mov	r9, r0
 8007086:	4649      	mov	r1, r9
 8007088:	4620      	mov	r0, r4
 800708a:	f7f9 fc63 	bl	8000954 <__aeabi_fsub>
 800708e:	4641      	mov	r1, r8
 8007090:	f7f9 fc60 	bl	8000954 <__aeabi_fsub>
 8007094:	f243 1132 	movw	r1, #12594	; 0x3132
 8007098:	4604      	mov	r4, r0
 800709a:	f2c2 418d 	movt	r1, #9357	; 0x248d
 800709e:	4658      	mov	r0, fp
 80070a0:	f7f9 fd62 	bl	8000b68 <__aeabi_fmul>
 80070a4:	4621      	mov	r1, r4
 80070a6:	f7f9 fc55 	bl	8000954 <__aeabi_fsub>
 80070aa:	4682      	mov	sl, r0
 80070ac:	4651      	mov	r1, sl
 80070ae:	4648      	mov	r0, r9
 80070b0:	e74d      	b.n	8006f4e <__ieee754_rem_pio2f+0x1ea>
 80070b2:	bf00      	nop
 80070b4:	080089a8 	.word	0x080089a8
 80070b8:	08008928 	.word	0x08008928

080070bc <__kernel_cosf>:
 80070bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c0:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80070c4:	f1b6 5f48 	cmp.w	r6, #838860800	; 0x32000000
 80070c8:	4605      	mov	r5, r0
 80070ca:	460f      	mov	r7, r1
 80070cc:	da5b      	bge.n	8007186 <__kernel_cosf+0xca>
 80070ce:	f7f9 ff11 	bl	8000ef4 <__aeabi_f2iz>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	f000 80ca 	beq.w	800726c <__kernel_cosf+0x1b0>
 80070d8:	4629      	mov	r1, r5
 80070da:	4628      	mov	r0, r5
 80070dc:	f7f9 fd44 	bl	8000b68 <__aeabi_fmul>
 80070e0:	f24d 714e 	movw	r1, #55118	; 0xd74e
 80070e4:	f6ca 5147 	movt	r1, #44359	; 0xad47
 80070e8:	4604      	mov	r4, r0
 80070ea:	f7f9 fd3d 	bl	8000b68 <__aeabi_fmul>
 80070ee:	f247 41f6 	movw	r1, #29942	; 0x74f6
 80070f2:	f2c3 110f 	movt	r1, #12559	; 0x310f
 80070f6:	f7f9 fc2f 	bl	8000958 <__addsf3>
 80070fa:	4621      	mov	r1, r4
 80070fc:	f7f9 fd34 	bl	8000b68 <__aeabi_fmul>
 8007100:	f24f 217c 	movw	r1, #62076	; 0xf27c
 8007104:	f2c3 4193 	movt	r1, #13459	; 0x3493
 8007108:	f7f9 fc24 	bl	8000954 <__aeabi_fsub>
 800710c:	4621      	mov	r1, r4
 800710e:	f7f9 fd2b 	bl	8000b68 <__aeabi_fmul>
 8007112:	f640 5101 	movw	r1, #3329	; 0xd01
 8007116:	f2c3 71d0 	movt	r1, #14288	; 0x37d0
 800711a:	f7f9 fc1d 	bl	8000958 <__addsf3>
 800711e:	4621      	mov	r1, r4
 8007120:	f7f9 fd22 	bl	8000b68 <__aeabi_fmul>
 8007124:	f640 3161 	movw	r1, #2913	; 0xb61
 8007128:	f6c3 21b6 	movt	r1, #15030	; 0x3ab6
 800712c:	f7f9 fc12 	bl	8000954 <__aeabi_fsub>
 8007130:	4621      	mov	r1, r4
 8007132:	f7f9 fd19 	bl	8000b68 <__aeabi_fmul>
 8007136:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 800713a:	f6c3 512a 	movt	r1, #15658	; 0x3d2a
 800713e:	f7f9 fc0b 	bl	8000958 <__addsf3>
 8007142:	4621      	mov	r1, r4
 8007144:	f7f9 fd10 	bl	8000b68 <__aeabi_fmul>
 8007148:	4680      	mov	r8, r0
 800714a:	4620      	mov	r0, r4
 800714c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007150:	f7f9 fd0a 	bl	8000b68 <__aeabi_fmul>
 8007154:	4641      	mov	r1, r8
 8007156:	4606      	mov	r6, r0
 8007158:	4620      	mov	r0, r4
 800715a:	f7f9 fd05 	bl	8000b68 <__aeabi_fmul>
 800715e:	4639      	mov	r1, r7
 8007160:	4604      	mov	r4, r0
 8007162:	4628      	mov	r0, r5
 8007164:	f7f9 fd00 	bl	8000b68 <__aeabi_fmul>
 8007168:	4601      	mov	r1, r0
 800716a:	4620      	mov	r0, r4
 800716c:	f7f9 fbf2 	bl	8000954 <__aeabi_fsub>
 8007170:	4601      	mov	r1, r0
 8007172:	4630      	mov	r0, r6
 8007174:	f7f9 fbee 	bl	8000954 <__aeabi_fsub>
 8007178:	4601      	mov	r1, r0
 800717a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800717e:	f7f9 fbe9 	bl	8000954 <__aeabi_fsub>
 8007182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007186:	4601      	mov	r1, r0
 8007188:	f7f9 fcee 	bl	8000b68 <__aeabi_fmul>
 800718c:	f24d 714e 	movw	r1, #55118	; 0xd74e
 8007190:	f6ca 5147 	movt	r1, #44359	; 0xad47
 8007194:	4604      	mov	r4, r0
 8007196:	f7f9 fce7 	bl	8000b68 <__aeabi_fmul>
 800719a:	f247 41f6 	movw	r1, #29942	; 0x74f6
 800719e:	f2c3 110f 	movt	r1, #12559	; 0x310f
 80071a2:	f7f9 fbd9 	bl	8000958 <__addsf3>
 80071a6:	4621      	mov	r1, r4
 80071a8:	f7f9 fcde 	bl	8000b68 <__aeabi_fmul>
 80071ac:	f24f 217c 	movw	r1, #62076	; 0xf27c
 80071b0:	f2c3 4193 	movt	r1, #13459	; 0x3493
 80071b4:	f7f9 fbce 	bl	8000954 <__aeabi_fsub>
 80071b8:	4621      	mov	r1, r4
 80071ba:	f7f9 fcd5 	bl	8000b68 <__aeabi_fmul>
 80071be:	f640 5101 	movw	r1, #3329	; 0xd01
 80071c2:	f2c3 71d0 	movt	r1, #14288	; 0x37d0
 80071c6:	f7f9 fbc7 	bl	8000958 <__addsf3>
 80071ca:	4621      	mov	r1, r4
 80071cc:	f7f9 fccc 	bl	8000b68 <__aeabi_fmul>
 80071d0:	f640 3161 	movw	r1, #2913	; 0xb61
 80071d4:	f6c3 21b6 	movt	r1, #15030	; 0x3ab6
 80071d8:	f7f9 fbbc 	bl	8000954 <__aeabi_fsub>
 80071dc:	4621      	mov	r1, r4
 80071de:	f7f9 fcc3 	bl	8000b68 <__aeabi_fmul>
 80071e2:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 80071e6:	f6c3 512a 	movt	r1, #15658	; 0x3d2a
 80071ea:	f7f9 fbb5 	bl	8000958 <__addsf3>
 80071ee:	4621      	mov	r1, r4
 80071f0:	f7f9 fcba 	bl	8000b68 <__aeabi_fmul>
 80071f4:	f649 1399 	movw	r3, #39321	; 0x9999
 80071f8:	f6c3 6399 	movt	r3, #16025	; 0x3e99
 80071fc:	429e      	cmp	r6, r3
 80071fe:	4680      	mov	r8, r0
 8007200:	dda3      	ble.n	800714a <__kernel_cosf+0x8e>
 8007202:	2000      	movs	r0, #0
 8007204:	f6c3 7048 	movt	r0, #16200	; 0x3f48
 8007208:	4286      	cmp	r6, r0
 800720a:	dc27      	bgt.n	800725c <__kernel_cosf+0x1a0>
 800720c:	f106 467f 	add.w	r6, r6, #4278190080	; 0xff000000
 8007210:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007214:	4631      	mov	r1, r6
 8007216:	f7f9 fb9d 	bl	8000954 <__aeabi_fsub>
 800721a:	4681      	mov	r9, r0
 800721c:	4620      	mov	r0, r4
 800721e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007222:	f7f9 fca1 	bl	8000b68 <__aeabi_fmul>
 8007226:	4631      	mov	r1, r6
 8007228:	f7f9 fb94 	bl	8000954 <__aeabi_fsub>
 800722c:	4641      	mov	r1, r8
 800722e:	4606      	mov	r6, r0
 8007230:	4620      	mov	r0, r4
 8007232:	f7f9 fc99 	bl	8000b68 <__aeabi_fmul>
 8007236:	4639      	mov	r1, r7
 8007238:	4604      	mov	r4, r0
 800723a:	4628      	mov	r0, r5
 800723c:	f7f9 fc94 	bl	8000b68 <__aeabi_fmul>
 8007240:	4601      	mov	r1, r0
 8007242:	4620      	mov	r0, r4
 8007244:	f7f9 fb86 	bl	8000954 <__aeabi_fsub>
 8007248:	4601      	mov	r1, r0
 800724a:	4630      	mov	r0, r6
 800724c:	f7f9 fb82 	bl	8000954 <__aeabi_fsub>
 8007250:	4601      	mov	r1, r0
 8007252:	4648      	mov	r0, r9
 8007254:	f7f9 fb7e 	bl	8000954 <__aeabi_fsub>
 8007258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800725c:	f04f 0900 	mov.w	r9, #0
 8007260:	2600      	movs	r6, #0
 8007262:	f6c3 7938 	movt	r9, #16184	; 0x3f38
 8007266:	f6c3 6690 	movt	r6, #16016	; 0x3e90
 800726a:	e7d7      	b.n	800721c <__kernel_cosf+0x160>
 800726c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007274 <__kernel_rem_pio2f>:
 8007274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007278:	b0df      	sub	sp, #380	; 0x17c
 800727a:	930c      	str	r3, [sp, #48]	; 0x30
 800727c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800727e:	4b22      	ldr	r3, [pc, #136]	; (8007308 <__kernel_rem_pio2f+0x94>)
 8007280:	9c68      	ldr	r4, [sp, #416]	; 0x1a0
 8007282:	910a      	str	r1, [sp, #40]	; 0x28
 8007284:	1e69      	subs	r1, r5, #1
 8007286:	1ed6      	subs	r6, r2, #3
 8007288:	bf48      	it	mi
 800728a:	1d16      	addmi	r6, r2, #4
 800728c:	4683      	mov	fp, r0
 800728e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007292:	10f7      	asrs	r7, r6, #3
 8007294:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8007298:	9008      	str	r0, [sp, #32]
 800729a:	9104      	str	r1, [sp, #16]
 800729c:	9804      	ldr	r0, [sp, #16]
 800729e:	930d      	str	r3, [sp, #52]	; 0x34
 80072a0:	9d08      	ldr	r5, [sp, #32]
 80072a2:	43dc      	mvns	r4, r3
 80072a4:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80072a8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80072ac:	1941      	adds	r1, r0, r5
 80072ae:	9207      	str	r2, [sp, #28]
 80072b0:	ebc0 070c 	rsb	r7, r0, ip
 80072b4:	d450      	bmi.n	8007358 <__kernel_rem_pio2f+0xe4>
 80072b6:	187e      	adds	r6, r7, r1
 80072b8:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 80072ba:	ebc7 0906 	rsb	r9, r7, r6
 80072be:	3601      	adds	r6, #1
 80072c0:	2f00      	cmp	r7, #0
 80072c2:	eb03 0587 	add.w	r5, r3, r7, lsl #2
 80072c6:	ac22      	add	r4, sp, #136	; 0x88
 80072c8:	f009 0a01 	and.w	sl, r9, #1
 80072cc:	f2c0 82fe 	blt.w	80078cc <__kernel_rem_pio2f+0x658>
 80072d0:	6828      	ldr	r0, [r5, #0]
 80072d2:	f7f9 fbf5 	bl	8000ac0 <__aeabi_i2f>
 80072d6:	3701      	adds	r7, #1
 80072d8:	42b7      	cmp	r7, r6
 80072da:	6020      	str	r0, [r4, #0]
 80072dc:	f04f 0804 	mov.w	r8, #4
 80072e0:	d03a      	beq.n	8007358 <__kernel_rem_pio2f+0xe4>
 80072e2:	f1ba 0f00 	cmp.w	sl, #0
 80072e6:	d026      	beq.n	8007336 <__kernel_rem_pio2f+0xc2>
 80072e8:	2f00      	cmp	r7, #0
 80072ea:	f2c0 82f1 	blt.w	80078d0 <__kernel_rem_pio2f+0x65c>
 80072ee:	f855 0008 	ldr.w	r0, [r5, r8]
 80072f2:	f7f9 fbe5 	bl	8000ac0 <__aeabi_i2f>
 80072f6:	3701      	adds	r7, #1
 80072f8:	42b7      	cmp	r7, r6
 80072fa:	f844 0008 	str.w	r0, [r4, r8]
 80072fe:	f108 0804 	add.w	r8, r8, #4
 8007302:	d118      	bne.n	8007336 <__kernel_rem_pio2f+0xc2>
 8007304:	e028      	b.n	8007358 <__kernel_rem_pio2f+0xe4>
 8007306:	bf00      	nop
 8007308:	08008cc0 	.word	0x08008cc0
 800730c:	f855 0008 	ldr.w	r0, [r5, r8]
 8007310:	f7f9 fbd6 	bl	8000ac0 <__aeabi_i2f>
 8007314:	3701      	adds	r7, #1
 8007316:	f108 0904 	add.w	r9, r8, #4
 800731a:	f844 0008 	str.w	r0, [r4, r8]
 800731e:	d413      	bmi.n	8007348 <__kernel_rem_pio2f+0xd4>
 8007320:	f855 0009 	ldr.w	r0, [r5, r9]
 8007324:	f7f9 fbcc 	bl	8000ac0 <__aeabi_i2f>
 8007328:	3701      	adds	r7, #1
 800732a:	42b7      	cmp	r7, r6
 800732c:	f844 0009 	str.w	r0, [r4, r9]
 8007330:	f109 0804 	add.w	r8, r9, #4
 8007334:	d010      	beq.n	8007358 <__kernel_rem_pio2f+0xe4>
 8007336:	2f00      	cmp	r7, #0
 8007338:	dae8      	bge.n	800730c <__kernel_rem_pio2f+0x98>
 800733a:	2000      	movs	r0, #0
 800733c:	3701      	adds	r7, #1
 800733e:	f108 0904 	add.w	r9, r8, #4
 8007342:	f844 0008 	str.w	r0, [r4, r8]
 8007346:	d5eb      	bpl.n	8007320 <__kernel_rem_pio2f+0xac>
 8007348:	3701      	adds	r7, #1
 800734a:	2000      	movs	r0, #0
 800734c:	42b7      	cmp	r7, r6
 800734e:	f844 0009 	str.w	r0, [r4, r9]
 8007352:	f109 0804 	add.w	r8, r9, #4
 8007356:	d1ee      	bne.n	8007336 <__kernel_rem_pio2f+0xc2>
 8007358:	9a08      	ldr	r2, [sp, #32]
 800735a:	2a00      	cmp	r2, #0
 800735c:	f2c0 8545 	blt.w	8007dea <__kernel_rem_pio2f+0xb76>
 8007360:	9908      	ldr	r1, [sp, #32]
 8007362:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007364:	008d      	lsls	r5, r1, #2
 8007366:	ab4a      	add	r3, sp, #296	; 0x128
 8007368:	195c      	adds	r4, r3, r5
 800736a:	9503      	str	r5, [sp, #12]
 800736c:	af49      	add	r7, sp, #292	; 0x124
 800736e:	9402      	str	r4, [sp, #8]
 8007370:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8007374:	9a04      	ldr	r2, [sp, #16]
 8007376:	2a00      	cmp	r2, #0
 8007378:	f2c0 8296 	blt.w	80078a8 <__kernel_rem_pio2f+0x634>
 800737c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8007380:	eb08 0586 	add.w	r5, r8, r6, lsl #2
 8007384:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8007388:	f1aa 0304 	sub.w	r3, sl, #4
 800738c:	f8db 0000 	ldr.w	r0, [fp]
 8007390:	f3c3 0980 	ubfx	r9, r3, #2, #1
 8007394:	f7f9 fbe8 	bl	8000b68 <__aeabi_fmul>
 8007398:	4601      	mov	r1, r0
 800739a:	2000      	movs	r0, #0
 800739c:	f7f9 fadc 	bl	8000958 <__addsf3>
 80073a0:	2404      	movs	r4, #4
 80073a2:	3d04      	subs	r5, #4
 80073a4:	4554      	cmp	r4, sl
 80073a6:	4680      	mov	r8, r0
 80073a8:	d02b      	beq.n	8007402 <__kernel_rem_pio2f+0x18e>
 80073aa:	f1b9 0f00 	cmp.w	r9, #0
 80073ae:	d00d      	beq.n	80073cc <__kernel_rem_pio2f+0x158>
 80073b0:	f855 1d04 	ldr.w	r1, [r5, #-4]!
 80073b4:	f8db 0004 	ldr.w	r0, [fp, #4]
 80073b8:	f7f9 fbd6 	bl	8000b68 <__aeabi_fmul>
 80073bc:	4601      	mov	r1, r0
 80073be:	4640      	mov	r0, r8
 80073c0:	f7f9 faca 	bl	8000958 <__addsf3>
 80073c4:	2408      	movs	r4, #8
 80073c6:	4554      	cmp	r4, sl
 80073c8:	4680      	mov	r8, r0
 80073ca:	d01a      	beq.n	8007402 <__kernel_rem_pio2f+0x18e>
 80073cc:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80073d0:	f85b 0004 	ldr.w	r0, [fp, r4]
 80073d4:	f7f9 fbc8 	bl	8000b68 <__aeabi_fmul>
 80073d8:	4601      	mov	r1, r0
 80073da:	4640      	mov	r0, r8
 80073dc:	f7f9 fabc 	bl	8000958 <__addsf3>
 80073e0:	3404      	adds	r4, #4
 80073e2:	4680      	mov	r8, r0
 80073e4:	f855 1c08 	ldr.w	r1, [r5, #-8]
 80073e8:	f85b 0004 	ldr.w	r0, [fp, r4]
 80073ec:	f7f9 fbbc 	bl	8000b68 <__aeabi_fmul>
 80073f0:	4601      	mov	r1, r0
 80073f2:	4640      	mov	r0, r8
 80073f4:	f7f9 fab0 	bl	8000958 <__addsf3>
 80073f8:	3404      	adds	r4, #4
 80073fa:	3d08      	subs	r5, #8
 80073fc:	4554      	cmp	r4, sl
 80073fe:	4680      	mov	r8, r0
 8007400:	d1e4      	bne.n	80073cc <__kernel_rem_pio2f+0x158>
 8007402:	9802      	ldr	r0, [sp, #8]
 8007404:	f847 8f04 	str.w	r8, [r7, #4]!
 8007408:	3601      	adds	r6, #1
 800740a:	4287      	cmp	r7, r0
 800740c:	d1b2      	bne.n	8007374 <__kernel_rem_pio2f+0x100>
 800740e:	9f03      	ldr	r7, [sp, #12]
 8007410:	a90e      	add	r1, sp, #56	; 0x38
 8007412:	19ce      	adds	r6, r1, r7
 8007414:	9609      	str	r6, [sp, #36]	; 0x24
 8007416:	9e08      	ldr	r6, [sp, #32]
 8007418:	00b2      	lsls	r2, r6, #2
 800741a:	ab5e      	add	r3, sp, #376	; 0x178
 800741c:	189d      	adds	r5, r3, r2
 800741e:	2e00      	cmp	r6, #0
 8007420:	9202      	str	r2, [sp, #8]
 8007422:	f855 9c50 	ldr.w	r9, [r5, #-80]
 8007426:	dd7d      	ble.n	8007524 <__kernel_rem_pio2f+0x2b0>
 8007428:	f50d 7c94 	add.w	ip, sp, #296	; 0x128
 800742c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8007430:	4648      	mov	r0, r9
 8007432:	ac0d      	add	r4, sp, #52	; 0x34
 8007434:	18a7      	adds	r7, r4, r2
 8007436:	eb0c 0502 	add.w	r5, ip, r2
 800743a:	f7f9 fb95 	bl	8000b68 <__aeabi_fmul>
 800743e:	f7f9 fd59 	bl	8000ef4 <__aeabi_f2iz>
 8007442:	f7f9 fb3d 	bl	8000ac0 <__aeabi_i2f>
 8007446:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800744a:	9001      	str	r0, [sp, #4]
 800744c:	f7f9 fb8c 	bl	8000b68 <__aeabi_fmul>
 8007450:	4601      	mov	r1, r0
 8007452:	4648      	mov	r0, r9
 8007454:	f7f9 fa7e 	bl	8000954 <__aeabi_fsub>
 8007458:	f7f9 fd4c 	bl	8000ef4 <__aeabi_f2iz>
 800745c:	ac0e      	add	r4, sp, #56	; 0x38
 800745e:	6020      	str	r0, [r4, #0]
 8007460:	9801      	ldr	r0, [sp, #4]
 8007462:	4601      	mov	r1, r0
 8007464:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 8007468:	f7f9 fa76 	bl	8000958 <__addsf3>
 800746c:	42bc      	cmp	r4, r7
 800746e:	4681      	mov	r9, r0
 8007470:	f3c7 0180 	ubfx	r1, r7, #2, #1
 8007474:	d056      	beq.n	8007524 <__kernel_rem_pio2f+0x2b0>
 8007476:	b1e9      	cbz	r1, 80074b4 <__kernel_rem_pio2f+0x240>
 8007478:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800747c:	f7f9 fb74 	bl	8000b68 <__aeabi_fmul>
 8007480:	f7f9 fd38 	bl	8000ef4 <__aeabi_f2iz>
 8007484:	f7f9 fb1c 	bl	8000ac0 <__aeabi_i2f>
 8007488:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800748c:	9001      	str	r0, [sp, #4]
 800748e:	f7f9 fb6b 	bl	8000b68 <__aeabi_fmul>
 8007492:	4601      	mov	r1, r0
 8007494:	4648      	mov	r0, r9
 8007496:	f7f9 fa5d 	bl	8000954 <__aeabi_fsub>
 800749a:	f7f9 fd2b 	bl	8000ef4 <__aeabi_f2iz>
 800749e:	9a01      	ldr	r2, [sp, #4]
 80074a0:	ac0f      	add	r4, sp, #60	; 0x3c
 80074a2:	6020      	str	r0, [r4, #0]
 80074a4:	4611      	mov	r1, r2
 80074a6:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 80074aa:	f7f9 fa55 	bl	8000958 <__addsf3>
 80074ae:	42bc      	cmp	r4, r7
 80074b0:	4681      	mov	r9, r0
 80074b2:	d037      	beq.n	8007524 <__kernel_rem_pio2f+0x2b0>
 80074b4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80074b8:	4648      	mov	r0, r9
 80074ba:	f7f9 fb55 	bl	8000b68 <__aeabi_fmul>
 80074be:	f7f9 fd19 	bl	8000ef4 <__aeabi_f2iz>
 80074c2:	f7f9 fafd 	bl	8000ac0 <__aeabi_i2f>
 80074c6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80074ca:	4680      	mov	r8, r0
 80074cc:	f7f9 fb4c 	bl	8000b68 <__aeabi_fmul>
 80074d0:	4601      	mov	r1, r0
 80074d2:	4648      	mov	r0, r9
 80074d4:	f7f9 fa3e 	bl	8000954 <__aeabi_fsub>
 80074d8:	f7f9 fd0c 	bl	8000ef4 <__aeabi_f2iz>
 80074dc:	4641      	mov	r1, r8
 80074de:	6060      	str	r0, [r4, #4]
 80074e0:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 80074e4:	f7f9 fa38 	bl	8000958 <__addsf3>
 80074e8:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80074ec:	4681      	mov	r9, r0
 80074ee:	f7f9 fb3b 	bl	8000b68 <__aeabi_fmul>
 80074f2:	f7f9 fcff 	bl	8000ef4 <__aeabi_f2iz>
 80074f6:	f7f9 fae3 	bl	8000ac0 <__aeabi_i2f>
 80074fa:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80074fe:	4680      	mov	r8, r0
 8007500:	f7f9 fb32 	bl	8000b68 <__aeabi_fmul>
 8007504:	4601      	mov	r1, r0
 8007506:	4648      	mov	r0, r9
 8007508:	f7f9 fa24 	bl	8000954 <__aeabi_fsub>
 800750c:	f7f9 fcf2 	bl	8000ef4 <__aeabi_f2iz>
 8007510:	4641      	mov	r1, r8
 8007512:	60a0      	str	r0, [r4, #8]
 8007514:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 8007518:	f7f9 fa1e 	bl	8000958 <__addsf3>
 800751c:	3408      	adds	r4, #8
 800751e:	42bc      	cmp	r4, r7
 8007520:	4681      	mov	r9, r0
 8007522:	d1c7      	bne.n	80074b4 <__kernel_rem_pio2f+0x240>
 8007524:	9907      	ldr	r1, [sp, #28]
 8007526:	4648      	mov	r0, r9
 8007528:	f000 fe6e 	bl	8008208 <scalbnf>
 800752c:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8007530:	4605      	mov	r5, r0
 8007532:	f7f9 fb19 	bl	8000b68 <__aeabi_fmul>
 8007536:	f000 fe1d 	bl	8008174 <floorf>
 800753a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800753e:	f7f9 fb13 	bl	8000b68 <__aeabi_fmul>
 8007542:	4601      	mov	r1, r0
 8007544:	4628      	mov	r0, r5
 8007546:	f7f9 fa05 	bl	8000954 <__aeabi_fsub>
 800754a:	4607      	mov	r7, r0
 800754c:	f7f9 fcd2 	bl	8000ef4 <__aeabi_f2iz>
 8007550:	4681      	mov	r9, r0
 8007552:	f7f9 fab5 	bl	8000ac0 <__aeabi_i2f>
 8007556:	4601      	mov	r1, r0
 8007558:	4638      	mov	r0, r7
 800755a:	f7f9 f9fb 	bl	8000954 <__aeabi_fsub>
 800755e:	9907      	ldr	r1, [sp, #28]
 8007560:	4607      	mov	r7, r0
 8007562:	2900      	cmp	r1, #0
 8007564:	f340 8139 	ble.w	80077da <__kernel_rem_pio2f+0x566>
 8007568:	1e72      	subs	r2, r6, #1
 800756a:	ac0e      	add	r4, sp, #56	; 0x38
 800756c:	9d07      	ldr	r5, [sp, #28]
 800756e:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8007572:	f1c5 0008 	rsb	r0, r5, #8
 8007576:	fa43 f100 	asr.w	r1, r3, r0
 800757a:	fa01 f000 	lsl.w	r0, r1, r0
 800757e:	f1c5 0407 	rsb	r4, r5, #7
 8007582:	1a1b      	subs	r3, r3, r0
 8007584:	fa43 f404 	asr.w	r4, r3, r4
 8007588:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 800758c:	4489      	add	r9, r1
 800758e:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8007592:	2c00      	cmp	r4, #0
 8007594:	dd55      	ble.n	8007642 <__kernel_rem_pio2f+0x3ce>
 8007596:	2e00      	cmp	r6, #0
 8007598:	f109 0901 	add.w	r9, r9, #1
 800759c:	f340 8194 	ble.w	80078c8 <__kernel_rem_pio2f+0x654>
 80075a0:	9d02      	ldr	r5, [sp, #8]
 80075a2:	ab0e      	add	r3, sp, #56	; 0x38
 80075a4:	f8dd c008 	ldr.w	ip, [sp, #8]
 80075a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ac:	1f28      	subs	r0, r5, #4
 80075ae:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 80075b2:	2500      	movs	r5, #0
 80075b4:	eb0e 010c 	add.w	r1, lr, ip
 80075b8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80075bc:	b122      	cbz	r2, 80075c8 <__kernel_rem_pio2f+0x354>
 80075be:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80075c2:	f843 2c04 	str.w	r2, [r3, #-4]
 80075c6:	2501      	movs	r5, #1
 80075c8:	428b      	cmp	r3, r1
 80075ca:	d026      	beq.n	800761a <__kernel_rem_pio2f+0x3a6>
 80075cc:	b160      	cbz	r0, 80075e8 <__kernel_rem_pio2f+0x374>
 80075ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075d0:	3304      	adds	r3, #4
 80075d2:	2d00      	cmp	r5, #0
 80075d4:	f040 80f3 	bne.w	80077be <__kernel_rem_pio2f+0x54a>
 80075d8:	b122      	cbz	r2, 80075e4 <__kernel_rem_pio2f+0x370>
 80075da:	f5c2 7580 	rsb	r5, r2, #256	; 0x100
 80075de:	f843 5c04 	str.w	r5, [r3, #-4]
 80075e2:	2501      	movs	r5, #1
 80075e4:	428b      	cmp	r3, r1
 80075e6:	d018      	beq.n	800761a <__kernel_rem_pio2f+0x3a6>
 80075e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	f040 80ec 	bne.w	80077ca <__kernel_rem_pio2f+0x556>
 80075f2:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80075f6:	b112      	cbz	r2, 80075fe <__kernel_rem_pio2f+0x38a>
 80075f8:	f843 0c04 	str.w	r0, [r3, #-4]
 80075fc:	2501      	movs	r5, #1
 80075fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007602:	2d00      	cmp	r5, #0
 8007604:	f040 80db 	bne.w	80077be <__kernel_rem_pio2f+0x54a>
 8007608:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 800760c:	2a00      	cmp	r2, #0
 800760e:	d0e9      	beq.n	80075e4 <__kernel_rem_pio2f+0x370>
 8007610:	2501      	movs	r5, #1
 8007612:	428b      	cmp	r3, r1
 8007614:	f843 0c04 	str.w	r0, [r3, #-4]
 8007618:	d1e6      	bne.n	80075e8 <__kernel_rem_pio2f+0x374>
 800761a:	9907      	ldr	r1, [sp, #28]
 800761c:	2900      	cmp	r1, #0
 800761e:	dd0d      	ble.n	800763c <__kernel_rem_pio2f+0x3c8>
 8007620:	2901      	cmp	r1, #1
 8007622:	f000 80e2 	beq.w	80077ea <__kernel_rem_pio2f+0x576>
 8007626:	2902      	cmp	r1, #2
 8007628:	d108      	bne.n	800763c <__kernel_rem_pio2f+0x3c8>
 800762a:	1e70      	subs	r0, r6, #1
 800762c:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 8007630:	f85e 2020 	ldr.w	r2, [lr, r0, lsl #2]
 8007634:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8007638:	f84e 3020 	str.w	r3, [lr, r0, lsl #2]
 800763c:	2c02      	cmp	r4, #2
 800763e:	f000 80e0 	beq.w	8007802 <__kernel_rem_pio2f+0x58e>
 8007642:	4638      	mov	r0, r7
 8007644:	2100      	movs	r1, #0
 8007646:	f7f9 fc23 	bl	8000e90 <__aeabi_fcmpeq>
 800764a:	2800      	cmp	r0, #0
 800764c:	f000 80f3 	beq.w	8007836 <__kernel_rem_pio2f+0x5c2>
 8007650:	9808      	ldr	r0, [sp, #32]
 8007652:	1e75      	subs	r5, r6, #1
 8007654:	42a8      	cmp	r0, r5
 8007656:	dc25      	bgt.n	80076a4 <__kernel_rem_pio2f+0x430>
 8007658:	9b02      	ldr	r3, [sp, #8]
 800765a:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 800765e:	eb0e 0103 	add.w	r1, lr, r3
 8007662:	460b      	mov	r3, r1
 8007664:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8007668:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800766c:	ebcc 0001 	rsb	r0, ip, r1
 8007670:	1f01      	subs	r1, r0, #4
 8007672:	4563      	cmp	r3, ip
 8007674:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8007678:	d011      	beq.n	800769e <__kernel_rem_pio2f+0x42a>
 800767a:	b130      	cbz	r0, 800768a <__kernel_rem_pio2f+0x416>
 800767c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007680:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8007684:	430a      	orrs	r2, r1
 8007686:	4573      	cmp	r3, lr
 8007688:	d009      	beq.n	800769e <__kernel_rem_pio2f+0x42a>
 800768a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800768c:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8007690:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007694:	4302      	orrs	r2, r0
 8007696:	42bb      	cmp	r3, r7
 8007698:	ea42 0201 	orr.w	r2, r2, r1
 800769c:	d1f6      	bne.n	800768c <__kernel_rem_pio2f+0x418>
 800769e:	2a00      	cmp	r2, #0
 80076a0:	f040 811a 	bne.w	80078d8 <__kernel_rem_pio2f+0x664>
 80076a4:	9f08      	ldr	r7, [sp, #32]
 80076a6:	ad0e      	add	r5, sp, #56	; 0x38
 80076a8:	1e78      	subs	r0, r7, #1
 80076aa:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
 80076ae:	2a00      	cmp	r2, #0
 80076b0:	f040 8110 	bne.w	80078d4 <__kernel_rem_pio2f+0x660>
 80076b4:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 80076b8:	2301      	movs	r3, #1
 80076ba:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80076be:	3301      	adds	r3, #1
 80076c0:	2900      	cmp	r1, #0
 80076c2:	d0fa      	beq.n	80076ba <__kernel_rem_pio2f+0x446>
 80076c4:	18f0      	adds	r0, r6, r3
 80076c6:	1c77      	adds	r7, r6, #1
 80076c8:	4287      	cmp	r7, r0
 80076ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80076cc:	dc75      	bgt.n	80077ba <__kernel_rem_pio2f+0x546>
 80076ce:	f8dd e010 	ldr.w	lr, [sp, #16]
 80076d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80076d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80076d8:	eb0e 0207 	add.w	r2, lr, r7
 80076dc:	f8dd c008 	ldr.w	ip, [sp, #8]
 80076e0:	9f69      	ldr	r7, [sp, #420]	; 0x1a4
 80076e2:	1b99      	subs	r1, r3, r6
 80076e4:	eb06 0905 	add.w	r9, r6, r5
 80076e8:	a84a      	add	r0, sp, #296	; 0x128
 80076ea:	19a6      	adds	r6, r4, r6
 80076ec:	ab22      	add	r3, sp, #136	; 0x88
 80076ee:	eb07 0989 	add.w	r9, r7, r9, lsl #2
 80076f2:	eb00 050c 	add.w	r5, r0, ip
 80076f6:	1c57      	adds	r7, r2, #1
 80076f8:	008a      	lsls	r2, r1, #2
 80076fa:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 80076fe:	9502      	str	r5, [sp, #8]
 8007700:	9206      	str	r2, [sp, #24]
 8007702:	9105      	str	r1, [sp, #20]
 8007704:	2600      	movs	r6, #0
 8007706:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800770a:	f7f9 f9d9 	bl	8000ac0 <__aeabi_i2f>
 800770e:	9c05      	ldr	r4, [sp, #20]
 8007710:	51a0      	str	r0, [r4, r6]
 8007712:	9804      	ldr	r0, [sp, #16]
 8007714:	2800      	cmp	r0, #0
 8007716:	db5e      	blt.n	80077d6 <__kernel_rem_pio2f+0x562>
 8007718:	ad22      	add	r5, sp, #136	; 0x88
 800771a:	eb05 0287 	add.w	r2, r5, r7, lsl #2
 800771e:	f1aa 0304 	sub.w	r3, sl, #4
 8007722:	f3c3 0480 	ubfx	r4, r3, #2, #1
 8007726:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800772a:	f8db 0000 	ldr.w	r0, [fp]
 800772e:	9403      	str	r4, [sp, #12]
 8007730:	1f14      	subs	r4, r2, #4
 8007732:	f7f9 fa19 	bl	8000b68 <__aeabi_fmul>
 8007736:	4601      	mov	r1, r0
 8007738:	2000      	movs	r0, #0
 800773a:	f7f9 f90d 	bl	8000958 <__addsf3>
 800773e:	f04f 0804 	mov.w	r8, #4
 8007742:	45d0      	cmp	r8, sl
 8007744:	4605      	mov	r5, r0
 8007746:	d02d      	beq.n	80077a4 <__kernel_rem_pio2f+0x530>
 8007748:	9903      	ldr	r1, [sp, #12]
 800774a:	b171      	cbz	r1, 800776a <__kernel_rem_pio2f+0x4f6>
 800774c:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8007750:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007754:	f7f9 fa08 	bl	8000b68 <__aeabi_fmul>
 8007758:	4601      	mov	r1, r0
 800775a:	4628      	mov	r0, r5
 800775c:	f7f9 f8fc 	bl	8000958 <__addsf3>
 8007760:	f04f 0808 	mov.w	r8, #8
 8007764:	45d0      	cmp	r8, sl
 8007766:	4605      	mov	r5, r0
 8007768:	d01c      	beq.n	80077a4 <__kernel_rem_pio2f+0x530>
 800776a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800776e:	f85b 0008 	ldr.w	r0, [fp, r8]
 8007772:	f7f9 f9f9 	bl	8000b68 <__aeabi_fmul>
 8007776:	4601      	mov	r1, r0
 8007778:	4628      	mov	r0, r5
 800777a:	f7f9 f8ed 	bl	8000958 <__addsf3>
 800777e:	f108 0804 	add.w	r8, r8, #4
 8007782:	4605      	mov	r5, r0
 8007784:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007788:	f85b 0008 	ldr.w	r0, [fp, r8]
 800778c:	f7f9 f9ec 	bl	8000b68 <__aeabi_fmul>
 8007790:	4601      	mov	r1, r0
 8007792:	4628      	mov	r0, r5
 8007794:	f7f9 f8e0 	bl	8000958 <__addsf3>
 8007798:	f108 0804 	add.w	r8, r8, #4
 800779c:	3c08      	subs	r4, #8
 800779e:	45d0      	cmp	r8, sl
 80077a0:	4605      	mov	r5, r0
 80077a2:	d1e2      	bne.n	800776a <__kernel_rem_pio2f+0x4f6>
 80077a4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80077a8:	9806      	ldr	r0, [sp, #24]
 80077aa:	3604      	adds	r6, #4
 80077ac:	f84e 5f04 	str.w	r5, [lr, #4]!
 80077b0:	3701      	adds	r7, #1
 80077b2:	4286      	cmp	r6, r0
 80077b4:	f8cd e008 	str.w	lr, [sp, #8]
 80077b8:	d1a5      	bne.n	8007706 <__kernel_rem_pio2f+0x492>
 80077ba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80077bc:	e62c      	b.n	8007418 <__kernel_rem_pio2f+0x1a4>
 80077be:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80077c2:	f843 2c04 	str.w	r2, [r3, #-4]
 80077c6:	2501      	movs	r5, #1
 80077c8:	e70c      	b.n	80075e4 <__kernel_rem_pio2f+0x370>
 80077ca:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
 80077ce:	f843 5c04 	str.w	r5, [r3, #-4]
 80077d2:	2501      	movs	r5, #1
 80077d4:	e713      	b.n	80075fe <__kernel_rem_pio2f+0x38a>
 80077d6:	2500      	movs	r5, #0
 80077d8:	e7e4      	b.n	80077a4 <__kernel_rem_pio2f+0x530>
 80077da:	d15e      	bne.n	800789a <__kernel_rem_pio2f+0x626>
 80077dc:	1e70      	subs	r0, r6, #1
 80077de:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 80077e2:	f85e 3020 	ldr.w	r3, [lr, r0, lsl #2]
 80077e6:	121c      	asrs	r4, r3, #8
 80077e8:	e6d3      	b.n	8007592 <__kernel_rem_pio2f+0x31e>
 80077ea:	1e71      	subs	r1, r6, #1
 80077ec:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80077f0:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 80077f4:	2c02      	cmp	r4, #2
 80077f6:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80077fa:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
 80077fe:	f47f af20 	bne.w	8007642 <__kernel_rem_pio2f+0x3ce>
 8007802:	4639      	mov	r1, r7
 8007804:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007808:	f7f9 f8a4 	bl	8000954 <__aeabi_fsub>
 800780c:	4607      	mov	r7, r0
 800780e:	2d00      	cmp	r5, #0
 8007810:	f43f af17 	beq.w	8007642 <__kernel_rem_pio2f+0x3ce>
 8007814:	9907      	ldr	r1, [sp, #28]
 8007816:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800781a:	f000 fcf5 	bl	8008208 <scalbnf>
 800781e:	4601      	mov	r1, r0
 8007820:	4638      	mov	r0, r7
 8007822:	f7f9 f897 	bl	8000954 <__aeabi_fsub>
 8007826:	4607      	mov	r7, r0
 8007828:	4638      	mov	r0, r7
 800782a:	2100      	movs	r1, #0
 800782c:	f7f9 fb30 	bl	8000e90 <__aeabi_fcmpeq>
 8007830:	2800      	cmp	r0, #0
 8007832:	f47f af0d 	bne.w	8007650 <__kernel_rem_pio2f+0x3dc>
 8007836:	9402      	str	r4, [sp, #8]
 8007838:	9c07      	ldr	r4, [sp, #28]
 800783a:	4638      	mov	r0, r7
 800783c:	4261      	negs	r1, r4
 800783e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007842:	f000 fce1 	bl	8008208 <scalbnf>
 8007846:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800784a:	4605      	mov	r5, r0
 800784c:	f7f9 fb3e 	bl	8000ecc <__aeabi_fcmpge>
 8007850:	2800      	cmp	r0, #0
 8007852:	f000 82d2 	beq.w	8007dfa <__kernel_rem_pio2f+0xb86>
 8007856:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800785a:	4628      	mov	r0, r5
 800785c:	f7f9 f984 	bl	8000b68 <__aeabi_fmul>
 8007860:	f7f9 fb48 	bl	8000ef4 <__aeabi_f2iz>
 8007864:	f7f9 f92c 	bl	8000ac0 <__aeabi_i2f>
 8007868:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800786c:	4607      	mov	r7, r0
 800786e:	f7f9 f97b 	bl	8000b68 <__aeabi_fmul>
 8007872:	4601      	mov	r1, r0
 8007874:	4628      	mov	r0, r5
 8007876:	f7f9 f86d 	bl	8000954 <__aeabi_fsub>
 800787a:	f7f9 fb3b 	bl	8000ef4 <__aeabi_f2iz>
 800787e:	a90e      	add	r1, sp, #56	; 0x38
 8007880:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
 8007884:	4638      	mov	r0, r7
 8007886:	f7f9 fb35 	bl	8000ef4 <__aeabi_f2iz>
 800788a:	9a07      	ldr	r2, [sp, #28]
 800788c:	3601      	adds	r6, #1
 800788e:	3208      	adds	r2, #8
 8007890:	ac0e      	add	r4, sp, #56	; 0x38
 8007892:	9207      	str	r2, [sp, #28]
 8007894:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8007898:	e034      	b.n	8007904 <__kernel_rem_pio2f+0x690>
 800789a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800789e:	f7f9 fb15 	bl	8000ecc <__aeabi_fcmpge>
 80078a2:	b958      	cbnz	r0, 80078bc <__kernel_rem_pio2f+0x648>
 80078a4:	2400      	movs	r4, #0
 80078a6:	e6cc      	b.n	8007642 <__kernel_rem_pio2f+0x3ce>
 80078a8:	f04f 0800 	mov.w	r8, #0
 80078ac:	9802      	ldr	r0, [sp, #8]
 80078ae:	f847 8f04 	str.w	r8, [r7, #4]!
 80078b2:	3601      	adds	r6, #1
 80078b4:	4287      	cmp	r7, r0
 80078b6:	f47f ad5d 	bne.w	8007374 <__kernel_rem_pio2f+0x100>
 80078ba:	e5a8      	b.n	800740e <__kernel_rem_pio2f+0x19a>
 80078bc:	2402      	movs	r4, #2
 80078be:	2e00      	cmp	r6, #0
 80078c0:	f109 0901 	add.w	r9, r9, #1
 80078c4:	f73f ae6c 	bgt.w	80075a0 <__kernel_rem_pio2f+0x32c>
 80078c8:	2500      	movs	r5, #0
 80078ca:	e6a6      	b.n	800761a <__kernel_rem_pio2f+0x3a6>
 80078cc:	2000      	movs	r0, #0
 80078ce:	e502      	b.n	80072d6 <__kernel_rem_pio2f+0x62>
 80078d0:	2000      	movs	r0, #0
 80078d2:	e510      	b.n	80072f6 <__kernel_rem_pio2f+0x82>
 80078d4:	2301      	movs	r3, #1
 80078d6:	e6f5      	b.n	80076c4 <__kernel_rem_pio2f+0x450>
 80078d8:	9a07      	ldr	r2, [sp, #28]
 80078da:	ae0e      	add	r6, sp, #56	; 0x38
 80078dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078e0:	3a08      	subs	r2, #8
 80078e2:	f8cd 9010 	str.w	r9, [sp, #16]
 80078e6:	9402      	str	r4, [sp, #8]
 80078e8:	9207      	str	r2, [sp, #28]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f040 828e 	bne.w	8007e0c <__kernel_rem_pio2f+0xb98>
 80078f0:	eb06 0485 	add.w	r4, r6, r5, lsl #2
 80078f4:	462e      	mov	r6, r5
 80078f6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078fa:	3e01      	subs	r6, #1
 80078fc:	3a08      	subs	r2, #8
 80078fe:	2d00      	cmp	r5, #0
 8007900:	d0f9      	beq.n	80078f6 <__kernel_rem_pio2f+0x682>
 8007902:	9207      	str	r2, [sp, #28]
 8007904:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007908:	9907      	ldr	r1, [sp, #28]
 800790a:	f000 fc7d 	bl	8008208 <scalbnf>
 800790e:	2e00      	cmp	r6, #0
 8007910:	4604      	mov	r4, r0
 8007912:	f2c0 80ac 	blt.w	8007a6e <__kernel_rem_pio2f+0x7fa>
 8007916:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800791a:	ebc6 7b86 	rsb	fp, r6, r6, lsl #30
 800791e:	af0e      	add	r7, sp, #56	; 0x38
 8007920:	ea4f 098b 	mov.w	r9, fp, lsl #2
 8007924:	4457      	add	r7, sl
 8007926:	f1c9 0300 	rsb	r3, r9, #0
 800792a:	a94a      	add	r1, sp, #296	; 0x128
 800792c:	6838      	ldr	r0, [r7, #0]
 800792e:	eb01 080a 	add.w	r8, r1, sl
 8007932:	f3c3 0b80 	ubfx	fp, r3, #2, #1
 8007936:	f7f9 f8c3 	bl	8000ac0 <__aeabi_i2f>
 800793a:	4621      	mov	r1, r4
 800793c:	f7f9 f914 	bl	8000b68 <__aeabi_fmul>
 8007940:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8007944:	f8c8 0000 	str.w	r0, [r8]
 8007948:	4620      	mov	r0, r4
 800794a:	f7f9 f90d 	bl	8000b68 <__aeabi_fmul>
 800794e:	f1a9 0904 	sub.w	r9, r9, #4
 8007952:	f06f 0a03 	mvn.w	sl, #3
 8007956:	45ca      	cmp	sl, r9
 8007958:	4605      	mov	r5, r0
 800795a:	d031      	beq.n	80079c0 <__kernel_rem_pio2f+0x74c>
 800795c:	f1bb 0f00 	cmp.w	fp, #0
 8007960:	d00b      	beq.n	800797a <__kernel_rem_pio2f+0x706>
 8007962:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8007966:	f7f9 f8ab 	bl	8000ac0 <__aeabi_i2f>
 800796a:	4629      	mov	r1, r5
 800796c:	f7f9 f8fc 	bl	8000b68 <__aeabi_fmul>
 8007970:	f06f 0a07 	mvn.w	sl, #7
 8007974:	f848 0c04 	str.w	r0, [r8, #-4]
 8007978:	e01a      	b.n	80079b0 <__kernel_rem_pio2f+0x73c>
 800797a:	f857 000a 	ldr.w	r0, [r7, sl]
 800797e:	f7f9 f89f 	bl	8000ac0 <__aeabi_i2f>
 8007982:	4629      	mov	r1, r5
 8007984:	f7f9 f8f0 	bl	8000b68 <__aeabi_fmul>
 8007988:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800798c:	f848 000a 	str.w	r0, [r8, sl]
 8007990:	4628      	mov	r0, r5
 8007992:	f7f9 f8e9 	bl	8000b68 <__aeabi_fmul>
 8007996:	f1aa 0404 	sub.w	r4, sl, #4
 800799a:	4605      	mov	r5, r0
 800799c:	5938      	ldr	r0, [r7, r4]
 800799e:	f7f9 f88f 	bl	8000ac0 <__aeabi_i2f>
 80079a2:	4629      	mov	r1, r5
 80079a4:	f7f9 f8e0 	bl	8000b68 <__aeabi_fmul>
 80079a8:	f1aa 0a08 	sub.w	sl, sl, #8
 80079ac:	f848 0004 	str.w	r0, [r8, r4]
 80079b0:	4628      	mov	r0, r5
 80079b2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80079b6:	f7f9 f8d7 	bl	8000b68 <__aeabi_fmul>
 80079ba:	45ca      	cmp	sl, r9
 80079bc:	4605      	mov	r5, r0
 80079be:	d1dc      	bne.n	800797a <__kernel_rem_pio2f+0x706>
 80079c0:	1c70      	adds	r0, r6, #1
 80079c2:	f8df 944c 	ldr.w	r9, [pc, #1100]	; 8007e10 <__kernel_rem_pio2f+0xb9c>
 80079c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80079ca:	9003      	str	r0, [sp, #12]
 80079cc:	2700      	movs	r7, #0
 80079ce:	9605      	str	r6, [sp, #20]
 80079d0:	f1ba 0f00 	cmp.w	sl, #0
 80079d4:	f2c0 8205 	blt.w	8007de2 <__kernel_rem_pio2f+0xb6e>
 80079d8:	2f00      	cmp	r7, #0
 80079da:	f2c0 8202 	blt.w	8007de2 <__kernel_rem_pio2f+0xb6e>
 80079de:	2600      	movs	r6, #0
 80079e0:	2400      	movs	r4, #0
 80079e2:	f01a 0f01 	tst.w	sl, #1
 80079e6:	4635      	mov	r5, r6
 80079e8:	d020      	beq.n	8007a2c <__kernel_rem_pio2f+0x7b8>
 80079ea:	f8d8 1000 	ldr.w	r1, [r8]
 80079ee:	f8d9 0000 	ldr.w	r0, [r9]
 80079f2:	f7f9 f8b9 	bl	8000b68 <__aeabi_fmul>
 80079f6:	4601      	mov	r1, r0
 80079f8:	4620      	mov	r0, r4
 80079fa:	f7f8 ffad 	bl	8000958 <__addsf3>
 80079fe:	2501      	movs	r5, #1
 8007a00:	45aa      	cmp	sl, r5
 8007a02:	4604      	mov	r4, r0
 8007a04:	db26      	blt.n	8007a54 <__kernel_rem_pio2f+0x7e0>
 8007a06:	2604      	movs	r6, #4
 8007a08:	42bd      	cmp	r5, r7
 8007a0a:	dd0f      	ble.n	8007a2c <__kernel_rem_pio2f+0x7b8>
 8007a0c:	e022      	b.n	8007a54 <__kernel_rem_pio2f+0x7e0>
 8007a0e:	45bb      	cmp	fp, r7
 8007a10:	dc20      	bgt.n	8007a54 <__kernel_rem_pio2f+0x7e0>
 8007a12:	f858 1002 	ldr.w	r1, [r8, r2]
 8007a16:	f859 0002 	ldr.w	r0, [r9, r2]
 8007a1a:	f7f9 f8a5 	bl	8000b68 <__aeabi_fmul>
 8007a1e:	4601      	mov	r1, r0
 8007a20:	4620      	mov	r0, r4
 8007a22:	f7f8 ff99 	bl	8000958 <__addsf3>
 8007a26:	42bd      	cmp	r5, r7
 8007a28:	4604      	mov	r4, r0
 8007a2a:	dc13      	bgt.n	8007a54 <__kernel_rem_pio2f+0x7e0>
 8007a2c:	f858 1006 	ldr.w	r1, [r8, r6]
 8007a30:	f859 0006 	ldr.w	r0, [r9, r6]
 8007a34:	f7f9 f898 	bl	8000b68 <__aeabi_fmul>
 8007a38:	4601      	mov	r1, r0
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f7f8 ff8c 	bl	8000958 <__addsf3>
 8007a40:	f105 0b01 	add.w	fp, r5, #1
 8007a44:	f106 0204 	add.w	r2, r6, #4
 8007a48:	3502      	adds	r5, #2
 8007a4a:	45da      	cmp	sl, fp
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	f102 0604 	add.w	r6, r2, #4
 8007a52:	dadc      	bge.n	8007a0e <__kernel_rem_pio2f+0x79a>
 8007a54:	ab5e      	add	r3, sp, #376	; 0x178
 8007a56:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007a5a:	eb03 0187 	add.w	r1, r3, r7, lsl #2
 8007a5e:	3701      	adds	r7, #1
 8007a60:	4567      	cmp	r7, ip
 8007a62:	f841 4ca0 	str.w	r4, [r1, #-160]
 8007a66:	f1a8 0804 	sub.w	r8, r8, #4
 8007a6a:	d1b1      	bne.n	80079d0 <__kernel_rem_pio2f+0x75c>
 8007a6c:	9e05      	ldr	r6, [sp, #20]
 8007a6e:	9c68      	ldr	r4, [sp, #416]	; 0x1a0
 8007a70:	2c03      	cmp	r4, #3
 8007a72:	d816      	bhi.n	8007aa2 <__kernel_rem_pio2f+0x82e>
 8007a74:	e8df f014 	tbh	[pc, r4, lsl #1]
 8007a78:	011f0185 	.word	0x011f0185
 8007a7c:	001b011f 	.word	0x001b011f
 8007a80:	2300      	movs	r3, #0
 8007a82:	9902      	ldr	r1, [sp, #8]
 8007a84:	2900      	cmp	r1, #0
 8007a86:	f000 810b 	beq.w	8007ca0 <__kernel_rem_pio2f+0xa2c>
 8007a8a:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 8007a8c:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8007a8e:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 8007a92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a94:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8007a98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007a9c:	6025      	str	r5, [r4, #0]
 8007a9e:	6062      	str	r2, [r4, #4]
 8007aa0:	60a3      	str	r3, [r4, #8]
 8007aa2:	9d04      	ldr	r5, [sp, #16]
 8007aa4:	f005 0007 	and.w	r0, r5, #7
 8007aa8:	b05f      	add	sp, #380	; 0x17c
 8007aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aae:	2e00      	cmp	r6, #0
 8007ab0:	dde6      	ble.n	8007a80 <__kernel_rem_pio2f+0x80c>
 8007ab2:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8007ab6:	af36      	add	r7, sp, #216	; 0xd8
 8007ab8:	eb07 0988 	add.w	r9, r7, r8, lsl #2
 8007abc:	464d      	mov	r5, r9
 8007abe:	f855 2904 	ldr.w	r2, [r5], #-4
 8007ac2:	f10d 0ad4 	add.w	sl, sp, #212	; 0xd4
 8007ac6:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8007aca:	4610      	mov	r0, r2
 8007acc:	4659      	mov	r1, fp
 8007ace:	9201      	str	r2, [sp, #4]
 8007ad0:	f7f8 ff42 	bl	8000958 <__addsf3>
 8007ad4:	4680      	mov	r8, r0
 8007ad6:	4641      	mov	r1, r8
 8007ad8:	9801      	ldr	r0, [sp, #4]
 8007ada:	f7f8 ff3b 	bl	8000954 <__aeabi_fsub>
 8007ade:	4601      	mov	r1, r0
 8007ae0:	4658      	mov	r0, fp
 8007ae2:	f7f8 ff39 	bl	8000958 <__addsf3>
 8007ae6:	4555      	cmp	r5, sl
 8007ae8:	f3c9 0380 	ubfx	r3, r9, #2, #1
 8007aec:	60a8      	str	r0, [r5, #8]
 8007aee:	f8c5 8004 	str.w	r8, [r5, #4]
 8007af2:	d044      	beq.n	8007b7e <__kernel_rem_pio2f+0x90a>
 8007af4:	b1bb      	cbz	r3, 8007b26 <__kernel_rem_pio2f+0x8b2>
 8007af6:	f855 2904 	ldr.w	r2, [r5], #-4
 8007afa:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8007afe:	4610      	mov	r0, r2
 8007b00:	4659      	mov	r1, fp
 8007b02:	9201      	str	r2, [sp, #4]
 8007b04:	f7f8 ff28 	bl	8000958 <__addsf3>
 8007b08:	9901      	ldr	r1, [sp, #4]
 8007b0a:	4680      	mov	r8, r0
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	4641      	mov	r1, r8
 8007b10:	f7f8 ff20 	bl	8000954 <__aeabi_fsub>
 8007b14:	4601      	mov	r1, r0
 8007b16:	4658      	mov	r0, fp
 8007b18:	f7f8 ff1e 	bl	8000958 <__addsf3>
 8007b1c:	4555      	cmp	r5, sl
 8007b1e:	f8c5 8004 	str.w	r8, [r5, #4]
 8007b22:	60a8      	str	r0, [r5, #8]
 8007b24:	d02b      	beq.n	8007b7e <__kernel_rem_pio2f+0x90a>
 8007b26:	462c      	mov	r4, r5
 8007b28:	f854 3904 	ldr.w	r3, [r4], #-4
 8007b2c:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8007b30:	4618      	mov	r0, r3
 8007b32:	4659      	mov	r1, fp
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	f7f8 ff0f 	bl	8000958 <__addsf3>
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	4641      	mov	r1, r8
 8007b3e:	9801      	ldr	r0, [sp, #4]
 8007b40:	f7f8 ff08 	bl	8000954 <__aeabi_fsub>
 8007b44:	4601      	mov	r1, r0
 8007b46:	4658      	mov	r0, fp
 8007b48:	f7f8 ff06 	bl	8000958 <__addsf3>
 8007b4c:	f8c4 8004 	str.w	r8, [r4, #4]
 8007b50:	60a0      	str	r0, [r4, #8]
 8007b52:	f855 bc04 	ldr.w	fp, [r5, #-4]
 8007b56:	1f25      	subs	r5, r4, #4
 8007b58:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8007b5c:	4658      	mov	r0, fp
 8007b5e:	4641      	mov	r1, r8
 8007b60:	f7f8 fefa 	bl	8000958 <__addsf3>
 8007b64:	4604      	mov	r4, r0
 8007b66:	4621      	mov	r1, r4
 8007b68:	4658      	mov	r0, fp
 8007b6a:	f7f8 fef3 	bl	8000954 <__aeabi_fsub>
 8007b6e:	4601      	mov	r1, r0
 8007b70:	4640      	mov	r0, r8
 8007b72:	f7f8 fef1 	bl	8000958 <__addsf3>
 8007b76:	4555      	cmp	r5, sl
 8007b78:	606c      	str	r4, [r5, #4]
 8007b7a:	60a8      	str	r0, [r5, #8]
 8007b7c:	d1d3      	bne.n	8007b26 <__kernel_rem_pio2f+0x8b2>
 8007b7e:	2e01      	cmp	r6, #1
 8007b80:	f77f af7e 	ble.w	8007a80 <__kernel_rem_pio2f+0x80c>
 8007b84:	464d      	mov	r5, r9
 8007b86:	f855 b904 	ldr.w	fp, [r5], #-4
 8007b8a:	ebc7 0e09 	rsb	lr, r7, r9
 8007b8e:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8007b92:	4658      	mov	r0, fp
 8007b94:	4651      	mov	r1, sl
 8007b96:	f1ae 0904 	sub.w	r9, lr, #4
 8007b9a:	f7f8 fedd 	bl	8000958 <__addsf3>
 8007b9e:	4680      	mov	r8, r0
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	4658      	mov	r0, fp
 8007ba4:	f7f8 fed6 	bl	8000954 <__aeabi_fsub>
 8007ba8:	4601      	mov	r1, r0
 8007baa:	4650      	mov	r0, sl
 8007bac:	f7f8 fed4 	bl	8000958 <__addsf3>
 8007bb0:	42bd      	cmp	r5, r7
 8007bb2:	f3c9 0980 	ubfx	r9, r9, #2, #1
 8007bb6:	f8c5 8004 	str.w	r8, [r5, #4]
 8007bba:	60a8      	str	r0, [r5, #8]
 8007bbc:	d043      	beq.n	8007c46 <__kernel_rem_pio2f+0x9d2>
 8007bbe:	f1b9 0f00 	cmp.w	r9, #0
 8007bc2:	d015      	beq.n	8007bf0 <__kernel_rem_pio2f+0x97c>
 8007bc4:	f855 a904 	ldr.w	sl, [r5], #-4
 8007bc8:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8007bcc:	4650      	mov	r0, sl
 8007bce:	4649      	mov	r1, r9
 8007bd0:	f7f8 fec2 	bl	8000958 <__addsf3>
 8007bd4:	4680      	mov	r8, r0
 8007bd6:	4641      	mov	r1, r8
 8007bd8:	4650      	mov	r0, sl
 8007bda:	f7f8 febb 	bl	8000954 <__aeabi_fsub>
 8007bde:	4601      	mov	r1, r0
 8007be0:	4648      	mov	r0, r9
 8007be2:	f7f8 feb9 	bl	8000958 <__addsf3>
 8007be6:	42bd      	cmp	r5, r7
 8007be8:	f8c5 8004 	str.w	r8, [r5, #4]
 8007bec:	60a8      	str	r0, [r5, #8]
 8007bee:	d02a      	beq.n	8007c46 <__kernel_rem_pio2f+0x9d2>
 8007bf0:	462c      	mov	r4, r5
 8007bf2:	f854 a904 	ldr.w	sl, [r4], #-4
 8007bf6:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8007bfa:	4650      	mov	r0, sl
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	f7f8 feab 	bl	8000958 <__addsf3>
 8007c02:	4680      	mov	r8, r0
 8007c04:	4641      	mov	r1, r8
 8007c06:	4650      	mov	r0, sl
 8007c08:	f7f8 fea4 	bl	8000954 <__aeabi_fsub>
 8007c0c:	4601      	mov	r1, r0
 8007c0e:	4648      	mov	r0, r9
 8007c10:	f7f8 fea2 	bl	8000958 <__addsf3>
 8007c14:	f8c4 8004 	str.w	r8, [r4, #4]
 8007c18:	60a0      	str	r0, [r4, #8]
 8007c1a:	f855 9c04 	ldr.w	r9, [r5, #-4]
 8007c1e:	1f25      	subs	r5, r4, #4
 8007c20:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8007c24:	4648      	mov	r0, r9
 8007c26:	4641      	mov	r1, r8
 8007c28:	f7f8 fe96 	bl	8000958 <__addsf3>
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4648      	mov	r0, r9
 8007c32:	f7f8 fe8f 	bl	8000954 <__aeabi_fsub>
 8007c36:	4601      	mov	r1, r0
 8007c38:	4640      	mov	r0, r8
 8007c3a:	f7f8 fe8d 	bl	8000958 <__addsf3>
 8007c3e:	42bd      	cmp	r5, r7
 8007c40:	606c      	str	r4, [r5, #4]
 8007c42:	60a8      	str	r0, [r5, #8]
 8007c44:	d1d4      	bne.n	8007bf0 <__kernel_rem_pio2f+0x97c>
 8007c46:	3601      	adds	r6, #1
 8007c48:	eb07 0786 	add.w	r7, r7, r6, lsl #2
 8007c4c:	3508      	adds	r5, #8
 8007c4e:	463e      	mov	r6, r7
 8007c50:	1b7a      	subs	r2, r7, r5
 8007c52:	1f13      	subs	r3, r2, #4
 8007c54:	f856 1d04 	ldr.w	r1, [r6, #-4]!
 8007c58:	2000      	movs	r0, #0
 8007c5a:	f3c3 0780 	ubfx	r7, r3, #2, #1
 8007c5e:	f7f8 fe7b 	bl	8000958 <__addsf3>
 8007c62:	42ae      	cmp	r6, r5
 8007c64:	4603      	mov	r3, r0
 8007c66:	f43f af0c 	beq.w	8007a82 <__kernel_rem_pio2f+0x80e>
 8007c6a:	b13f      	cbz	r7, 8007c7c <__kernel_rem_pio2f+0xa08>
 8007c6c:	f856 1d04 	ldr.w	r1, [r6, #-4]!
 8007c70:	f7f8 fe72 	bl	8000958 <__addsf3>
 8007c74:	42ae      	cmp	r6, r5
 8007c76:	4603      	mov	r3, r0
 8007c78:	f43f af03 	beq.w	8007a82 <__kernel_rem_pio2f+0x80e>
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8007c82:	1f34      	subs	r4, r6, #4
 8007c84:	f7f8 fe68 	bl	8000958 <__addsf3>
 8007c88:	3e08      	subs	r6, #8
 8007c8a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007c8e:	f7f8 fe63 	bl	8000958 <__addsf3>
 8007c92:	42ae      	cmp	r6, r5
 8007c94:	d1f3      	bne.n	8007c7e <__kernel_rem_pio2f+0xa0a>
 8007c96:	9902      	ldr	r1, [sp, #8]
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2900      	cmp	r1, #0
 8007c9c:	f47f aef5 	bne.w	8007a8a <__kernel_rem_pio2f+0x816>
 8007ca0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8007ca4:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8007ca6:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8007ca8:	f8cc 1000 	str.w	r1, [ip]
 8007cac:	f8cc 0004 	str.w	r0, [ip, #4]
 8007cb0:	f8cc 3008 	str.w	r3, [ip, #8]
 8007cb4:	e6f5      	b.n	8007aa2 <__kernel_rem_pio2f+0x82e>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	2e00      	cmp	r6, #0
 8007cba:	db29      	blt.n	8007d10 <__kernel_rem_pio2f+0xa9c>
 8007cbc:	af36      	add	r7, sp, #216	; 0xd8
 8007cbe:	1c75      	adds	r5, r6, #1
 8007cc0:	eb07 0485 	add.w	r4, r7, r5, lsl #2
 8007cc4:	4625      	mov	r5, r4
 8007cc6:	1be2      	subs	r2, r4, r7
 8007cc8:	f855 1d04 	ldr.w	r1, [r5, #-4]!
 8007ccc:	f1a2 0e04 	sub.w	lr, r2, #4
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	f3ce 0880 	ubfx	r8, lr, #2, #1
 8007cd6:	f7f8 fe3f 	bl	8000958 <__addsf3>
 8007cda:	42bd      	cmp	r5, r7
 8007cdc:	4603      	mov	r3, r0
 8007cde:	d017      	beq.n	8007d10 <__kernel_rem_pio2f+0xa9c>
 8007ce0:	f1b8 0f00 	cmp.w	r8, #0
 8007ce4:	d006      	beq.n	8007cf4 <__kernel_rem_pio2f+0xa80>
 8007ce6:	f855 1d04 	ldr.w	r1, [r5, #-4]!
 8007cea:	f7f8 fe35 	bl	8000958 <__addsf3>
 8007cee:	42bd      	cmp	r5, r7
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	d00d      	beq.n	8007d10 <__kernel_rem_pio2f+0xa9c>
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8007cfa:	1f2c      	subs	r4, r5, #4
 8007cfc:	f7f8 fe2c 	bl	8000958 <__addsf3>
 8007d00:	3d08      	subs	r5, #8
 8007d02:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007d06:	f7f8 fe27 	bl	8000958 <__addsf3>
 8007d0a:	42bd      	cmp	r5, r7
 8007d0c:	d1f3      	bne.n	8007cf6 <__kernel_rem_pio2f+0xa82>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	9902      	ldr	r1, [sp, #8]
 8007d12:	2900      	cmp	r1, #0
 8007d14:	d067      	beq.n	8007de6 <__kernel_rem_pio2f+0xb72>
 8007d16:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 8007d1a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8007d1e:	4619      	mov	r1, r3
 8007d20:	f8cc 0000 	str.w	r0, [ip]
 8007d24:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8007d26:	f7f8 fe15 	bl	8000954 <__aeabi_fsub>
 8007d2a:	2e00      	cmp	r6, #0
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	dd21      	ble.n	8007d74 <__kernel_rem_pio2f+0xb00>
 8007d30:	af36      	add	r7, sp, #216	; 0xd8
 8007d32:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 8007d36:	1bf5      	subs	r5, r6, r7
 8007d38:	1f2a      	subs	r2, r5, #4
 8007d3a:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8007d3c:	f3c2 0780 	ubfx	r7, r2, #2, #1
 8007d40:	f7f8 fe0a 	bl	8000958 <__addsf3>
 8007d44:	ac37      	add	r4, sp, #220	; 0xdc
 8007d46:	42b4      	cmp	r4, r6
 8007d48:	4603      	mov	r3, r0
 8007d4a:	d013      	beq.n	8007d74 <__kernel_rem_pio2f+0xb00>
 8007d4c:	b137      	cbz	r7, 8007d5c <__kernel_rem_pio2f+0xae8>
 8007d4e:	6861      	ldr	r1, [r4, #4]
 8007d50:	f7f8 fe02 	bl	8000958 <__addsf3>
 8007d54:	ac38      	add	r4, sp, #224	; 0xe0
 8007d56:	42b4      	cmp	r4, r6
 8007d58:	4603      	mov	r3, r0
 8007d5a:	d00b      	beq.n	8007d74 <__kernel_rem_pio2f+0xb00>
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8007d62:	f7f8 fdf9 	bl	8000958 <__addsf3>
 8007d66:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8007d6a:	f7f8 fdf5 	bl	8000958 <__addsf3>
 8007d6e:	42b4      	cmp	r4, r6
 8007d70:	d1f5      	bne.n	8007d5e <__kernel_rem_pio2f+0xaea>
 8007d72:	4603      	mov	r3, r0
 8007d74:	9902      	ldr	r1, [sp, #8]
 8007d76:	b109      	cbz	r1, 8007d7c <__kernel_rem_pio2f+0xb08>
 8007d78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007d7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d7e:	6063      	str	r3, [r4, #4]
 8007d80:	e68f      	b.n	8007aa2 <__kernel_rem_pio2f+0x82e>
 8007d82:	2e00      	cmp	r6, #0
 8007d84:	db40      	blt.n	8007e08 <__kernel_rem_pio2f+0xb94>
 8007d86:	af36      	add	r7, sp, #216	; 0xd8
 8007d88:	3601      	adds	r6, #1
 8007d8a:	eb07 0086 	add.w	r0, r7, r6, lsl #2
 8007d8e:	4605      	mov	r5, r0
 8007d90:	1bc2      	subs	r2, r0, r7
 8007d92:	f855 1d04 	ldr.w	r1, [r5, #-4]!
 8007d96:	2000      	movs	r0, #0
 8007d98:	1f14      	subs	r4, r2, #4
 8007d9a:	f7f8 fddd 	bl	8000958 <__addsf3>
 8007d9e:	42bd      	cmp	r5, r7
 8007da0:	f3c4 0680 	ubfx	r6, r4, #2, #1
 8007da4:	4603      	mov	r3, r0
 8007da6:	d015      	beq.n	8007dd4 <__kernel_rem_pio2f+0xb60>
 8007da8:	b136      	cbz	r6, 8007db8 <__kernel_rem_pio2f+0xb44>
 8007daa:	f855 1d04 	ldr.w	r1, [r5, #-4]!
 8007dae:	f7f8 fdd3 	bl	8000958 <__addsf3>
 8007db2:	42bd      	cmp	r5, r7
 8007db4:	4603      	mov	r3, r0
 8007db6:	d00d      	beq.n	8007dd4 <__kernel_rem_pio2f+0xb60>
 8007db8:	4618      	mov	r0, r3
 8007dba:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8007dbe:	1f2c      	subs	r4, r5, #4
 8007dc0:	f7f8 fdca 	bl	8000958 <__addsf3>
 8007dc4:	3d08      	subs	r5, #8
 8007dc6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007dca:	f7f8 fdc5 	bl	8000958 <__addsf3>
 8007dce:	42bd      	cmp	r5, r7
 8007dd0:	d1f3      	bne.n	8007dba <__kernel_rem_pio2f+0xb46>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	9902      	ldr	r1, [sp, #8]
 8007dd6:	b109      	cbz	r1, 8007ddc <__kernel_rem_pio2f+0xb68>
 8007dd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ddc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007dde:	6023      	str	r3, [r4, #0]
 8007de0:	e65f      	b.n	8007aa2 <__kernel_rem_pio2f+0x82e>
 8007de2:	2400      	movs	r4, #0
 8007de4:	e636      	b.n	8007a54 <__kernel_rem_pio2f+0x7e0>
 8007de6:	4618      	mov	r0, r3
 8007de8:	e797      	b.n	8007d1a <__kernel_rem_pio2f+0xaa6>
 8007dea:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8007dee:	0090      	lsls	r0, r2, #2
 8007df0:	9003      	str	r0, [sp, #12]
 8007df2:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
 8007df6:	f7ff bb0a 	b.w	800740e <__kernel_rem_pio2f+0x19a>
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f7f9 f87a 	bl	8000ef4 <__aeabi_f2iz>
 8007e00:	ab0e      	add	r3, sp, #56	; 0x38
 8007e02:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007e06:	e57d      	b.n	8007904 <__kernel_rem_pio2f+0x690>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e7e3      	b.n	8007dd4 <__kernel_rem_pio2f+0xb60>
 8007e0c:	462e      	mov	r6, r5
 8007e0e:	e579      	b.n	8007904 <__kernel_rem_pio2f+0x690>
 8007e10:	08008ccc 	.word	0x08008ccc

08007e14 <__kernel_sinf>:
 8007e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e18:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007e1c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007e20:	4604      	mov	r4, r0
 8007e22:	460f      	mov	r7, r1
 8007e24:	4690      	mov	r8, r2
 8007e26:	da03      	bge.n	8007e30 <__kernel_sinf+0x1c>
 8007e28:	f7f9 f864 	bl	8000ef4 <__aeabi_f2iz>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d059      	beq.n	8007ee4 <__kernel_sinf+0xd0>
 8007e30:	4621      	mov	r1, r4
 8007e32:	4620      	mov	r0, r4
 8007e34:	f7f8 fe98 	bl	8000b68 <__aeabi_fmul>
 8007e38:	4621      	mov	r1, r4
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	f7f8 fe94 	bl	8000b68 <__aeabi_fmul>
 8007e40:	f64c 11d3 	movw	r1, #51667	; 0xc9d3
 8007e44:	f6c2 712e 	movt	r1, #12078	; 0x2f2e
 8007e48:	4606      	mov	r6, r0
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f7f8 fe8c 	bl	8000b68 <__aeabi_fmul>
 8007e50:	f642 7134 	movw	r1, #12084	; 0x2f34
 8007e54:	f2c3 21d7 	movt	r1, #13015	; 0x32d7
 8007e58:	f7f8 fd7c 	bl	8000954 <__aeabi_fsub>
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	f7f8 fe83 	bl	8000b68 <__aeabi_fmul>
 8007e62:	f64e 711b 	movw	r1, #61211	; 0xef1b
 8007e66:	f2c3 6138 	movt	r1, #13880	; 0x3638
 8007e6a:	f7f8 fd75 	bl	8000958 <__addsf3>
 8007e6e:	4629      	mov	r1, r5
 8007e70:	f7f8 fe7a 	bl	8000b68 <__aeabi_fmul>
 8007e74:	f640 5101 	movw	r1, #3329	; 0xd01
 8007e78:	f6c3 1150 	movt	r1, #14672	; 0x3950
 8007e7c:	f7f8 fd6a 	bl	8000954 <__aeabi_fsub>
 8007e80:	4629      	mov	r1, r5
 8007e82:	f7f8 fe71 	bl	8000b68 <__aeabi_fmul>
 8007e86:	f648 0189 	movw	r1, #34953	; 0x8889
 8007e8a:	f6c3 4108 	movt	r1, #15368	; 0x3c08
 8007e8e:	f7f8 fd63 	bl	8000958 <__addsf3>
 8007e92:	4681      	mov	r9, r0
 8007e94:	f1b8 0f00 	cmp.w	r8, #0
 8007e98:	d027      	beq.n	8007eea <__kernel_sinf+0xd6>
 8007e9a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f7f8 fe62 	bl	8000b68 <__aeabi_fmul>
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	4680      	mov	r8, r0
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7f8 fe5d 	bl	8000b68 <__aeabi_fmul>
 8007eae:	4601      	mov	r1, r0
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	f7f8 fd4f 	bl	8000954 <__aeabi_fsub>
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	f7f8 fe56 	bl	8000b68 <__aeabi_fmul>
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	f7f8 fd49 	bl	8000954 <__aeabi_fsub>
 8007ec2:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	f6c3 612a 	movt	r1, #15914	; 0x3e2a
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f7f8 fe4b 	bl	8000b68 <__aeabi_fmul>
 8007ed2:	4601      	mov	r1, r0
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	f7f8 fd3f 	bl	8000958 <__addsf3>
 8007eda:	4601      	mov	r1, r0
 8007edc:	4620      	mov	r0, r4
 8007ede:	f7f8 fd39 	bl	8000954 <__aeabi_fsub>
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eea:	4601      	mov	r1, r0
 8007eec:	4628      	mov	r0, r5
 8007eee:	f7f8 fe3b 	bl	8000b68 <__aeabi_fmul>
 8007ef2:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 8007ef6:	f6c3 612a 	movt	r1, #15914	; 0x3e2a
 8007efa:	f7f8 fd2b 	bl	8000954 <__aeabi_fsub>
 8007efe:	4631      	mov	r1, r6
 8007f00:	f7f8 fe32 	bl	8000b68 <__aeabi_fmul>
 8007f04:	4601      	mov	r1, r0
 8007f06:	4620      	mov	r0, r4
 8007f08:	f7f8 fd26 	bl	8000958 <__addsf3>
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	4620      	mov	r0, r4
 8007f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007f14 <atanf>:
 8007f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f18:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8007f1c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8007f20:	4604      	mov	r4, r0
 8007f22:	4606      	mov	r6, r0
 8007f24:	db0d      	blt.n	8007f42 <atanf+0x2e>
 8007f26:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007f2a:	f300 809c 	bgt.w	8008066 <atanf+0x152>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	f640 74db 	movw	r4, #4059	; 0xfdb
 8007f34:	f340 80d4 	ble.w	80080e0 <atanf+0x1cc>
 8007f38:	f6c3 74c9 	movt	r4, #16329	; 0x3fc9
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f46:	f6c3 63df 	movt	r3, #16095	; 0x3edf
 8007f4a:	429d      	cmp	r5, r3
 8007f4c:	f300 80a2 	bgt.w	8008094 <atanf+0x180>
 8007f50:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8007f54:	f2c0 808e 	blt.w	8008074 <atanf+0x160>
 8007f58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f7f8 fe02 	bl	8000b68 <__aeabi_fmul>
 8007f64:	4601      	mov	r1, r0
 8007f66:	4680      	mov	r8, r0
 8007f68:	f7f8 fdfe 	bl	8000b68 <__aeabi_fmul>
 8007f6c:	f646 11d7 	movw	r1, #27095	; 0x69d7
 8007f70:	f6c3 4185 	movt	r1, #15493	; 0x3c85
 8007f74:	4605      	mov	r5, r0
 8007f76:	f7f8 fdf7 	bl	8000b68 <__aeabi_fmul>
 8007f7a:	f64d 2159 	movw	r1, #55897	; 0xda59
 8007f7e:	f6c3 514b 	movt	r1, #15691	; 0x3d4b
 8007f82:	f7f8 fce9 	bl	8000958 <__addsf3>
 8007f86:	4629      	mov	r1, r5
 8007f88:	f7f8 fdee 	bl	8000b68 <__aeabi_fmul>
 8007f8c:	f646 3135 	movw	r1, #27445	; 0x6b35
 8007f90:	f6c3 5188 	movt	r1, #15752	; 0x3d88
 8007f94:	f7f8 fce0 	bl	8000958 <__addsf3>
 8007f98:	4629      	mov	r1, r5
 8007f9a:	f7f8 fde5 	bl	8000b68 <__aeabi_fmul>
 8007f9e:	f642 616e 	movw	r1, #11886	; 0x2e6e
 8007fa2:	f6c3 51ba 	movt	r1, #15802	; 0x3dba
 8007fa6:	f7f8 fcd7 	bl	8000958 <__addsf3>
 8007faa:	4629      	mov	r1, r5
 8007fac:	f7f8 fddc 	bl	8000b68 <__aeabi_fmul>
 8007fb0:	f644 1125 	movw	r1, #18725	; 0x4925
 8007fb4:	f6c3 6112 	movt	r1, #15890	; 0x3e12
 8007fb8:	f7f8 fcce 	bl	8000958 <__addsf3>
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	f7f8 fdd3 	bl	8000b68 <__aeabi_fmul>
 8007fc2:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 8007fc6:	f6c3 61aa 	movt	r1, #16042	; 0x3eaa
 8007fca:	f7f8 fcc5 	bl	8000958 <__addsf3>
 8007fce:	4641      	mov	r1, r8
 8007fd0:	f7f8 fdca 	bl	8000b68 <__aeabi_fmul>
 8007fd4:	f24a 2121 	movw	r1, #41505	; 0xa221
 8007fd8:	4680      	mov	r8, r0
 8007fda:	f6cb 5115 	movt	r1, #48405	; 0xbd15
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f7f8 fdc2 	bl	8000b68 <__aeabi_fmul>
 8007fe4:	f24f 116b 	movw	r1, #61803	; 0xf16b
 8007fe8:	f6c3 516e 	movt	r1, #15726	; 0x3d6e
 8007fec:	f7f8 fcb2 	bl	8000954 <__aeabi_fsub>
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	f7f8 fdb9 	bl	8000b68 <__aeabi_fmul>
 8007ff6:	f248 7195 	movw	r1, #34709	; 0x8795
 8007ffa:	f6c3 519d 	movt	r1, #15773	; 0x3d9d
 8007ffe:	f7f8 fca9 	bl	8000954 <__aeabi_fsub>
 8008002:	4629      	mov	r1, r5
 8008004:	f7f8 fdb0 	bl	8000b68 <__aeabi_fmul>
 8008008:	f648 6138 	movw	r1, #36408	; 0x8e38
 800800c:	f6c3 51e3 	movt	r1, #15843	; 0x3de3
 8008010:	f7f8 fca0 	bl	8000954 <__aeabi_fsub>
 8008014:	4629      	mov	r1, r5
 8008016:	f7f8 fda7 	bl	8000b68 <__aeabi_fmul>
 800801a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 800801e:	f6c3 614c 	movt	r1, #15948	; 0x3e4c
 8008022:	f7f8 fc97 	bl	8000954 <__aeabi_fsub>
 8008026:	4629      	mov	r1, r5
 8008028:	f7f8 fd9e 	bl	8000b68 <__aeabi_fmul>
 800802c:	1c7b      	adds	r3, r7, #1
 800802e:	4601      	mov	r1, r0
 8008030:	4640      	mov	r0, r8
 8008032:	d058      	beq.n	80080e6 <atanf+0x1d2>
 8008034:	f7f8 fc90 	bl	8000958 <__addsf3>
 8008038:	4621      	mov	r1, r4
 800803a:	f7f8 fd95 	bl	8000b68 <__aeabi_fmul>
 800803e:	4b49      	ldr	r3, [pc, #292]	; (8008164 <atanf+0x250>)
 8008040:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8008044:	f7f8 fc86 	bl	8000954 <__aeabi_fsub>
 8008048:	4621      	mov	r1, r4
 800804a:	f7f8 fc83 	bl	8000954 <__aeabi_fsub>
 800804e:	4601      	mov	r1, r0
 8008050:	4845      	ldr	r0, [pc, #276]	; (8008168 <atanf+0x254>)
 8008052:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 8008056:	f7f8 fc7d 	bl	8000954 <__aeabi_fsub>
 800805a:	2e00      	cmp	r6, #0
 800805c:	db3d      	blt.n	80080da <atanf+0x1c6>
 800805e:	4604      	mov	r4, r0
 8008060:	4620      	mov	r0, r4
 8008062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008066:	4601      	mov	r1, r0
 8008068:	f7f8 fc76 	bl	8000958 <__addsf3>
 800806c:	4604      	mov	r4, r0
 800806e:	4620      	mov	r0, r4
 8008070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008074:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 8008078:	f2c7 1149 	movt	r1, #29001	; 0x7149
 800807c:	f7f8 fc6c 	bl	8000958 <__addsf3>
 8008080:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008084:	f7f8 ff2c 	bl	8000ee0 <__aeabi_fcmpgt>
 8008088:	2800      	cmp	r0, #0
 800808a:	f43f af65 	beq.w	8007f58 <atanf+0x44>
 800808e:	4620      	mov	r0, r4
 8008090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008094:	f000 f86a 	bl	800816c <fabsf>
 8008098:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800809c:	f6c3 7197 	movt	r1, #16279	; 0x3f97
 80080a0:	428d      	cmp	r5, r1
 80080a2:	4604      	mov	r4, r0
 80080a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080a8:	dc28      	bgt.n	80080fc <atanf+0x1e8>
 80080aa:	f6c3 722f 	movt	r2, #16175	; 0x3f2f
 80080ae:	4295      	cmp	r5, r2
 80080b0:	dc46      	bgt.n	8008140 <atanf+0x22c>
 80080b2:	4601      	mov	r1, r0
 80080b4:	f7f8 fc50 	bl	8000958 <__addsf3>
 80080b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80080bc:	f7f8 fc4a 	bl	8000954 <__aeabi_fsub>
 80080c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80080c4:	4605      	mov	r5, r0
 80080c6:	4620      	mov	r0, r4
 80080c8:	f7f8 fc46 	bl	8000958 <__addsf3>
 80080cc:	4601      	mov	r1, r0
 80080ce:	4628      	mov	r0, r5
 80080d0:	f7f8 fdfe 	bl	8000cd0 <__aeabi_fdiv>
 80080d4:	2700      	movs	r7, #0
 80080d6:	4604      	mov	r4, r0
 80080d8:	e740      	b.n	8007f5c <atanf+0x48>
 80080da:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 80080de:	e72d      	b.n	8007f3c <atanf+0x28>
 80080e0:	f6cb 74c9 	movt	r4, #49097	; 0xbfc9
 80080e4:	e72a      	b.n	8007f3c <atanf+0x28>
 80080e6:	f7f8 fc37 	bl	8000958 <__addsf3>
 80080ea:	4621      	mov	r1, r4
 80080ec:	f7f8 fd3c 	bl	8000b68 <__aeabi_fmul>
 80080f0:	4601      	mov	r1, r0
 80080f2:	4620      	mov	r0, r4
 80080f4:	f7f8 fc2e 	bl	8000954 <__aeabi_fsub>
 80080f8:	4604      	mov	r4, r0
 80080fa:	e71f      	b.n	8007f3c <atanf+0x28>
 80080fc:	f2c4 021b 	movt	r2, #16411	; 0x401b
 8008100:	4295      	cmp	r5, r2
 8008102:	dc14      	bgt.n	800812e <atanf+0x21a>
 8008104:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008108:	f7f8 fc24 	bl	8000954 <__aeabi_fsub>
 800810c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008110:	4605      	mov	r5, r0
 8008112:	4620      	mov	r0, r4
 8008114:	f7f8 fd28 	bl	8000b68 <__aeabi_fmul>
 8008118:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800811c:	f7f8 fc1c 	bl	8000958 <__addsf3>
 8008120:	4601      	mov	r1, r0
 8008122:	4628      	mov	r0, r5
 8008124:	f7f8 fdd4 	bl	8000cd0 <__aeabi_fdiv>
 8008128:	2702      	movs	r7, #2
 800812a:	4604      	mov	r4, r0
 800812c:	e716      	b.n	8007f5c <atanf+0x48>
 800812e:	2000      	movs	r0, #0
 8008130:	4621      	mov	r1, r4
 8008132:	f6cb 7080 	movt	r0, #49024	; 0xbf80
 8008136:	f7f8 fdcb 	bl	8000cd0 <__aeabi_fdiv>
 800813a:	2703      	movs	r7, #3
 800813c:	4604      	mov	r4, r0
 800813e:	e70d      	b.n	8007f5c <atanf+0x48>
 8008140:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008144:	f7f8 fc06 	bl	8000954 <__aeabi_fsub>
 8008148:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800814c:	4607      	mov	r7, r0
 800814e:	4620      	mov	r0, r4
 8008150:	f7f8 fc02 	bl	8000958 <__addsf3>
 8008154:	4601      	mov	r1, r0
 8008156:	4638      	mov	r0, r7
 8008158:	f7f8 fdba 	bl	8000cd0 <__aeabi_fdiv>
 800815c:	2701      	movs	r7, #1
 800815e:	4604      	mov	r4, r0
 8008160:	e6fc      	b.n	8007f5c <atanf+0x48>
 8008162:	bf00      	nop
 8008164:	08008cf8 	.word	0x08008cf8
 8008168:	08008d08 	.word	0x08008d08

0800816c <fabsf>:
 800816c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop

08008174 <floorf>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800817a:	0df5      	lsrs	r5, r6, #23
 800817c:	3d7f      	subs	r5, #127	; 0x7f
 800817e:	2d16      	cmp	r5, #22
 8008180:	4601      	mov	r1, r0
 8008182:	4604      	mov	r4, r0
 8008184:	dc1b      	bgt.n	80081be <floorf+0x4a>
 8008186:	2d00      	cmp	r5, #0
 8008188:	4607      	mov	r7, r0
 800818a:	db20      	blt.n	80081ce <floorf+0x5a>
 800818c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008190:	f2c0 037f 	movt	r3, #127	; 0x7f
 8008194:	fa43 f605 	asr.w	r6, r3, r5
 8008198:	4206      	tst	r6, r0
 800819a:	d00e      	beq.n	80081ba <floorf+0x46>
 800819c:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 80081a0:	f2c7 1149 	movt	r1, #29001	; 0x7149
 80081a4:	f7f8 fbd8 	bl	8000958 <__addsf3>
 80081a8:	2100      	movs	r1, #0
 80081aa:	f7f8 fe99 	bl	8000ee0 <__aeabi_fcmpgt>
 80081ae:	b118      	cbz	r0, 80081b8 <floorf+0x44>
 80081b0:	2c00      	cmp	r4, #0
 80081b2:	db1b      	blt.n	80081ec <floorf+0x78>
 80081b4:	ea27 0406 	bic.w	r4, r7, r6
 80081b8:	4621      	mov	r1, r4
 80081ba:	4608      	mov	r0, r1
 80081bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081be:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80081c2:	d3fa      	bcc.n	80081ba <floorf+0x46>
 80081c4:	f7f8 fbc8 	bl	8000958 <__addsf3>
 80081c8:	4601      	mov	r1, r0
 80081ca:	4608      	mov	r0, r1
 80081cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ce:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 80081d2:	f2c7 1149 	movt	r1, #29001	; 0x7149
 80081d6:	f7f8 fbbf 	bl	8000958 <__addsf3>
 80081da:	2100      	movs	r1, #0
 80081dc:	f7f8 fe80 	bl	8000ee0 <__aeabi_fcmpgt>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d0e9      	beq.n	80081b8 <floorf+0x44>
 80081e4:	2c00      	cmp	r4, #0
 80081e6:	db07      	blt.n	80081f8 <floorf+0x84>
 80081e8:	2400      	movs	r4, #0
 80081ea:	e7e5      	b.n	80081b8 <floorf+0x44>
 80081ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80081f0:	fa40 f505 	asr.w	r5, r0, r5
 80081f4:	1967      	adds	r7, r4, r5
 80081f6:	e7dd      	b.n	80081b4 <floorf+0x40>
 80081f8:	2100      	movs	r1, #0
 80081fa:	f6cb 7180 	movt	r1, #49024	; 0xbf80
 80081fe:	2e00      	cmp	r6, #0
 8008200:	bf18      	it	ne
 8008202:	460c      	movne	r4, r1
 8008204:	e7d8      	b.n	80081b8 <floorf+0x44>
 8008206:	bf00      	nop

08008208 <scalbnf>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	f030 4400 	bics.w	r4, r0, #2147483648	; 0x80000000
 800820e:	4603      	mov	r3, r0
 8008210:	4602      	mov	r2, r0
 8008212:	460d      	mov	r5, r1
 8008214:	d00f      	beq.n	8008236 <scalbnf+0x2e>
 8008216:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800821a:	d20e      	bcs.n	800823a <scalbnf+0x32>
 800821c:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8008220:	d311      	bcc.n	8008246 <scalbnf+0x3e>
 8008222:	0de4      	lsrs	r4, r4, #23
 8008224:	1964      	adds	r4, r4, r5
 8008226:	2cfe      	cmp	r4, #254	; 0xfe
 8008228:	dc33      	bgt.n	8008292 <scalbnf+0x8a>
 800822a:	2c00      	cmp	r4, #0
 800822c:	dd1b      	ble.n	8008266 <scalbnf+0x5e>
 800822e:	f022 41ff 	bic.w	r1, r2, #2139095040	; 0x7f800000
 8008232:	ea41 53c4 	orr.w	r3, r1, r4, lsl #23
 8008236:	4618      	mov	r0, r3
 8008238:	bd38      	pop	{r3, r4, r5, pc}
 800823a:	4601      	mov	r1, r0
 800823c:	f7f8 fb8c 	bl	8000958 <__addsf3>
 8008240:	4603      	mov	r3, r0
 8008242:	4618      	mov	r0, r3
 8008244:	bd38      	pop	{r3, r4, r5, pc}
 8008246:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800824a:	f7f8 fc8d 	bl	8000b68 <__aeabi_fmul>
 800824e:	f643 41b0 	movw	r1, #15536	; 0x3cb0
 8008252:	f6cf 71ff 	movt	r1, #65535	; 0xffff
 8008256:	428d      	cmp	r5, r1
 8008258:	4603      	mov	r3, r0
 800825a:	db12      	blt.n	8008282 <scalbnf+0x7a>
 800825c:	f3c0 54c7 	ubfx	r4, r0, #23, #8
 8008260:	4602      	mov	r2, r0
 8008262:	3c19      	subs	r4, #25
 8008264:	e7de      	b.n	8008224 <scalbnf+0x1c>
 8008266:	f114 0f16 	cmn.w	r4, #22
 800826a:	da21      	bge.n	80082b0 <scalbnf+0xa8>
 800826c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008270:	4295      	cmp	r5, r2
 8008272:	4619      	mov	r1, r3
 8008274:	dc0e      	bgt.n	8008294 <scalbnf+0x8c>
 8008276:	f244 2060 	movw	r0, #16992	; 0x4260
 800827a:	f6c0 50a2 	movt	r0, #3490	; 0xda2
 800827e:	f000 f823 	bl	80082c8 <copysignf>
 8008282:	f244 2160 	movw	r1, #16992	; 0x4260
 8008286:	f6c0 51a2 	movt	r1, #3490	; 0xda2
 800828a:	f7f8 fc6d 	bl	8000b68 <__aeabi_fmul>
 800828e:	4603      	mov	r3, r0
 8008290:	e7d1      	b.n	8008236 <scalbnf+0x2e>
 8008292:	4619      	mov	r1, r3
 8008294:	f24f 20ca 	movw	r0, #62154	; 0xf2ca
 8008298:	f2c7 1049 	movt	r0, #29001	; 0x7149
 800829c:	f000 f814 	bl	80082c8 <copysignf>
 80082a0:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 80082a4:	f2c7 1149 	movt	r1, #29001	; 0x7149
 80082a8:	f7f8 fc5e 	bl	8000b68 <__aeabi_fmul>
 80082ac:	4603      	mov	r3, r0
 80082ae:	e7c2      	b.n	8008236 <scalbnf+0x2e>
 80082b0:	f022 43ff 	bic.w	r3, r2, #2139095040	; 0x7f800000
 80082b4:	f104 0019 	add.w	r0, r4, #25
 80082b8:	ea43 50c0 	orr.w	r0, r3, r0, lsl #23
 80082bc:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80082c0:	f7f8 fc52 	bl	8000b68 <__aeabi_fmul>
 80082c4:	4603      	mov	r3, r0
 80082c6:	e7b6      	b.n	8008236 <scalbnf+0x2e>

080082c8 <copysignf>:
 80082c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80082cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80082d0:	4308      	orrs	r0, r1
 80082d2:	4770      	bx	lr
 80082d4:	252c6425 	.word	0x252c6425
 80082d8:	64252c64 	.word	0x64252c64
 80082dc:	2c64252c 	.word	0x2c64252c
 80082e0:	252c6425 	.word	0x252c6425
 80082e4:	64252c64 	.word	0x64252c64
 80082e8:	2c64252c 	.word	0x2c64252c
 80082ec:	252c6425 	.word	0x252c6425
 80082f0:	64252c64 	.word	0x64252c64
 80082f4:	00000a2c 	.word	0x00000a2c
 80082f8:	61726142 	.word	0x61726142
 80082fc:	000a206d 	.word	0x000a206d
 8008300:	00000a0a 	.word	0x00000a0a
 8008304:	2a2a2a2a 	.word	0x2a2a2a2a
 8008308:	2a2a2a2a 	.word	0x2a2a2a2a
 800830c:	2a2a2a2a 	.word	0x2a2a2a2a
 8008310:	2a2a2a2a 	.word	0x2a2a2a2a
 8008314:	2a2a2a2a 	.word	0x2a2a2a2a
 8008318:	2a2a2a2a 	.word	0x2a2a2a2a
 800831c:	2a2a2a2a 	.word	0x2a2a2a2a
 8008320:	2a2a2a2a 	.word	0x2a2a2a2a
 8008324:	2a2a2a2a 	.word	0x2a2a2a2a
 8008328:	2a2a2a2a 	.word	0x2a2a2a2a
 800832c:	2a2a2a2a 	.word	0x2a2a2a2a
 8008330:	2a2a2a2a 	.word	0x2a2a2a2a
 8008334:	2a2a2a2a 	.word	0x2a2a2a2a
 8008338:	0a2a2a2a 	.word	0x0a2a2a2a
 800833c:	00000000 	.word	0x00000000
 8008340:	20202020 	.word	0x20202020
 8008344:	20202020 	.word	0x20202020
 8008348:	20202020 	.word	0x20202020
 800834c:	20202020 	.word	0x20202020
 8008350:	20202020 	.word	0x20202020
 8008354:	504d2020 	.word	0x504d2020
 8008358:	35303655 	.word	0x35303655
 800835c:	20202030 	.word	0x20202030
 8008360:	20202020 	.word	0x20202020
 8008364:	20202020 	.word	0x20202020
 8008368:	20202020 	.word	0x20202020
 800836c:	20202020 	.word	0x20202020
 8008370:	20202020 	.word	0x20202020
 8008374:	0a202020 	.word	0x0a202020
 8008378:	00000000 	.word	0x00000000
 800837c:	2e31202a 	.word	0x2e31202a
 8008380:	44434c20 	.word	0x44434c20
 8008384:	656c4320 	.word	0x656c4320
 8008388:	20207261 	.word	0x20207261
 800838c:	20202020 	.word	0x20202020
 8008390:	20202020 	.word	0x20202020
 8008394:	20202020 	.word	0x20202020
 8008398:	20202020 	.word	0x20202020
 800839c:	20202020 	.word	0x20202020
 80083a0:	20202020 	.word	0x20202020
 80083a4:	20202020 	.word	0x20202020
 80083a8:	20202020 	.word	0x20202020
 80083ac:	20202020 	.word	0x20202020
 80083b0:	0a2a2020 	.word	0x0a2a2020
 80083b4:	00000000 	.word	0x00000000
 80083b8:	2e32202a 	.word	0x2e32202a
 80083bc:	6f685320 	.word	0x6f685320
 80083c0:	63412077 	.word	0x63412077
 80083c4:	20202063 	.word	0x20202063
 80083c8:	20202020 	.word	0x20202020
 80083cc:	20202020 	.word	0x20202020
 80083d0:	20202020 	.word	0x20202020
 80083d4:	20202020 	.word	0x20202020
 80083d8:	20202020 	.word	0x20202020
 80083dc:	20202020 	.word	0x20202020
 80083e0:	20202020 	.word	0x20202020
 80083e4:	20202020 	.word	0x20202020
 80083e8:	20202020 	.word	0x20202020
 80083ec:	0a2a2020 	.word	0x0a2a2020
 80083f0:	00000000 	.word	0x00000000
 80083f4:	2e33202a 	.word	0x2e33202a
 80083f8:	6f685320 	.word	0x6f685320
 80083fc:	504d2077 	.word	0x504d2077
 8008400:	35303655 	.word	0x35303655
 8008404:	65522030 	.word	0x65522030
 8008408:	20207367 	.word	0x20207367
 800840c:	20202020 	.word	0x20202020
 8008410:	20202020 	.word	0x20202020
 8008414:	20202020 	.word	0x20202020
 8008418:	20202020 	.word	0x20202020
 800841c:	20202020 	.word	0x20202020
 8008420:	20202020 	.word	0x20202020
 8008424:	20202020 	.word	0x20202020
 8008428:	0a2a2020 	.word	0x0a2a2020
 800842c:	00000000 	.word	0x00000000
 8008430:	2e34202a 	.word	0x2e34202a
 8008434:	6e6f5320 	.word	0x6e6f5320
 8008438:	20206369 	.word	0x20206369
 800843c:	20202020 	.word	0x20202020
 8008440:	20202020 	.word	0x20202020
 8008444:	20202020 	.word	0x20202020
 8008448:	20202020 	.word	0x20202020
 800844c:	20202020 	.word	0x20202020
 8008450:	20202020 	.word	0x20202020
 8008454:	20202020 	.word	0x20202020
 8008458:	20202020 	.word	0x20202020
 800845c:	20202020 	.word	0x20202020
 8008460:	20202020 	.word	0x20202020
 8008464:	0a2a2020 	.word	0x0a2a2020
 8008468:	00000000 	.word	0x00000000
 800846c:	2e35202a 	.word	0x2e35202a
 8008470:	6f685320 	.word	0x6f685320
 8008474:	6f432077 	.word	0x6f432077
 8008478:	7361706d 	.word	0x7361706d
 800847c:	20202073 	.word	0x20202073
 8008480:	20202020 	.word	0x20202020
 8008484:	20202020 	.word	0x20202020
 8008488:	20202020 	.word	0x20202020
 800848c:	20202020 	.word	0x20202020
 8008490:	20202020 	.word	0x20202020
 8008494:	20202020 	.word	0x20202020
 8008498:	20202020 	.word	0x20202020
 800849c:	20202020 	.word	0x20202020
 80084a0:	0a2a2020 	.word	0x0a2a2020
 80084a4:	00000000 	.word	0x00000000
 80084a8:	2e36202a 	.word	0x2e36202a
 80084ac:	6f685320 	.word	0x6f685320
 80084b0:	4d482077 	.word	0x4d482077
 80084b4:	38383543 	.word	0x38383543
 80084b8:	65522033 	.word	0x65522033
 80084bc:	20207367 	.word	0x20207367
 80084c0:	20202020 	.word	0x20202020
 80084c4:	20202020 	.word	0x20202020
 80084c8:	20202020 	.word	0x20202020
 80084cc:	20202020 	.word	0x20202020
 80084d0:	20202020 	.word	0x20202020
 80084d4:	20202020 	.word	0x20202020
 80084d8:	20202020 	.word	0x20202020
 80084dc:	0a2a2020 	.word	0x0a2a2020
 80084e0:	00000000 	.word	0x00000000
 80084e4:	2e37202a 	.word	0x2e37202a
 80084e8:	6f685320 	.word	0x6f685320
 80084ec:	4d492077 	.word	0x4d492077
 80084f0:	20202055 	.word	0x20202055
 80084f4:	20202020 	.word	0x20202020
 80084f8:	20202020 	.word	0x20202020
 80084fc:	20202020 	.word	0x20202020
 8008500:	20202020 	.word	0x20202020
 8008504:	20202020 	.word	0x20202020
 8008508:	20202020 	.word	0x20202020
 800850c:	20202020 	.word	0x20202020
 8008510:	20202020 	.word	0x20202020
 8008514:	20202020 	.word	0x20202020
 8008518:	0a2a2020 	.word	0x0a2a2020
 800851c:	00000000 	.word	0x00000000
 8008520:	2e38202a 	.word	0x2e38202a
 8008524:	20202020 	.word	0x20202020
 8008528:	20202020 	.word	0x20202020
 800852c:	20202020 	.word	0x20202020
 8008530:	20202020 	.word	0x20202020
 8008534:	20202020 	.word	0x20202020
 8008538:	20202020 	.word	0x20202020
 800853c:	20202020 	.word	0x20202020
 8008540:	20202020 	.word	0x20202020
 8008544:	20202020 	.word	0x20202020
 8008548:	20202020 	.word	0x20202020
 800854c:	20202020 	.word	0x20202020
 8008550:	20202020 	.word	0x20202020
 8008554:	0a2a2020 	.word	0x0a2a2020
 8008558:	00000000 	.word	0x00000000
 800855c:	2e39202a 	.word	0x2e39202a
 8008560:	20202020 	.word	0x20202020
 8008564:	20202020 	.word	0x20202020
 8008568:	20202020 	.word	0x20202020
 800856c:	20202020 	.word	0x20202020
 8008570:	20202020 	.word	0x20202020
 8008574:	20202020 	.word	0x20202020
 8008578:	20202020 	.word	0x20202020
 800857c:	20202020 	.word	0x20202020
 8008580:	20202020 	.word	0x20202020
 8008584:	20202020 	.word	0x20202020
 8008588:	20202020 	.word	0x20202020
 800858c:	20202020 	.word	0x20202020
 8008590:	0a2a2020 	.word	0x0a2a2020
 8008594:	00000000 	.word	0x00000000
 8008598:	2e6d202a 	.word	0x2e6d202a
 800859c:	654d2020 	.word	0x654d2020
 80085a0:	2020756e 	.word	0x2020756e
 80085a4:	20202020 	.word	0x20202020
 80085a8:	20202020 	.word	0x20202020
 80085ac:	20202020 	.word	0x20202020
 80085b0:	20202020 	.word	0x20202020
 80085b4:	20202020 	.word	0x20202020
 80085b8:	20202020 	.word	0x20202020
 80085bc:	20202020 	.word	0x20202020
 80085c0:	20202020 	.word	0x20202020
 80085c4:	20202020 	.word	0x20202020
 80085c8:	20202020 	.word	0x20202020
 80085cc:	0a2a2020 	.word	0x0a2a2020
 80085d0:	00000000 	.word	0x00000000
 80085d4:	00203e3e 	.word	0x00203e3e
 80085d8:	72616d53 	.word	0x72616d53
 80085dc:	626f5274 	.word	0x626f5274
 80085e0:	4220746f 	.word	0x4220746f
 80085e4:	00000044 	.word	0x00000044
 80085e8:	2044434c 	.word	0x2044434c
 80085ec:	61656c43 	.word	0x61656c43
 80085f0:	000a2072 	.word	0x000a2072
 80085f4:	656d6954 	.word	0x656d6954
 80085f8:	20642520 	.word	0x20642520
 80085fc:	00000000 	.word	0x00000000
 8008600:	25205841 	.word	0x25205841
 8008604:	00002064 	.word	0x00002064
 8008608:	25205941 	.word	0x25205941
 800860c:	00002064 	.word	0x00002064
 8008610:	25205a41 	.word	0x25205a41
 8008614:	00002064 	.word	0x00002064
 8008618:	64252054 	.word	0x64252054
 800861c:	00000a20 	.word	0x00000a20
 8008620:	7830200a 	.word	0x7830200a
 8008624:	78323025 	.word	0x78323025
 8008628:	0000203a 	.word	0x0000203a
 800862c:	78323025 	.word	0x78323025
 8008630:	00000020 	.word	0x00000020
 8008634:	6425204c 	.word	0x6425204c
 8008638:	20522020 	.word	0x20522020
 800863c:	000a6425 	.word	0x000a6425
 8008640:	25205843 	.word	0x25205843
 8008644:	00002064 	.word	0x00002064
 8008648:	25205943 	.word	0x25205943
 800864c:	00002064 	.word	0x00002064
 8008650:	25205a43 	.word	0x25205a43
 8008654:	00002064 	.word	0x00002064
 8008658:	25205853 	.word	0x25205853
 800865c:	00202064 	.word	0x00202064
 8008660:	25205953 	.word	0x25205953
 8008664:	00202064 	.word	0x00202064
 8008668:	25205a53 	.word	0x25205a53
 800866c:	0a202064 	.word	0x0a202064
 8008670:	00000000 	.word	0x00000000
 8008674:	3a746552 	.word	0x3a746552
 8008678:	41206425 	.word	0x41206425
 800867c:	20726464 	.word	0x20726464
 8008680:	30257830 	.word	0x30257830
 8008684:	44207832 	.word	0x44207832
 8008688:	20617461 	.word	0x20617461
 800868c:	2578303a 	.word	0x2578303a
 8008690:	0a783230 	.word	0x0a783230
 8008694:	00000000 	.word	0x00000000
 8008698:	25204e45 	.word	0x25204e45
 800869c:	00002064 	.word	0x00002064
 80086a0:	25204554 	.word	0x25204554
 80086a4:	00002064 	.word	0x00002064
 80086a8:	25205a43 	.word	0x25205a43
 80086ac:	00000a64 	.word	0x00000a64
 80086b0:	656d6954 	.word	0x656d6954
 80086b4:	35302520 	.word	0x35302520
 80086b8:	00002064 	.word	0x00002064
 80086bc:	25205847 	.word	0x25205847
 80086c0:	00092064 	.word	0x00092064
 80086c4:	25205947 	.word	0x25205947
 80086c8:	00092064 	.word	0x00092064
 80086cc:	25205a47 	.word	0x25205a47
 80086d0:	00092064 	.word	0x00092064
 80086d4:	58676e41 	.word	0x58676e41
 80086d8:	33302520 	.word	0x33302520
 80086dc:	30252064 	.word	0x30252064
 80086e0:	20206433 	.word	0x20206433
 80086e4:	00000009 	.word	0x00000009
 80086e8:	59676e41 	.word	0x59676e41
 80086ec:	33302520 	.word	0x33302520
 80086f0:	30252064 	.word	0x30252064
 80086f4:	20206433 	.word	0x20206433
 80086f8:	00000009 	.word	0x00000009
 80086fc:	5a676e41 	.word	0x5a676e41
 8008700:	33302520 	.word	0x33302520
 8008704:	30252064 	.word	0x30252064
 8008708:	000a6433 	.word	0x000a6433
 800870c:	276e6143 	.word	0x276e6143
 8008710:	69662074 	.word	0x69662074
 8008714:	4d20646e 	.word	0x4d20646e
 8008718:	30365550 	.word	0x30365550
 800871c:	0a203035 	.word	0x0a203035
 8008720:	00000000 	.word	0x00000000
 8008724:	20727245 	.word	0x20727245
 8008728:	74697277 	.word	0x74697277
 800872c:	504d2065 	.word	0x504d2065
 8008730:	35303655 	.word	0x35303655
 8008734:	41525f30 	.word	0x41525f30
 8008738:	5257505f 	.word	0x5257505f
 800873c:	4d474d5f 	.word	0x4d474d5f
 8008740:	20315f54 	.word	0x20315f54
 8008744:	6425203a 	.word	0x6425203a
 8008748:	0000000a 	.word	0x0000000a
 800874c:	35434d48 	.word	0x35434d48
 8008750:	20333838 	.word	0x20333838
 8008754:	6c696146 	.word	0x6c696146
 8008758:	206f7420 	.word	0x206f7420
 800875c:	64616572 	.word	0x64616572
 8008760:	20444920 	.word	0x20444920
 8008764:	0000000a 	.word	0x0000000a
 8008768:	20786320 	.word	0x20786320
 800876c:	6425203a 	.word	0x6425203a
 8008770:	00000020 	.word	0x00000020
 8008774:	20796320 	.word	0x20796320
 8008778:	6425203a 	.word	0x6425203a
 800877c:	00000020 	.word	0x00000020
 8008780:	207a6320 	.word	0x207a6320
 8008784:	6425203a 	.word	0x6425203a
 8008788:	00000a20 	.word	0x00000a20
 800878c:	20786d20 	.word	0x20786d20
 8008790:	6425203a 	.word	0x6425203a
 8008794:	00000020 	.word	0x00000020
 8008798:	20796d20 	.word	0x20796d20
 800879c:	6425203a 	.word	0x6425203a
 80087a0:	00000020 	.word	0x00000020
 80087a4:	207a6d20 	.word	0x207a6d20
 80087a8:	6425203a 	.word	0x6425203a
 80087ac:	00000a20 	.word	0x00000a20
 80087b0:	4d5f7748 	.word	0x4d5f7748
 80087b4:	30365550 	.word	0x30365550
 80087b8:	495f3035 	.word	0x495f3035
 80087bc:	2074696e 	.word	0x2074696e
 80087c0:	20746552 	.word	0x20746552
 80087c4:	7830203a 	.word	0x7830203a
 80087c8:	000a7825 	.word	0x000a7825
 80087cc:	485f7748 	.word	0x485f7748
 80087d0:	3835434d 	.word	0x3835434d
 80087d4:	495f3338 	.word	0x495f3338
 80087d8:	2074696e 	.word	0x2074696e
 80087dc:	20746552 	.word	0x20746552
 80087e0:	7830203a 	.word	0x7830203a
 80087e4:	000a7825 	.word	0x000a7825
 80087e8:	2520676d 	.word	0x2520676d
 80087ec:	64252064 	.word	0x64252064
 80087f0:	0a642520 	.word	0x0a642520
 80087f4:	00000000 	.word	0x00000000
 80087f8:	2520676d 	.word	0x2520676d
 80087fc:	64252064 	.word	0x64252064
 8008800:	20642520 	.word	0x20642520
 8008804:	20642520 	.word	0x20642520
 8008808:	25206425 	.word	0x25206425
 800880c:	25202064 	.word	0x25202064
 8008810:	64252064 	.word	0x64252064
 8008814:	20642520 	.word	0x20642520
 8008818:	0000000a 	.word	0x0000000a
 800881c:	64616548 	.word	0x64616548
 8008820:	25203a20 	.word	0x25203a20
 8008824:	25202064 	.word	0x25202064
 8008828:	64252064 	.word	0x64252064
 800882c:	00000a20 	.word	0x00000a20

08008830 <Virtual_Com_Port_StringVendor>:
 8008830:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8008840:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8008850:	00630069 00000073                       i.c.s...

08008858 <Virtual_Com_Port_DeviceDescriptor>:
 8008858:	02000112 40000002 57400483 02010200     .......@..@W....
 8008868:	00000103                                ....

0800886c <Virtual_Com_Port_StringLangID>:
 800886c:	04090304                                ....

08008870 <Virtual_Com_Port_StringProduct>:
 8008870:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8008880:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8008890:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 80088a0:	00000020                                 ...

080088a4 <Virtual_Com_Port_ConfigDescriptor>:
 80088a4:	00430209 c0000102 00040932 02020100     ..C.....2.......
 80088b4:	24050001 05011000 01000124 02022404     ...$....$....$..
 80088c4:	00062405 82050701 ff000803 00010409     .$..............
 80088d4:	00000a02 03050700 00004002 02810507     .........@......
 80088e4:	00000040                                @...

080088e8 <atanlo>:
 80088e8:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 80088f8:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

08008908 <atanhi>:
 8008908:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 8008918:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

08008928 <npio2_hw>:
 8008928:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 8008938:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 8008948:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 8008958:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 8008968:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 8008978:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 8008988:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 8008998:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

080089a8 <two_over_pi>:
 80089a8:	000000a2 000000f9 00000083 0000006e     ............n...
 80089b8:	0000004e 00000044 00000015 00000029     N...D.......)...
 80089c8:	000000fc 00000027 00000057 000000d1     ....'...W.......
 80089d8:	000000f5 00000034 000000dd 000000c0     ....4...........
 80089e8:	000000db 00000062 00000095 00000099     ....b...........
 80089f8:	0000003c 00000043 00000090 00000041     <...C.......A...
 8008a08:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 8008a18:	000000de 000000bb 000000c5 00000061     ............a...
 8008a28:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 8008a38:	00000042 0000004d 000000d2 000000e0     B...M...........
 8008a48:	00000006 00000049 0000002e 000000ea     ....I...........
 8008a58:	00000009 000000d1 00000092 0000001c     ................
 8008a68:	000000fe 0000001d 000000eb 0000001c     ................
 8008a78:	000000b1 00000029 000000a7 0000003e     ....).......>...
 8008a88:	000000e8 00000082 00000035 000000f5     ........5.......
 8008a98:	0000002e 000000bb 00000044 00000084     ........D.......
 8008aa8:	000000e9 0000009c 00000070 00000026     ........p...&...
 8008ab8:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 8008ac8:	00000039 00000091 000000d6 00000039     9...........9...
 8008ad8:	00000083 00000053 00000039 000000f4     ....S...9.......
 8008ae8:	0000009c 00000084 0000005f 0000008b     ........_.......
 8008af8:	000000bd 000000f9 00000028 0000003b     ........(...;...
 8008b08:	0000001f 000000f8 00000097 000000ff     ................
 8008b18:	000000de 00000005 00000098 0000000f     ................
 8008b28:	000000ef 0000002f 00000011 0000008b     ..../...........
 8008b38:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 8008b48:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 8008b58:	00000027 000000cb 00000009 000000b7     '...............
 8008b68:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 8008b78:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 8008b88:	00000075 00000027 000000ba 000000c7     u...'...........
 8008b98:	000000eb 000000e5 000000f1 0000007b     ............{...
 8008ba8:	0000003d 00000007 00000039 000000f7     =.......9.......
 8008bb8:	0000008a 00000052 00000092 000000ea     ....R...........
 8008bc8:	0000006b 000000fb 0000005f 000000b1     k......._.......
 8008bd8:	0000001f 0000008d 0000005d 00000008     ........].......
 8008be8:	00000056 00000003 00000030 00000046     V.......0...F...
 8008bf8:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 8008c08:	000000f0 000000cf 000000bc 00000020     ............ ...
 8008c18:	0000009a 000000f4 00000036 0000001d     ........6.......
 8008c28:	000000a9 000000e3 00000091 00000061     ............a...
 8008c38:	0000005e 000000e6 0000001b 00000008     ^...............
 8008c48:	00000065 00000099 00000085 0000005f     e..........._...
 8008c58:	00000014 000000a0 00000068 00000040     ........h...@...
 8008c68:	0000008d 000000ff 000000d8 00000080     ................
 8008c78:	0000004d 00000073 00000027 00000031     M...s...'...1...
 8008c88:	00000006 00000006 00000015 00000056     ............V...
 8008c98:	000000ca 00000073 000000a8 000000c9     ....s...........
 8008ca8:	00000060 000000e2 0000007b 000000c0     `.......{.......
 8008cb8:	0000008c 0000006b                       ....k...

08008cc0 <init_jk>:
 8008cc0:	00000004 00000007 00000009              ............

08008ccc <PIo2>:
 8008ccc:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 8008cdc:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 8008cec:	1fc40000 1bc60000 17440000              ..........D.

08008cf8 <atanlo>:
 8008cf8:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

08008d08 <atanhi>:
 8008d08:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?
