
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000501c  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000310  20000000  0800501c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000123c  20000400  0800541c  00010310  2**9
                  ALLOC
  3 ._usrstack    00000100  2000163c  2000163c  00010310  2**0
                  CONTENTS
  4 .debug_abbrev 00002adf  00000000  00000000  00010410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008740  00000000  00000000  00012eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00003bf8  00000000  00000000  0001b62f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00007ae5  00000000  00000000  0001f227  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001e66  00000000  00000000  00026d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000a9e  00000000  00000000  00028b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c08  00000000  00000000  00029610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001f90  00000000  00000000  0002a218  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000026f8  00000000  00000000  0002c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      0000002a  00000000  00000000  0002e8a0  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000031  00000000  00000000  0002e8ca  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001e74  00000000  00000000  0002e8fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 2d 12 00 08                             .P. -...

08000008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800000a:	2000      	movs	r0, #0
 800000c:	4b01      	ldr	r3, [pc, #4]	; (8000014 <LED_Tick+0xc>)
 800000e:	4798      	blx	r3
}
 8000010:	bd08      	pop	{r3, pc}
 8000012:	bf00      	nop
 8000014:	080015cd 	.word	0x080015cd

08000018 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000018:	b530      	push	{r4, r5, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001a:	4a0a      	ldr	r2, [pc, #40]	; (8000044 <main+0x2c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800001c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001e:	4790      	blx	r2
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000020:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000022:	4809      	ldr	r0, [pc, #36]	; (8000048 <main+0x30>)
 8000024:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000026:	4d09      	ldr	r5, [pc, #36]	; (800004c <main+0x34>)
 8000028:	4b09      	ldr	r3, [pc, #36]	; (8000050 <main+0x38>)
 800002a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800002e:	2202      	movs	r2, #2
 8000030:	4620      	mov	r0, r4
 8000032:	9400      	str	r4, [sp, #0]
 8000034:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );		
 8000036:	4620      	mov	r0, r4
 8000038:	4906      	ldr	r1, [pc, #24]	; (8000054 <main+0x3c>)
 800003a:	4788      	blx	r1
	Main_Init();

	//-- 명령어 처리
	//
	//Ap_RadioMenu_ExeCmd();    
	Ap_GLcdMenu_ExeCmd();    
 800003c:	4b06      	ldr	r3, [pc, #24]	; (8000058 <main+0x40>)
 800003e:	4798      	blx	r3
 8000040:	e7fe      	b.n	8000040 <main+0x28>
 8000042:	bf00      	nop
 8000044:	08001305 	.word	0x08001305
 8000048:	0800005d 	.word	0x0800005d
 800004c:	080019fd 	.word	0x080019fd
 8000050:	08000009 	.word	0x08000009
 8000054:	08001a19 	.word	0x08001a19
 8000058:	0800035d 	.word	0x0800035d

0800005c <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 800005c:	b508      	push	{r3, lr}
	if( Ap_Radio_Init() == ERR_NONE )
 800005e:	4b05      	ldr	r3, [pc, #20]	; (8000074 <Ap_Init+0x18>)
 8000060:	4798      	blx	r3
 8000062:	b118      	cbz	r0, 800006c <Ap_Init+0x10>
	{
		Lb_printf("Radio Init OK : FM Mode\n");
	}
	else
	{
		Lb_printf("Radio Init Fail\n");
 8000064:	4804      	ldr	r0, [pc, #16]	; (8000078 <Ap_Init+0x1c>)
 8000066:	4a05      	ldr	r2, [pc, #20]	; (800007c <Ap_Init+0x20>)
 8000068:	4790      	blx	r2
 800006a:	bd08      	pop	{r3, pc}
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
	if( Ap_Radio_Init() == ERR_NONE )
	{
		Lb_printf("Radio Init OK : FM Mode\n");
 800006c:	4804      	ldr	r0, [pc, #16]	; (8000080 <Ap_Init+0x24>)
 800006e:	4903      	ldr	r1, [pc, #12]	; (800007c <Ap_Init+0x20>)
 8000070:	4788      	blx	r1
 8000072:	bd08      	pop	{r3, pc}
 8000074:	08000179 	.word	0x08000179
 8000078:	08004c38 	.word	0x08004c38
 800007c:	08000df5 	.word	0x08000df5
 8000080:	08004c1c 	.word	0x08004c1c

08000084 <Ap_Radio_BandSetFM>:
     ARG     : void
     RET     : 
     			u16 - Error Code
---------------------------------------------------------------------------*/
u16 Ap_Radio_BandSetFM( void )
{
 8000084:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000086:	4c06      	ldr	r4, [pc, #24]	; (80000a0 <Ap_Radio_BandSetFM+0x1c>)
 8000088:	2000      	movs	r0, #0
 800008a:	82a0      	strh	r0, [r4, #20]
{
	u16 Ret = ERR_NONE;
	
	Ap_Radio_ApiStart();
	
	Ap_Radio_Log.Err_Hw = Hw_Si47xx_FM_Config();	
 800008c:	4b05      	ldr	r3, [pc, #20]	; (80000a4 <Ap_Radio_BandSetFM+0x20>)
 800008e:	4798      	blx	r3
 8000090:	82a0      	strh	r0, [r4, #20]
	
	if( Ap_Radio_Log.Err_Hw == ERR_NONE )
 8000092:	b910      	cbnz	r0, 800009a <Ap_Radio_BandSetFM+0x16>
	{
		Ap_Radio_Log.Band_Mode = MODE_RADIO_BAND_FM;
 8000094:	2101      	movs	r1, #1
 8000096:	8021      	strh	r1, [r4, #0]
 8000098:	bd10      	pop	{r4, pc}
	}
	else
	{
		Ret = ERR_RADIO_HW_ERR;
 800009a:	2002      	movs	r0, #2
	}
	
	return Ret;
}
 800009c:	bd10      	pop	{r4, pc}
 800009e:	bf00      	nop
 80000a0:	200004c0 	.word	0x200004c0
 80000a4:	08002655 	.word	0x08002655

080000a8 <Ap_Radio_FM_ChannelSet>:
     			u16 Channel - Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_FM_ChannelSet( u16 Channel )
{
 80000a8:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80000aa:	4c0f      	ldr	r4, [pc, #60]	; (80000e8 <Ap_Radio_FM_ChannelSet+0x40>)
 80000ac:	2100      	movs	r1, #0
 80000ae:	8922      	ldrh	r2, [r4, #8]


	if( Channel < Ap_Radio_Log.FM_Channel_Min ) Channel = Ap_Radio_Log.FM_Channel_Min;
	if( Channel > Ap_Radio_Log.FM_Channel_Max ) Channel = Ap_Radio_Log.FM_Channel_Max;

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
 80000b0:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80000b4:	4290      	cmp	r0, r2
 80000b6:	bf38      	it	cc
 80000b8:	4610      	movcc	r0, r2


	if( Channel < Ap_Radio_Log.FM_Channel_Min ) Channel = Ap_Radio_Log.FM_Channel_Min;
	if( Channel > Ap_Radio_Log.FM_Channel_Max ) Channel = Ap_Radio_Log.FM_Channel_Max;

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
 80000ba:	4560      	cmp	r0, ip
 80000bc:	bf28      	it	cs
 80000be:	4660      	movcs	r0, ip
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80000c0:	82a1      	strh	r1, [r4, #20]


	if( Channel < Ap_Radio_Log.FM_Channel_Min ) Channel = Ap_Radio_Log.FM_Channel_Min;
	if( Channel > Ap_Radio_Log.FM_Channel_Max ) Channel = Ap_Radio_Log.FM_Channel_Max;

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
 80000c2:	4b0a      	ldr	r3, [pc, #40]	; (80000ec <Ap_Radio_FM_ChannelSet+0x44>)
 80000c4:	4798      	blx	r3
		
	if( Ret == ERR_NONE )
 80000c6:	b110      	cbz	r0, 80000ce <Ap_Radio_FM_ChannelSet+0x26>
	}
	
	
	if( Ret != ERR_NONE )
	{
		Ap_Radio_Log.Err_Hw = Ret;
 80000c8:	82a0      	strh	r0, [r4, #20]
		
		Ret = ERR_RADIO_HW_ERR;		
 80000ca:	2002      	movs	r0, #2
	}
			
	return Ret;
}
 80000cc:	bd10      	pop	{r4, pc}

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
		
	if( Ret == ERR_NONE )
	{
		Ret = Hw_Si47xx_WaitForSTC( 500 );		if( Ret != ERR_NONE ) return Ret;
 80000ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80000d2:	4b07      	ldr	r3, [pc, #28]	; (80000f0 <Ap_Radio_FM_ChannelSet+0x48>)
 80000d4:	4798      	blx	r3
 80000d6:	2800      	cmp	r0, #0
 80000d8:	d1f8      	bne.n	80000cc <Ap_Radio_FM_ChannelSet+0x24>
		
		if( Ret == ERR_NONE )
		{
			Ret = Hw_Si47xx_FM_TUNE_STATUS(1);
 80000da:	2001      	movs	r0, #1
 80000dc:	4905      	ldr	r1, [pc, #20]	; (80000f4 <Ap_Radio_FM_ChannelSet+0x4c>)
 80000de:	4788      	blx	r1
			}
		}
	}
	
	
	if( Ret != ERR_NONE )
 80000e0:	2800      	cmp	r0, #0
 80000e2:	d0f3      	beq.n	80000cc <Ap_Radio_FM_ChannelSet+0x24>
 80000e4:	e7f0      	b.n	80000c8 <Ap_Radio_FM_ChannelSet+0x20>
 80000e6:	bf00      	nop
 80000e8:	200004c0 	.word	0x200004c0
 80000ec:	080025d1 	.word	0x080025d1
 80000f0:	08002559 	.word	0x08002559
 80000f4:	08002501 	.word	0x08002501

080000f8 <Ap_Radio_AM_ChannelSet>:
     			u16 Channel - Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_AM_ChannelSet( u16 Channel )
{
 80000f8:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80000fa:	4c0f      	ldr	r4, [pc, #60]	; (8000138 <Ap_Radio_AM_ChannelSet+0x40>)
 80000fc:	2100      	movs	r1, #0
 80000fe:	89a2      	ldrh	r2, [r4, #12]


	if( Channel < Ap_Radio_Log.AM_Channel_Min ) Channel = Ap_Radio_Log.AM_Channel_Min;
	if( Channel > Ap_Radio_Log.AM_Channel_Max ) Channel = Ap_Radio_Log.AM_Channel_Max;

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
 8000100:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000104:	4290      	cmp	r0, r2
 8000106:	bf38      	it	cc
 8000108:	4610      	movcc	r0, r2


	if( Channel < Ap_Radio_Log.AM_Channel_Min ) Channel = Ap_Radio_Log.AM_Channel_Min;
	if( Channel > Ap_Radio_Log.AM_Channel_Max ) Channel = Ap_Radio_Log.AM_Channel_Max;

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
 800010a:	4560      	cmp	r0, ip
 800010c:	bf28      	it	cs
 800010e:	4660      	movcs	r0, ip
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000110:	82a1      	strh	r1, [r4, #20]


	if( Channel < Ap_Radio_Log.AM_Channel_Min ) Channel = Ap_Radio_Log.AM_Channel_Min;
	if( Channel > Ap_Radio_Log.AM_Channel_Max ) Channel = Ap_Radio_Log.AM_Channel_Max;

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
 8000112:	4b0a      	ldr	r3, [pc, #40]	; (800013c <Ap_Radio_AM_ChannelSet+0x44>)
 8000114:	4798      	blx	r3
		
	if( Ret == ERR_NONE )
 8000116:	b110      	cbz	r0, 800011e <Ap_Radio_AM_ChannelSet+0x26>
	}
	
	
	if( Ret != ERR_NONE )
	{
		Ap_Radio_Log.Err_Hw = Ret;
 8000118:	82a0      	strh	r0, [r4, #20]
		
		Ret = ERR_RADIO_HW_ERR;		
 800011a:	2002      	movs	r0, #2
	}
			
	return Ret;
}
 800011c:	bd10      	pop	{r4, pc}

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
		
	if( Ret == ERR_NONE )
	{
		Ret = Hw_Si47xx_WaitForSTC( 500 );		if( Ret != ERR_NONE ) return Ret;
 800011e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000122:	4b07      	ldr	r3, [pc, #28]	; (8000140 <Ap_Radio_AM_ChannelSet+0x48>)
 8000124:	4798      	blx	r3
 8000126:	2800      	cmp	r0, #0
 8000128:	d1f8      	bne.n	800011c <Ap_Radio_AM_ChannelSet+0x24>
		
		if( Ret == ERR_NONE )
		{
			Ret = Hw_Si47xx_AM_TUNE_STATUS(1);
 800012a:	2001      	movs	r0, #1
 800012c:	4905      	ldr	r1, [pc, #20]	; (8000144 <Ap_Radio_AM_ChannelSet+0x4c>)
 800012e:	4788      	blx	r1
			}
		}
	}
	
	
	if( Ret != ERR_NONE )
 8000130:	2800      	cmp	r0, #0
 8000132:	d0f3      	beq.n	800011c <Ap_Radio_AM_ChannelSet+0x24>
 8000134:	e7f0      	b.n	8000118 <Ap_Radio_AM_ChannelSet+0x20>
 8000136:	bf00      	nop
 8000138:	200004c0 	.word	0x200004c0
 800013c:	08002591 	.word	0x08002591
 8000140:	08002559 	.word	0x08002559
 8000144:	080024d9 	.word	0x080024d9

08000148 <Ap_Radio_ChannelSetFirst>:
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelSetFirst( void )
{
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
 8000148:	4a08      	ldr	r2, [pc, #32]	; (800016c <Ap_Radio_ChannelSetFirst+0x24>)
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelSetFirst( void )
{
 800014a:	b508      	push	{r3, lr}
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
 800014c:	8813      	ldrh	r3, [r2, #0]
 800014e:	2b01      	cmp	r3, #1
 8000150:	d007      	beq.n	8000162 <Ap_Radio_ChannelSetFirst+0x1a>
	{
		Ret = Ap_Radio_FM_ChannelSet( Ap_Radio_Log.FM_Channel_Min );
	}
	else
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_AM )
 8000152:	2b02      	cmp	r3, #2
 8000154:	d001      	beq.n	800015a <Ap_Radio_ChannelSetFirst+0x12>
	{
		Ret = Ap_Radio_AM_ChannelSet( Ap_Radio_Log.AM_Channel_Min );
	}
	else
	{
		Ret = ERR_RADIO_BAND_ERR;
 8000156:	2003      	movs	r0, #3
	}	
	
	return Ret;
}
 8000158:	bd08      	pop	{r3, pc}
		Ret = Ap_Radio_FM_ChannelSet( Ap_Radio_Log.FM_Channel_Min );
	}
	else
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_AM )
	{
		Ret = Ap_Radio_AM_ChannelSet( Ap_Radio_Log.AM_Channel_Min );
 800015a:	8990      	ldrh	r0, [r2, #12]
 800015c:	4904      	ldr	r1, [pc, #16]	; (8000170 <Ap_Radio_ChannelSetFirst+0x28>)
 800015e:	4788      	blx	r1
 8000160:	bd08      	pop	{r3, pc}
{
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
	{
		Ret = Ap_Radio_FM_ChannelSet( Ap_Radio_Log.FM_Channel_Min );
 8000162:	8910      	ldrh	r0, [r2, #8]
 8000164:	4b03      	ldr	r3, [pc, #12]	; (8000174 <Ap_Radio_ChannelSetFirst+0x2c>)
 8000166:	4798      	blx	r3
 8000168:	bd08      	pop	{r3, pc}
 800016a:	bf00      	nop
 800016c:	200004c0 	.word	0x200004c0
 8000170:	080000f9 	.word	0x080000f9
 8000174:	080000a9 	.word	0x080000a9

08000178 <Ap_Radio_Init>:
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_Init(void)
{
 8000178:	b508      	push	{r3, lr}
	u16 Ret = ERR_NONE;
	
		
	Hw_Si47xx_Init();
 800017a:	480f      	ldr	r0, [pc, #60]	; (80001b8 <Ap_Radio_Init+0x40>)
 800017c:	4780      	blx	r0
	
	
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
 800017e:	480f      	ldr	r0, [pc, #60]	; (80001bc <Ap_Radio_Init+0x44>)
 8000180:	f641 53b0 	movw	r3, #7600	; 0x1db0
	Ap_Radio_Log.FM_Channel_Max = 10790;
 8000184:	f642 2126 	movw	r1, #10790	; 0x2a26
	Ap_Radio_Log.AM_Channel_Min = 520;
 8000188:	f44f 7202 	mov.w	r2, #520	; 0x208
	Hw_Si47xx_Init();
	
	
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
 800018c:	8103      	strh	r3, [r0, #8]
	Ap_Radio_Log.FM_Channel_Max = 10790;
 800018e:	8141      	strh	r1, [r0, #10]
	Ap_Radio_Log.AM_Channel_Min = 520;
	Ap_Radio_Log.AM_Channel_Max = 1710;
	
	Ap_Radio_Log.Volume_Min = 0;
 8000190:	2300      	movs	r3, #0
	
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
	Ap_Radio_Log.FM_Channel_Max = 10790;
	Ap_Radio_Log.AM_Channel_Min = 520;
 8000192:	8182      	strh	r2, [r0, #12]
	Ap_Radio_Log.AM_Channel_Max = 1710;
 8000194:	f240 6cae 	movw	ip, #1710	; 0x6ae
	
	Ap_Radio_Log.Volume_Min = 0;
	Ap_Radio_Log.Volume_Max = 63;	
	
	Ap_Radio_Log.Band_Mode = MODE_RADIO_BAND_NONE;
 8000198:	2200      	movs	r2, #0
	Ap_Radio_Log.FM_Channel_Max = 10790;
	Ap_Radio_Log.AM_Channel_Min = 520;
	Ap_Radio_Log.AM_Channel_Max = 1710;
	
	Ap_Radio_Log.Volume_Min = 0;
	Ap_Radio_Log.Volume_Max = 63;	
 800019a:	213f      	movs	r1, #63	; 0x3f
	Ap_Radio_Log.FM_Channel_Min = 7600;
	Ap_Radio_Log.FM_Channel_Max = 10790;
	Ap_Radio_Log.AM_Channel_Min = 520;
	Ap_Radio_Log.AM_Channel_Max = 1710;
	
	Ap_Radio_Log.Volume_Min = 0;
 800019c:	8083      	strh	r3, [r0, #4]
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
	Ap_Radio_Log.FM_Channel_Max = 10790;
	Ap_Radio_Log.AM_Channel_Min = 520;
	Ap_Radio_Log.AM_Channel_Max = 1710;
 800019e:	f8a0 c00e 	strh.w	ip, [r0, #14]
	
	Ap_Radio_Log.Volume_Min = 0;
	Ap_Radio_Log.Volume_Max = 63;	
 80001a2:	80c1      	strh	r1, [r0, #6]
	
	Ap_Radio_Log.Band_Mode = MODE_RADIO_BAND_NONE;
 80001a4:	8002      	strh	r2, [r0, #0]
	Ap_Radio_Log.Mute_Mode = 0;
 80001a6:	8042      	strh	r2, [r0, #2]
	
	Ap_Radio_Log.Err_Hw = 0;
 80001a8:	8282      	strh	r2, [r0, #20]
	
	
	Ret = Ap_Radio_BandSetFM();
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <Ap_Radio_Init+0x48>)
 80001ac:	4798      	blx	r3
	
	if( Ret == ERR_NONE )
 80001ae:	b908      	cbnz	r0, 80001b4 <Ap_Radio_Init+0x3c>
	{
		Ret = Ap_Radio_ChannelSetFirst();
 80001b0:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <Ap_Radio_Init+0x4c>)
 80001b2:	4790      	blx	r2
	}
	
	return Ret;
}
 80001b4:	bd08      	pop	{r3, pc}
 80001b6:	bf00      	nop
 80001b8:	08002365 	.word	0x08002365
 80001bc:	200004c0 	.word	0x200004c0
 80001c0:	08000085 	.word	0x08000085
 80001c4:	08000149 	.word	0x08000149

080001c8 <Ap_GCldMenu_MoveCircleTick_2nd>:
	cnt++;
}


void Ap_GCldMenu_MoveCircleTick_2nd( void )
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 35, HW_N5110G_WIDTH, 45 );           						
	Hw_N5110G_DrawCircle( 10 + x, 40, 3, 0 ); 							
 80001ca:	4c16      	ldr	r4, [pc, #88]	; (8000224 <Ap_GCldMenu_MoveCircleTick_2nd+0x5c>)
{
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 35, HW_N5110G_WIDTH, 45 );           						
 80001cc:	2000      	movs	r0, #0
 80001ce:	2123      	movs	r1, #35	; 0x23
 80001d0:	2254      	movs	r2, #84	; 0x54
 80001d2:	232d      	movs	r3, #45	; 0x2d
 80001d4:	4d14      	ldr	r5, [pc, #80]	; (8000228 <Ap_GCldMenu_MoveCircleTick_2nd+0x60>)
 80001d6:	47a8      	blx	r5
	Hw_N5110G_DrawCircle( 10 + x, 40, 3, 0 ); 							
 80001d8:	f994 5000 	ldrsb.w	r5, [r4]
 80001dc:	2203      	movs	r2, #3
 80001de:	350a      	adds	r5, #10
 80001e0:	2300      	movs	r3, #0
 80001e2:	2128      	movs	r1, #40	; 0x28
 80001e4:	b2a8      	uxth	r0, r5
 80001e6:	4d11      	ldr	r5, [pc, #68]	; (800022c <Ap_GCldMenu_MoveCircleTick_2nd+0x64>)
 80001e8:	47a8      	blx	r5
 	Hw_N5110G_DrawRequest();
 80001ea:	4911      	ldr	r1, [pc, #68]	; (8000230 <Ap_GCldMenu_MoveCircleTick_2nd+0x68>)
 80001ec:	4788      	blx	r1
 	
 	x += dir;
 80001ee:	4911      	ldr	r1, [pc, #68]	; (8000234 <Ap_GCldMenu_MoveCircleTick_2nd+0x6c>)
 80001f0:	7823      	ldrb	r3, [r4, #0]
 80001f2:	780a      	ldrb	r2, [r1, #0]
 80001f4:	18d0      	adds	r0, r2, r3
 80001f6:	b2c0      	uxtb	r0, r0
 80001f8:	b2c3      	uxtb	r3, r0
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 80001fa:	b25a      	sxtb	r2, r3
 80001fc:	2a44      	cmp	r2, #68	; 0x44
	
	Hw_N5110G_DrawClearRect( 0, 35, HW_N5110G_WIDTH, 45 );           						
	Hw_N5110G_DrawCircle( 10 + x, 40, 3, 0 ); 							
 	Hw_N5110G_DrawRequest();
 	
 	x += dir;
 80001fe:	7023      	strb	r3, [r4, #0]
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 8000200:	dd05      	ble.n	800020e <Ap_GCldMenu_MoveCircleTick_2nd+0x46>
 	{
 		dir = -1;
 		x += dir;
 8000202:	1e42      	subs	r2, r0, #1
 8000204:	b2d3      	uxtb	r3, r2
 	
 	x += dir;
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 	{
 		dir = -1;
 8000206:	20ff      	movs	r0, #255	; 0xff
 8000208:	7008      	strb	r0, [r1, #0]
 		x += dir;
 800020a:	7023      	strb	r3, [r4, #0]
 800020c:	b25a      	sxtb	r2, r3
 	}

 	if( x < 0 ) 
 800020e:	2a00      	cmp	r2, #0
 8000210:	da03      	bge.n	800021a <Ap_GCldMenu_MoveCircleTick_2nd+0x52>
 	{
 		dir = 1; 		
 		x  += dir;
 8000212:	3301      	adds	r3, #1
 		x += dir;
 	}

 	if( x < 0 ) 
 	{
 		dir = 1; 		
 8000214:	2001      	movs	r0, #1
 8000216:	7008      	strb	r0, [r1, #0]
 		x  += dir;
 8000218:	7023      	strb	r3, [r4, #0]
 	}

	cnt++;
 800021a:	4b07      	ldr	r3, [pc, #28]	; (8000238 <Ap_GCldMenu_MoveCircleTick_2nd+0x70>)
 800021c:	781a      	ldrb	r2, [r3, #0]
 800021e:	1c51      	adds	r1, r2, #1
 8000220:	7019      	strb	r1, [r3, #0]
}
 8000222:	bd38      	pop	{r3, r4, r5, pc}
 8000224:	20000401 	.word	0x20000401
 8000228:	08002b59 	.word	0x08002b59
 800022c:	08002c55 	.word	0x08002c55
 8000230:	08002b49 	.word	0x08002b49
 8000234:	20000001 	.word	0x20000001
 8000238:	20000400 	.word	0x20000400

0800023c <Ap_GCldMenu_MoveCircleTick_1st>:




void Ap_GCldMenu_MoveCircleTick_1st( void )
{
 800023c:	b538      	push	{r3, r4, r5, lr}
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 25, HW_N5110G_WIDTH, 35 );           						
	Hw_N5110G_DrawCircle( 10 + x, 30, 5, 0 ); 								
 800023e:	4c16      	ldr	r4, [pc, #88]	; (8000298 <Ap_GCldMenu_MoveCircleTick_1st+0x5c>)
{
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 25, HW_N5110G_WIDTH, 35 );           						
 8000240:	2000      	movs	r0, #0
 8000242:	2119      	movs	r1, #25
 8000244:	2254      	movs	r2, #84	; 0x54
 8000246:	2323      	movs	r3, #35	; 0x23
 8000248:	4d14      	ldr	r5, [pc, #80]	; (800029c <Ap_GCldMenu_MoveCircleTick_1st+0x60>)
 800024a:	47a8      	blx	r5
	Hw_N5110G_DrawCircle( 10 + x, 30, 5, 0 ); 								
 800024c:	f994 5000 	ldrsb.w	r5, [r4]
 8000250:	2205      	movs	r2, #5
 8000252:	350a      	adds	r5, #10
 8000254:	2300      	movs	r3, #0
 8000256:	211e      	movs	r1, #30
 8000258:	b2a8      	uxth	r0, r5
 800025a:	4d11      	ldr	r5, [pc, #68]	; (80002a0 <Ap_GCldMenu_MoveCircleTick_1st+0x64>)
 800025c:	47a8      	blx	r5
 	Hw_N5110G_DrawRequest();
 800025e:	4911      	ldr	r1, [pc, #68]	; (80002a4 <Ap_GCldMenu_MoveCircleTick_1st+0x68>)
 8000260:	4788      	blx	r1
 	
 	x += dir;
 8000262:	4911      	ldr	r1, [pc, #68]	; (80002a8 <Ap_GCldMenu_MoveCircleTick_1st+0x6c>)
 8000264:	7823      	ldrb	r3, [r4, #0]
 8000266:	780a      	ldrb	r2, [r1, #0]
 8000268:	18d0      	adds	r0, r2, r3
 800026a:	b2c0      	uxtb	r0, r0
 800026c:	b2c3      	uxtb	r3, r0
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 800026e:	b25a      	sxtb	r2, r3
 8000270:	2a44      	cmp	r2, #68	; 0x44
	
	Hw_N5110G_DrawClearRect( 0, 25, HW_N5110G_WIDTH, 35 );           						
	Hw_N5110G_DrawCircle( 10 + x, 30, 5, 0 ); 								
 	Hw_N5110G_DrawRequest();
 	
 	x += dir;
 8000272:	7023      	strb	r3, [r4, #0]
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 8000274:	dd05      	ble.n	8000282 <Ap_GCldMenu_MoveCircleTick_1st+0x46>
 	{
 		dir = -1;
 		x += dir;
 8000276:	1e42      	subs	r2, r0, #1
 8000278:	b2d3      	uxtb	r3, r2
 	
 	x += dir;
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 	{
 		dir = -1;
 800027a:	20ff      	movs	r0, #255	; 0xff
 800027c:	7008      	strb	r0, [r1, #0]
 		x += dir;
 800027e:	7023      	strb	r3, [r4, #0]
 8000280:	b25a      	sxtb	r2, r3
 	}

 	if( x < 0 ) 
 8000282:	2a00      	cmp	r2, #0
 8000284:	da03      	bge.n	800028e <Ap_GCldMenu_MoveCircleTick_1st+0x52>
 	{
 		dir = 1; 		
 		x  += dir;
 8000286:	3301      	adds	r3, #1
 		x += dir;
 	}

 	if( x < 0 ) 
 	{
 		dir = 1; 		
 8000288:	2001      	movs	r0, #1
 800028a:	7008      	strb	r0, [r1, #0]
 		x  += dir;
 800028c:	7023      	strb	r3, [r4, #0]
 	}

	cnt++;
 800028e:	4b07      	ldr	r3, [pc, #28]	; (80002ac <Ap_GCldMenu_MoveCircleTick_1st+0x70>)
 8000290:	781a      	ldrb	r2, [r3, #0]
 8000292:	1c51      	adds	r1, r2, #1
 8000294:	7019      	strb	r1, [r3, #0]
}
 8000296:	bd38      	pop	{r3, r4, r5, pc}
 8000298:	20000404 	.word	0x20000404
 800029c:	08002b59 	.word	0x08002b59
 80002a0:	08002c55 	.word	0x08002c55
 80002a4:	08002b49 	.word	0x08002b49
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000403 	.word	0x20000403

080002b0 <Ap_GLcdMenu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
 80002b0:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
	Lb_printf("*******************************************************\n");
 80002b2:	4d11      	ldr	r5, [pc, #68]	; (80002f8 <Ap_GLcdMenu_ShowMenu+0x48>)
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 80002b4:	4c11      	ldr	r4, [pc, #68]	; (80002fc <Ap_GLcdMenu_ShowMenu+0x4c>)
 80002b6:	4812      	ldr	r0, [pc, #72]	; (8000300 <Ap_GLcdMenu_ShowMenu+0x50>)
 80002b8:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80002ba:	4628      	mov	r0, r5
 80002bc:	47a0      	blx	r4
	Lb_printf("                      GLcd V0.2                       \n");
 80002be:	4811      	ldr	r0, [pc, #68]	; (8000304 <Ap_GLcdMenu_ShowMenu+0x54>)
 80002c0:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80002c2:	4628      	mov	r0, r5
 80002c4:	47a0      	blx	r4
	Lb_printf("* 1. LCD Clear                                        *\n");
 80002c6:	4810      	ldr	r0, [pc, #64]	; (8000308 <Ap_GLcdMenu_ShowMenu+0x58>)
 80002c8:	47a0      	blx	r4
	Lb_printf("* 2. Count ++                                         *\n");
 80002ca:	4810      	ldr	r0, [pc, #64]	; (800030c <Ap_GLcdMenu_ShowMenu+0x5c>)
 80002cc:	47a0      	blx	r4
	Lb_printf("* 3. Count --                                         *\n");
 80002ce:	4810      	ldr	r0, [pc, #64]	; (8000310 <Ap_GLcdMenu_ShowMenu+0x60>)
 80002d0:	47a0      	blx	r4
	Lb_printf("* 4. Move Circle Start                                *\n");
 80002d2:	4810      	ldr	r0, [pc, #64]	; (8000314 <Ap_GLcdMenu_ShowMenu+0x64>)
 80002d4:	47a0      	blx	r4
	Lb_printf("* 5. Move Circle End                                  *\n");
 80002d6:	4810      	ldr	r0, [pc, #64]	; (8000318 <Ap_GLcdMenu_ShowMenu+0x68>)
 80002d8:	47a0      	blx	r4
	Lb_printf("* 6.                                                  *\n");
 80002da:	4810      	ldr	r0, [pc, #64]	; (800031c <Ap_GLcdMenu_ShowMenu+0x6c>)
 80002dc:	47a0      	blx	r4
	Lb_printf("* 7.                                                  *\n");
 80002de:	4810      	ldr	r0, [pc, #64]	; (8000320 <Ap_GLcdMenu_ShowMenu+0x70>)
 80002e0:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 80002e2:	4810      	ldr	r0, [pc, #64]	; (8000324 <Ap_GLcdMenu_ShowMenu+0x74>)
 80002e4:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 80002e6:	4810      	ldr	r0, [pc, #64]	; (8000328 <Ap_GLcdMenu_ShowMenu+0x78>)
 80002e8:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 80002ea:	4810      	ldr	r0, [pc, #64]	; (800032c <Ap_GLcdMenu_ShowMenu+0x7c>)
 80002ec:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80002ee:	4628      	mov	r0, r5
 80002f0:	47a0      	blx	r4
	Lb_printf("\n");
 80002f2:	480f      	ldr	r0, [pc, #60]	; (8000330 <Ap_GLcdMenu_ShowMenu+0x80>)
 80002f4:	47a0      	blx	r4
}
 80002f6:	bd38      	pop	{r3, r4, r5, pc}
 80002f8:	08004c50 	.word	0x08004c50
 80002fc:	08000df5 	.word	0x08000df5
 8000300:	08004c4c 	.word	0x08004c4c
 8000304:	08004c8c 	.word	0x08004c8c
 8000308:	08004cc4 	.word	0x08004cc4
 800030c:	08004d00 	.word	0x08004d00
 8000310:	08004d3c 	.word	0x08004d3c
 8000314:	08004d78 	.word	0x08004d78
 8000318:	08004db4 	.word	0x08004db4
 800031c:	08004df0 	.word	0x08004df0
 8000320:	08004e2c 	.word	0x08004e2c
 8000324:	08004e68 	.word	0x08004e68
 8000328:	08004ea4 	.word	0x08004ea4
 800032c:	08004ee0 	.word	0x08004ee0
 8000330:	08004f1c 	.word	0x08004f1c

08000334 <Ap_GLcdMenu_GetCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_GetCmd(void)
{
 8000334:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <Ap_GLcdMenu_GetCmd+0x18>)
 8000338:	4c05      	ldr	r4, [pc, #20]	; (8000350 <Ap_GLcdMenu_GetCmd+0x1c>)
 800033a:	47a0      	blx	r4

    key=get_byte();
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <Ap_GLcdMenu_GetCmd+0x20>)
 800033e:	4798      	blx	r3
 8000340:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <Ap_GLcdMenu_GetCmd+0x24>)
 8000344:	47a0      	blx	r4
	
    return key;
}
 8000346:	4628      	mov	r0, r5
 8000348:	bd38      	pop	{r3, r4, r5, pc}
 800034a:	bf00      	nop
 800034c:	08004f20 	.word	0x08004f20
 8000350:	08000df5 	.word	0x08000df5
 8000354:	080014f1 	.word	0x080014f1
 8000358:	08004f1c 	.word	0x08004f1c

0800035c <Ap_GLcdMenu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 800035c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();	
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
 8000360:	2400      	movs	r4, #0
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 8000362:	b083      	sub	sp, #12
	static s8  CircleX  = 0;	
			
	
	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();	
 8000364:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8000554 <Ap_GLcdMenu_ExeCmd+0x1f8>
 8000368:	47c8      	blx	r9
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
 800036a:	4d6c      	ldr	r5, [pc, #432]	; (800051c <Ap_GLcdMenu_ExeCmd+0x1c0>)
 800036c:	2001      	movs	r0, #1
 800036e:	2132      	movs	r1, #50	; 0x32
 8000370:	2202      	movs	r2, #2
 8000372:	4b6b      	ldr	r3, [pc, #428]	; (8000520 <Ap_GLcdMenu_ExeCmd+0x1c4>)
 8000374:	9400      	str	r4, [sp, #0]
 8000376:	47a8      	blx	r5
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
 8000378:	2002      	movs	r0, #2
 800037a:	9400      	str	r4, [sp, #0]
 800037c:	2164      	movs	r1, #100	; 0x64
 800037e:	4602      	mov	r2, r0
 8000380:	4b68      	ldr	r3, [pc, #416]	; (8000524 <Ap_GLcdMenu_ExeCmd+0x1c8>)
 8000382:	47a8      	blx	r5
 8000384:	4c68      	ldr	r4, [pc, #416]	; (8000528 <Ap_GLcdMenu_ExeCmd+0x1cc>)
				Hw_Timer_Start( HW_TIMER_CH_DEBUG1 );
				Hw_Timer_Start( HW_TIMER_CH_DEBUG2 );
               break;  

           case '5':
				Hw_Timer_Stop( HW_TIMER_CH_DEBUG1 );
 8000386:	4f69      	ldr	r7, [pc, #420]	; (800052c <Ap_GLcdMenu_ExeCmd+0x1d0>)
				Hw_N5110G_DrawRequest();
						
               break; 

           case '4':
				Hw_Timer_Start( HW_TIMER_CH_DEBUG1 );
 8000388:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8000558 <Ap_GLcdMenu_ExeCmd+0x1fc>
           		Hw_N5110G_DrawRequest();
           		
				break;

           case '3':
           		Lb_printf("Count -- \n");
 800038c:	4d68      	ldr	r5, [pc, #416]	; (8000530 <Ap_GLcdMenu_ExeCmd+0x1d4>)
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 800038e:	47a0      	blx	r4
    {
        switch(key)
 8000390:	f1a0 0331 	sub.w	r3, r0, #49	; 0x31
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 8000394:	2800      	cmp	r0, #0
 8000396:	f000 8089 	beq.w	80004ac <Ap_GLcdMenu_ExeCmd+0x150>
    {
        switch(key)
 800039a:	2b3c      	cmp	r3, #60	; 0x3c
 800039c:	d8f7      	bhi.n	800038e <Ap_GLcdMenu_ExeCmd+0x32>
 800039e:	a201      	add	r2, pc, #4	; (adr r2, 80003a4 <Ap_GLcdMenu_ExeCmd+0x48>)
 80003a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a4:	0800050f 	.word	0x0800050f
 80003a8:	080004ef 	.word	0x080004ef
 80003ac:	080004bd 	.word	0x080004bd
 80003b0:	080004b3 	.word	0x080004b3
 80003b4:	08000499 	.word	0x08000499
 80003b8:	0800038f 	.word	0x0800038f
 80003bc:	0800038f 	.word	0x0800038f
 80003c0:	0800038f 	.word	0x0800038f
 80003c4:	0800038f 	.word	0x0800038f
 80003c8:	0800038f 	.word	0x0800038f
 80003cc:	0800038f 	.word	0x0800038f
 80003d0:	0800038f 	.word	0x0800038f
 80003d4:	0800038f 	.word	0x0800038f
 80003d8:	0800038f 	.word	0x0800038f
 80003dc:	0800038f 	.word	0x0800038f
 80003e0:	0800038f 	.word	0x0800038f
 80003e4:	0800038f 	.word	0x0800038f
 80003e8:	0800038f 	.word	0x0800038f
 80003ec:	0800038f 	.word	0x0800038f
 80003f0:	0800038f 	.word	0x0800038f
 80003f4:	0800038f 	.word	0x0800038f
 80003f8:	0800038f 	.word	0x0800038f
 80003fc:	0800038f 	.word	0x0800038f
 8000400:	0800038f 	.word	0x0800038f
 8000404:	0800038f 	.word	0x0800038f
 8000408:	0800038f 	.word	0x0800038f
 800040c:	0800038f 	.word	0x0800038f
 8000410:	0800038f 	.word	0x0800038f
 8000414:	08000519 	.word	0x08000519
 8000418:	0800038f 	.word	0x0800038f
 800041c:	0800038f 	.word	0x0800038f
 8000420:	0800038f 	.word	0x0800038f
 8000424:	0800038f 	.word	0x0800038f
 8000428:	0800038f 	.word	0x0800038f
 800042c:	0800038f 	.word	0x0800038f
 8000430:	0800038f 	.word	0x0800038f
 8000434:	0800038f 	.word	0x0800038f
 8000438:	0800038f 	.word	0x0800038f
 800043c:	0800038f 	.word	0x0800038f
 8000440:	0800038f 	.word	0x0800038f
 8000444:	0800038f 	.word	0x0800038f
 8000448:	0800038f 	.word	0x0800038f
 800044c:	0800038f 	.word	0x0800038f
 8000450:	0800038f 	.word	0x0800038f
 8000454:	0800038f 	.word	0x0800038f
 8000458:	0800038f 	.word	0x0800038f
 800045c:	0800038f 	.word	0x0800038f
 8000460:	0800038f 	.word	0x0800038f
 8000464:	0800038f 	.word	0x0800038f
 8000468:	0800038f 	.word	0x0800038f
 800046c:	0800038f 	.word	0x0800038f
 8000470:	0800038f 	.word	0x0800038f
 8000474:	0800038f 	.word	0x0800038f
 8000478:	0800038f 	.word	0x0800038f
 800047c:	0800038f 	.word	0x0800038f
 8000480:	0800038f 	.word	0x0800038f
 8000484:	0800038f 	.word	0x0800038f
 8000488:	0800038f 	.word	0x0800038f
 800048c:	0800038f 	.word	0x0800038f
 8000490:	0800038f 	.word	0x0800038f
 8000494:	08000519 	.word	0x08000519
				Hw_Timer_Start( HW_TIMER_CH_DEBUG1 );
				Hw_Timer_Start( HW_TIMER_CH_DEBUG2 );
               break;  

           case '5':
				Hw_Timer_Stop( HW_TIMER_CH_DEBUG1 );
 8000498:	2001      	movs	r0, #1
 800049a:	47b8      	blx	r7
				Hw_Timer_Stop( HW_TIMER_CH_DEBUG2 );
 800049c:	2002      	movs	r0, #2
 800049e:	47b8      	blx	r7
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 80004a0:	47a0      	blx	r4
    {
        switch(key)
 80004a2:	f1a0 0331 	sub.w	r3, r0, #49	; 0x31
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 80004a6:	2800      	cmp	r0, #0
 80004a8:	f47f af77 	bne.w	800039a <Ap_GLcdMenu_ExeCmd+0x3e>
               break;
        }
    }
    
    return key;
}
 80004ac:	b003      	add	sp, #12
 80004ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				Hw_N5110G_DrawRequest();
						
               break; 

           case '4':
				Hw_Timer_Start( HW_TIMER_CH_DEBUG1 );
 80004b2:	2001      	movs	r0, #1
 80004b4:	47c0      	blx	r8
				Hw_Timer_Start( HW_TIMER_CH_DEBUG2 );
 80004b6:	2002      	movs	r0, #2
 80004b8:	47c0      	blx	r8
               break;  
 80004ba:	e768      	b.n	800038e <Ap_GLcdMenu_ExeCmd+0x32>
           		Hw_N5110G_DrawRequest();
           		
				break;

           case '3':
           		Lb_printf("Count -- \n");
 80004bc:	481d      	ldr	r0, [pc, #116]	; (8000534 <Ap_GLcdMenu_ExeCmd+0x1d8>)
 80004be:	47a8      	blx	r5
              
				Hw_N5110G_DrawPrint(0,0,"Smartrobot BD");								
 80004c0:	2000      	movs	r0, #0
 80004c2:	4601      	mov	r1, r0
 80004c4:	4a1c      	ldr	r2, [pc, #112]	; (8000538 <Ap_GLcdMenu_ExeCmd+0x1dc>)
 80004c6:	4e1d      	ldr	r6, [pc, #116]	; (800053c <Ap_GLcdMenu_ExeCmd+0x1e0>)
 80004c8:	47b0      	blx	r6
				Hw_N5110G_DrawPrint(0,2,"Count : %4d", --Count);						
 80004ca:	f8df e090 	ldr.w	lr, [pc, #144]	; 800055c <Ap_GLcdMenu_ExeCmd+0x200>
 80004ce:	4a1c      	ldr	r2, [pc, #112]	; (8000540 <Ap_GLcdMenu_ExeCmd+0x1e4>)
 80004d0:	f89e 0000 	ldrb.w	r0, [lr]
 80004d4:	2102      	movs	r1, #2
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	fa5f fc8c 	uxtb.w	ip, ip
 80004de:	4663      	mov	r3, ip
 80004e0:	2000      	movs	r0, #0
 80004e2:	f88e c000 	strb.w	ip, [lr]
 80004e6:	47b0      	blx	r6
				Hw_N5110G_DrawRequest();
 80004e8:	4916      	ldr	r1, [pc, #88]	; (8000544 <Ap_GLcdMenu_ExeCmd+0x1e8>)
 80004ea:	4788      	blx	r1
						
               break; 
 80004ec:	e74f      	b.n	800038e <Ap_GLcdMenu_ExeCmd+0x32>
           		Lb_printf("LCD Clear \n");
           		Hw_N5110G_Clear();
               	break;

           case '2':
           		Lb_printf("Count ++ \n");
 80004ee:	4816      	ldr	r0, [pc, #88]	; (8000548 <Ap_GLcdMenu_ExeCmd+0x1ec>)
 80004f0:	47a8      	blx	r5
                     		
				Hw_N5110G_DrawPrint(0,0,"Smartrobot BD");								
 80004f2:	2000      	movs	r0, #0
 80004f4:	4601      	mov	r1, r0
 80004f6:	4a10      	ldr	r2, [pc, #64]	; (8000538 <Ap_GLcdMenu_ExeCmd+0x1dc>)
 80004f8:	4e10      	ldr	r6, [pc, #64]	; (800053c <Ap_GLcdMenu_ExeCmd+0x1e0>)
 80004fa:	47b0      	blx	r6
				Hw_N5110G_DrawPrint(0,2,"Count : %4d", ++Count);						
 80004fc:	f8df e05c 	ldr.w	lr, [pc, #92]	; 800055c <Ap_GLcdMenu_ExeCmd+0x200>
 8000500:	2102      	movs	r1, #2
 8000502:	f89e c000 	ldrb.w	ip, [lr]
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <Ap_GLcdMenu_ExeCmd+0x1e4>)
 8000508:	f10c 0c01 	add.w	ip, ip, #1
 800050c:	e7e5      	b.n	80004da <Ap_GLcdMenu_ExeCmd+0x17e>
    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		Lb_printf("LCD Clear \n");
 800050e:	480f      	ldr	r0, [pc, #60]	; (800054c <Ap_GLcdMenu_ExeCmd+0x1f0>)
 8000510:	47a8      	blx	r5
           		Hw_N5110G_Clear();
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <Ap_GLcdMenu_ExeCmd+0x1f4>)
 8000514:	4798      	blx	r3
               	break;
 8000516:	e73a      	b.n	800038e <Ap_GLcdMenu_ExeCmd+0x32>
           case '0':
               break;

			case 'm':
			case 'M':
				Ap_GLcdMenu_ShowMenu();
 8000518:	47c8      	blx	r9
 800051a:	e738      	b.n	800038e <Ap_GLcdMenu_ExeCmd+0x32>
 800051c:	080019fd 	.word	0x080019fd
 8000520:	0800023d 	.word	0x0800023d
 8000524:	080001c9 	.word	0x080001c9
 8000528:	08000335 	.word	0x08000335
 800052c:	08001a2d 	.word	0x08001a2d
 8000530:	08000df5 	.word	0x08000df5
 8000534:	08004f58 	.word	0x08004f58
 8000538:	08004f3c 	.word	0x08004f3c
 800053c:	08002c09 	.word	0x08002c09
 8000540:	08004f4c 	.word	0x08004f4c
 8000544:	08002b49 	.word	0x08002b49
 8000548:	08004f30 	.word	0x08004f30
 800054c:	08004f24 	.word	0x08004f24
 8000550:	08002af9 	.word	0x08002af9
 8000554:	080002b1 	.word	0x080002b1
 8000558:	08001a19 	.word	0x08001a19
 800055c:	20000402 	.word	0x20000402

08000560 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 8000560:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 8000562:	4909      	ldr	r1, [pc, #36]	; (8000588 <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 8000564:	4602      	mov	r2, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 8000566:	780b      	ldrb	r3, [r1, #0]
 8000568:	b153      	cbz	r3, 8000580 <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800056a:	4808      	ldr	r0, [pc, #32]	; (800058c <print_byte_out+0x2c>)
 800056c:	4908      	ldr	r1, [pc, #32]	; (8000590 <print_byte_out+0x30>)
 800056e:	6805      	ldr	r5, [r0, #0]
 8000570:	680c      	ldr	r4, [r1, #0]
 8000572:	552a      	strb	r2, [r5, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8000574:	6802      	ldr	r2, [r0, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8000576:	1c63      	adds	r3, r4, #1
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8000578:	2000      	movs	r0, #0
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800057a:	600b      	str	r3, [r1, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800057c:	54d0      	strb	r0, [r2, r3]
 800057e:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <print_byte_out+0x34>)
 8000582:	4790      	blx	r2
 8000584:	bd38      	pop	{r3, r4, r5, pc}
 8000586:	bf00      	nop
 8000588:	2000040c 	.word	0x2000040c
 800058c:	200004d8 	.word	0x200004d8
 8000590:	20000408 	.word	0x20000408
 8000594:	080014c1 	.word	0x080014c1

08000598 <PrintString>:
        }
        return;
}

void PrintString(char *fmt, char *s)
{
 8000598:	b538      	push	{r3, r4, r5, lr}
        if (!fmt || !s) return;
 800059a:	b148      	cbz	r0, 80005b0 <PrintString+0x18>
 800059c:	b141      	cbz	r1, 80005b0 <PrintString+0x18>
        while (*s) print_byte_out(*s++);
 800059e:	7808      	ldrb	r0, [r1, #0]
 80005a0:	b130      	cbz	r0, 80005b0 <PrintString+0x18>
 80005a2:	4d04      	ldr	r5, [pc, #16]	; (80005b4 <PrintString+0x1c>)
 80005a4:	460c      	mov	r4, r1
 80005a6:	47a8      	blx	r5
 80005a8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80005ac:	2800      	cmp	r0, #0
 80005ae:	d1fa      	bne.n	80005a6 <PrintString+0xe>
 80005b0:	bd38      	pop	{r3, r4, r5, pc}
 80005b2:	bf00      	nop
 80005b4:	08000561 	.word	0x08000561

080005b8 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 80005b8:	b410      	push	{r4}
        long remainder;
        if (!s || !s[0]) return false;
 80005ba:	b1e0      	cbz	r0, 80005f6 <DecToLong+0x3e>
 80005bc:	7802      	ldrb	r2, [r0, #0]
 80005be:	b1e2      	cbz	r2, 80005fa <DecToLong+0x42>


        for (*retval=0; *s; s++){
 80005c0:	2200      	movs	r2, #0
 80005c2:	600a      	str	r2, [r1, #0]
 80005c4:	7803      	ldrb	r3, [r0, #0]
 80005c6:	b1ab      	cbz	r3, 80005f4 <DecToLong+0x3c>
                if (*s < '0' || *s > '9') return false;
 80005c8:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80005cc:	b2e4      	uxtb	r4, r4
 80005ce:	2c09      	cmp	r4, #9
 80005d0:	d902      	bls.n	80005d8 <DecToLong+0x20>
 80005d2:	e012      	b.n	80005fa <DecToLong+0x42>
 80005d4:	2c09      	cmp	r4, #9
 80005d6:	d812      	bhi.n	80005fe <DecToLong+0x46>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 80005d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
                remainder = *s - '0';
 80005dc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
                *retval = *retval * 10 + remainder;
 80005e0:	3a30      	subs	r2, #48	; 0x30
 80005e2:	600a      	str	r2, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80005e4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 80005e8:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80005ec:	fa5f f48c 	uxtb.w	r4, ip
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1ef      	bne.n	80005d4 <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 80005f4:	2001      	movs	r0, #1
}        // DecToLong.
 80005f6:	bc10      	pop	{r4}
 80005f8:	4770      	bx	lr
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 80005fa:	4610      	mov	r0, r2
 80005fc:	e7fb      	b.n	80005f6 <DecToLong+0x3e>
 80005fe:	2000      	movs	r0, #0
 8000600:	e7f9      	b.n	80005f6 <DecToLong+0x3e>
 8000602:	bf00      	nop

08000604 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 8000604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000608:	7803      	ldrb	r3, [r0, #0]
        return;
}


void PrintDec(char *fmt, int l)
{
 800060a:	b085      	sub	sp, #20
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 800060c:	2600      	movs	r6, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 800060e:	4605      	mov	r5, r0
 8000610:	4689      	mov	r9, r1
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 8000612:	9603      	str	r6, [sp, #12]
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000614:	2b00      	cmp	r3, #0
 8000616:	f000 8092 	beq.w	800073e <PrintDec+0x13a>
	{
		if (c=='d') break;
 800061a:	2b64      	cmp	r3, #100	; 0x64
 800061c:	f000 808f 	beq.w	800073e <PrintDec+0x13a>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 8000620:	4f9d      	ldr	r7, [pc, #628]	; (8000898 <PrintDec+0x294>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 8000622:	4634      	mov	r4, r6
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8000624:	46b0      	mov	r8, r6

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 8000626:	f1a3 0031 	sub.w	r0, r3, #49	; 0x31
 800062a:	b2c2      	uxtb	r2, r0
 800062c:	2a08      	cmp	r2, #8
 800062e:	f200 8082 	bhi.w	8000736 <PrintDec+0x132>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000632:	5d2a      	ldrb	r2, [r5, r4]
 8000634:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000638:	b2cb      	uxtb	r3, r1
 800063a:	2b09      	cmp	r3, #9
 800063c:	f200 812a 	bhi.w	8000894 <PrintDec+0x290>
 8000640:	2300      	movs	r3, #0
 8000642:	4668      	mov	r0, sp
			{
				tol[j] = s[i++];
 8000644:	3401      	adds	r4, #1
 8000646:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000648:	5d2a      	ldrb	r2, [r5, r4]
 800064a:	3301      	adds	r3, #1
 800064c:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8000650:	fa5f fc8e 	uxtb.w	ip, lr
 8000654:	f1bc 0f09 	cmp.w	ip, #9
 8000658:	d9f4      	bls.n	8000644 <PrintDec+0x40>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800065a:	a804      	add	r0, sp, #16
 800065c:	18c2      	adds	r2, r0, r3
			i--;
			DecToLong(tol, &flagcnt);
 800065e:	a903      	add	r1, sp, #12
 8000660:	4668      	mov	r0, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8000662:	f802 8c10 	strb.w	r8, [r2, #-16]
			i--;
 8000666:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 8000668:	47b8      	blx	r7
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800066a:	3401      	adds	r4, #1
 800066c:	5d2b      	ldrb	r3, [r5, r4]
 800066e:	b10b      	cbz	r3, 8000674 <PrintDec+0x70>
	{
		if (c=='d') break;
 8000670:	2b64      	cmp	r3, #100	; 0x64
 8000672:	d1d8      	bne.n	8000626 <PrintDec+0x22>
		else if (c=='l') flagl=true;
		else continue;
	}

	// 위의 flag에 따라 출력.
	if (flagcnt)
 8000674:	9b03      	ldr	r3, [sp, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d061      	beq.n	800073e <PrintDec+0x13a>
	{
                if (flagcnt>9) flagcnt=9;
 800067a:	2b09      	cmp	r3, #9
 800067c:	f300 8100 	bgt.w	8000880 <PrintDec+0x27c>
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000680:	1e59      	subs	r1, r3, #1
 8000682:	f000 81b4 	beq.w	80009ee <PrintDec+0x3ea>
 8000686:	3901      	subs	r1, #1
 8000688:	1e9c      	subs	r4, r3, #2
 800068a:	1ed8      	subs	r0, r3, #3
 800068c:	f001 0501 	and.w	r5, r1, #1
                retval *= num;
 8000690:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000692:	1e4a      	subs	r2, r1, #1
 8000694:	b181      	cbz	r1, 80006b8 <PrintDec+0xb4>
 8000696:	b12d      	cbz	r5, 80006a4 <PrintDec+0xa0>
 8000698:	3a01      	subs	r2, #1
 800069a:	f1b2 3fff 	cmp.w	r2, #4294967295
                retval *= num;
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006a2:	d009      	beq.n	80006b8 <PrintDec+0xb4>
                retval *= num;
 80006a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80006a8:	00d9      	lsls	r1, r3, #3
 80006aa:	eb01 0543 	add.w	r5, r1, r3, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006ae:	3a02      	subs	r2, #2
                retval *= num;
 80006b0:	006b      	lsls	r3, r5, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80006b6:	d1f5      	bne.n	80006a4 <PrintDec+0xa0>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80006b8:	fb99 f8f3 	sdiv	r8, r9, r3
 80006bc:	fb03 9918 	mls	r9, r3, r8, r9
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	f000 8198 	beq.w	80009f6 <PrintDec+0x3f2>
 80006c6:	f000 0201 	and.w	r2, r0, #1
                retval *= num;
 80006ca:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006cc:	1e43      	subs	r3, r0, #1
 80006ce:	b180      	cbz	r0, 80006f2 <PrintDec+0xee>
 80006d0:	b12a      	cbz	r2, 80006de <PrintDec+0xda>
 80006d2:	3b01      	subs	r3, #1
 80006d4:	f1b3 3fff 	cmp.w	r3, #4294967295
                retval *= num;
 80006d8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006dc:	d009      	beq.n	80006f2 <PrintDec+0xee>
                retval *= num;
 80006de:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80006e2:	00c2      	lsls	r2, r0, #3
 80006e4:	eb02 0440 	add.w	r4, r2, r0, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006e8:	3b02      	subs	r3, #2
                retval *= num;
 80006ea:	0064      	lsls	r4, r4, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f0:	d1f5      	bne.n	80006de <PrintDec+0xda>
 80006f2:	4f6a      	ldr	r7, [pc, #424]	; (800089c <PrintDec+0x298>)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80006f4:	4d6a      	ldr	r5, [pc, #424]	; (80008a0 <PrintDec+0x29c>)
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80006f6:	f04f 0801 	mov.w	r8, #1
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006fa:	fb99 f3f4 	sdiv	r3, r9, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80006fe:	b2d8      	uxtb	r0, r3
 8000700:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000702:	fb04 9913 	mls	r9, r4, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 8000706:	2b00      	cmp	r3, #0
 8000708:	f040 80c0 	bne.w	800088c <PrintDec+0x288>
 800070c:	2c01      	cmp	r4, #1
 800070e:	f000 80bd 	beq.w	800088c <PrintDec+0x288>


                        if (leading_zero==true){
 8000712:	f1b8 0f00 	cmp.w	r8, #0
 8000716:	f000 80b9 	beq.w	800088c <PrintDec+0x288>
                                if (flag0)        print_byte_out('0');
 800071a:	2030      	movs	r0, #48	; 0x30
 800071c:	b906      	cbnz	r6, 8000720 <PrintDec+0x11c>
                                else                print_byte_out(' ');
 800071e:	2020      	movs	r0, #32
 8000720:	47b8      	blx	r7
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000722:	fb85 1c04 	smull	r1, ip, r5, r4
 8000726:	17e1      	asrs	r1, r4, #31
 8000728:	ebc1 04ac 	rsb	r4, r1, ip, asr #2
 800072c:	2c00      	cmp	r4, #0
 800072e:	dce4      	bgt.n	80006fa <PrintDec+0xf6>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 8000730:	b005      	add	sp, #20
 8000732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 8000736:	2b30      	cmp	r3, #48	; 0x30
 8000738:	bf08      	it	eq
 800073a:	2601      	moveq	r6, #1
 800073c:	e795      	b.n	800066a <PrintDec+0x66>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800073e:	4959      	ldr	r1, [pc, #356]	; (80008a4 <PrintDec+0x2a0>)
 8000740:	ea4f 75e9 	mov.w	r5, r9, asr #31
 8000744:	fb81 0309 	smull	r0, r3, r1, r9
                        remainder %= divisor;
 8000748:	4c57      	ldr	r4, [pc, #348]	; (80008a8 <PrintDec+0x2a4>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800074a:	ebc5 7323 	rsb	r3, r5, r3, asr #28
                        remainder %= divisor;
 800074e:	fb04 9913 	mls	r9, r4, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 8000752:	2b00      	cmp	r3, #0
 8000754:	f040 80c0 	bne.w	80008d8 <PrintDec+0x2d4>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000758:	4854      	ldr	r0, [pc, #336]	; (80008ac <PrintDec+0x2a8>)
 800075a:	ea4f 7ee9 	mov.w	lr, r9, asr #31
 800075e:	fb80 0509 	smull	r0, r5, r0, r9
                        remainder %= divisor;
 8000762:	4a53      	ldr	r2, [pc, #332]	; (80008b0 <PrintDec+0x2ac>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000764:	ebce 6365 	rsb	r3, lr, r5, asr #25
 8000768:	4c4c      	ldr	r4, [pc, #304]	; (800089c <PrintDec+0x298>)
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 800076a:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800076c:	fb02 9513 	mls	r5, r2, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 80c5 	beq.w	8000900 <PrintDec+0x2fc>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800077c:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800077e:	484d      	ldr	r0, [pc, #308]	; (80008b4 <PrintDec+0x2b0>)
 8000780:	17eb      	asrs	r3, r5, #31
 8000782:	fb80 0c05 	smull	r0, ip, r0, r5
                        remainder %= divisor;
 8000786:	4a4c      	ldr	r2, [pc, #304]	; (80008b8 <PrintDec+0x2b4>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000788:	ebc3 53ac 	rsb	r3, r3, ip, asr #22
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800078c:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800078e:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000792:	2b00      	cmp	r3, #0
 8000794:	f000 80c4 	beq.w	8000920 <PrintDec+0x31c>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000798:	b2d9      	uxtb	r1, r3
 800079a:	f101 0030 	add.w	r0, r1, #48	; 0x30
 800079e:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007a0:	4846      	ldr	r0, [pc, #280]	; (80008bc <PrintDec+0x2b8>)
 80007a2:	17eb      	asrs	r3, r5, #31
 80007a4:	fb80 0e05 	smull	r0, lr, r0, r5
                        remainder %= divisor;
 80007a8:	4a45      	ldr	r2, [pc, #276]	; (80008c0 <PrintDec+0x2bc>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007aa:	ebc3 43ae 	rsb	r3, r3, lr, asr #18
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80007ae:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80007b0:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f000 80c3 	beq.w	8000940 <PrintDec+0x33c>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80007ba:	fa5f fc83 	uxtb.w	ip, r3
 80007be:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 80007c2:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007c4:	483f      	ldr	r0, [pc, #252]	; (80008c4 <PrintDec+0x2c0>)
 80007c6:	17eb      	asrs	r3, r5, #31
 80007c8:	fb80 0e05 	smull	r0, lr, r0, r5
                        remainder %= divisor;
 80007cc:	4a3e      	ldr	r2, [pc, #248]	; (80008c8 <PrintDec+0x2c4>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007ce:	ebc3 336e 	rsb	r3, r3, lr, asr #13
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80007d2:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80007d4:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f000 80c1 	beq.w	8000960 <PrintDec+0x35c>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80007de:	b2d9      	uxtb	r1, r3
 80007e0:	f101 0030 	add.w	r0, r1, #48	; 0x30
 80007e4:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007e6:	4839      	ldr	r0, [pc, #228]	; (80008cc <PrintDec+0x2c8>)
 80007e8:	17eb      	asrs	r3, r5, #31
 80007ea:	fb80 0205 	smull	r0, r2, r0, r5
                        remainder %= divisor;
 80007ee:	f242 7c10 	movw	ip, #10000	; 0x2710
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007f2:	ebc3 3322 	rsb	r3, r3, r2, asr #12
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80007f6:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80007f8:	fb0c 5513 	mls	r5, ip, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	f000 80c0 	beq.w	8000982 <PrintDec+0x37e>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000802:	fa5f fe83 	uxtb.w	lr, r3
 8000806:	f10e 0030 	add.w	r0, lr, #48	; 0x30
 800080a:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800080c:	4830      	ldr	r0, [pc, #192]	; (80008d0 <PrintDec+0x2cc>)
 800080e:	17eb      	asrs	r3, r5, #31
 8000810:	fb80 0205 	smull	r0, r2, r0, r5
                        remainder %= divisor;
 8000814:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000818:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800081c:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800081e:	fb0c 5513 	mls	r5, ip, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000822:	2b00      	cmp	r3, #0
 8000824:	f000 80be 	beq.w	80009a4 <PrintDec+0x3a0>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000828:	b2d9      	uxtb	r1, r3
 800082a:	f101 0030 	add.w	r0, r1, #48	; 0x30
 800082e:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000830:	4828      	ldr	r0, [pc, #160]	; (80008d4 <PrintDec+0x2d0>)
 8000832:	17eb      	asrs	r3, r5, #31
 8000834:	fb80 0e05 	smull	r0, lr, r0, r5
                        remainder %= divisor;
 8000838:	2264      	movs	r2, #100	; 0x64
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800083a:	ebc3 136e 	rsb	r3, r3, lr, asr #5
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800083e:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000840:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000844:	2b00      	cmp	r3, #0
 8000846:	f000 80bd 	beq.w	80009c4 <PrintDec+0x3c0>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800084a:	fa5f fc83 	uxtb.w	ip, r3
 800084e:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 8000852:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000854:	4812      	ldr	r0, [pc, #72]	; (80008a0 <PrintDec+0x29c>)
 8000856:	17eb      	asrs	r3, r5, #31
 8000858:	fb80 0e05 	smull	r0, lr, r0, r5
 800085c:	ebc3 03ae 	rsb	r3, r3, lr, asr #2
                        remainder %= divisor;
 8000860:	eb03 0283 	add.w	r2, r3, r3, lsl #2


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000864:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000866:	eba5 0542 	sub.w	r5, r5, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 800086a:	2b00      	cmp	r3, #0
 800086c:	f000 80bb 	beq.w	80009e6 <PrintDec+0x3e2>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000870:	b2d9      	uxtb	r1, r3
 8000872:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000876:	47a0      	blx	r4
 8000878:	b2e8      	uxtb	r0, r5
 800087a:	3030      	adds	r0, #48	; 0x30
 800087c:	47a0      	blx	r4
 800087e:	e757      	b.n	8000730 <PrintDec+0x12c>
	}

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 8000880:	2407      	movs	r4, #7
 8000882:	2709      	movs	r7, #9
 8000884:	9703      	str	r7, [sp, #12]
 8000886:	2006      	movs	r0, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000888:	4621      	mov	r1, r4
 800088a:	e6ff      	b.n	800068c <PrintDec+0x88>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800088c:	47b8      	blx	r7
 800088e:	f04f 0800 	mov.w	r8, #0
 8000892:	e746      	b.n	8000722 <PrintDec+0x11e>
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000894:	2300      	movs	r3, #0
 8000896:	e6e0      	b.n	800065a <PrintDec+0x56>
 8000898:	080005b9 	.word	0x080005b9
 800089c:	08000561 	.word	0x08000561
 80008a0:	66666667 	.word	0x66666667
 80008a4:	44b82fa1 	.word	0x44b82fa1
 80008a8:	3b9aca00 	.word	0x3b9aca00
 80008ac:	55e63b89 	.word	0x55e63b89
 80008b0:	05f5e100 	.word	0x05f5e100
 80008b4:	6b5fca6b 	.word	0x6b5fca6b
 80008b8:	00989680 	.word	0x00989680
 80008bc:	431bde83 	.word	0x431bde83
 80008c0:	000f4240 	.word	0x000f4240
 80008c4:	14f8b589 	.word	0x14f8b589
 80008c8:	000186a0 	.word	0x000186a0
 80008cc:	68db8bad 	.word	0x68db8bad
 80008d0:	10624dd3 	.word	0x10624dd3
 80008d4:	51eb851f 	.word	0x51eb851f
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80008d8:	fa5f fc83 	uxtb.w	ip, r3
 80008dc:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 80008e0:	4c46      	ldr	r4, [pc, #280]	; (80009fc <PrintDec+0x3f8>)
 80008e2:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80008e4:	4846      	ldr	r0, [pc, #280]	; (8000a00 <PrintDec+0x3fc>)
 80008e6:	ea4f 7ee9 	mov.w	lr, r9, asr #31
 80008ea:	fb80 0509 	smull	r0, r5, r0, r9
                        remainder %= divisor;
 80008ee:	4a45      	ldr	r2, [pc, #276]	; (8000a04 <PrintDec+0x400>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80008f0:	ebce 6365 	rsb	r3, lr, r5, asr #25
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80008f4:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80008f6:	fb02 9513 	mls	r5, r2, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	f47f af3b 	bne.w	8000776 <PrintDec+0x172>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000900:	2900      	cmp	r1, #0
 8000902:	f43f af38 	beq.w	8000776 <PrintDec+0x172>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000906:	4840      	ldr	r0, [pc, #256]	; (8000a08 <PrintDec+0x404>)
 8000908:	17eb      	asrs	r3, r5, #31
 800090a:	fb80 0c05 	smull	r0, ip, r0, r5
                        remainder %= divisor;
 800090e:	4a3f      	ldr	r2, [pc, #252]	; (8000a0c <PrintDec+0x408>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000910:	ebc3 53ac 	rsb	r3, r3, ip, asr #22
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000914:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000916:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 800091a:	2b00      	cmp	r3, #0
 800091c:	f47f af3c 	bne.w	8000798 <PrintDec+0x194>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000920:	2900      	cmp	r1, #0
 8000922:	f43f af39 	beq.w	8000798 <PrintDec+0x194>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000926:	483a      	ldr	r0, [pc, #232]	; (8000a10 <PrintDec+0x40c>)
 8000928:	17eb      	asrs	r3, r5, #31
 800092a:	fb80 0e05 	smull	r0, lr, r0, r5
                        remainder %= divisor;
 800092e:	4a39      	ldr	r2, [pc, #228]	; (8000a14 <PrintDec+0x410>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000930:	ebc3 43ae 	rsb	r3, r3, lr, asr #18
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000934:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000936:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 800093a:	2b00      	cmp	r3, #0
 800093c:	f47f af3d 	bne.w	80007ba <PrintDec+0x1b6>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000940:	2900      	cmp	r1, #0
 8000942:	f43f af3a 	beq.w	80007ba <PrintDec+0x1b6>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000946:	4834      	ldr	r0, [pc, #208]	; (8000a18 <PrintDec+0x414>)
 8000948:	17eb      	asrs	r3, r5, #31
 800094a:	fb80 0e05 	smull	r0, lr, r0, r5
                        remainder %= divisor;
 800094e:	4a33      	ldr	r2, [pc, #204]	; (8000a1c <PrintDec+0x418>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000950:	ebc3 336e 	rsb	r3, r3, lr, asr #13
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000954:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000956:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 800095a:	2b00      	cmp	r3, #0
 800095c:	f47f af3f 	bne.w	80007de <PrintDec+0x1da>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000960:	2900      	cmp	r1, #0
 8000962:	f43f af3c 	beq.w	80007de <PrintDec+0x1da>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000966:	482e      	ldr	r0, [pc, #184]	; (8000a20 <PrintDec+0x41c>)
 8000968:	17eb      	asrs	r3, r5, #31
 800096a:	fb80 0205 	smull	r0, r2, r0, r5
                        remainder %= divisor;
 800096e:	f242 7c10 	movw	ip, #10000	; 0x2710
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000972:	ebc3 3322 	rsb	r3, r3, r2, asr #12
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000976:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000978:	fb0c 5513 	mls	r5, ip, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 800097c:	2b00      	cmp	r3, #0
 800097e:	f47f af40 	bne.w	8000802 <PrintDec+0x1fe>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000982:	2900      	cmp	r1, #0
 8000984:	f43f af3d 	beq.w	8000802 <PrintDec+0x1fe>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000988:	4826      	ldr	r0, [pc, #152]	; (8000a24 <PrintDec+0x420>)
 800098a:	17eb      	asrs	r3, r5, #31
 800098c:	fb80 0205 	smull	r0, r2, r0, r5
                        remainder %= divisor;
 8000990:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000994:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000998:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800099a:	fb0c 5513 	mls	r5, ip, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f47f af42 	bne.w	8000828 <PrintDec+0x224>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80009a4:	2900      	cmp	r1, #0
 80009a6:	f43f af3f 	beq.w	8000828 <PrintDec+0x224>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80009aa:	481f      	ldr	r0, [pc, #124]	; (8000a28 <PrintDec+0x424>)
 80009ac:	17eb      	asrs	r3, r5, #31
 80009ae:	fb80 0e05 	smull	r0, lr, r0, r5
                        remainder %= divisor;
 80009b2:	2264      	movs	r2, #100	; 0x64
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80009b4:	ebc3 136e 	rsb	r3, r3, lr, asr #5
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80009b8:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80009ba:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f47f af43 	bne.w	800084a <PrintDec+0x246>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80009c4:	2900      	cmp	r1, #0
 80009c6:	f43f af40 	beq.w	800084a <PrintDec+0x246>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80009ca:	4818      	ldr	r0, [pc, #96]	; (8000a2c <PrintDec+0x428>)
 80009cc:	17eb      	asrs	r3, r5, #31
 80009ce:	fb80 0e05 	smull	r0, lr, r0, r5
 80009d2:	ebc3 03ae 	rsb	r3, r3, lr, asr #2
                        remainder %= divisor;
 80009d6:	eb03 0283 	add.w	r2, r3, r3, lsl #2


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80009da:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80009dc:	eba5 0542 	sub.w	r5, r5, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	f47f af45 	bne.w	8000870 <PrintDec+0x26c>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80009e6:	2900      	cmp	r1, #0
 80009e8:	f47f af46 	bne.w	8000878 <PrintDec+0x274>
 80009ec:	e740      	b.n	8000870 <PrintDec+0x26c>
{
        long retval=num;
        cnt--;


        while (cnt--){
 80009ee:	1e9c      	subs	r4, r3, #2
 80009f0:	1ed8      	subs	r0, r3, #3
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80009f2:	230a      	movs	r3, #10
 80009f4:	e660      	b.n	80006b8 <PrintDec+0xb4>
 80009f6:	240a      	movs	r4, #10
 80009f8:	e67b      	b.n	80006f2 <PrintDec+0xee>
 80009fa:	bf00      	nop
 80009fc:	08000561 	.word	0x08000561
 8000a00:	55e63b89 	.word	0x55e63b89
 8000a04:	05f5e100 	.word	0x05f5e100
 8000a08:	6b5fca6b 	.word	0x6b5fca6b
 8000a0c:	00989680 	.word	0x00989680
 8000a10:	431bde83 	.word	0x431bde83
 8000a14:	000f4240 	.word	0x000f4240
 8000a18:	14f8b589 	.word	0x14f8b589
 8000a1c:	000186a0 	.word	0x000186a0
 8000a20:	68db8bad 	.word	0x68db8bad
 8000a24:	10624dd3 	.word	0x10624dd3
 8000a28:	51eb851f 	.word	0x51eb851f
 8000a2c:	66666667 	.word	0x66666667

08000a30 <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000a34:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000a36:	b086      	sub	sp, #24
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000a38:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000a3a:	4605      	mov	r5, r0
 8000a3c:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000a3e:	9605      	str	r6, [sp, #20]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f000 81ad 	beq.w	8000da0 <PrintHex+0x370>
                if (c=='x') break;
 8000a46:	2b78      	cmp	r3, #120	; 0x78
 8000a48:	d028      	beq.n	8000a9c <PrintHex+0x6c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 8000a4a:	4fa8      	ldr	r7, [pc, #672]	; (8000cec <PrintHex+0x2bc>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 8000a4c:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000a4e:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 8000a50:	f1a3 0031 	sub.w	r0, r3, #49	; 0x31
 8000a54:	b2c2      	uxtb	r2, r0
 8000a56:	2a08      	cmp	r2, #8
 8000a58:	f200 80b8 	bhi.w	8000bcc <PrintHex+0x19c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000a5c:	5d2a      	ldrb	r2, [r5, r4]
 8000a5e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a62:	b2cb      	uxtb	r3, r1
 8000a64:	2b09      	cmp	r3, #9
 8000a66:	f200 8174 	bhi.w	8000d52 <PrintHex+0x322>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	a802      	add	r0, sp, #8
                                tol[j] = s[i++];
 8000a6e:	3401      	adds	r4, #1
 8000a70:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000a72:	5d2a      	ldrb	r2, [r5, r4]
 8000a74:	3301      	adds	r3, #1
 8000a76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8000a7a:	fa5f fc8e 	uxtb.w	ip, lr
 8000a7e:	f1bc 0f09 	cmp.w	ip, #9
 8000a82:	d9f4      	bls.n	8000a6e <PrintHex+0x3e>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000a84:	a906      	add	r1, sp, #24
 8000a86:	18ca      	adds	r2, r1, r3
 8000a88:	f802 8c10 	strb.w	r8, [r2, #-16]
                        i--;
                        DecToLong(tol, &flagcnt);
 8000a8c:	a905      	add	r1, sp, #20
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
 8000a8e:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 8000a90:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000a92:	3401      	adds	r4, #1
 8000a94:	5d2b      	ldrb	r3, [r5, r4]
 8000a96:	b10b      	cbz	r3, 8000a9c <PrintHex+0x6c>
                if (c=='x') break;
 8000a98:	2b78      	cmp	r3, #120	; 0x78
 8000a9a:	d1d9      	bne.n	8000a50 <PrintHex+0x20>
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000a9c:	9b01      	ldr	r3, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000a9e:	9a05      	ldr	r2, [sp, #20]
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000aa0:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
 8000aa4:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8000aa8:	1209      	asrs	r1, r1, #8
 8000aaa:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8000aae:	ea41 6c03 	orr.w	ip, r1, r3, lsl #24
 8000ab2:	ea4c 6013 	orr.w	r0, ip, r3, lsr #24
 8000ab6:	9001      	str	r0, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	f000 808b 	beq.w	8000bd4 <PrintHex+0x1a4>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8000abe:	f012 0f01 	tst.w	r2, #1
 8000ac2:	f040 8117 	bne.w	8000cf4 <PrintHex+0x2c4>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000ac6:	2701      	movs	r7, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000ac8:	f1c2 0c08 	rsb	ip, r2, #8
 8000acc:	eb0c 70dc 	add.w	r0, ip, ip, lsr #31
 8000ad0:	1043      	asrs	r3, r0, #1
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	dc77      	bgt.n	8000bc6 <PrintHex+0x196>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000ad6:	ad01      	add	r5, sp, #4
 8000ad8:	18e9      	adds	r1, r5, r3
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000ada:	460c      	mov	r4, r1
 8000adc:	f814 eb01 	ldrb.w	lr, [r4], #1
 8000ae0:	43cb      	mvns	r3, r1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000ae2:	ea5f 121e 	movs.w	r2, lr, lsr #4
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000ae6:	f105 0904 	add.w	r9, r5, #4
 8000aea:	f003 0a01 	and.w	sl, r3, #1
 8000aee:	4d80      	ldr	r5, [pc, #512]	; (8000cf0 <PrintHex+0x2c0>)
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000af0:	f00e 080f 	and.w	r8, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000af4:	f000 813a 	beq.w	8000d6c <PrintHex+0x33c>
                        if (uHex<10) uHex+='0';
 8000af8:	2a09      	cmp	r2, #9
 8000afa:	f240 8167 	bls.w	8000dcc <PrintHex+0x39c>
                        else         uHex+='A'-10;
 8000afe:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000b02:	47a8      	blx	r5
 8000b04:	2700      	movs	r7, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000b06:	f1b8 0f00 	cmp.w	r8, #0
 8000b0a:	f000 8129 	beq.w	8000d60 <PrintHex+0x330>
                        if (lHex<10) lHex+='0';
 8000b0e:	f1b8 0f09 	cmp.w	r8, #9
 8000b12:	f240 815e 	bls.w	8000dd2 <PrintHex+0x3a2>
                        else         lHex+='A'-10;
 8000b16:	f108 0037 	add.w	r0, r8, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000b1a:	47a8      	blx	r5
 8000b1c:	2700      	movs	r7, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000b1e:	454c      	cmp	r4, r9
 8000b20:	d051      	beq.n	8000bc6 <PrintHex+0x196>
 8000b22:	f1ba 0f00 	cmp.w	sl, #0
 8000b26:	d019      	beq.n	8000b5c <PrintHex+0x12c>
                        c = s[i];
 8000b28:	f814 1b01 	ldrb.w	r1, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000b2c:	090b      	lsrs	r3, r1, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000b2e:	f001 080f 	and.w	r8, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000b32:	d033      	beq.n	8000b9c <PrintHex+0x16c>
                        if (uHex<10) uHex+='0';
 8000b34:	2b09      	cmp	r3, #9
 8000b36:	f240 814f 	bls.w	8000dd8 <PrintHex+0x3a8>
                        else         uHex+='A'-10;
 8000b3a:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000b3e:	47a8      	blx	r5
 8000b40:	2700      	movs	r7, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000b42:	f1b8 0f00 	cmp.w	r8, #0
 8000b46:	d034      	beq.n	8000bb2 <PrintHex+0x182>
                        if (lHex<10) lHex+='0';
 8000b48:	f1b8 0f09 	cmp.w	r8, #9
 8000b4c:	f240 8147 	bls.w	8000dde <PrintHex+0x3ae>
                        else         lHex+='A'-10;
 8000b50:	f108 0037 	add.w	r0, r8, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000b54:	47a8      	blx	r5
 8000b56:	2700      	movs	r7, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000b58:	454c      	cmp	r4, r9
 8000b5a:	d034      	beq.n	8000bc6 <PrintHex+0x196>
                        c = s[i];
 8000b5c:	f814 2b01 	ldrb.w	r2, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000b60:	0913      	lsrs	r3, r2, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000b62:	f002 080f 	and.w	r8, r2, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000b66:	f000 80d9 	beq.w	8000d1c <PrintHex+0x2ec>
                        if (uHex<10) uHex+='0';
 8000b6a:	2b09      	cmp	r3, #9
 8000b6c:	f240 813a 	bls.w	8000de4 <PrintHex+0x3b4>
                        else         uHex+='A'-10;
 8000b70:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000b74:	47a8      	blx	r5
 8000b76:	2700      	movs	r7, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000b78:	f1b8 0f00 	cmp.w	r8, #0
 8000b7c:	f000 80d7 	beq.w	8000d2e <PrintHex+0x2fe>
                        if (lHex<10) lHex+='0';
 8000b80:	f1b8 0f09 	cmp.w	r8, #9
 8000b84:	f240 8110 	bls.w	8000da8 <PrintHex+0x378>
                        else         lHex+='A'-10;
 8000b88:	f108 0037 	add.w	r0, r8, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000b8c:	47a8      	blx	r5
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000b92:	2700      	movs	r7, #0
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000b94:	090b      	lsrs	r3, r1, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000b96:	f001 080f 	and.w	r8, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000b9a:	d1cb      	bne.n	8000b34 <PrintHex+0x104>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000b9c:	2f00      	cmp	r7, #0
 8000b9e:	f000 811b 	beq.w	8000dd8 <PrintHex+0x3a8>
                                if (flag0) print_byte_out('0');
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	f040 80cc 	bne.w	8000d40 <PrintHex+0x310>
                                else       print_byte_out(' ');
 8000ba8:	2020      	movs	r0, #32
 8000baa:	47a8      	blx	r5
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000bac:	f1b8 0f00 	cmp.w	r8, #0
 8000bb0:	d1ca      	bne.n	8000b48 <PrintHex+0x118>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000bb2:	2f00      	cmp	r7, #0
 8000bb4:	f000 8113 	beq.w	8000dde <PrintHex+0x3ae>
                                if (flag0) print_byte_out('0');
 8000bb8:	2e00      	cmp	r6, #0
 8000bba:	f040 80be 	bne.w	8000d3a <PrintHex+0x30a>
                                else       print_byte_out(' ');
 8000bbe:	2020      	movs	r0, #32
 8000bc0:	47a8      	blx	r5
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000bc2:	454c      	cmp	r4, r9
 8000bc4:	d1ca      	bne.n	8000b5c <PrintHex+0x12c>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
                }
        }
        return;
}
 8000bc6:	b006      	add	sp, #24
 8000bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8000bcc:	2b30      	cmp	r3, #48	; 0x30
 8000bce:	bf08      	it	eq
 8000bd0:	2601      	moveq	r6, #1
 8000bd2:	e75e      	b.n	8000a92 <PrintHex+0x62>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000bd4:	f89d 0004 	ldrb.w	r0, [sp, #4]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000bd8:	0903      	lsrs	r3, r0, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000bda:	f000 040f 	and.w	r4, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000bde:	d048      	beq.n	8000c72 <PrintHex+0x242>
                        if (uHex<10) uHex+='0';
 8000be0:	2b09      	cmp	r3, #9
 8000be2:	f240 80f0 	bls.w	8000dc6 <PrintHex+0x396>
                        else         uHex+='A'-10;
 8000be6:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000bea:	4d41      	ldr	r5, [pc, #260]	; (8000cf0 <PrintHex+0x2c0>)
 8000bec:	47a8      	blx	r5
 8000bee:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	d142      	bne.n	8000c7a <PrintHex+0x24a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f000 80f8 	beq.w	8000dea <PrintHex+0x3ba>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000bfa:	f89d c005 	ldrb.w	ip, [sp, #5]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000bfe:	2201      	movs	r2, #1
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c00:	ea5f 131c 	movs.w	r3, ip, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000c04:	f00c 040f 	and.w	r4, ip, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c08:	d045      	beq.n	8000c96 <PrintHex+0x266>
                        if (uHex<10) uHex+='0';
 8000c0a:	2b09      	cmp	r3, #9
 8000c0c:	f240 80cf 	bls.w	8000dae <PrintHex+0x37e>
                        else         uHex+='A'-10;
 8000c10:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000c14:	47a8      	blx	r5
 8000c16:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000c18:	2c00      	cmp	r4, #0
 8000c1a:	d142      	bne.n	8000ca2 <PrintHex+0x272>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f000 80c9 	beq.w	8000db4 <PrintHex+0x384>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000c22:	f89d e006 	ldrb.w	lr, [sp, #6]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000c26:	2201      	movs	r2, #1
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c28:	ea5f 131e 	movs.w	r3, lr, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000c2c:	f00e 040f 	and.w	r4, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c30:	d045      	beq.n	8000cbe <PrintHex+0x28e>
                        if (uHex<10) uHex+='0';
 8000c32:	2b09      	cmp	r3, #9
 8000c34:	f240 80c1 	bls.w	8000dba <PrintHex+0x38a>
                        else         uHex+='A'-10;
 8000c38:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000c3c:	47a8      	blx	r5
 8000c3e:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000c40:	2c00      	cmp	r4, #0
 8000c42:	d141      	bne.n	8000cc8 <PrintHex+0x298>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f000 80bb 	beq.w	8000dc0 <PrintHex+0x390>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000c4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000c4e:	2201      	movs	r2, #1
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000c50:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c54:	091b      	lsrs	r3, r3, #4
 8000c56:	d043      	beq.n	8000ce0 <PrintHex+0x2b0>
                        if (uHex<10) uHex+='0';
 8000c58:	2b09      	cmp	r3, #9
 8000c5a:	d943      	bls.n	8000ce4 <PrintHex+0x2b4>
                        else         uHex+='A'-10;
 8000c5c:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000c60:	47a8      	blx	r5
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000c62:	2c00      	cmp	r4, #0
 8000c64:	d078      	beq.n	8000d58 <PrintHex+0x328>
                        if (lHex<10) lHex+='0';
 8000c66:	2c09      	cmp	r4, #9
 8000c68:	d976      	bls.n	8000d58 <PrintHex+0x328>
                        else         lHex+='A'-10;
 8000c6a:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000c6e:	47a8      	blx	r5
 8000c70:	e7a9      	b.n	8000bc6 <PrintHex+0x196>
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c72:	2301      	movs	r3, #1
 8000c74:	4d1e      	ldr	r5, [pc, #120]	; (8000cf0 <PrintHex+0x2c0>)
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000c76:	2c00      	cmp	r4, #0
 8000c78:	d0bc      	beq.n	8000bf4 <PrintHex+0x1c4>
                        if (lHex<10) lHex+='0';
 8000c7a:	2c09      	cmp	r4, #9
 8000c7c:	f240 80b5 	bls.w	8000dea <PrintHex+0x3ba>
                        else         lHex+='A'-10;
 8000c80:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000c84:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000c86:	f89d c005 	ldrb.w	ip, [sp, #5]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000c8a:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c8c:	ea5f 131c 	movs.w	r3, ip, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000c90:	f00c 040f 	and.w	r4, ip, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c94:	d1b9      	bne.n	8000c0a <PrintHex+0x1da>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	f000 8089 	beq.w	8000dae <PrintHex+0x37e>
 8000c9c:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000c9e:	2c00      	cmp	r4, #0
 8000ca0:	d0bc      	beq.n	8000c1c <PrintHex+0x1ec>
                        if (lHex<10) lHex+='0';
 8000ca2:	2c09      	cmp	r4, #9
 8000ca4:	f240 8086 	bls.w	8000db4 <PrintHex+0x384>
                        else         lHex+='A'-10;
 8000ca8:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000cac:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000cae:	f89d e006 	ldrb.w	lr, [sp, #6]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000cb2:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000cb4:	ea5f 131e 	movs.w	r3, lr, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000cb8:	f00e 040f 	and.w	r4, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000cbc:	d1b9      	bne.n	8000c32 <PrintHex+0x202>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000cbe:	2a00      	cmp	r2, #0
 8000cc0:	d07b      	beq.n	8000dba <PrintHex+0x38a>
 8000cc2:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000cc4:	2c00      	cmp	r4, #0
 8000cc6:	d0bd      	beq.n	8000c44 <PrintHex+0x214>
                        if (lHex<10) lHex+='0';
 8000cc8:	2c09      	cmp	r4, #9
 8000cca:	d979      	bls.n	8000dc0 <PrintHex+0x390>
                        else         lHex+='A'-10;
 8000ccc:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000cd0:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000cd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000cd6:	2200      	movs	r2, #0
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000cd8:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000cdc:	091b      	lsrs	r3, r3, #4
 8000cde:	d1bb      	bne.n	8000c58 <PrintHex+0x228>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	d1be      	bne.n	8000c62 <PrintHex+0x232>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000ce4:	f103 0030 	add.w	r0, r3, #48	; 0x30
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000ce8:	47a8      	blx	r5
 8000cea:	e7ba      	b.n	8000c62 <PrintHex+0x232>
 8000cec:	080005b9 	.word	0x080005b9
 8000cf0:	08000561 	.word	0x08000561
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8000cf4:	43d0      	mvns	r0, r2
 8000cf6:	3008      	adds	r0, #8
 8000cf8:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 8000cfc:	1053      	asrs	r3, r2, #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 8000cfe:	f10d 0e04 	add.w	lr, sp, #4
 8000d02:	f81e 7003 	ldrb.w	r7, [lr, r3]
                        if (lHex!=0) leading_zero=false;
 8000d06:	f017 030f 	ands.w	r3, r7, #15
 8000d0a:	d03b      	beq.n	8000d84 <PrintHex+0x354>
                        if (lHex<10) lHex+='0';
 8000d0c:	2b09      	cmp	r3, #9
 8000d0e:	d949      	bls.n	8000da4 <PrintHex+0x374>
                        else         lHex+='A'-10;
 8000d10:	3337      	adds	r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000d12:	4618      	mov	r0, r3
 8000d14:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <PrintHex+0x3c0>)
 8000d16:	4798      	blx	r3
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e038      	b.n	8000d8e <PrintHex+0x35e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000d1c:	2f00      	cmp	r7, #0
 8000d1e:	d061      	beq.n	8000de4 <PrintHex+0x3b4>
                                if (flag0) print_byte_out('0');
 8000d20:	b18e      	cbz	r6, 8000d46 <PrintHex+0x316>
 8000d22:	2030      	movs	r0, #48	; 0x30
 8000d24:	47a8      	blx	r5
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000d26:	f1b8 0f00 	cmp.w	r8, #0
 8000d2a:	f47f af29 	bne.w	8000b80 <PrintHex+0x150>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000d2e:	2f00      	cmp	r7, #0
 8000d30:	d03a      	beq.n	8000da8 <PrintHex+0x378>
                                if (flag0) print_byte_out('0');
 8000d32:	b15e      	cbz	r6, 8000d4c <PrintHex+0x31c>
 8000d34:	2030      	movs	r0, #48	; 0x30
 8000d36:	47a8      	blx	r5
 8000d38:	e6f6      	b.n	8000b28 <PrintHex+0xf8>
 8000d3a:	2030      	movs	r0, #48	; 0x30
 8000d3c:	47a8      	blx	r5
 8000d3e:	e70b      	b.n	8000b58 <PrintHex+0x128>
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000d40:	2030      	movs	r0, #48	; 0x30
 8000d42:	47a8      	blx	r5
 8000d44:	e6fd      	b.n	8000b42 <PrintHex+0x112>
                                else       print_byte_out(' ');
 8000d46:	2020      	movs	r0, #32
 8000d48:	47a8      	blx	r5
 8000d4a:	e715      	b.n	8000b78 <PrintHex+0x148>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000d4c:	2020      	movs	r0, #32
 8000d4e:	47a8      	blx	r5
 8000d50:	e6ea      	b.n	8000b28 <PrintHex+0xf8>

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000d52:	2300      	movs	r3, #0
 8000d54:	a802      	add	r0, sp, #8
 8000d56:	e695      	b.n	8000a84 <PrintHex+0x54>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000d58:	f104 0030 	add.w	r0, r4, #48	; 0x30
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000d5c:	47a8      	blx	r5
 8000d5e:	e732      	b.n	8000bc6 <PrintHex+0x196>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000d60:	2f00      	cmp	r7, #0
 8000d62:	d036      	beq.n	8000dd2 <PrintHex+0x3a2>
                                if (flag0) print_byte_out('0');
 8000d64:	b15e      	cbz	r6, 8000d7e <PrintHex+0x34e>
 8000d66:	2030      	movs	r0, #48	; 0x30
 8000d68:	47a8      	blx	r5
 8000d6a:	e6d8      	b.n	8000b1e <PrintHex+0xee>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000d6c:	2f00      	cmp	r7, #0
 8000d6e:	d02d      	beq.n	8000dcc <PrintHex+0x39c>
                                if (flag0) print_byte_out('0');
 8000d70:	b116      	cbz	r6, 8000d78 <PrintHex+0x348>
 8000d72:	2030      	movs	r0, #48	; 0x30
 8000d74:	47a8      	blx	r5
 8000d76:	e6c6      	b.n	8000b06 <PrintHex+0xd6>
                                else       print_byte_out(' ');
 8000d78:	2020      	movs	r0, #32
 8000d7a:	47a8      	blx	r5
 8000d7c:	e6c3      	b.n	8000b06 <PrintHex+0xd6>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000d7e:	2020      	movs	r0, #32
 8000d80:	47a8      	blx	r5
 8000d82:	e6cc      	b.n	8000b1e <PrintHex+0xee>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000d84:	b13e      	cbz	r6, 8000d96 <PrintHex+0x366>
 8000d86:	2030      	movs	r0, #48	; 0x30
 8000d88:	4919      	ldr	r1, [pc, #100]	; (8000df0 <PrintHex+0x3c0>)
 8000d8a:	4788      	blx	r1
 8000d8c:	2701      	movs	r7, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 8000d8e:	9a05      	ldr	r2, [sp, #20]
 8000d90:	3a01      	subs	r2, #1
 8000d92:	9205      	str	r2, [sp, #20]
 8000d94:	e698      	b.n	8000ac8 <PrintHex+0x98>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000d96:	4f16      	ldr	r7, [pc, #88]	; (8000df0 <PrintHex+0x3c0>)
 8000d98:	2020      	movs	r0, #32
 8000d9a:	47b8      	blx	r7
 8000d9c:	2701      	movs	r7, #1
 8000d9e:	e7f6      	b.n	8000d8e <PrintHex+0x35e>
}

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
 8000da0:	461e      	mov	r6, r3
 8000da2:	e67b      	b.n	8000a9c <PrintHex+0x6c>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8000da4:	3330      	adds	r3, #48	; 0x30
 8000da6:	e7b4      	b.n	8000d12 <PrintHex+0x2e2>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000da8:	f108 0030 	add.w	r0, r8, #48	; 0x30
 8000dac:	e6ee      	b.n	8000b8c <PrintHex+0x15c>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000dae:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000db2:	e72f      	b.n	8000c14 <PrintHex+0x1e4>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000db4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000db8:	e778      	b.n	8000cac <PrintHex+0x27c>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000dba:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000dbe:	e73d      	b.n	8000c3c <PrintHex+0x20c>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000dc0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000dc4:	e784      	b.n	8000cd0 <PrintHex+0x2a0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000dc6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000dca:	e70e      	b.n	8000bea <PrintHex+0x1ba>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000dcc:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8000dd0:	e697      	b.n	8000b02 <PrintHex+0xd2>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000dd2:	f108 0030 	add.w	r0, r8, #48	; 0x30
 8000dd6:	e6a0      	b.n	8000b1a <PrintHex+0xea>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000dd8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000ddc:	e6af      	b.n	8000b3e <PrintHex+0x10e>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000dde:	f108 0030 	add.w	r0, r8, #48	; 0x30
 8000de2:	e6b7      	b.n	8000b54 <PrintHex+0x124>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000de4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000de8:	e6c4      	b.n	8000b74 <PrintHex+0x144>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000dea:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000dee:	e749      	b.n	8000c84 <PrintHex+0x254>
 8000df0:	08000561 	.word	0x08000561

08000df4 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 8000df4:	b40f      	push	{r0, r1, r2, r3}
 8000df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dfa:	b084      	sub	sp, #16
	int		i;
	va_list args;
	char	*s=fmt;
 8000dfc:	ad0a      	add	r5, sp, #40	; 0x28
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000dfe:	4b7e      	ldr	r3, [pc, #504]	; (8000ff8 <Lb_printf+0x204>)
 8000e00:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 8000e02:	f855 4b04 	ldr.w	r4, [r5], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000e06:	4e7d      	ldr	r6, [pc, #500]	; (8000ffc <Lb_printf+0x208>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000e08:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8001008 <Lb_printf+0x214>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000e0c:	4f7c      	ldr	r7, [pc, #496]	; (8001000 <Lb_printf+0x20c>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000e0e:	701a      	strb	r2, [r3, #0]
	
	while (*s)
 8000e10:	7820      	ldrb	r0, [r4, #0]
 8000e12:	2800      	cmp	r0, #0
 8000e14:	f000 80b8 	beq.w	8000f88 <Lb_printf+0x194>
	{
		if (*s=='%')
 8000e18:	2825      	cmp	r0, #37	; 0x25
 8000e1a:	f040 80ba 	bne.w	8000f92 <Lb_printf+0x19e>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8000e1e:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e22:	7860      	ldrb	r0, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8000e24:	3401      	adds	r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e26:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000e2a:	fa5f f18c 	uxtb.w	r1, ip
 8000e2e:	2901      	cmp	r1, #1
 8000e30:	f240 80c9 	bls.w	8000fc6 <Lb_printf+0x1d2>
 8000e34:	2873      	cmp	r0, #115	; 0x73
 8000e36:	f000 80c6 	beq.w	8000fc6 <Lb_printf+0x1d2>
 8000e3a:	2878      	cmp	r0, #120	; 0x78
 8000e3c:	f000 80c3 	beq.w	8000fc6 <Lb_printf+0x1d2>
 8000e40:	2825      	cmp	r0, #37	; 0x25
 8000e42:	f000 80c0 	beq.w	8000fc6 <Lb_printf+0x1d2>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e46:	f88d 0005 	strb.w	r0, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e4a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000e4e:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	2a01      	cmp	r2, #1
 8000e56:	f240 80bf 	bls.w	8000fd8 <Lb_printf+0x1e4>
 8000e5a:	2873      	cmp	r0, #115	; 0x73
 8000e5c:	f000 80bc 	beq.w	8000fd8 <Lb_printf+0x1e4>
 8000e60:	2878      	cmp	r0, #120	; 0x78
 8000e62:	f000 80b9 	beq.w	8000fd8 <Lb_printf+0x1e4>
 8000e66:	2825      	cmp	r0, #37	; 0x25
 8000e68:	f000 80b6 	beq.w	8000fd8 <Lb_printf+0x1e4>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e6c:	f88d 0006 	strb.w	r0, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e70:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000e74:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000e78:	fa5f f18c 	uxtb.w	r1, ip
 8000e7c:	2901      	cmp	r1, #1
 8000e7e:	f240 80ad 	bls.w	8000fdc <Lb_printf+0x1e8>
 8000e82:	2873      	cmp	r0, #115	; 0x73
 8000e84:	f000 80aa 	beq.w	8000fdc <Lb_printf+0x1e8>
 8000e88:	2878      	cmp	r0, #120	; 0x78
 8000e8a:	f000 80a7 	beq.w	8000fdc <Lb_printf+0x1e8>
 8000e8e:	2825      	cmp	r0, #37	; 0x25
 8000e90:	f000 80a4 	beq.w	8000fdc <Lb_printf+0x1e8>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e94:	f88d 0007 	strb.w	r0, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e98:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000e9c:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	2a01      	cmp	r2, #1
 8000ea4:	f240 809c 	bls.w	8000fe0 <Lb_printf+0x1ec>
 8000ea8:	2873      	cmp	r0, #115	; 0x73
 8000eaa:	f000 8099 	beq.w	8000fe0 <Lb_printf+0x1ec>
 8000eae:	2878      	cmp	r0, #120	; 0x78
 8000eb0:	f000 8096 	beq.w	8000fe0 <Lb_printf+0x1ec>
 8000eb4:	2825      	cmp	r0, #37	; 0x25
 8000eb6:	f000 8093 	beq.w	8000fe0 <Lb_printf+0x1ec>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000eba:	f88d 0008 	strb.w	r0, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ebe:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000ec2:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000ec6:	fa5f f18c 	uxtb.w	r1, ip
 8000eca:	2901      	cmp	r1, #1
 8000ecc:	f240 808a 	bls.w	8000fe4 <Lb_printf+0x1f0>
 8000ed0:	2873      	cmp	r0, #115	; 0x73
 8000ed2:	f000 8087 	beq.w	8000fe4 <Lb_printf+0x1f0>
 8000ed6:	2878      	cmp	r0, #120	; 0x78
 8000ed8:	f000 8084 	beq.w	8000fe4 <Lb_printf+0x1f0>
 8000edc:	2825      	cmp	r0, #37	; 0x25
 8000ede:	f000 8081 	beq.w	8000fe4 <Lb_printf+0x1f0>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ee2:	f88d 0009 	strb.w	r0, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ee6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000eea:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	2a01      	cmp	r2, #1
 8000ef2:	d979      	bls.n	8000fe8 <Lb_printf+0x1f4>
 8000ef4:	2873      	cmp	r0, #115	; 0x73
 8000ef6:	d077      	beq.n	8000fe8 <Lb_printf+0x1f4>
 8000ef8:	2878      	cmp	r0, #120	; 0x78
 8000efa:	d075      	beq.n	8000fe8 <Lb_printf+0x1f4>
 8000efc:	2825      	cmp	r0, #37	; 0x25
 8000efe:	d073      	beq.n	8000fe8 <Lb_printf+0x1f4>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f00:	f88d 000a 	strb.w	r0, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f04:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000f08:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000f0c:	fa5f f18c 	uxtb.w	r1, ip
 8000f10:	2901      	cmp	r1, #1
 8000f12:	d96b      	bls.n	8000fec <Lb_printf+0x1f8>
 8000f14:	2873      	cmp	r0, #115	; 0x73
 8000f16:	d069      	beq.n	8000fec <Lb_printf+0x1f8>
 8000f18:	2878      	cmp	r0, #120	; 0x78
 8000f1a:	d067      	beq.n	8000fec <Lb_printf+0x1f8>
 8000f1c:	2825      	cmp	r0, #37	; 0x25
 8000f1e:	d065      	beq.n	8000fec <Lb_printf+0x1f8>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f20:	f88d 000b 	strb.w	r0, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f24:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000f28:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	2a01      	cmp	r2, #1
 8000f30:	d95e      	bls.n	8000ff0 <Lb_printf+0x1fc>
 8000f32:	2873      	cmp	r0, #115	; 0x73
 8000f34:	d05c      	beq.n	8000ff0 <Lb_printf+0x1fc>
 8000f36:	2878      	cmp	r0, #120	; 0x78
 8000f38:	d05a      	beq.n	8000ff0 <Lb_printf+0x1fc>
 8000f3a:	2825      	cmp	r0, #37	; 0x25
 8000f3c:	d058      	beq.n	8000ff0 <Lb_printf+0x1fc>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f3e:	f88d 000c 	strb.w	r0, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f42:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000f46:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000f4a:	fa5f f18c 	uxtb.w	r1, ip
 8000f4e:	2901      	cmp	r1, #1
 8000f50:	d950      	bls.n	8000ff4 <Lb_printf+0x200>
 8000f52:	2873      	cmp	r0, #115	; 0x73
 8000f54:	d04e      	beq.n	8000ff4 <Lb_printf+0x200>
 8000f56:	2878      	cmp	r0, #120	; 0x78
 8000f58:	d04c      	beq.n	8000ff4 <Lb_printf+0x200>
 8000f5a:	2825      	cmp	r0, #37	; 0x25
 8000f5c:	d04a      	beq.n	8000ff4 <Lb_printf+0x200>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f5e:	f88d 000d 	strb.w	r0, [sp, #13]
 8000f62:	f814 0f01 	ldrb.w	r0, [r4, #1]!
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000f66:	3401      	adds	r4, #1
 8000f68:	2864      	cmp	r0, #100	; 0x64
 8000f6a:	d027      	beq.n	8000fbc <Lb_printf+0x1c8>
 8000f6c:	d814      	bhi.n	8000f98 <Lb_printf+0x1a4>
 8000f6e:	2825      	cmp	r0, #37	; 0x25
 8000f70:	d01d      	beq.n	8000fae <Lb_printf+0x1ba>
 8000f72:	2863      	cmp	r0, #99	; 0x63
 8000f74:	f47f af4c 	bne.w	8000e10 <Lb_printf+0x1c>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000f78:	f855 0b04 	ldr.w	r0, [r5], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000f7c:	b2c0      	uxtb	r0, r0
 8000f7e:	47b0      	blx	r6
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000f80:	7820      	ldrb	r0, [r4, #0]
 8000f82:	2800      	cmp	r0, #0
 8000f84:	f47f af48 	bne.w	8000e18 <Lb_printf+0x24>
			s++;
		}
	}
	va_end(args);
	return;
}
 8000f88:	b004      	add	sp, #16
 8000f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f8e:	b004      	add	sp, #16
 8000f90:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000f92:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8000f94:	3401      	adds	r4, #1
 8000f96:	e73b      	b.n	8000e10 <Lb_printf+0x1c>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000f98:	2873      	cmp	r0, #115	; 0x73
 8000f9a:	d00a      	beq.n	8000fb2 <Lb_printf+0x1be>
 8000f9c:	2878      	cmp	r0, #120	; 0x78
 8000f9e:	f47f af37 	bne.w	8000e10 <Lb_printf+0x1c>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000fa2:	a801      	add	r0, sp, #4
 8000fa4:	f855 1b04 	ldr.w	r1, [r5], #4
 8000fa8:	4a16      	ldr	r2, [pc, #88]	; (8001004 <Lb_printf+0x210>)
 8000faa:	4790      	blx	r2
					break;
 8000fac:	e730      	b.n	8000e10 <Lb_printf+0x1c>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000fae:	47b0      	blx	r6
				case 's' :
					PrintString(format, va_arg(args, char *));
 					break;
				case '%' :
					PrintChar("%c", '%');
					break;
 8000fb0:	e72e      	b.n	8000e10 <Lb_printf+0x1c>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000fb2:	a801      	add	r0, sp, #4
 8000fb4:	f855 1b04 	ldr.w	r1, [r5], #4
 8000fb8:	47b8      	blx	r7
 					break;
 8000fba:	e729      	b.n	8000e10 <Lb_printf+0x1c>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000fbc:	a801      	add	r0, sp, #4
 8000fbe:	f855 1b04 	ldr.w	r1, [r5], #4
 8000fc2:	47c0      	blx	r8
					break;
 8000fc4:	e724      	b.n	8000e10 <Lb_printf+0x1c>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000fc6:	2301      	movs	r3, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000fc8:	a904      	add	r1, sp, #16
 8000fca:	18cb      	adds	r3, r1, r3
					format[i] = '\0';
 8000fcc:	2200      	movs	r2, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000fce:	f803 0c0c 	strb.w	r0, [r3, #-12]
					format[i] = '\0';
 8000fd2:	f803 2c0b 	strb.w	r2, [r3, #-11]
                	break;
 8000fd6:	e7c6      	b.n	8000f66 <Lb_printf+0x172>
				}
				else 
				{
					format[i++] = *s++;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e7f5      	b.n	8000fc8 <Lb_printf+0x1d4>
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e7f3      	b.n	8000fc8 <Lb_printf+0x1d4>
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	e7f1      	b.n	8000fc8 <Lb_printf+0x1d4>
 8000fe4:	2305      	movs	r3, #5
 8000fe6:	e7ef      	b.n	8000fc8 <Lb_printf+0x1d4>
 8000fe8:	2306      	movs	r3, #6
 8000fea:	e7ed      	b.n	8000fc8 <Lb_printf+0x1d4>
 8000fec:	2307      	movs	r3, #7
 8000fee:	e7eb      	b.n	8000fc8 <Lb_printf+0x1d4>
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	e7e9      	b.n	8000fc8 <Lb_printf+0x1d4>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ff4:	2309      	movs	r3, #9
 8000ff6:	e7e7      	b.n	8000fc8 <Lb_printf+0x1d4>
 8000ff8:	2000040c 	.word	0x2000040c
 8000ffc:	08000561 	.word	0x08000561
 8001000:	08000599 	.word	0x08000599
 8001004:	08000a31 	.word	0x08000a31
 8001008:	08000605 	.word	0x08000605

0800100c <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 800100c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8001010:	4f7f      	ldr	r7, [pc, #508]	; (8001210 <Lb_vsprintf+0x204>)
 8001012:	2501      	movs	r5, #1
	pStrPrintBuf = pStr;
 8001014:	4c7f      	ldr	r4, [pc, #508]	; (8001214 <Lb_vsprintf+0x208>)
	StrPrintBufIndex = 0;
 8001016:	4b80      	ldr	r3, [pc, #512]	; (8001218 <Lb_vsprintf+0x20c>)
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8001018:	703d      	strb	r5, [r7, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 800101a:	4616      	mov	r6, r2



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800101c:	4d7f      	ldr	r5, [pc, #508]	; (800121c <Lb_vsprintf+0x210>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 800101e:	2200      	movs	r2, #0
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8001020:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8001228 <Lb_vsprintf+0x21c>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8001024:	4f7e      	ldr	r7, [pc, #504]	; (8001220 <Lb_vsprintf+0x214>)
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8001026:	6020      	str	r0, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8001028:	b084      	sub	sp, #16
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 800102a:	601a      	str	r2, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
	int		i;
	char	*s=fmt;
 800102c:	460c      	mov	r4, r1
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 800102e:	7820      	ldrb	r0, [r4, #0]
 8001030:	2800      	cmp	r0, #0
 8001032:	f000 80b7 	beq.w	80011a4 <Lb_vsprintf+0x198>
	{
		if (*s=='%')
 8001036:	2825      	cmp	r0, #37	; 0x25
 8001038:	f040 80b7 	bne.w	80011aa <Lb_vsprintf+0x19e>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 800103c:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001040:	7860      	ldrb	r0, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8001042:	3401      	adds	r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001044:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8001048:	fa5f f18c 	uxtb.w	r1, ip
 800104c:	2901      	cmp	r1, #1
 800104e:	f240 80c6 	bls.w	80011de <Lb_vsprintf+0x1d2>
 8001052:	2873      	cmp	r0, #115	; 0x73
 8001054:	f000 80c3 	beq.w	80011de <Lb_vsprintf+0x1d2>
 8001058:	2878      	cmp	r0, #120	; 0x78
 800105a:	f000 80c0 	beq.w	80011de <Lb_vsprintf+0x1d2>
 800105e:	2825      	cmp	r0, #37	; 0x25
 8001060:	f000 80bd 	beq.w	80011de <Lb_vsprintf+0x1d2>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001064:	f88d 0005 	strb.w	r0, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001068:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800106c:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8001070:	b2da      	uxtb	r2, r3
 8001072:	2a01      	cmp	r2, #1
 8001074:	f240 80bc 	bls.w	80011f0 <Lb_vsprintf+0x1e4>
 8001078:	2873      	cmp	r0, #115	; 0x73
 800107a:	f000 80b9 	beq.w	80011f0 <Lb_vsprintf+0x1e4>
 800107e:	2878      	cmp	r0, #120	; 0x78
 8001080:	f000 80b6 	beq.w	80011f0 <Lb_vsprintf+0x1e4>
 8001084:	2825      	cmp	r0, #37	; 0x25
 8001086:	f000 80b3 	beq.w	80011f0 <Lb_vsprintf+0x1e4>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800108a:	f88d 0006 	strb.w	r0, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800108e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001092:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8001096:	fa5f f18c 	uxtb.w	r1, ip
 800109a:	2901      	cmp	r1, #1
 800109c:	f240 80aa 	bls.w	80011f4 <Lb_vsprintf+0x1e8>
 80010a0:	2873      	cmp	r0, #115	; 0x73
 80010a2:	f000 80a7 	beq.w	80011f4 <Lb_vsprintf+0x1e8>
 80010a6:	2878      	cmp	r0, #120	; 0x78
 80010a8:	f000 80a4 	beq.w	80011f4 <Lb_vsprintf+0x1e8>
 80010ac:	2825      	cmp	r0, #37	; 0x25
 80010ae:	f000 80a1 	beq.w	80011f4 <Lb_vsprintf+0x1e8>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80010b2:	f88d 0007 	strb.w	r0, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80010b6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80010ba:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	2a01      	cmp	r2, #1
 80010c2:	f240 8099 	bls.w	80011f8 <Lb_vsprintf+0x1ec>
 80010c6:	2873      	cmp	r0, #115	; 0x73
 80010c8:	f000 8096 	beq.w	80011f8 <Lb_vsprintf+0x1ec>
 80010cc:	2878      	cmp	r0, #120	; 0x78
 80010ce:	f000 8093 	beq.w	80011f8 <Lb_vsprintf+0x1ec>
 80010d2:	2825      	cmp	r0, #37	; 0x25
 80010d4:	f000 8090 	beq.w	80011f8 <Lb_vsprintf+0x1ec>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80010d8:	f88d 0008 	strb.w	r0, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80010dc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80010e0:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 80010e4:	fa5f f18c 	uxtb.w	r1, ip
 80010e8:	2901      	cmp	r1, #1
 80010ea:	f240 8087 	bls.w	80011fc <Lb_vsprintf+0x1f0>
 80010ee:	2873      	cmp	r0, #115	; 0x73
 80010f0:	f000 8084 	beq.w	80011fc <Lb_vsprintf+0x1f0>
 80010f4:	2878      	cmp	r0, #120	; 0x78
 80010f6:	f000 8081 	beq.w	80011fc <Lb_vsprintf+0x1f0>
 80010fa:	2825      	cmp	r0, #37	; 0x25
 80010fc:	d07e      	beq.n	80011fc <Lb_vsprintf+0x1f0>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80010fe:	f88d 0009 	strb.w	r0, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001102:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001106:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 800110a:	b2da      	uxtb	r2, r3
 800110c:	2a01      	cmp	r2, #1
 800110e:	d977      	bls.n	8001200 <Lb_vsprintf+0x1f4>
 8001110:	2873      	cmp	r0, #115	; 0x73
 8001112:	d075      	beq.n	8001200 <Lb_vsprintf+0x1f4>
 8001114:	2878      	cmp	r0, #120	; 0x78
 8001116:	d073      	beq.n	8001200 <Lb_vsprintf+0x1f4>
 8001118:	2825      	cmp	r0, #37	; 0x25
 800111a:	d071      	beq.n	8001200 <Lb_vsprintf+0x1f4>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800111c:	f88d 000a 	strb.w	r0, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001120:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001124:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8001128:	fa5f f18c 	uxtb.w	r1, ip
 800112c:	2901      	cmp	r1, #1
 800112e:	d969      	bls.n	8001204 <Lb_vsprintf+0x1f8>
 8001130:	2873      	cmp	r0, #115	; 0x73
 8001132:	d067      	beq.n	8001204 <Lb_vsprintf+0x1f8>
 8001134:	2878      	cmp	r0, #120	; 0x78
 8001136:	d065      	beq.n	8001204 <Lb_vsprintf+0x1f8>
 8001138:	2825      	cmp	r0, #37	; 0x25
 800113a:	d063      	beq.n	8001204 <Lb_vsprintf+0x1f8>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800113c:	f88d 000b 	strb.w	r0, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001140:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001144:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8001148:	b2da      	uxtb	r2, r3
 800114a:	2a01      	cmp	r2, #1
 800114c:	d95c      	bls.n	8001208 <Lb_vsprintf+0x1fc>
 800114e:	2873      	cmp	r0, #115	; 0x73
 8001150:	d05a      	beq.n	8001208 <Lb_vsprintf+0x1fc>
 8001152:	2878      	cmp	r0, #120	; 0x78
 8001154:	d058      	beq.n	8001208 <Lb_vsprintf+0x1fc>
 8001156:	2825      	cmp	r0, #37	; 0x25
 8001158:	d056      	beq.n	8001208 <Lb_vsprintf+0x1fc>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800115a:	f88d 000c 	strb.w	r0, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800115e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001162:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8001166:	fa5f f18c 	uxtb.w	r1, ip
 800116a:	2901      	cmp	r1, #1
 800116c:	d94e      	bls.n	800120c <Lb_vsprintf+0x200>
 800116e:	2873      	cmp	r0, #115	; 0x73
 8001170:	d04c      	beq.n	800120c <Lb_vsprintf+0x200>
 8001172:	2878      	cmp	r0, #120	; 0x78
 8001174:	d04a      	beq.n	800120c <Lb_vsprintf+0x200>
 8001176:	2825      	cmp	r0, #37	; 0x25
 8001178:	d048      	beq.n	800120c <Lb_vsprintf+0x200>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800117a:	f88d 000d 	strb.w	r0, [sp, #13]
 800117e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8001182:	3401      	adds	r4, #1
 8001184:	2864      	cmp	r0, #100	; 0x64
 8001186:	d025      	beq.n	80011d4 <Lb_vsprintf+0x1c8>
 8001188:	d812      	bhi.n	80011b0 <Lb_vsprintf+0x1a4>
 800118a:	2825      	cmp	r0, #37	; 0x25
 800118c:	d01b      	beq.n	80011c6 <Lb_vsprintf+0x1ba>
 800118e:	2863      	cmp	r0, #99	; 0x63
 8001190:	f47f af4d 	bne.w	800102e <Lb_vsprintf+0x22>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8001194:	f856 0b04 	ldr.w	r0, [r6], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8001198:	b2c0      	uxtb	r0, r0
 800119a:	47a8      	blx	r5
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 800119c:	7820      	ldrb	r0, [r4, #0]
 800119e:	2800      	cmp	r0, #0
 80011a0:	f47f af49 	bne.w	8001036 <Lb_vsprintf+0x2a>
			s++;
		}
	}
	
	return;
}
 80011a4:	b004      	add	sp, #16
 80011a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80011aa:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 80011ac:	3401      	adds	r4, #1
 80011ae:	e73e      	b.n	800102e <Lb_vsprintf+0x22>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80011b0:	2873      	cmp	r0, #115	; 0x73
 80011b2:	d00a      	beq.n	80011ca <Lb_vsprintf+0x1be>
 80011b4:	2878      	cmp	r0, #120	; 0x78
 80011b6:	f47f af3a 	bne.w	800102e <Lb_vsprintf+0x22>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 80011ba:	a801      	add	r0, sp, #4
 80011bc:	f856 1b04 	ldr.w	r1, [r6], #4
 80011c0:	4a18      	ldr	r2, [pc, #96]	; (8001224 <Lb_vsprintf+0x218>)
 80011c2:	4790      	blx	r2
					break;
 80011c4:	e733      	b.n	800102e <Lb_vsprintf+0x22>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80011c6:	47a8      	blx	r5
				case 's' :
					PrintString(format, va_arg(args, char *));
 					break;
				case '%' :
					PrintChar("%c", '%');
					break;
 80011c8:	e731      	b.n	800102e <Lb_vsprintf+0x22>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 80011ca:	a801      	add	r0, sp, #4
 80011cc:	f856 1b04 	ldr.w	r1, [r6], #4
 80011d0:	47b8      	blx	r7
 					break;
 80011d2:	e72c      	b.n	800102e <Lb_vsprintf+0x22>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 80011d4:	a801      	add	r0, sp, #4
 80011d6:	f856 1b04 	ldr.w	r1, [r6], #4
 80011da:	47c0      	blx	r8
					break;
 80011dc:	e727      	b.n	800102e <Lb_vsprintf+0x22>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80011de:	2301      	movs	r3, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80011e0:	a904      	add	r1, sp, #16
 80011e2:	18cb      	adds	r3, r1, r3
					format[i] = '\0';
 80011e4:	2200      	movs	r2, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80011e6:	f803 0c0c 	strb.w	r0, [r3, #-12]
					format[i] = '\0';
 80011ea:	f803 2c0b 	strb.w	r2, [r3, #-11]
                	break;
 80011ee:	e7c8      	b.n	8001182 <Lb_vsprintf+0x176>
				}
				else 
				{
					format[i++] = *s++;
 80011f0:	2302      	movs	r3, #2
 80011f2:	e7f5      	b.n	80011e0 <Lb_vsprintf+0x1d4>
 80011f4:	2303      	movs	r3, #3
 80011f6:	e7f3      	b.n	80011e0 <Lb_vsprintf+0x1d4>
 80011f8:	2304      	movs	r3, #4
 80011fa:	e7f1      	b.n	80011e0 <Lb_vsprintf+0x1d4>
 80011fc:	2305      	movs	r3, #5
 80011fe:	e7ef      	b.n	80011e0 <Lb_vsprintf+0x1d4>
 8001200:	2306      	movs	r3, #6
 8001202:	e7ed      	b.n	80011e0 <Lb_vsprintf+0x1d4>
 8001204:	2307      	movs	r3, #7
 8001206:	e7eb      	b.n	80011e0 <Lb_vsprintf+0x1d4>
 8001208:	2308      	movs	r3, #8
 800120a:	e7e9      	b.n	80011e0 <Lb_vsprintf+0x1d4>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800120c:	2309      	movs	r3, #9
 800120e:	e7e7      	b.n	80011e0 <Lb_vsprintf+0x1d4>
 8001210:	2000040c 	.word	0x2000040c
 8001214:	200004d8 	.word	0x200004d8
 8001218:	20000408 	.word	0x20000408
 800121c:	08000561 	.word	0x08000561
 8001220:	08000599 	.word	0x08000599
 8001224:	08000a31 	.word	0x08000a31
 8001228:	08000605 	.word	0x08000605

0800122c <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 800122c:	4668      	mov	r0, sp
 800122e:	f020 0107 	bic.w	r1, r0, #7
 8001232:	468d      	mov	sp, r1
 8001234:	b579      	push	{r0, r3, r4, r5, r6, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001236:	492b      	ldr	r1, [pc, #172]	; (80012e4 <zero_loop+0x5a>)
 8001238:	4c2b      	ldr	r4, [pc, #172]	; (80012e8 <zero_loop+0x5e>)
 800123a:	42a1      	cmp	r1, r4
 800123c:	d221      	bcs.n	8001282 <Hw_StartUp_Init+0x56>
 800123e:	482b      	ldr	r0, [pc, #172]	; (80012ec <zero_loop+0x62>)
	{
		*(pulDest++) = *(pulSrc++);
 8001240:	460b      	mov	r3, r1
 8001242:	4602      	mov	r2, r0
 8001244:	f852 6b04 	ldr.w	r6, [r2], #4
 8001248:	43cd      	mvns	r5, r1
 800124a:	f843 6b04 	str.w	r6, [r3], #4
 800124e:	1965      	adds	r5, r4, r5
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001250:	42a3      	cmp	r3, r4
 8001252:	f3c5 0580 	ubfx	r5, r5, #2, #1
 8001256:	d214      	bcs.n	8001282 <Hw_StartUp_Init+0x56>
 8001258:	b13d      	cbz	r5, 800126a <Hw_StartUp_Init+0x3e>
	{
		*(pulDest++) = *(pulSrc++);
 800125a:	6815      	ldr	r5, [r2, #0]
 800125c:	f100 0208 	add.w	r2, r0, #8
 8001260:	601d      	str	r5, [r3, #0]
 8001262:	f101 0308 	add.w	r3, r1, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001266:	42a3      	cmp	r3, r4
 8001268:	d20b      	bcs.n	8001282 <Hw_StartUp_Init+0x56>
	{
		*(pulDest++) = *(pulSrc++);
 800126a:	4610      	mov	r0, r2
 800126c:	f850 5b04 	ldr.w	r5, [r0], #4
 8001270:	4619      	mov	r1, r3
 8001272:	f841 5b04 	str.w	r5, [r1], #4
 8001276:	6855      	ldr	r5, [r2, #4]
 8001278:	1d02      	adds	r2, r0, #4
 800127a:	605d      	str	r5, [r3, #4]
 800127c:	1d0b      	adds	r3, r1, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800127e:	42a3      	cmp	r3, r4
 8001280:	d3f3      	bcc.n	800126a <Hw_StartUp_Init+0x3e>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 8001282:	481e      	ldr	r0, [pc, #120]	; (80012fc <zero_loop+0x72>)
 8001284:	491e      	ldr	r1, [pc, #120]	; (8001300 <zero_loop+0x76>)
 8001286:	f04f 0200 	mov.w	r2, #0

0800128a <zero_loop>:
 800128a:	4288      	cmp	r0, r1
 800128c:	bfb8      	it	lt
 800128e:	f840 2b04 	strlt.w	r2, [r0], #4
 8001292:	dbfa      	blt.n	800128a <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8001294:	4916      	ldr	r1, [pc, #88]	; (80012f0 <zero_loop+0x66>)
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
	
	u32 TimeOutCnt  = 0;
 8001296:	2300      	movs	r3, #0
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8001298:	6808      	ldr	r0, [r1, #0]
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 800129a:	460a      	mov	r2, r1
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 800129c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80012a0:	6008      	str	r0, [r1, #0]
 80012a2:	e006      	b.n	80012b2 <zero_loop+0x28>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80012a4:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80012a6:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 80012aa:	d107      	bne.n	80012bc <zero_loop+0x32>
 80012ac:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012b0:	d004      	beq.n	80012bc <zero_loop+0x32>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80012b2:	6811      	ldr	r1, [r2, #0]
		TimeOutCnt++;		
 80012b4:	3302      	adds	r3, #2
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80012b6:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 80012ba:	d0f3      	beq.n	80012a4 <zero_loop+0x1a>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 80012bc:	490d      	ldr	r1, [pc, #52]	; (80012f4 <zero_loop+0x6a>)
 80012be:	680b      	ldr	r3, [r1, #0]
 80012c0:	f043 0010 	orr.w	r0, r3, #16
 80012c4:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 80012c6:	680a      	ldr	r2, [r1, #0]
 80012c8:	f022 0303 	bic.w	r3, r2, #3
 80012cc:	600b      	str	r3, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 80012ce:	6808      	ldr	r0, [r1, #0]


    main();
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <zero_loop+0x6e>)

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 80012d2:	f040 0202 	orr.w	r2, r0, #2
 80012d6:	600a      	str	r2, [r1, #0]


    main();
 80012d8:	4798      	blx	r3

}
 80012da:	e8bd 4079 	ldmia.w	sp!, {r0, r3, r4, r5, r6, lr}
 80012de:	4685      	mov	sp, r0
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000310 	.word	0x20000310
 80012ec:	0800501c 	.word	0x0800501c
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40022000 	.word	0x40022000
 80012f8:	08000019 	.word	0x08000019
 80012fc:	20000400 	.word	0x20000400
 8001300:	2000163c 	.word	0x2000163c

08001304 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8001304:	b508      	push	{r3, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 8001306:	4810      	ldr	r0, [pc, #64]	; (8001348 <Hw_Init+0x44>)
 8001308:	4780      	blx	r0
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <Hw_Init+0x48>)
 800130c:	4798      	blx	r3
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800130e:	4810      	ldr	r0, [pc, #64]	; (8001350 <Hw_Init+0x4c>)
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8001310:	4910      	ldr	r1, [pc, #64]	; (8001354 <Hw_Init+0x50>)
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8001312:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001316:	6002      	str	r2, [r0, #0]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <Hw_Init+0x54>)
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800131a:	6041      	str	r1, [r0, #4]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800131c:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8001320:	f8c0 2404 	str.w	r2, [r0, #1028]	; 0x404
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <Hw_Init+0x58>)
	
	Hw_DMA_Init();
 8001326:	490e      	ldr	r1, [pc, #56]	; (8001360 <Hw_Init+0x5c>)
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8001328:	601a      	str	r2, [r3, #0]
	
	Hw_DMA_Init();
 800132a:	4788      	blx	r1
	Hw_Uart_Init();
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <Hw_Init+0x60>)
 800132e:	4780      	blx	r0
	Hw_Led_Init();
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <Hw_Init+0x64>)
 8001332:	4798      	blx	r3
	Hw_Timer_Init();
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <Hw_Init+0x68>)
 8001336:	4790      	blx	r2
	Hw_Si47xx_Init();
 8001338:	490d      	ldr	r1, [pc, #52]	; (8001370 <Hw_Init+0x6c>)
 800133a:	4788      	blx	r1
	Hw_N5110G_Init();
 800133c:	480d      	ldr	r0, [pc, #52]	; (8001374 <Hw_Init+0x70>)
 800133e:	4780      	blx	r0
	
	Hw_VCom_Init();
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <Hw_Init+0x74>)
 8001342:	4798      	blx	r3
}
 8001344:	bd08      	pop	{r3, pc}
 8001346:	bf00      	nop
 8001348:	08001501 	.word	0x08001501
 800134c:	0800172d 	.word	0x0800172d
 8001350:	40010800 	.word	0x40010800
 8001354:	333334b3 	.word	0x333334b3
 8001358:	40011004 	.word	0x40011004
 800135c:	33444444 	.word	0x33444444
 8001360:	080030a9 	.word	0x080030a9
 8001364:	08001459 	.word	0x08001459
 8001368:	0800158d 	.word	0x0800158d
 800136c:	080017a9 	.word	0x080017a9
 8001370:	08002365 	.word	0x08002365
 8001374:	080028e1 	.word	0x080028e1
 8001378:	08001a61 	.word	0x08001a61

0800137c <Hw_Wait>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
 800137c:	b082      	sub	sp, #8
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 800137e:	2100      	movs	r1, #0
 8001380:	9101      	str	r1, [sp, #4]
 8001382:	9b01      	ldr	r3, [sp, #4]
 8001384:	4298      	cmp	r0, r3
 8001386:	d905      	bls.n	8001394 <Hw_Wait+0x18>
 8001388:	9901      	ldr	r1, [sp, #4]
 800138a:	1c4b      	adds	r3, r1, #1
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	9a01      	ldr	r2, [sp, #4]
 8001390:	4282      	cmp	r2, r0
 8001392:	d3f9      	bcc.n	8001388 <Hw_Wait+0xc>
}
 8001394:	b002      	add	sp, #8
 8001396:	4770      	bx	lr

08001398 <Hw_Wait_Usec>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
 8001398:	b082      	sub	sp, #8
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 800139a:	2100      	movs	r1, #0
 800139c:	9101      	str	r1, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 800139e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80013a2:	9b01      	ldr	r3, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 80013a4:	0042      	lsls	r2, r0, #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d905      	bls.n	80013b6 <Hw_Wait_Usec+0x1e>
 80013aa:	9901      	ldr	r1, [sp, #4]
 80013ac:	1c48      	adds	r0, r1, #1
 80013ae:	9001      	str	r0, [sp, #4]
 80013b0:	9b01      	ldr	r3, [sp, #4]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8f9      	bhi.n	80013aa <Hw_Wait_Usec+0x12>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
}
 80013b6:	b002      	add	sp, #8
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop

080013bc <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80013bc:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <Hw_ISR_UART1_Handler+0x18>)


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80013c0:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80013c2:	6802      	ldr	r2, [r0, #0]
 80013c4:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 80013c6:	2000      	movs	r0, #0
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80013c8:	f801 2d01 	strb.w	r2, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <Hw_ISR_UART1_Handler+0x1c>)
 80013ce:	4798      	blx	r3
}
 80013d0:	b003      	add	sp, #12
 80013d2:	bd00      	pop	{pc}
 80013d4:	40013804 	.word	0x40013804
 80013d8:	08001641 	.word	0x08001641

080013dc <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 80013dc:	b570      	push	{r4, r5, r6, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80013de:	4d12      	ldr	r5, [pc, #72]	; (8001428 <Hw_Uart_Open_COM1+0x4c>)
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80013e0:	4c12      	ldr	r4, [pc, #72]	; (800142c <Hw_Uart_Open_COM1+0x50>)
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80013e2:	682b      	ldr	r3, [r5, #0]
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80013e4:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80013e6:	f443 4680 	orr.w	r6, r3, #16384	; 0x4000
 80013ea:	602e      	str	r6, [r5, #0]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80013ec:	250c      	movs	r5, #12
 80013ee:	6025      	str	r5, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80013f0:	4d0f      	ldr	r5, [pc, #60]	; (8001430 <Hw_Uart_Open_COM1+0x54>)
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <Hw_Uart_Open_COM1+0x58>)
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80013f4:	f240 2671 	movw	r6, #625	; 0x271
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80013f8:	602a      	str	r2, [r5, #0]
	REG_USART1_CR3  = 0;
 80013fa:	606a      	str	r2, [r5, #4]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80013fc:	f845 6c08 	str.w	r6, [r5, #-8]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8001400:	681e      	ldr	r6, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8001402:	4d0d      	ldr	r5, [pc, #52]	; (8001438 <Hw_Uart_Open_COM1+0x5c>)
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8001404:	f046 0620 	orr.w	r6, r6, #32
 8001408:	601e      	str	r6, [r3, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800140a:	6823      	ldr	r3, [r4, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 800140c:	6068      	str	r0, [r5, #4]
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800140e:	f043 0320 	orr.w	r3, r3, #32
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 8001412:	60a9      	str	r1, [r5, #8]
	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8001414:	2025      	movs	r0, #37	; 0x25
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8001416:	6023      	str	r3, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8001418:	4908      	ldr	r1, [pc, #32]	; (800143c <Hw_Uart_Open_COM1+0x60>)
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <Hw_Uart_Open_COM1+0x64>)
 800141c:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 800141e:	6820      	ldr	r0, [r4, #0]
 8001420:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
 8001424:	6023      	str	r3, [r4, #0]
}
 8001426:	bd70      	pop	{r4, r5, r6, pc}
 8001428:	40021018 	.word	0x40021018
 800142c:	4001380c 	.word	0x4001380c
 8001430:	40013810 	.word	0x40013810
 8001434:	e000e104 	.word	0xe000e104
 8001438:	200004dc 	.word	0x200004dc
 800143c:	080013bd 	.word	0x080013bd
 8001440:	0800173d 	.word	0x0800173d

08001444 <Hw_Uart_Open>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8001444:	b508      	push	{r3, lr}
	switch( Ch )
 8001446:	b918      	cbnz	r0, 8001450 <Hw_Uart_Open+0xc>
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8001448:	4608      	mov	r0, r1
 800144a:	4b02      	ldr	r3, [pc, #8]	; (8001454 <Hw_Uart_Open+0x10>)
 800144c:	4611      	mov	r1, r2
 800144e:	4798      	blx	r3
 8001450:	bd08      	pop	{r3, pc}
 8001452:	bf00      	nop
 8001454:	080013dd 	.word	0x080013dd

08001458 <Hw_Uart_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8001458:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 800145a:	480a      	ldr	r0, [pc, #40]	; (8001484 <Hw_Uart_Init+0x2c>)
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800145c:	4c0a      	ldr	r4, [pc, #40]	; (8001488 <Hw_Uart_Init+0x30>)
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 800145e:	4780      	blx	r0
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001460:	2300      	movs	r3, #0
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
	}	
	
	
	Hw_Uart_Open( HW_UART_COM1, 115200, NULL );
 8001462:	4618      	mov	r0, r3
 8001464:	461a      	mov	r2, r3
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001466:	6063      	str	r3, [r4, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001468:	60a3      	str	r3, [r4, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800146a:	6123      	str	r3, [r4, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800146c:	6163      	str	r3, [r4, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800146e:	61e3      	str	r3, [r4, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001470:	6223      	str	r3, [r4, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001472:	62a3      	str	r3, [r4, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001474:	62e3      	str	r3, [r4, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001476:	6363      	str	r3, [r4, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001478:	63a3      	str	r3, [r4, #56]	; 0x38
	}	
	
	
	Hw_Uart_Open( HW_UART_COM1, 115200, NULL );
 800147a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800147e:	4b03      	ldr	r3, [pc, #12]	; (800148c <Hw_Uart_Init+0x34>)
 8001480:	4798      	blx	r3
}
 8001482:	bd10      	pop	{r4, pc}
 8001484:	080015e1 	.word	0x080015e1
 8001488:	200004dc 	.word	0x200004dc
 800148c:	08001445 	.word	0x08001445

08001490 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8001490:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 8001492:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8001494:	b083      	sub	sp, #12
 8001496:	4d08      	ldr	r5, [pc, #32]	; (80014b8 <Hw_Uart_Getch+0x28>)
 8001498:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 800149a:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 800149e:	4620      	mov	r0, r4
 80014a0:	47a8      	blx	r5
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d0fb      	beq.n	800149e <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 80014a6:	4620      	mov	r0, r4
 80014a8:	f10d 0107 	add.w	r1, sp, #7
 80014ac:	4a03      	ldr	r2, [pc, #12]	; (80014bc <Hw_Uart_Getch+0x2c>)
 80014ae:	4790      	blx	r2

	return Uart_GetData;
}
 80014b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80014b4:	b003      	add	sp, #12
 80014b6:	bd30      	pop	{r4, r5, pc}
 80014b8:	0800160d 	.word	0x0800160d
 80014bc:	080016b9 	.word	0x080016b9

080014c0 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 80014c0:	280a      	cmp	r0, #10
 80014c2:	d008      	beq.n	80014d6 <print_byte+0x16>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80014c4:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <print_byte+0x28>)
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
    
    Hw_Uart_Putch(HW_UART_COM1, c);
 80014c6:	b2c0      	uxtb	r0, r0
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80014c8:	6813      	ldr	r3, [r2, #0]
 80014ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80014ce:	d0fb      	beq.n	80014c8 <print_byte+0x8>
    
    REG_USART1_DR = Uart_PutData;
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <print_byte+0x2c>)
 80014d2:	6010      	str	r0, [r2, #0]
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
    
    Hw_Uart_Putch(HW_UART_COM1, c);
#endif    
}
 80014d4:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <print_byte+0x28>)
 80014d8:	6813      	ldr	r3, [r2, #0]
 80014da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80014de:	d0fb      	beq.n	80014d8 <print_byte+0x18>
    
    REG_USART1_DR = Uart_PutData;
 80014e0:	4902      	ldr	r1, [pc, #8]	; (80014ec <print_byte+0x2c>)
 80014e2:	220d      	movs	r2, #13
 80014e4:	600a      	str	r2, [r1, #0]
 80014e6:	e7ed      	b.n	80014c4 <print_byte+0x4>
 80014e8:	40013800 	.word	0x40013800
 80014ec:	40013804 	.word	0x40013804

080014f0 <get_byte>:
#endif    
}


char get_byte(void)
{
 80014f0:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 80014f2:	2000      	movs	r0, #0
 80014f4:	4b01      	ldr	r3, [pc, #4]	; (80014fc <get_byte+0xc>)
 80014f6:	4798      	blx	r3
#endif
	
	return Ch;
}
 80014f8:	bd08      	pop	{r3, pc}
 80014fa:	bf00      	nop
 80014fc:	08001491 	.word	0x08001491

08001500 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <Hw_PLL_Init+0x80>)
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8001502:	4920      	ldr	r1, [pc, #128]	; (8001584 <Hw_PLL_Init+0x84>)
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8001504:	6818      	ldr	r0, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8001506:	460a      	mov	r2, r1
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8001508:	f420 1c7c 	bic.w	ip, r0, #4128768	; 0x3f0000
 800150c:	f02c 00f0 	bic.w	r0, ip, #240	; 0xf0
 8001510:	6018      	str	r0, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	f440 10e8 	orr.w	r0, r0, #1900544	; 0x1d0000
 8001518:	6018      	str	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800151a:	6808      	ldr	r0, [r1, #0]
 800151c:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
 8001520:	600b      	str	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8001522:	6811      	ldr	r1, [r2, #0]
 8001524:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001528:	d0fb      	beq.n	8001522 <Hw_PLL_Init+0x22>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <Hw_PLL_Init+0x80>)
 800152c:	6818      	ldr	r0, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 800152e:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8001530:	f020 0103 	bic.w	r1, r0, #3
 8001534:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	f040 0102 	orr.w	r1, r0, #2
 800153c:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 8001544:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 800154c:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 8001554:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 800155c:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	6018      	str	r0, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8001562:	6813      	ldr	r3, [r2, #0]
 8001564:	f003 0c0c 	and.w	ip, r3, #12
 8001568:	f1bc 0f08 	cmp.w	ip, #8
 800156c:	d1f9      	bne.n	8001562 <Hw_PLL_Init+0x62>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 800156e:	4a06      	ldr	r2, [pc, #24]	; (8001588 <Hw_PLL_Init+0x88>)
 8001570:	6813      	ldr	r3, [r2, #0]
 8001572:	f443 4080 	orr.w	r0, r3, #16384	; 0x4000
 8001576:	f040 011d 	orr.w	r1, r0, #29
 800157a:	6011      	str	r1, [r2, #0]
				0x1 <<  4 | // IOPC
				0x1 <<  3 | // IOPB
				0x1 <<  2 | // IOPA
				0x1 <<  0;  // AFIO
					
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40021004 	.word	0x40021004
 8001584:	40021000 	.word	0x40021000
 8001588:	40021018 	.word	0x40021018

0800158c <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 800158c:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <Hw_Led_Init+0x34>)
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <Hw_Led_Init+0x38>)
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8001590:	6810      	ldr	r0, [r2, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8001592:	490d      	ldr	r1, [pc, #52]	; (80015c8 <Hw_Led_Init+0x3c>)
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8001594:	f020 60e0 	bic.w	r0, r0, #117440512	; 0x7000000
 8001598:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 800159a:	6810      	ldr	r0, [r2, #0]
 800159c:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 80015a0:	6010      	str	r0, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	f422 4070 	bic.w	r0, r2, #61440	; 0xf000
 80015a8:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	f442 5040 	orr.w	r0, r2, #12288	; 0x3000
 80015b0:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	601a      	str	r2, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80015b6:	6808      	ldr	r0, [r1, #0]
 80015b8:	f040 0308 	orr.w	r3, r0, #8
 80015bc:	600b      	str	r3, [r1, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
	
		
	Hw_Led_Off(0);
}
 80015be:	4770      	bx	lr
 80015c0:	40010004 	.word	0x40010004
 80015c4:	40010c00 	.word	0x40010c00
 80015c8:	40010c0c 	.word	0x40010c0c

080015cc <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 80015cc:	b920      	cbnz	r0, 80015d8 <Hw_Led_Toggle+0xc>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 80015ce:	4b03      	ldr	r3, [pc, #12]	; (80015dc <Hw_Led_Toggle+0x10>)
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	f080 0208 	eor.w	r2, r0, #8
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40010c0c 	.word	0x40010c0c

080015e0 <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 80015e0:	4908      	ldr	r1, [pc, #32]	; (8001604 <Hw_Uart_Q_Init+0x24>)
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <Hw_Uart_Q_Init+0x28>)
 80015e4:	2300      	movs	r3, #0
 80015e6:	800b      	strh	r3, [r1, #0]
 80015e8:	8013      	strh	r3, [r2, #0]
 80015ea:	804b      	strh	r3, [r1, #2]
 80015ec:	8053      	strh	r3, [r2, #2]
 80015ee:	808b      	strh	r3, [r1, #4]
 80015f0:	8093      	strh	r3, [r2, #4]
 80015f2:	80cb      	strh	r3, [r1, #6]
 80015f4:	80d3      	strh	r3, [r2, #6]
 80015f6:	810b      	strh	r3, [r1, #8]
 80015f8:	8113      	strh	r3, [r2, #8]
 80015fa:	814b      	strh	r3, [r1, #10]
 80015fc:	8153      	strh	r3, [r2, #10]
 80015fe:	818b      	strh	r3, [r1, #12]
 8001600:	8193      	strh	r3, [r2, #12]
	}
}
 8001602:	4770      	bx	lr
 8001604:	20000610 	.word	0x20000610
 8001608:	20000620 	.word	0x20000620

0800160c <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800160c:	4909      	ldr	r1, [pc, #36]	; (8001634 <HW_UART_Q_VAILD+0x28>)
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HW_UART_Q_VAILD+0x2c>)
 8001610:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8001614:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8001618:	3120      	adds	r1, #32
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <HW_UART_Q_VAILD+0x30>)
 800161c:	1a8b      	subs	r3, r1, r2
 800161e:	ea03 0000 	and.w	r0, r3, r0
 8001622:	2800      	cmp	r0, #0
 8001624:	db00      	blt.n	8001628 <HW_UART_Q_VAILD+0x1c>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8001626:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001628:	1e42      	subs	r2, r0, #1
 800162a:	f062 001f 	orn	r0, r2, #31
 800162e:	3001      	adds	r0, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000620 	.word	0x20000620
 8001638:	20000610 	.word	0x20000610
 800163c:	8000001f 	.word	0x8000001f

08001640 <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001640:	4a19      	ldr	r2, [pc, #100]	; (80016a8 <Hw_Uart_Q_Push+0x68>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8001642:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001644:	4e19      	ldr	r6, [pc, #100]	; (80016ac <Hw_Uart_Q_Push+0x6c>)
 8001646:	f832 4010 	ldrh.w	r4, [r2, r0, lsl #1]
 800164a:	f936 5010 	ldrsh.w	r5, [r6, r0, lsl #1]
 800164e:	b222      	sxth	r2, r4
 8001650:	f102 0620 	add.w	r6, r2, #32
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <Hw_Uart_Q_Push+0x70>)
 8001656:	1b75      	subs	r5, r6, r5
 8001658:	ea05 0303 	and.w	r3, r5, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	db16      	blt.n	800168e <Hw_Uart_Q_Push+0x4e>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8001660:	2b1f      	cmp	r3, #31
 8001662:	d01a      	beq.n	800169a <Hw_Uart_Q_Push+0x5a>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8001664:	3401      	adds	r4, #1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <Hw_Uart_Q_Push+0x70>)
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8001668:	0145      	lsls	r5, r0, #5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800166a:	b224      	sxth	r4, r4
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800166c:	182e      	adds	r6, r5, r0
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800166e:	ea04 0303 	and.w	r3, r4, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8001672:	780d      	ldrb	r5, [r1, #0]
 8001674:	490f      	ldr	r1, [pc, #60]	; (80016b4 <Hw_Uart_Q_Push+0x74>)
 8001676:	eb06 0c02 	add.w	ip, r6, r2
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800167a:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800167c:	f801 500c 	strb.w	r5, [r1, ip]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8001680:	db0d      	blt.n	800169e <Hw_Uart_Q_Push+0x5e>
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <Hw_Uart_Q_Push+0x68>)
 8001684:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]

	return TRUE;
 8001688:	2001      	movs	r0, #1
}
 800168a:	bc70      	pop	{r4, r5, r6}
 800168c:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800168e:	3b01      	subs	r3, #1
 8001690:	f063 031f 	orn	r3, r3, #31
 8001694:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8001696:	2b1f      	cmp	r3, #31
 8001698:	d1e4      	bne.n	8001664 <Hw_Uart_Q_Push+0x24>
 800169a:	2000      	movs	r0, #0
 800169c:	e7f5      	b.n	800168a <Hw_Uart_Q_Push+0x4a>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800169e:	1e59      	subs	r1, r3, #1
 80016a0:	f061 021f 	orn	r2, r1, #31
 80016a4:	1c53      	adds	r3, r2, #1
 80016a6:	e7ec      	b.n	8001682 <Hw_Uart_Q_Push+0x42>
 80016a8:	20000620 	.word	0x20000620
 80016ac:	20000610 	.word	0x20000610
 80016b0:	8000001f 	.word	0x8000001f
 80016b4:	20000518 	.word	0x20000518

080016b8 <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 80016b8:	b430      	push	{r4, r5}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80016ba:	4a18      	ldr	r2, [pc, #96]	; (800171c <Hw_Uart_Q_Pop+0x64>)
 80016bc:	4c18      	ldr	r4, [pc, #96]	; (8001720 <Hw_Uart_Q_Pop+0x68>)
 80016be:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80016c2:	f934 5010 	ldrsh.w	r5, [r4, r0, lsl #1]
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <Hw_Uart_Q_Pop+0x6c>)
 80016c8:	3520      	adds	r5, #32
 80016ca:	b214      	sxth	r4, r2
 80016cc:	1b2d      	subs	r5, r5, r4
 80016ce:	ea05 0303 	and.w	r3, r5, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	db14      	blt.n	8001700 <Hw_Uart_Q_Pop+0x48>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 80016d6:	b1cb      	cbz	r3, 800170c <Hw_Uart_Q_Pop+0x54>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80016d8:	0143      	lsls	r3, r0, #5
 80016da:	181d      	adds	r5, r3, r0
 80016dc:	192c      	adds	r4, r5, r4
 80016de:	3201      	adds	r2, #1

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80016e0:	4b10      	ldr	r3, [pc, #64]	; (8001724 <Hw_Uart_Q_Pop+0x6c>)
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80016e2:	4d11      	ldr	r5, [pc, #68]	; (8001728 <Hw_Uart_Q_Pop+0x70>)

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80016e4:	fa0f fc82 	sxth.w	ip, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80016e8:	5d2c      	ldrb	r4, [r5, r4]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80016ea:	ea0c 0303 	and.w	r3, ip, r3
 80016ee:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80016f0:	700c      	strb	r4, [r1, #0]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80016f2:	db0d      	blt.n	8001710 <Hw_Uart_Q_Pop+0x58>
 80016f4:	4909      	ldr	r1, [pc, #36]	; (800171c <Hw_Uart_Q_Pop+0x64>)
 80016f6:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

    return TRUE;
 80016fa:	2001      	movs	r0, #1
}
 80016fc:	bc30      	pop	{r4, r5}
 80016fe:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001700:	3b01      	subs	r3, #1
 8001702:	f063 031f 	orn	r3, r3, #31
 8001706:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1e5      	bne.n	80016d8 <Hw_Uart_Q_Pop+0x20>
 800170c:	4618      	mov	r0, r3
 800170e:	e7f5      	b.n	80016fc <Hw_Uart_Q_Pop+0x44>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	f062 011f 	orn	r1, r2, #31
 8001716:	1c4b      	adds	r3, r1, #1
 8001718:	e7ec      	b.n	80016f4 <Hw_Uart_Q_Pop+0x3c>
 800171a:	bf00      	nop
 800171c:	20000610 	.word	0x20000610
 8001720:	20000620 	.word	0x20000620
 8001724:	8000001f 	.word	0x8000001f
 8001728:	20000518 	.word	0x20000518

0800172c <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 800172c:	4b01      	ldr	r3, [pc, #4]	; (8001734 <Hw_ISR_Init+0x8>)
 800172e:	4a02      	ldr	r2, [pc, #8]	; (8001738 <Hw_ISR_Init+0xc>)
 8001730:	601a      	str	r2, [r3, #0]
}
 8001732:	4770      	bx	lr
 8001734:	e000ed08 	.word	0xe000ed08
 8001738:	20000800 	.word	0x20000800

0800173c <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 800173c:	4b02      	ldr	r3, [pc, #8]	; (8001748 <Hw_ISR_SetIRQFunc+0xc>)
 800173e:	3010      	adds	r0, #16
 8001740:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000800 	.word	0x20000800

0800174c <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 800174c:	4b02      	ldr	r3, [pc, #8]	; (8001758 <Hw_ISR_SetIRQFuncByAddr+0xc>)
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 800174e:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8001750:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000800 	.word	0x20000800

0800175c <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 800175c:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 800175e:	203c      	movs	r0, #60	; 0x3c
 8001760:	4902      	ldr	r1, [pc, #8]	; (800176c <Hw_Timer_SetupISR+0x10>)
 8001762:	2200      	movs	r2, #0
 8001764:	4b02      	ldr	r3, [pc, #8]	; (8001770 <Hw_Timer_SetupISR+0x14>)
 8001766:	4798      	blx	r3
}
 8001768:	bd08      	pop	{r3, pc}
 800176a:	bf00      	nop
 800176c:	080019f1 	.word	0x080019f1
 8001770:	0800174d 	.word	0x0800174d

08001774 <Hw_Timer_Setup>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8001774:	4a09      	ldr	r2, [pc, #36]	; (800179c <Hw_Timer_Setup+0x28>)
 8001776:	490a      	ldr	r1, [pc, #40]	; (80017a0 <Hw_Timer_Setup+0x2c>)
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <Hw_Timer_Setup+0x30>)
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 800177a:	2000      	movs	r0, #0
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800177c:	6011      	str	r1, [r2, #0]
	
	REG_STK_VAL  = 0;	
 800177e:	6050      	str	r0, [r2, #4]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	f041 0004 	orr.w	r0, r1, #4
 8001786:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	f042 0102 	orr.w	r1, r2, #2
 800178e:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	f040 0201 	orr.w	r2, r0, #1
 8001796:	601a      	str	r2, [r3, #0]
	
}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000e014 	.word	0xe000e014
 80017a0:	0001193f 	.word	0x0001193f
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 80017a8:	b510      	push	{r4, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 80017aa:	4c1a      	ldr	r4, [pc, #104]	; (8001814 <Hw_Timer_Init+0x6c>)
 80017ac:	7823      	ldrb	r3, [r4, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d02e      	beq.n	8001810 <Hw_Timer_Init+0x68>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <Hw_Timer_Init+0x70>)
 80017b4:	2000      	movs	r0, #0
 80017b6:	7018      	strb	r0, [r3, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80017b8:	8058      	strh	r0, [r3, #2]
		Timer_Tbl[i].Timer_Init = 0;
 80017ba:	8098      	strh	r0, [r3, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 80017bc:	6098      	str	r0, [r3, #8]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80017be:	7418      	strb	r0, [r3, #16]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80017c0:	8258      	strh	r0, [r3, #18]
		Timer_Tbl[i].Timer_Init = 0;
 80017c2:	8298      	strh	r0, [r3, #20]
		Timer_Tbl[i].TmrFnct    = NULL;
 80017c4:	6198      	str	r0, [r3, #24]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80017c6:	f883 0020 	strb.w	r0, [r3, #32]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80017ca:	8458      	strh	r0, [r3, #34]	; 0x22
		Timer_Tbl[i].Timer_Init = 0;
 80017cc:	8498      	strh	r0, [r3, #36]	; 0x24
		Timer_Tbl[i].TmrFnct    = NULL;
 80017ce:	6298      	str	r0, [r3, #40]	; 0x28
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80017d0:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
		Timer_Tbl[i].Timer_Ctn  = 0;
 80017d4:	8658      	strh	r0, [r3, #50]	; 0x32
		Timer_Tbl[i].Timer_Init = 0;
 80017d6:	8698      	strh	r0, [r3, #52]	; 0x34
		Timer_Tbl[i].TmrFnct    = NULL;
 80017d8:	6398      	str	r0, [r3, #56]	; 0x38
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80017da:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
		Timer_Tbl[i].Timer_Ctn  = 0;
 80017de:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
		Timer_Tbl[i].Timer_Init = 0;
 80017e2:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		Timer_Tbl[i].TmrFnct    = NULL;
 80017e6:	6498      	str	r0, [r3, #72]	; 0x48
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80017e8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
		Timer_Tbl[i].Timer_Ctn  = 0;
 80017ec:	f8a3 0052 	strh.w	r0, [r3, #82]	; 0x52
		Timer_Tbl[i].Timer_Init = 0;
 80017f0:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
		Timer_Tbl[i].TmrFnct    = NULL;
 80017f4:	6598      	str	r0, [r3, #88]	; 0x58
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80017f6:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
		Timer_Tbl[i].Timer_Ctn  = 0;
 80017fa:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
		Timer_Tbl[i].Timer_Init = 0;
 80017fe:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
		Timer_Tbl[i].TmrFnct    = NULL;
 8001802:	6698      	str	r0, [r3, #104]	; 0x68
	}	                   
	
	
	Hw_Timer_SetupISR();
 8001804:	4a05      	ldr	r2, [pc, #20]	; (800181c <Hw_Timer_Init+0x74>)
 8001806:	4790      	blx	r2
	Hw_Timer_Setup();	
 8001808:	4905      	ldr	r1, [pc, #20]	; (8001820 <Hw_Timer_Init+0x78>)
 800180a:	4788      	blx	r1

	Excute = 1;
 800180c:	2001      	movs	r0, #1
 800180e:	7020      	strb	r0, [r4, #0]
 8001810:	bd10      	pop	{r4, pc}
 8001812:	bf00      	nop
 8001814:	20000484 	.word	0x20000484
 8001818:	20000410 	.word	0x20000410
 800181c:	0800175d 	.word	0x0800175d
 8001820:	08001775 	.word	0x08001775

08001824 <Hw_Timer_Tick>:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8001824:	b510      	push	{r4, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8001826:	4c6f      	ldr	r4, [pc, #444]	; (80019e4 <Hw_Timer_Tick+0x1c0>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 8001828:	4a6f      	ldr	r2, [pc, #444]	; (80019e8 <Hw_Timer_Tick+0x1c4>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	1c59      	adds	r1, r3, #1
 800182e:	6021      	str	r1, [r4, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8001830:	8810      	ldrh	r0, [r2, #0]
 8001832:	b283      	uxth	r3, r0
 8001834:	b113      	cbz	r3, 800183c <Hw_Timer_Tick+0x18>
 8001836:	8811      	ldrh	r1, [r2, #0]
 8001838:	1e48      	subs	r0, r1, #1
 800183a:	8010      	strh	r0, [r2, #0]
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 800183c:	4c6b      	ldr	r4, [pc, #428]	; (80019ec <Hw_Timer_Tick+0x1c8>)
 800183e:	7822      	ldrb	r2, [r4, #0]
 8001840:	2a01      	cmp	r2, #1
 8001842:	d01e      	beq.n	8001882 <Hw_Timer_Tick+0x5e>
 8001844:	7c23      	ldrb	r3, [r4, #16]
 8001846:	4a69      	ldr	r2, [pc, #420]	; (80019ec <Hw_Timer_Tick+0x1c8>)
 8001848:	2b01      	cmp	r3, #1
 800184a:	d030      	beq.n	80018ae <Hw_Timer_Tick+0x8a>
 800184c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001850:	4a66      	ldr	r2, [pc, #408]	; (80019ec <Hw_Timer_Tick+0x1c8>)
 8001852:	2b01      	cmp	r3, #1
 8001854:	d041      	beq.n	80018da <Hw_Timer_Tick+0xb6>
 8001856:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800185a:	4a64      	ldr	r2, [pc, #400]	; (80019ec <Hw_Timer_Tick+0x1c8>)
 800185c:	2b01      	cmp	r3, #1
 800185e:	d052      	beq.n	8001906 <Hw_Timer_Tick+0xe2>
 8001860:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001864:	4a61      	ldr	r2, [pc, #388]	; (80019ec <Hw_Timer_Tick+0x1c8>)
 8001866:	2b01      	cmp	r3, #1
 8001868:	d063      	beq.n	8001932 <Hw_Timer_Tick+0x10e>
 800186a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800186e:	4a5f      	ldr	r2, [pc, #380]	; (80019ec <Hw_Timer_Tick+0x1c8>)
 8001870:	2b01      	cmp	r3, #1
 8001872:	d076      	beq.n	8001962 <Hw_Timer_Tick+0x13e>
 8001874:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8001878:	4a5c      	ldr	r2, [pc, #368]	; (80019ec <Hw_Timer_Tick+0x1c8>)
 800187a:	2b01      	cmp	r3, #1
 800187c:	f000 808a 	beq.w	8001994 <Hw_Timer_Tick+0x170>
 8001880:	bd10      	pop	{r4, pc}
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001882:	8860      	ldrh	r0, [r4, #2]
 8001884:	1e43      	subs	r3, r0, #1
 8001886:	b29b      	uxth	r3, r3
 8001888:	8063      	strh	r3, [r4, #2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1da      	bne.n	8001844 <Hw_Timer_Tick+0x20>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800188e:	f894 c001 	ldrb.w	ip, [r4, #1]
 8001892:	f1bc 0f01 	cmp.w	ip, #1
 8001896:	f000 8096 	beq.w	80019c6 <Hw_Timer_Tick+0x1a2>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800189a:	f8b4 e004 	ldrh.w	lr, [r4, #4]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800189e:	68a1      	ldr	r1, [r4, #8]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80018a0:	f8a4 e002 	strh.w	lr, [r4, #2]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80018a4:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80018a6:	7c23      	ldrb	r3, [r4, #16]
 80018a8:	4a50      	ldr	r2, [pc, #320]	; (80019ec <Hw_Timer_Tick+0x1c8>)
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d1ce      	bne.n	800184c <Hw_Timer_Tick+0x28>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80018ae:	8a51      	ldrh	r1, [r2, #18]
 80018b0:	1e48      	subs	r0, r1, #1
 80018b2:	b283      	uxth	r3, r0
 80018b4:	8253      	strh	r3, [r2, #18]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1c8      	bne.n	800184c <Hw_Timer_Tick+0x28>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80018ba:	f892 c011 	ldrb.w	ip, [r2, #17]
 80018be:	f1bc 0f01 	cmp.w	ip, #1
 80018c2:	d07e      	beq.n	80019c2 <Hw_Timer_Tick+0x19e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80018c4:	f8b4 e014 	ldrh.w	lr, [r4, #20]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80018c8:	69a2      	ldr	r2, [r4, #24]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80018ca:	f8a4 e012 	strh.w	lr, [r4, #18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80018ce:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80018d0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80018d4:	4a45      	ldr	r2, [pc, #276]	; (80019ec <Hw_Timer_Tick+0x1c8>)
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d1bd      	bne.n	8001856 <Hw_Timer_Tick+0x32>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80018da:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 80018dc:	1e48      	subs	r0, r1, #1
 80018de:	b283      	uxth	r3, r0
 80018e0:	8453      	strh	r3, [r2, #34]	; 0x22

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1b7      	bne.n	8001856 <Hw_Timer_Tick+0x32>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80018e6:	f892 c021 	ldrb.w	ip, [r2, #33]	; 0x21
 80018ea:	f1bc 0f01 	cmp.w	ip, #1
 80018ee:	d075      	beq.n	80019dc <Hw_Timer_Tick+0x1b8>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80018f0:	f8b4 e024 	ldrh.w	lr, [r4, #36]	; 0x24

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80018f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80018f6:	f8a4 e022 	strh.w	lr, [r4, #34]	; 0x22

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80018fa:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80018fc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001900:	4a3a      	ldr	r2, [pc, #232]	; (80019ec <Hw_Timer_Tick+0x1c8>)
 8001902:	2b01      	cmp	r3, #1
 8001904:	d1ac      	bne.n	8001860 <Hw_Timer_Tick+0x3c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001906:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 8001908:	1e48      	subs	r0, r1, #1
 800190a:	b283      	uxth	r3, r0
 800190c:	8653      	strh	r3, [r2, #50]	; 0x32

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1a6      	bne.n	8001860 <Hw_Timer_Tick+0x3c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001912:	f892 c031 	ldrb.w	ip, [r2, #49]	; 0x31
 8001916:	f1bc 0f01 	cmp.w	ip, #1
 800191a:	d05c      	beq.n	80019d6 <Hw_Timer_Tick+0x1b2>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800191c:	f8b4 e034 	ldrh.w	lr, [r4, #52]	; 0x34

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001920:	6ba2      	ldr	r2, [r4, #56]	; 0x38
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001922:	f8a4 e032 	strh.w	lr, [r4, #50]	; 0x32

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001926:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001928:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800192c:	4a2f      	ldr	r2, [pc, #188]	; (80019ec <Hw_Timer_Tick+0x1c8>)
 800192e:	2b01      	cmp	r3, #1
 8001930:	d19b      	bne.n	800186a <Hw_Timer_Tick+0x46>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001932:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
 8001936:	1e48      	subs	r0, r1, #1
 8001938:	b283      	uxth	r3, r0
 800193a:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800193e:	2b00      	cmp	r3, #0
 8001940:	d193      	bne.n	800186a <Hw_Timer_Tick+0x46>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001942:	f892 c041 	ldrb.w	ip, [r2, #65]	; 0x41
 8001946:	f1bc 0f01 	cmp.w	ip, #1
 800194a:	d041      	beq.n	80019d0 <Hw_Timer_Tick+0x1ac>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800194c:	f8b4 e044 	ldrh.w	lr, [r4, #68]	; 0x44

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001950:	6ca2      	ldr	r2, [r4, #72]	; 0x48
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001952:	f8a4 e042 	strh.w	lr, [r4, #66]	; 0x42

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001956:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001958:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800195c:	4a23      	ldr	r2, [pc, #140]	; (80019ec <Hw_Timer_Tick+0x1c8>)
 800195e:	2b01      	cmp	r3, #1
 8001960:	d188      	bne.n	8001874 <Hw_Timer_Tick+0x50>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001962:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
 8001966:	1e48      	subs	r0, r1, #1
 8001968:	b283      	uxth	r3, r0
 800196a:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800196e:	2b00      	cmp	r3, #0
 8001970:	d180      	bne.n	8001874 <Hw_Timer_Tick+0x50>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001972:	f892 c051 	ldrb.w	ip, [r2, #81]	; 0x51
 8001976:	f1bc 0f01 	cmp.w	ip, #1
 800197a:	d026      	beq.n	80019ca <Hw_Timer_Tick+0x1a6>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800197c:	f8b4 e054 	ldrh.w	lr, [r4, #84]	; 0x54

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001980:	6da2      	ldr	r2, [r4, #88]	; 0x58
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001982:	f8a4 e052 	strh.w	lr, [r4, #82]	; 0x52

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001986:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001988:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800198c:	4a17      	ldr	r2, [pc, #92]	; (80019ec <Hw_Timer_Tick+0x1c8>)
 800198e:	2b01      	cmp	r3, #1
 8001990:	f47f af76 	bne.w	8001880 <Hw_Timer_Tick+0x5c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001994:	f8b2 1062 	ldrh.w	r1, [r2, #98]	; 0x62
 8001998:	1e48      	subs	r0, r1, #1
 800199a:	b283      	uxth	r3, r0
 800199c:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f47f af6d 	bne.w	8001880 <Hw_Timer_Tick+0x5c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80019a6:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80019aa:	f8b4 c064 	ldrh.w	ip, [r4, #100]	; 0x64
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80019ae:	f1be 0f01 	cmp.w	lr, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 80019b2:	bf08      	it	eq
 80019b4:	f882 3060 	strbeq.w	r3, [r2, #96]	; 0x60

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80019b8:	f8a4 c062 	strh.w	ip, [r4, #98]	; 0x62

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80019bc:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80019be:	4790      	blx	r2
 80019c0:	bd10      	pop	{r4, pc}

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 80019c2:	7413      	strb	r3, [r2, #16]
 80019c4:	e77e      	b.n	80018c4 <Hw_Timer_Tick+0xa0>
 80019c6:	7023      	strb	r3, [r4, #0]
 80019c8:	e767      	b.n	800189a <Hw_Timer_Tick+0x76>
 80019ca:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 80019ce:	e7d5      	b.n	800197c <Hw_Timer_Tick+0x158>
 80019d0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 80019d4:	e7ba      	b.n	800194c <Hw_Timer_Tick+0x128>
 80019d6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
 80019da:	e79f      	b.n	800191c <Hw_Timer_Tick+0xf8>
 80019dc:	f882 3020 	strb.w	r3, [r2, #32]
 80019e0:	e786      	b.n	80018f0 <Hw_Timer_Tick+0xcc>
 80019e2:	bf00      	nop
 80019e4:	20000480 	.word	0x20000480
 80019e8:	20000486 	.word	0x20000486
 80019ec:	20000410 	.word	0x20000410

080019f0 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 80019f0:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 80019f2:	4b01      	ldr	r3, [pc, #4]	; (80019f8 <Hw_Timer_ISR+0x8>)
 80019f4:	4798      	blx	r3

}
 80019f6:	bd08      	pop	{r3, pc}
 80019f8:	08001825 	.word	0x08001825

080019fc <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 80019fc:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 80019fe:	4c05      	ldr	r4, [pc, #20]	; (8001a14 <Hw_Timer_Set+0x18>)
 8001a00:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8001a04:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8001a06:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8001a08:	9b01      	ldr	r3, [sp, #4]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 8001a0a:	8041      	strh	r1, [r0, #2]
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8001a0c:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 8001a0e:	8081      	strh	r1, [r0, #4]
}
 8001a10:	bc10      	pop	{r4}
 8001a12:	4770      	bx	lr
 8001a14:	20000410 	.word	0x20000410

08001a18 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8001a18:	2806      	cmp	r0, #6
 8001a1a:	d803      	bhi.n	8001a24 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <Hw_Timer_Start+0x10>)
 8001a1e:	0100      	lsls	r0, r0, #4
 8001a20:	2201      	movs	r2, #1
 8001a22:	541a      	strb	r2, [r3, r0]
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000410 	.word	0x20000410

08001a2c <Hw_Timer_Stop>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Stop(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8001a2c:	2806      	cmp	r0, #6
 8001a2e:	d803      	bhi.n	8001a38 <Hw_Timer_Stop+0xc>
		Timer_Tbl[TmrNum].Timer_En = OFF;
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <Hw_Timer_Stop+0x10>)
 8001a32:	0100      	lsls	r0, r0, #4
 8001a34:	2200      	movs	r2, #0
 8001a36:	541a      	strb	r2, [r3, r0]
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000410 	.word	0x20000410

08001a40 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <Hw_Timer_Delay_ms+0x10>)
 8001a42:	8018      	strh	r0, [r3, #0]
	
	while( Tmr_Ctn );
 8001a44:	8818      	ldrh	r0, [r3, #0]
 8001a46:	b282      	uxth	r2, r0
 8001a48:	2a00      	cmp	r2, #0
 8001a4a:	d1fb      	bne.n	8001a44 <Hw_Timer_Delay_ms+0x4>
}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000486 	.word	0x20000486

08001a54 <Hw_Timer_Get_CountValue>:
     ARG
     RET
---------------------------------------------------------------------------*/
u32 Hw_Timer_Get_CountValue( void )
{
	return Hw_Timer_Counter;
 8001a54:	4b01      	ldr	r3, [pc, #4]	; (8001a5c <Hw_Timer_Get_CountValue+0x8>)
 8001a56:	6818      	ldr	r0, [r3, #0]
}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000480 	.word	0x20000480

08001a60 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8001a60:	b508      	push	{r3, lr}
	Set_System();
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <Hw_VCom_Init+0x14>)
 8001a64:	4790      	blx	r2
	Set_USBClock();
 8001a66:	4904      	ldr	r1, [pc, #16]	; (8001a78 <Hw_VCom_Init+0x18>)
 8001a68:	4788      	blx	r1
	USB_Interrupts_Config();
 8001a6a:	4804      	ldr	r0, [pc, #16]	; (8001a7c <Hw_VCom_Init+0x1c>)
 8001a6c:	4780      	blx	r0
	USB_Init();	
 8001a6e:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <Hw_VCom_Init+0x20>)
 8001a70:	4798      	blx	r3
}
 8001a72:	bd08      	pop	{r3, pc}
 8001a74:	08003995 	.word	0x08003995
 8001a78:	080039b1 	.word	0x080039b1
 8001a7c:	080039f1 	.word	0x080039f1
 8001a80:	08004685 	.word	0x08004685

08001a84 <Hw_I2C_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_Init( void )
{
 8001a84:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	Hw_I2C_SW_Init();	
 8001a86:	4b01      	ldr	r3, [pc, #4]	; (8001a8c <Hw_I2C_Init+0x8>)
 8001a88:	4798      	blx	r3
}
 8001a8a:	bd08      	pop	{r3, pc}
 8001a8c:	08001b1d 	.word	0x08001b1d

08001a90 <Hw_I2C_Write>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_Write( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8001a90:	b510      	push	{r4, lr}
	u16 Ret;
	
	#if HW_I2C_USE_SW_I2C == 1
	
	Ret = Hw_I2C_SW_Write( Ch, i2c_addr, pdata, len );
 8001a92:	4c01      	ldr	r4, [pc, #4]	; (8001a98 <Hw_I2C_Write+0x8>)
 8001a94:	47a0      	blx	r4
	#else
	
	#endif

    return Ret;
}
 8001a96:	bd10      	pop	{r4, pc}
 8001a98:	08002295 	.word	0x08002295

08001a9c <Hw_I2C_Read>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_Read( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8001a9c:	b510      	push	{r4, lr}
	u16 Ret;

	#if HW_I2C_USE_SW_I2C == 1
	
	Ret = Hw_I2C_SW_Read( Ch, i2c_addr, pdata, len );	
 8001a9e:	4c01      	ldr	r4, [pc, #4]	; (8001aa4 <Hw_I2C_Read+0x8>)
 8001aa0:	47a0      	blx	r4
	#else
	
	#endif
	
    return Ret;
}
 8001aa2:	bd10      	pop	{r4, pc}
 8001aa4:	08002175 	.word	0x08002175

08001aa8 <Hw_I2C_SW_SCL_HIGH>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SCL_HIGH( u8 Ch )
{
 8001aa8:	b538      	push	{r3, r4, r5, lr}
 8001aaa:	4605      	mov	r5, r0
	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001aac:	4c05      	ldr	r4, [pc, #20]	; (8001ac4 <Hw_I2C_SW_SCL_HIGH+0x1c>)
 8001aae:	200a      	movs	r0, #10
 8001ab0:	47a0      	blx	r4

	if( Ch == 0 )  
 8001ab2:	b925      	cbnz	r5, 8001abe <Hw_I2C_SW_SCL_HIGH+0x16>
	{
		SET_BIT( REG_GPIOB_ODR, 6 );
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <Hw_I2C_SW_SCL_HIGH+0x20>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 8001abc:	601a      	str	r2, [r3, #0]
	}
	else           
	{
	}

	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001abe:	200a      	movs	r0, #10
 8001ac0:	47a0      	blx	r4
}
 8001ac2:	bd38      	pop	{r3, r4, r5, pc}
 8001ac4:	08001399 	.word	0x08001399
 8001ac8:	40010c0c 	.word	0x40010c0c

08001acc <Hw_I2C_SW_IO_Setup>:
{
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <Hw_I2C_SW_IO_Setup+0x44>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_IO_Setup( void )
{
 8001ace:	b510      	push	{r4, lr}
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 8001ad0:	6819      	ldr	r1, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001ad2:	2000      	movs	r0, #0
{
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 8001ad4:	f021 6270 	bic.w	r2, r1, #251658240	; 0xf000000
 8001ad8:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (24));	// MODE, PB.6 Output mode, max speed 50Mhz
 8001ada:	6819      	ldr	r1, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001adc:	4c0d      	ldr	r4, [pc, #52]	; (8001b14 <Hw_I2C_SW_IO_Setup+0x48>)
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (24));	// MODE, PB.6 Output mode, max speed 50Mhz
 8001ade:	f041 7240 	orr.w	r2, r1, #50331648	; 0x3000000
 8001ae2:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (26));	// CNF,  PB.6 General purpose output push-pul	
 8001ae4:	6819      	ldr	r1, [r3, #0]
 8001ae6:	6019      	str	r1, [r3, #0]


	//-- SDA PB.7
	//
	REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8001aee:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	f042 5140 	orr.w	r1, r2, #805306368	; 0x30000000
 8001af6:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	601a      	str	r2, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001afc:	47a0      	blx	r4
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <Hw_I2C_SW_IO_Setup+0x4c>)


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001b00:	2001      	movs	r0, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001b02:	6819      	ldr	r1, [r3, #0]
 8001b04:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8001b08:	601a      	str	r2, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001b0a:	47a0      	blx	r4
		Hw_I2C_SW_SDA_HIGH( i );
	}

}
 8001b0c:	bd10      	pop	{r4, pc}
 8001b0e:	bf00      	nop
 8001b10:	40010c00 	.word	0x40010c00
 8001b14:	08001aa9 	.word	0x08001aa9
 8001b18:	40010c0c 	.word	0x40010c0c

08001b1c <Hw_I2C_SW_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_Init( void )
{
 8001b1c:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	Hw_I2C_SW_IO_Setup();	
 8001b1e:	4b01      	ldr	r3, [pc, #4]	; (8001b24 <Hw_I2C_SW_Init+0x8>)
 8001b20:	4798      	blx	r3
}
 8001b22:	bd08      	pop	{r3, pc}
 8001b24:	08001acd 	.word	0x08001acd

08001b28 <Hw_I2C_SW_SCL_LOW>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SCL_LOW( u8 Ch )
{
 8001b28:	b538      	push	{r3, r4, r5, lr}
 8001b2a:	4605      	mov	r5, r0
	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001b2c:	4c05      	ldr	r4, [pc, #20]	; (8001b44 <Hw_I2C_SW_SCL_LOW+0x1c>)
 8001b2e:	200a      	movs	r0, #10
 8001b30:	47a0      	blx	r4

	if( Ch == 0 )  
 8001b32:	b925      	cbnz	r5, 8001b3e <Hw_I2C_SW_SCL_LOW+0x16>
	{
		CLR_BIT( REG_GPIOB_ODR, 6 );	
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <Hw_I2C_SW_SCL_LOW+0x20>)
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	f020 0240 	bic.w	r2, r0, #64	; 0x40
 8001b3c:	601a      	str	r2, [r3, #0]
	}
	else           
	{
	}

	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001b3e:	200a      	movs	r0, #10
 8001b40:	47a0      	blx	r4
}
 8001b42:	bd38      	pop	{r3, r4, r5, pc}
 8001b44:	08001399 	.word	0x08001399
 8001b48:	40010c0c 	.word	0x40010c0c

08001b4c <Hw_I2C_SW_EndTransmit>:
     ARG     : 
     			u8 Ch : I2C 채널
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_EndTransmit( u8 Ch )
{
 8001b4c:	b570      	push	{r4, r5, r6, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001b4e:	4605      	mov	r5, r0
 8001b50:	b980      	cbnz	r0, 8001b74 <Hw_I2C_SW_EndTransmit+0x28>
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001b52:	4e0c      	ldr	r6, [pc, #48]	; (8001b84 <Hw_I2C_SW_EndTransmit+0x38>)
{
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <Hw_I2C_SW_EndTransmit+0x3c>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001b56:	6833      	ldr	r3, [r6, #0]
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
 8001b58:	4c0c      	ldr	r4, [pc, #48]	; (8001b8c <Hw_I2C_SW_EndTransmit+0x40>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b5e:	6032      	str	r2, [r6, #0]
{
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001b60:	4788      	blx	r1
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
 8001b62:	4628      	mov	r0, r5
 8001b64:	47a0      	blx	r4
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001b66:	6830      	ldr	r0, [r6, #0]
 8001b68:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 8001b6c:	6033      	str	r3, [r6, #0]
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
 8001b6e:	4628      	mov	r0, r5
 8001b70:	47a0      	blx	r4
}
 8001b72:	bd70      	pop	{r4, r5, r6, pc}
{
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001b74:	4c04      	ldr	r4, [pc, #16]	; (8001b88 <Hw_I2C_SW_EndTransmit+0x3c>)
 8001b76:	47a0      	blx	r4
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
 8001b78:	4628      	mov	r0, r5
 8001b7a:	4c04      	ldr	r4, [pc, #16]	; (8001b8c <Hw_I2C_SW_EndTransmit+0x40>)
 8001b7c:	47a0      	blx	r4
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
 8001b7e:	4628      	mov	r0, r5
 8001b80:	47a0      	blx	r4
}
 8001b82:	bd70      	pop	{r4, r5, r6, pc}
 8001b84:	40010c0c 	.word	0x40010c0c
 8001b88:	08001b29 	.word	0x08001b29
 8001b8c:	08001aa9 	.word	0x08001aa9

08001b90 <Hw_I2C_SW_StartTransmit>:
     ARG     : 
     			u8 Ch : I2C 채널
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_StartTransmit( u8 Ch )
{
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	4604      	mov	r4, r0
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
 8001b94:	4d0b      	ldr	r5, [pc, #44]	; (8001bc4 <Hw_I2C_SW_StartTransmit+0x34>)
 8001b96:	47a8      	blx	r5
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8001b98:	b974      	cbnz	r4, 8001bb8 <Hw_I2C_SW_StartTransmit+0x28>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001b9a:	4e0b      	ldr	r6, [pc, #44]	; (8001bc8 <Hw_I2C_SW_StartTransmit+0x38>)
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//	1    1
 8001b9c:	4620      	mov	r0, r4
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001b9e:	6832      	ldr	r2, [r6, #0]
 8001ba0:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8001ba4:	6031      	str	r1, [r6, #0]
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//	1    1
 8001ba6:	47a8      	blx	r5
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001ba8:	6830      	ldr	r0, [r6, #0]
 8001baa:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8001bae:	6033      	str	r3, [r6, #0]
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//	1    1
	Hw_I2C_SW_SDA_LOW ( Ch );	//  1    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <Hw_I2C_SW_StartTransmit+0x3c>)
 8001bb4:	4798      	blx	r3
}
 8001bb6:	bd70      	pop	{r4, r5, r6, pc}
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//	1    1
 8001bb8:	4620      	mov	r0, r4
 8001bba:	47a8      	blx	r5
	Hw_I2C_SW_SDA_LOW ( Ch );	//  1    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <Hw_I2C_SW_StartTransmit+0x3c>)
 8001bc0:	4798      	blx	r3
}
 8001bc2:	bd70      	pop	{r4, r5, r6, pc}
 8001bc4:	08001aa9 	.word	0x08001aa9
 8001bc8:	40010c0c 	.word	0x40010c0c
 8001bcc:	08001b29 	.word	0x08001b29

08001bd0 <Hw_I2C_SW_SetDir_SDA_Input>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Input( u8 Ch )
{
	if( Ch == 0 )
 8001bd0:	b978      	cbnz	r0, 8001bf2 <Hw_I2C_SW_SetDir_SDA_Input+0x22>
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <Hw_I2C_SW_SetDir_SDA_Input+0x24>)
		REG_GPIOB_CRL |=  (0x00 << (28));	// MODE, PB.7 Input Mode
		//REG_GPIOB_CRL |=  (0x01 << (30));	// CNF,  PB.7 Floating input	
		REG_GPIOB_CRL |=  (0x02 << (30));	// CNF,  PB.7 input	pull-up/pull-down
		
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001bd4:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <Hw_I2C_SW_SetDir_SDA_Input+0x28>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Input( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001bd6:	6819      	ldr	r1, [r3, #0]
 8001bd8:	f021 4070 	bic.w	r0, r1, #4026531840	; 0xf0000000
 8001bdc:	6018      	str	r0, [r3, #0]
		REG_GPIOB_CRL |=  (0x00 << (28));	// MODE, PB.7 Input Mode
 8001bde:	6819      	ldr	r1, [r3, #0]
 8001be0:	6019      	str	r1, [r3, #0]
		//REG_GPIOB_CRL |=  (0x01 << (30));	// CNF,  PB.7 Floating input	
		REG_GPIOB_CRL |=  (0x02 << (30));	// CNF,  PB.7 input	pull-up/pull-down
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	f040 4100 	orr.w	r1, r0, #2147483648	; 0x80000000
 8001be8:	6019      	str	r1, [r3, #0]
		
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001bea:	6810      	ldr	r0, [r2, #0]
 8001bec:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4770      	bx	lr
 8001bf4:	40010c00 	.word	0x40010c00
 8001bf8:	40010c0c 	.word	0x40010c0c

08001bfc <Hw_I2C_SW_ReadByte_Ack>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_Ack( u8 Ch, u8 *pData )
{
 8001bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c00:	4604      	mov	r4, r0
	u8 i;
	u8 Data = 0;
	u8 Ack = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001c02:	4b5d      	ldr	r3, [pc, #372]	; (8001d78 <Hw_I2C_SW_ReadByte_Ack+0x17c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_Ack( u8 Ch, u8 *pData )
{
 8001c04:	460f      	mov	r7, r1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c06:	4d5d      	ldr	r5, [pc, #372]	; (8001d7c <Hw_I2C_SW_ReadByte_Ack+0x180>)
	u8 i;
	u8 Data = 0;
	u8 Ack = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001c08:	4798      	blx	r3

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	47a8      	blx	r5
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_SDA( u8 Ch )
{
	u8 Data = 0;

	if( Ch == 0 )
 8001c0e:	2c00      	cmp	r4, #0
 8001c10:	f040 8089 	bne.w	8001d26 <Hw_I2C_SW_ReadByte_Ack+0x12a>
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001c14:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8001d84 <Hw_I2C_SW_ReadByte_Ack+0x188>

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c18:	4620      	mov	r0, r4
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001c1a:	f8d8 9000 	ldr.w	r9, [r8]

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c1e:	4e58      	ldr	r6, [pc, #352]	; (8001d80 <Hw_I2C_SW_ReadByte_Ack+0x184>)
 8001c20:	47b0      	blx	r6
     TITLE   : Hw_I2C_SW_ReadByte_Ack
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_Ack( u8 Ch, u8 *pData )
 8001c22:	f3c9 11c0 	ubfx	r1, r9, #7, #1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c26:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001c28:	ea4f 0941 	mov.w	r9, r1, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c2c:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001c2e:	f8d8 0000 	ldr.w	r0, [r8]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001c32:	fa5f f989 	uxtb.w	r9, r9
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001c36:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c3a:	d001      	beq.n	8001c40 <Hw_I2C_SW_ReadByte_Ack+0x44>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001c3c:	f049 0901 	orr.w	r9, r9, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c40:	2000      	movs	r0, #0
 8001c42:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c44:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001c46:	ea4f 0c49 	mov.w	ip, r9, lsl #1
 8001c4a:	fa5f f88c 	uxtb.w	r8, ip

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c4e:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001c50:	4b4c      	ldr	r3, [pc, #304]	; (8001d84 <Hw_I2C_SW_ReadByte_Ack+0x188>)
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c58:	d001      	beq.n	8001c5e <Hw_I2C_SW_ReadByte_Ack+0x62>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001c5a:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c5e:	2000      	movs	r0, #0
 8001c60:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c62:	2000      	movs	r0, #0
 8001c64:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001c66:	4a47      	ldr	r2, [pc, #284]	; (8001d84 <Hw_I2C_SW_ReadByte_Ack+0x188>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001c68:	ea4f 0848 	mov.w	r8, r8, lsl #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001c6c:	6811      	ldr	r1, [r2, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001c6e:	fa5f f888 	uxtb.w	r8, r8
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001c72:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001c76:	d001      	beq.n	8001c7c <Hw_I2C_SW_ReadByte_Ack+0x80>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001c78:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c80:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001c82:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 8001c86:	fa5f f88c 	uxtb.w	r8, ip

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c8a:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001c8c:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <Hw_I2C_SW_ReadByte_Ack+0x188>)
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c94:	d001      	beq.n	8001c9a <Hw_I2C_SW_ReadByte_Ack+0x9e>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001c96:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001ca2:	4a38      	ldr	r2, [pc, #224]	; (8001d84 <Hw_I2C_SW_ReadByte_Ack+0x188>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001ca4:	ea4f 0848 	mov.w	r8, r8, lsl #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001ca8:	6811      	ldr	r1, [r2, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001caa:	fa5f f888 	uxtb.w	r8, r8
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001cae:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001cb2:	d001      	beq.n	8001cb8 <Hw_I2C_SW_ReadByte_Ack+0xbc>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001cb4:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001cb8:	2000      	movs	r0, #0
 8001cba:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001cbc:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001cbe:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 8001cc2:	fa5f f88c 	uxtb.w	r8, ip

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001cc6:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <Hw_I2C_SW_ReadByte_Ack+0x188>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001cd0:	d001      	beq.n	8001cd6 <Hw_I2C_SW_ReadByte_Ack+0xda>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001cd2:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001cda:	2000      	movs	r0, #0
 8001cdc:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001cde:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <Hw_I2C_SW_ReadByte_Ack+0x188>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001ce0:	ea4f 0848 	mov.w	r8, r8, lsl #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001ce4:	6811      	ldr	r1, [r2, #0]
 8001ce6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001cea:	d001      	beq.n	8001cf0 <Hw_I2C_SW_ReadByte_Ack+0xf4>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001cec:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	47b0      	blx	r6
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001cf4:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <Hw_I2C_SW_ReadByte_Ack+0x18c>)
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
	}

	*pData = Data;
 8001cf6:	f887 8000 	strb.w	r8, [r7]
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001cfa:	681a      	ldr	r2, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001cfc:	4823      	ldr	r0, [pc, #140]	; (8001d8c <Hw_I2C_SW_ReadByte_Ack+0x190>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001cfe:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8001d02:	6019      	str	r1, [r3, #0]
		REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	f042 5140 	orr.w	r1, r2, #805306368	; 0x30000000
 8001d0a:	6019      	str	r1, [r3, #0]
		REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	601a      	str	r2, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001d10:	6801      	ldr	r1, [r0, #0]
 8001d12:	f021 0380 	bic.w	r3, r1, #128	; 0x80
 8001d16:	6003      	str	r3, [r0, #0]

	// Ack 발생 
	//
	Hw_I2C_SW_SDA_LOW( Ch );

	Hw_I2C_SW_SCL_HIGH( Ch );
 8001d18:	4620      	mov	r0, r4
 8001d1a:	47a8      	blx	r5
	Hw_I2C_SW_SCL_LOW( Ch );
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	47b0      	blx	r6


	return Ack;
}
 8001d20:	2000      	movs	r0, #0
 8001d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001d26:	4e16      	ldr	r6, [pc, #88]	; (8001d80 <Hw_I2C_SW_ReadByte_Ack+0x184>)
 8001d28:	4620      	mov	r0, r4
 8001d2a:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001d30:	4620      	mov	r0, r4
 8001d32:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d34:	4620      	mov	r0, r4
 8001d36:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001d38:	4620      	mov	r0, r4
 8001d3a:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001d40:	4620      	mov	r0, r4
 8001d42:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d44:	4620      	mov	r0, r4
 8001d46:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001d48:	4620      	mov	r0, r4
 8001d4a:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001d50:	4620      	mov	r0, r4
 8001d52:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d54:	4620      	mov	r0, r4
 8001d56:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001d58:	4620      	mov	r0, r4
 8001d5a:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001d60:	4620      	mov	r0, r4
 8001d62:	47b0      	blx	r6
	}

	*pData = Data;
 8001d64:	2200      	movs	r2, #0
 8001d66:	703a      	strb	r2, [r7, #0]

	// Ack 발생 
	//
	Hw_I2C_SW_SDA_LOW( Ch );

	Hw_I2C_SW_SCL_HIGH( Ch );
 8001d68:	4620      	mov	r0, r4
 8001d6a:	47a8      	blx	r5
	Hw_I2C_SW_SCL_LOW( Ch );
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	47b0      	blx	r6


	return Ack;
}
 8001d70:	2000      	movs	r0, #0
 8001d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d76:	bf00      	nop
 8001d78:	08001bd1 	.word	0x08001bd1
 8001d7c:	08001aa9 	.word	0x08001aa9
 8001d80:	08001b29 	.word	0x08001b29
 8001d84:	40010c08 	.word	0x40010c08
 8001d88:	40010c00 	.word	0x40010c00
 8001d8c:	40010c0c 	.word	0x40010c0c

08001d90 <Hw_I2C_SW_ReadByte_NoAck>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_NoAck( u8 Ch, u8 *pData )
{
 8001d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d94:	4604      	mov	r4, r0
	u8 i;
	u8 Data = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001d96:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <Hw_I2C_SW_ReadByte_NoAck+0x154>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_NoAck( u8 Ch, u8 *pData )
{
 8001d98:	4688      	mov	r8, r1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d9a:	4d53      	ldr	r5, [pc, #332]	; (8001ee8 <Hw_I2C_SW_ReadByte_NoAck+0x158>)
{
	u8 i;
	u8 Data = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001d9c:	4798      	blx	r3

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d9e:	4620      	mov	r0, r4
 8001da0:	47a8      	blx	r5
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_SDA( u8 Ch )
{
	u8 Data = 0;

	if( Ch == 0 )
 8001da2:	2c00      	cmp	r4, #0
 8001da4:	d175      	bne.n	8001e92 <Hw_I2C_SW_ReadByte_NoAck+0x102>
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001da6:	4f51      	ldr	r7, [pc, #324]	; (8001eec <Hw_I2C_SW_ReadByte_NoAck+0x15c>)

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001da8:	4620      	mov	r0, r4
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001daa:	f8d7 9000 	ldr.w	r9, [r7]

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001dae:	4e50      	ldr	r6, [pc, #320]	; (8001ef0 <Hw_I2C_SW_ReadByte_NoAck+0x160>)
 8001db0:	47b0      	blx	r6
     TITLE   : Hw_I2C_SW_ReadByte_NoAck
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_NoAck( u8 Ch, u8 *pData )
 8001db2:	f3c9 11c0 	ubfx	r1, r9, #7, #1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001db6:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001db8:	ea4f 0941 	mov.w	r9, r1, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001dbc:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001dbe:	6838      	ldr	r0, [r7, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001dc0:	fa5f f989 	uxtb.w	r9, r9
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001dc4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001dc8:	d001      	beq.n	8001dce <Hw_I2C_SW_ReadByte_NoAck+0x3e>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001dca:	f049 0901 	orr.w	r9, r9, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001dce:	2000      	movs	r0, #0
 8001dd0:	47b0      	blx	r6

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001dd2:	ea4f 0c49 	mov.w	ip, r9, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001dd6:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001dd8:	fa5f f78c 	uxtb.w	r7, ip

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ddc:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001dde:	4943      	ldr	r1, [pc, #268]	; (8001eec <Hw_I2C_SW_ReadByte_NoAck+0x15c>)
 8001de0:	680b      	ldr	r3, [r1, #0]
 8001de2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001de6:	d001      	beq.n	8001dec <Hw_I2C_SW_ReadByte_NoAck+0x5c>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001de8:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001dec:	2000      	movs	r0, #0
 8001dee:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001df0:	2000      	movs	r0, #0
 8001df2:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001df4:	483d      	ldr	r0, [pc, #244]	; (8001eec <Hw_I2C_SW_ReadByte_NoAck+0x15c>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001df6:	007f      	lsls	r7, r7, #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001df8:	6802      	ldr	r2, [r0, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001dfa:	b2ff      	uxtb	r7, r7
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001dfc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001e00:	d001      	beq.n	8001e06 <Hw_I2C_SW_ReadByte_NoAck+0x76>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001e02:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001e06:	2000      	movs	r0, #0
 8001e08:	47b0      	blx	r6

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e0a:	007a      	lsls	r2, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e0c:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e0e:	b2d7      	uxtb	r7, r2

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e10:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001e12:	4936      	ldr	r1, [pc, #216]	; (8001eec <Hw_I2C_SW_ReadByte_NoAck+0x15c>)
 8001e14:	680b      	ldr	r3, [r1, #0]
 8001e16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e1a:	d001      	beq.n	8001e20 <Hw_I2C_SW_ReadByte_NoAck+0x90>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001e1c:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001e20:	2000      	movs	r0, #0
 8001e22:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e24:	2000      	movs	r0, #0
 8001e26:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001e28:	4b30      	ldr	r3, [pc, #192]	; (8001eec <Hw_I2C_SW_ReadByte_NoAck+0x15c>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e2a:	007f      	lsls	r7, r7, #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001e2c:	6818      	ldr	r0, [r3, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e2e:	b2ff      	uxtb	r7, r7
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001e30:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e34:	d001      	beq.n	8001e3a <Hw_I2C_SW_ReadByte_NoAck+0xaa>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001e36:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	47b0      	blx	r6

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e3e:	007b      	lsls	r3, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e40:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e42:	b2df      	uxtb	r7, r3

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e44:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001e46:	4a29      	ldr	r2, [pc, #164]	; (8001eec <Hw_I2C_SW_ReadByte_NoAck+0x15c>)
 8001e48:	6811      	ldr	r1, [r2, #0]
 8001e4a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e4e:	d001      	beq.n	8001e54 <Hw_I2C_SW_ReadByte_NoAck+0xc4>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001e50:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001e54:	2000      	movs	r0, #0
 8001e56:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e58:	2000      	movs	r0, #0
 8001e5a:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001e5c:	4923      	ldr	r1, [pc, #140]	; (8001eec <Hw_I2C_SW_ReadByte_NoAck+0x15c>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e5e:	007f      	lsls	r7, r7, #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001e60:	6808      	ldr	r0, [r1, #0]
 8001e62:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e66:	d001      	beq.n	8001e6c <Hw_I2C_SW_ReadByte_NoAck+0xdc>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001e68:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	47b0      	blx	r6
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001e70:	4a20      	ldr	r2, [pc, #128]	; (8001ef4 <Hw_I2C_SW_ReadByte_NoAck+0x164>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <Hw_I2C_SW_ReadByte_NoAck+0x168>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001e74:	6810      	ldr	r0, [r2, #0]
 8001e76:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 8001e7a:	6011      	str	r1, [r2, #0]
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
 8001e82:	601a      	str	r2, [r3, #0]
		REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	f041 5040 	orr.w	r0, r1, #805306368	; 0x30000000
 8001e8a:	6018      	str	r0, [r3, #0]
		REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e01f      	b.n	8001ed2 <Hw_I2C_SW_ReadByte_NoAck+0x142>

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001e92:	4e17      	ldr	r6, [pc, #92]	; (8001ef0 <Hw_I2C_SW_ReadByte_NoAck+0x160>)
 8001e94:	4620      	mov	r0, r4
 8001e96:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e98:	4620      	mov	r0, r4
 8001e9a:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001eac:	4620      	mov	r0, r4
 8001eae:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001eb8:	4620      	mov	r0, r4
 8001eba:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ec8:	4620      	mov	r0, r4
 8001eca:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001ecc:	4620      	mov	r0, r4
 8001ece:	47b0      	blx	r6
 8001ed0:	2700      	movs	r7, #0

	Hw_I2C_SW_SDA_HIGH( Ch );

	Hw_I2C_SW_SetDir_SDA_Output( Ch );

	Hw_I2C_SW_SCL_HIGH( Ch );
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	47a8      	blx	r5
	Hw_I2C_SW_SCL_LOW( Ch );
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	47b0      	blx	r6

	*pData = Data;
 8001eda:	f888 7000 	strb.w	r7, [r8]

	return 0;
}
 8001ede:	2000      	movs	r0, #0
 8001ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ee4:	08001bd1 	.word	0x08001bd1
 8001ee8:	08001aa9 	.word	0x08001aa9
 8001eec:	40010c08 	.word	0x40010c08
 8001ef0:	08001b29 	.word	0x08001b29
 8001ef4:	40010c0c 	.word	0x40010c0c
 8001ef8:	40010c00 	.word	0x40010c00

08001efc <Hw_I2C_SW_WriteByte_Ack>:
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001efc:	f011 0f80 	tst.w	r1, #128	; 0x80
     			u8 Data : 전송할 바이트
     RET     : 
     			u8 : 0 -> Ack
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_WriteByte_Ack( u8 Ch, u8 Data )
{
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	460f      	mov	r7, r1
 8001f04:	4604      	mov	r4, r0
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001f06:	f040 8111 	bne.w	800212c <Hw_I2C_SW_WriteByte_Ack+0x230>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001f0a:	2800      	cmp	r0, #0
 8001f0c:	f000 80ff 	beq.w	800210e <Hw_I2C_SW_WriteByte_Ack+0x212>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f10:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001f12:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f14:	4e91      	ldr	r6, [pc, #580]	; (800215c <Hw_I2C_SW_WriteByte_Ack+0x260>)
 8001f16:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8001f18:	4d91      	ldr	r5, [pc, #580]	; (8002160 <Hw_I2C_SW_WriteByte_Ack+0x264>)
 8001f1a:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001f1c:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8001f1e:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001f20:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001f24:	f040 80f9 	bne.w	800211a <Hw_I2C_SW_WriteByte_Ack+0x21e>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001f28:	2c00      	cmp	r4, #0
 8001f2a:	f000 80d8 	beq.w	80020de <Hw_I2C_SW_WriteByte_Ack+0x1e2>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f2e:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001f30:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f32:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001f34:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8001f36:	4620      	mov	r0, r4
 8001f38:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001f3a:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001f3e:	f040 80dd 	bne.w	80020fc <Hw_I2C_SW_WriteByte_Ack+0x200>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001f42:	2c00      	cmp	r4, #0
 8001f44:	f000 80b3 	beq.w	80020ae <Hw_I2C_SW_WriteByte_Ack+0x1b2>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f48:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001f4a:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f4c:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001f4e:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8001f50:	4620      	mov	r0, r4
 8001f52:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001f54:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001f58:	f040 80b8 	bne.w	80020cc <Hw_I2C_SW_WriteByte_Ack+0x1d0>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001f5c:	2c00      	cmp	r4, #0
 8001f5e:	f000 808e 	beq.w	800207e <Hw_I2C_SW_WriteByte_Ack+0x182>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f62:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001f64:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f66:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001f68:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001f6e:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001f72:	f040 8093 	bne.w	800209c <Hw_I2C_SW_WriteByte_Ack+0x1a0>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001f76:	2c00      	cmp	r4, #0
 8001f78:	d06b      	beq.n	8002052 <Hw_I2C_SW_WriteByte_Ack+0x156>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f7a:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001f7c:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f7e:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001f80:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8001f82:	4620      	mov	r0, r4
 8001f84:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001f86:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001f8a:	d170      	bne.n	800206e <Hw_I2C_SW_WriteByte_Ack+0x172>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001f8c:	2c00      	cmp	r4, #0
 8001f8e:	d04a      	beq.n	8002026 <Hw_I2C_SW_WriteByte_Ack+0x12a>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f90:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001f92:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f94:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001f96:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8001f98:	4620      	mov	r0, r4
 8001f9a:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001f9c:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001fa0:	d14f      	bne.n	8002042 <Hw_I2C_SW_WriteByte_Ack+0x146>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001fa2:	2c00      	cmp	r4, #0
 8001fa4:	d02a      	beq.n	8001ffc <Hw_I2C_SW_WriteByte_Ack+0x100>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8001faa:	4620      	mov	r0, r4
 8001fac:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001fae:	f017 0f40 	tst.w	r7, #64	; 0x40
 8001fb2:	d12f      	bne.n	8002014 <Hw_I2C_SW_WriteByte_Ack+0x118>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001fb4:	2c00      	cmp	r4, #0
 8001fb6:	f040 80c2 	bne.w	800213e <Hw_I2C_SW_WriteByte_Ack+0x242>
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001fba:	496a      	ldr	r1, [pc, #424]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8001fbc:	680c      	ldr	r4, [r1, #0]
 8001fbe:	f024 0080 	bic.w	r0, r4, #128	; 0x80
 8001fc2:	6008      	str	r0, [r1, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8001fc8:	2000      	movs	r0, #0
 8001fca:	47a8      	blx	r5
	}


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001fcc:	4a66      	ldr	r2, [pc, #408]	; (8002168 <Hw_I2C_SW_WriteByte_Ack+0x26c>)
 8001fce:	2000      	movs	r0, #0
 8001fd0:	4790      	blx	r2



	// Ack 검사 
	//
	Hw_I2C_SW_SCL_HIGH( Ch );
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	47b0      	blx	r6
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001fd6:	4b65      	ldr	r3, [pc, #404]	; (800216c <Hw_I2C_SW_WriteByte_Ack+0x270>)
	//
	Hw_I2C_SW_SCL_HIGH( Ch );

	if( Hw_I2C_SW_SDA( Ch ) == 0 ) Ack = 0;

	Hw_I2C_SW_SCL_LOW( Ch );
 8001fd8:	2000      	movs	r0, #0
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001fda:	681c      	ldr	r4, [r3, #0]
	//
	Hw_I2C_SW_SCL_HIGH( Ch );

	if( Hw_I2C_SW_SDA( Ch ) == 0 ) Ack = 0;

	Hw_I2C_SW_SCL_LOW( Ch );
 8001fdc:	47a8      	blx	r5
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001fde:	4864      	ldr	r0, [pc, #400]	; (8002170 <Hw_I2C_SW_WriteByte_Ack+0x274>)
     			u8 : 0 -> Ack
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_WriteByte_Ack( u8 Ch, u8 Data )
{
	u8 i;
	u8 Ack = 1;
 8001fe0:	f3c4 14c0 	ubfx	r4, r4, #7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001fe4:	6801      	ldr	r1, [r0, #0]
 8001fe6:	f021 4270 	bic.w	r2, r1, #4026531840	; 0xf0000000
 8001fea:	6002      	str	r2, [r0, #0]
		REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8001fec:	6803      	ldr	r3, [r0, #0]
 8001fee:	f043 5140 	orr.w	r1, r3, #805306368	; 0x30000000
 8001ff2:	6001      	str	r1, [r0, #0]
		REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 8001ff4:	6802      	ldr	r2, [r0, #0]
 8001ff6:	6002      	str	r2, [r0, #0]


	Hw_I2C_SW_SetDir_SDA_Output( Ch );

	return Ack;
}
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001ffc:	4959      	ldr	r1, [pc, #356]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8001ffe:	680b      	ldr	r3, [r1, #0]
 8002000:	f023 0080 	bic.w	r0, r3, #128	; 0x80
 8002004:	6008      	str	r0, [r1, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002006:	4620      	mov	r0, r4
 8002008:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 800200a:	4620      	mov	r0, r4
 800200c:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 800200e:	f017 0f40 	tst.w	r7, #64	; 0x40
 8002012:	d0cf      	beq.n	8001fb4 <Hw_I2C_SW_WriteByte_Ack+0xb8>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8002014:	2c00      	cmp	r4, #0
 8002016:	f040 8092 	bne.w	800213e <Hw_I2C_SW_WriteByte_Ack+0x242>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 800201a:	4b52      	ldr	r3, [pc, #328]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	f042 0480 	orr.w	r4, r2, #128	; 0x80
 8002022:	601c      	str	r4, [r3, #0]
 8002024:	e7ce      	b.n	8001fc4 <Hw_I2C_SW_WriteByte_Ack+0xc8>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8002026:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002028:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 800202a:	6818      	ldr	r0, [r3, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 800202c:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 800202e:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 8002032:	601a      	str	r2, [r3, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002034:	4620      	mov	r0, r4
 8002036:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8002038:	4620      	mov	r0, r4
 800203a:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 800203c:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002040:	d0af      	beq.n	8001fa2 <Hw_I2C_SW_WriteByte_Ack+0xa6>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8002042:	2c00      	cmp	r4, #0
 8002044:	d1af      	bne.n	8001fa6 <Hw_I2C_SW_WriteByte_Ack+0xaa>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8002046:	4847      	ldr	r0, [pc, #284]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8002048:	6801      	ldr	r1, [r0, #0]
 800204a:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 800204e:	6002      	str	r2, [r0, #0]
 8002050:	e7a9      	b.n	8001fa6 <Hw_I2C_SW_WriteByte_Ack+0xaa>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8002052:	4944      	ldr	r1, [pc, #272]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002054:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8002056:	680b      	ldr	r3, [r1, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002058:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 800205a:	f023 0080 	bic.w	r0, r3, #128	; 0x80
 800205e:	6008      	str	r0, [r1, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002060:	4620      	mov	r0, r4
 8002062:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8002064:	4620      	mov	r0, r4
 8002066:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002068:	f017 0f80 	tst.w	r7, #128	; 0x80
 800206c:	d08e      	beq.n	8001f8c <Hw_I2C_SW_WriteByte_Ack+0x90>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 800206e:	2c00      	cmp	r4, #0
 8002070:	d18e      	bne.n	8001f90 <Hw_I2C_SW_WriteByte_Ack+0x94>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8002072:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 800207a:	6019      	str	r1, [r3, #0]
 800207c:	e788      	b.n	8001f90 <Hw_I2C_SW_WriteByte_Ack+0x94>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 800207e:	4b39      	ldr	r3, [pc, #228]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002080:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8002082:	6818      	ldr	r0, [r3, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002084:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8002086:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 800208a:	601a      	str	r2, [r3, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 800208c:	4620      	mov	r0, r4
 800208e:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8002090:	4620      	mov	r0, r4
 8002092:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002094:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002098:	f43f af6d 	beq.w	8001f76 <Hw_I2C_SW_WriteByte_Ack+0x7a>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 800209c:	2c00      	cmp	r4, #0
 800209e:	f47f af6c 	bne.w	8001f7a <Hw_I2C_SW_WriteByte_Ack+0x7e>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 80020a2:	4830      	ldr	r0, [pc, #192]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 80020a4:	6801      	ldr	r1, [r0, #0]
 80020a6:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 80020aa:	6002      	str	r2, [r0, #0]
 80020ac:	e765      	b.n	8001f7a <Hw_I2C_SW_WriteByte_Ack+0x7e>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 80020ae:	492d      	ldr	r1, [pc, #180]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 80020b0:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 80020b2:	680b      	ldr	r3, [r1, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 80020b4:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 80020b6:	f023 0080 	bic.w	r0, r3, #128	; 0x80
 80020ba:	6008      	str	r0, [r1, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80020bc:	4620      	mov	r0, r4
 80020be:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 80020c0:	4620      	mov	r0, r4
 80020c2:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 80020c4:	f017 0f80 	tst.w	r7, #128	; 0x80
 80020c8:	f43f af48 	beq.w	8001f5c <Hw_I2C_SW_WriteByte_Ack+0x60>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 80020cc:	2c00      	cmp	r4, #0
 80020ce:	f47f af48 	bne.w	8001f62 <Hw_I2C_SW_WriteByte_Ack+0x66>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 80020d2:	4b24      	ldr	r3, [pc, #144]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 80020da:	6019      	str	r1, [r3, #0]
 80020dc:	e741      	b.n	8001f62 <Hw_I2C_SW_WriteByte_Ack+0x66>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 80020e0:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 80020e2:	6818      	ldr	r0, [r3, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 80020e4:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 80020e6:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 80020ea:	601a      	str	r2, [r3, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80020ec:	4620      	mov	r0, r4
 80020ee:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 80020f0:	4620      	mov	r0, r4
 80020f2:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 80020f4:	f017 0f80 	tst.w	r7, #128	; 0x80
 80020f8:	f43f af23 	beq.w	8001f42 <Hw_I2C_SW_WriteByte_Ack+0x46>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 80020fc:	2c00      	cmp	r4, #0
 80020fe:	f47f af23 	bne.w	8001f48 <Hw_I2C_SW_WriteByte_Ack+0x4c>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8002102:	4818      	ldr	r0, [pc, #96]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8002104:	6801      	ldr	r1, [r0, #0]
 8002106:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 800210a:	6002      	str	r2, [r0, #0]
 800210c:	e71c      	b.n	8001f48 <Hw_I2C_SW_WriteByte_Ack+0x4c>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	e6fa      	b.n	8001f10 <Hw_I2C_SW_WriteByte_Ack+0x14>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 800211a:	2c00      	cmp	r4, #0
 800211c:	f47f af07 	bne.w	8001f2e <Hw_I2C_SW_WriteByte_Ack+0x32>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8002128:	6019      	str	r1, [r3, #0]
 800212a:	e700      	b.n	8001f2e <Hw_I2C_SW_WriteByte_Ack+0x32>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 800212c:	2800      	cmp	r0, #0
 800212e:	f47f aeef 	bne.w	8001f10 <Hw_I2C_SW_WriteByte_Ack+0x14>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8002132:	4d0c      	ldr	r5, [pc, #48]	; (8002164 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8002134:	682e      	ldr	r6, [r5, #0]
 8002136:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 800213a:	6029      	str	r1, [r5, #0]
 800213c:	e6e8      	b.n	8001f10 <Hw_I2C_SW_WriteByte_Ack+0x14>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 800213e:	4620      	mov	r0, r4
 8002140:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8002142:	4620      	mov	r0, r4
 8002144:	47a8      	blx	r5
	}


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <Hw_I2C_SW_WriteByte_Ack+0x26c>)
 8002148:	4620      	mov	r0, r4
 800214a:	4798      	blx	r3



	// Ack 검사 
	//
	Hw_I2C_SW_SCL_HIGH( Ch );
 800214c:	4620      	mov	r0, r4
 800214e:	47b0      	blx	r6

	if( Hw_I2C_SW_SDA( Ch ) == 0 ) Ack = 0;

	Hw_I2C_SW_SCL_LOW( Ch );
 8002150:	4620      	mov	r0, r4

	// Ack 검사 
	//
	Hw_I2C_SW_SCL_HIGH( Ch );

	if( Hw_I2C_SW_SDA( Ch ) == 0 ) Ack = 0;
 8002152:	2400      	movs	r4, #0

	Hw_I2C_SW_SCL_LOW( Ch );
 8002154:	47a8      	blx	r5


	Hw_I2C_SW_SetDir_SDA_Output( Ch );

	return Ack;
}
 8002156:	4620      	mov	r0, r4
 8002158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800215a:	bf00      	nop
 800215c:	08001aa9 	.word	0x08001aa9
 8002160:	08001b29 	.word	0x08001b29
 8002164:	40010c0c 	.word	0x40010c0c
 8002168:	08001bd1 	.word	0x08001bd1
 800216c:	40010c08 	.word	0x40010c08
 8002170:	40010c00 	.word	0x40010c00

08002174 <Hw_I2C_SW_Read>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Read( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8002174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u16 Ret = 0;
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;
 8002178:	461d      	mov	r5, r3
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Read( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 800217a:	b083      	sub	sp, #12
 800217c:	4604      	mov	r4, r0
 800217e:	460e      	mov	r6, r1
 8002180:	4617      	mov	r7, r2
	u16 Ret = 0;
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;
 8002182:	2b00      	cmp	r3, #0
 8002184:	d062      	beq.n	800224c <Hw_I2C_SW_Read+0xd8>

	Hw_I2C_SW_StartTransmit(Ch);
 8002186:	4a3e      	ldr	r2, [pc, #248]	; (8002280 <Hw_I2C_SW_Read+0x10c>)
 8002188:	4790      	blx	r2

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address
 800218a:	0070      	lsls	r0, r6, #1
 800218c:	f040 0101 	orr.w	r1, r0, #1
 8002190:	b2c9      	uxtb	r1, r1
 8002192:	4620      	mov	r0, r4
 8002194:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <Hw_I2C_SW_Read+0x110>)
 8002196:	4798      	blx	r3
{
	u16 Ret = 0;
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;
 8002198:	1e6e      	subs	r6, r5, #1
 800219a:	fa5f f986 	uxtb.w	r9, r6
 800219e:	f006 0601 	and.w	r6, r6, #1

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address
 80021a2:	4680      	mov	r8, r0
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 80021a4:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 800228c <Hw_I2C_SW_Read+0x118>

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 80021a8:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002290 <Hw_I2C_SW_Read+0x11c>
 80021ac:	9601      	str	r6, [sp, #4]

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 80021ae:	f1b9 0f00 	cmp.w	r9, #0
 80021b2:	d15c      	bne.n	800226e <Hw_I2C_SW_Read+0xfa>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 80021b4:	4620      	mov	r0, r4
 80021b6:	4639      	mov	r1, r7
 80021b8:	47d8      	blx	fp
 80021ba:	ea40 0808 	orr.w	r8, r0, r8
 80021be:	fa1f f888 	uxth.w	r8, r8

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 80021c2:	2601      	movs	r6, #1
 80021c4:	42b5      	cmp	r5, r6
 80021c6:	d94b      	bls.n	8002260 <Hw_I2C_SW_Read+0xec>
 80021c8:	9a01      	ldr	r2, [sp, #4]
 80021ca:	b162      	cbz	r2, 80021e6 <Hw_I2C_SW_Read+0x72>
	{
		if( i < LastIndex )
 80021cc:	45b1      	cmp	r9, r6
 80021ce:	d835      	bhi.n	800223c <Hw_I2C_SW_Read+0xc8>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 80021d0:	19b9      	adds	r1, r7, r6
 80021d2:	4620      	mov	r0, r4
 80021d4:	47d8      	blx	fp
 80021d6:	ea40 0108 	orr.w	r1, r0, r8
 80021da:	fa1f f881 	uxth.w	r8, r1

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 80021de:	3601      	adds	r6, #1
 80021e0:	b2f6      	uxtb	r6, r6
 80021e2:	42b5      	cmp	r5, r6
 80021e4:	d93c      	bls.n	8002260 <Hw_I2C_SW_Read+0xec>
	{
		if( i < LastIndex )
 80021e6:	45b1      	cmp	r9, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 80021e8:	eb07 0106 	add.w	r1, r7, r6
 80021ec:	4620      	mov	r0, r4

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 80021ee:	d919      	bls.n	8002224 <Hw_I2C_SW_Read+0xb0>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 80021f0:	47d0      	blx	sl

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 80021f2:	3601      	adds	r6, #1
 80021f4:	b2f6      	uxtb	r6, r6
	{
		if( i < LastIndex )
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 80021f6:	ea40 0808 	orr.w	r8, r0, r8

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 80021fa:	45b1      	cmp	r9, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 80021fc:	fa1f f888 	uxth.w	r8, r8
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002200:	4620      	mov	r0, r4
 8002202:	eb07 0106 	add.w	r1, r7, r6

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 8002206:	d819      	bhi.n	800223c <Hw_I2C_SW_Read+0xc8>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002208:	47d8      	blx	fp

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 800220a:	3601      	adds	r6, #1
 800220c:	b2f6      	uxtb	r6, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 800220e:	ea40 0008 	orr.w	r0, r0, r8

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8002212:	42b5      	cmp	r5, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002214:	fa1f f880 	uxth.w	r8, r0

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8002218:	d922      	bls.n	8002260 <Hw_I2C_SW_Read+0xec>
	{
		if( i < LastIndex )
 800221a:	45b1      	cmp	r9, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 800221c:	eb07 0106 	add.w	r1, r7, r6
 8002220:	4620      	mov	r0, r4

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 8002222:	d8e5      	bhi.n	80021f0 <Hw_I2C_SW_Read+0x7c>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002224:	47d8      	blx	fp

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8002226:	3601      	adds	r6, #1
 8002228:	b2f6      	uxtb	r6, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 800222a:	ea40 0c08 	orr.w	ip, r0, r8

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 800222e:	45b1      	cmp	r9, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002230:	fa1f f88c 	uxth.w	r8, ip
 8002234:	4620      	mov	r0, r4
 8002236:	eb07 0106 	add.w	r1, r7, r6

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 800223a:	d9e5      	bls.n	8002208 <Hw_I2C_SW_Read+0x94>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 800223c:	4620      	mov	r0, r4
 800223e:	19b9      	adds	r1, r7, r6
 8002240:	47d0      	blx	sl
 8002242:	ea40 0308 	orr.w	r3, r0, r8
 8002246:	fa1f f883 	uxth.w	r8, r3
 800224a:	e7c8      	b.n	80021de <Hw_I2C_SW_Read+0x6a>
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;

	Hw_I2C_SW_StartTransmit(Ch);
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <Hw_I2C_SW_Read+0x10c>)
 800224e:	4798      	blx	r3

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address
 8002250:	0070      	lsls	r0, r6, #1
 8002252:	f040 0101 	orr.w	r1, r0, #1
 8002256:	b2c9      	uxtb	r1, r1
 8002258:	4620      	mov	r0, r4
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <Hw_I2C_SW_Read+0x110>)
 800225c:	4790      	blx	r2
 800225e:	4680      	mov	r8, r0
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
		}
	}
	
	Hw_I2C_SW_EndTransmit(Ch);
 8002260:	4620      	mov	r0, r4
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <Hw_I2C_SW_Read+0x114>)
 8002264:	4798      	blx	r3
	

    return Ret;
}
 8002266:	4640      	mov	r0, r8
 8002268:	b003      	add	sp, #12
 800226a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 800226e:	4620      	mov	r0, r4
 8002270:	4639      	mov	r1, r7
 8002272:	47d0      	blx	sl
 8002274:	ea40 0c08 	orr.w	ip, r0, r8
 8002278:	fa1f f88c 	uxth.w	r8, ip
 800227c:	e7a1      	b.n	80021c2 <Hw_I2C_SW_Read+0x4e>
 800227e:	bf00      	nop
 8002280:	08001b91 	.word	0x08001b91
 8002284:	08001efd 	.word	0x08001efd
 8002288:	08001b4d 	.word	0x08001b4d
 800228c:	08001d91 	.word	0x08001d91
 8002290:	08001bfd 	.word	0x08001bfd

08002294 <Hw_I2C_SW_Write>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Write( u8 Ch, u16 i2c_addr, u8* pdata, u16 len )
{
 8002294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002298:	460e      	mov	r6, r1
 800229a:	4699      	mov	r9, r3
    u16 Ret = 0;;
	u8  i;

	Hw_I2C_SW_StartTransmit(Ch);
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <Hw_I2C_SW_Write+0x88>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Write( u8 Ch, u16 i2c_addr, u8* pdata, u16 len )
{
 800229e:	4604      	mov	r4, r0
 80022a0:	4615      	mov	r5, r2
    u16 Ret = 0;;
	u8  i;

	Hw_I2C_SW_StartTransmit(Ch);
 80022a2:	4798      	blx	r3

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address
 80022a4:	0071      	lsls	r1, r6, #1
 80022a6:	4620      	mov	r0, r4
 80022a8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80022ac:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8002324 <Hw_I2C_SW_Write+0x90>
 80022b0:	47c0      	blx	r8
 80022b2:	4607      	mov	r7, r0


	for( i=0; i<len; i++ )
 80022b4:	f1b9 0f00 	cmp.w	r9, #0
 80022b8:	d02a      	beq.n	8002310 <Hw_I2C_SW_Write+0x7c>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80022ba:	4620      	mov	r0, r4
 80022bc:	7829      	ldrb	r1, [r5, #0]
 80022be:	47c0      	blx	r8
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80022c0:	2601      	movs	r6, #1
 80022c2:	f109 3aff 	add.w	sl, r9, #4294967295
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80022c6:	ea40 0707 	orr.w	r7, r0, r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80022ca:	454e      	cmp	r6, r9
 80022cc:	f00a 0a01 	and.w	sl, sl, #1
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80022d0:	b2bf      	uxth	r7, r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80022d2:	d21d      	bcs.n	8002310 <Hw_I2C_SW_Write+0x7c>
 80022d4:	f1ba 0f00 	cmp.w	sl, #0
 80022d8:	d009      	beq.n	80022ee <Hw_I2C_SW_Write+0x5a>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80022da:	4620      	mov	r0, r4
 80022dc:	7869      	ldrb	r1, [r5, #1]
 80022de:	47c0      	blx	r8
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80022e0:	2602      	movs	r6, #2
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80022e2:	ea40 0c07 	orr.w	ip, r0, r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80022e6:	454e      	cmp	r6, r9
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80022e8:	fa1f f78c 	uxth.w	r7, ip
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80022ec:	d210      	bcs.n	8002310 <Hw_I2C_SW_Write+0x7c>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80022ee:	5da9      	ldrb	r1, [r5, r6]
 80022f0:	4620      	mov	r0, r4
 80022f2:	47c0      	blx	r8
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80022f4:	1c71      	adds	r1, r6, #1
 80022f6:	b2ce      	uxtb	r6, r1
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80022f8:	ea40 0207 	orr.w	r2, r0, r7
 80022fc:	5da9      	ldrb	r1, [r5, r6]
 80022fe:	4620      	mov	r0, r4
 8002300:	b297      	uxth	r7, r2
 8002302:	47c0      	blx	r8
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002304:	3601      	adds	r6, #1
 8002306:	b2f6      	uxtb	r6, r6
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 8002308:	4338      	orrs	r0, r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 800230a:	454e      	cmp	r6, r9
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 800230c:	b287      	uxth	r7, r0
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 800230e:	d3ee      	bcc.n	80022ee <Hw_I2C_SW_Write+0x5a>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
	}
	
	Hw_I2C_SW_EndTransmit(Ch);
 8002310:	4620      	mov	r0, r4
 8002312:	4b03      	ldr	r3, [pc, #12]	; (8002320 <Hw_I2C_SW_Write+0x8c>)
 8002314:	4798      	blx	r3

    return Ret;
}
 8002316:	4638      	mov	r0, r7
 8002318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800231c:	08001b91 	.word	0x08001b91
 8002320:	08001b4d 	.word	0x08001b4d
 8002324:	08001efd 	.word	0x08001efd

08002328 <Hw_Si47xx_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
 8002328:	b538      	push	{r3, r4, r5, lr}
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 800232a:	4c0c      	ldr	r4, [pc, #48]	; (800235c <Hw_Si47xx_Reset+0x34>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
 800232c:	4d0c      	ldr	r5, [pc, #48]	; (8002360 <Hw_Si47xx_Reset+0x38>)
 800232e:	2064      	movs	r0, #100	; 0x64
 8002330:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8002332:	6822      	ldr	r2, [r4, #0]
	Hw_Wait(100);
 8002334:	2064      	movs	r0, #100	; 0x64
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8002336:	f042 0120 	orr.w	r1, r2, #32
 800233a:	6021      	str	r1, [r4, #0]
	Hw_Wait(100);
 800233c:	47a8      	blx	r5
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 800233e:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(500);	
 8002340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8002344:	f023 0220 	bic.w	r2, r3, #32
 8002348:	6022      	str	r2, [r4, #0]
	Hw_Wait(500);	
 800234a:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 800234c:	6821      	ldr	r1, [r4, #0]
	Hw_Wait(100);
 800234e:	2064      	movs	r0, #100	; 0x64
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
	Hw_Wait(500);	
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8002350:	f041 0320 	orr.w	r3, r1, #32
 8002354:	6023      	str	r3, [r4, #0]
	Hw_Wait(100);
 8002356:	47a8      	blx	r5
}
 8002358:	bd38      	pop	{r3, r4, r5, pc}
 800235a:	bf00      	nop
 800235c:	40010c0c 	.word	0x40010c0c
 8002360:	0800137d 	.word	0x0800137d

08002364 <Hw_Si47xx_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Init( void )
{
 8002364:	b508      	push	{r3, lr}
	Hw_I2C_Init();
 8002366:	4808      	ldr	r0, [pc, #32]	; (8002388 <Hw_Si47xx_Init+0x24>)
 8002368:	4780      	blx	r0

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 800236a:	4808      	ldr	r0, [pc, #32]	; (800238c <Hw_Si47xx_Init+0x28>)
 800236c:	6801      	ldr	r1, [r0, #0]
 800236e:	f421 0270 	bic.w	r2, r1, #15728640	; 0xf00000
 8002372:	6002      	str	r2, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8002374:	6803      	ldr	r3, [r0, #0]
 8002376:	f443 1140 	orr.w	r1, r3, #3145728	; 0x300000
 800237a:	6001      	str	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 800237c:	6802      	ldr	r2, [r0, #0]
	

	Hw_Si47xx_Reset();
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <Hw_Si47xx_Init+0x2c>)
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 8002380:	6002      	str	r2, [r0, #0]
	

	Hw_Si47xx_Reset();
 8002382:	4798      	blx	r3
}
 8002384:	bd08      	pop	{r3, pc}
 8002386:	bf00      	nop
 8002388:	08001a85 	.word	0x08001a85
 800238c:	40010c00 	.word	0x40010c00
 8002390:	08002329 	.word	0x08002329

08002394 <Hw_Si47xx_SendCommand>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_SendCommand( u8 *pCmd, u16 Length )
{
 8002394:	b510      	push	{r4, lr}
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
	u16 Ret;
	
	Ret = Hw_I2C_Write( 0, HW_SI47XX_ADDR, pCmd, Length );
 800239a:	2000      	movs	r0, #0
 800239c:	2163      	movs	r1, #99	; 0x63
 800239e:	4c01      	ldr	r4, [pc, #4]	; (80023a4 <Hw_Si47xx_SendCommand+0x10>)
 80023a0:	47a0      	blx	r4
	
	return Ret;	
}
 80023a2:	bd10      	pop	{r4, pc}
 80023a4:	08001a91 	.word	0x08001a91

080023a8 <Hw_Si47xx_ReceiveResponse>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_ReceiveResponse( u8 *pResp, u16 Length, u32 TimeOut )
{
 80023a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u32 i;
	
	TimeStart = Hw_Timer_Get_CountValue();
 80023ac:	4e1c      	ldr	r6, [pc, #112]	; (8002420 <Hw_Si47xx_ReceiveResponse+0x78>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_ReceiveResponse( u8 *pResp, u16 Length, u32 TimeOut )
{
 80023ae:	4604      	mov	r4, r0
 80023b0:	460d      	mov	r5, r1
 80023b2:	4690      	mov	r8, r2
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u32 i;
	
	TimeStart = Hw_Timer_Get_CountValue();
 80023b4:	47b0      	blx	r6
 80023b6:	4f1b      	ldr	r7, [pc, #108]	; (8002424 <Hw_Si47xx_ReceiveResponse+0x7c>)
 80023b8:	4681      	mov	r9, r0
	
	while(1)
	{	
		Ret = Hw_I2C_Read( 0, HW_SI47XX_ADDR, pResp, Length );
 80023ba:	2163      	movs	r1, #99	; 0x63
 80023bc:	4622      	mov	r2, r4
 80023be:	462b      	mov	r3, r5
 80023c0:	2000      	movs	r0, #0
 80023c2:	47b8      	blx	r7
		
		if( Ret == ERR_NONE )
 80023c4:	b918      	cbnz	r0, 80023ce <Hw_Si47xx_ReceiveResponse+0x26>
		{
			if( pResp[0] & (1<<7) )
 80023c6:	f994 3000 	ldrsb.w	r3, [r4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db07      	blt.n	80023de <Hw_Si47xx_ReceiveResponse+0x36>
			}
		}
	
		//-- 타임 아웃 처리
		//
		TimeEnd = Hw_Timer_Get_CountValue();
 80023ce:	47b0      	blx	r6
		
		if( (TimeEnd - TimeStart) > TimeOut )
 80023d0:	ebc9 0000 	rsb	r0, r9, r0
 80023d4:	4540      	cmp	r0, r8
 80023d6:	d9f0      	bls.n	80023ba <Hw_Si47xx_ReceiveResponse+0x12>
		{
			Ret = HW_SI47XX_ERR_TIME_OUT;
 80023d8:	2002      	movs	r0, #2
			Hw_Si47xx_LastResp[i] = pResp[i];
		}
	}
	
	return Ret;	
}
 80023da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 80023de:	2d00      	cmp	r5, #0
 80023e0:	d0fb      	beq.n	80023da <Hw_Si47xx_ReceiveResponse+0x32>
 80023e2:	2301      	movs	r3, #1
 80023e4:	4910      	ldr	r1, [pc, #64]	; (8002428 <Hw_Si47xx_ReceiveResponse+0x80>)
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 80023e6:	7826      	ldrb	r6, [r4, #0]
 80023e8:	1e6a      	subs	r2, r5, #1
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 80023ea:	42ab      	cmp	r3, r5
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 80023ec:	700e      	strb	r6, [r1, #0]
 80023ee:	ea02 0203 	and.w	r2, r2, r3
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 80023f2:	d211      	bcs.n	8002418 <Hw_Si47xx_ReceiveResponse+0x70>
 80023f4:	b132      	cbz	r2, 8002404 <Hw_Si47xx_ReceiveResponse+0x5c>
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 80023f6:	f894 c001 	ldrb.w	ip, [r4, #1]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 80023fa:	2302      	movs	r3, #2
 80023fc:	42ab      	cmp	r3, r5
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 80023fe:	f881 c001 	strb.w	ip, [r1, #1]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002402:	d20b      	bcs.n	800241c <Hw_Si47xx_ReceiveResponse+0x74>
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 8002404:	5ce6      	ldrb	r6, [r4, r3]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002406:	1c5a      	adds	r2, r3, #1
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 8002408:	54ce      	strb	r6, [r1, r3]
 800240a:	5ca6      	ldrb	r6, [r4, r2]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 800240c:	3302      	adds	r3, #2
 800240e:	42ab      	cmp	r3, r5
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 8002410:	548e      	strb	r6, [r1, r2]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002412:	d3f7      	bcc.n	8002404 <Hw_Si47xx_ReceiveResponse+0x5c>
 8002414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800241c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002420:	08001a55 	.word	0x08001a55
 8002424:	08001a9d 	.word	0x08001a9d
 8002428:	20000990 	.word	0x20000990

0800242c <Hw_Si47xx_POWER_UP>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_POWER_UP( u8 Mode )
{
 800242c:	b510      	push	{r4, lr}
 800242e:	4604      	mov	r4, r0
 8002430:	b086      	sub	sp, #24
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];
	u16 i;

	//-- 보드 리셋
	//
	Hw_Si47xx_Reset();
 8002432:	480e      	ldr	r0, [pc, #56]	; (800246c <Hw_Si47xx_POWER_UP+0x40>)
 8002434:	4780      	blx	r0


	Cmd[0] = 0x01;		// POWER_UP 명령
 8002436:	2301      	movs	r3, #1
 8002438:	f88d 3010 	strb.w	r3, [sp, #16]
	
	if( Mode == HW_SI47XX_BAND_MODE_FM )
 800243c:	b994      	cbnz	r4, 8002464 <Hw_Si47xx_POWER_UP+0x38>
	{
		Cmd[1] = 0			// FM
 800243e:	2110      	movs	r1, #16
 8002440:	f88d 1011 	strb.w	r1, [sp, #17]
				| (0<<7)	// CTS interrupt enabled 
				| (1<<4);	// Crystal Oscillator Enable
	}

	
	Cmd[2] = 0xB5;		// Analog Output
 8002444:	22b5      	movs	r2, #181	; 0xb5



	
	Ret = Hw_Si47xx_SendCommand( Cmd, 3 );
 8002446:	a804      	add	r0, sp, #16
 8002448:	2103      	movs	r1, #3
				| (0<<7)	// CTS interrupt enabled 
				| (1<<4);	// Crystal Oscillator Enable
	}

	
	Cmd[2] = 0xB5;		// Analog Output
 800244a:	f88d 2012 	strb.w	r2, [sp, #18]



	
	Ret = Hw_Si47xx_SendCommand( Cmd, 3 );
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <Hw_Si47xx_POWER_UP+0x44>)
 8002450:	4798      	blx	r3
		
	if( Ret == ERR_NONE )
 8002452:	b928      	cbnz	r0, 8002460 <Hw_Si47xx_POWER_UP+0x34>
	{
		Ret = Hw_Si47xx_ReceiveResponse( Resp, 0+1, 1000 );
 8002454:	4668      	mov	r0, sp
 8002456:	2101      	movs	r1, #1
 8002458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <Hw_Si47xx_POWER_UP+0x48>)
 800245e:	4798      	blx	r3
	#if HW_SI47XX_DEBUG_SHOW == 1
	Lb_printf("Ret : %x , St : %x \n", Ret, Resp[0] );
	#endif
	
	return Ret;	
}
 8002460:	b006      	add	sp, #24
 8002462:	bd10      	pop	{r4, pc}
				| (1<<4);	// Crystal Oscillator Enable
				
	}
	else
	{
		Cmd[1] = 1			// AM
 8002464:	2211      	movs	r2, #17
 8002466:	f88d 2011 	strb.w	r2, [sp, #17]
 800246a:	e7eb      	b.n	8002444 <Hw_Si47xx_POWER_UP+0x18>
 800246c:	08002329 	.word	0x08002329
 8002470:	08002395 	.word	0x08002395
 8002474:	080023a9 	.word	0x080023a9

08002478 <Hw_Si47xx_WaitForCTS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_WaitForCTS( void  )
{
 8002478:	b500      	push	{lr}
 800247a:	b083      	sub	sp, #12
	u16 Ret;
	u8  Resp[1];

	Ret = Hw_Si47xx_ReceiveResponse( Resp, 1, 1000 );	
 800247c:	a801      	add	r0, sp, #4
 800247e:	2101      	movs	r1, #1
 8002480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002484:	4b01      	ldr	r3, [pc, #4]	; (800248c <Hw_Si47xx_WaitForCTS+0x14>)
 8002486:	4798      	blx	r3
	
	return Ret;	
 8002488:	b003      	add	sp, #12
 800248a:	bd00      	pop	{pc}
 800248c:	080023a9 	.word	0x080023a9

08002490 <Hw_Si47xx_CommandResp>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_CommandResp( u8 *pCmd, u16 CmdLength, u8 *pResp, u16 RespLength, u32 TimeOut )
{
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	461f      	mov	r7, r3
	u16 Ret;
	#if HW_SI47XX_DEBUG_SHOW_RESP == 1
	u32 i;
	#endif
	
	Ret = Hw_Si47xx_WaitForCTS();
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <Hw_Si47xx_CommandResp+0x3c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_CommandResp( u8 *pCmd, u16 CmdLength, u8 *pResp, u16 RespLength, u32 TimeOut )
{
 8002496:	4604      	mov	r4, r0
 8002498:	460e      	mov	r6, r1
 800249a:	4615      	mov	r5, r2
	u16 Ret;
	#if HW_SI47XX_DEBUG_SHOW_RESP == 1
	u32 i;
	#endif
	
	Ret = Hw_Si47xx_WaitForCTS();
 800249c:	4798      	blx	r3

	if( Ret == ERR_NONE )
 800249e:	b100      	cbz	r0, 80024a2 <Hw_Si47xx_CommandResp+0x12>
	}
	#endif
	
	
	return Ret;	
}
 80024a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	
	Ret = Hw_Si47xx_WaitForCTS();

	if( Ret == ERR_NONE )
	{
		Ret = Hw_Si47xx_SendCommand( pCmd, CmdLength );
 80024a2:	4620      	mov	r0, r4
 80024a4:	4631      	mov	r1, r6
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <Hw_Si47xx_CommandResp+0x40>)
 80024a8:	4790      	blx	r2
		
		if( Ret == ERR_NONE )
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d1f8      	bne.n	80024a0 <Hw_Si47xx_CommandResp+0x10>
		{
			Ret = Hw_Si47xx_ReceiveResponse( pResp, RespLength+1, TimeOut );			
 80024ae:	1c79      	adds	r1, r7, #1
 80024b0:	4628      	mov	r0, r5
 80024b2:	b289      	uxth	r1, r1
 80024b4:	9a06      	ldr	r2, [sp, #24]
 80024b6:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <Hw_Si47xx_CommandResp+0x44>)
 80024b8:	4798      	blx	r3
			
			if( Ret == ERR_NONE )
 80024ba:	2800      	cmp	r0, #0
 80024bc:	d1f0      	bne.n	80024a0 <Hw_Si47xx_CommandResp+0x10>
			{
				if( pResp[0] & (1<<6) )
 80024be:	f895 c000 	ldrb.w	ip, [r5]
 80024c2:	f01c 0f40 	tst.w	ip, #64	; 0x40
				{
					Ret = HW_SI47XX_ERR_RESP;
 80024c6:	bf18      	it	ne
 80024c8:	2003      	movne	r0, #3
 80024ca:	e7e9      	b.n	80024a0 <Hw_Si47xx_CommandResp+0x10>
 80024cc:	08002479 	.word	0x08002479
 80024d0:	08002395 	.word	0x08002395
 80024d4:	080023a9 	.word	0x080023a9

080024d8 <Hw_Si47xx_AM_TUNE_STATUS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_STATUS( u8 Option )
{
 80024d8:	b510      	push	{r4, lr}
	HW_SI47XX_PRINTF("AM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x42;	
 80024da:	2442      	movs	r4, #66	; 0x42
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_STATUS( u8 Option )
{
 80024dc:	b088      	sub	sp, #32
	HW_SI47XX_PRINTF("AM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x42;	
 80024de:	f88d 4018 	strb.w	r4, [sp, #24]
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 80024e2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x42;	
	Cmd[Index++] = Option;	
 80024e6:	f88d 0019 	strb.w	r0, [sp, #25]
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 80024ea:	9400      	str	r4, [sp, #0]
 80024ec:	a806      	add	r0, sp, #24
 80024ee:	2102      	movs	r1, #2
 80024f0:	aa02      	add	r2, sp, #8
 80024f2:	2307      	movs	r3, #7
 80024f4:	4c01      	ldr	r4, [pc, #4]	; (80024fc <Hw_Si47xx_AM_TUNE_STATUS+0x24>)
 80024f6:	47a0      	blx	r4
		
	return Ret;	
}
 80024f8:	b008      	add	sp, #32
 80024fa:	bd10      	pop	{r4, pc}
 80024fc:	08002491 	.word	0x08002491

08002500 <Hw_Si47xx_FM_TUNE_STATUS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_STATUS( u8 Option )
{
 8002500:	b510      	push	{r4, lr}
	HW_SI47XX_PRINTF("FM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x22;	
 8002502:	2422      	movs	r4, #34	; 0x22
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_STATUS( u8 Option )
{
 8002504:	b088      	sub	sp, #32
	HW_SI47XX_PRINTF("FM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x22;	
 8002506:	f88d 4018 	strb.w	r4, [sp, #24]
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 800250a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x22;	
	Cmd[Index++] = Option;	
 800250e:	f88d 0019 	strb.w	r0, [sp, #25]
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 8002512:	9400      	str	r4, [sp, #0]
 8002514:	a806      	add	r0, sp, #24
 8002516:	2102      	movs	r1, #2
 8002518:	aa02      	add	r2, sp, #8
 800251a:	2307      	movs	r3, #7
 800251c:	4c01      	ldr	r4, [pc, #4]	; (8002524 <Hw_Si47xx_FM_TUNE_STATUS+0x24>)
 800251e:	47a0      	blx	r4
		
	return Ret;	
}
 8002520:	b008      	add	sp, #32
 8002522:	bd10      	pop	{r4, pc}
 8002524:	08002491 	.word	0x08002491

08002528 <Hw_Si47xx_GET_INT_STATUS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_GET_INT_STATUS( u8 *pStatus )
{
 8002528:	b530      	push	{r4, r5, lr}
 800252a:	b089      	sub	sp, #36	; 0x24
	HW_SI47XX_PRINTF("GET_INT_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x14;	
 800252c:	a908      	add	r1, sp, #32
 800252e:	2214      	movs	r2, #20
 8002530:	f801 2d08 	strb.w	r2, [r1, #-8]!
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002534:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_GET_INT_STATUS( u8 *pStatus )
{
 8002538:	4604      	mov	r4, r0
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x14;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 800253a:	2300      	movs	r3, #0
 800253c:	9500      	str	r5, [sp, #0]
 800253e:	4608      	mov	r0, r1
 8002540:	aa02      	add	r2, sp, #8
 8002542:	2101      	movs	r1, #1
 8002544:	4d03      	ldr	r5, [pc, #12]	; (8002554 <Hw_Si47xx_GET_INT_STATUS+0x2c>)
 8002546:	47a8      	blx	r5
	
	*pStatus = Resp[0];
 8002548:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800254c:	7023      	strb	r3, [r4, #0]
		
	return Ret;	
}
 800254e:	b009      	add	sp, #36	; 0x24
 8002550:	bd30      	pop	{r4, r5, pc}
 8002552:	bf00      	nop
 8002554:	08002491 	.word	0x08002491

08002558 <Hw_Si47xx_WaitForSTC>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_WaitForSTC( u32 TimeOut )
{
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u8  Status;
	
	TimeStart = Hw_Timer_Get_CountValue();
 800255a:	4c0b      	ldr	r4, [pc, #44]	; (8002588 <Hw_Si47xx_WaitForSTC+0x30>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_WaitForSTC( u32 TimeOut )
{
 800255c:	b083      	sub	sp, #12
 800255e:	4607      	mov	r7, r0
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u8  Status;
	
	TimeStart = Hw_Timer_Get_CountValue();
 8002560:	47a0      	blx	r4
 8002562:	4d0a      	ldr	r5, [pc, #40]	; (800258c <Hw_Si47xx_WaitForSTC+0x34>)
 8002564:	4606      	mov	r6, r0
	
	while(1)
	{	
		Ret = Hw_Si47xx_GET_INT_STATUS( &Status );
 8002566:	f10d 0007 	add.w	r0, sp, #7
 800256a:	47a8      	blx	r5
		
		if( Ret == ERR_NONE )
 800256c:	b920      	cbnz	r0, 8002578 <Hw_Si47xx_WaitForSTC+0x20>
		{
			if( Status & (1<<0) )
 800256e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002572:	f013 0f01 	tst.w	r3, #1
 8002576:	d104      	bne.n	8002582 <Hw_Si47xx_WaitForSTC+0x2a>
			}
		}
	
		//-- 타임 아웃 처리
		//
		TimeEnd = Hw_Timer_Get_CountValue();
 8002578:	47a0      	blx	r4
		
		if( (TimeEnd - TimeStart) > TimeOut )
 800257a:	1b80      	subs	r0, r0, r6
 800257c:	42b8      	cmp	r0, r7
 800257e:	d9f2      	bls.n	8002566 <Hw_Si47xx_WaitForSTC+0xe>
		{
			Ret = HW_SI47XX_ERR_TIME_OUT;
 8002580:	2002      	movs	r0, #2
			break;
		}
	}
	
	return Ret;		
}
 8002582:	b003      	add	sp, #12
 8002584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002586:	bf00      	nop
 8002588:	08001a55 	.word	0x08001a55
 800258c:	08002529 	.word	0x08002529

08002590 <Hw_Si47xx_AM_TUNE_FREQ>:
     			520khz -> 1710khz
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_FREQ( u16 Frequency )
{
 8002590:	b5f0      	push	{r4, r5, r6, r7, lr}
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x40;
	Cmd[Index++] = 0x00;
 8002592:	2400      	movs	r4, #0
     			520khz -> 1710khz
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_FREQ( u16 Frequency )
{
 8002594:	b089      	sub	sp, #36	; 0x24
 8002596:	4605      	mov	r5, r0

	Index = 0;
	
	Cmd[Index++] = 0x40;
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 8002598:	0a06      	lsrs	r6, r0, #8
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 800259a:	4623      	mov	r3, r4
	HW_SI47XX_PRINTF("AM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x40;
 800259c:	2740      	movs	r7, #64	; 0x40
	Cmd[Index++] = 0x00;
 800259e:	f88d 4019 	strb.w	r4, [sp, #25]
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
 80025a2:	f88d 401c 	strb.w	r4, [sp, #28]
	Cmd[Index++] = 0x00; 								// ANTCAP
 80025a6:	f88d 401d 	strb.w	r4, [sp, #29]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80025aa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80025ae:	9400      	str	r4, [sp, #0]
 80025b0:	a806      	add	r0, sp, #24
 80025b2:	2106      	movs	r1, #6
 80025b4:	aa02      	add	r2, sp, #8
	HW_SI47XX_PRINTF("AM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x40;
 80025b6:	f88d 7018 	strb.w	r7, [sp, #24]
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 80025ba:	f88d 601a 	strb.w	r6, [sp, #26]
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
 80025be:	f88d 501b 	strb.w	r5, [sp, #27]
	Cmd[Index++] = 0x00; 								// ANTCAP
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80025c2:	4c02      	ldr	r4, [pc, #8]	; (80025cc <Hw_Si47xx_AM_TUNE_FREQ+0x3c>)
 80025c4:	47a0      	blx	r4
		
	return Ret;	
}
 80025c6:	b009      	add	sp, #36	; 0x24
 80025c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	08002491 	.word	0x08002491

080025d0 <Hw_Si47xx_FM_TUNE_FREQ>:
     			107.7Mhz -> 10770
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_FREQ( u16 Frequency )
{
 80025d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x20;
	Cmd[Index++] = 0x00;
 80025d2:	2400      	movs	r4, #0
     			107.7Mhz -> 10770
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_FREQ( u16 Frequency )
{
 80025d4:	b089      	sub	sp, #36	; 0x24
 80025d6:	4605      	mov	r5, r0

	Index = 0;
	
	Cmd[Index++] = 0x20;
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 80025d8:	0a06      	lsrs	r6, r0, #8
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80025da:	4623      	mov	r3, r4
	HW_SI47XX_PRINTF("FM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x20;
 80025dc:	2720      	movs	r7, #32
	Cmd[Index++] = 0x00;
 80025de:	f88d 4019 	strb.w	r4, [sp, #25]
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
 80025e2:	f88d 401c 	strb.w	r4, [sp, #28]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80025e6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80025ea:	9400      	str	r4, [sp, #0]
 80025ec:	a806      	add	r0, sp, #24
 80025ee:	2105      	movs	r1, #5
 80025f0:	aa02      	add	r2, sp, #8
	HW_SI47XX_PRINTF("FM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x20;
 80025f2:	f88d 7018 	strb.w	r7, [sp, #24]
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 80025f6:	f88d 601a 	strb.w	r6, [sp, #26]
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
 80025fa:	f88d 501b 	strb.w	r5, [sp, #27]
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80025fe:	4c02      	ldr	r4, [pc, #8]	; (8002608 <Hw_Si47xx_FM_TUNE_FREQ+0x38>)
 8002600:	47a0      	blx	r4
		
	return Ret;	
}
 8002602:	b009      	add	sp, #36	; 0x24
 8002604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002606:	bf00      	nop
 8002608:	08002491 	.word	0x08002491

0800260c <Hw_Si47xx_SET_PROPERTY>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_SET_PROPERTY( u16 PropertyName, u16 PropertyValue )
{
 800260c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800260e:	460c      	mov	r4, r1
 8002610:	b089      	sub	sp, #36	; 0x24
 8002612:	4605      	mov	r5, r0
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x12;
	Cmd[Index++] = 0x00;
 8002614:	2600      	movs	r6, #0
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
 8002616:	ea4f 2e10 	mov.w	lr, r0, lsr #8
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
 800261a:	0a0f      	lsrs	r7, r1, #8
	HW_SI47XX_PRINTF("SET_PROPERTY : %x, %x\n", PropertyName, PropertyValue );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x12;
 800261c:	f04f 0c12 	mov.w	ip, #18
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 0 ) & 0xFF;
 8002620:	f88d 401d 	strb.w	r4, [sp, #29]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002624:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002628:	9400      	str	r4, [sp, #0]
 800262a:	a806      	add	r0, sp, #24
 800262c:	2106      	movs	r1, #6
 800262e:	aa02      	add	r2, sp, #8
 8002630:	4633      	mov	r3, r6
	HW_SI47XX_PRINTF("SET_PROPERTY : %x, %x\n", PropertyName, PropertyValue );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x12;
 8002632:	f88d c018 	strb.w	ip, [sp, #24]
	Cmd[Index++] = 0x00;
 8002636:	f88d 6019 	strb.w	r6, [sp, #25]
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
 800263a:	f88d e01a 	strb.w	lr, [sp, #26]
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
 800263e:	f88d 501b 	strb.w	r5, [sp, #27]
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
 8002642:	f88d 701c 	strb.w	r7, [sp, #28]
	Cmd[Index++] = ( PropertyValue >> 0 ) & 0xFF;
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002646:	4c02      	ldr	r4, [pc, #8]	; (8002650 <Hw_Si47xx_SET_PROPERTY+0x44>)
 8002648:	47a0      	blx	r4
	
	return Ret;	
}
 800264a:	b009      	add	sp, #36	; 0x24
 800264c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800264e:	bf00      	nop
 8002650:	08002491 	.word	0x08002491

08002654 <Hw_Si47xx_FM_Config>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_Config( void )
{
 8002654:	b530      	push	{r4, r5, lr}
	u8  Cmd [HW_SI47XX_MAX_LENGTH_CMD];
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];	

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_FM)) != ERR_NONE )	return Ret;
 8002656:	2000      	movs	r0, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_Config( void )
{
 8002658:	b089      	sub	sp, #36	; 0x24
	u8  Cmd [HW_SI47XX_MAX_LENGTH_CMD];
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];	

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_FM)) != ERR_NONE )	return Ret;
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <Hw_Si47xx_FM_Config+0x94>)
 800265c:	4798      	blx	r3
 800265e:	4604      	mov	r4, r0
 8002660:	b110      	cbz	r0, 8002668 <Hw_Si47xx_FM_Config+0x14>
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4001, 0  );
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4000, 63 );				

	
	return Ret;
}
 8002662:	4620      	mov	r0, r4
 8002664:	b009      	add	sp, #36	; 0x24
 8002666:	bd30      	pop	{r4, r5, pc}

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_FM)) != ERR_NONE )	return Ret;
		
	Hw_Timer_Delay_ms(120);
 8002668:	2078      	movs	r0, #120	; 0x78
 800266a:	4a20      	ldr	r2, [pc, #128]	; (80026ec <Hw_Si47xx_FM_Config+0x98>)
 800266c:	4790      	blx	r2
	#if HW_SI47XX_DEBUG_SHOW == 1
	HW_SI47XX_PRINTF("GET_REV\n");
	#endif

	Cmd[0] = 0x10;
	if( (Ret = Hw_Si47xx_CommandResp( Cmd, 1, Resp, 8, 1000 )) != ERR_NONE ) return Ret;
 800266e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	//
	#if HW_SI47XX_DEBUG_SHOW == 1
	HW_SI47XX_PRINTF("GET_REV\n");
	#endif

	Cmd[0] = 0x10;
 8002672:	a808      	add	r0, sp, #32
 8002674:	2110      	movs	r1, #16
 8002676:	f800 1d08 	strb.w	r1, [r0, #-8]!
	if( (Ret = Hw_Si47xx_CommandResp( Cmd, 1, Resp, 8, 1000 )) != ERR_NONE ) return Ret;
 800267a:	aa02      	add	r2, sp, #8
 800267c:	9400      	str	r4, [sp, #0]
 800267e:	2101      	movs	r1, #1
 8002680:	4c1b      	ldr	r4, [pc, #108]	; (80026f0 <Hw_Si47xx_FM_Config+0x9c>)
 8002682:	2308      	movs	r3, #8
 8002684:	47a0      	blx	r4
 8002686:	4604      	mov	r4, r0
 8002688:	2800      	cmp	r0, #0
 800268a:	d1ea      	bne.n	8002662 <Hw_Si47xx_FM_Config+0xe>
	
	
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0001, 0x0005 );		// Seek/Tune Complete Interrupt Enable
 800268c:	4d19      	ldr	r5, [pc, #100]	; (80026f4 <Hw_Si47xx_FM_Config+0xa0>)
 800268e:	2105      	movs	r1, #5
 8002690:	2001      	movs	r0, #1
 8002692:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0201, 32768 );		// REFCLK_FREQ
 8002694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002698:	f240 2001 	movw	r0, #513	; 0x201
 800269c:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0202, 1     );		// PRESCALE
 800269e:	2101      	movs	r1, #1
 80026a0:	f240 2002 	movw	r0, #514	; 0x202
 80026a4:	47a8      	blx	r5

		
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1502, 0     );		// FM_RDS_CONFIG
 80026a6:	4621      	mov	r1, r4
 80026a8:	f241 5002 	movw	r0, #5378	; 0x1502
 80026ac:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1100, 1     );		// FM_DEEMPHASIS
 80026ae:	2101      	movs	r1, #1
 80026b0:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80026b4:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1400, 7600 );		// FM_SEEK_BAND_BOTTOM
 80026b6:	f641 51b0 	movw	r1, #7600	; 0x1db0
 80026ba:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80026be:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1401, 10790 );		// FM_SEEK_BAND_TOP
 80026c0:	f642 2126 	movw	r1, #10790	; 0x2a26
 80026c4:	f241 4001 	movw	r0, #5121	; 0x1401
 80026c8:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1402, 10    );		// FM_SEEK_FREQ_SPACING
 80026ca:	210a      	movs	r1, #10
 80026cc:	f241 4002 	movw	r0, #5122	; 0x1402
 80026d0:	47a8      	blx	r5
	//Ret = Hw_Si47xx_SET_PROPERTY( 0x1403, 3     );		// FM_SEEK_TUNE_SNR_THRESHOLD   3
	//Ret = Hw_Si47xx_SET_PROPERTY( 0x1404, 20    );		// FM_SEEK_TUNE_RSSI_THRESHOLD


	Ret = Hw_Si47xx_SET_PROPERTY( 0x4001, 0  );
 80026d2:	4621      	mov	r1, r4
 80026d4:	f244 0001 	movw	r0, #16385	; 0x4001
 80026d8:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4000, 63 );				
 80026da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026de:	213f      	movs	r1, #63	; 0x3f
 80026e0:	47a8      	blx	r5
 80026e2:	4604      	mov	r4, r0

	
	return Ret;
 80026e4:	e7bd      	b.n	8002662 <Hw_Si47xx_FM_Config+0xe>
 80026e6:	bf00      	nop
 80026e8:	0800242d 	.word	0x0800242d
 80026ec:	08001a41 	.word	0x08001a41
 80026f0:	08002491 	.word	0x08002491
 80026f4:	0800260d 	.word	0x0800260d

080026f8 <Hw_SPI_Enable>:
              
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Enable( u8 Ch )
{
	switch( Ch )
 80026f8:	2801      	cmp	r0, #1
 80026fa:	d104      	bne.n	8002706 <Hw_SPI_Enable+0xe>
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR1, 6 );
 80026fc:	4b02      	ldr	r3, [pc, #8]	; (8002708 <Hw_SPI_Enable+0x10>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	4770      	bx	lr
 8002708:	40003800 	.word	0x40003800

0800270c <Hw_SPI_Ch2_Init>:

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 800270c:	4917      	ldr	r1, [pc, #92]	; (800276c <Hw_SPI_Ch2_Init+0x60>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Ch2_Init(void)
{
 800270e:	b508      	push	{r3, lr}

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8002710:	680b      	ldr	r3, [r1, #0]
 8002712:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002716:	600a      	str	r2, [r1, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 8002718:	6808      	ldr	r0, [r1, #0]
 800271a:	f440 3340 	orr.w	r3, r0, #196608	; 0x30000
 800271e:	600b      	str	r3, [r1, #0]
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 8002720:	680a      	ldr	r2, [r1, #0]
 8002722:	f442 2000 	orr.w	r0, r2, #524288	; 0x80000
 8002726:	6008      	str	r0, [r1, #0]
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8002728:	680b      	ldr	r3, [r1, #0]
	REG_SPI2_CR2 = 0
        | ( 1 <<  2 );  // SSOE      - SS output enable
        				//             0 : Disabled
		                //             1 : Enabled

	Hw_SPI_Enable(HW_SPI_CH2);	
 800272a:	2001      	movs	r0, #1
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 800272c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002730:	600a      	str	r2, [r1, #0]
	REG_GPIOB_CRH |=  (0x03 << (20));	// MODE   - Output mode, max speed 50Mhz
 8002732:	680b      	ldr	r3, [r1, #0]
 8002734:	f443 1240 	orr.w	r2, r3, #3145728	; 0x300000
 8002738:	600a      	str	r2, [r1, #0]
	REG_GPIOB_CRH |=  (0x02 << (22));	// CNF    - Alternate function output Push-pull
 800273a:	680b      	ldr	r3, [r1, #0]
 800273c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002740:	600a      	str	r2, [r1, #0]

	// PB15 - SPI2_MOSI
	REG_GPIOB_CRH &= ~(0x0F << (28));	// Clear
 8002742:	680b      	ldr	r3, [r1, #0]
 8002744:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002748:	600a      	str	r2, [r1, #0]
	REG_GPIOB_CRH |=  (0x03 << (28));	// MODE   - Output mode, max speed 50Mhz
 800274a:	680b      	ldr	r3, [r1, #0]
 800274c:	f043 5240 	orr.w	r2, r3, #805306368	; 0x30000000
 8002750:	600a      	str	r2, [r1, #0]
	REG_GPIOB_CRH |=  (0x02 << (30));	// CNF    - Alternate function output Push-pull
 8002752:	680b      	ldr	r3, [r1, #0]
 8002754:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002758:	600a      	str	r2, [r1, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 800275a:	4905      	ldr	r1, [pc, #20]	; (8002770 <Hw_SPI_Ch2_Init+0x64>)
 800275c:	f244 031c 	movw	r3, #16412	; 0x401c
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8002760:	2204      	movs	r2, #4



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8002762:	600b      	str	r3, [r1, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8002764:	604a      	str	r2, [r1, #4]
        | ( 1 <<  2 );  // SSOE      - SS output enable
        				//             0 : Disabled
		                //             1 : Enabled

	Hw_SPI_Enable(HW_SPI_CH2);	
 8002766:	4b03      	ldr	r3, [pc, #12]	; (8002774 <Hw_SPI_Ch2_Init+0x68>)
 8002768:	4798      	blx	r3
}
 800276a:	bd08      	pop	{r3, pc}
 800276c:	40010c04 	.word	0x40010c04
 8002770:	40003800 	.word	0x40003800
 8002774:	080026f9 	.word	0x080026f9

08002778 <Hw_SPI_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Init(void)
{
 8002778:	b510      	push	{r4, lr}
	static u8 Called = 0;


	if( Called == 1 ) return;
 800277a:	4c07      	ldr	r4, [pc, #28]	; (8002798 <Hw_SPI_Init+0x20>)
 800277c:	7823      	ldrb	r3, [r4, #0]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d008      	beq.n	8002794 <Hw_SPI_Init+0x1c>


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <Hw_SPI_Init+0x24>)
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 8002784:	4906      	ldr	r1, [pc, #24]	; (80027a0 <Hw_SPI_Init+0x28>)
	if( Called == 1 ) return;


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	f440 4280 	orr.w	r2, r0, #16384	; 0x4000
 800278c:	601a      	str	r2, [r3, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 800278e:	4788      	blx	r1

	Called = 1;	
 8002790:	2001      	movs	r0, #1
 8002792:	7020      	strb	r0, [r4, #0]
 8002794:	bd10      	pop	{r4, pc}
 8002796:	bf00      	nop
 8002798:	20000488 	.word	0x20000488
 800279c:	4002101c 	.word	0x4002101c
 80027a0:	0800270d 	.word	0x0800270d

080027a4 <Hw_SPI_StartDMA>:
              
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_StartDMA( u8 Ch )
{
	switch( Ch )
 80027a4:	2801      	cmp	r0, #1
 80027a6:	d108      	bne.n	80027ba <Hw_SPI_StartDMA+0x16>
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR2, 1 );	// TX DMA Enable
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <Hw_SPI_StartDMA+0x18>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	f042 0102 	orr.w	r1, r2, #2
 80027b0:	6019      	str	r1, [r3, #0]
			SET_BIT( REG_SPI2_CR2, 0 );	// RX DMA Enable
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	f040 0201 	orr.w	r2, r0, #1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	4770      	bx	lr
 80027bc:	40003804 	.word	0x40003804

080027c0 <Hw_SPI_Write8Bit>:
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 80027c0:	2801      	cmp	r0, #1
 80027c2:	d001      	beq.n	80027c8 <Hw_SPI_Write8Bit+0x8>
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 80027c4:	2000      	movs	r0, #0
 80027c6:	4770      	bx	lr
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 80027c8:	4a14      	ldr	r2, [pc, #80]	; (800281c <Hw_SPI_Write8Bit+0x5c>)
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 80027ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80027ce:	e006      	b.n	80027de <Hw_SPI_Write8Bit+0x1e>
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 80027d0:	6810      	ldr	r0, [r2, #0]
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 80027d2:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 80027d4:	f010 0f02 	tst.w	r0, #2
 80027d8:	d105      	bne.n	80027e6 <Hw_SPI_Write8Bit+0x26>
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 80027da:	3b01      	subs	r3, #1
 80027dc:	d306      	bcc.n	80027ec <Hw_SPI_Write8Bit+0x2c>
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 80027de:	6810      	ldr	r0, [r2, #0]
 80027e0:	f010 0f02 	tst.w	r0, #2
 80027e4:	d0f4      	beq.n	80027d0 <Hw_SPI_Write8Bit+0x10>
			}
			if( TimeOut == 0 ) return 1;
 80027e6:	b90b      	cbnz	r3, 80027ec <Hw_SPI_Write8Bit+0x2c>
 80027e8:	2001      	movs	r0, #1
 80027ea:	4770      	bx	lr
			REG_SPI2_DR = WriteData;
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <Hw_SPI_Write8Bit+0x60>)

			
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 80027ee:	4a0b      	ldr	r2, [pc, #44]	; (800281c <Hw_SPI_Write8Bit+0x5c>)
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
			}
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;
 80027f0:	6019      	str	r1, [r3, #0]

			
			TimeOut = 10000;	
			while( TimeOut-- )
 80027f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80027f6:	e006      	b.n	8002806 <Hw_SPI_Write8Bit+0x46>
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 80027f8:	6810      	ldr	r0, [r2, #0]
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 80027fa:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 80027fc:	f010 0f01 	tst.w	r0, #1
 8002800:	d105      	bne.n	800280e <Hw_SPI_Write8Bit+0x4e>
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8002802:	3b01      	subs	r3, #1
 8002804:	d304      	bcc.n	8002810 <Hw_SPI_Write8Bit+0x50>
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8002806:	6811      	ldr	r1, [r2, #0]
 8002808:	f011 0f01 	tst.w	r1, #1
 800280c:	d0f4      	beq.n	80027f8 <Hw_SPI_Write8Bit+0x38>
			}
			if( TimeOut == 0 ) return 1;
 800280e:	b11b      	cbz	r3, 8002818 <Hw_SPI_Write8Bit+0x58>
		
			ReadData = REG_SPI2_DR;
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <Hw_SPI_Write8Bit+0x60>)
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8002812:	2000      	movs	r0, #0
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
			}
			if( TimeOut == 0 ) return 1;
		
			ReadData = REG_SPI2_DR;
 8002814:	6813      	ldr	r3, [r2, #0]
			
			break;
 8002816:	4770      	bx	lr
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
			}
			if( TimeOut == 0 ) return 1;
 8002818:	2001      	movs	r0, #1
			break;
	}
	

    return 0;
}
 800281a:	4770      	bx	lr
 800281c:	40003808 	.word	0x40003808
 8002820:	4000380c 	.word	0x4000380c

08002824 <Hw_N5100G_FrameTick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5100G_FrameTick( void )
{
 8002824:	b508      	push	{r3, lr}
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <Hw_N5100G_FrameTick+0x38>)
 8002828:	4798      	blx	r3
 800282a:	2801      	cmp	r0, #1
 800282c:	d00d      	beq.n	800284a <Hw_N5100G_FrameTick+0x26>
 800282e:	480c      	ldr	r0, [pc, #48]	; (8002860 <Hw_N5100G_FrameTick+0x3c>)
 8002830:	6803      	ldr	r3, [r0, #0]
		{
			Hw_N5110G_Frame_DrawReq--;
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 8002832:	b903      	cbnz	r3, 8002836 <Hw_N5100G_FrameTick+0x12>
 8002834:	bd08      	pop	{r3, pc}
	{
		Hw_DMA_SPI2_Setup( (u32)Hw_N5110G_TxFrameBuf, (u32)Hw_N5110G_RxFrameBuf, HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT );				
 8002836:	480b      	ldr	r0, [pc, #44]	; (8002864 <Hw_N5100G_FrameTick+0x40>)
 8002838:	490b      	ldr	r1, [pc, #44]	; (8002868 <Hw_N5100G_FrameTick+0x44>)
 800283a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <Hw_N5100G_FrameTick+0x48>)
 8002840:	4798      	blx	r3
		Hw_SPI_StartDMA( HW_SPI_CH2 );			
 8002842:	2001      	movs	r0, #1
 8002844:	490a      	ldr	r1, [pc, #40]	; (8002870 <Hw_N5100G_FrameTick+0x4c>)
 8002846:	4788      	blx	r1
 8002848:	bd08      	pop	{r3, pc}
{
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
	{
		if( Hw_N5110G_Frame_DrawReq > 0 )
 800284a:	4a05      	ldr	r2, [pc, #20]	; (8002860 <Hw_N5100G_FrameTick+0x3c>)
 800284c:	6813      	ldr	r3, [r2, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <Hw_N5100G_FrameTick+0x10>
		{
			Hw_N5110G_Frame_DrawReq--;
 8002852:	3b01      	subs	r3, #1
 8002854:	6013      	str	r3, [r2, #0]
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0ec      	beq.n	8002834 <Hw_N5100G_FrameTick+0x10>
 800285a:	e7ec      	b.n	8002836 <Hw_N5100G_FrameTick+0x12>
 800285c:	08003119 	.word	0x08003119
 8002860:	20000b9c 	.word	0x20000b9c
 8002864:	200009a0 	.word	0x200009a0
 8002868:	20000ba0 	.word	0x20000ba0
 800286c:	080030c9 	.word	0x080030c9
 8002870:	080027a5 	.word	0x080027a5

08002874 <Hw_N5110G_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
 8002874:	b510      	push	{r4, lr}
	HW_N5110G_RESET_ON();
 8002876:	4c06      	ldr	r4, [pc, #24]	; (8002890 <Hw_N5110G_Reset+0x1c>)
	Hw_Timer_Delay_ms(10);
 8002878:	200a      	movs	r0, #10
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
	HW_N5110G_RESET_ON();
 800287a:	6823      	ldr	r3, [r4, #0]
	Hw_Timer_Delay_ms(10);
 800287c:	4905      	ldr	r1, [pc, #20]	; (8002894 <Hw_N5110G_Reset+0x20>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
	HW_N5110G_RESET_ON();
 800287e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002882:	6022      	str	r2, [r4, #0]
	Hw_Timer_Delay_ms(10);
 8002884:	4788      	blx	r1
	HW_N5110G_RESET_OFF();
 8002886:	6820      	ldr	r0, [r4, #0]
 8002888:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
 800288c:	6023      	str	r3, [r4, #0]
}
 800288e:	bd10      	pop	{r4, pc}
 8002890:	40010c0c 	.word	0x40010c0c
 8002894:	08001a41 	.word	0x08001a41

08002898 <Hw_N5110G_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 8002898:	b510      	push	{r4, lr}
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 800289a:	4c07      	ldr	r4, [pc, #28]	; (80028b8 <Hw_N5110G_WriteCmd+0x20>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 800289c:	4601      	mov	r1, r0
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 800289e:	6822      	ldr	r2, [r4, #0]
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 80028a0:	2001      	movs	r0, #1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 80028a2:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 80028a6:	6023      	str	r3, [r4, #0]
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <Hw_N5110G_WriteCmd+0x24>)
 80028aa:	4790      	blx	r2
	HW_N5110G_SEL_DATA();
 80028ac:	6821      	ldr	r1, [r4, #0]
 80028ae:	f441 6300 	orr.w	r3, r1, #2048	; 0x800
 80028b2:	6023      	str	r3, [r4, #0]
	
	return Ret;
}
 80028b4:	bd10      	pop	{r4, pc}
 80028b6:	bf00      	nop
 80028b8:	40010c0c 	.word	0x40010c0c
 80028bc:	080027c1 	.word	0x080027c1

080028c0 <Hw_N5110G_Goto>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 80028c0:	b570      	push	{r4, r5, r6, lr}
 80028c2:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 80028c4:	4c05      	ldr	r4, [pc, #20]	; (80028dc <Hw_N5110G_Goto+0x1c>)
 80028c6:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 80028ca:	47a0      	blx	r4
 80028cc:	4606      	mov	r6, r0
	Ret |= Hw_N5110G_WriteCmd( 0x80|x );
 80028ce:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 80028d2:	47a0      	blx	r4
 80028d4:	4330      	orrs	r0, r6

	return Ret;
}
 80028d6:	b280      	uxth	r0, r0
 80028d8:	bd70      	pop	{r4, r5, r6, pc}
 80028da:	bf00      	nop
 80028dc:	08002899 	.word	0x08002899

080028e0 <Hw_N5110G_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 80028e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 80028e2:	4c2a      	ldr	r4, [pc, #168]	; (800298c <Hw_N5110G_Init+0xac>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 80028e4:	b083      	sub	sp, #12
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 80028e6:	47a0      	blx	r4
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 80028e8:	4b29      	ldr	r3, [pc, #164]	; (8002990 <Hw_N5110G_Init+0xb0>)
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 80028ea:	4c2a      	ldr	r4, [pc, #168]	; (8002994 <Hw_N5110G_Init+0xb4>)
	
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	f421 6770 	bic.w	r7, r1, #3840	; 0xf00
 80028f2:	601f      	str	r7, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 80028f4:	6818      	ldr	r0, [r3, #0]
	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
	
	Hw_N5110G_Reset();
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 80028f6:	4f28      	ldr	r7, [pc, #160]	; (8002998 <Hw_N5110G_Init+0xb8>)
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 80028f8:	f440 7640 	orr.w	r6, r0, #768	; 0x300
 80028fc:	601e      	str	r6, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 80028fe:	681d      	ldr	r5, [r3, #0]
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
 8002900:	4e26      	ldr	r6, [pc, #152]	; (800299c <Hw_N5110G_Init+0xbc>)
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8002902:	601d      	str	r5, [r3, #0]

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8002904:	681a      	ldr	r2, [r3, #0]
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8002906:	2500      	movs	r5, #0
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8002908:	f422 4170 	bic.w	r1, r2, #61440	; 0xf000
 800290c:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	f440 5240 	orr.w	r2, r0, #12288	; 0x3000
 8002914:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 8002916:	6819      	ldr	r1, [r3, #0]
 8002918:	6019      	str	r1, [r3, #0]


	HW_N5110G_RESET_OFF();
 800291a:	6820      	ldr	r0, [r4, #0]
 800291c:	f440 6280 	orr.w	r2, r0, #1024	; 0x400
 8002920:	6022      	str	r2, [r4, #0]
	HW_N5110G_SEL_CMD();
 8002922:	6823      	ldr	r3, [r4, #0]
	
	Hw_N5110G_Reset();
 8002924:	481e      	ldr	r0, [pc, #120]	; (80029a0 <Hw_N5110G_Init+0xc0>)
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
 8002926:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800292a:	6021      	str	r1, [r4, #0]
	
	Hw_N5110G_Reset();
 800292c:	4780      	blx	r0
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 800292e:	2021      	movs	r0, #33	; 0x21
 8002930:	47b8      	blx	r7
	Hw_N5110G_WriteCmd(0xC6);	// Write Vop
 8002932:	20c6      	movs	r0, #198	; 0xc6
 8002934:	47b8      	blx	r7
	Hw_N5110G_WriteCmd(0x06);	// Set Temperature Coefficient
 8002936:	2006      	movs	r0, #6
 8002938:	47b8      	blx	r7
	Hw_N5110G_WriteCmd(0x13);	// Set Bias System
 800293a:	2013      	movs	r0, #19
 800293c:	47b8      	blx	r7
	Hw_N5110G_WriteCmd(0x20);	// H = 0
 800293e:	2020      	movs	r0, #32
 8002940:	47b8      	blx	r7
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
 8002942:	200c      	movs	r0, #12
 8002944:	47b8      	blx	r7
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
 8002946:	4629      	mov	r1, r5
 8002948:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <Hw_N5110G_Init+0xc4>)
 800294a:	4628      	mov	r0, r5
 800294c:	4790      	blx	r2
	
	
	HW_N5110G_SEL_DATA();
 800294e:	6827      	ldr	r7, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8002950:	2121      	movs	r1, #33	; 0x21
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
 8002952:	f447 6700 	orr.w	r7, r7, #2048	; 0x800
 8002956:	6027      	str	r7, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
 8002958:	4c13      	ldr	r4, [pc, #76]	; (80029a8 <Hw_N5110G_Init+0xc8>)
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 800295a:	2003      	movs	r0, #3
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 800295c:	8025      	strh	r5, [r4, #0]
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 800295e:	2202      	movs	r2, #2
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <Hw_N5110G_Init+0xcc>)
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
 8002962:	6035      	str	r5, [r6, #0]
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8002964:	4c12      	ldr	r4, [pc, #72]	; (80029b0 <Hw_N5110G_Init+0xd0>)
 8002966:	9500      	str	r5, [sp, #0]
 8002968:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
 800296a:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <Hw_N5110G_Init+0xd4>)
 800296c:	2003      	movs	r0, #3
 800296e:	4798      	blx	r3
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <Hw_N5110G_Init+0xd8>)
     TITLE   : Hw_5110G_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
 8002972:	f503 71fc 	add.w	r1, r3, #504	; 0x1f8
 8002976:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8002978:	705d      	strb	r5, [r3, #1]
     TITLE   : Hw_5110G_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
 800297a:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 800297c:	428b      	cmp	r3, r1
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 800297e:	7055      	strb	r5, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8002980:	d1f9      	bne.n	8002976 <Hw_N5110G_Init+0x96>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002982:	6830      	ldr	r0, [r6, #0]
 8002984:	1c83      	adds	r3, r0, #2
 8002986:	6033      	str	r3, [r6, #0]
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
	
	
	Hw_N5110G_Clear();	
	Hw_N5110G_DrawRequest();
}
 8002988:	b003      	add	sp, #12
 800298a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800298c:	08002779 	.word	0x08002779
 8002990:	40010c04 	.word	0x40010c04
 8002994:	40010c0c 	.word	0x40010c0c
 8002998:	08002899 	.word	0x08002899
 800299c:	20000b9c 	.word	0x20000b9c
 80029a0:	08002875 	.word	0x08002875
 80029a4:	080028c1 	.word	0x080028c1
 80029a8:	20000b98 	.word	0x20000b98
 80029ac:	08002825 	.word	0x08002825
 80029b0:	080019fd 	.word	0x080019fd
 80029b4:	08001a19 	.word	0x08001a19
 80029b8:	2000099f 	.word	0x2000099f

080029bc <Hw_N5110G_WriteChar>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteChar( u8 CharData )
{
 80029bc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029c0:	4d49      	ldr	r5, [pc, #292]	; (8002ae8 <Hw_N5110G_WriteChar+0x12c>)
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80029c2:	4b4a      	ldr	r3, [pc, #296]	; (8002aec <Hw_N5110G_WriteChar+0x130>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteChar( u8 CharData )
{
 80029c4:	882e      	ldrh	r6, [r5, #0]
 80029c6:	3820      	subs	r0, #32
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80029c8:	1c72      	adds	r2, r6, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80029ca:	b292      	uxth	r2, r2
 80029cc:	08d4      	lsrs	r4, r2, #3
 80029ce:	fba3 4704 	umull	r4, r7, r3, r4
 80029d2:	08f9      	lsrs	r1, r7, #3
 80029d4:	018c      	lsls	r4, r1, #6
 80029d6:	ebc1 0a04 	rsb	sl, r1, r4
 80029da:	eba2 07ca 	sub.w	r7, r2, sl, lsl #3
 80029de:	b2bf      	uxth	r7, r7
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80029e0:	1c7a      	adds	r2, r7, #1
 80029e2:	b292      	uxth	r2, r2
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80029e4:	08d1      	lsrs	r1, r2, #3
 80029e6:	fba3 8401 	umull	r8, r4, r3, r1
 80029ea:	08e1      	lsrs	r1, r4, #3
 80029ec:	018c      	lsls	r4, r1, #6
 80029ee:	ebc1 0804 	rsb	r8, r1, r4
 80029f2:	eba2 04c8 	sub.w	r4, r2, r8, lsl #3
 80029f6:	b2a4      	uxth	r4, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80029f8:	1c62      	adds	r2, r4, #1
 80029fa:	b292      	uxth	r2, r2
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80029fc:	08d1      	lsrs	r1, r2, #3
 80029fe:	fba3 9101 	umull	r9, r1, r3, r1
 8002a02:	08c9      	lsrs	r1, r1, #3
 8002a04:	ea4f 1b81 	mov.w	fp, r1, lsl #6
 8002a08:	ebc1 090b 	rsb	r9, r1, fp
 8002a0c:	eba2 01c9 	sub.w	r1, r2, r9, lsl #3
 8002a10:	b289      	uxth	r1, r1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002a12:	f101 0c01 	add.w	ip, r1, #1
 8002a16:	fa1f fb8c 	uxth.w	fp, ip
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002a1a:	ea4f 0adb 	mov.w	sl, fp, lsr #3
 8002a1e:	fba3 a20a 	umull	sl, r2, r3, sl
 8002a22:	08d2      	lsrs	r2, r2, #3
 8002a24:	ea4f 1882 	mov.w	r8, r2, lsl #6
 8002a28:	ebc2 0908 	rsb	r9, r2, r8
 8002a2c:	ebab 02c9 	sub.w	r2, fp, r9, lsl #3
 8002a30:	b292      	uxth	r2, r2
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002a32:	f102 0c01 	add.w	ip, r2, #1
 8002a36:	fa1f fc8c 	uxth.w	ip, ip
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002a3a:	ea4f 0adc 	mov.w	sl, ip, lsr #3
 8002a3e:	fba3 9b0a 	umull	r9, fp, r3, sl
 8002a42:	ea4f 08db 	mov.w	r8, fp, lsr #3
 8002a46:	ea4f 1988 	mov.w	r9, r8, lsl #6
 8002a4a:	ebc8 0a09 	rsb	sl, r8, r9
 8002a4e:	ebac 0bca 	sub.w	fp, ip, sl, lsl #3
 8002a52:	fa1f fb8b 	uxth.w	fp, fp
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002a56:	f10b 0c01 	add.w	ip, fp, #1
 8002a5a:	fa1f fc8c 	uxth.w	ip, ip
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002a5e:	ea4f 09dc 	mov.w	r9, ip, lsr #3
 8002a62:	fba3 a809 	umull	sl, r8, r3, r9
	u16 i;
	u8  Ch;
	
	for( i=0; i<6; i++ )
	{
		Ch = Hw_N5110G_Font6_8[CharData-32][i];
 8002a66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a6a:	f8df a088 	ldr.w	sl, [pc, #136]	; 8002af4 <Hw_N5110G_WriteChar+0x138>
 8002a6e:	ea4f 0940 	mov.w	r9, r0, lsl #1
 8002a72:	eb0a 0009 	add.w	r0, sl, r9
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002a76:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8002a7a:	f890 a001 	ldrb.w	sl, [r0, #1]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteChar( u8 CharData )
{
 8002a7e:	b088      	sub	sp, #32
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002a80:	f8cd a004 	str.w	sl, [sp, #4]
 8002a84:	f890 a002 	ldrb.w	sl, [r0, #2]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002a88:	ea4f 08d8 	mov.w	r8, r8, lsr #3
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002a8c:	f8cd a00c 	str.w	sl, [sp, #12]
 8002a90:	f890 a003 	ldrb.w	sl, [r0, #3]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002a94:	ea4f 1388 	mov.w	r3, r8, lsl #6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002a98:	f8cd a010 	str.w	sl, [sp, #16]
 8002a9c:	f890 a004 	ldrb.w	sl, [r0, #4]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002aa0:	9307      	str	r3, [sp, #28]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002aa2:	f8cd a014 	str.w	sl, [sp, #20]
 8002aa6:	f890 a005 	ldrb.w	sl, [r0, #5]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002aaa:	9807      	ldr	r0, [sp, #28]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <Hw_N5110G_WriteChar+0x134>)
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002aae:	ebc8 0000 	rsb	r0, r8, r0
 8002ab2:	ebac 08c0 	sub.w	r8, ip, r0, lsl #3
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002ab6:	f803 9006 	strb.w	r9, [r3, r6]
 8002aba:	f8a5 8000 	strh.w	r8, [r5]
 8002abe:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002ac2:	9d01      	ldr	r5, [sp, #4]
 8002ac4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002ac8:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002acc:	55dd      	strb	r5, [r3, r7]
		Ch = Hw_N5110G_Font6_8[CharData-32][i];
		Ret |= Hw_N5110G_WriteByte(Ch);
	}	
	
	return Ret;
}
 8002ace:	2000      	movs	r0, #0
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002ad0:	f803 8004 	strb.w	r8, [r3, r4]
 8002ad4:	f803 9001 	strb.w	r9, [r3, r1]
 8002ad8:	f803 c002 	strb.w	ip, [r3, r2]
 8002adc:	f803 a00b 	strb.w	sl, [r3, fp]
		Ch = Hw_N5110G_Font6_8[CharData-32][i];
		Ret |= Hw_N5110G_WriteByte(Ch);
	}	
	
	return Ret;
}
 8002ae0:	b008      	add	sp, #32
 8002ae2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ae6:	4770      	bx	lr
 8002ae8:	20000b98 	.word	0x20000b98
 8002aec:	20820821 	.word	0x20820821
 8002af0:	200009a0 	.word	0x200009a0
 8002af4:	20000004 	.word	0x20000004

08002af8 <Hw_N5110G_Clear>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
{
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <Hw_N5110G_Clear+0x20>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8002afa:	2100      	movs	r1, #0
     TITLE   : Hw_N5110G_Clear
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
 8002afc:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8002b00:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8002b02:	7059      	strb	r1, [r3, #1]
     TITLE   : Hw_N5110G_Clear
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
 8002b04:	3302      	adds	r3, #2
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8002b06:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8002b08:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8002b0a:	d1f9      	bne.n	8002b00 <Hw_N5110G_Clear+0x8>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <Hw_N5110G_Clear+0x24>)
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 8002b0e:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	1c51      	adds	r1, r2, #1
 8002b14:	6019      	str	r1, [r3, #0]
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 8002b16:	4770      	bx	lr
 8002b18:	2000099f 	.word	0x2000099f
 8002b1c:	20000b9c 	.word	0x20000b9c

08002b20 <Hw_N5110G_WriteStr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 8002b20:	b570      	push	{r4, r5, r6, lr}
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8002b22:	7803      	ldrb	r3, [r0, #0]
 8002b24:	b163      	cbz	r3, 8002b40 <Hw_N5110G_WriteStr+0x20>
 8002b26:	4e07      	ldr	r6, [pc, #28]	; (8002b44 <Hw_N5110G_WriteStr+0x24>)
 8002b28:	4605      	mov	r5, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
 8002b2a:	2400      	movs	r4, #0
		
	while( *pStr != '\0' )
	{
		Ret |= Hw_N5110G_WriteChar( *pStr );
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	47b0      	blx	r6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8002b30:	f815 3f01 	ldrb.w	r3, [r5, #1]!
	{
		Ret |= Hw_N5110G_WriteChar( *pStr );
 8002b34:	4304      	orrs	r4, r0
 8002b36:	b2a4      	uxth	r4, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f7      	bne.n	8002b2c <Hw_N5110G_WriteStr+0xc>
		Ret |= Hw_N5110G_WriteChar( *pStr );
		pStr++;
	}
		
	return Ret;
}
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
 8002b40:	461c      	mov	r4, r3
 8002b42:	e7fb      	b.n	8002b3c <Hw_N5110G_WriteStr+0x1c>
 8002b44:	080029bd 	.word	0x080029bd

08002b48 <Hw_N5110G_DrawRequest>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002b48:	4b02      	ldr	r3, [pc, #8]	; (8002b54 <Hw_N5110G_DrawRequest+0xc>)
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	1c42      	adds	r2, r0, #1
 8002b4e:	601a      	str	r2, [r3, #0]
}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000b9c 	.word	0x20000b9c

08002b58 <Hw_N5110G_DrawClearRect>:
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawClearRect( u16 s_x, u16 s_y, u16 e_x, u16 e_y )
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
 8002b58:	4290      	cmp	r0, r2
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawClearRect( u16 s_x, u16 s_y, u16 e_x, u16 e_y )
{
 8002b5a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b5e:	4693      	mov	fp, r2
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
 8002b60:	d84d      	bhi.n	8002bfe <Hw_N5110G_DrawClearRect+0xa6>
 8002b62:	4a28      	ldr	r2, [pc, #160]	; (8002c04 <Hw_N5110G_DrawClearRect+0xac>)
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002b64:	f04f 0c54 	mov.w	ip, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b68:	2701      	movs	r7, #1
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b6a:	4299      	cmp	r1, r3
 8002b6c:	d843      	bhi.n	8002bf6 <Hw_N5110G_DrawClearRect+0x9e>
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002b6e:	f001 0807 	and.w	r8, r1, #7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b72:	fa07 f908 	lsl.w	r9, r7, r8
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002b76:	08cd      	lsrs	r5, r1, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002b78:	fb0c 0505 	mla	r5, ip, r5, r0
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b7c:	1c4e      	adds	r6, r1, #1
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b7e:	5d54      	ldrb	r4, [r2, r5]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b80:	b2b6      	uxth	r6, r6
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b82:	ea24 0909 	bic.w	r9, r4, r9
 8002b86:	ebc1 0803 	rsb	r8, r1, r3
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b8a:	42b3      	cmp	r3, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002b8c:	f802 9005 	strb.w	r9, [r2, r5]
 8002b90:	f008 0401 	and.w	r4, r8, #1
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b94:	d32f      	bcc.n	8002bf6 <Hw_N5110G_DrawClearRect+0x9e>
 8002b96:	b17c      	cbz	r4, 8002bb8 <Hw_N5110G_DrawClearRect+0x60>
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002b98:	f006 0507 	and.w	r5, r6, #7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b9c:	fa07 f805 	lsl.w	r8, r7, r5
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002ba0:	08f4      	lsrs	r4, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ba2:	fb0c 0504 	mla	r5, ip, r4, r0
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002ba6:	3601      	adds	r6, #1
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002ba8:	5d54      	ldrb	r4, [r2, r5]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002baa:	b2b6      	uxth	r6, r6
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002bac:	ea24 0808 	bic.w	r8, r4, r8
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002bb0:	42b3      	cmp	r3, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002bb2:	f802 8005 	strb.w	r8, [r2, r5]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002bb6:	d31e      	bcc.n	8002bf6 <Hw_N5110G_DrawClearRect+0x9e>
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002bb8:	f006 0a07 	and.w	sl, r6, #7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002bbc:	fa07 fa0a 	lsl.w	sl, r7, sl
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002bc0:	1c74      	adds	r4, r6, #1
 8002bc2:	b2a4      	uxth	r4, r4
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002bc4:	f004 0807 	and.w	r8, r4, #7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002bc8:	fa07 f808 	lsl.w	r8, r7, r8
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002bcc:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002bce:	fb0c 0606 	mla	r6, ip, r6, r0
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002bd2:	08e5      	lsrs	r5, r4, #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002bd4:	f812 9006 	ldrb.w	r9, [r2, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002bd8:	fb0c 0505 	mla	r5, ip, r5, r0
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002bdc:	ea29 090a 	bic.w	r9, r9, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002be0:	f802 9006 	strb.w	r9, [r2, r6]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002be4:	5d56      	ldrb	r6, [r2, r5]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002be6:	3401      	adds	r4, #1
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002be8:	ea26 0808 	bic.w	r8, r6, r8
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002bec:	b2a6      	uxth	r6, r4
 8002bee:	42b3      	cmp	r3, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002bf0:	f802 8005 	strb.w	r8, [r2, r5]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002bf4:	d2e0      	bcs.n	8002bb8 <Hw_N5110G_DrawClearRect+0x60>
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawClearRect( u16 s_x, u16 s_y, u16 e_x, u16 e_y )
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	b280      	uxth	r0, r0
 8002bfa:	4583      	cmp	fp, r0
 8002bfc:	d2b5      	bcs.n	8002b6a <Hw_N5110G_DrawClearRect+0x12>
		for( j=s_y; j<=e_y; j++ )
		{
			Hw_N5110G_ClrPixel( i, j );
		}
	}
}
 8002bfe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c02:	4770      	bx	lr
 8002c04:	200009a0 	.word	0x200009a0

08002c08 <Hw_N5110G_DrawPrint>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_DrawPrint( u8 x_str, u8 y_str,  char *format, ... )
{
 8002c08:	b40c      	push	{r2, r3}
 8002c0a:	b530      	push	{r4, r5, lr}
 8002c0c:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8002c0e:	aa36      	add	r2, sp, #216	; 0xd8
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_DrawPrint( u8 x_str, u8 y_str,  char *format, ... )
{
 8002c10:	460d      	mov	r5, r1
 8002c12:	4604      	mov	r4, r0
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8002c14:	f852 1b04 	ldr.w	r1, [r2], #4
 8002c18:	4668      	mov	r0, sp
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <Hw_N5110G_DrawPrint+0x40>)
 8002c1c:	4798      	blx	r3

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8002c1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002c22:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8002c26:	4909      	ldr	r1, [pc, #36]	; (8002c4c <Hw_N5110G_DrawPrint+0x44>)
 8002c28:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 8002c2c:	0064      	lsls	r4, r4, #1
 8002c2e:	eb04 0585 	add.w	r5, r4, r5, lsl #2

	Hw_N5110G_WriteStr( Str );		
 8002c32:	4668      	mov	r0, sp

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8002c34:	800d      	strh	r5, [r1, #0]

	Hw_N5110G_WriteStr( Str );		
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <Hw_N5110G_DrawPrint+0x48>)
 8002c38:	4798      	blx	r3
		
	Lb_va_end(ap);		
	
	return Ret;
}
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	b033      	add	sp, #204	; 0xcc
 8002c3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c42:	b002      	add	sp, #8
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	0800100d 	.word	0x0800100d
 8002c4c:	20000b98 	.word	0x20000b98
 8002c50:	08002b21 	.word	0x08002b21

08002c54 <Hw_N5110G_DrawCircle>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8002c54:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8002c58:	0056      	lsls	r6, r2, #1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8002c5a:	b08a      	sub	sp, #40	; 0x28
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8002c5c:	f1c6 0503 	rsb	r5, r6, #3
 8002c60:	b2ac      	uxth	r4, r5
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8002c62:	9104      	str	r1, [sp, #16]
 8002c64:	9305      	str	r3, [sp, #20]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8002c66:	9403      	str	r4, [sp, #12]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8002c68:	9006      	str	r0, [sp, #24]
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];
 8002c6a:	49bd      	ldr	r1, [pc, #756]	; (8002f60 <Hw_N5110G_DrawCircle+0x30c>)
{
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8002c6c:	9d04      	ldr	r5, [sp, #16]
 8002c6e:	4604      	mov	r4, r0
	CurX = 0;
 8002c70:	2300      	movs	r3, #0
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002c72:	2654      	movs	r6, #84	; 0x54
 8002c74:	e0b4      	b.n	8002de0 <Hw_N5110G_DrawCircle+0x18c>
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8002c76:	9f04      	ldr	r7, [sp, #16]
 8002c78:	eb02 0a07 	add.w	sl, r2, r7
 8002c7c:	fa1f fa8a 	uxth.w	sl, sl
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002c80:	f00a 0c07 	and.w	ip, sl, #7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002c84:	2701      	movs	r7, #1
 8002c86:	fa07 fc0c 	lsl.w	ip, r7, ip
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
 8002c8a:	9f04      	ldr	r7, [sp, #16]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002c8c:	fa5f fc8c 	uxtb.w	ip, ip
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
 8002c90:	ebc2 0907 	rsb	r9, r2, r7
 8002c94:	fa1f f989 	uxth.w	r9, r9
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002c98:	f009 0807 	and.w	r8, r9, #7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002c9c:	2701      	movs	r7, #1
 8002c9e:	fa07 fb08 	lsl.w	fp, r7, r8
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002ca2:	f005 0807 	and.w	r8, r5, #7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002ca6:	f8cd b01c 	str.w	fp, [sp, #28]
 8002caa:	fa07 fb08 	lsl.w	fp, r7, r8
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002cae:	9f04      	ldr	r7, [sp, #16]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002cb0:	f8cd b020 	str.w	fp, [sp, #32]
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002cb4:	ebc3 0807 	rsb	r8, r3, r7
 8002cb8:	fa1f fb88 	uxth.w	fp, r8
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002cbc:	f00b 0807 	and.w	r8, fp, #7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002cc0:	2701      	movs	r7, #1
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002cc2:	f8cd b008 	str.w	fp, [sp, #8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002cc6:	fa07 fb08 	lsl.w	fp, r7, r8
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002cca:	ea4f 08da 	mov.w	r8, sl, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002cce:	fb06 f808 	mul.w	r8, r6, r8
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002cd2:	ea4f 0ad9 	mov.w	sl, r9, lsr #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002cd6:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002cda:	fb06 fb0a 	mul.w	fp, r6, sl
 8002cde:	eb08 0900 	add.w	r9, r8, r0
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002ce2:	f811 7009 	ldrb.w	r7, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ce6:	f8cd b004 	str.w	fp, [sp, #4]
 8002cea:	f8dd b004 	ldr.w	fp, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002cee:	ea47 0a0c 	orr.w	sl, r7, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002cf2:	f801 a009 	strb.w	sl, [r1, r9]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002cf6:	9f07      	ldr	r7, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002cf8:	eb0b 0900 	add.w	r9, fp, r0
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002cfc:	f811 a009 	ldrb.w	sl, [r1, r9]
 8002d00:	fa5f fb87 	uxtb.w	fp, r7
 8002d04:	ea4a 0a0b 	orr.w	sl, sl, fp
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002d08:	f801 a009 	strb.w	sl, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d0c:	44a0      	add	r8, r4
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d0e:	f811 9008 	ldrb.w	r9, [r1, r8]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002d12:	ea4f 0ad5 	mov.w	sl, r5, lsr #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d16:	ea49 0c0c 	orr.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002d1a:	f801 c008 	strb.w	ip, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d1e:	fb06 f80a 	mul.w	r8, r6, sl
 8002d22:	9f01      	ldr	r7, [sp, #4]
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 8002d24:	f8dd a018 	ldr.w	sl, [sp, #24]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d28:	eb07 0c04 	add.w	ip, r7, r4
 8002d2c:	f8cd 8004 	str.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002d30:	9f02      	ldr	r7, [sp, #8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d32:	f811 800c 	ldrb.w	r8, [r1, ip]
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 8002d36:	eb02 090a 	add.w	r9, r2, sl
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d3a:	ea48 0b0b 	orr.w	fp, r8, fp
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002d3e:	ea4f 08d7 	mov.w	r8, r7, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d42:	9f01      	ldr	r7, [sp, #4]
 8002d44:	fa1f f989 	uxth.w	r9, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002d48:	f801 b00c 	strb.w	fp, [r1, ip]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d4c:	fb06 f808 	mul.w	r8, r6, r8
 8002d50:	eb07 0b09 	add.w	fp, r7, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d54:	9f08      	ldr	r7, [sp, #32]
 8002d56:	f811 a00b 	ldrb.w	sl, [r1, fp]
 8002d5a:	b2ff      	uxtb	r7, r7
 8002d5c:	ea4a 0c07 	orr.w	ip, sl, r7
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002d60:	f801 c00b 	strb.w	ip, [r1, fp]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d64:	44c1      	add	r9, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d66:	9702      	str	r7, [sp, #8]
 8002d68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002d6a:	f811 a009 	ldrb.w	sl, [r1, r9]
 8002d6e:	fa5f fb87 	uxtb.w	fp, r7
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 8002d72:	9f06      	ldr	r7, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d74:	ea4a 0c0b 	orr.w	ip, sl, fp
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002d78:	f801 c009 	strb.w	ip, [r1, r9]
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 8002d7c:	1abf      	subs	r7, r7, r2
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002d7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002d82:	b2bf      	uxth	r7, r7
 8002d84:	44b9      	add	r9, r7
 8002d86:	eb08 0c07 	add.w	ip, r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d8a:	f811 a009 	ldrb.w	sl, [r1, r9]
 8002d8e:	9f02      	ldr	r7, [sp, #8]
 8002d90:	ea4a 0a07 	orr.w	sl, sl, r7
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002d94:	f801 a009 	strb.w	sl, [r1, r9]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d98:	f811 800c 	ldrb.w	r8, [r1, ip]
 8002d9c:	ea48 0b0b 	orr.w	fp, r8, fp
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002da0:	f801 b00c 	strb.w	fp, [r1, ip]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002da4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8002da8:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
 8002dac:	f040 80c0 	bne.w	8002f30 <Hw_N5110G_DrawCircle+0x2dc>
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8002db0:	9f03      	ldr	r7, [sp, #12]
 8002db2:	ebc2 0803 	rsb	r8, r2, r3
 8002db6:	f107 0c0a 	add.w	ip, r7, #10
			CurY--;
 8002dba:	3a01      	subs	r2, #1
		}
		CurX++;
 8002dbc:	3301      	adds	r3, #1
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8002dbe:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
			CurY--;
 8002dc2:	b292      	uxth	r2, r2
		}
		CurX++;
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3001      	adds	r0, #1
 8002dc8:	3c01      	subs	r4, #1
 8002dca:	3501      	adds	r5, #1
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8002dcc:	fa1f fc8c 	uxth.w	ip, ip
  
	D    = 3 - (Radius << 1);
	CurX = 0;
	CurY = Radius;
	
	while (CurX <= CurY)
 8002dd0:	429a      	cmp	r2, r3
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8002dd2:	f8cd c00c 	str.w	ip, [sp, #12]
			CurY--;
		}
		CurX++;
 8002dd6:	b280      	uxth	r0, r0
 8002dd8:	b2a4      	uxth	r4, r4
 8002dda:	b2ad      	uxth	r5, r5
  
	D    = 3 - (Radius << 1);
	CurX = 0;
	CurY = Radius;
	
	while (CurX <= CurY)
 8002ddc:	f0c0 80bb 	bcc.w	8002f56 <Hw_N5110G_DrawCircle+0x302>
	{
		if( Mode == 0 )
 8002de0:	9f05      	ldr	r7, [sp, #20]
 8002de2:	2f00      	cmp	r7, #0
 8002de4:	f43f af47 	beq.w	8002c76 <Hw_N5110G_DrawCircle+0x22>
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
 8002de8:	9f05      	ldr	r7, [sp, #20]
 8002dea:	2f01      	cmp	r7, #1
 8002dec:	f000 80ba 	beq.w	8002f64 <Hw_N5110G_DrawCircle+0x310>
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
 8002df0:	9f05      	ldr	r7, [sp, #20]
 8002df2:	2f02      	cmp	r7, #2
 8002df4:	d1d6      	bne.n	8002da4 <Hw_N5110G_DrawCircle+0x150>
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8002df6:	9f04      	ldr	r7, [sp, #16]
 8002df8:	eb02 0a07 	add.w	sl, r2, r7
 8002dfc:	fa1f fa8a 	uxth.w	sl, sl
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e00:	2701      	movs	r7, #1
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002e02:	f00a 0c07 	and.w	ip, sl, #7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e06:	fa07 fc0c 	lsl.w	ip, r7, ip
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
 8002e0a:	9f04      	ldr	r7, [sp, #16]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e0c:	fa5f fc8c 	uxtb.w	ip, ip
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
 8002e10:	ebc2 0907 	rsb	r9, r2, r7
 8002e14:	fa1f f989 	uxth.w	r9, r9
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e18:	2701      	movs	r7, #1
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002e1a:	f009 0807 	and.w	r8, r9, #7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e1e:	fa07 fb08 	lsl.w	fp, r7, r8
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002e22:	f005 0807 	and.w	r8, r5, #7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e26:	f8cd b01c 	str.w	fp, [sp, #28]
 8002e2a:	fa07 fb08 	lsl.w	fp, r7, r8
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002e2e:	9f04      	ldr	r7, [sp, #16]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e30:	f8cd b020 	str.w	fp, [sp, #32]
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002e34:	ebc3 0807 	rsb	r8, r3, r7
 8002e38:	fa1f fb88 	uxth.w	fp, r8
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e3c:	2701      	movs	r7, #1
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002e3e:	f00b 0807 	and.w	r8, fp, #7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002e42:	f8cd b004 	str.w	fp, [sp, #4]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e46:	fa07 fb08 	lsl.w	fp, r7, r8
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002e4a:	ea4f 08da 	mov.w	r8, sl, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e4e:	fb06 f808 	mul.w	r8, r6, r8
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002e52:	ea4f 0ad9 	mov.w	sl, r9, lsr #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e56:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e5a:	fb06 fb0a 	mul.w	fp, r6, sl
 8002e5e:	eb08 0900 	add.w	r9, r8, r0
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e62:	f811 7009 	ldrb.w	r7, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e66:	f8cd b008 	str.w	fp, [sp, #8]
 8002e6a:	f8dd b008 	ldr.w	fp, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e6e:	ea87 0a0c 	eor.w	sl, r7, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002e72:	f801 a009 	strb.w	sl, [r1, r9]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e76:	9f07      	ldr	r7, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e78:	eb0b 0900 	add.w	r9, fp, r0
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e7c:	f811 a009 	ldrb.w	sl, [r1, r9]
 8002e80:	fa5f fb87 	uxtb.w	fp, r7
 8002e84:	ea8a 0a0b 	eor.w	sl, sl, fp
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002e88:	f801 a009 	strb.w	sl, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e8c:	44a0      	add	r8, r4
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e8e:	f811 9008 	ldrb.w	r9, [r1, r8]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002e92:	ea4f 0ad5 	mov.w	sl, r5, lsr #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e96:	ea89 0c0c 	eor.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002e9a:	f801 c008 	strb.w	ip, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e9e:	fb06 f80a 	mul.w	r8, r6, sl
 8002ea2:	9f02      	ldr	r7, [sp, #8]
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 8002ea4:	f8dd a018 	ldr.w	sl, [sp, #24]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ea8:	eb07 0c04 	add.w	ip, r7, r4
 8002eac:	f8cd 8008 	str.w	r8, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002eb0:	9f01      	ldr	r7, [sp, #4]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002eb2:	f811 800c 	ldrb.w	r8, [r1, ip]
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 8002eb6:	eb02 090a 	add.w	r9, r2, sl
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002eba:	ea88 0b0b 	eor.w	fp, r8, fp
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002ebe:	ea4f 08d7 	mov.w	r8, r7, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ec2:	9f02      	ldr	r7, [sp, #8]
 8002ec4:	fa1f f989 	uxth.w	r9, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002ec8:	f801 b00c 	strb.w	fp, [r1, ip]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ecc:	fb06 f808 	mul.w	r8, r6, r8
 8002ed0:	eb07 0b09 	add.w	fp, r7, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002ed4:	9f08      	ldr	r7, [sp, #32]
 8002ed6:	f811 a00b 	ldrb.w	sl, [r1, fp]
 8002eda:	b2ff      	uxtb	r7, r7
 8002edc:	ea8a 0c07 	eor.w	ip, sl, r7
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002ee0:	f801 c00b 	strb.w	ip, [r1, fp]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ee4:	44c1      	add	r9, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002ee6:	9701      	str	r7, [sp, #4]
 8002ee8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002eea:	f811 a009 	ldrb.w	sl, [r1, r9]
 8002eee:	fa5f fb87 	uxtb.w	fp, r7
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 8002ef2:	9f06      	ldr	r7, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002ef4:	ea8a 0c0b 	eor.w	ip, sl, fp
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002ef8:	f801 c009 	strb.w	ip, [r1, r9]
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 8002efc:	1abf      	subs	r7, r7, r2
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002efe:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002f02:	b2bf      	uxth	r7, r7
 8002f04:	44b9      	add	r9, r7
 8002f06:	eb08 0c07 	add.w	ip, r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002f0a:	f811 a009 	ldrb.w	sl, [r1, r9]
 8002f0e:	9f01      	ldr	r7, [sp, #4]
 8002f10:	ea8a 0807 	eor.w	r8, sl, r7
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f14:	f801 8009 	strb.w	r8, [r1, r9]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002f18:	f811 800c 	ldrb.w	r8, [r1, ip]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002f1c:	f8dd a00c 	ldr.w	sl, [sp, #12]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002f20:	ea88 0b0b 	eor.w	fp, r8, fp
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002f24:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f28:	f801 b00c 	strb.w	fp, [r1, ip]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002f2c:	f43f af40 	beq.w	8002db0 <Hw_N5110G_DrawCircle+0x15c>
		{ 
			D += (CurX << 2) + 6;
 8002f30:	eb0a 0c83 	add.w	ip, sl, r3, lsl #2
		else
		{
			D += ((CurX - CurY) << 2) + 10;
			CurY--;
		}
		CurX++;
 8002f34:	3301      	adds	r3, #1
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
		{ 
			D += (CurX << 2) + 6;
 8002f36:	f10c 0c06 	add.w	ip, ip, #6
		else
		{
			D += ((CurX - CurY) << 2) + 10;
			CurY--;
		}
		CurX++;
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	3c01      	subs	r4, #1
 8002f40:	3501      	adds	r5, #1
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
		{ 
			D += (CurX << 2) + 6;
 8002f42:	fa1f fc8c 	uxth.w	ip, ip
  
	D    = 3 - (Radius << 1);
	CurX = 0;
	CurY = Radius;
	
	while (CurX <= CurY)
 8002f46:	429a      	cmp	r2, r3
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
		{ 
			D += (CurX << 2) + 6;
 8002f48:	f8cd c00c 	str.w	ip, [sp, #12]
		else
		{
			D += ((CurX - CurY) << 2) + 10;
			CurY--;
		}
		CurX++;
 8002f4c:	b280      	uxth	r0, r0
 8002f4e:	b2a4      	uxth	r4, r4
 8002f50:	b2ad      	uxth	r5, r5
  
	D    = 3 - (Radius << 1);
	CurX = 0;
	CurY = Radius;
	
	while (CurX <= CurY)
 8002f52:	f4bf af45 	bcs.w	8002de0 <Hw_N5110G_DrawCircle+0x18c>
			D += ((CurX - CurY) << 2) + 10;
			CurY--;
		}
		CurX++;
	}
}
 8002f56:	b00a      	add	sp, #40	; 0x28
 8002f58:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	200009a0 	.word	0x200009a0
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 8002f64:	f8dd a010 	ldr.w	sl, [sp, #16]
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 8002f68:	ebc2 0b0a 	rsb	fp, r2, sl
 8002f6c:	fa1f fb8b 	uxth.w	fp, fp
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002f70:	f00b 0807 	and.w	r8, fp, #7
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 8002f74:	eb02 090a 	add.w	r9, r2, sl
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f78:	fa07 fa08 	lsl.w	sl, r7, r8
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002f7c:	f005 0807 	and.w	r8, r5, #7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f80:	f8cd a004 	str.w	sl, [sp, #4]
 8002f84:	fa07 fa08 	lsl.w	sl, r7, r8
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 8002f88:	fa1f f989 	uxth.w	r9, r9
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002f8c:	f009 0c07 	and.w	ip, r9, #7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f90:	fa07 fc0c 	lsl.w	ip, r7, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f94:	9f04      	ldr	r7, [sp, #16]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f96:	f8cd a020 	str.w	sl, [sp, #32]
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f9a:	ebc3 0807 	rsb	r8, r3, r7
 8002f9e:	fa1f fa88 	uxth.w	sl, r8
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002fa2:	9f05      	ldr	r7, [sp, #20]
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
 8002fa4:	f00a 0807 	and.w	r8, sl, #7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002fa8:	f8cd a01c 	str.w	sl, [sp, #28]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002fac:	fa07 fa08 	lsl.w	sl, r7, r8
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002fb0:	ea4f 08d9 	mov.w	r8, r9, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002fb4:	fb06 f808 	mul.w	r8, r6, r8
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002fb8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002fbc:	eb08 0900 	add.w	r9, r8, r0
 8002fc0:	fb06 fb0b 	mul.w	fp, r6, fp
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002fc4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8002fc8:	ea6f 0c0c 	mvn.w	ip, ip
 8002fcc:	f811 a009 	ldrb.w	sl, [r1, r9]
 8002fd0:	fa5f fc8c 	uxtb.w	ip, ip
 8002fd4:	ea0a 070c 	and.w	r7, sl, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002fd8:	f801 7009 	strb.w	r7, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002fdc:	eb0b 0900 	add.w	r9, fp, r0
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002fe0:	f811 a009 	ldrb.w	sl, [r1, r9]
 8002fe4:	9f01      	ldr	r7, [sp, #4]
 8002fe6:	f8cd a008 	str.w	sl, [sp, #8]
 8002fea:	ea6f 0a07 	mvn.w	sl, r7
 8002fee:	9f02      	ldr	r7, [sp, #8]
 8002ff0:	fa5f fa8a 	uxtb.w	sl, sl
 8002ff4:	f8cd a004 	str.w	sl, [sp, #4]
 8002ff8:	ea07 0a0a 	and.w	sl, r7, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002ffc:	f801 a009 	strb.w	sl, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003000:	eb08 0704 	add.w	r7, r8, r4
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003004:	f811 9007 	ldrb.w	r9, [r1, r7]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8003008:	ea4f 0ad5 	mov.w	sl, r5, lsr #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800300c:	ea09 0c0c 	and.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003010:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003014:	fb06 f80a 	mul.w	r8, r6, sl
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 8003018:	9f06      	ldr	r7, [sp, #24]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800301a:	44a3      	add	fp, r4
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800301c:	f811 a00b 	ldrb.w	sl, [r1, fp]
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 8003020:	eb02 0907 	add.w	r9, r2, r7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003024:	9f01      	ldr	r7, [sp, #4]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003026:	f8cd 8008 	str.w	r8, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800302a:	ea0a 0c07 	and.w	ip, sl, r7
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800302e:	9f07      	ldr	r7, [sp, #28]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003030:	f801 c00b 	strb.w	ip, [r1, fp]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003034:	f8dd b008 	ldr.w	fp, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8003038:	ea4f 08d7 	mov.w	r8, r7, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800303c:	fa1f f989 	uxth.w	r9, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003040:	9f08      	ldr	r7, [sp, #32]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003042:	eb0b 0c09 	add.w	ip, fp, r9
 8003046:	fb06 fb08 	mul.w	fp, r6, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800304a:	43ff      	mvns	r7, r7
 800304c:	f811 800c 	ldrb.w	r8, [r1, ip]
 8003050:	fa5f fa87 	uxtb.w	sl, r7
 8003054:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003056:	f8cd a004 	str.w	sl, [sp, #4]
 800305a:	ea08 0a0a 	and.w	sl, r8, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800305e:	f801 a00c 	strb.w	sl, [r1, ip]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003062:	44d9      	add	r9, fp
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003064:	ea6f 0807 	mvn.w	r8, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 8003068:	9f06      	ldr	r7, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800306a:	f811 a009 	ldrb.w	sl, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800306e:	f8dd c008 	ldr.w	ip, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003072:	fa5f f888 	uxtb.w	r8, r8
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 8003076:	1abf      	subs	r7, r7, r2
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003078:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800307a:	ea0a 0a08 	and.w	sl, sl, r8
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800307e:	f801 a009 	strb.w	sl, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003082:	eb0c 0907 	add.w	r9, ip, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003086:	f811 a009 	ldrb.w	sl, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800308a:	eb0b 0c07 	add.w	ip, fp, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800308e:	9f01      	ldr	r7, [sp, #4]
 8003090:	ea0a 0a07 	and.w	sl, sl, r7
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003094:	f801 a009 	strb.w	sl, [r1, r9]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003098:	f811 900c 	ldrb.w	r9, [r1, ip]
 800309c:	ea09 0808 	and.w	r8, r9, r8
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80030a0:	f801 800c 	strb.w	r8, [r1, ip]
 80030a4:	e67e      	b.n	8002da4 <Hw_N5110G_DrawCircle+0x150>
 80030a6:	bf00      	nop

080030a8 <Hw_DMA_Init>:
void Hw_DMA_Init(void)
{
	static u8 Called = 0;


	if( Called == 1 ) return;
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <Hw_DMA_Init+0x18>)
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	2a01      	cmp	r2, #1
 80030ae:	d006      	beq.n	80030be <Hw_DMA_Init+0x16>


	// 1. Clock Enable
	//
	REG_RCC_AHBENR |= (1<<0);		// DMA1 Clock enable
 80030b0:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <Hw_DMA_Init+0x1c>)
	

	Called = 1;	
 80030b2:	2001      	movs	r0, #1
	if( Called == 1 ) return;


	// 1. Clock Enable
	//
	REG_RCC_AHBENR |= (1<<0);		// DMA1 Clock enable
 80030b4:	6811      	ldr	r1, [r2, #0]
	

	Called = 1;	
 80030b6:	7018      	strb	r0, [r3, #0]
	if( Called == 1 ) return;


	// 1. Clock Enable
	//
	REG_RCC_AHBENR |= (1<<0);		// DMA1 Clock enable
 80030b8:	ea41 0300 	orr.w	r3, r1, r0
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4770      	bx	lr
 80030c0:	20000489 	.word	0x20000489
 80030c4:	40021014 	.word	0x40021014

080030c8 <Hw_DMA_SPI2_Setup>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
 80030c8:	b470      	push	{r4, r5, r6}
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <Hw_DMA_SPI2_Setup+0x3c>)
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 80030cc:	4e0e      	ldr	r6, [pc, #56]	; (8003108 <Hw_DMA_SPI2_Setup+0x40>)
 80030ce:	4c0f      	ldr	r4, [pc, #60]	; (800310c <Hw_DMA_SPI2_Setup+0x44>)
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 80030d0:	2500      	movs	r5, #0
 80030d2:	601d      	str	r5, [r3, #0]
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 80030d4:	6034      	str	r4, [r6, #0]
	REG_DMA1_CMAR(4)  = ReadAddress;
 80030d6:	6071      	str	r1, [r6, #4]
	REG_DMA1_CNDTR(4) = BufSize;
 80030d8:	4e0d      	ldr	r6, [pc, #52]	; (8003110 <Hw_DMA_SPI2_Setup+0x48>)
	
	
	
	REG_DMA1_CCR(4) = 0
 80030da:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 80030de:	6032      	str	r2, [r6, #0]
	
	
	
	REG_DMA1_CCR(4) = 0
 80030e0:	6019      	str	r1, [r3, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 80030e2:	681e      	ldr	r6, [r3, #0]
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 80030e4:	490b      	ldr	r1, [pc, #44]	; (8003114 <Hw_DMA_SPI2_Setup+0x4c>)
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 80030e6:	f046 0601 	orr.w	r6, r6, #1
 80030ea:	601e      	str	r6, [r3, #0]
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 80030ec:	600d      	str	r5, [r1, #0]
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 80030ee:	61dc      	str	r4, [r3, #28]
	REG_DMA1_CMAR(5)  = WriteAddress;
 80030f0:	6218      	str	r0, [r3, #32]
	REG_DMA1_CNDTR(5) = BufSize;
 80030f2:	619a      	str	r2, [r3, #24]
	
	
	
	REG_DMA1_CCR(5) = 0
 80030f4:	2290      	movs	r2, #144	; 0x90
 80030f6:	600a      	str	r2, [r1, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(5) |= (1<<0);	// Channel enable
 80030f8:	6808      	ldr	r0, [r1, #0]
 80030fa:	f040 0301 	orr.w	r3, r0, #1
 80030fe:	600b      	str	r3, [r1, #0]
}
 8003100:	bc70      	pop	{r4, r5, r6}
 8003102:	4770      	bx	lr
 8003104:	40020044 	.word	0x40020044
 8003108:	4002004c 	.word	0x4002004c
 800310c:	4000380c 	.word	0x4000380c
 8003110:	40020048 	.word	0x40020048
 8003114:	40020058 	.word	0x40020058

08003118 <Hw_DMA_SPI2_IsTransFinished>:
---------------------------------------------------------------------------*/
u8 Hw_DMA_SPI2_IsTransFinished( void )
{
	u8 Ret = 0;
	
	if( REG_DMA1_ISR & (1<<13) )
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <Hw_DMA_SPI2_IsTransFinished+0x1c>)
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8003120:	d007      	beq.n	8003132 <Hw_DMA_SPI2_IsTransFinished+0x1a>
	{
		if( REG_DMA1_ISR & (1<<17) )
 8003122:	6819      	ldr	r1, [r3, #0]
 8003124:	f411 3000 	ands.w	r0, r1, #131072	; 0x20000
 8003128:	d003      	beq.n	8003132 <Hw_DMA_SPI2_IsTransFinished+0x1a>
		{
			REG_DMA1_IFCR = (1<<17) | (1<<13);
 800312a:	f44f 3208 	mov.w	r2, #139264	; 0x22000
 800312e:	605a      	str	r2, [r3, #4]
			Ret = 1;
 8003130:	2001      	movs	r0, #1
		}
	}
	return Ret;
 8003132:	4770      	bx	lr
 8003134:	40020000 	.word	0x40020000

08003138 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8003138:	b510      	push	{r4, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 800313a:	4b16      	ldr	r3, [pc, #88]	; (8003194 <EP1_IN_Callback+0x5c>)
 800313c:	781a      	ldrb	r2, [r3, #0]
 800313e:	2a01      	cmp	r2, #1
 8003140:	d000      	beq.n	8003144 <EP1_IN_Callback+0xc>
 8003142:	bd10      	pop	{r4, pc}
  {
    if (USART_Rx_length == 0) 
 8003144:	4914      	ldr	r1, [pc, #80]	; (8003198 <EP1_IN_Callback+0x60>)
 8003146:	680a      	ldr	r2, [r1, #0]
 8003148:	b30a      	cbz	r2, 800318e <EP1_IN_Callback+0x56>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800314a:	2a40      	cmp	r2, #64	; 0x40
 800314c:	d815      	bhi.n	800317a <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 800314e:	4813      	ldr	r0, [pc, #76]	; (800319c <EP1_IN_Callback+0x64>)
        USB_Tx_length = USART_Rx_length;
 8003150:	b294      	uxth	r4, r2
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8003152:	6803      	ldr	r3, [r0, #0]
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
 8003154:	189a      	adds	r2, r3, r2
 8003156:	6002      	str	r2, [r0, #0]
        USART_Rx_length = 0;
 8003158:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 800315a:	b29b      	uxth	r3, r3
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 800315c:	600a      	str	r2, [r1, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800315e:	4810      	ldr	r0, [pc, #64]	; (80031a0 <EP1_IN_Callback+0x68>)
 8003160:	21c0      	movs	r1, #192	; 0xc0
 8003162:	18c0      	adds	r0, r0, r3
 8003164:	4622      	mov	r2, r4
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <EP1_IN_Callback+0x6c>)
 8003168:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 800316a:	2001      	movs	r0, #1
 800316c:	4621      	mov	r1, r4
 800316e:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <EP1_IN_Callback+0x70>)
 8003170:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 8003172:	2001      	movs	r0, #1
 8003174:	490d      	ldr	r1, [pc, #52]	; (80031ac <EP1_IN_Callback+0x74>)
 8003176:	4788      	blx	r1
 8003178:	bd10      	pop	{r4, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 800317a:	4808      	ldr	r0, [pc, #32]	; (800319c <EP1_IN_Callback+0x64>)
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 800317c:	3a40      	subs	r2, #64	; 0x40
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 800317e:	6803      	ldr	r3, [r0, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8003180:	600a      	str	r2, [r1, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8003182:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003186:	6001      	str	r1, [r0, #0]
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8003188:	b29b      	uxth	r3, r3
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800318a:	2440      	movs	r4, #64	; 0x40
 800318c:	e7e7      	b.n	800315e <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	bd10      	pop	{r4, pc}
 8003192:	bf00      	nop
 8003194:	200004ac 	.word	0x200004ac
 8003198:	200004b8 	.word	0x200004b8
 800319c:	200004b4 	.word	0x200004b4
 80031a0:	20000e00 	.word	0x20000e00
 80031a4:	080046bd 	.word	0x080046bd
 80031a8:	08004969 	.word	0x08004969
 80031ac:	08004825 	.word	0x08004825

080031b0 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 80031b0:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 80031b2:	4c06      	ldr	r4, [pc, #24]	; (80031cc <EP3_OUT_Callback+0x1c>)
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <EP3_OUT_Callback+0x20>)
 80031b6:	4621      	mov	r1, r4
 80031b8:	2003      	movs	r0, #3
 80031ba:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 80031bc:	4a05      	ldr	r2, [pc, #20]	; (80031d4 <EP3_OUT_Callback+0x24>)
 80031be:	b2c1      	uxtb	r1, r0
 80031c0:	4620      	mov	r0, r4
 80031c2:	4790      	blx	r2
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 80031c4:	2003      	movs	r0, #3
 80031c6:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <EP3_OUT_Callback+0x28>)
 80031c8:	4798      	blx	r3
}
 80031ca:	bd10      	pop	{r4, pc}
 80031cc:	20000d98 	.word	0x20000d98
 80031d0:	08004a21 	.word	0x08004a21
 80031d4:	08003aa5 	.word	0x08003aa5
 80031d8:	08004849 	.word	0x08004849

080031dc <SOF_Callback>:
*******************************************************************************/
void SOF_Callback(void)
{
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 80031dc:	4808      	ldr	r0, [pc, #32]	; (8003200 <SOF_Callback+0x24>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 80031de:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 80031e0:	6803      	ldr	r3, [r0, #0]
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	d000      	beq.n	80031e8 <SOF_Callback+0xc>
 80031e6:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <SOF_Callback+0x28>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	1c51      	adds	r1, r2, #1
 80031ee:	2a05      	cmp	r2, #5
 80031f0:	6019      	str	r1, [r3, #0]
 80031f2:	d1f8      	bne.n	80031e6 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 80031f4:	2000      	movs	r0, #0
 80031f6:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <SOF_Callback+0x2c>)
 80031fa:	4798      	blx	r3
 80031fc:	e7f3      	b.n	80031e6 <SOF_Callback+0xa>
 80031fe:	bf00      	nop
 8003200:	200004a0 	.word	0x200004a0
 8003204:	2000048c 	.word	0x2000048c
 8003208:	08003b1d 	.word	0x08003b1d

0800320c <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800320c:	4a6f      	ldr	r2, [pc, #444]	; (80033cc <USB_Istr+0x1c0>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800320e:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8003210:	6813      	ldr	r3, [r2, #0]
 8003212:	4c6f      	ldr	r4, [pc, #444]	; (80033d0 <USB_Istr+0x1c4>)

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8003214:	4d6f      	ldr	r5, [pc, #444]	; (80033d4 <USB_Istr+0x1c8>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8003216:	8023      	strh	r3, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8003218:	8820      	ldrh	r0, [r4, #0]
 800321a:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800321c:	b089      	sub	sp, #36	; 0x24
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800321e:	ea03 0100 	and.w	r1, r3, r0
 8003222:	f411 7f00 	tst.w	r1, #512	; 0x200
 8003226:	d15d      	bne.n	80032e4 <USB_Istr+0xd8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8003228:	8822      	ldrh	r2, [r4, #0]
 800322a:	f402 4c00 	and.w	ip, r2, #32768	; 0x8000
 800322e:	ea1c 0f03 	tst.w	ip, r3
 8003232:	d153      	bne.n	80032dc <USB_Istr+0xd0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8003234:	f8b4 c000 	ldrh.w	ip, [r4]
 8003238:	f40c 6180 	and.w	r1, ip, #1024	; 0x400
 800323c:	4219      	tst	r1, r3
 800323e:	d144      	bne.n	80032ca <USB_Istr+0xbe>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8003240:	8822      	ldrh	r2, [r4, #0]
 8003242:	f402 5c00 	and.w	ip, r2, #8192	; 0x2000
 8003246:	ea1c 0f03 	tst.w	ip, r3
 800324a:	d003      	beq.n	8003254 <USB_Istr+0x48>
  {
    _SetISTR((uint16_t)CLR_ERR);
 800324c:	495f      	ldr	r1, [pc, #380]	; (80033cc <USB_Istr+0x1c0>)
 800324e:	f64d 70ff 	movw	r0, #57343	; 0xdfff
 8003252:	6008      	str	r0, [r1, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8003254:	8822      	ldrh	r2, [r4, #0]
 8003256:	f402 5c80 	and.w	ip, r2, #4096	; 0x1000
 800325a:	ea1c 0f03 	tst.w	ip, r3
 800325e:	d12b      	bne.n	80032b8 <USB_Istr+0xac>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8003260:	f8b4 c000 	ldrh.w	ip, [r4]
 8003264:	f40c 6000 	and.w	r0, ip, #2048	; 0x800
 8003268:	4218      	tst	r0, r3
 800326a:	d00b      	beq.n	8003284 <USB_Istr+0x78>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 800326c:	495a      	ldr	r1, [pc, #360]	; (80033d8 <USB_Istr+0x1cc>)
 800326e:	780b      	ldrb	r3, [r1, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d11e      	bne.n	80032b2 <USB_Istr+0xa6>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8003274:	2002      	movs	r0, #2
 8003276:	4b59      	ldr	r3, [pc, #356]	; (80033dc <USB_Istr+0x1d0>)
 8003278:	4798      	blx	r3
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 800327a:	4954      	ldr	r1, [pc, #336]	; (80033cc <USB_Istr+0x1c0>)
 800327c:	f24f 70ff 	movw	r0, #63487	; 0xf7ff
 8003280:	882b      	ldrh	r3, [r5, #0]
 8003282:	6008      	str	r0, [r1, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8003284:	8822      	ldrh	r2, [r4, #0]
 8003286:	f402 7c80 	and.w	ip, r2, #256	; 0x100
 800328a:	ea1c 0f03 	tst.w	ip, r3
 800328e:	d00e      	beq.n	80032ae <USB_Istr+0xa2>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8003290:	4b4e      	ldr	r3, [pc, #312]	; (80033cc <USB_Istr+0x1c0>)
 8003292:	f64f 62ff 	movw	r2, #65279	; 0xfeff
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8003296:	4952      	ldr	r1, [pc, #328]	; (80033e0 <USB_Istr+0x1d4>)

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8003298:	601a      	str	r2, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 800329a:	6808      	ldr	r0, [r1, #0]
 800329c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80032a0:	d12b      	bne.n	80032fa <USB_Istr+0xee>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 80032a2:	4850      	ldr	r0, [pc, #320]	; (80033e4 <USB_Istr+0x1d8>)
 80032a4:	2100      	movs	r1, #0
 80032a6:	6001      	str	r1, [r0, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 80032a8:	2007      	movs	r0, #7
 80032aa:	4b4c      	ldr	r3, [pc, #304]	; (80033dc <USB_Istr+0x1d0>)
 80032ac:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 80032ae:	b009      	add	sp, #36	; 0x24
 80032b0:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 80032b2:	4a4d      	ldr	r2, [pc, #308]	; (80033e8 <USB_Istr+0x1dc>)
 80032b4:	4790      	blx	r2
 80032b6:	e7e0      	b.n	800327a <USB_Istr+0x6e>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 80032b8:	4a44      	ldr	r2, [pc, #272]	; (80033cc <USB_Istr+0x1c0>)
 80032ba:	f64e 71ff 	movw	r1, #61439	; 0xefff
    Resume(RESUME_EXTERNAL);
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <USB_Istr+0x1d0>)
 80032c0:	2000      	movs	r0, #0
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 80032c2:	6011      	str	r1, [r2, #0]
    Resume(RESUME_EXTERNAL);
 80032c4:	4798      	blx	r3
 80032c6:	882b      	ldrh	r3, [r5, #0]
 80032c8:	e7ca      	b.n	8003260 <USB_Istr+0x54>
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 80032ca:	4940      	ldr	r1, [pc, #256]	; (80033cc <USB_Istr+0x1c0>)
    Device_Property.Reset();
 80032cc:	4a47      	ldr	r2, [pc, #284]	; (80033ec <USB_Istr+0x1e0>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 80032ce:	f64f 30ff 	movw	r0, #64511	; 0xfbff
    Device_Property.Reset();
 80032d2:	6853      	ldr	r3, [r2, #4]
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 80032d4:	6008      	str	r0, [r1, #0]
    Device_Property.Reset();
 80032d6:	4798      	blx	r3
 80032d8:	882b      	ldrh	r3, [r5, #0]
 80032da:	e7b1      	b.n	8003240 <USB_Istr+0x34>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 80032dc:	4844      	ldr	r0, [pc, #272]	; (80033f0 <USB_Istr+0x1e4>)
 80032de:	4780      	blx	r0
 80032e0:	882b      	ldrh	r3, [r5, #0]
 80032e2:	e7a7      	b.n	8003234 <USB_Istr+0x28>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 80032e4:	4843      	ldr	r0, [pc, #268]	; (80033f4 <USB_Istr+0x1e8>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 80032e6:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 80032ea:	6011      	str	r1, [r2, #0]
    bIntPackSOF++;
 80032ec:	7803      	ldrb	r3, [r0, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 80032ee:	4a42      	ldr	r2, [pc, #264]	; (80033f8 <USB_Istr+0x1ec>)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 80032f0:	1c59      	adds	r1, r3, #1
 80032f2:	7001      	strb	r1, [r0, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 80032f4:	4790      	blx	r2
 80032f6:	882b      	ldrh	r3, [r5, #0]
 80032f8:	e796      	b.n	8003228 <USB_Istr+0x1c>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 80032fa:	493a      	ldr	r1, [pc, #232]	; (80033e4 <USB_Istr+0x1d8>)
 80032fc:	6808      	ldr	r0, [r1, #0]
 80032fe:	1c42      	adds	r2, r0, #1
 8003300:	600a      	str	r2, [r1, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8003302:	6808      	ldr	r0, [r1, #0]
 8003304:	2803      	cmp	r0, #3
 8003306:	d9cf      	bls.n	80032a8 <USB_Istr+0x9c>
 8003308:	483c      	ldr	r0, [pc, #240]	; (80033fc <USB_Istr+0x1f0>)
 800330a:	6802      	ldr	r2, [r0, #0]
 800330c:	f012 0f08 	tst.w	r2, #8
 8003310:	d1ca      	bne.n	80032a8 <USB_Istr+0x9c>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8003312:	6804      	ldr	r4, [r0, #0]
 8003314:	4a3a      	ldr	r2, [pc, #232]	; (8003400 <USB_Istr+0x1f4>)
 8003316:	b2a4      	uxth	r4, r4
 8003318:	6014      	str	r4, [r2, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800331a:	4c3a      	ldr	r4, [pc, #232]	; (8003404 <USB_Istr+0x1f8>)
 800331c:	6824      	ldr	r4, [r4, #0]
 800331e:	b2a4      	uxth	r4, r4
 8003320:	9400      	str	r4, [sp, #0]
 8003322:	4c39      	ldr	r4, [pc, #228]	; (8003408 <USB_Istr+0x1fc>)
 8003324:	6824      	ldr	r4, [r4, #0]
 8003326:	b2a4      	uxth	r4, r4
 8003328:	9401      	str	r4, [sp, #4]
 800332a:	4c38      	ldr	r4, [pc, #224]	; (800340c <USB_Istr+0x200>)
 800332c:	6824      	ldr	r4, [r4, #0]
 800332e:	b2a4      	uxth	r4, r4
 8003330:	9402      	str	r4, [sp, #8]
 8003332:	4c37      	ldr	r4, [pc, #220]	; (8003410 <USB_Istr+0x204>)
 8003334:	6824      	ldr	r4, [r4, #0]
 8003336:	b2a4      	uxth	r4, r4
 8003338:	9403      	str	r4, [sp, #12]
 800333a:	4c36      	ldr	r4, [pc, #216]	; (8003414 <USB_Istr+0x208>)
 800333c:	6824      	ldr	r4, [r4, #0]
 800333e:	b2a4      	uxth	r4, r4
 8003340:	9404      	str	r4, [sp, #16]
 8003342:	4c35      	ldr	r4, [pc, #212]	; (8003418 <USB_Istr+0x20c>)
 8003344:	6824      	ldr	r4, [r4, #0]
 8003346:	b2a4      	uxth	r4, r4
 8003348:	9405      	str	r4, [sp, #20]
 800334a:	4c34      	ldr	r4, [pc, #208]	; (800341c <USB_Istr+0x210>)
 800334c:	6824      	ldr	r4, [r4, #0]
 800334e:	b2a4      	uxth	r4, r4
 8003350:	9406      	str	r4, [sp, #24]
 8003352:	4c33      	ldr	r4, [pc, #204]	; (8003420 <USB_Istr+0x214>)
 8003354:	6824      	ldr	r4, [r4, #0]
 8003356:	b2a4      	uxth	r4, r4
 8003358:	9407      	str	r4, [sp, #28]
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 800335a:	6814      	ldr	r4, [r2, #0]
 800335c:	f044 0401 	orr.w	r4, r4, #1
 8003360:	6014      	str	r4, [r2, #0]
        _SetCNTR(wCNTR);
 8003362:	6814      	ldr	r4, [r2, #0]
 8003364:	b2a4      	uxth	r4, r4
 8003366:	6004      	str	r4, [r0, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8003368:	6814      	ldr	r4, [r2, #0]
 800336a:	f024 0401 	bic.w	r4, r4, #1
 800336e:	6014      	str	r4, [r2, #0]
        _SetCNTR(wCNTR);
 8003370:	6812      	ldr	r2, [r2, #0]
 8003372:	b292      	uxth	r2, r2
 8003374:	6002      	str	r2, [r0, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800337c:	d0fb      	beq.n	8003376 <USB_Istr+0x16a>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 800337e:	4813      	ldr	r0, [pc, #76]	; (80033cc <USB_Istr+0x1c0>)
 8003380:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8003384:	6002      	str	r2, [r0, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8003386:	9b00      	ldr	r3, [sp, #0]
 8003388:	b29a      	uxth	r2, r3
 800338a:	f840 2c44 	str.w	r2, [r0, #-68]
 800338e:	9b01      	ldr	r3, [sp, #4]
 8003390:	b29a      	uxth	r2, r3
 8003392:	f840 2c40 	str.w	r2, [r0, #-64]
 8003396:	9b02      	ldr	r3, [sp, #8]
 8003398:	b29a      	uxth	r2, r3
 800339a:	f840 2c3c 	str.w	r2, [r0, #-60]
 800339e:	9b03      	ldr	r3, [sp, #12]
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	f840 2c38 	str.w	r2, [r0, #-56]
 80033a6:	9b04      	ldr	r3, [sp, #16]
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	f840 2c34 	str.w	r2, [r0, #-52]
 80033ae:	9b05      	ldr	r3, [sp, #20]
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	f840 2c30 	str.w	r2, [r0, #-48]
 80033b6:	9b06      	ldr	r3, [sp, #24]
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	f840 2c2c 	str.w	r2, [r0, #-44]
 80033be:	9b07      	ldr	r3, [sp, #28]
 80033c0:	b29a      	uxth	r2, r3
      
        esof_counter = 0;
 80033c2:	2300      	movs	r3, #0
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 80033c4:	f840 2c28 	str.w	r2, [r0, #-40]
      
        esof_counter = 0;
 80033c8:	600b      	str	r3, [r1, #0]
 80033ca:	e76d      	b.n	80032a8 <USB_Istr+0x9c>
 80033cc:	40005c44 	.word	0x40005c44
 80033d0:	20000dd8 	.word	0x20000dd8
 80033d4:	20001634 	.word	0x20001634
 80033d8:	200004a4 	.word	0x200004a4
 80033dc:	0800384d 	.word	0x0800384d
 80033e0:	40005c48 	.word	0x40005c48
 80033e4:	20000498 	.word	0x20000498
 80033e8:	080036dd 	.word	0x080036dd
 80033ec:	20000288 	.word	0x20000288
 80033f0:	08004a51 	.word	0x08004a51
 80033f4:	20000494 	.word	0x20000494
 80033f8:	080031dd 	.word	0x080031dd
 80033fc:	40005c40 	.word	0x40005c40
 8003400:	20000490 	.word	0x20000490
 8003404:	40005c00 	.word	0x40005c00
 8003408:	40005c04 	.word	0x40005c04
 800340c:	40005c08 	.word	0x40005c08
 8003410:	40005c0c 	.word	0x40005c0c
 8003414:	40005c10 	.word	0x40005c10
 8003418:	40005c14 	.word	0x40005c14
 800341c:	40005c18 	.word	0x40005c18
 8003420:	40005c1c 	.word	0x40005c1c

08003424 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8003424:	4803      	ldr	r0, [pc, #12]	; (8003434 <Virtual_Com_Port_SetConfiguration+0x10>)
 8003426:	7a83      	ldrb	r3, [r0, #10]
 8003428:	b113      	cbz	r3, 8003430 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800342a:	4903      	ldr	r1, [pc, #12]	; (8003438 <Virtual_Com_Port_SetConfiguration+0x14>)
 800342c:	2205      	movs	r2, #5
 800342e:	600a      	str	r2, [r1, #0]
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20001610 	.word	0x20001610
 8003438:	200004a0 	.word	0x200004a0

0800343c <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 800343c:	4b01      	ldr	r3, [pc, #4]	; (8003444 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 800343e:	2204      	movs	r2, #4
 8003440:	601a      	str	r2, [r3, #0]
}
 8003442:	4770      	bx	lr
 8003444:	200004a0 	.word	0x200004a0

08003448 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <Virtual_Com_Port_Status_In+0x10>)
 800344a:	781a      	ldrb	r2, [r3, #0]
 800344c:	2a20      	cmp	r2, #32
 800344e:	d101      	bne.n	8003454 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8003450:	2000      	movs	r0, #0
 8003452:	7018      	strb	r0, [r3, #0]
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	2000049c 	.word	0x2000049c

0800345c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop

08003460 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8003460:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8003462:	b508      	push	{r3, lr}
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8003464:	d003      	beq.n	800346e <Virtual_Com_Port_Data_Setup+0xe>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8003466:	2820      	cmp	r0, #32
 8003468:	d00a      	beq.n	8003480 <Virtual_Com_Port_Data_Setup+0x20>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800346a:	2002      	movs	r0, #2
 800346c:	bd08      	pop	{r3, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800346e:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <Virtual_Com_Port_Data_Setup+0x50>)
 8003470:	6811      	ldr	r1, [r2, #0]
 8003472:	7808      	ldrb	r0, [r1, #0]
 8003474:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8003478:	2b21      	cmp	r3, #33	; 0x21
 800347a:	d1f6      	bne.n	800346a <Virtual_Com_Port_Data_Setup+0xa>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 800347c:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <Virtual_Com_Port_Data_Setup+0x54>)
 800347e:	e00d      	b.n	800349c <Virtual_Com_Port_Data_Setup+0x3c>
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8003480:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <Virtual_Com_Port_Data_Setup+0x50>)
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8003482:	490d      	ldr	r1, [pc, #52]	; (80034b8 <Virtual_Com_Port_Data_Setup+0x58>)
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8003484:	6813      	ldr	r3, [r2, #0]
 8003486:	f893 c000 	ldrb.w	ip, [r3]
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 800348a:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <Virtual_Com_Port_Data_Setup+0x5c>)
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800348c:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 8003490:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
 8003494:	bf18      	it	ne
 8003496:	2300      	movne	r3, #0
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8003498:	7008      	strb	r0, [r1, #0]
  }

  if (CopyRoutine == NULL)
 800349a:	b13b      	cbz	r3, 80034ac <Virtual_Com_Port_Data_Setup+0x4c>
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800349c:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800349e:	2100      	movs	r1, #0
  (*CopyRoutine)(0);
 80034a0:	2000      	movs	r0, #0
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80034a2:	6193      	str	r3, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 80034a4:	8251      	strh	r1, [r2, #18]
  (*CopyRoutine)(0);
 80034a6:	4798      	blx	r3
  return USB_SUCCESS;
 80034a8:	2000      	movs	r0, #0
 80034aa:	bd08      	pop	{r3, pc}
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 80034ac:	2002      	movs	r0, #2

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 80034ae:	bd08      	pop	{r3, pc}
 80034b0:	20001630 	.word	0x20001630
 80034b4:	080034f9 	.word	0x080034f9
 80034b8:	2000049c 	.word	0x2000049c
 80034bc:	08003511 	.word	0x08003511

080034c0 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <Virtual_Com_Port_NoData_Setup+0x24>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	7811      	ldrb	r1, [r2, #0]
 80034c6:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80034ca:	2b21      	cmp	r3, #33	; 0x21
 80034cc:	d001      	beq.n	80034d2 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 80034ce:	2002      	movs	r0, #2
 80034d0:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 80034d2:	2802      	cmp	r0, #2
 80034d4:	d004      	beq.n	80034e0 <Virtual_Com_Port_NoData_Setup+0x20>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 80034d6:	2822      	cmp	r0, #34	; 0x22
 80034d8:	bf14      	ite	ne
 80034da:	2002      	movne	r0, #2
 80034dc:	2000      	moveq	r0, #0
 80034de:	4770      	bx	lr

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 80034e0:	2000      	movs	r0, #0
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
}
 80034e2:	4770      	bx	lr
 80034e4:	20001630 	.word	0x20001630

080034e8 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 80034e8:	b921      	cbnz	r1, 80034f4 <Virtual_Com_Port_Get_Interface_Setting+0xc>
  {
    return USB_UNSUPPORT;
  }
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
 80034ea:	2801      	cmp	r0, #1
 80034ec:	bf8c      	ite	hi
 80034ee:	2002      	movhi	r0, #2
 80034f0:	2000      	movls	r0, #0
 80034f2:	4770      	bx	lr
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
  {
    return USB_UNSUPPORT;
 80034f4:	2002      	movs	r0, #2
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
}
 80034f6:	4770      	bx	lr

080034f8 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 80034f8:	b108      	cbz	r0, 80034fe <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 80034fa:	4803      	ldr	r0, [pc, #12]	; (8003508 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 80034fc:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 80034fe:	4903      	ldr	r1, [pc, #12]	; (800350c <Virtual_Com_Port_GetLineCoding+0x14>)
 8003500:	2208      	movs	r2, #8
 8003502:	680b      	ldr	r3, [r1, #0]
 8003504:	821a      	strh	r2, [r3, #16]
    return NULL;
 8003506:	4770      	bx	lr
 8003508:	20000304 	.word	0x20000304
 800350c:	20001630 	.word	0x20001630

08003510 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8003510:	b108      	cbz	r0, 8003516 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8003512:	4803      	ldr	r0, [pc, #12]	; (8003520 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8003514:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8003516:	4903      	ldr	r1, [pc, #12]	; (8003524 <Virtual_Com_Port_SetLineCoding+0x14>)
 8003518:	2208      	movs	r2, #8
 800351a:	680b      	ldr	r3, [r1, #0]
 800351c:	821a      	strh	r2, [r3, #16]
    return NULL;
 800351e:	4770      	bx	lr
 8003520:	20000304 	.word	0x20000304
 8003524:	20001630 	.word	0x20001630

08003528 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8003528:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 800352a:	4906      	ldr	r1, [pc, #24]	; (8003544 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 800352c:	680b      	ldr	r3, [r1, #0]
 800352e:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 8003530:	2b04      	cmp	r3, #4
 8003532:	d901      	bls.n	8003538 <Virtual_Com_Port_GetStringDescriptor+0x10>
  {
    return NULL;
 8003534:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 8003536:	bd08      	pop	{r3, pc}
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8003538:	4903      	ldr	r1, [pc, #12]	; (8003548 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 800353a:	4a04      	ldr	r2, [pc, #16]	; (800354c <Virtual_Com_Port_GetStringDescriptor+0x24>)
 800353c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003540:	4790      	blx	r2
 8003542:	bd08      	pop	{r3, pc}
 8003544:	20001630 	.word	0x20001630
 8003548:	200002e4 	.word	0x200002e4
 800354c:	0800400d 	.word	0x0800400d

08003550 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8003550:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8003552:	4902      	ldr	r1, [pc, #8]	; (800355c <Virtual_Com_Port_GetConfigDescriptor+0xc>)
 8003554:	4b02      	ldr	r3, [pc, #8]	; (8003560 <Virtual_Com_Port_GetConfigDescriptor+0x10>)
 8003556:	4798      	blx	r3
}
 8003558:	bd08      	pop	{r3, pc}
 800355a:	bf00      	nop
 800355c:	20000280 	.word	0x20000280
 8003560:	0800400d 	.word	0x0800400d

08003564 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8003564:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8003566:	4902      	ldr	r1, [pc, #8]	; (8003570 <Virtual_Com_Port_GetDeviceDescriptor+0xc>)
 8003568:	4b02      	ldr	r3, [pc, #8]	; (8003574 <Virtual_Com_Port_GetDeviceDescriptor+0x10>)
 800356a:	4798      	blx	r3
}
 800356c:	bd08      	pop	{r3, pc}
 800356e:	bf00      	nop
 8003570:	200002dc 	.word	0x200002dc
 8003574:	0800400d 	.word	0x0800400d

08003578 <Virtual_Com_Port_Reset>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8003578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800357c:	4b30      	ldr	r3, [pc, #192]	; (8003640 <Virtual_Com_Port_Reset+0xc8>)

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800357e:	4c31      	ldr	r4, [pc, #196]	; (8003644 <Virtual_Com_Port_Reset+0xcc>)
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8003580:	681e      	ldr	r6, [r3, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8003582:	f894 8007 	ldrb.w	r8, [r4, #7]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8003586:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8003588:	f886 8009 	strb.w	r8, [r6, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800358c:	72b4      	strb	r4, [r6, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 800358e:	72f4      	strb	r4, [r6, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8003590:	4620      	mov	r0, r4
 8003592:	4d2d      	ldr	r5, [pc, #180]	; (8003648 <Virtual_Com_Port_Reset+0xd0>)
 8003594:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8003596:	4e2d      	ldr	r6, [pc, #180]	; (800364c <Virtual_Com_Port_Reset+0xd4>)
 8003598:	4620      	mov	r0, r4
 800359a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800359e:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 80035a0:	4d2b      	ldr	r5, [pc, #172]	; (8003650 <Virtual_Com_Port_Reset+0xd8>)
 80035a2:	2110      	movs	r1, #16
 80035a4:	4620      	mov	r0, r4
 80035a6:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 80035a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800366c <Virtual_Com_Port_Reset+0xf4>
 80035ac:	2140      	movs	r1, #64	; 0x40
 80035ae:	4620      	mov	r0, r4
 80035b0:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 80035b2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8003670 <Virtual_Com_Port_Reset+0xf8>
 80035b6:	2180      	movs	r1, #128	; 0x80
 80035b8:	4620      	mov	r0, r4
 80035ba:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 80035bc:	4a25      	ldr	r2, [pc, #148]	; (8003654 <Virtual_Com_Port_Reset+0xdc>)
 80035be:	4620      	mov	r0, r4
 80035c0:	4790      	blx	r2
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80035c2:	4825      	ldr	r0, [pc, #148]	; (8003658 <Virtual_Com_Port_Reset+0xe0>)
 80035c4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8003674 <Virtual_Com_Port_Reset+0xfc>
 80035c8:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 80035cc:	4620      	mov	r0, r4
 80035ce:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 80035d0:	4f22      	ldr	r7, [pc, #136]	; (800365c <Virtual_Com_Port_Reset+0xe4>)
 80035d2:	4620      	mov	r0, r4
 80035d4:	47b8      	blx	r7

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 80035d6:	2001      	movs	r0, #1
 80035d8:	4621      	mov	r1, r4
 80035da:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 80035dc:	2001      	movs	r0, #1
 80035de:	21c0      	movs	r1, #192	; 0xc0
 80035e0:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 80035e2:	2001      	movs	r0, #1
 80035e4:	2120      	movs	r1, #32
 80035e6:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80035e8:	4f1d      	ldr	r7, [pc, #116]	; (8003660 <Virtual_Com_Port_Reset+0xe8>)
 80035ea:	2001      	movs	r0, #1
 80035ec:	4621      	mov	r1, r4
 80035ee:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 80035f0:	2002      	movs	r0, #2
 80035f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80035f6:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 80035f8:	2002      	movs	r0, #2
 80035fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035fe:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8003600:	2002      	movs	r0, #2
 8003602:	4621      	mov	r1, r4
 8003604:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8003606:	2002      	movs	r0, #2
 8003608:	2120      	movs	r1, #32
 800360a:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 800360c:	2003      	movs	r0, #3
 800360e:	4621      	mov	r1, r4
 8003610:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8003612:	2003      	movs	r0, #3
 8003614:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003618:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800361a:	2003      	movs	r0, #3
 800361c:	2140      	movs	r1, #64	; 0x40
 800361e:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8003620:	2003      	movs	r0, #3
 8003622:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003626:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8003628:	4621      	mov	r1, r4
 800362a:	2003      	movs	r0, #3
 800362c:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 800362e:	4620      	mov	r0, r4
 8003630:	490c      	ldr	r1, [pc, #48]	; (8003664 <Virtual_Com_Port_Reset+0xec>)
 8003632:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <Virtual_Com_Port_Reset+0xf0>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]
  
  //printf(" Reset ");
}
 800363a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800363e:	bf00      	nop
 8003640:	20001630 	.word	0x20001630
 8003644:	08004fd8 	.word	0x08004fd8
 8003648:	08004775 	.word	0x08004775
 800364c:	08004789 	.word	0x08004789
 8003650:	080047a5 	.word	0x080047a5
 8003654:	0800486d 	.word	0x0800486d
 8003658:	20000288 	.word	0x20000288
 800365c:	08004849 	.word	0x08004849
 8003660:	080047e5 	.word	0x080047e5
 8003664:	0800454d 	.word	0x0800454d
 8003668:	200004a0 	.word	0x200004a0
 800366c:	08004901 	.word	0x08004901
 8003670:	080048dd 	.word	0x080048dd
 8003674:	08004989 	.word	0x08004989

08003678 <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8003678:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 800367a:	4c06      	ldr	r4, [pc, #24]	; (8003694 <Virtual_Com_Port_init+0x1c>)
 800367c:	47a0      	blx	r4

  pInformation->Current_Configuration = 0;
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <Virtual_Com_Port_init+0x20>)
 8003680:	2400      	movs	r4, #0
 8003682:	681a      	ldr	r2, [r3, #0]

  /* Connect the device */
  PowerOn();
 8003684:	4905      	ldr	r1, [pc, #20]	; (800369c <Virtual_Com_Port_init+0x24>)

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8003686:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 8003688:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 800368a:	4805      	ldr	r0, [pc, #20]	; (80036a0 <Virtual_Com_Port_init+0x28>)
 800368c:	4780      	blx	r0

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 800368e:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <Virtual_Com_Port_init+0x2c>)
 8003690:	601c      	str	r4, [r3, #0]
}
 8003692:	bd10      	pop	{r4, pc}
 8003694:	08003bb9 	.word	0x08003bb9
 8003698:	20001630 	.word	0x20001630
 800369c:	080036a9 	.word	0x080036a9
 80036a0:	08004a01 	.word	0x08004a01
 80036a4:	200004a0 	.word	0x200004a0

080036a8 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 80036a8:	b510      	push	{r4, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 80036aa:	2001      	movs	r0, #1
 80036ac:	4907      	ldr	r1, [pc, #28]	; (80036cc <PowerOn+0x24>)
 80036ae:	4788      	blx	r1

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80036b0:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <PowerOn+0x28>)
 80036b2:	2401      	movs	r4, #1
 80036b4:	601c      	str	r4, [r3, #0]
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80036b6:	4807      	ldr	r0, [pc, #28]	; (80036d4 <PowerOn+0x2c>)

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80036b8:	4c07      	ldr	r4, [pc, #28]	; (80036d8 <PowerOn+0x30>)
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 80036ba:	2200      	movs	r2, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80036bc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80036c0:	8001      	strh	r1, [r0, #0]
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 80036c2:	601a      	str	r2, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 80036c4:	4610      	mov	r0, r2

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80036c6:	6022      	str	r2, [r4, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
 80036c8:	6019      	str	r1, [r3, #0]
  
  return USB_SUCCESS;
}
 80036ca:	bd10      	pop	{r4, pc}
 80036cc:	08003a85 	.word	0x08003a85
 80036d0:	40005c40 	.word	0x40005c40
 80036d4:	20001634 	.word	0x20001634
 80036d8:	40005c44 	.word	0x40005c44

080036dc <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 80036dc:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 80036de:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <Suspend+0x118>)
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 80036e0:	2400      	movs	r4, #0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80036e2:	4a45      	ldr	r2, [pc, #276]	; (80037f8 <Suspend+0x11c>)
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 80036e4:	b082      	sub	sp, #8
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 80036e6:	9401      	str	r4, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 80036e8:	681c      	ldr	r4, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80036ea:	6810      	ldr	r0, [r2, #0]
 80036ec:	4a43      	ldr	r2, [pc, #268]	; (80037fc <Suspend+0x120>)
 80036ee:	b285      	uxth	r5, r0
 80036f0:	4e43      	ldr	r6, [pc, #268]	; (8003800 <Suspend+0x124>)
 80036f2:	6015      	str	r5, [r2, #0]
 80036f4:	6831      	ldr	r1, [r6, #0]
 80036f6:	4d43      	ldr	r5, [pc, #268]	; (8003804 <Suspend+0x128>)
 80036f8:	b288      	uxth	r0, r1
 80036fa:	6050      	str	r0, [r2, #4]
 80036fc:	682e      	ldr	r6, [r5, #0]
 80036fe:	4842      	ldr	r0, [pc, #264]	; (8003808 <Suspend+0x12c>)
 8003700:	b2b1      	uxth	r1, r6
 8003702:	6091      	str	r1, [r2, #8]
 8003704:	6805      	ldr	r5, [r0, #0]
 8003706:	4941      	ldr	r1, [pc, #260]	; (800380c <Suspend+0x130>)
 8003708:	b2ae      	uxth	r6, r5
 800370a:	60d6      	str	r6, [r2, #12]
 800370c:	6808      	ldr	r0, [r1, #0]
 800370e:	4e40      	ldr	r6, [pc, #256]	; (8003810 <Suspend+0x134>)
 8003710:	b285      	uxth	r5, r0
 8003712:	6115      	str	r5, [r2, #16]
 8003714:	6831      	ldr	r1, [r6, #0]
 8003716:	4d3f      	ldr	r5, [pc, #252]	; (8003814 <Suspend+0x138>)
 8003718:	b288      	uxth	r0, r1
 800371a:	6150      	str	r0, [r2, #20]
 800371c:	682e      	ldr	r6, [r5, #0]
 800371e:	483e      	ldr	r0, [pc, #248]	; (8003818 <Suspend+0x13c>)
 8003720:	b2b1      	uxth	r1, r6
 8003722:	6191      	str	r1, [r2, #24]
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8003724:	b2a5      	uxth	r5, r4

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003726:	6806      	ldr	r6, [r0, #0]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
 8003728:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
 800372c:	f045 0101 	orr.w	r1, r5, #1
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8003730:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003734:	b2b6      	uxth	r6, r6
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8003736:	ea01 0404 	and.w	r4, r1, r4
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800373a:	4838      	ldr	r0, [pc, #224]	; (800381c <Suspend+0x140>)
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800373c:	61d6      	str	r6, [r2, #28]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800373e:	601d      	str	r5, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8003740:	6019      	str	r1, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8003742:	601c      	str	r4, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8003744:	6803      	ldr	r3, [r0, #0]
 8003746:	4935      	ldr	r1, [pc, #212]	; (800381c <Suspend+0x140>)
 8003748:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800374c:	d0fa      	beq.n	8003744 <Suspend+0x68>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 800374e:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8003752:	6008      	str	r0, [r1, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8003754:	6813      	ldr	r3, [r2, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8003756:	f044 0408 	orr.w	r4, r4, #8
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 800375a:	b298      	uxth	r0, r3
 800375c:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <Suspend+0x11c>)
 800375e:	6018      	str	r0, [r3, #0]
 8003760:	6850      	ldr	r0, [r2, #4]
 8003762:	b280      	uxth	r0, r0
 8003764:	6058      	str	r0, [r3, #4]
 8003766:	6890      	ldr	r0, [r2, #8]
 8003768:	b280      	uxth	r0, r0
 800376a:	6098      	str	r0, [r3, #8]
 800376c:	68d0      	ldr	r0, [r2, #12]
 800376e:	b280      	uxth	r0, r0
 8003770:	60d8      	str	r0, [r3, #12]
 8003772:	6910      	ldr	r0, [r2, #16]
 8003774:	b280      	uxth	r0, r0
 8003776:	6118      	str	r0, [r3, #16]
 8003778:	6950      	ldr	r0, [r2, #20]
 800377a:	b280      	uxth	r0, r0
 800377c:	6158      	str	r0, [r3, #20]
 800377e:	6990      	ldr	r0, [r2, #24]
 8003780:	b280      	uxth	r0, r0
 8003782:	6198      	str	r0, [r3, #24]
 8003784:	69d2      	ldr	r2, [r2, #28]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8003786:	3340      	adds	r3, #64	; 0x40
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8003788:	b290      	uxth	r0, r2
 800378a:	4a23      	ldr	r2, [pc, #140]	; (8003818 <Suspend+0x13c>)
 800378c:	6010      	str	r0, [r2, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800378e:	601c      	str	r4, [r3, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 8003790:	6818      	ldr	r0, [r3, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8003792:	f502 529e 	add.w	r2, r2, #5056	; 0x13c0
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 8003796:	fa1f fc80 	uxth.w	ip, r0
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 800379a:	f04c 0404 	orr.w	r4, ip, #4
 800379e:	601c      	str	r4, [r3, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80037a0:	3224      	adds	r2, #36	; 0x24
 80037a2:	6810      	ldr	r0, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80037a4:	4c1e      	ldr	r4, [pc, #120]	; (8003820 <Suspend+0x144>)
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80037a6:	9001      	str	r0, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 80037a8:	6810      	ldr	r0, [r2, #0]
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 80037aa:	f020 0c03 	bic.w	ip, r0, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 80037ae:	f04c 0001 	orr.w	r0, ip, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 80037b2:	6010      	str	r0, [r2, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	f040 0004 	orr.w	r0, r0, #4
 80037ba:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 80037bc:	6808      	ldr	r0, [r1, #0]
 80037be:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80037c2:	d010      	beq.n	80037e6 <Suspend+0x10a>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 80037c4:	f64e 70ff 	movw	r0, #61439	; 0xefff
 80037c8:	6008      	str	r0, [r1, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 80037ca:	6819      	ldr	r1, [r3, #0]
        wCNTR&=~CNTR_FSUSP;
        _SetCNTR(wCNTR);
 80037cc:	f64f 7cf7 	movw	ip, #65527	; 0xfff7
 80037d0:	ea01 000c 	and.w	r0, r1, ip
 80037d4:	6018      	str	r0, [r3, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 80037d6:	9b01      	ldr	r3, [sp, #4]
 80037d8:	6013      	str	r3, [r2, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 80037da:	6821      	ldr	r1, [r4, #0]
 80037dc:	f021 0004 	bic.w	r0, r1, #4
 80037e0:	6020      	str	r0, [r4, #0]
#endif
    }
}
 80037e2:	b002      	add	sp, #8
 80037e4:	bd70      	pop	{r4, r5, r6, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 80037e6:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <Suspend+0x148>)
 80037e8:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	f022 0104 	bic.w	r1, r2, #4
 80037f0:	6021      	str	r1, [r4, #0]
 80037f2:	e7f6      	b.n	80037e2 <Suspend+0x106>
 80037f4:	40005c40 	.word	0x40005c40
 80037f8:	40005c00 	.word	0x40005c00
 80037fc:	20000de0 	.word	0x20000de0
 8003800:	40005c04 	.word	0x40005c04
 8003804:	40005c08 	.word	0x40005c08
 8003808:	40005c0c 	.word	0x40005c0c
 800380c:	40005c10 	.word	0x40005c10
 8003810:	40005c14 	.word	0x40005c14
 8003814:	40005c18 	.word	0x40005c18
 8003818:	40005c1c 	.word	0x40005c1c
 800381c:	40005c44 	.word	0x40005c44
 8003820:	e000ed10 	.word	0xe000ed10
 8003824:	08003bf1 	.word	0x08003bf1

08003828 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8003828:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800382a:	4c06      	ldr	r4, [pc, #24]	; (8003844 <Resume_Init+0x1c>)
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 800382c:	f64f 7cfb 	movw	ip, #65531	; 0xfffb
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8003830:	6822      	ldr	r2, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8003832:	4805      	ldr	r0, [pc, #20]	; (8003848 <Resume_Init+0x20>)
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8003834:	ea02 010c 	and.w	r1, r2, ip
 8003838:	6021      	str	r1, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800383a:	4780      	blx	r0

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 800383c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003840:	6023      	str	r3, [r4, #0]

  /* reverse suspend preparation */
  /* ... */ 

}
 8003842:	bd10      	pop	{r4, pc}
 8003844:	40005c40 	.word	0x40005c40
 8003848:	080039d1 	.word	0x080039d1

0800384c <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 800384c:	b510      	push	{r4, lr}
 800384e:	4c28      	ldr	r4, [pc, #160]	; (80038f0 <Resume+0xa4>)
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8003850:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 8003852:	bf18      	it	ne
 8003854:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 8003856:	7823      	ldrb	r3, [r4, #0]
 8003858:	2b05      	cmp	r3, #5
 800385a:	d816      	bhi.n	800388a <Resume+0x3e>
 800385c:	e8df f003 	tbb	[pc, r3]
 8003860:	2c271f18 	.word	0x2c271f18
 8003864:	0336      	.short	0x0336
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8003866:	7862      	ldrb	r2, [r4, #1]
 8003868:	1e51      	subs	r1, r2, #1
 800386a:	7061      	strb	r1, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800386c:	7863      	ldrb	r3, [r4, #1]
 800386e:	b973      	cbnz	r3, 800388e <Resume+0x42>
      {
        wCNTR = _GetCNTR();
 8003870:	4920      	ldr	r1, [pc, #128]	; (80038f4 <Resume+0xa8>)
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 8003872:	f64f 7cef 	movw	ip, #65519	; 0xffef
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
 8003876:	680a      	ldr	r2, [r1, #0]
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 8003878:	ea02 000c 	and.w	r0, r2, ip
 800387c:	6008      	str	r0, [r1, #0]
        ResumeS.eState = RESUME_OFF;
 800387e:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <Resume+0xa4>)
        remotewakeupon = 0;
 8003880:	481d      	ldr	r0, [pc, #116]	; (80038f8 <Resume+0xac>)
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 8003882:	2106      	movs	r1, #6
 8003884:	7011      	strb	r1, [r2, #0]
        remotewakeupon = 0;
 8003886:	6003      	str	r3, [r0, #0]
 8003888:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 800388a:	2306      	movs	r3, #6
 800388c:	7023      	strb	r3, [r4, #0]
 800388e:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 8003890:	4919      	ldr	r1, [pc, #100]	; (80038f8 <Resume+0xac>)
 8003892:	6808      	ldr	r0, [r1, #0]
 8003894:	2800      	cmp	r0, #0
 8003896:	d025      	beq.n	80038e4 <Resume+0x98>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8003898:	2005      	movs	r0, #5
 800389a:	7020      	strb	r0, [r4, #0]
 800389c:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 800389e:	4817      	ldr	r0, [pc, #92]	; (80038fc <Resume+0xb0>)
 80038a0:	4780      	blx	r0
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 80038a2:	4a15      	ldr	r2, [pc, #84]	; (80038f8 <Resume+0xac>)
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 80038a4:	2304      	movs	r3, #4
      remotewakeupon = 1;
 80038a6:	2101      	movs	r1, #1
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 80038a8:	7023      	strb	r3, [r4, #0]
      remotewakeupon = 1;
 80038aa:	6011      	str	r1, [r2, #0]
      break;
 80038ac:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 80038ae:	2202      	movs	r2, #2
      ResumeS.eState = RESUME_WAIT;
 80038b0:	2103      	movs	r1, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 80038b2:	7062      	strb	r2, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 80038b4:	7021      	strb	r1, [r4, #0]
      break;
 80038b6:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 80038b8:	7861      	ldrb	r1, [r4, #1]
 80038ba:	1e48      	subs	r0, r1, #1
 80038bc:	7060      	strb	r0, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 80038be:	7863      	ldrb	r3, [r4, #1]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e4      	bne.n	800388e <Resume+0x42>
        ResumeS.eState = RESUME_START;
 80038c4:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <Resume+0xa4>)
 80038c6:	2204      	movs	r2, #4
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <Resume+0xa8>)
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 80038ce:	2105      	movs	r1, #5
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
        ResumeS.eState = RESUME_START;
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	fa1f fc80 	uxth.w	ip, r0
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 80038d6:	f04c 0210 	orr.w	r2, ip, #16
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 80038da:	200a      	movs	r0, #10
        ResumeS.eState = RESUME_START;
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 80038dc:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 80038de:	7021      	strb	r1, [r4, #0]
      ResumeS.bESOFcnt = 10;
 80038e0:	7060      	strb	r0, [r4, #1]
      break;
 80038e2:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <Resume+0xb0>)
 80038e6:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 80038e8:	2206      	movs	r2, #6
 80038ea:	7022      	strb	r2, [r4, #0]
 80038ec:	bd10      	pop	{r4, pc}
 80038ee:	bf00      	nop
 80038f0:	20000ddc 	.word	0x20000ddc
 80038f4:	40005c40 	.word	0x40005c40
 80038f8:	200004a8 	.word	0x200004a8
 80038fc:	08003829 	.word	0x08003829

08003900 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8003900:	4b02      	ldr	r3, [pc, #8]	; (800390c <USBWakeUp_IRQHandler+0xc>)
 8003902:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003906:	601a      	str	r2, [r3, #0]
	
	//printf("wake");
}
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40010414 	.word	0x40010414

08003910 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8003910:	b470      	push	{r4, r5, r6}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003912:	2a00      	cmp	r2, #0
 8003914:	d030      	beq.n	8003978 <IntToUnicode+0x68>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8003916:	1e53      	subs	r3, r2, #1
 8003918:	b2da      	uxtb	r2, r3
 800391a:	1c56      	adds	r6, r2, #1
 800391c:	0076      	lsls	r6, r6, #1
 800391e:	2400      	movs	r4, #0
 8003920:	f016 0f02 	tst.w	r6, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003924:	4623      	mov	r3, r4
 8003926:	d11b      	bne.n	8003960 <IntToUnicode+0x50>
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003928:	0f03      	lsrs	r3, r0, #28
 800392a:	2b09      	cmp	r3, #9
 800392c:	d929      	bls.n	8003982 <IntToUnicode+0x72>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800392e:	3337      	adds	r3, #55	; 0x37
 8003930:	700b      	strb	r3, [r1, #0]
    }
    
    value = value << 4;
 8003932:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003934:	0f02      	lsrs	r2, r0, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003936:	2302      	movs	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003938:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800393a:	704c      	strb	r4, [r1, #1]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 800393c:	d813      	bhi.n	8003966 <IntToUnicode+0x56>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800393e:	3230      	adds	r2, #48	; 0x30
 8003940:	54ca      	strb	r2, [r1, r3]
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8003942:	0100      	lsls	r0, r0, #4
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8003944:	18cd      	adds	r5, r1, r3
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003946:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003948:	0f02      	lsrs	r2, r0, #28
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800394a:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800394c:	706c      	strb	r4, [r5, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800394e:	d013      	beq.n	8003978 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8003950:	2a09      	cmp	r2, #9
 8003952:	d813      	bhi.n	800397c <IntToUnicode+0x6c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8003954:	3230      	adds	r2, #48	; 0x30
 8003956:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8003958:	18cd      	adds	r5, r1, r3
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800395a:	706c      	strb	r4, [r5, #1]
 800395c:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 800395e:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003960:	0f02      	lsrs	r2, r0, #28
 8003962:	2a09      	cmp	r2, #9
 8003964:	d9eb      	bls.n	800393e <IntToUnicode+0x2e>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8003966:	3237      	adds	r2, #55	; 0x37
 8003968:	54ca      	strb	r2, [r1, r3]
    }
    
    value = value << 4;
 800396a:	0100      	lsls	r0, r0, #4
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800396c:	18cd      	adds	r5, r1, r3
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800396e:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003970:	0f02      	lsrs	r2, r0, #28
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003972:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003974:	706c      	strb	r4, [r5, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003976:	d1eb      	bne.n	8003950 <IntToUnicode+0x40>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8003978:	bc70      	pop	{r4, r5, r6}
 800397a:	4770      	bx	lr
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800397c:	3237      	adds	r2, #55	; 0x37
 800397e:	54ca      	strb	r2, [r1, r3]
 8003980:	e7ea      	b.n	8003958 <IntToUnicode+0x48>
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8003982:	3330      	adds	r3, #48	; 0x30
 8003984:	700b      	strb	r3, [r1, #0]
 8003986:	e7d4      	b.n	8003932 <IntToUnicode+0x22>

08003988 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8003988:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 800398a:	4b01      	ldr	r3, [pc, #4]	; (8003990 <USB_LP_IRQHandler+0x8>)
 800398c:	4798      	blx	r3
}
 800398e:	bd08      	pop	{r3, pc}
 8003990:	0800320d 	.word	0x0800320d

08003994 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <Set_System+0x18>)
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	f420 0270 	bic.w	r2, r0, #15728640	; 0xf00000
 800399c:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	f441 1000 	orr.w	r0, r1, #2097152	; 0x200000
 80039a4:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	601a      	str	r2, [r3, #0]
	//-- PC.2
	REG_GPIOC_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOC_CRL |=  (0x02 << ( 8));	// MODE, PC.2 Output mode, max speed 2Mhz
	REG_GPIOC_CRL |=  (0x00 << (10));	// CNF,  PC.2 General purpose output push-pul
	#endif
}
 80039aa:	4770      	bx	lr
 80039ac:	40011004 	.word	0x40011004

080039b0 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 80039b0:	4a05      	ldr	r2, [pc, #20]	; (80039c8 <Set_USBClock+0x18>)
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <Set_USBClock+0x1c>)
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 80039b4:	6810      	ldr	r0, [r2, #0]
 80039b6:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 80039ba:	6011      	str	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	f440 0200 	orr.w	r2, r0, #8388608	; 0x800000
 80039c2:	601a      	str	r2, [r3, #0]
}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40021004 	.word	0x40021004
 80039cc:	4002101c 	.word	0x4002101c

080039d0 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 80039d0:	4805      	ldr	r0, [pc, #20]	; (80039e8 <Leave_LowPowerMode+0x18>)
 80039d2:	7a83      	ldrb	r3, [r0, #10]
 80039d4:	b91b      	cbnz	r3, 80039de <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <Leave_LowPowerMode+0x1c>)
 80039d8:	2001      	movs	r0, #1
 80039da:	6018      	str	r0, [r3, #0]
 80039dc:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 80039de:	4903      	ldr	r1, [pc, #12]	; (80039ec <Leave_LowPowerMode+0x1c>)
 80039e0:	2205      	movs	r2, #5
 80039e2:	600a      	str	r2, [r1, #0]
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20001610 	.word	0x20001610
 80039ec:	200004a0 	.word	0x200004a0

080039f0 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 80039f0:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <USB_Interrupts_Config+0x70>)
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 80039f2:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <USB_Interrupts_Config+0x74>)
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 80039f6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80039fa:	6015      	str	r5, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	f421 2480 	bic.w	r4, r1, #262144	; 0x40000
 8003a02:	601c      	str	r4, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8003a04:	f852 0c10 	ldr.w	r0, [r2, #-16]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8003a08:	4c17      	ldr	r4, [pc, #92]	; (8003a68 <USB_Interrupts_Config+0x78>)
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 8003a0a:	f420 2580 	bic.w	r5, r0, #262144	; 0x40000
 8003a0e:	f842 5c10 	str.w	r5, [r2, #-16]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8003a12:	6821      	ldr	r1, [r4, #0]
 8003a14:	f441 2080 	orr.w	r0, r1, #262144	; 0x40000
 8003a18:	6020      	str	r0, [r4, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8003a1a:	f852 5c08 	ldr.w	r5, [r2, #-8]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003a1e:	2090      	movs	r0, #144	; 0x90
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8003a20:	f425 2180 	bic.w	r1, r5, #262144	; 0x40000
 8003a24:	f842 1c08 	str.w	r1, [r2, #-8]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003a28:	681c      	ldr	r4, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003a2a:	4910      	ldr	r1, [pc, #64]	; (8003a6c <USB_Interrupts_Config+0x7c>)
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003a2c:	f444 2580 	orr.w	r5, r4, #262144	; 0x40000
 8003a30:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003a32:	2200      	movs	r2, #0
 8003a34:	4c0e      	ldr	r4, [pc, #56]	; (8003a70 <USB_Interrupts_Config+0x80>)
 8003a36:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8003a38:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <USB_Interrupts_Config+0x84>)
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8003a3a:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8003a3c:	681d      	ldr	r5, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8003a3e:	490e      	ldr	r1, [pc, #56]	; (8003a78 <USB_Interrupts_Config+0x88>)
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8003a40:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8003a44:	2200      	movs	r2, #0
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8003a46:	601d      	str	r5, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8003a48:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8003a4a:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <USB_Interrupts_Config+0x8c>)

	SET_BIT( REG_EXTI_SWIER, 18 );
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <USB_Interrupts_Config+0x90>)
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8003a4e:	6810      	ldr	r0, [r2, #0]
 8003a50:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 8003a54:	6011      	str	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	f440 2280 	orr.w	r2, r0, #262144	; 0x40000
 8003a5c:	601a      	str	r2, [r3, #0]
		 
}
 8003a5e:	bd38      	pop	{r3, r4, r5, pc}
 8003a60:	40010414 	.word	0x40010414
 8003a64:	40010400 	.word	0x40010400
 8003a68:	40010408 	.word	0x40010408
 8003a6c:	08003989 	.word	0x08003989
 8003a70:	0800174d 	.word	0x0800174d
 8003a74:	e000e100 	.word	0xe000e100
 8003a78:	08003901 	.word	0x08003901
 8003a7c:	e000e104 	.word	0xe000e104
 8003a80:	40010410 	.word	0x40010410

08003a84 <USB_Cable_Config>:
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 8003a84:	b928      	cbnz	r0, 8003a92 <USB_Cable_Config+0xe>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <USB_Cable_Config+0x1c>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 8003a8e:	6019      	str	r1, [r3, #0]
 8003a90:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8003a92:	4b03      	ldr	r3, [pc, #12]	; (8003aa0 <USB_Cable_Config+0x1c>)
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	4001100c 	.word	0x4001100c

08003aa4 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8003aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003aa8:	460f      	mov	r7, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8003aaa:	b082      	sub	sp, #8
 8003aac:	4605      	mov	r5, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003aae:	b379      	cbz	r1, 8003b10 <USB_To_USART_Send_Data+0x6c>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003ab0:	7803      	ldrb	r3, [r0, #0]
 8003ab2:	f101 38ff 	add.w	r8, r1, #4294967295
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003ab6:	2005      	movs	r0, #5
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003ab8:	2401      	movs	r4, #1
 8003aba:	4e17      	ldr	r6, [pc, #92]	; (8003b18 <USB_To_USART_Send_Data+0x74>)
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003abc:	f10d 0107 	add.w	r1, sp, #7
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003ac0:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003ac4:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003ac6:	42bc      	cmp	r4, r7
 8003ac8:	ea08 0804 	and.w	r8, r8, r4
 8003acc:	d220      	bcs.n	8003b10 <USB_To_USART_Send_Data+0x6c>
 8003ace:	f1b8 0f00 	cmp.w	r8, #0
 8003ad2:	d00a      	beq.n	8003aea <USB_To_USART_Send_Data+0x46>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003ad4:	f895 e001 	ldrb.w	lr, [r5, #1]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003ad8:	2005      	movs	r0, #5
 8003ada:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003ade:	2402      	movs	r4, #2
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003ae0:	f88d e007 	strb.w	lr, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003ae4:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003ae6:	42bc      	cmp	r4, r7
 8003ae8:	d212      	bcs.n	8003b10 <USB_To_USART_Send_Data+0x6c>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003aea:	f815 c004 	ldrb.w	ip, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003aee:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003af2:	3401      	adds	r4, #1
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003af4:	2005      	movs	r0, #5
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003af6:	f88d c007 	strb.w	ip, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003afa:	47b0      	blx	r6
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003afc:	5d2a      	ldrb	r2, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003afe:	2005      	movs	r0, #5
 8003b00:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003b04:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003b06:	f88d 2007 	strb.w	r2, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003b0a:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003b0c:	42bc      	cmp	r4, r7
 8003b0e:	d3ec      	bcc.n	8003aea <USB_To_USART_Send_Data+0x46>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 8003b10:	b002      	add	sp, #8
 8003b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b16:	bf00      	nop
 8003b18:	08001641 	.word	0x08001641

08003b1c <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8003b1c:	b538      	push	{r3, r4, r5, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <Handle_USBAsynchXfer+0x7c>)
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	2a01      	cmp	r2, #1
 8003b24:	d026      	beq.n	8003b74 <Handle_USBAsynchXfer+0x58>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8003b26:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <Handle_USBAsynchXfer+0x80>)
 8003b28:	6810      	ldr	r0, [r2, #0]
 8003b2a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8003b2e:	d02a      	beq.n	8003b86 <Handle_USBAsynchXfer+0x6a>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8003b30:	491b      	ldr	r1, [pc, #108]	; (8003ba0 <Handle_USBAsynchXfer+0x84>)
 8003b32:	680d      	ldr	r5, [r1, #0]
 8003b34:	4285      	cmp	r5, r0
 8003b36:	d02c      	beq.n	8003b92 <Handle_USBAsynchXfer+0x76>
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8003b38:	bf34      	ite	cc
 8003b3a:	f5c0 6500 	rsbcc	r5, r0, #2048	; 0x800
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8003b3e:	ebc0 0505 	rsbcs	r5, r0, r5
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8003b42:	4918      	ldr	r1, [pc, #96]	; (8003ba4 <Handle_USBAsynchXfer+0x88>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003b44:	2d40      	cmp	r5, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8003b46:	600d      	str	r5, [r1, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003b48:	d815      	bhi.n	8003b76 <Handle_USBAsynchXfer+0x5a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 8003b4a:	182c      	adds	r4, r5, r0
 8003b4c:	6014      	str	r4, [r2, #0]
      USART_Rx_length = 0;
 8003b4e:	2200      	movs	r2, #0
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 8003b50:	b280      	uxth	r0, r0
      USB_Tx_length = USART_Rx_length;
 8003b52:	b2ad      	uxth	r5, r5
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8003b54:	600a      	str	r2, [r1, #0]
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8003b56:	4914      	ldr	r1, [pc, #80]	; (8003ba8 <Handle_USBAsynchXfer+0x8c>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8003b58:	2401      	movs	r4, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8003b5a:	1808      	adds	r0, r1, r0
 8003b5c:	462a      	mov	r2, r5
 8003b5e:	21c0      	movs	r1, #192	; 0xc0
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8003b60:	701c      	strb	r4, [r3, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <Handle_USBAsynchXfer+0x90>)
 8003b64:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 8003b66:	4620      	mov	r0, r4
 8003b68:	4629      	mov	r1, r5
 8003b6a:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <Handle_USBAsynchXfer+0x94>)
 8003b6c:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 8003b6e:	4620      	mov	r0, r4
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <Handle_USBAsynchXfer+0x98>)
 8003b72:	4798      	blx	r3
 8003b74:	bd38      	pop	{r3, r4, r5, pc}
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8003b76:	f100 0440 	add.w	r4, r0, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8003b7a:	3d40      	subs	r5, #64	; 0x40
 8003b7c:	600d      	str	r5, [r1, #0]
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 8003b7e:	b280      	uxth	r0, r0
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8003b80:	6014      	str	r4, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8003b82:	2540      	movs	r5, #64	; 0x40
 8003b84:	e7e7      	b.n	8003b56 <Handle_USBAsynchXfer+0x3a>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8003b86:	4906      	ldr	r1, [pc, #24]	; (8003ba0 <Handle_USBAsynchXfer+0x84>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8003b88:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8003b8a:	680d      	ldr	r5, [r1, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8003b8c:	6010      	str	r0, [r2, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8003b8e:	4285      	cmp	r5, r0
 8003b90:	d1d2      	bne.n	8003b38 <Handle_USBAsynchXfer+0x1c>
    {
      USB_Tx_State = 0; 
 8003b92:	2000      	movs	r0, #0
 8003b94:	7018      	strb	r0, [r3, #0]
      return;
 8003b96:	bd38      	pop	{r3, r4, r5, pc}
 8003b98:	200004ac 	.word	0x200004ac
 8003b9c:	200004b4 	.word	0x200004b4
 8003ba0:	200004b0 	.word	0x200004b0
 8003ba4:	200004b8 	.word	0x200004b8
 8003ba8:	20000e00 	.word	0x20000e00
 8003bac:	080046bd 	.word	0x080046bd
 8003bb0:	08004969 	.word	0x08004969
 8003bb4:	08004825 	.word	0x08004825

08003bb8 <Get_SerialNum>:
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8003bb8:	4908      	ldr	r1, [pc, #32]	; (8003bdc <Get_SerialNum+0x24>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 8003bba:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8003bbc:	6808      	ldr	r0, [r1, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 8003bbe:	3108      	adds	r1, #8
 8003bc0:	680b      	ldr	r3, [r1, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8003bc2:	4a07      	ldr	r2, [pc, #28]	; (8003be0 <Get_SerialNum+0x28>)
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8003bc4:	18c0      	adds	r0, r0, r3
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8003bc6:	6814      	ldr	r4, [r2, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8003bc8:	d007      	beq.n	8003bda <Get_SerialNum+0x22>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8003bca:	4906      	ldr	r1, [pc, #24]	; (8003be4 <Get_SerialNum+0x2c>)
 8003bcc:	2208      	movs	r2, #8
 8003bce:	4d06      	ldr	r5, [pc, #24]	; (8003be8 <Get_SerialNum+0x30>)
 8003bd0:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	4905      	ldr	r1, [pc, #20]	; (8003bec <Get_SerialNum+0x34>)
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	47a8      	blx	r5
 8003bda:	bd38      	pop	{r3, r4, r5, pc}
 8003bdc:	1ffff7e8 	.word	0x1ffff7e8
 8003be0:	1ffff7ec 	.word	0x1ffff7ec
 8003be4:	2000022e 	.word	0x2000022e
 8003be8:	08003911 	.word	0x08003911
 8003bec:	2000023e 	.word	0x2000023e

08003bf0 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8003bf0:	bf30      	wfi
}
 8003bf2:	4770      	bx	lr

08003bf4 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8003bf4:	b508      	push	{r3, lr}
  if (Length == 0)
 8003bf6:	b138      	cbz	r0, 8003c08 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8003bf8:	4906      	ldr	r1, [pc, #24]	; (8003c14 <Standard_GetConfiguration+0x20>)
 8003bfa:	680b      	ldr	r3, [r1, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4790      	blx	r2
  return (uint8_t *)&pInformation->Current_Configuration;
 8003c00:	4805      	ldr	r0, [pc, #20]	; (8003c18 <Standard_GetConfiguration+0x24>)
 8003c02:	6800      	ldr	r0, [r0, #0]
 8003c04:	300a      	adds	r0, #10
}
 8003c06:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8003c08:	4903      	ldr	r1, [pc, #12]	; (8003c18 <Standard_GetConfiguration+0x24>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	680b      	ldr	r3, [r1, #0]
 8003c0e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8003c10:	bd08      	pop	{r3, pc}
 8003c12:	bf00      	nop
 8003c14:	2000162c 	.word	0x2000162c
 8003c18:	20001630 	.word	0x20001630

08003c1c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8003c1c:	b508      	push	{r3, lr}
  if (Length == 0)
 8003c1e:	b138      	cbz	r0, 8003c30 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8003c20:	4906      	ldr	r1, [pc, #24]	; (8003c3c <Standard_GetInterface+0x20>)
 8003c22:	680b      	ldr	r3, [r1, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	4790      	blx	r2
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8003c28:	4805      	ldr	r0, [pc, #20]	; (8003c40 <Standard_GetInterface+0x24>)
 8003c2a:	6800      	ldr	r0, [r0, #0]
 8003c2c:	300c      	adds	r0, #12
}
 8003c2e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8003c30:	4903      	ldr	r1, [pc, #12]	; (8003c40 <Standard_GetInterface+0x24>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	680b      	ldr	r3, [r1, #0]
 8003c36:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8003c38:	bd08      	pop	{r3, pc}
 8003c3a:	bf00      	nop
 8003c3c:	2000162c 	.word	0x2000162c
 8003c40:	20001630 	.word	0x20001630

08003c44 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8003c44:	b508      	push	{r3, lr}
  if (Length == 0)
 8003c46:	2800      	cmp	r0, #0
 8003c48:	d029      	beq.n	8003c9e <Standard_GetStatus+0x5a>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003c4a:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <Standard_GetStatus+0xb0>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8003c4c:	482a      	ldr	r0, [pc, #168]	; (8003cf8 <Standard_GetStatus+0xb4>)
 8003c4e:	2300      	movs	r3, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003c50:	6812      	ldr	r2, [r2, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8003c52:	8003      	strh	r3, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003c54:	f892 c000 	ldrb.w	ip, [r2]
 8003c58:	f01c 037f 	ands.w	r3, ip, #127	; 0x7f
 8003c5c:	d118      	bne.n	8003c90 <Standard_GetStatus+0x4c>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8003c5e:	7a51      	ldrb	r1, [r2, #9]
    {
      SetBit(StatusInfo0, 1);
 8003c60:	f890 e000 	ldrb.w	lr, [r0]
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8003c64:	f011 0f20 	tst.w	r1, #32
    {
      SetBit(StatusInfo0, 1);
 8003c68:	bf14      	ite	ne
 8003c6a:	f04e 0e02 	orrne.w	lr, lr, #2
    }
    else
    {
      ClrBit(StatusInfo0, 1);
 8003c6e:	f00e 0efd 	andeq.w	lr, lr, #253	; 0xfd
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8003c72:	f011 0f40 	tst.w	r1, #64	; 0x40
    {
      SetBit(StatusInfo0, 0);
 8003c76:	bf14      	ite	ne
 8003c78:	f04e 0e01 	orrne.w	lr, lr, #1
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 8003c7c:	f02e 0e01 	biceq.w	lr, lr, #1
 8003c80:	f880 e000 	strb.w	lr, [r0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8003c84:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <Standard_GetStatus+0xb8>)
 8003c86:	6819      	ldr	r1, [r3, #0]
 8003c88:	6908      	ldr	r0, [r1, #16]
 8003c8a:	4780      	blx	r0
  return (uint8_t *)&StatusInfo;
 8003c8c:	481a      	ldr	r0, [pc, #104]	; (8003cf8 <Standard_GetStatus+0xb4>)
 8003c8e:	bd08      	pop	{r3, pc}
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d100      	bne.n	8003c96 <Standard_GetStatus+0x52>
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 8003c94:	bd08      	pop	{r3, pc}
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d006      	beq.n	8003ca8 <Standard_GetStatus+0x64>
    }

  }
  else
  {
    return NULL;
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	e7fa      	b.n	8003c94 <Standard_GetStatus+0x50>
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8003c9e:	4915      	ldr	r1, [pc, #84]	; (8003cf4 <Standard_GetStatus+0xb0>)
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	680b      	ldr	r3, [r1, #0]
 8003ca4:	821a      	strh	r2, [r3, #16]
    return 0;
 8003ca6:	bd08      	pop	{r3, pc}
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8003ca8:	f892 c005 	ldrb.w	ip, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8003cac:	f01c 0f80 	tst.w	ip, #128	; 0x80
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
 8003cb0:	f00c 020f 	and.w	r2, ip, #15
    if (ValBit(wIndex0, 7))
 8003cb4:	d111      	bne.n	8003cda <Standard_GetStatus+0x96>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8003cb6:	0093      	lsls	r3, r2, #2
 8003cb8:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 8003cbc:	f501 4eb8 	add.w	lr, r1, #23552	; 0x5c00
 8003cc0:	f8de 2000 	ldr.w	r2, [lr]
 8003cc4:	f402 5c40 	and.w	ip, r2, #12288	; 0x3000
 8003cc8:	f5bc 5f80 	cmp.w	ip, #4096	; 0x1000
 8003ccc:	d1da      	bne.n	8003c84 <Standard_GetStatus+0x40>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 8003cce:	7802      	ldrb	r2, [r0, #0]
 8003cd0:	f042 0c01 	orr.w	ip, r2, #1
 8003cd4:	f880 c000 	strb.w	ip, [r0]
 8003cd8:	e7d4      	b.n	8003c84 <Standard_GetStatus+0x40>

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8003cda:	0093      	lsls	r3, r2, #2
 8003cdc:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 8003ce0:	f501 4eb8 	add.w	lr, r1, #23552	; 0x5c00
 8003ce4:	f8de 2000 	ldr.w	r2, [lr]
 8003ce8:	f002 0330 	and.w	r3, r2, #48	; 0x30
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d1c9      	bne.n	8003c84 <Standard_GetStatus+0x40>
 8003cf0:	e7ed      	b.n	8003cce <Standard_GetStatus+0x8a>
 8003cf2:	bf00      	nop
 8003cf4:	20001630 	.word	0x20001630
 8003cf8:	20001600 	.word	0x20001600
 8003cfc:	2000162c 	.word	0x2000162c

08003d00 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8003d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8003d04:	4e25      	ldr	r6, [pc, #148]	; (8003d9c <DataStageIn+0x9c>)
 8003d06:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8003d08:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 8003d0a:	7a27      	ldrb	r7, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8003d0c:	b923      	cbnz	r3, 8003d18 <DataStageIn+0x18>
 8003d0e:	2f04      	cmp	r7, #4
 8003d10:	d02c      	beq.n	8003d6c <DataStageIn+0x6c>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8003d12:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8003d14:	2704      	movs	r7, #4
 8003d16:	e003      	b.n	8003d20 <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8003d18:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8003d1a:	42ab      	cmp	r3, r5
 8003d1c:	d9fa      	bls.n	8003d14 <DataStageIn+0x14>
 8003d1e:	2702      	movs	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8003d20:	429d      	cmp	r5, r3
 8003d22:	bf28      	it	cs
 8003d24:	461d      	movcs	r5, r3
 8003d26:	69a2      	ldr	r2, [r4, #24]
 8003d28:	4628      	mov	r0, r5
 8003d2a:	4790      	blx	r2
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8003d2c:	491c      	ldr	r1, [pc, #112]	; (8003da0 <DataStageIn+0xa0>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8003d2e:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8003d30:	2000      	movs	r0, #0
 8003d32:	4788      	blx	r1
 8003d34:	462a      	mov	r2, r5
 8003d36:	4601      	mov	r1, r0
 8003d38:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <DataStageIn+0xa4>)
 8003d3a:	4640      	mov	r0, r8
 8003d3c:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8003d3e:	4629      	mov	r1, r5
 8003d40:	2000      	movs	r0, #0
 8003d42:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <DataStageIn+0xa8>)
 8003d44:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 8003d46:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8003d48:	8a61      	ldrh	r1, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8003d4a:	ebc5 0c00 	rsb	ip, r5, r0
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8003d4e:	4b17      	ldr	r3, [pc, #92]	; (8003dac <DataStageIn+0xac>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8003d50:	4817      	ldr	r0, [pc, #92]	; (8003db0 <DataStageIn+0xb0>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8003d52:	186d      	adds	r5, r5, r1
  vSetEPTxStatus(EP_TX_VALID);
 8003d54:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8003d56:	f44f 5140 	mov.w	r1, #12288	; 0x3000
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8003d5a:	f8a4 c010 	strh.w	ip, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8003d5e:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8003d60:	801a      	strh	r2, [r3, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8003d62:	6834      	ldr	r4, [r6, #0]
 8003d64:	8001      	strh	r1, [r0, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8003d66:	7227      	strb	r7, [r4, #8]
}
 8003d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8003d6c:	4a11      	ldr	r2, [pc, #68]	; (8003db4 <DataStageIn+0xb4>)
 8003d6e:	7811      	ldrb	r1, [r2, #0]
 8003d70:	2901      	cmp	r1, #1
 8003d72:	d006      	beq.n	8003d82 <DataStageIn+0x82>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8003d74:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <DataStageIn+0xac>)
 8003d76:	2707      	movs	r7, #7
 8003d78:	2210      	movs	r2, #16
 8003d7a:	801a      	strh	r2, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8003d7c:	7227      	strb	r7, [r4, #8]
}
 8003d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8003d82:	480d      	ldr	r0, [pc, #52]	; (8003db8 <DataStageIn+0xb8>)
 8003d84:	490d      	ldr	r1, [pc, #52]	; (8003dbc <DataStageIn+0xbc>)
 8003d86:	6800      	ldr	r0, [r0, #0]
 8003d88:	fa1f fc80 	uxth.w	ip, r0
 8003d8c:	4461      	add	r1, ip
 8003d8e:	0048      	lsls	r0, r1, #1
 8003d90:	4906      	ldr	r1, [pc, #24]	; (8003dac <DataStageIn+0xac>)
 8003d92:	6003      	str	r3, [r0, #0]
 8003d94:	2030      	movs	r0, #48	; 0x30
 8003d96:	8008      	strh	r0, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8003d98:	7013      	strb	r3, [r2, #0]
 8003d9a:	e7e4      	b.n	8003d66 <DataStageIn+0x66>
 8003d9c:	20001630 	.word	0x20001630
 8003da0:	08004929 	.word	0x08004929
 8003da4:	080046bd 	.word	0x080046bd
 8003da8:	08004969 	.word	0x08004969
 8003dac:	20001638 	.word	0x20001638
 8003db0:	20001636 	.word	0x20001636
 8003db4:	200004bc 	.word	0x200004bc
 8003db8:	40005c50 	.word	0x40005c50
 8003dbc:	20003002 	.word	0x20003002

08003dc0 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8003dc0:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <Standard_SetConfiguration+0x30>)
 8003dc4:	4a0b      	ldr	r2, [pc, #44]	; (8003df4 <Standard_SetConfiguration+0x34>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	7851      	ldrb	r1, [r2, #1]
 8003dca:	78da      	ldrb	r2, [r3, #3]
 8003dcc:	4291      	cmp	r1, r2
 8003dce:	d305      	bcc.n	8003ddc <Standard_SetConfiguration+0x1c>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8003dd0:	7898      	ldrb	r0, [r3, #2]
 8003dd2:	b918      	cbnz	r0, 8003ddc <Standard_SetConfiguration+0x1c>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8003dd4:	889c      	ldrh	r4, [r3, #4]
 8003dd6:	b11c      	cbz	r4, 8003de0 <Standard_SetConfiguration+0x20>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 8003dd8:	2002      	movs	r0, #2
  }
}
 8003dda:	bd10      	pop	{r4, pc}
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 8003ddc:	2002      	movs	r0, #2
 8003dde:	bd10      	pop	{r4, pc}

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8003de0:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <Standard_SetConfiguration+0x38>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	6851      	ldr	r1, [r2, #4]
 8003de8:	4788      	blx	r1
    return USB_SUCCESS;
 8003dea:	4620      	mov	r0, r4
 8003dec:	bd10      	pop	{r4, pc}
 8003dee:	bf00      	nop
 8003df0:	20001630 	.word	0x20001630
 8003df4:	2000030c 	.word	0x2000030c
 8003df8:	2000162c 	.word	0x2000162c

08003dfc <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8003dfc:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8003dfe:	4810      	ldr	r0, [pc, #64]	; (8003e40 <Standard_SetInterface+0x44>)
 8003e00:	4c10      	ldr	r4, [pc, #64]	; (8003e44 <Standard_SetInterface+0x48>)
 8003e02:	6802      	ldr	r2, [r0, #0]
 8003e04:	6821      	ldr	r1, [r4, #0]
 8003e06:	6993      	ldr	r3, [r2, #24]
 8003e08:	7948      	ldrb	r0, [r1, #5]
 8003e0a:	78c9      	ldrb	r1, [r1, #3]
 8003e0c:	4798      	blx	r3

  if (pInformation->Current_Configuration != 0)
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	7a9a      	ldrb	r2, [r3, #10]
 8003e12:	b18a      	cbz	r2, 8003e38 <Standard_SetInterface+0x3c>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8003e14:	b980      	cbnz	r0, 8003e38 <Standard_SetInterface+0x3c>
 8003e16:	7919      	ldrb	r1, [r3, #4]
 8003e18:	b971      	cbnz	r1, 8003e38 <Standard_SetInterface+0x3c>
        || (pInformation->USBwValue1 != 0))
 8003e1a:	789d      	ldrb	r5, [r3, #2]
 8003e1c:	b975      	cbnz	r5, 8003e3c <Standard_SetInterface+0x40>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <Standard_SetInterface+0x4c>)
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	68c8      	ldr	r0, [r1, #12]
 8003e24:	4780      	blx	r0
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003e26:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8003e28:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003e2a:	795a      	ldrb	r2, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8003e2c:	f893 c003 	ldrb.w	ip, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003e30:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8003e32:	f883 c00c 	strb.w	ip, [r3, #12]
      return USB_SUCCESS;
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
        || (pInformation->USBwValue1 != 0))
    {
      return  USB_UNSUPPORT;
 8003e38:	2002      	movs	r0, #2
 8003e3a:	bd38      	pop	{r3, r4, r5, pc}
 8003e3c:	2002      	movs	r0, #2
    }

  }

  return USB_UNSUPPORT;
}
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	20001608 	.word	0x20001608
 8003e44:	20001630 	.word	0x20001630
 8003e48:	2000162c 	.word	0x2000162c

08003e4c <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8003e4c:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8003e4e:	4b3a      	ldr	r3, [pc, #232]	; (8003f38 <Standard_ClearFeature+0xec>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003e54:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8003e58:	d035      	beq.n	8003ec6 <Standard_ClearFeature+0x7a>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8003e5a:	2802      	cmp	r0, #2
 8003e5c:	d001      	beq.n	8003e62 <Standard_ClearFeature+0x16>
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
        || (pInformation->Current_Configuration == 0))
    {
      return USB_UNSUPPORT;
 8003e5e:	2002      	movs	r0, #2
 8003e60:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8003e62:	885a      	ldrh	r2, [r3, #2]
 8003e64:	2a00      	cmp	r2, #0
 8003e66:	d12d      	bne.n	8003ec4 <Standard_ClearFeature+0x78>
        || (pInformation->USBwIndex1 != 0))
 8003e68:	7919      	ldrb	r1, [r3, #4]
 8003e6a:	bb59      	cbnz	r1, 8003ec4 <Standard_ClearFeature+0x78>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8003e6c:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8003e6e:	f012 0f80 	tst.w	r2, #128	; 0x80
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 8003e72:	f022 0080 	bic.w	r0, r2, #128	; 0x80
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8003e76:	d12b      	bne.n	8003ed0 <Standard_ClearFeature+0x84>
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8003e78:	0084      	lsls	r4, r0, #2
 8003e7a:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 8003e7e:	f501 4cb8 	add.w	ip, r1, #23552	; 0x5c00
 8003e82:	f8dc 5000 	ldr.w	r5, [ip]
 8003e86:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8003e8a:	492c      	ldr	r1, [pc, #176]	; (8003f3c <Standard_ClearFeature+0xf0>)
 8003e8c:	f891 c000 	ldrb.w	ip, [r1]
 8003e90:	4560      	cmp	r0, ip
 8003e92:	d2e4      	bcs.n	8003e5e <Standard_ClearFeature+0x12>
 8003e94:	2d00      	cmp	r5, #0
 8003e96:	d0e2      	beq.n	8003e5e <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8003e98:	7a9b      	ldrb	r3, [r3, #10]
 8003e9a:	b193      	cbz	r3, 8003ec2 <Standard_ClearFeature+0x76>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8003e9c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003ea0:	d020      	beq.n	8003ee4 <Standard_ClearFeature+0x98>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8003ea2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003ea6:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8003eaa:	6822      	ldr	r2, [r4, #0]
 8003eac:	f002 0e30 	and.w	lr, r2, #48	; 0x30
 8003eb0:	f1be 0f10 	cmp.w	lr, #16
 8003eb4:	d033      	beq.n	8003f1e <Standard_ClearFeature+0xd2>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8003eb6:	4922      	ldr	r1, [pc, #136]	; (8003f40 <Standard_ClearFeature+0xf4>)
 8003eb8:	680b      	ldr	r3, [r1, #0]
 8003eba:	6958      	ldr	r0, [r3, #20]
 8003ebc:	4780      	blx	r0
    return USB_SUCCESS;
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	bd38      	pop	{r3, r4, r5, pc}
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
        || (pInformation->Current_Configuration == 0))
    {
      return USB_UNSUPPORT;
 8003ec2:	2002      	movs	r0, #2
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
}
 8003ec4:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8003ec6:	7a59      	ldrb	r1, [r3, #9]
 8003ec8:	f021 0220 	bic.w	r2, r1, #32
 8003ecc:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8003ece:	bd38      	pop	{r3, r4, r5, pc}

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8003ed0:	0084      	lsls	r4, r0, #2
 8003ed2:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 8003ed6:	f501 4cb8 	add.w	ip, r1, #23552	; 0x5c00
 8003eda:	f8dc 5000 	ldr.w	r5, [ip]
 8003ede:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8003ee2:	e7d2      	b.n	8003e8a <Standard_ClearFeature+0x3e>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8003ee4:	f104 4e80 	add.w	lr, r4, #1073741824	; 0x40000000
 8003ee8:	f50e 44b8 	add.w	r4, lr, #23552	; 0x5c00
 8003eec:	6822      	ldr	r2, [r4, #0]
 8003eee:	f402 5c40 	and.w	ip, r2, #12288	; 0x3000
 8003ef2:	f5bc 5f80 	cmp.w	ip, #4096	; 0x1000
 8003ef6:	d1de      	bne.n	8003eb6 <Standard_ClearFeature+0x6a>
      {
        if (Related_Endpoint == ENDP0)
 8003ef8:	b9d0      	cbnz	r0, 8003f30 <Standard_ClearFeature+0xe4>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8003efa:	4912      	ldr	r1, [pc, #72]	; (8003f44 <Standard_ClearFeature+0xf8>)
 8003efc:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <Standard_ClearFeature+0xfc>)
 8003efe:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8003f02:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8003f04:	6822      	ldr	r2, [r4, #0]
 8003f06:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 8003f0a:	ea02 0301 	and.w	r3, r2, r1
 8003f0e:	f483 5e40 	eor.w	lr, r3, #12288	; 0x3000
 8003f12:	f44e 4c00 	orr.w	ip, lr, #32768	; 0x8000
 8003f16:	f04c 0080 	orr.w	r0, ip, #128	; 0x80
 8003f1a:	6020      	str	r0, [r4, #0]
 8003f1c:	e7cb      	b.n	8003eb6 <Standard_ClearFeature+0x6a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 8003f1e:	b2c4      	uxtb	r4, r0
 8003f20:	4620      	mov	r0, r4
 8003f22:	490a      	ldr	r1, [pc, #40]	; (8003f4c <Standard_ClearFeature+0x100>)
 8003f24:	4788      	blx	r1
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8003f26:	4620      	mov	r0, r4
 8003f28:	2130      	movs	r1, #48	; 0x30
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <Standard_ClearFeature+0x104>)
 8003f2c:	4798      	blx	r3
 8003f2e:	e7c2      	b.n	8003eb6 <Standard_ClearFeature+0x6a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8003f30:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <Standard_ClearFeature+0x108>)
 8003f32:	4790      	blx	r2
 8003f34:	e7e6      	b.n	8003f04 <Standard_ClearFeature+0xb8>
 8003f36:	bf00      	nop
 8003f38:	20001630 	.word	0x20001630
 8003f3c:	2000030c 	.word	0x2000030c
 8003f40:	2000162c 	.word	0x2000162c
 8003f44:	20000288 	.word	0x20000288
 8003f48:	08004989 	.word	0x08004989
 8003f4c:	080048b5 	.word	0x080048b5
 8003f50:	080047a5 	.word	0x080047a5
 8003f54:	0800488d 	.word	0x0800488d

08003f58 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8003f58:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 8003f5a:	4b29      	ldr	r3, [pc, #164]	; (8004000 <Standard_SetEndPointFeature+0xa8>)
 8003f5c:	6819      	ldr	r1, [r3, #0]
 8003f5e:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8003f60:	f013 0f80 	tst.w	r3, #128	; 0x80
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
 8003f64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8003f68:	d12b      	bne.n	8003fc2 <Standard_SetEndPointFeature+0x6a>
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8003f6a:	0090      	lsls	r0, r2, #2
 8003f6c:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 8003f70:	f50c 44b8 	add.w	r4, ip, #23552	; 0x5c00
 8003f74:	6825      	ldr	r5, [r4, #0]
 8003f76:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8003f7a:	4c22      	ldr	r4, [pc, #136]	; (8004004 <Standard_SetEndPointFeature+0xac>)
 8003f7c:	7824      	ldrb	r4, [r4, #0]
 8003f7e:	42a2      	cmp	r2, r4
 8003f80:	d21d      	bcs.n	8003fbe <Standard_SetEndPointFeature+0x66>
      || pInformation->USBwValue != 0 || Status == 0
 8003f82:	884a      	ldrh	r2, [r1, #2]
 8003f84:	b9da      	cbnz	r2, 8003fbe <Standard_SetEndPointFeature+0x66>
 8003f86:	b1d5      	cbz	r5, 8003fbe <Standard_SetEndPointFeature+0x66>
      || pInformation->Current_Configuration == 0)
 8003f88:	7a89      	ldrb	r1, [r1, #10]
 8003f8a:	b319      	cbz	r1, 8003fd4 <Standard_SetEndPointFeature+0x7c>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8003f8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f90:	d022      	beq.n	8003fd8 <Standard_SetEndPointFeature+0x80>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8003f92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003f96:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8003f9a:	6803      	ldr	r3, [r0, #0]
 8003f9c:	f648 71bf 	movw	r1, #36799	; 0x8fbf
 8003fa0:	ea03 0201 	and.w	r2, r3, r1
 8003fa4:	f082 0c10 	eor.w	ip, r2, #16
 8003fa8:	f44c 4e00 	orr.w	lr, ip, #32768	; 0x8000
 8003fac:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
 8003fb0:	6003      	str	r3, [r0, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8003fb2:	4815      	ldr	r0, [pc, #84]	; (8004008 <Standard_SetEndPointFeature+0xb0>)
 8003fb4:	6803      	ldr	r3, [r0, #0]
 8003fb6:	6999      	ldr	r1, [r3, #24]
 8003fb8:	4788      	blx	r1
  return USB_SUCCESS;
 8003fba:	2000      	movs	r0, #0
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8003fbe:	2002      	movs	r0, #2
 8003fc0:	bd38      	pop	{r3, r4, r5, pc}

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8003fc2:	0090      	lsls	r0, r2, #2
 8003fc4:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 8003fc8:	f50c 44b8 	add.w	r4, ip, #23552	; 0x5c00
 8003fcc:	6825      	ldr	r5, [r4, #0]
 8003fce:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8003fd2:	e7d2      	b.n	8003f7a <Standard_SetEndPointFeature+0x22>

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8003fd4:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8003fd8:	f100 4e80 	add.w	lr, r0, #1073741824	; 0x40000000
 8003fdc:	f50e 4eb8 	add.w	lr, lr, #23552	; 0x5c00
 8003fe0:	f8de 2000 	ldr.w	r2, [lr]
 8003fe4:	f64b 708f 	movw	r0, #49039	; 0xbf8f
 8003fe8:	ea02 0300 	and.w	r3, r2, r0
 8003fec:	f483 5180 	eor.w	r1, r3, #4096	; 0x1000
 8003ff0:	f441 4c00 	orr.w	ip, r1, #32768	; 0x8000
 8003ff4:	f04c 0280 	orr.w	r2, ip, #128	; 0x80
 8003ff8:	f8ce 2000 	str.w	r2, [lr]
 8003ffc:	e7d9      	b.n	8003fb2 <Standard_SetEndPointFeature+0x5a>
 8003ffe:	bf00      	nop
 8004000:	20001630 	.word	0x20001630
 8004004:	2000030c 	.word	0x2000030c
 8004008:	2000162c 	.word	0x2000162c

0800400c <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <Standard_GetDescriptorData+0x18>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8004012:	b110      	cbz	r0, 800401a <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8004014:	6808      	ldr	r0, [r1, #0]
 8004016:	1880      	adds	r0, r0, r2
}
 8004018:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800401a:	8889      	ldrh	r1, [r1, #4]
 800401c:	1a8a      	subs	r2, r1, r2
 800401e:	821a      	strh	r2, [r3, #16]
    return 0;
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20001630 	.word	0x20001630

08004028 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8004028:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800402a:	490d      	ldr	r1, [pc, #52]	; (8004060 <Post0_Process+0x38>)
 800402c:	2000      	movs	r0, #0
 800402e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8004032:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <Post0_Process+0x3c>)
 8004034:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 8004036:	480c      	ldr	r0, [pc, #48]	; (8004068 <Post0_Process+0x40>)
 8004038:	6803      	ldr	r3, [r0, #0]
 800403a:	7a18      	ldrb	r0, [r3, #8]
 800403c:	2808      	cmp	r0, #8
 800403e:	d107      	bne.n	8004050 <Post0_Process+0x28>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8004040:	490a      	ldr	r1, [pc, #40]	; (800406c <Post0_Process+0x44>)
    vSetEPTxStatus(EP_TX_STALL);
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <Post0_Process+0x48>)
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);

  if (pInformation->ControlState == STALLED)
  {
    vSetEPRxStatus(EP_RX_STALL);
 8004044:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8004048:	2210      	movs	r2, #16
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);

  if (pInformation->ControlState == STALLED)
  {
    vSetEPRxStatus(EP_RX_STALL);
 800404a:	f8a1 c000 	strh.w	ip, [r1]
    vSetEPTxStatus(EP_TX_STALL);
 800404e:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8004050:	f1a0 0009 	sub.w	r0, r0, #9
 8004054:	f1d0 0e00 	rsbs	lr, r0, #0
 8004058:	eb4e 0000 	adc.w	r0, lr, r0
 800405c:	bd08      	pop	{r3, pc}
 800405e:	bf00      	nop
 8004060:	20000288 	.word	0x20000288
 8004064:	08004989 	.word	0x08004989
 8004068:	20001630 	.word	0x20001630
 800406c:	20001636 	.word	0x20001636
 8004070:	20001638 	.word	0x20001638

08004074 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 8004076:	4d30      	ldr	r5, [pc, #192]	; (8004138 <Out0_Process+0xc4>)
 8004078:	682c      	ldr	r4, [r5, #0]
 800407a:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800407c:	2b02      	cmp	r3, #2
 800407e:	d007      	beq.n	8004090 <Out0_Process+0x1c>
 8004080:	2b04      	cmp	r3, #4
 8004082:	d005      	beq.n	8004090 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8004084:	2b03      	cmp	r3, #3
 8004086:	d008      	beq.n	800409a <Out0_Process+0x26>
 8004088:	2b05      	cmp	r3, #5
 800408a:	d006      	beq.n	800409a <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 800408c:	2b07      	cmp	r3, #7
 800408e:	d043      	beq.n	8004118 <Out0_Process+0xa4>
 8004090:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8004092:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 8004094:	4929      	ldr	r1, [pc, #164]	; (800413c <Out0_Process+0xc8>)
 8004096:	4788      	blx	r1
}
 8004098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 800409a:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 800409c:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 800409e:	b1c3      	cbz	r3, 80040d2 <Out0_Process+0x5e>
 80040a0:	b32a      	cbz	r2, 80040ee <Out0_Process+0x7a>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 80040a2:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80040a4:	4296      	cmp	r6, r2
 80040a6:	bf28      	it	cs
 80040a8:	4616      	movcs	r6, r2
 80040aa:	4630      	mov	r0, r6
 80040ac:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 80040ae:	8a23      	ldrh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80040b0:	f8b4 c012 	ldrh.w	ip, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 80040b4:	1b9a      	subs	r2, r3, r6
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80040b6:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 80040b8:	eb06 000c 	add.w	r0, r6, ip
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 80040bc:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80040be:	8260      	strh	r0, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80040c0:	491f      	ldr	r1, [pc, #124]	; (8004140 <Out0_Process+0xcc>)
 80040c2:	2000      	movs	r0, #0
 80040c4:	4788      	blx	r1
 80040c6:	4632      	mov	r2, r6
 80040c8:	4601      	mov	r1, r0
 80040ca:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <Out0_Process+0xd0>)
 80040cc:	4638      	mov	r0, r7
 80040ce:	4798      	blx	r3
 80040d0:	8a22      	ldrh	r2, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 80040d2:	b162      	cbz	r2, 80040ee <Out0_Process+0x7a>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80040d4:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <Out0_Process+0xd4>)
    SetEPTxCount(ENDP0, 0);
 80040d6:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80040d8:	f44f 5e40 	mov.w	lr, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 80040dc:	4601      	mov	r1, r0
 80040de:	4a1b      	ldr	r2, [pc, #108]	; (800414c <Out0_Process+0xd8>)

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80040e0:	f8a3 e000 	strh.w	lr, [r3]
    SetEPTxCount(ENDP0, 0);
 80040e4:	4790      	blx	r2
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80040e6:	481a      	ldr	r0, [pc, #104]	; (8004150 <Out0_Process+0xdc>)
 80040e8:	2130      	movs	r1, #48	; 0x30
 80040ea:	8a22      	ldrh	r2, [r4, #16]
 80040ec:	8001      	strh	r1, [r0, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80040ee:	8aa4      	ldrh	r4, [r4, #20]
 80040f0:	4294      	cmp	r4, r2
 80040f2:	d918      	bls.n	8004126 <Out0_Process+0xb2>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 80040f4:	b9da      	cbnz	r2, 800412e <Out0_Process+0xba>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80040f6:	682c      	ldr	r4, [r5, #0]
 80040f8:	2006      	movs	r0, #6
      USB_StatusIn();
 80040fa:	4916      	ldr	r1, [pc, #88]	; (8004154 <Out0_Process+0xe0>)
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80040fc:	7220      	strb	r0, [r4, #8]
      USB_StatusIn();
 80040fe:	680b      	ldr	r3, [r1, #0]
 8004100:	4815      	ldr	r0, [pc, #84]	; (8004158 <Out0_Process+0xe4>)
 8004102:	fa1f fc83 	uxth.w	ip, r3
 8004106:	eb0c 0100 	add.w	r1, ip, r0
 800410a:	004b      	lsls	r3, r1, #1
 800410c:	4810      	ldr	r0, [pc, #64]	; (8004150 <Out0_Process+0xdc>)
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	2130      	movs	r1, #48	; 0x30
 8004112:	7a23      	ldrb	r3, [r4, #8]
 8004114:	8001      	strh	r1, [r0, #0]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8004116:	e7bc      	b.n	8004092 <Out0_Process+0x1e>
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8004118:	4b10      	ldr	r3, [pc, #64]	; (800415c <Out0_Process+0xe8>)
 800411a:	681c      	ldr	r4, [r3, #0]
 800411c:	68e2      	ldr	r2, [r4, #12]
 800411e:	4790      	blx	r2
 8004120:	682c      	ldr	r4, [r5, #0]
 8004122:	2308      	movs	r3, #8
 8004124:	e7b5      	b.n	8004092 <Out0_Process+0x1e>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 8004126:	682c      	ldr	r4, [r5, #0]
 8004128:	2303      	movs	r3, #3
 800412a:	7223      	strb	r3, [r4, #8]
 800412c:	e7b1      	b.n	8004092 <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 800412e:	682c      	ldr	r4, [r5, #0]
 8004130:	2305      	movs	r3, #5
 8004132:	7223      	strb	r3, [r4, #8]
 8004134:	e7ad      	b.n	8004092 <Out0_Process+0x1e>
 8004136:	bf00      	nop
 8004138:	20001630 	.word	0x20001630
 800413c:	08004029 	.word	0x08004029
 8004140:	08004949 	.word	0x08004949
 8004144:	08004725 	.word	0x08004725
 8004148:	20001636 	.word	0x20001636
 800414c:	08004969 	.word	0x08004969
 8004150:	20001638 	.word	0x20001638
 8004154:	40005c50 	.word	0x40005c50
 8004158:	20003002 	.word	0x20003002
 800415c:	20001608 	.word	0x20001608

08004160 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8004160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004164:	4e99      	ldr	r6, [pc, #612]	; (80043cc <Setup0_Process+0x26c>)

  if (pInformation->ControlState != PAUSE)
 8004166:	4c9a      	ldr	r4, [pc, #616]	; (80043d0 <Setup0_Process+0x270>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004168:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 800416a:	6826      	ldr	r6, [r4, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800416c:	4999      	ldr	r1, [pc, #612]	; (80043d4 <Setup0_Process+0x274>)
 800416e:	fa1f fc82 	uxth.w	ip, r2

  if (pInformation->ControlState != PAUSE)
 8004172:	7a32      	ldrb	r2, [r6, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004174:	eb0c 0001 	add.w	r0, ip, r1
 8004178:	0043      	lsls	r3, r0, #1

  if (pInformation->ControlState != PAUSE)
 800417a:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800417c:	b082      	sub	sp, #8
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800417e:	681b      	ldr	r3, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8004180:	d04a      	beq.n	8004218 <Setup0_Process+0xb8>
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004182:	b298      	uxth	r0, r3
 8004184:	f100 5700 	add.w	r7, r0, #536870912	; 0x20000000
 8004188:	f507 5840 	add.w	r8, r7, #12288	; 0x3000
 800418c:	ea4f 0848 	mov.w	r8, r8, lsl #1

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8004190:	4645      	mov	r5, r8
 8004192:	f815 3b01 	ldrb.w	r3, [r5], #1
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8004196:	4f90      	ldr	r7, [pc, #576]	; (80043d8 <Setup0_Process+0x278>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8004198:	7033      	strb	r3, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800419a:	f898 e001 	ldrb.w	lr, [r8, #1]
 800419e:	f886 e001 	strb.w	lr, [r6, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80041a2:	f8b5 0003 	ldrh.w	r0, [r5, #3]
 80041a6:	47b8      	blx	r7
 80041a8:	8070      	strh	r0, [r6, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 80041aa:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 80041ae:	6825      	ldr	r5, [r4, #0]
 80041b0:	47b8      	blx	r7
 80041b2:	80a8      	strh	r0, [r5, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80041b4:	6826      	ldr	r6, [r4, #0]
 80041b6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  }

  pInformation->ControlState = SETTING_UP;
 80041ba:	2101      	movs	r1, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80041bc:	80f3      	strh	r3, [r6, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80041be:	7231      	strb	r1, [r6, #8]
  if (pInformation->USBwLength == 0)
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d02e      	beq.n	8004222 <Setup0_Process+0xc2>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 80041c4:	7871      	ldrb	r1, [r6, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 80041c6:	2906      	cmp	r1, #6
 80041c8:	f000 808e 	beq.w	80042e8 <Setup0_Process+0x188>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80041cc:	2900      	cmp	r1, #0
 80041ce:	d149      	bne.n	8004264 <Setup0_Process+0x104>
 80041d0:	8872      	ldrh	r2, [r6, #2]
 80041d2:	2a00      	cmp	r2, #0
 80041d4:	f000 809f 	beq.w	8004316 <Setup0_Process+0x1b6>
 80041d8:	4d80      	ldr	r5, [pc, #512]	; (80043dc <Setup0_Process+0x27c>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80041da:	682b      	ldr	r3, [r5, #0]
 80041dc:	4608      	mov	r0, r1
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 80041e2:	2803      	cmp	r0, #3
 80041e4:	f000 8112 	beq.w	800440c <Setup0_Process+0x2ac>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80041ee:	8a1a      	ldrh	r2, [r3, #16]
 80041f0:	4562      	cmp	r2, ip
 80041f2:	d04a      	beq.n	800428a <Setup0_Process+0x12a>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80041f4:	2802      	cmp	r0, #2
 80041f6:	d02e      	beq.n	8004256 <Setup0_Process+0xf6>
 80041f8:	2a00      	cmp	r2, #0
 80041fa:	d02c      	beq.n	8004256 <Setup0_Process+0xf6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 80041fc:	f993 e000 	ldrsb.w	lr, [r3]
 8004200:	f1be 0f00 	cmp.w	lr, #0
 8004204:	f2c0 80bd 	blt.w	8004382 <Setup0_Process+0x222>
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8004208:	4975      	ldr	r1, [pc, #468]	; (80043e0 <Setup0_Process+0x280>)
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 800420a:	2003      	movs	r0, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800420c:	f44f 5e40 	mov.w	lr, #12288	; 0x3000
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8004210:	7218      	strb	r0, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8004212:	f8a1 e000 	strh.w	lr, [r1]
 8004216:	e020      	b.n	800425a <Setup0_Process+0xfa>
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
 8004218:	88f3      	ldrh	r3, [r6, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 800421a:	2101      	movs	r1, #1
 800421c:	7231      	strb	r1, [r6, #8]
  if (pInformation->USBwLength == 0)
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1d0      	bne.n	80041c4 <Setup0_Process+0x64>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004222:	f896 c000 	ldrb.w	ip, [r6]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8004226:	7875      	ldrb	r5, [r6, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004228:	f01c 037f 	ands.w	r3, ip, #127	; 0x7f
 800422c:	d030      	beq.n	8004290 <Setup0_Process+0x130>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800422e:	2b01      	cmp	r3, #1
 8004230:	f000 80bd 	beq.w	80043ae <Setup0_Process+0x24e>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8004234:	2b02      	cmp	r3, #2
 8004236:	f000 8101 	beq.w	800443c <Setup0_Process+0x2dc>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800423a:	4b68      	ldr	r3, [pc, #416]	; (80043dc <Setup0_Process+0x27c>)
 800423c:	4628      	mov	r0, r5
 800423e:	681e      	ldr	r6, [r3, #0]
 8004240:	6972      	ldr	r2, [r6, #20]
 8004242:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 8004244:	2803      	cmp	r0, #3
 8004246:	f000 8123 	beq.w	8004490 <Setup0_Process+0x330>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800424a:	2800      	cmp	r0, #0
 800424c:	d03b      	beq.n	80042c6 <Setup0_Process+0x166>
 800424e:	6826      	ldr	r6, [r4, #0]
 8004250:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8004252:	7233      	strb	r3, [r6, #8]
 8004254:	e001      	b.n	800425a <Setup0_Process+0xfa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8004256:	2108      	movs	r1, #8
 8004258:	7219      	strb	r1, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 800425a:	4a62      	ldr	r2, [pc, #392]	; (80043e4 <Setup0_Process+0x284>)
 800425c:	4790      	blx	r2
}
 800425e:	b002      	add	sp, #8
 8004260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8004264:	2908      	cmp	r1, #8
 8004266:	d169      	bne.n	800433c <Setup0_Process+0x1dc>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004268:	7832      	ldrb	r2, [r6, #0]
 800426a:	f012 0f7f 	tst.w	r2, #127	; 0x7f
 800426e:	d1b3      	bne.n	80041d8 <Setup0_Process+0x78>
    {
      CopyRoutine = Standard_GetConfiguration;
 8004270:	4b5d      	ldr	r3, [pc, #372]	; (80043e8 <Setup0_Process+0x288>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8004272:	2100      	movs	r1, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8004274:	61b3      	str	r3, [r6, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8004276:	2000      	movs	r0, #0

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8004278:	8271      	strh	r1, [r6, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 800427a:	4798      	blx	r3
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8004282:	8a1a      	ldrh	r2, [r3, #16]
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
 8004284:	2000      	movs	r0, #0
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8004286:	4562      	cmp	r2, ip
 8004288:	d1b4      	bne.n	80041f4 <Setup0_Process+0x94>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 800428a:	2209      	movs	r2, #9
 800428c:	721a      	strb	r2, [r3, #8]
 800428e:	e7e4      	b.n	800425a <Setup0_Process+0xfa>

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8004290:	2d09      	cmp	r5, #9
 8004292:	f000 80f3 	beq.w	800447c <Setup0_Process+0x31c>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8004296:	2d05      	cmp	r5, #5
 8004298:	f000 80c0 	beq.w	800441c <Setup0_Process+0x2bc>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800429c:	2d03      	cmp	r5, #3
 800429e:	f000 80d9 	beq.w	8004454 <Setup0_Process+0x2f4>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 80042a2:	2d01      	cmp	r5, #1
 80042a4:	d1c9      	bne.n	800423a <Setup0_Process+0xda>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 80042a6:	f896 c003 	ldrb.w	ip, [r6, #3]
 80042aa:	f1bc 0f01 	cmp.w	ip, #1
 80042ae:	d1c4      	bne.n	800423a <Setup0_Process+0xda>
          && pInformation->USBwIndex == 0
 80042b0:	88b2      	ldrh	r2, [r6, #4]
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	d1c1      	bne.n	800423a <Setup0_Process+0xda>
          && ValBit(pInformation->Current_Feature, 5))
 80042b6:	7a76      	ldrb	r6, [r6, #9]
 80042b8:	f016 0f20 	tst.w	r6, #32
 80042bc:	d0bd      	beq.n	800423a <Setup0_Process+0xda>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 80042be:	484b      	ldr	r0, [pc, #300]	; (80043ec <Setup0_Process+0x28c>)
 80042c0:	4780      	blx	r0
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d1b9      	bne.n	800423a <Setup0_Process+0xda>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 80042c6:	4a41      	ldr	r2, [pc, #260]	; (80043cc <Setup0_Process+0x26c>)
 80042c8:	4849      	ldr	r0, [pc, #292]	; (80043f0 <Setup0_Process+0x290>)
 80042ca:	6811      	ldr	r1, [r2, #0]
 80042cc:	2200      	movs	r2, #0
 80042ce:	fa1f fe81 	uxth.w	lr, r1
 80042d2:	eb0e 0300 	add.w	r3, lr, r0
 80042d6:	005e      	lsls	r6, r3, #1
 80042d8:	6032      	str	r2, [r6, #0]
 80042da:	4946      	ldr	r1, [pc, #280]	; (80043f4 <Setup0_Process+0x294>)
 80042dc:	6826      	ldr	r6, [r4, #0]
 80042de:	2030      	movs	r0, #48	; 0x30
 80042e0:	2306      	movs	r3, #6
 80042e2:	8008      	strh	r0, [r1, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80042e4:	7233      	strb	r3, [r6, #8]
 80042e6:	e7b8      	b.n	800425a <Setup0_Process+0xfa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80042e8:	7835      	ldrb	r5, [r6, #0]
 80042ea:	f015 0f7f 	tst.w	r5, #127	; 0x7f
 80042ee:	f47f af73 	bne.w	80041d8 <Setup0_Process+0x78>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 80042f2:	78b3      	ldrb	r3, [r6, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	f000 80c7 	beq.w	8004488 <Setup0_Process+0x328>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	f000 808a 	beq.w	8004414 <Setup0_Process+0x2b4>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8004300:	2b03      	cmp	r3, #3
 8004302:	f47f af69 	bne.w	80041d8 <Setup0_Process+0x78>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8004306:	4d35      	ldr	r5, [pc, #212]	; (80043dc <Setup0_Process+0x27c>)
 8004308:	6829      	ldr	r1, [r5, #0]
 800430a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1b0      	bne.n	8004272 <Setup0_Process+0x112>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8004310:	6820      	ldr	r0, [r4, #0]
 8004312:	7841      	ldrb	r1, [r0, #1]
 8004314:	e761      	b.n	80041da <Setup0_Process+0x7a>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8004316:	6873      	ldr	r3, [r6, #4]
 8004318:	f423 4c7f 	bic.w	ip, r3, #65280	; 0xff00
 800431c:	f5bc 3f00 	cmp.w	ip, #131072	; 0x20000
 8004320:	f47f af5a 	bne.w	80041d8 <Setup0_Process+0x78>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004324:	f896 e000 	ldrb.w	lr, [r6]
 8004328:	f01e 037f 	ands.w	r3, lr, #127	; 0x7f
 800432c:	f040 80b4 	bne.w	8004498 <Setup0_Process+0x338>
        && (pInformation->USBwIndex == 0))
 8004330:	88b0      	ldrh	r0, [r6, #4]
 8004332:	2800      	cmp	r0, #0
 8004334:	f47f af50 	bne.w	80041d8 <Setup0_Process+0x78>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8004338:	4b2f      	ldr	r3, [pc, #188]	; (80043f8 <Setup0_Process+0x298>)
 800433a:	e79a      	b.n	8004272 <Setup0_Process+0x112>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 800433c:	290a      	cmp	r1, #10
 800433e:	f47f af4b 	bne.w	80041d8 <Setup0_Process+0x78>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8004342:	7835      	ldrb	r5, [r6, #0]
 8004344:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8004348:	2b01      	cmp	r3, #1
 800434a:	f47f af45 	bne.w	80041d8 <Setup0_Process+0x78>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 800434e:	7ab0      	ldrb	r0, [r6, #10]
 8004350:	2800      	cmp	r0, #0
 8004352:	f43f af41 	beq.w	80041d8 <Setup0_Process+0x78>
 8004356:	8872      	ldrh	r2, [r6, #2]
 8004358:	2a00      	cmp	r2, #0
 800435a:	f47f af3d 	bne.w	80041d8 <Setup0_Process+0x78>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800435e:	6873      	ldr	r3, [r6, #4]
 8004360:	f423 4e7f 	bic.w	lr, r3, #65280	; 0xff00
 8004364:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
 8004368:	f47f af36 	bne.w	80041d8 <Setup0_Process+0x78>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800436c:	4d1b      	ldr	r5, [pc, #108]	; (80043dc <Setup0_Process+0x27c>)
 800436e:	4611      	mov	r1, r2
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	7970      	ldrb	r0, [r6, #5]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	4790      	blx	r2
 8004378:	2800      	cmp	r0, #0
 800437a:	d1c9      	bne.n	8004310 <Setup0_Process+0x1b0>
 800437c:	6826      	ldr	r6, [r4, #0]
    {
      CopyRoutine = Standard_GetInterface;
 800437e:	4b1f      	ldr	r3, [pc, #124]	; (80043fc <Setup0_Process+0x29c>)
 8004380:	e777      	b.n	8004272 <Setup0_Process+0x112>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8004382:	88d9      	ldrh	r1, [r3, #6]
 8004384:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8004386:	9801      	ldr	r0, [sp, #4]
 8004388:	4282      	cmp	r2, r0
 800438a:	d818      	bhi.n	80043be <Setup0_Process+0x25e>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800438c:	428a      	cmp	r2, r1
 800438e:	f080 80a6 	bcs.w	80044de <Setup0_Process+0x37e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8004392:	4912      	ldr	r1, [pc, #72]	; (80043dc <Setup0_Process+0x27c>)
 8004394:	6808      	ldr	r0, [r1, #0]
 8004396:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 800439a:	428a      	cmp	r2, r1
 800439c:	f080 80a4 	bcs.w	80044e8 <Setup0_Process+0x388>
      {
        Data_Mul_MaxPacketSize = FALSE;
 80043a0:	4a17      	ldr	r2, [pc, #92]	; (8004400 <Setup0_Process+0x2a0>)
 80043a2:	2000      	movs	r0, #0
 80043a4:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 80043a6:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 80043a8:	4b16      	ldr	r3, [pc, #88]	; (8004404 <Setup0_Process+0x2a4>)
 80043aa:	4798      	blx	r3
 80043ac:	e755      	b.n	800425a <Setup0_Process+0xfa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 80043ae:	2d0b      	cmp	r5, #11
 80043b0:	f47f af43 	bne.w	800423a <Setup0_Process+0xda>
    {
      Result = Standard_SetInterface();
 80043b4:	4b14      	ldr	r3, [pc, #80]	; (8004408 <Setup0_Process+0x2a8>)
 80043b6:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d084      	beq.n	80042c6 <Setup0_Process+0x166>
 80043bc:	e73d      	b.n	800423a <Setup0_Process+0xda>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 80043be:	4807      	ldr	r0, [pc, #28]	; (80043dc <Setup0_Process+0x27c>)
 80043c0:	9901      	ldr	r1, [sp, #4]
 80043c2:	6802      	ldr	r2, [r0, #0]
 80043c4:	8219      	strh	r1, [r3, #16]
 80043c6:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 80043ca:	e7ec      	b.n	80043a6 <Setup0_Process+0x246>
 80043cc:	40005c50 	.word	0x40005c50
 80043d0:	20001630 	.word	0x20001630
 80043d4:	20003004 	.word	0x20003004
 80043d8:	080049f5 	.word	0x080049f5
 80043dc:	20001608 	.word	0x20001608
 80043e0:	20001636 	.word	0x20001636
 80043e4:	08004029 	.word	0x08004029
 80043e8:	08003bf5 	.word	0x08003bf5
 80043ec:	08003e4d 	.word	0x08003e4d
 80043f0:	20003002 	.word	0x20003002
 80043f4:	20001638 	.word	0x20001638
 80043f8:	08003c45 	.word	0x08003c45
 80043fc:	08003c1d 	.word	0x08003c1d
 8004400:	200004bc 	.word	0x200004bc
 8004404:	08003d01 	.word	0x08003d01
 8004408:	08003dfd 	.word	0x08003dfd
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
    {
      pInformation->ControlState = PAUSE;
 800440c:	6820      	ldr	r0, [r4, #0]
 800440e:	2109      	movs	r1, #9
 8004410:	7201      	strb	r1, [r0, #8]
 8004412:	e722      	b.n	800425a <Setup0_Process+0xfa>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8004414:	4d46      	ldr	r5, [pc, #280]	; (8004530 <Setup0_Process+0x3d0>)
 8004416:	6828      	ldr	r0, [r5, #0]
 8004418:	6a03      	ldr	r3, [r0, #32]
 800441a:	e777      	b.n	800430c <Setup0_Process+0x1ac>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800441c:	f996 e003 	ldrsb.w	lr, [r6, #3]
 8004420:	f1be 0f00 	cmp.w	lr, #0
 8004424:	db07      	blt.n	8004436 <Setup0_Process+0x2d6>
 8004426:	78b3      	ldrb	r3, [r6, #2]
 8004428:	b92b      	cbnz	r3, 8004436 <Setup0_Process+0x2d6>
          || (pInformation->USBwIndex != 0)
 800442a:	88b0      	ldrh	r0, [r6, #4]
 800442c:	b918      	cbnz	r0, 8004436 <Setup0_Process+0x2d6>
          || (pInformation->Current_Configuration != 0))
 800442e:	7ab1      	ldrb	r1, [r6, #10]
 8004430:	2900      	cmp	r1, #0
 8004432:	f43f af48 	beq.w	80042c6 <Setup0_Process+0x166>
 8004436:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8004438:	7233      	strb	r3, [r6, #8]
 800443a:	e70e      	b.n	800425a <Setup0_Process+0xfa>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800443c:	2d01      	cmp	r5, #1
 800443e:	f43f af3e 	beq.w	80042be <Setup0_Process+0x15e>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8004442:	2d03      	cmp	r5, #3
 8004444:	f47f aef9 	bne.w	800423a <Setup0_Process+0xda>
    {
      Result = Standard_SetEndPointFeature();
 8004448:	493a      	ldr	r1, [pc, #232]	; (8004534 <Setup0_Process+0x3d4>)
 800444a:	4788      	blx	r1
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 800444c:	2800      	cmp	r0, #0
 800444e:	f43f af3a 	beq.w	80042c6 <Setup0_Process+0x166>
 8004452:	e6f2      	b.n	800423a <Setup0_Process+0xda>
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8004454:	f896 c003 	ldrb.w	ip, [r6, #3]
 8004458:	f1bc 0f01 	cmp.w	ip, #1
 800445c:	f47f aeed 	bne.w	800423a <Setup0_Process+0xda>
          && (pInformation->USBwIndex == 0))
 8004460:	88b2      	ldrh	r2, [r6, #4]
 8004462:	2a00      	cmp	r2, #0
 8004464:	f47f aee9 	bne.w	800423a <Setup0_Process+0xda>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8004468:	7a71      	ldrb	r1, [r6, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800446a:	4833      	ldr	r0, [pc, #204]	; (8004538 <Setup0_Process+0x3d8>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 800446c:	f041 0e20 	orr.w	lr, r1, #32
 8004470:	f886 e009 	strb.w	lr, [r6, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8004474:	6803      	ldr	r3, [r0, #0]
 8004476:	69de      	ldr	r6, [r3, #28]
 8004478:	47b0      	blx	r6
 800447a:	e724      	b.n	80042c6 <Setup0_Process+0x166>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 800447c:	4a2f      	ldr	r2, [pc, #188]	; (800453c <Setup0_Process+0x3dc>)
 800447e:	4790      	blx	r2
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8004480:	2800      	cmp	r0, #0
 8004482:	f43f af20 	beq.w	80042c6 <Setup0_Process+0x166>
 8004486:	e6d8      	b.n	800423a <Setup0_Process+0xda>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8004488:	4d29      	ldr	r5, [pc, #164]	; (8004530 <Setup0_Process+0x3d0>)
 800448a:	682b      	ldr	r3, [r5, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	e73d      	b.n	800430c <Setup0_Process+0x1ac>


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 8004490:	6826      	ldr	r6, [r4, #0]
 8004492:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8004494:	7233      	strb	r3, [r6, #8]
 8004496:	e6e0      	b.n	800425a <Setup0_Process+0xfa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8004498:	2b01      	cmp	r3, #1
 800449a:	d030      	beq.n	80044fe <Setup0_Process+0x39e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800449c:	2b02      	cmp	r3, #2
 800449e:	f47f ae9b 	bne.w	80041d8 <Setup0_Process+0x78>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 80044a2:	7973      	ldrb	r3, [r6, #5]
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 80044a4:	f013 0f80 	tst.w	r3, #128	; 0x80
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 80044a8:	f003 020f 	and.w	r2, r3, #15
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 80044ac:	d136      	bne.n	800451c <Setup0_Process+0x3bc>
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 80044ae:	0090      	lsls	r0, r2, #2
 80044b0:	f100 4e80 	add.w	lr, r0, #1073741824	; 0x40000000
 80044b4:	f50e 4cb8 	add.w	ip, lr, #23552	; 0x5c00
 80044b8:	f8dc 5000 	ldr.w	r5, [ip]
 80044bc:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80044c0:	481f      	ldr	r0, [pc, #124]	; (8004540 <Setup0_Process+0x3e0>)
 80044c2:	f890 c000 	ldrb.w	ip, [r0]
 80044c6:	4562      	cmp	r2, ip
 80044c8:	f4bf ae86 	bcs.w	80041d8 <Setup0_Process+0x78>
 80044cc:	f013 0f70 	tst.w	r3, #112	; 0x70
 80044d0:	f47f ae82 	bne.w	80041d8 <Setup0_Process+0x78>
          && (Status != 0))
 80044d4:	2d00      	cmp	r5, #0
 80044d6:	f43f ae7f 	beq.w	80041d8 <Setup0_Process+0x78>
      {
        CopyRoutine = Standard_GetStatus;
 80044da:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <Setup0_Process+0x3e4>)
 80044dc:	e6c9      	b.n	8004272 <Setup0_Process+0x112>
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 80044de:	4914      	ldr	r1, [pc, #80]	; (8004530 <Setup0_Process+0x3d0>)
 80044e0:	680a      	ldr	r2, [r1, #0]
 80044e2:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 80044e6:	e75e      	b.n	80043a6 <Setup0_Process+0x246>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 80044e8:	fb92 fcf1 	sdiv	ip, r2, r1
 80044ec:	fb01 201c 	mls	r0, r1, ip, r2
 80044f0:	2800      	cmp	r0, #0
 80044f2:	f47f af58 	bne.w	80043a6 <Setup0_Process+0x246>
      {
        Data_Mul_MaxPacketSize = TRUE;
 80044f6:	4a14      	ldr	r2, [pc, #80]	; (8004548 <Setup0_Process+0x3e8>)
 80044f8:	2001      	movs	r0, #1
 80044fa:	7010      	strb	r0, [r2, #0]
 80044fc:	e753      	b.n	80043a6 <Setup0_Process+0x246>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 80044fe:	4d0c      	ldr	r5, [pc, #48]	; (8004530 <Setup0_Process+0x3d0>)
 8004500:	7970      	ldrb	r0, [r6, #5]
 8004502:	682b      	ldr	r3, [r5, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	4790      	blx	r2
 8004508:	2800      	cmp	r0, #0
 800450a:	f47f af01 	bne.w	8004310 <Setup0_Process+0x1b0>
          && (pInformation->Current_Configuration != 0))
 800450e:	6826      	ldr	r6, [r4, #0]
 8004510:	7ab1      	ldrb	r1, [r6, #10]
 8004512:	2900      	cmp	r1, #0
 8004514:	f47f af10 	bne.w	8004338 <Setup0_Process+0x1d8>
 8004518:	7871      	ldrb	r1, [r6, #1]
 800451a:	e65e      	b.n	80041da <Setup0_Process+0x7a>

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800451c:	0090      	lsls	r0, r2, #2
 800451e:	f100 4e80 	add.w	lr, r0, #1073741824	; 0x40000000
 8004522:	f50e 4cb8 	add.w	ip, lr, #23552	; 0x5c00
 8004526:	f8dc 5000 	ldr.w	r5, [ip]
 800452a:	f005 0530 	and.w	r5, r5, #48	; 0x30
 800452e:	e7c7      	b.n	80044c0 <Setup0_Process+0x360>
 8004530:	20001608 	.word	0x20001608
 8004534:	08003f59 	.word	0x08003f59
 8004538:	2000162c 	.word	0x2000162c
 800453c:	08003dc1 	.word	0x08003dc1
 8004540:	2000030c 	.word	0x2000030c
 8004544:	08003c45 	.word	0x08003c45
 8004548:	200004bc 	.word	0x200004bc

0800454c <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 800454c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800454e:	4b2a      	ldr	r3, [pc, #168]	; (80045f8 <SetDeviceAddress+0xac>)
 8004550:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8004552:	2e00      	cmp	r6, #0
 8004554:	d049      	beq.n	80045ea <SetDeviceAddress+0x9e>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8004556:	4a29      	ldr	r2, [pc, #164]	; (80045fc <SetDeviceAddress+0xb0>)
 8004558:	f640 7c0f 	movw	ip, #3855	; 0xf0f
 800455c:	6814      	ldr	r4, [r2, #0]
 800455e:	1e71      	subs	r1, r6, #1
 8004560:	ea04 030c 	and.w	r3, r4, ip
 8004564:	f443 4c00 	orr.w	ip, r3, #32768	; 0x8000
 8004568:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 800456c:	6013      	str	r3, [r2, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800456e:	2301      	movs	r3, #1
 8004570:	429e      	cmp	r6, r3
 8004572:	f001 0101 	and.w	r1, r1, #1
 8004576:	d938      	bls.n	80045ea <SetDeviceAddress+0x9e>
 8004578:	b169      	cbz	r1, 8004596 <SetDeviceAddress+0x4a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800457a:	4921      	ldr	r1, [pc, #132]	; (8004600 <SetDeviceAddress+0xb4>)
 800457c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004580:	680c      	ldr	r4, [r1, #0]
 8004582:	f248 0c81 	movw	ip, #32897	; 0x8081
 8004586:	ea04 0302 	and.w	r3, r4, r2
 800458a:	ea43 020c 	orr.w	r2, r3, ip
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800458e:	2302      	movs	r3, #2
 8004590:	429e      	cmp	r6, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8004592:	600a      	str	r2, [r1, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8004594:	d929      	bls.n	80045ea <SetDeviceAddress+0x9e>
 8004596:	b2dc      	uxtb	r4, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8004598:	00a2      	lsls	r2, r4, #2
 800459a:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 800459e:	f501 4cb8 	add.w	ip, r1, #23552	; 0x5c00
 80045a2:	f8dc 7000 	ldr.w	r7, [ip]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80045a6:	3301      	adds	r3, #1
 80045a8:	b2d9      	uxtb	r1, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80045aa:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 80045ae:	f640 740f 	movw	r4, #3855	; 0xf0f
 80045b2:	ea07 0404 	and.w	r4, r7, r4
 80045b6:	f045 0280 	orr.w	r2, r5, #128	; 0x80
 80045ba:	008f      	lsls	r7, r1, #2
 80045bc:	ea42 0504 	orr.w	r5, r2, r4
 80045c0:	f107 4480 	add.w	r4, r7, #1073741824	; 0x40000000
 80045c4:	f8cc 5000 	str.w	r5, [ip]
 80045c8:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 80045cc:	6825      	ldr	r5, [r4, #0]
 80045ce:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80045d2:	f640 720f 	movw	r2, #3855	; 0xf0f
 80045d6:	f041 0c80 	orr.w	ip, r1, #128	; 0x80
 80045da:	ea05 0202 	and.w	r2, r5, r2
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80045de:	3301      	adds	r3, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80045e0:	ea4c 0102 	orr.w	r1, ip, r2
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80045e4:	429e      	cmp	r6, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80045e6:	6021      	str	r1, [r4, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80045e8:	d8d5      	bhi.n	8004596 <SetDeviceAddress+0x4a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <SetDeviceAddress+0xb8>)
 80045ec:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80045f0:	6018      	str	r0, [r3, #0]
}
 80045f2:	bcf0      	pop	{r4, r5, r6, r7}
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	2000030c 	.word	0x2000030c
 80045fc:	40005c00 	.word	0x40005c00
 8004600:	40005c04 	.word	0x40005c04
 8004604:	40005c4c 	.word	0x40005c4c

08004608 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8004608:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 800460a:	4c17      	ldr	r4, [pc, #92]	; (8004668 <In0_Process+0x60>)
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8004610:	2a02      	cmp	r2, #2
 8004612:	d015      	beq.n	8004640 <In0_Process+0x38>
 8004614:	2a04      	cmp	r2, #4
 8004616:	d013      	beq.n	8004640 <In0_Process+0x38>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8004618:	2a06      	cmp	r2, #6
 800461a:	d004      	beq.n	8004626 <In0_Process+0x1e>
 800461c:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800461e:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8004620:	4912      	ldr	r1, [pc, #72]	; (800466c <In0_Process+0x64>)
 8004622:	4788      	blx	r1
}
 8004624:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8004626:	785a      	ldrb	r2, [r3, #1]
 8004628:	2a05      	cmp	r2, #5
 800462a:	d011      	beq.n	8004650 <In0_Process+0x48>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 800462c:	4a10      	ldr	r2, [pc, #64]	; (8004670 <In0_Process+0x68>)
 800462e:	6813      	ldr	r3, [r2, #0]
 8004630:	6898      	ldr	r0, [r3, #8]
 8004632:	4780      	blx	r0
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8004638:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 800463a:	490c      	ldr	r1, [pc, #48]	; (800466c <In0_Process+0x64>)
 800463c:	4788      	blx	r1
}
 800463e:	bd10      	pop	{r4, pc}
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8004640:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <In0_Process+0x6c>)
 8004642:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8004644:	6823      	ldr	r3, [r4, #0]
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8004646:	4909      	ldr	r1, [pc, #36]	; (800466c <In0_Process+0x64>)

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8004648:	7a1a      	ldrb	r2, [r3, #8]
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800464a:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 800464c:	4788      	blx	r1
}
 800464e:	bd10      	pop	{r4, pc}
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8004650:	7818      	ldrb	r0, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8004652:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004656:	d1e9      	bne.n	800462c <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8004658:	78d8      	ldrb	r0, [r3, #3]
 800465a:	4907      	ldr	r1, [pc, #28]	; (8004678 <In0_Process+0x70>)
 800465c:	4788      	blx	r1
      pUser_Standard_Requests->User_SetDeviceAddress();
 800465e:	4a07      	ldr	r2, [pc, #28]	; (800467c <In0_Process+0x74>)
 8004660:	6813      	ldr	r3, [r2, #0]
 8004662:	6a19      	ldr	r1, [r3, #32]
 8004664:	4788      	blx	r1
 8004666:	e7e1      	b.n	800462c <In0_Process+0x24>
 8004668:	20001630 	.word	0x20001630
 800466c:	08004029 	.word	0x08004029
 8004670:	20001608 	.word	0x20001608
 8004674:	08003d01 	.word	0x08003d01
 8004678:	0800454d 	.word	0x0800454d
 800467c:	2000162c 	.word	0x2000162c

08004680 <NOP_Process>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop

08004684 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8004684:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 8004686:	4a07      	ldr	r2, [pc, #28]	; (80046a4 <USB_Init+0x20>)
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <USB_Init+0x24>)
  pInformation->ControlState = 2;
 800468a:	2102      	movs	r1, #2
  pProperty = &Device_Property;
 800468c:	4807      	ldr	r0, [pc, #28]	; (80046ac <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 800468e:	601a      	str	r2, [r3, #0]
  pInformation->ControlState = 2;
 8004690:	7211      	strb	r1, [r2, #8]
  pProperty = &Device_Property;
 8004692:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <USB_Init+0x2c>)
  pUser_Standard_Requests = &User_Standard_Requests;
 8004694:	4907      	ldr	r1, [pc, #28]	; (80046b4 <USB_Init+0x30>)
 8004696:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <USB_Init+0x34>)
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8004698:	6018      	str	r0, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800469a:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800469c:	6803      	ldr	r3, [r0, #0]
 800469e:	4798      	blx	r3
}
 80046a0:	bd08      	pop	{r3, pc}
 80046a2:	bf00      	nop
 80046a4:	20001610 	.word	0x20001610
 80046a8:	20001630 	.word	0x20001630
 80046ac:	20000288 	.word	0x20000288
 80046b0:	20001608 	.word	0x20001608
 80046b4:	200002b8 	.word	0x200002b8
 80046b8:	2000162c 	.word	0x2000162c

080046bc <UserToPMABufferCopy>:
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80046bc:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80046be:	1052      	asrs	r2, r2, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80046c0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80046c2:	d02d      	beq.n	8004720 <UserToPMABufferCopy+0x64>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80046c4:	4603      	mov	r3, r0
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80046c6:	7844      	ldrb	r4, [r0, #1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80046c8:	f813 cb02 	ldrb.w	ip, [r3], #2
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 80046cc:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 80046d0:	3a01      	subs	r2, #1
 80046d2:	f501 5540 	add.w	r5, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80046d6:	ea4c 2004 	orr.w	r0, ip, r4, lsl #8
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 80046da:	006d      	lsls	r5, r5, #1
  for (i = n; i != 0; i--)
 80046dc:	4611      	mov	r1, r2
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 80046de:	8028      	strh	r0, [r5, #0]
 80046e0:	f002 0201 	and.w	r2, r2, #1
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80046e4:	2004      	movs	r0, #4
 80046e6:	b1d9      	cbz	r1, 8004720 <UserToPMABufferCopy+0x64>
 80046e8:	b142      	cbz	r2, 80046fc <UserToPMABufferCopy+0x40>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80046ea:	785c      	ldrb	r4, [r3, #1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80046ec:	f813 cb02 	ldrb.w	ip, [r3], #2
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80046f0:	2008      	movs	r0, #8
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80046f2:	ea4c 2204 	orr.w	r2, ip, r4, lsl #8
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80046f6:	3901      	subs	r1, #1
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 80046f8:	80aa      	strh	r2, [r5, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80046fa:	d011      	beq.n	8004720 <UserToPMABufferCopy+0x64>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80046fc:	461a      	mov	r2, r3
 80046fe:	f812 cb02 	ldrb.w	ip, [r2], #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004702:	785f      	ldrb	r7, [r3, #1]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004704:	1d04      	adds	r4, r0, #4
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004706:	ea4c 2607 	orr.w	r6, ip, r7, lsl #8
    *pdwVal++ = temp2;
 800470a:	5346      	strh	r6, [r0, r5]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800470c:	f893 c002 	ldrb.w	ip, [r3, #2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004710:	7856      	ldrb	r6, [r2, #1]
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8004712:	1c93      	adds	r3, r2, #2
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004714:	ea4c 2006 	orr.w	r0, ip, r6, lsl #8
    *pdwVal++ = temp2;
 8004718:	5360      	strh	r0, [r4, r5]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800471a:	1d20      	adds	r0, r4, #4
 800471c:	3902      	subs	r1, #2
 800471e:	d1ed      	bne.n	80046fc <UserToPMABufferCopy+0x40>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8004720:	bcf0      	pop	{r4, r5, r6, r7}
 8004722:	4770      	bx	lr

08004724 <PMAToUserBufferCopy>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8004724:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004726:	1052      	asrs	r2, r2, #1
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004728:	b470      	push	{r4, r5, r6}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800472a:	d020      	beq.n	800476e <PMAToUserBufferCopy+0x4a>
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800472c:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8004730:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	3a01      	subs	r2, #1
 8004738:	f853 4b04 	ldr.w	r4, [r3], #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800473c:	4611      	mov	r1, r2
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800473e:	f820 4b02 	strh.w	r4, [r0], #2
 8004742:	f002 0201 	and.w	r2, r2, #1
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004746:	b191      	cbz	r1, 800476e <PMAToUserBufferCopy+0x4a>
 8004748:	b12a      	cbz	r2, 8004756 <PMAToUserBufferCopy+0x32>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800474a:	f853 2b04 	ldr.w	r2, [r3], #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800474e:	3901      	subs	r1, #1
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8004750:	f820 2b02 	strh.w	r2, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004754:	d00b      	beq.n	800476e <PMAToUserBufferCopy+0x4a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8004756:	461c      	mov	r4, r3
 8004758:	f854 6b04 	ldr.w	r6, [r4], #4
 800475c:	685d      	ldr	r5, [r3, #4]
 800475e:	4602      	mov	r2, r0
 8004760:	f822 6b02 	strh.w	r6, [r2], #2
 8004764:	1d23      	adds	r3, r4, #4
 8004766:	8045      	strh	r5, [r0, #2]
*                  - wPMABufAddr = address into PMA.
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8004768:	1c90      	adds	r0, r2, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800476a:	3902      	subs	r1, #2
 800476c:	d1f3      	bne.n	8004756 <PMAToUserBufferCopy+0x32>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800476e:	bc70      	pop	{r4, r5, r6}
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop

08004774 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8004774:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8004778:	4a02      	ldr	r2, [pc, #8]	; (8004784 <SetBTABLE+0x10>)
 800477a:	ea00 0301 	and.w	r3, r0, r1
 800477e:	6013      	str	r3, [r2, #0]
}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40005c50 	.word	0x40005c50

08004788 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8004788:	0080      	lsls	r0, r0, #2
 800478a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800478e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	f648 1c8f 	movw	ip, #35215	; 0x898f
 8004798:	ea03 000c 	and.w	r0, r3, ip
 800479c:	ea40 0301 	orr.w	r3, r0, r1
 80047a0:	6013      	str	r3, [r2, #0]
}
 80047a2:	4770      	bx	lr

080047a4 <SetEPTxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 80047a4:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 80047a6:	0084      	lsls	r4, r0, #2
 80047a8:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 80047ac:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80047b0:	6804      	ldr	r4, [r0, #0]
 80047b2:	f001 0c10 	and.w	ip, r1, #16
 80047b6:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 80047ba:	fa1f f28c 	uxth.w	r2, ip
 80047be:	ea04 0303 	and.w	r3, r4, r3
 80047c2:	b10a      	cbz	r2, 80047c8 <SetEPTxStatus+0x24>
 80047c4:	f083 0310 	eor.w	r3, r3, #16
 80047c8:	f001 0220 	and.w	r2, r1, #32
 80047cc:	b291      	uxth	r1, r2
 80047ce:	b109      	cbz	r1, 80047d4 <SetEPTxStatus+0x30>
 80047d0:	f083 0320 	eor.w	r3, r3, #32
 80047d4:	f443 4c00 	orr.w	ip, r3, #32768	; 0x8000
 80047d8:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 80047dc:	6003      	str	r3, [r0, #0]
}
 80047de:	bc10      	pop	{r4}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop

080047e4 <SetEPRxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 80047e4:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 80047e6:	0084      	lsls	r4, r0, #2
 80047e8:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 80047ec:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80047f0:	6804      	ldr	r4, [r0, #0]
 80047f2:	f401 5c80 	and.w	ip, r1, #4096	; 0x1000
 80047f6:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80047fa:	fa1f f28c 	uxth.w	r2, ip
 80047fe:	ea04 0303 	and.w	r3, r4, r3
 8004802:	b10a      	cbz	r2, 8004808 <SetEPRxStatus+0x24>
 8004804:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004808:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
 800480c:	b291      	uxth	r1, r2
 800480e:	b109      	cbz	r1, 8004814 <SetEPRxStatus+0x30>
 8004810:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004814:	f443 4c00 	orr.w	ip, r3, #32768	; 0x8000
 8004818:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 800481c:	6003      	str	r3, [r0, #0]
}
 800481e:	bc10      	pop	{r4}
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop

08004824 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8004824:	0081      	lsls	r1, r0, #2
 8004826:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 800482a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800482e:	6810      	ldr	r0, [r2, #0]
 8004830:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8004834:	ea00 0c03 	and.w	ip, r0, r3
 8004838:	f08c 0130 	eor.w	r1, ip, #48	; 0x30
 800483c:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8004840:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 8004844:	6013      	str	r3, [r2, #0]
}
 8004846:	4770      	bx	lr

08004848 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8004848:	0081      	lsls	r1, r0, #2
 800484a:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 800484e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8004852:	6810      	ldr	r0, [r2, #0]
 8004854:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8004858:	ea00 0c03 	and.w	ip, r0, r3
 800485c:	f48c 5140 	eor.w	r1, ip, #12288	; 0x3000
 8004860:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8004864:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 8004868:	6013      	str	r3, [r2, #0]
}
 800486a:	4770      	bx	lr

0800486c <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 800486c:	0080      	lsls	r0, r0, #2
 800486e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8004872:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8004876:	6813      	ldr	r3, [r2, #0]
 8004878:	f640 6c0f 	movw	ip, #3599	; 0xe0f
 800487c:	ea03 010c 	and.w	r1, r3, ip
 8004880:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8004884:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 8004888:	6013      	str	r3, [r2, #0]
}
 800488a:	4770      	bx	lr

0800488c <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 800488c:	0080      	lsls	r0, r0, #2
 800488e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8004892:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800489c:	d009      	beq.n	80048b2 <ClearDTOG_RX+0x26>
 800489e:	6819      	ldr	r1, [r3, #0]
 80048a0:	f640 700f 	movw	r0, #3855	; 0xf0f
 80048a4:	ea01 0200 	and.w	r2, r1, r0
 80048a8:	f442 4c40 	orr.w	ip, r2, #49152	; 0xc000
 80048ac:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
 80048b0:	6019      	str	r1, [r3, #0]
 80048b2:	4770      	bx	lr

080048b4 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 80048b4:	0080      	lsls	r0, r0, #2
 80048b6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80048ba:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80048c4:	d009      	beq.n	80048da <ClearDTOG_TX+0x26>
 80048c6:	6819      	ldr	r1, [r3, #0]
 80048c8:	f640 700f 	movw	r0, #3855	; 0xf0f
 80048cc:	ea01 0200 	and.w	r2, r1, r0
 80048d0:	f442 4c00 	orr.w	ip, r2, #32768	; 0x8000
 80048d4:	f04c 01c0 	orr.w	r1, ip, #192	; 0xc0
 80048d8:	6019      	str	r1, [r3, #0]
 80048da:	4770      	bx	lr

080048dc <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 80048dc:	4a07      	ldr	r2, [pc, #28]	; (80048fc <SetEPTxAddr+0x20>)
 80048de:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	ea01 0303 	and.w	r3, r1, r3
 80048e8:	b292      	uxth	r2, r2
 80048ea:	eb02 0cc0 	add.w	ip, r2, r0, lsl #3
 80048ee:	f10c 5100 	add.w	r1, ip, #536870912	; 0x20000000
 80048f2:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 80048f6:	0042      	lsls	r2, r0, #1
 80048f8:	6013      	str	r3, [r2, #0]
}
 80048fa:	4770      	bx	lr
 80048fc:	40005c50 	.word	0x40005c50

08004900 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <SetEPRxAddr+0x20>)
*                  wAddr: new address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 8004902:	b410      	push	{r4}
  _SetEPRxAddr(bEpNum, wAddr);
 8004904:	681c      	ldr	r4, [r3, #0]
 8004906:	4a07      	ldr	r2, [pc, #28]	; (8004924 <SetEPRxAddr+0x24>)
 8004908:	b2a4      	uxth	r4, r4
 800490a:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
 800490e:	1898      	adds	r0, r3, r2
 8004910:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
 8004914:	0042      	lsls	r2, r0, #1
 8004916:	ea01 030c 	and.w	r3, r1, ip
 800491a:	6013      	str	r3, [r2, #0]
}
 800491c:	bc10      	pop	{r4}
 800491e:	4770      	bx	lr
 8004920:	40005c50 	.word	0x40005c50
 8004924:	20003004 	.word	0x20003004

08004928 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8004928:	4906      	ldr	r1, [pc, #24]	; (8004944 <GetEPTxAddr+0x1c>)
 800492a:	680b      	ldr	r3, [r1, #0]
 800492c:	fa1f fc83 	uxth.w	ip, r3
 8004930:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 8004934:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8004938:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 800493c:	0043      	lsls	r3, r0, #1
}
 800493e:	8818      	ldrh	r0, [r3, #0]
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40005c50 	.word	0x40005c50

08004948 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8004948:	4a05      	ldr	r2, [pc, #20]	; (8004960 <GetEPRxAddr+0x18>)
 800494a:	4906      	ldr	r1, [pc, #24]	; (8004964 <GetEPRxAddr+0x1c>)
 800494c:	6813      	ldr	r3, [r2, #0]
 800494e:	fa1f fc83 	uxth.w	ip, r3
 8004952:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 8004956:	1850      	adds	r0, r2, r1
 8004958:	0043      	lsls	r3, r0, #1
}
 800495a:	8818      	ldrh	r0, [r3, #0]
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40005c50 	.word	0x40005c50
 8004964:	20003004 	.word	0x20003004

08004968 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8004968:	4a05      	ldr	r2, [pc, #20]	; (8004980 <SetEPTxCount+0x18>)
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <SetEPTxCount+0x1c>)
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	fa1f fc82 	uxth.w	ip, r2
 8004972:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 8004976:	18d0      	adds	r0, r2, r3
 8004978:	0043      	lsls	r3, r0, #1
 800497a:	6019      	str	r1, [r3, #0]
}
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40005c50 	.word	0x40005c50
 8004984:	20003002 	.word	0x20003002

08004988 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8004988:	4a0f      	ldr	r2, [pc, #60]	; (80049c8 <SetEPRxCount+0x40>)
 800498a:	4b10      	ldr	r3, [pc, #64]	; (80049cc <SetEPRxCount+0x44>)
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	fa1f fc82 	uxth.w	ip, r2
 8004992:	eb0c 0203 	add.w	r2, ip, r3
 8004996:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	293e      	cmp	r1, #62	; 0x3e
 800499e:	d90a      	bls.n	80049b6 <SetEPRxCount+0x2e>
 80049a0:	094a      	lsrs	r2, r1, #5
 80049a2:	f011 0f1f 	tst.w	r1, #31
 80049a6:	d101      	bne.n	80049ac <SetEPRxCount+0x24>
 80049a8:	1e50      	subs	r0, r2, #1
 80049aa:	b282      	uxth	r2, r0
 80049ac:	0292      	lsls	r2, r2, #10
 80049ae:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 80049b2:	6019      	str	r1, [r3, #0]
 80049b4:	4770      	bx	lr
 80049b6:	084a      	lsrs	r2, r1, #1
 80049b8:	f011 0f01 	tst.w	r1, #1
 80049bc:	bf18      	it	ne
 80049be:	3201      	addne	r2, #1
 80049c0:	0290      	lsls	r0, r2, #10
 80049c2:	6018      	str	r0, [r3, #0]
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40005c50 	.word	0x40005c50
 80049cc:	20003006 	.word	0x20003006

080049d0 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <GetEPRxCount+0x1c>)
 80049d2:	4907      	ldr	r1, [pc, #28]	; (80049f0 <GetEPRxCount+0x20>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	b293      	uxth	r3, r2
 80049d8:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
 80049dc:	eb0c 0201 	add.w	r2, ip, r1
 80049e0:	0053      	lsls	r3, r2, #1
 80049e2:	6819      	ldr	r1, [r3, #0]
}
 80049e4:	0588      	lsls	r0, r1, #22
 80049e6:	0d80      	lsrs	r0, r0, #22
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40005c50 	.word	0x40005c50
 80049f0:	20003006 	.word	0x20003006

080049f4 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 80049f4:	b2c3      	uxtb	r3, r0
 80049f6:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 80049f8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop

08004a00 <USB_SIL_Init>:
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8004a00:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <USB_SIL_Init+0x14>)
 8004a02:	2000      	movs	r0, #0
 8004a04:	6010      	str	r0, [r2, #0]
  wInterrupt_Mask = IMR_MSK;
 8004a06:	4904      	ldr	r1, [pc, #16]	; (8004a18 <USB_SIL_Init+0x18>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8004a08:	4a04      	ldr	r2, [pc, #16]	; (8004a1c <USB_SIL_Init+0x1c>)
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8004a0a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a0e:	800b      	strh	r3, [r1, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8004a10:	6013      	str	r3, [r2, #0]
  return 0;
}
 8004a12:	4770      	bx	lr
 8004a14:	40005c44 	.word	0x40005c44
 8004a18:	20001634 	.word	0x20001634
 8004a1c:	40005c40 	.word	0x40005c40

08004a20 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8004a20:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8004a22:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8004a26:	4a07      	ldr	r2, [pc, #28]	; (8004a44 <USB_SIL_Read+0x24>)
 8004a28:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8004a2a:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8004a2c:	4790      	blx	r2
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8004a2e:	4906      	ldr	r1, [pc, #24]	; (8004a48 <USB_SIL_Read+0x28>)
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8004a30:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8004a32:	4628      	mov	r0, r5
 8004a34:	4788      	blx	r1
 8004a36:	4622      	mov	r2, r4
 8004a38:	4601      	mov	r1, r0
 8004a3a:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <USB_SIL_Read+0x2c>)
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 8004a40:	4620      	mov	r0, r4
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	080049d1 	.word	0x080049d1
 8004a48:	08004949 	.word	0x08004949
 8004a4c:	08004725 	.word	0x08004725

08004a50 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	4f65      	ldr	r7, [pc, #404]	; (8004bec <CTR_LP+0x19c>)
 8004a56:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
 8004a58:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8004a5a:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 8004c04 <CTR_LP+0x1b4>
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8004a5e:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8004c18 <CTR_LP+0x1c8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8004a62:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8004bf8 <CTR_LP+0x1a8>
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8004a66:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8004a6a:	46b9      	mov	r9, r7
 8004a6c:	f8db 0000 	ldr.w	r0, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8004a70:	4c5f      	ldr	r4, [pc, #380]	; (8004bf0 <CTR_LP+0x1a0>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8004a72:	8038      	strh	r0, [r7, #0]
 8004a74:	8839      	ldrh	r1, [r7, #0]

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 8004a76:	4d5f      	ldr	r5, [pc, #380]	; (8004bf4 <CTR_LP+0x1a4>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8004a78:	b20b      	sxth	r3, r1
 8004a7a:	2b00      	cmp	r3, #0
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8004a7c:	f64b 72bf 	movw	r2, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8004a80:	4e5d      	ldr	r6, [pc, #372]	; (8004bf8 <CTR_LP+0x1a8>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8004a82:	f280 80a7 	bge.w	8004bd4 <CTR_LP+0x184>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8004a86:	f8b9 c000 	ldrh.w	ip, [r9]
 8004a8a:	f00c 000f 	and.w	r0, ip, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8004a8e:	0083      	lsls	r3, r0, #2
 8004a90:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 8004a94:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8004a98:	f88a 0000 	strb.w	r0, [sl]
    if (EPindex == 0)
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d135      	bne.n	8004b0c <CTR_LP+0xbc>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8004aa0:	6821      	ldr	r1, [r4, #0]
 8004aa2:	f8a8 1000 	strh.w	r1, [r8]
	    SaveTState = SaveRState & EPTX_STAT;
 8004aa6:	f8b8 0000 	ldrh.w	r0, [r8]
 8004aaa:	f000 0c30 	and.w	ip, r0, #48	; 0x30
 8004aae:	f8a5 c000 	strh.w	ip, [r5]
	    SaveRState &=  EPRX_STAT;	
 8004ab2:	f8b8 3000 	ldrh.w	r3, [r8]
 8004ab6:	f403 5140 	and.w	r1, r3, #12288	; 0x3000
 8004aba:	f8a8 1000 	strh.w	r1, [r8]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8004abe:	6820      	ldr	r0, [r4, #0]
 8004ac0:	ea00 0202 	and.w	r2, r0, r2
 8004ac4:	f482 5c00 	eor.w	ip, r2, #8192	; 0x2000
 8004ac8:	f08c 0320 	eor.w	r3, ip, #32
 8004acc:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8004ad0:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8004ad4:	6020      	str	r0, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8004ad6:	f8b9 2000 	ldrh.w	r2, [r9]
 8004ada:	f012 0f10 	tst.w	r2, #16
 8004ade:	d045      	beq.n	8004b6c <CTR_LP+0x11c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8004ae0:	6820      	ldr	r0, [r4, #0]
 8004ae2:	f8ad 0006 	strh.w	r0, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8004ae6:	f8bd c006 	ldrh.w	ip, [sp, #6]
 8004aea:	f41c 6f00 	tst.w	ip, #2048	; 0x800
 8004aee:	d174      	bne.n	8004bda <CTR_LP+0x18a>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8004af0:	f8bd c006 	ldrh.w	ip, [sp, #6]
 8004af4:	fa0f f38c 	sxth.w	r3, ip
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	dab7      	bge.n	8004a6c <CTR_LP+0x1c>
        {
          _ClearEP_CTR_RX(ENDP0);
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	f640 718f 	movw	r1, #3983	; 0xf8f
 8004b02:	ea02 0001 	and.w	r0, r2, r1
 8004b06:	6020      	str	r0, [r4, #0]
          Out0_Process();
 8004b08:	4b3c      	ldr	r3, [pc, #240]	; (8004bfc <CTR_LP+0x1ac>)
 8004b0a:	e036      	b.n	8004b7a <CTR_LP+0x12a>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8004b0c:	680e      	ldr	r6, [r1, #0]
 8004b0e:	f8ad 6006 	strh.w	r6, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8004b12:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8004b16:	b22c      	sxth	r4, r5
 8004b18:	2c00      	cmp	r4, #0
 8004b1a:	db19      	blt.n	8004b50 <CTR_LP+0x100>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8004b1c:	f8bd c006 	ldrh.w	ip, [sp, #6]
 8004b20:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8004b24:	d0a2      	beq.n	8004a6c <CTR_LP+0x1c>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8004b26:	f89a 0000 	ldrb.w	r0, [sl]
 8004b2a:	f648 7e0f 	movw	lr, #36623	; 0x8f0f
 8004b2e:	0082      	lsls	r2, r0, #2
 8004b30:	f102 4c80 	add.w	ip, r2, #1073741824	; 0x40000000
 8004b34:	f50c 44b8 	add.w	r4, ip, #23552	; 0x5c00
 8004b38:	6826      	ldr	r6, [r4, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8004b3a:	4831      	ldr	r0, [pc, #196]	; (8004c00 <CTR_LP+0x1b0>)
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8004b3c:	ea06 050e 	and.w	r5, r6, lr
 8004b40:	6025      	str	r5, [r4, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8004b42:	f89a 1000 	ldrb.w	r1, [sl]
 8004b46:	1e4b      	subs	r3, r1, #1
 8004b48:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8004b4c:	4790      	blx	r2
 8004b4e:	e78d      	b.n	8004a6c <CTR_LP+0x1c>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8004b50:	680e      	ldr	r6, [r1, #0]
 8004b52:	f640 7e8f 	movw	lr, #3983	; 0xf8f
 8004b56:	ea06 050e 	and.w	r5, r6, lr

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8004b5a:	4c2a      	ldr	r4, [pc, #168]	; (8004c04 <CTR_LP+0x1b4>)
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8004b5c:	600d      	str	r5, [r1, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8004b5e:	7821      	ldrb	r1, [r4, #0]
 8004b60:	4829      	ldr	r0, [pc, #164]	; (8004c08 <CTR_LP+0x1b8>)
 8004b62:	1e4b      	subs	r3, r1, #1
 8004b64:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8004b68:	4790      	blx	r2
 8004b6a:	e7d7      	b.n	8004b1c <CTR_LP+0xcc>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	f648 7e0f 	movw	lr, #36623	; 0x8f0f
 8004b72:	ea03 020e 	and.w	r2, r3, lr
        In0_Process();
 8004b76:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <CTR_LP+0x1bc>)
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8004b78:	6022      	str	r2, [r4, #0]
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 8004b7a:	4798      	blx	r3
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8004b7c:	6821      	ldr	r1, [r4, #0]
 8004b7e:	8832      	ldrh	r2, [r6, #0]
 8004b80:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8004b84:	f402 5c80 	and.w	ip, r2, #4096	; 0x1000
 8004b88:	fa1f f08c 	uxth.w	r0, ip
 8004b8c:	ea01 0303 	and.w	r3, r1, r3
 8004b90:	b108      	cbz	r0, 8004b96 <CTR_LP+0x146>
 8004b92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b96:	8831      	ldrh	r1, [r6, #0]
 8004b98:	f401 5e00 	and.w	lr, r1, #8192	; 0x2000
 8004b9c:	fa1f f08e 	uxth.w	r0, lr
 8004ba0:	b108      	cbz	r0, 8004ba6 <CTR_LP+0x156>
 8004ba2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ba6:	8828      	ldrh	r0, [r5, #0]
 8004ba8:	f000 0c10 	and.w	ip, r0, #16
 8004bac:	fa1f f28c 	uxth.w	r2, ip
 8004bb0:	b10a      	cbz	r2, 8004bb6 <CTR_LP+0x166>
 8004bb2:	f083 0310 	eor.w	r3, r3, #16
 8004bb6:	882a      	ldrh	r2, [r5, #0]
 8004bb8:	f002 0e20 	and.w	lr, r2, #32
 8004bbc:	fa1f f18e 	uxth.w	r1, lr
 8004bc0:	b109      	cbz	r1, 8004bc6 <CTR_LP+0x176>
 8004bc2:	f083 0320 	eor.w	r3, r3, #32
 8004bc6:	4912      	ldr	r1, [pc, #72]	; (8004c10 <CTR_LP+0x1c0>)
 8004bc8:	ea43 0c01 	orr.w	ip, r3, r1
 8004bcc:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <CTR_LP+0x1a0>)
 8004bce:	fa1f f08c 	uxth.w	r0, ip
 8004bd2:	6018      	str	r0, [r3, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8004bd4:	b003      	add	sp, #12
 8004bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8004bda:	6822      	ldr	r2, [r4, #0]
 8004bdc:	f640 7e8f 	movw	lr, #3983	; 0xf8f
 8004be0:	ea02 010e 	and.w	r1, r2, lr
 8004be4:	6021      	str	r1, [r4, #0]
          Setup0_Process();
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <CTR_LP+0x1c4>)
 8004be8:	e7c7      	b.n	8004b7a <CTR_LP+0x12a>
 8004bea:	bf00      	nop
 8004bec:	20000dd8 	.word	0x20000dd8
 8004bf0:	40005c00 	.word	0x40005c00
 8004bf4:	20001638 	.word	0x20001638
 8004bf8:	20001636 	.word	0x20001636
 8004bfc:	08004075 	.word	0x08004075
 8004c00:	20000248 	.word	0x20000248
 8004c04:	2000160c 	.word	0x2000160c
 8004c08:	20000264 	.word	0x20000264
 8004c0c:	08004609 	.word	0x08004609
 8004c10:	ffff8080 	.word	0xffff8080
 8004c14:	08004161 	.word	0x08004161
 8004c18:	40005c44 	.word	0x40005c44
 8004c1c:	69646152 	.word	0x69646152
 8004c20:	6e49206f 	.word	0x6e49206f
 8004c24:	4f207469 	.word	0x4f207469
 8004c28:	203a204b 	.word	0x203a204b
 8004c2c:	4d204d46 	.word	0x4d204d46
 8004c30:	0a65646f 	.word	0x0a65646f
 8004c34:	00000000 	.word	0x00000000
 8004c38:	69646152 	.word	0x69646152
 8004c3c:	6e49206f 	.word	0x6e49206f
 8004c40:	46207469 	.word	0x46207469
 8004c44:	0a6c6961 	.word	0x0a6c6961
 8004c48:	00000000 	.word	0x00000000
 8004c4c:	00000a0a 	.word	0x00000a0a
 8004c50:	2a2a2a2a 	.word	0x2a2a2a2a
 8004c54:	2a2a2a2a 	.word	0x2a2a2a2a
 8004c58:	2a2a2a2a 	.word	0x2a2a2a2a
 8004c5c:	2a2a2a2a 	.word	0x2a2a2a2a
 8004c60:	2a2a2a2a 	.word	0x2a2a2a2a
 8004c64:	2a2a2a2a 	.word	0x2a2a2a2a
 8004c68:	2a2a2a2a 	.word	0x2a2a2a2a
 8004c6c:	2a2a2a2a 	.word	0x2a2a2a2a
 8004c70:	2a2a2a2a 	.word	0x2a2a2a2a
 8004c74:	2a2a2a2a 	.word	0x2a2a2a2a
 8004c78:	2a2a2a2a 	.word	0x2a2a2a2a
 8004c7c:	2a2a2a2a 	.word	0x2a2a2a2a
 8004c80:	2a2a2a2a 	.word	0x2a2a2a2a
 8004c84:	0a2a2a2a 	.word	0x0a2a2a2a
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	20202020 	.word	0x20202020
 8004c90:	20202020 	.word	0x20202020
 8004c94:	20202020 	.word	0x20202020
 8004c98:	20202020 	.word	0x20202020
 8004c9c:	20202020 	.word	0x20202020
 8004ca0:	4c472020 	.word	0x4c472020
 8004ca4:	56206463 	.word	0x56206463
 8004ca8:	20322e30 	.word	0x20322e30
 8004cac:	20202020 	.word	0x20202020
 8004cb0:	20202020 	.word	0x20202020
 8004cb4:	20202020 	.word	0x20202020
 8004cb8:	20202020 	.word	0x20202020
 8004cbc:	20202020 	.word	0x20202020
 8004cc0:	000a2020 	.word	0x000a2020
 8004cc4:	2e31202a 	.word	0x2e31202a
 8004cc8:	44434c20 	.word	0x44434c20
 8004ccc:	656c4320 	.word	0x656c4320
 8004cd0:	20207261 	.word	0x20207261
 8004cd4:	20202020 	.word	0x20202020
 8004cd8:	20202020 	.word	0x20202020
 8004cdc:	20202020 	.word	0x20202020
 8004ce0:	20202020 	.word	0x20202020
 8004ce4:	20202020 	.word	0x20202020
 8004ce8:	20202020 	.word	0x20202020
 8004cec:	20202020 	.word	0x20202020
 8004cf0:	20202020 	.word	0x20202020
 8004cf4:	20202020 	.word	0x20202020
 8004cf8:	0a2a2020 	.word	0x0a2a2020
 8004cfc:	00000000 	.word	0x00000000
 8004d00:	2e32202a 	.word	0x2e32202a
 8004d04:	756f4320 	.word	0x756f4320
 8004d08:	2b20746e 	.word	0x2b20746e
 8004d0c:	2020202b 	.word	0x2020202b
 8004d10:	20202020 	.word	0x20202020
 8004d14:	20202020 	.word	0x20202020
 8004d18:	20202020 	.word	0x20202020
 8004d1c:	20202020 	.word	0x20202020
 8004d20:	20202020 	.word	0x20202020
 8004d24:	20202020 	.word	0x20202020
 8004d28:	20202020 	.word	0x20202020
 8004d2c:	20202020 	.word	0x20202020
 8004d30:	20202020 	.word	0x20202020
 8004d34:	0a2a2020 	.word	0x0a2a2020
 8004d38:	00000000 	.word	0x00000000
 8004d3c:	2e33202a 	.word	0x2e33202a
 8004d40:	756f4320 	.word	0x756f4320
 8004d44:	2d20746e 	.word	0x2d20746e
 8004d48:	2020202d 	.word	0x2020202d
 8004d4c:	20202020 	.word	0x20202020
 8004d50:	20202020 	.word	0x20202020
 8004d54:	20202020 	.word	0x20202020
 8004d58:	20202020 	.word	0x20202020
 8004d5c:	20202020 	.word	0x20202020
 8004d60:	20202020 	.word	0x20202020
 8004d64:	20202020 	.word	0x20202020
 8004d68:	20202020 	.word	0x20202020
 8004d6c:	20202020 	.word	0x20202020
 8004d70:	0a2a2020 	.word	0x0a2a2020
 8004d74:	00000000 	.word	0x00000000
 8004d78:	2e34202a 	.word	0x2e34202a
 8004d7c:	766f4d20 	.word	0x766f4d20
 8004d80:	69432065 	.word	0x69432065
 8004d84:	656c6372 	.word	0x656c6372
 8004d88:	61745320 	.word	0x61745320
 8004d8c:	20207472 	.word	0x20207472
 8004d90:	20202020 	.word	0x20202020
 8004d94:	20202020 	.word	0x20202020
 8004d98:	20202020 	.word	0x20202020
 8004d9c:	20202020 	.word	0x20202020
 8004da0:	20202020 	.word	0x20202020
 8004da4:	20202020 	.word	0x20202020
 8004da8:	20202020 	.word	0x20202020
 8004dac:	0a2a2020 	.word	0x0a2a2020
 8004db0:	00000000 	.word	0x00000000
 8004db4:	2e35202a 	.word	0x2e35202a
 8004db8:	766f4d20 	.word	0x766f4d20
 8004dbc:	69432065 	.word	0x69432065
 8004dc0:	656c6372 	.word	0x656c6372
 8004dc4:	646e4520 	.word	0x646e4520
 8004dc8:	20202020 	.word	0x20202020
 8004dcc:	20202020 	.word	0x20202020
 8004dd0:	20202020 	.word	0x20202020
 8004dd4:	20202020 	.word	0x20202020
 8004dd8:	20202020 	.word	0x20202020
 8004ddc:	20202020 	.word	0x20202020
 8004de0:	20202020 	.word	0x20202020
 8004de4:	20202020 	.word	0x20202020
 8004de8:	0a2a2020 	.word	0x0a2a2020
 8004dec:	00000000 	.word	0x00000000
 8004df0:	2e36202a 	.word	0x2e36202a
 8004df4:	20202020 	.word	0x20202020
 8004df8:	20202020 	.word	0x20202020
 8004dfc:	20202020 	.word	0x20202020
 8004e00:	20202020 	.word	0x20202020
 8004e04:	20202020 	.word	0x20202020
 8004e08:	20202020 	.word	0x20202020
 8004e0c:	20202020 	.word	0x20202020
 8004e10:	20202020 	.word	0x20202020
 8004e14:	20202020 	.word	0x20202020
 8004e18:	20202020 	.word	0x20202020
 8004e1c:	20202020 	.word	0x20202020
 8004e20:	20202020 	.word	0x20202020
 8004e24:	0a2a2020 	.word	0x0a2a2020
 8004e28:	00000000 	.word	0x00000000
 8004e2c:	2e37202a 	.word	0x2e37202a
 8004e30:	20202020 	.word	0x20202020
 8004e34:	20202020 	.word	0x20202020
 8004e38:	20202020 	.word	0x20202020
 8004e3c:	20202020 	.word	0x20202020
 8004e40:	20202020 	.word	0x20202020
 8004e44:	20202020 	.word	0x20202020
 8004e48:	20202020 	.word	0x20202020
 8004e4c:	20202020 	.word	0x20202020
 8004e50:	20202020 	.word	0x20202020
 8004e54:	20202020 	.word	0x20202020
 8004e58:	20202020 	.word	0x20202020
 8004e5c:	20202020 	.word	0x20202020
 8004e60:	0a2a2020 	.word	0x0a2a2020
 8004e64:	00000000 	.word	0x00000000
 8004e68:	2e38202a 	.word	0x2e38202a
 8004e6c:	20202020 	.word	0x20202020
 8004e70:	20202020 	.word	0x20202020
 8004e74:	20202020 	.word	0x20202020
 8004e78:	20202020 	.word	0x20202020
 8004e7c:	20202020 	.word	0x20202020
 8004e80:	20202020 	.word	0x20202020
 8004e84:	20202020 	.word	0x20202020
 8004e88:	20202020 	.word	0x20202020
 8004e8c:	20202020 	.word	0x20202020
 8004e90:	20202020 	.word	0x20202020
 8004e94:	20202020 	.word	0x20202020
 8004e98:	20202020 	.word	0x20202020
 8004e9c:	0a2a2020 	.word	0x0a2a2020
 8004ea0:	00000000 	.word	0x00000000
 8004ea4:	2e39202a 	.word	0x2e39202a
 8004ea8:	20202020 	.word	0x20202020
 8004eac:	20202020 	.word	0x20202020
 8004eb0:	20202020 	.word	0x20202020
 8004eb4:	20202020 	.word	0x20202020
 8004eb8:	20202020 	.word	0x20202020
 8004ebc:	20202020 	.word	0x20202020
 8004ec0:	20202020 	.word	0x20202020
 8004ec4:	20202020 	.word	0x20202020
 8004ec8:	20202020 	.word	0x20202020
 8004ecc:	20202020 	.word	0x20202020
 8004ed0:	20202020 	.word	0x20202020
 8004ed4:	20202020 	.word	0x20202020
 8004ed8:	0a2a2020 	.word	0x0a2a2020
 8004edc:	00000000 	.word	0x00000000
 8004ee0:	2e6d202a 	.word	0x2e6d202a
 8004ee4:	654d2020 	.word	0x654d2020
 8004ee8:	2020756e 	.word	0x2020756e
 8004eec:	20202020 	.word	0x20202020
 8004ef0:	20202020 	.word	0x20202020
 8004ef4:	20202020 	.word	0x20202020
 8004ef8:	20202020 	.word	0x20202020
 8004efc:	20202020 	.word	0x20202020
 8004f00:	20202020 	.word	0x20202020
 8004f04:	20202020 	.word	0x20202020
 8004f08:	20202020 	.word	0x20202020
 8004f0c:	20202020 	.word	0x20202020
 8004f10:	20202020 	.word	0x20202020
 8004f14:	0a2a2020 	.word	0x0a2a2020
 8004f18:	00000000 	.word	0x00000000
 8004f1c:	0000000a 	.word	0x0000000a
 8004f20:	00203e3e 	.word	0x00203e3e
 8004f24:	2044434c 	.word	0x2044434c
 8004f28:	61656c43 	.word	0x61656c43
 8004f2c:	000a2072 	.word	0x000a2072
 8004f30:	6e756f43 	.word	0x6e756f43
 8004f34:	2b2b2074 	.word	0x2b2b2074
 8004f38:	00000a20 	.word	0x00000a20
 8004f3c:	72616d53 	.word	0x72616d53
 8004f40:	626f7274 	.word	0x626f7274
 8004f44:	4220746f 	.word	0x4220746f
 8004f48:	00000044 	.word	0x00000044
 8004f4c:	6e756f43 	.word	0x6e756f43
 8004f50:	203a2074 	.word	0x203a2074
 8004f54:	00643425 	.word	0x00643425
 8004f58:	6e756f43 	.word	0x6e756f43
 8004f5c:	2d2d2074 	.word	0x2d2d2074
 8004f60:	00000a20 	.word	0x00000a20

08004f64 <Virtual_Com_Port_StringVendor>:
 8004f64:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8004f74:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8004f84:	00630069 00000073                       i.c.s...

08004f8c <Virtual_Com_Port_DeviceDescriptor>:
 8004f8c:	02000112 40000002 57400483 02010200     .......@..@W....
 8004f9c:	00000103                                ....

08004fa0 <Virtual_Com_Port_StringLangID>:
 8004fa0:	04090304                                ....

08004fa4 <Virtual_Com_Port_StringProduct>:
 8004fa4:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8004fb4:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8004fc4:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8004fd4:	00000020                                 ...

08004fd8 <Virtual_Com_Port_ConfigDescriptor>:
 8004fd8:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8004fe8:	24050001 05011000 01000124 02022404     ...$....$....$..
 8004ff8:	00062405 82050701 ff000803 00010409     .$..............
 8005008:	00000a02 03050700 00004002 02810507     .........@......
 8005018:	00000040                                @...
