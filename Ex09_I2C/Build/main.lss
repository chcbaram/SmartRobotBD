
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004538  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000310  20000000  08004538  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000122c  20000400  08004a00  00010400  2**9
                  ALLOC
  3 ._usrstack    00000100  2000162c  08005c2c  00010400  2**0
                  ALLOC
  4 .ARM.attributes 00000033  00000000  00000000  00010310  2**0
                  CONTENTS, READONLY
  5 .debug_info   00008d81  00000000  00000000  00010343  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002d70  00000000  00000000  000190c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000082de  00000000  00000000  0001be34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000a80  00000000  00000000  00024112  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001928  00000000  00000000  00024b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003172  00000000  00000000  000264ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002292  00000000  00000000  0002962c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000070  00000000  00000000  0002b8be  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001974  00000000  00000000  0002b930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 f1 11 00 08                             .P. ....

08000008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800000a:	f241 53cd 	movw	r3, #5581	; 0x15cd
 800000e:	2000      	movs	r0, #0
 8000010:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000014:	4798      	blx	r3
 8000016:	bd08      	pop	{r3, pc}

08000018 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000018:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001a:	4b0a      	ldr	r3, [pc, #40]	; (8000044 <main+0x2c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800001c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001e:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000020:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000022:	4809      	ldr	r0, [pc, #36]	; (8000048 <main+0x30>)
 8000024:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000026:	4d09      	ldr	r5, [pc, #36]	; (800004c <main+0x34>)
 8000028:	2202      	movs	r2, #2
 800002a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800002e:	4b08      	ldr	r3, [pc, #32]	; (8000050 <main+0x38>)
 8000030:	4620      	mov	r0, r4
 8000032:	9400      	str	r4, [sp, #0]
 8000034:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );		
 8000036:	4620      	mov	r0, r4
 8000038:	4906      	ldr	r1, [pc, #24]	; (8000054 <main+0x3c>)
 800003a:	4788      	blx	r1
	Main_Init();

	//-- 명령어 처리
	//
	//Ap_RadioMenu_ExeCmd();    
	Ap_GLcdMenu_ExeCmd();    
 800003c:	4a06      	ldr	r2, [pc, #24]	; (8000058 <main+0x40>)
 800003e:	4790      	blx	r2
 8000040:	e7fe      	b.n	8000040 <main+0x28>
 8000042:	bf00      	nop
 8000044:	080012bd 	.word	0x080012bd
 8000048:	0800005d 	.word	0x0800005d
 800004c:	080019e9 	.word	0x080019e9
 8000050:	08000009 	.word	0x08000009
 8000054:	08001a09 	.word	0x08001a09
 8000058:	0800021d 	.word	0x0800021d

0800005c <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 800005c:	4770      	bx	lr
 800005e:	bf00      	nop

08000060 <Ap_GCldMenu_MoveCircleTick_2nd>:
	cnt++;
}


void Ap_GCldMenu_MoveCircleTick_2nd( void )
{
 8000060:	b538      	push	{r3, r4, r5, lr}
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 35, HW_N5110G_WIDTH, 45 );           						
	Hw_N5110G_DrawCircle( 10 + x, 40, 3, 0 ); 							
 8000062:	4c16      	ldr	r4, [pc, #88]	; (80000bc <Ap_GCldMenu_MoveCircleTick_2nd+0x5c>)
{
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 35, HW_N5110G_WIDTH, 45 );           						
 8000064:	2000      	movs	r0, #0
 8000066:	2123      	movs	r1, #35	; 0x23
 8000068:	2254      	movs	r2, #84	; 0x54
 800006a:	232d      	movs	r3, #45	; 0x2d
 800006c:	4d14      	ldr	r5, [pc, #80]	; (80000c0 <Ap_GCldMenu_MoveCircleTick_2nd+0x60>)
 800006e:	47a8      	blx	r5
	Hw_N5110G_DrawCircle( 10 + x, 40, 3, 0 ); 							
 8000070:	f994 0000 	ldrsb.w	r0, [r4]
 8000074:	2128      	movs	r1, #40	; 0x28
 8000076:	300a      	adds	r0, #10
 8000078:	2203      	movs	r2, #3
 800007a:	2300      	movs	r3, #0
 800007c:	b280      	uxth	r0, r0
 800007e:	4d11      	ldr	r5, [pc, #68]	; (80000c4 <Ap_GCldMenu_MoveCircleTick_2nd+0x64>)
 8000080:	47a8      	blx	r5
 	Hw_N5110G_DrawRequest();
 8000082:	4b11      	ldr	r3, [pc, #68]	; (80000c8 <Ap_GCldMenu_MoveCircleTick_2nd+0x68>)
 8000084:	4798      	blx	r3
 	
 	x += dir;
 8000086:	4911      	ldr	r1, [pc, #68]	; (80000cc <Ap_GCldMenu_MoveCircleTick_2nd+0x6c>)
 8000088:	7822      	ldrb	r2, [r4, #0]
 800008a:	7808      	ldrb	r0, [r1, #0]
 800008c:	1883      	adds	r3, r0, r2
 800008e:	b2d8      	uxtb	r0, r3
 8000090:	b2c3      	uxtb	r3, r0
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 8000092:	b25a      	sxtb	r2, r3
 8000094:	2a44      	cmp	r2, #68	; 0x44
	
	Hw_N5110G_DrawClearRect( 0, 35, HW_N5110G_WIDTH, 45 );           						
	Hw_N5110G_DrawCircle( 10 + x, 40, 3, 0 ); 							
 	Hw_N5110G_DrawRequest();
 	
 	x += dir;
 8000096:	7023      	strb	r3, [r4, #0]
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 8000098:	dd05      	ble.n	80000a6 <Ap_GCldMenu_MoveCircleTick_2nd+0x46>
 	{
 		dir = -1;
 		x += dir;
 800009a:	1e42      	subs	r2, r0, #1
 800009c:	b2d3      	uxtb	r3, r2
 	
 	x += dir;
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 	{
 		dir = -1;
 800009e:	20ff      	movs	r0, #255	; 0xff
 80000a0:	7008      	strb	r0, [r1, #0]
 		x += dir;
 80000a2:	7023      	strb	r3, [r4, #0]
 80000a4:	b25a      	sxtb	r2, r3
 	}

 	if( x < 0 ) 
 80000a6:	2a00      	cmp	r2, #0
 80000a8:	da03      	bge.n	80000b2 <Ap_GCldMenu_MoveCircleTick_2nd+0x52>
 	{
 		dir = 1; 		
 		x  += dir;
 80000aa:	3301      	adds	r3, #1
 		x += dir;
 	}

 	if( x < 0 ) 
 	{
 		dir = 1; 		
 80000ac:	2001      	movs	r0, #1
 80000ae:	7008      	strb	r0, [r1, #0]
 		x  += dir;
 80000b0:	7023      	strb	r3, [r4, #0]
 	}

	cnt++;
 80000b2:	4907      	ldr	r1, [pc, #28]	; (80000d0 <Ap_GCldMenu_MoveCircleTick_2nd+0x70>)
 80000b4:	780a      	ldrb	r2, [r1, #0]
 80000b6:	1c53      	adds	r3, r2, #1
 80000b8:	700b      	strb	r3, [r1, #0]
 80000ba:	bd38      	pop	{r3, r4, r5, pc}
 80000bc:	20000403 	.word	0x20000403
 80000c0:	08002095 	.word	0x08002095
 80000c4:	08002199 	.word	0x08002199
 80000c8:	08002085 	.word	0x08002085
 80000cc:	20000001 	.word	0x20000001
 80000d0:	20000404 	.word	0x20000404

080000d4 <Ap_GCldMenu_MoveCircleTick_1st>:




void Ap_GCldMenu_MoveCircleTick_1st( void )
{
 80000d4:	b538      	push	{r3, r4, r5, lr}
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 25, HW_N5110G_WIDTH, 35 );           						
	Hw_N5110G_DrawCircle( 10 + x, 30, 5, 0 ); 								
 80000d6:	4c16      	ldr	r4, [pc, #88]	; (8000130 <Ap_GCldMenu_MoveCircleTick_1st+0x5c>)
{
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 25, HW_N5110G_WIDTH, 35 );           						
 80000d8:	2000      	movs	r0, #0
 80000da:	2119      	movs	r1, #25
 80000dc:	2254      	movs	r2, #84	; 0x54
 80000de:	2323      	movs	r3, #35	; 0x23
 80000e0:	4d14      	ldr	r5, [pc, #80]	; (8000134 <Ap_GCldMenu_MoveCircleTick_1st+0x60>)
 80000e2:	47a8      	blx	r5
	Hw_N5110G_DrawCircle( 10 + x, 30, 5, 0 ); 								
 80000e4:	f994 0000 	ldrsb.w	r0, [r4]
 80000e8:	211e      	movs	r1, #30
 80000ea:	300a      	adds	r0, #10
 80000ec:	2205      	movs	r2, #5
 80000ee:	2300      	movs	r3, #0
 80000f0:	b280      	uxth	r0, r0
 80000f2:	4d11      	ldr	r5, [pc, #68]	; (8000138 <Ap_GCldMenu_MoveCircleTick_1st+0x64>)
 80000f4:	47a8      	blx	r5
 	Hw_N5110G_DrawRequest();
 80000f6:	4b11      	ldr	r3, [pc, #68]	; (800013c <Ap_GCldMenu_MoveCircleTick_1st+0x68>)
 80000f8:	4798      	blx	r3
 	
 	x += dir;
 80000fa:	4911      	ldr	r1, [pc, #68]	; (8000140 <Ap_GCldMenu_MoveCircleTick_1st+0x6c>)
 80000fc:	7822      	ldrb	r2, [r4, #0]
 80000fe:	7808      	ldrb	r0, [r1, #0]
 8000100:	1883      	adds	r3, r0, r2
 8000102:	b2d8      	uxtb	r0, r3
 8000104:	b2c3      	uxtb	r3, r0
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 8000106:	b25a      	sxtb	r2, r3
 8000108:	2a44      	cmp	r2, #68	; 0x44
	
	Hw_N5110G_DrawClearRect( 0, 25, HW_N5110G_WIDTH, 35 );           						
	Hw_N5110G_DrawCircle( 10 + x, 30, 5, 0 ); 								
 	Hw_N5110G_DrawRequest();
 	
 	x += dir;
 800010a:	7023      	strb	r3, [r4, #0]
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 800010c:	dd05      	ble.n	800011a <Ap_GCldMenu_MoveCircleTick_1st+0x46>
 	{
 		dir = -1;
 		x += dir;
 800010e:	1e42      	subs	r2, r0, #1
 8000110:	b2d3      	uxtb	r3, r2
 	
 	x += dir;
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 	{
 		dir = -1;
 8000112:	20ff      	movs	r0, #255	; 0xff
 8000114:	7008      	strb	r0, [r1, #0]
 		x += dir;
 8000116:	7023      	strb	r3, [r4, #0]
 8000118:	b25a      	sxtb	r2, r3
 	}

 	if( x < 0 ) 
 800011a:	2a00      	cmp	r2, #0
 800011c:	da03      	bge.n	8000126 <Ap_GCldMenu_MoveCircleTick_1st+0x52>
 	{
 		dir = 1; 		
 		x  += dir;
 800011e:	3301      	adds	r3, #1
 		x += dir;
 	}

 	if( x < 0 ) 
 	{
 		dir = 1; 		
 8000120:	2001      	movs	r0, #1
 8000122:	7008      	strb	r0, [r1, #0]
 		x  += dir;
 8000124:	7023      	strb	r3, [r4, #0]
 	}

	cnt++;
 8000126:	4907      	ldr	r1, [pc, #28]	; (8000144 <Ap_GCldMenu_MoveCircleTick_1st+0x70>)
 8000128:	780a      	ldrb	r2, [r1, #0]
 800012a:	1c53      	adds	r3, r2, #1
 800012c:	700b      	strb	r3, [r1, #0]
 800012e:	bd38      	pop	{r3, r4, r5, pc}
 8000130:	20000402 	.word	0x20000402
 8000134:	08002095 	.word	0x08002095
 8000138:	08002199 	.word	0x08002199
 800013c:	08002085 	.word	0x08002085
 8000140:	20000000 	.word	0x20000000
 8000144:	20000401 	.word	0x20000401

08000148 <Ap_GLcdMenu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
 8000148:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
 800014a:	f244 104c 	movw	r0, #16716	; 0x414c
 800014e:	f640 444d 	movw	r4, #3149	; 0xc4d
	Lb_printf("*******************************************************\n");
 8000152:	f244 1550 	movw	r5, #16720	; 0x4150
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 8000156:	f6c0 0400 	movt	r4, #2048	; 0x800
	Lb_printf("*******************************************************\n");
 800015a:	f6c0 0500 	movt	r5, #2048	; 0x800
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 800015e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000162:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000164:	4628      	mov	r0, r5
 8000166:	47a0      	blx	r4
	Lb_printf("                      GLcd V0.2                       \n");
 8000168:	f244 108c 	movw	r0, #16780	; 0x418c
 800016c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000170:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000172:	4628      	mov	r0, r5
 8000174:	47a0      	blx	r4
	Lb_printf("* 1. LCD Clear                                        *\n");
 8000176:	f244 10c4 	movw	r0, #16836	; 0x41c4
 800017a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800017e:	47a0      	blx	r4
	Lb_printf("* 2. Count ++                                         *\n");
 8000180:	f244 2000 	movw	r0, #16896	; 0x4200
 8000184:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000188:	47a0      	blx	r4
	Lb_printf("* 3. Count --                                         *\n");
 800018a:	f244 203c 	movw	r0, #16956	; 0x423c
 800018e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000192:	47a0      	blx	r4
	Lb_printf("* 4. Move Circle Start                                *\n");
 8000194:	f244 2078 	movw	r0, #17016	; 0x4278
 8000198:	f6c0 0000 	movt	r0, #2048	; 0x800
 800019c:	47a0      	blx	r4
	Lb_printf("* 5. Move Circle End                                  *\n");
 800019e:	f244 20b4 	movw	r0, #17076	; 0x42b4
 80001a2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001a6:	47a0      	blx	r4
	Lb_printf("* 6. I2C HW                                           *\n");
 80001a8:	f244 20f0 	movw	r0, #17136	; 0x42f0
 80001ac:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001b0:	47a0      	blx	r4
	Lb_printf("* 7.                                                  *\n");
 80001b2:	f244 302c 	movw	r0, #17196	; 0x432c
 80001b6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001ba:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 80001bc:	f244 3068 	movw	r0, #17256	; 0x4368
 80001c0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001c4:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 80001c6:	f244 30a4 	movw	r0, #17316	; 0x43a4
 80001ca:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001ce:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 80001d0:	f244 30e0 	movw	r0, #17376	; 0x43e0
 80001d4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001d8:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80001da:	4628      	mov	r0, r5
 80001dc:	47a0      	blx	r4
	Lb_printf("\n");
 80001de:	f244 401c 	movw	r0, #17436	; 0x441c
 80001e2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001e6:	47a0      	blx	r4
 80001e8:	bd38      	pop	{r3, r4, r5, pc}
 80001ea:	bf00      	nop

080001ec <Ap_GLcdMenu_GetCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_GetCmd(void)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 80001ee:	f244 4020 	movw	r0, #17440	; 0x4420
 80001f2:	f640 444d 	movw	r4, #3149	; 0xc4d
 80001f6:	f6c0 0400 	movt	r4, #2048	; 0x800
 80001fa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001fe:	47a0      	blx	r4

    key=get_byte();
 8000200:	f241 43e5 	movw	r3, #5349	; 0x14e5
 8000204:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000208:	4798      	blx	r3
 800020a:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 800020c:	f244 401c 	movw	r0, #17436	; 0x441c
 8000210:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000214:	47a0      	blx	r4
	
    return key;
}
 8000216:	4628      	mov	r0, r5
 8000218:	bd38      	pop	{r3, r4, r5, pc}
 800021a:	bf00      	nop

0800021c <Ap_GLcdMenu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();	
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
 8000220:	2400      	movs	r4, #0
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 8000222:	b086      	sub	sp, #24
	static s8  CircleX  = 0;	
	u8 I2C_Data[10];		
	
	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();	
 8000224:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8000428 <Ap_GLcdMenu_ExeCmd+0x20c>
 8000228:	47c0      	blx	r8
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
 800022a:	4d71      	ldr	r5, [pc, #452]	; (80003f0 <Ap_GLcdMenu_ExeCmd+0x1d4>)
 800022c:	2001      	movs	r0, #1
 800022e:	2132      	movs	r1, #50	; 0x32
 8000230:	2202      	movs	r2, #2
 8000232:	4b70      	ldr	r3, [pc, #448]	; (80003f4 <Ap_GLcdMenu_ExeCmd+0x1d8>)
 8000234:	9400      	str	r4, [sp, #0]
 8000236:	47a8      	blx	r5
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
 8000238:	2002      	movs	r0, #2
 800023a:	9400      	str	r4, [sp, #0]
 800023c:	2164      	movs	r1, #100	; 0x64
 800023e:	4602      	mov	r2, r0
 8000240:	4b6d      	ldr	r3, [pc, #436]	; (80003f8 <Ap_GLcdMenu_ExeCmd+0x1dc>)
 8000242:	47a8      	blx	r5
 8000244:	4c6d      	ldr	r4, [pc, #436]	; (80003fc <Ap_GLcdMenu_ExeCmd+0x1e0>)
				Hw_Timer_Stop( HW_TIMER_CH_DEBUG1 );
				Hw_Timer_Stop( HW_TIMER_CH_DEBUG2 );
               break;  

           case '6':
           		Hw_I2C_Write( 0, 0x68<<1, I2C_Data, 0 );
 8000246:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 800042c <Ap_GLcdMenu_ExeCmd+0x210>
				Hw_Timer_Start( HW_TIMER_CH_DEBUG1 );
				Hw_Timer_Start( HW_TIMER_CH_DEBUG2 );
               break;  

           case '5':
				Hw_Timer_Stop( HW_TIMER_CH_DEBUG1 );
 800024a:	4f6d      	ldr	r7, [pc, #436]	; (8000400 <Ap_GLcdMenu_ExeCmd+0x1e4>)
				Hw_N5110G_DrawRequest();
						
               break; 

           case '4':
				Hw_Timer_Start( HW_TIMER_CH_DEBUG1 );
 800024c:	4e6d      	ldr	r6, [pc, #436]	; (8000404 <Ap_GLcdMenu_ExeCmd+0x1e8>)
           		Hw_N5110G_DrawRequest();
           		
				break;

           case '3':
           		Lb_printf("Count -- \n");
 800024e:	4d6e      	ldr	r5, [pc, #440]	; (8000408 <Ap_GLcdMenu_ExeCmd+0x1ec>)
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 8000250:	47a0      	blx	r4
 8000252:	4603      	mov	r3, r0
    {
        switch(key)
 8000254:	3b31      	subs	r3, #49	; 0x31
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 8000256:	2800      	cmp	r0, #0
 8000258:	f000 808b 	beq.w	8000372 <Ap_GLcdMenu_ExeCmd+0x156>
    {
        switch(key)
 800025c:	2b3c      	cmp	r3, #60	; 0x3c
 800025e:	d8f7      	bhi.n	8000250 <Ap_GLcdMenu_ExeCmd+0x34>
 8000260:	a201      	add	r2, pc, #4	; (adr r2, 8000268 <Ap_GLcdMenu_ExeCmd+0x4c>)
 8000262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000266:	bf00      	nop
 8000268:	080003e3 	.word	0x080003e3
 800026c:	080003c1 	.word	0x080003c1
 8000270:	0800038d 	.word	0x0800038d
 8000274:	08000383 	.word	0x08000383
 8000278:	08000379 	.word	0x08000379
 800027c:	0800035d 	.word	0x0800035d
 8000280:	08000251 	.word	0x08000251
 8000284:	08000251 	.word	0x08000251
 8000288:	08000251 	.word	0x08000251
 800028c:	08000251 	.word	0x08000251
 8000290:	08000251 	.word	0x08000251
 8000294:	08000251 	.word	0x08000251
 8000298:	08000251 	.word	0x08000251
 800029c:	08000251 	.word	0x08000251
 80002a0:	08000251 	.word	0x08000251
 80002a4:	08000251 	.word	0x08000251
 80002a8:	08000251 	.word	0x08000251
 80002ac:	08000251 	.word	0x08000251
 80002b0:	08000251 	.word	0x08000251
 80002b4:	08000251 	.word	0x08000251
 80002b8:	08000251 	.word	0x08000251
 80002bc:	08000251 	.word	0x08000251
 80002c0:	08000251 	.word	0x08000251
 80002c4:	08000251 	.word	0x08000251
 80002c8:	08000251 	.word	0x08000251
 80002cc:	08000251 	.word	0x08000251
 80002d0:	08000251 	.word	0x08000251
 80002d4:	08000251 	.word	0x08000251
 80002d8:	080003ed 	.word	0x080003ed
 80002dc:	08000251 	.word	0x08000251
 80002e0:	08000251 	.word	0x08000251
 80002e4:	08000251 	.word	0x08000251
 80002e8:	08000251 	.word	0x08000251
 80002ec:	08000251 	.word	0x08000251
 80002f0:	08000251 	.word	0x08000251
 80002f4:	08000251 	.word	0x08000251
 80002f8:	08000251 	.word	0x08000251
 80002fc:	08000251 	.word	0x08000251
 8000300:	08000251 	.word	0x08000251
 8000304:	08000251 	.word	0x08000251
 8000308:	08000251 	.word	0x08000251
 800030c:	08000251 	.word	0x08000251
 8000310:	08000251 	.word	0x08000251
 8000314:	08000251 	.word	0x08000251
 8000318:	08000251 	.word	0x08000251
 800031c:	08000251 	.word	0x08000251
 8000320:	08000251 	.word	0x08000251
 8000324:	08000251 	.word	0x08000251
 8000328:	08000251 	.word	0x08000251
 800032c:	08000251 	.word	0x08000251
 8000330:	08000251 	.word	0x08000251
 8000334:	08000251 	.word	0x08000251
 8000338:	08000251 	.word	0x08000251
 800033c:	08000251 	.word	0x08000251
 8000340:	08000251 	.word	0x08000251
 8000344:	08000251 	.word	0x08000251
 8000348:	08000251 	.word	0x08000251
 800034c:	08000251 	.word	0x08000251
 8000350:	08000251 	.word	0x08000251
 8000354:	08000251 	.word	0x08000251
 8000358:	080003ed 	.word	0x080003ed
				Hw_Timer_Stop( HW_TIMER_CH_DEBUG1 );
				Hw_Timer_Stop( HW_TIMER_CH_DEBUG2 );
               break;  

           case '6':
           		Hw_I2C_Write( 0, 0x68<<1, I2C_Data, 0 );
 800035c:	2000      	movs	r0, #0
 800035e:	4603      	mov	r3, r0
 8000360:	21d0      	movs	r1, #208	; 0xd0
 8000362:	aa03      	add	r2, sp, #12
 8000364:	47c8      	blx	r9
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 8000366:	47a0      	blx	r4
 8000368:	4603      	mov	r3, r0
    {
        switch(key)
 800036a:	3b31      	subs	r3, #49	; 0x31
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 800036c:	2800      	cmp	r0, #0
 800036e:	f47f af75 	bne.w	800025c <Ap_GLcdMenu_ExeCmd+0x40>
               break;
        }
    }
    
    return key;
}
 8000372:	b006      	add	sp, #24
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				Hw_Timer_Start( HW_TIMER_CH_DEBUG1 );
				Hw_Timer_Start( HW_TIMER_CH_DEBUG2 );
               break;  

           case '5':
				Hw_Timer_Stop( HW_TIMER_CH_DEBUG1 );
 8000378:	2001      	movs	r0, #1
 800037a:	47b8      	blx	r7
				Hw_Timer_Stop( HW_TIMER_CH_DEBUG2 );
 800037c:	2002      	movs	r0, #2
 800037e:	47b8      	blx	r7
               break;  
 8000380:	e766      	b.n	8000250 <Ap_GLcdMenu_ExeCmd+0x34>
				Hw_N5110G_DrawRequest();
						
               break; 

           case '4':
				Hw_Timer_Start( HW_TIMER_CH_DEBUG1 );
 8000382:	2001      	movs	r0, #1
 8000384:	47b0      	blx	r6
				Hw_Timer_Start( HW_TIMER_CH_DEBUG2 );
 8000386:	2002      	movs	r0, #2
 8000388:	47b0      	blx	r6
               break;  
 800038a:	e761      	b.n	8000250 <Ap_GLcdMenu_ExeCmd+0x34>
           		Hw_N5110G_DrawRequest();
           		
				break;

           case '3':
           		Lb_printf("Count -- \n");
 800038c:	481f      	ldr	r0, [pc, #124]	; (800040c <Ap_GLcdMenu_ExeCmd+0x1f0>)
 800038e:	47a8      	blx	r5
              
				Hw_N5110G_DrawPrint(0,0,"Smartrobot BD");								
 8000390:	2000      	movs	r0, #0
 8000392:	4601      	mov	r1, r0
 8000394:	4a1e      	ldr	r2, [pc, #120]	; (8000410 <Ap_GLcdMenu_ExeCmd+0x1f4>)
 8000396:	f8df a098 	ldr.w	sl, [pc, #152]	; 8000430 <Ap_GLcdMenu_ExeCmd+0x214>
 800039a:	47d0      	blx	sl
				Hw_N5110G_DrawPrint(0,2,"Count : %4d", --Count);						
 800039c:	f8df e094 	ldr.w	lr, [pc, #148]	; 8000434 <Ap_GLcdMenu_ExeCmd+0x218>
 80003a0:	4a1c      	ldr	r2, [pc, #112]	; (8000414 <Ap_GLcdMenu_ExeCmd+0x1f8>)
 80003a2:	f89e c000 	ldrb.w	ip, [lr]
 80003a6:	2102      	movs	r1, #2
 80003a8:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ac:	fa5f fc80 	uxtb.w	ip, r0
 80003b0:	4663      	mov	r3, ip
 80003b2:	2000      	movs	r0, #0
 80003b4:	f88e c000 	strb.w	ip, [lr]
 80003b8:	47d0      	blx	sl
				Hw_N5110G_DrawRequest();
 80003ba:	4917      	ldr	r1, [pc, #92]	; (8000418 <Ap_GLcdMenu_ExeCmd+0x1fc>)
 80003bc:	4788      	blx	r1
						
               break; 
 80003be:	e747      	b.n	8000250 <Ap_GLcdMenu_ExeCmd+0x34>
           		Lb_printf("LCD Clear \n");
           		Hw_N5110G_Clear();
               	break;

           case '2':
           		Lb_printf("Count ++ \n");
 80003c0:	4816      	ldr	r0, [pc, #88]	; (800041c <Ap_GLcdMenu_ExeCmd+0x200>)
 80003c2:	47a8      	blx	r5
                     		
				Hw_N5110G_DrawPrint(0,0,"Smartrobot BD");								
 80003c4:	2000      	movs	r0, #0
 80003c6:	4601      	mov	r1, r0
 80003c8:	4a11      	ldr	r2, [pc, #68]	; (8000410 <Ap_GLcdMenu_ExeCmd+0x1f4>)
 80003ca:	f8df a064 	ldr.w	sl, [pc, #100]	; 8000430 <Ap_GLcdMenu_ExeCmd+0x214>
 80003ce:	47d0      	blx	sl
				Hw_N5110G_DrawPrint(0,2,"Count : %4d", ++Count);						
 80003d0:	f8df e060 	ldr.w	lr, [pc, #96]	; 8000434 <Ap_GLcdMenu_ExeCmd+0x218>
 80003d4:	2102      	movs	r1, #2
 80003d6:	f89e 3000 	ldrb.w	r3, [lr]
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <Ap_GLcdMenu_ExeCmd+0x1f8>)
 80003dc:	f103 0001 	add.w	r0, r3, #1
 80003e0:	e7e4      	b.n	80003ac <Ap_GLcdMenu_ExeCmd+0x190>
    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		Lb_printf("LCD Clear \n");
 80003e2:	480f      	ldr	r0, [pc, #60]	; (8000420 <Ap_GLcdMenu_ExeCmd+0x204>)
 80003e4:	47a8      	blx	r5
           		Hw_N5110G_Clear();
 80003e6:	4a0f      	ldr	r2, [pc, #60]	; (8000424 <Ap_GLcdMenu_ExeCmd+0x208>)
 80003e8:	4790      	blx	r2
               	break;
 80003ea:	e731      	b.n	8000250 <Ap_GLcdMenu_ExeCmd+0x34>
           case '0':
               break;

			case 'm':
			case 'M':
				Ap_GLcdMenu_ShowMenu();
 80003ec:	47c0      	blx	r8
				break;
 80003ee:	e72f      	b.n	8000250 <Ap_GLcdMenu_ExeCmd+0x34>
 80003f0:	080019e9 	.word	0x080019e9
 80003f4:	080000d5 	.word	0x080000d5
 80003f8:	08000061 	.word	0x08000061
 80003fc:	080001ed 	.word	0x080001ed
 8000400:	08001a1d 	.word	0x08001a1d
 8000404:	08001a09 	.word	0x08001a09
 8000408:	08000c4d 	.word	0x08000c4d
 800040c:	08004458 	.word	0x08004458
 8000410:	0800443c 	.word	0x0800443c
 8000414:	0800444c 	.word	0x0800444c
 8000418:	08002085 	.word	0x08002085
 800041c:	08004430 	.word	0x08004430
 8000420:	08004424 	.word	0x08004424
 8000424:	08001f35 	.word	0x08001f35
 8000428:	08000149 	.word	0x08000149
 800042c:	08001a81 	.word	0x08001a81
 8000430:	08002149 	.word	0x08002149
 8000434:	20000400 	.word	0x20000400

08000438 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 8000438:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 800043c:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800043e:	7819      	ldrb	r1, [r3, #0]
 8000440:	b151      	cbz	r1, 8000458 <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8000442:	4a08      	ldr	r2, [pc, #32]	; (8000464 <print_byte_out+0x2c>)
 8000444:	4908      	ldr	r1, [pc, #32]	; (8000468 <print_byte_out+0x30>)
 8000446:	6814      	ldr	r4, [r2, #0]
 8000448:	6808      	ldr	r0, [r1, #0]
 800044a:	1c63      	adds	r3, r4, #1
 800044c:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800044e:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8000450:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8000452:	2200      	movs	r2, #0
 8000454:	54ca      	strb	r2, [r1, r3]
 8000456:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <print_byte_out+0x34>)
 800045a:	4798      	blx	r3
 800045c:	bd38      	pop	{r3, r4, r5, pc}
 800045e:	bf00      	nop
 8000460:	2000040c 	.word	0x2000040c
 8000464:	20000408 	.word	0x20000408
 8000468:	200004c0 	.word	0x200004c0
 800046c:	080014a9 	.word	0x080014a9

08000470 <PrintString>:
        }
        return;
}

void PrintString(char *fmt, char *s)
{
 8000470:	b538      	push	{r3, r4, r5, lr}
        if (!fmt || !s) return;
 8000472:	b148      	cbz	r0, 8000488 <PrintString+0x18>
 8000474:	b141      	cbz	r1, 8000488 <PrintString+0x18>
        while (*s) print_byte_out(*s++);
 8000476:	7808      	ldrb	r0, [r1, #0]
 8000478:	b130      	cbz	r0, 8000488 <PrintString+0x18>
 800047a:	4d04      	ldr	r5, [pc, #16]	; (800048c <PrintString+0x1c>)
 800047c:	460c      	mov	r4, r1
 800047e:	47a8      	blx	r5
 8000480:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000484:	2800      	cmp	r0, #0
 8000486:	d1fa      	bne.n	800047e <PrintString+0xe>
 8000488:	bd38      	pop	{r3, r4, r5, pc}
 800048a:	bf00      	nop
 800048c:	08000439 	.word	0x08000439

08000490 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 8000490:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 8000492:	b1c8      	cbz	r0, 80004c8 <DecToLong+0x38>
 8000494:	7803      	ldrb	r3, [r0, #0]
 8000496:	b1cb      	cbz	r3, 80004cc <DecToLong+0x3c>


        for (*retval=0; *s; s++){
 8000498:	2300      	movs	r3, #0
 800049a:	600b      	str	r3, [r1, #0]
 800049c:	7802      	ldrb	r2, [r0, #0]
 800049e:	b192      	cbz	r2, 80004c6 <DecToLong+0x36>
                if (*s < '0' || *s > '9') return false;
 80004a0:	3a30      	subs	r2, #48	; 0x30
 80004a2:	b2d4      	uxtb	r4, r2
 80004a4:	2c09      	cmp	r4, #9
 80004a6:	d902      	bls.n	80004ae <DecToLong+0x1e>
 80004a8:	e012      	b.n	80004d0 <DecToLong+0x40>
 80004aa:	2d09      	cmp	r5, #9
 80004ac:	d810      	bhi.n	80004d0 <DecToLong+0x40>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 80004ae:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80004b2:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 80004b6:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80004b8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 80004bc:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80004c0:	b2d5      	uxtb	r5, r2
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80004c2:	2c00      	cmp	r4, #0
 80004c4:	d1f1      	bne.n	80004aa <DecToLong+0x1a>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 80004c6:	2001      	movs	r0, #1
}        // DecToLong.
 80004c8:	bc30      	pop	{r4, r5}
 80004ca:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 80004cc:	4618      	mov	r0, r3
 80004ce:	e7fb      	b.n	80004c8 <DecToLong+0x38>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 80004d0:	2000      	movs	r0, #0
 80004d2:	e7f9      	b.n	80004c8 <DecToLong+0x38>

080004d4 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 80004d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004d8:	4682      	mov	sl, r0
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80004da:	7800      	ldrb	r0, [r0, #0]
        return;
}


void PrintDec(char *fmt, int l)
{
 80004dc:	b084      	sub	sp, #16
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80004de:	2600      	movs	r6, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 80004e0:	4689      	mov	r9, r1
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80004e2:	9600      	str	r6, [sp, #0]
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80004e4:	2800      	cmp	r0, #0
 80004e6:	f000 8098 	beq.w	800061a <PrintDec+0x146>
	{
		if (c=='d') break;
 80004ea:	2864      	cmp	r0, #100	; 0x64
 80004ec:	f000 8095 	beq.w	800061a <PrintDec+0x146>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 80004f0:	4fbb      	ldr	r7, [pc, #748]	; (80007e0 <PrintDec+0x30c>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 80004f2:	4634      	mov	r4, r6
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 80004f4:	46b0      	mov	r8, r6

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 80004f6:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
 80004fa:	2a08      	cmp	r2, #8
 80004fc:	f200 8089 	bhi.w	8000612 <PrintDec+0x13e>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000500:	f81a 2004 	ldrb.w	r2, [sl, r4]
 8000504:	eb0a 0504 	add.w	r5, sl, r4
 8000508:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800050c:	2b09      	cmp	r3, #9
 800050e:	a801      	add	r0, sp, #4
 8000510:	f04f 0300 	mov.w	r3, #0
 8000514:	d808      	bhi.n	8000528 <PrintDec+0x54>
			{
				tol[j] = s[i++];
 8000516:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000518:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			{
				tol[j] = s[i++];
 800051c:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800051e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000522:	3301      	adds	r3, #1
 8000524:	2909      	cmp	r1, #9
 8000526:	d9f6      	bls.n	8000516 <PrintDec+0x42>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8000528:	ad04      	add	r5, sp, #16
 800052a:	18ea      	adds	r2, r5, r3
			i--;
			DecToLong(tol, &flagcnt);
 800052c:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800052e:	f802 8c0c 	strb.w	r8, [r2, #-12]
			i--;
 8000532:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 8000534:	47b8      	blx	r7
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000536:	3401      	adds	r4, #1
 8000538:	f81a 0004 	ldrb.w	r0, [sl, r4]
 800053c:	b108      	cbz	r0, 8000542 <PrintDec+0x6e>
	{
		if (c=='d') break;
 800053e:	2864      	cmp	r0, #100	; 0x64
 8000540:	d1d9      	bne.n	80004f6 <PrintDec+0x22>
		else if (c=='l') flagl=true;
		else continue;
	}

	// 위의 flag에 따라 출력.
	if (flagcnt)
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	2800      	cmp	r0, #0
 8000546:	d068      	beq.n	800061a <PrintDec+0x146>
	{
                if (flagcnt>9) flagcnt=9;
 8000548:	2809      	cmp	r0, #9
 800054a:	f300 8109 	bgt.w	8000760 <PrintDec+0x28c>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 800054e:	1e47      	subs	r7, r0, #1


        while (cnt--){
 8000550:	1e81      	subs	r1, r0, #2
 8000552:	1ec5      	subs	r5, r0, #3
 8000554:	2f00      	cmp	r7, #0
 8000556:	f000 8108 	beq.w	800076a <PrintDec+0x296>
 800055a:	f001 0401 	and.w	r4, r1, #1
                retval *= num;
 800055e:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000560:	1e4a      	subs	r2, r1, #1
 8000562:	b171      	cbz	r1, 8000582 <PrintDec+0xae>
 8000564:	b124      	cbz	r4, 8000570 <PrintDec+0x9c>
 8000566:	3a01      	subs	r2, #1
 8000568:	1c51      	adds	r1, r2, #1
                retval *= num;
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 800056e:	d008      	beq.n	8000582 <PrintDec+0xae>
                retval *= num;
 8000570:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8000574:	00f9      	lsls	r1, r7, #3
 8000576:	eb01 0447 	add.w	r4, r1, r7, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800057a:	3a02      	subs	r2, #2
                retval *= num;
 800057c:	0063      	lsls	r3, r4, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800057e:	1c57      	adds	r7, r2, #1
 8000580:	d1f6      	bne.n	8000570 <PrintDec+0x9c>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000582:	fb99 f2f3 	sdiv	r2, r9, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000586:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000588:	fb03 9912 	mls	r9, r3, r2, r9
{
        long retval=num;
        cnt--;


        while (cnt--){
 800058c:	f000 80ef 	beq.w	800076e <PrintDec+0x29a>
 8000590:	f005 0001 	and.w	r0, r5, #1
                retval *= num;
 8000594:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000596:	1e6b      	subs	r3, r5, #1
 8000598:	b175      	cbz	r5, 80005b8 <PrintDec+0xe4>
 800059a:	b120      	cbz	r0, 80005a6 <PrintDec+0xd2>
 800059c:	3b01      	subs	r3, #1
 800059e:	1c58      	adds	r0, r3, #1
                retval *= num;
 80005a0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80005a4:	d008      	beq.n	80005b8 <PrintDec+0xe4>
                retval *= num;
 80005a6:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 80005aa:	00ef      	lsls	r7, r5, #3
 80005ac:	eb07 0145 	add.w	r1, r7, r5, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80005b0:	3b02      	subs	r3, #2
                retval *= num;
 80005b2:	004c      	lsls	r4, r1, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80005b4:	1c5d      	adds	r5, r3, #1
 80005b6:	d1f6      	bne.n	80005a6 <PrintDec+0xd2>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80005b8:	f246 6567 	movw	r5, #26215	; 0x6667
 80005bc:	4f89      	ldr	r7, [pc, #548]	; (80007e4 <PrintDec+0x310>)
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80005be:	f04f 0801 	mov.w	r8, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80005c2:	f2c6 6566 	movt	r5, #26214	; 0x6666
 80005c6:	e00f      	b.n	80005e8 <PrintDec+0x114>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 80005c8:	2c01      	cmp	r4, #1
 80005ca:	d015      	beq.n	80005f8 <PrintDec+0x124>


                        if (leading_zero==true){
 80005cc:	f1b8 0f00 	cmp.w	r8, #0
 80005d0:	d012      	beq.n	80005f8 <PrintDec+0x124>
                                if (flag0)        print_byte_out('0');
 80005d2:	2030      	movs	r0, #48	; 0x30
 80005d4:	b906      	cbnz	r6, 80005d8 <PrintDec+0x104>
                                else                print_byte_out(' ');
 80005d6:	2020      	movs	r0, #32
 80005d8:	47b8      	blx	r7
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80005da:	fb85 2004 	smull	r2, r0, r5, r4
 80005de:	17e4      	asrs	r4, r4, #31
 80005e0:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
 80005e4:	2c00      	cmp	r4, #0
 80005e6:	dd11      	ble.n	800060c <PrintDec+0x138>
                        result = remainder/divisor;
 80005e8:	fb99 f2f4 	sdiv	r2, r9, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80005ec:	b2d0      	uxtb	r0, r2
 80005ee:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80005f0:	fb04 9912 	mls	r9, r4, r2, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 80005f4:	2a00      	cmp	r2, #0
 80005f6:	d0e7      	beq.n	80005c8 <PrintDec+0xf4>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80005f8:	47b8      	blx	r7
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80005fa:	fb85 2004 	smull	r2, r0, r5, r4
 80005fe:	17e4      	asrs	r4, r4, #31
 8000600:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
 8000604:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8000606:	f04f 0800 	mov.w	r8, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800060a:	dced      	bgt.n	80005e8 <PrintDec+0x114>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 800060c:	b004      	add	sp, #16
 800060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 8000612:	2830      	cmp	r0, #48	; 0x30
 8000614:	bf08      	it	eq
 8000616:	2601      	moveq	r6, #1
 8000618:	e78d      	b.n	8000536 <PrintDec+0x62>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800061a:	f642 73a1 	movw	r3, #12193	; 0x2fa1
 800061e:	f2c4 43b8 	movt	r3, #17592	; 0x44b8
 8000622:	fb83 2509 	smull	r2, r5, r3, r9
 8000626:	ea4f 71e9 	mov.w	r1, r9, asr #31
                        remainder %= divisor;
 800062a:	f44f 424a 	mov.w	r2, #51712	; 0xca00
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800062e:	ebc1 7025 	rsb	r0, r1, r5, asr #28
                        remainder %= divisor;
 8000632:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
 8000636:	fb02 9910 	mls	r9, r2, r0, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 800063a:	2800      	cmp	r0, #0
 800063c:	f000 8099 	beq.w	8000772 <PrintDec+0x29e>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000640:	b2c0      	uxtb	r0, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000642:	f643 3589 	movw	r5, #15241	; 0x3b89
 8000646:	f2c5 55e6 	movt	r5, #21990	; 0x55e6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800064a:	3030      	adds	r0, #48	; 0x30
 800064c:	4c65      	ldr	r4, [pc, #404]	; (80007e4 <PrintDec+0x310>)
 800064e:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000650:	fb85 2309 	smull	r2, r3, r5, r9
                        remainder %= divisor;
 8000654:	f44f 4161 	mov.w	r1, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000658:	ea4f 72e9 	mov.w	r2, r9, asr #31
 800065c:	ebc2 6263 	rsb	r2, r2, r3, asr #25
                        remainder %= divisor;
 8000660:	f2c0 51f5 	movt	r1, #1525	; 0x5f5
 8000664:	fb01 9512 	mls	r5, r1, r2, r9


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000668:	b2d0      	uxtb	r0, r2
 800066a:	3030      	adds	r0, #48	; 0x30
 800066c:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800066e:	f64c 206b 	movw	r0, #51819	; 0xca6b
 8000672:	f6c6 305f 	movt	r0, #27487	; 0x6b5f
 8000676:	fb80 2305 	smull	r2, r3, r0, r5
 800067a:	17e9      	asrs	r1, r5, #31
                        remainder %= divisor;
 800067c:	f249 6280 	movw	r2, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000680:	ebc1 50a3 	rsb	r0, r1, r3, asr #22
                        remainder %= divisor;
 8000684:	f2c0 0298 	movt	r2, #152	; 0x98
 8000688:	fb02 5510 	mls	r5, r2, r0, r5


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800068c:	b2c0      	uxtb	r0, r0
 800068e:	3030      	adds	r0, #48	; 0x30
 8000690:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000692:	f64d 6083 	movw	r0, #56963	; 0xde83
 8000696:	f2c4 301b 	movt	r0, #17179	; 0x431b
 800069a:	fb80 2305 	smull	r2, r3, r0, r5
 800069e:	17e9      	asrs	r1, r5, #31
                        remainder %= divisor;
 80006a0:	f244 2240 	movw	r2, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006a4:	ebc1 40a3 	rsb	r0, r1, r3, asr #18
                        remainder %= divisor;
 80006a8:	f2c0 020f 	movt	r2, #15
 80006ac:	fb02 5510 	mls	r5, r2, r0, r5


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80006b0:	b2c0      	uxtb	r0, r0
 80006b2:	3030      	adds	r0, #48	; 0x30
 80006b4:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006b6:	f24b 5089 	movw	r0, #46473	; 0xb589
 80006ba:	f2c1 40f8 	movt	r0, #5368	; 0x14f8
 80006be:	fb80 2305 	smull	r2, r3, r0, r5
 80006c2:	17e9      	asrs	r1, r5, #31
                        remainder %= divisor;
 80006c4:	f248 62a0 	movw	r2, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006c8:	ebc1 3063 	rsb	r0, r1, r3, asr #13
                        remainder %= divisor;
 80006cc:	f2c0 0201 	movt	r2, #1
 80006d0:	fb02 5510 	mls	r5, r2, r0, r5


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80006d4:	b2c0      	uxtb	r0, r0
 80006d6:	3030      	adds	r0, #48	; 0x30
 80006d8:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006da:	f648 30ad 	movw	r0, #35757	; 0x8bad
 80006de:	f6c6 00db 	movt	r0, #26843	; 0x68db
 80006e2:	fb80 2305 	smull	r2, r3, r0, r5
 80006e6:	17e9      	asrs	r1, r5, #31
 80006e8:	ebc1 3123 	rsb	r1, r1, r3, asr #12
                        remainder %= divisor;
 80006ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80006f0:	fb02 5511 	mls	r5, r2, r1, r5


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80006f4:	b2c8      	uxtb	r0, r1
 80006f6:	3030      	adds	r0, #48	; 0x30
 80006f8:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006fa:	f644 50d3 	movw	r0, #19923	; 0x4dd3
 80006fe:	f2c1 0062 	movt	r0, #4194	; 0x1062
 8000702:	fb80 2305 	smull	r2, r3, r0, r5
 8000706:	17e9      	asrs	r1, r5, #31
 8000708:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
                        remainder %= divisor;
 800070c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000710:	fb02 5511 	mls	r5, r2, r1, r5


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000714:	b2c8      	uxtb	r0, r1
 8000716:	3030      	adds	r0, #48	; 0x30
 8000718:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800071a:	f248 501f 	movw	r0, #34079	; 0x851f
 800071e:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
 8000722:	fb80 2305 	smull	r2, r3, r0, r5
 8000726:	17e9      	asrs	r1, r5, #31
 8000728:	ebc1 1163 	rsb	r1, r1, r3, asr #5
                        remainder %= divisor;
 800072c:	2264      	movs	r2, #100	; 0x64
 800072e:	fb02 5511 	mls	r5, r2, r1, r5


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000732:	b2c8      	uxtb	r0, r1
 8000734:	3030      	adds	r0, #48	; 0x30
 8000736:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000738:	f246 6067 	movw	r0, #26215	; 0x6667
 800073c:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8000740:	fb80 2305 	smull	r2, r3, r0, r5
 8000744:	17e9      	asrs	r1, r5, #31
 8000746:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
                        remainder %= divisor;
 800074a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800074e:	eba5 0542 	sub.w	r5, r5, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000752:	b2c8      	uxtb	r0, r1
 8000754:	3030      	adds	r0, #48	; 0x30
 8000756:	47a0      	blx	r4
 8000758:	b2e8      	uxtb	r0, r5
 800075a:	3030      	adds	r0, #48	; 0x30
 800075c:	47a0      	blx	r4
 800075e:	e755      	b.n	800060c <PrintDec+0x138>
	}

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 8000760:	2009      	movs	r0, #9
 8000762:	9000      	str	r0, [sp, #0]
 8000764:	2506      	movs	r5, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000766:	2107      	movs	r1, #7
 8000768:	e6f7      	b.n	800055a <PrintDec+0x86>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 800076a:	230a      	movs	r3, #10
 800076c:	e709      	b.n	8000582 <PrintDec+0xae>
 800076e:	240a      	movs	r4, #10
 8000770:	e722      	b.n	80005b8 <PrintDec+0xe4>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000772:	f643 3489 	movw	r4, #15241	; 0x3b89
 8000776:	f2c5 54e6 	movt	r4, #21990	; 0x55e6
 800077a:	fb84 2309 	smull	r2, r3, r4, r9
 800077e:	ea4f 71e9 	mov.w	r1, r9, asr #31
                        remainder %= divisor;
 8000782:	f44f 4561 	mov.w	r5, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000786:	ebc1 6263 	rsb	r2, r1, r3, asr #25
                        remainder %= divisor;
 800078a:	f2c0 55f5 	movt	r5, #1525	; 0x5f5
 800078e:	fb05 9512 	mls	r5, r5, r2, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 8000792:	b10a      	cbz	r2, 8000798 <PrintDec+0x2c4>
 8000794:	4c13      	ldr	r4, [pc, #76]	; (80007e4 <PrintDec+0x310>)
 8000796:	e767      	b.n	8000668 <PrintDec+0x194>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000798:	f64c 206b 	movw	r0, #51819	; 0xca6b
 800079c:	f6c6 305f 	movt	r0, #27487	; 0x6b5f
 80007a0:	fb80 2405 	smull	r2, r4, r0, r5
 80007a4:	17eb      	asrs	r3, r5, #31
                        remainder %= divisor;
 80007a6:	f249 6180 	movw	r1, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007aa:	ebc3 50a4 	rsb	r0, r3, r4, asr #22
                        remainder %= divisor;
 80007ae:	f2c0 0198 	movt	r1, #152	; 0x98
 80007b2:	fb01 5510 	mls	r5, r1, r0, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 80007b6:	2800      	cmp	r0, #0
 80007b8:	d16a      	bne.n	8000890 <PrintDec+0x3bc>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007ba:	f64d 6283 	movw	r2, #56963	; 0xde83
 80007be:	f2c4 321b 	movt	r2, #17179	; 0x431b
 80007c2:	fb82 2405 	smull	r2, r4, r2, r5
 80007c6:	17eb      	asrs	r3, r5, #31
                        remainder %= divisor;
 80007c8:	f244 2140 	movw	r1, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007cc:	ebc3 40a4 	rsb	r0, r3, r4, asr #18
                        remainder %= divisor;
 80007d0:	f2c0 010f 	movt	r1, #15
 80007d4:	fb01 5510 	mls	r5, r1, r0, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 80007d8:	b130      	cbz	r0, 80007e8 <PrintDec+0x314>
 80007da:	4c02      	ldr	r4, [pc, #8]	; (80007e4 <PrintDec+0x310>)
 80007dc:	e768      	b.n	80006b0 <PrintDec+0x1dc>
 80007de:	bf00      	nop
 80007e0:	08000491 	.word	0x08000491
 80007e4:	08000439 	.word	0x08000439
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007e8:	f24b 5289 	movw	r2, #46473	; 0xb589
 80007ec:	f2c1 42f8 	movt	r2, #5368	; 0x14f8
 80007f0:	fb82 2405 	smull	r2, r4, r2, r5
 80007f4:	17eb      	asrs	r3, r5, #31
                        remainder %= divisor;
 80007f6:	f248 61a0 	movw	r1, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007fa:	ebc3 3064 	rsb	r0, r3, r4, asr #13
                        remainder %= divisor;
 80007fe:	f2c0 0101 	movt	r1, #1
 8000802:	fb01 5510 	mls	r5, r1, r0, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000806:	2800      	cmp	r0, #0
 8000808:	d140      	bne.n	800088c <PrintDec+0x3b8>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800080a:	f648 32ad 	movw	r2, #35757	; 0x8bad
 800080e:	f6c6 02db 	movt	r2, #26843	; 0x68db
 8000812:	fb82 2405 	smull	r2, r4, r2, r5
 8000816:	17eb      	asrs	r3, r5, #31
 8000818:	ebc3 3124 	rsb	r1, r3, r4, asr #12
                        remainder %= divisor;
 800081c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000820:	fb00 5511 	mls	r5, r0, r1, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000824:	b109      	cbz	r1, 800082a <PrintDec+0x356>
 8000826:	4c1b      	ldr	r4, [pc, #108]	; (8000894 <PrintDec+0x3c0>)
 8000828:	e764      	b.n	80006f4 <PrintDec+0x220>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800082a:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 800082e:	f2c1 0262 	movt	r2, #4194	; 0x1062
 8000832:	fb82 2405 	smull	r2, r4, r2, r5
 8000836:	17eb      	asrs	r3, r5, #31
 8000838:	ebc3 11a4 	rsb	r1, r3, r4, asr #6
                        remainder %= divisor;
 800083c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000840:	fb00 5511 	mls	r5, r0, r1, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000844:	bb01      	cbnz	r1, 8000888 <PrintDec+0x3b4>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000846:	f248 521f 	movw	r2, #34079	; 0x851f
 800084a:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
 800084e:	fb82 2405 	smull	r2, r4, r2, r5
 8000852:	17eb      	asrs	r3, r5, #31
 8000854:	ebc3 1164 	rsb	r1, r3, r4, asr #5
                        remainder %= divisor;
 8000858:	2064      	movs	r0, #100	; 0x64
 800085a:	fb00 5511 	mls	r5, r0, r1, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 800085e:	b109      	cbz	r1, 8000864 <PrintDec+0x390>
 8000860:	4c0c      	ldr	r4, [pc, #48]	; (8000894 <PrintDec+0x3c0>)
 8000862:	e766      	b.n	8000732 <PrintDec+0x25e>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000864:	f246 6267 	movw	r2, #26215	; 0x6667
 8000868:	f2c6 6266 	movt	r2, #26214	; 0x6666
 800086c:	fb82 2405 	smull	r2, r4, r2, r5
 8000870:	17eb      	asrs	r3, r5, #31
 8000872:	ebc3 01a4 	rsb	r1, r3, r4, asr #2
                        remainder %= divisor;
 8000876:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800087a:	eba5 0540 	sub.w	r5, r5, r0, lsl #1
 800087e:	4c05      	ldr	r4, [pc, #20]	; (8000894 <PrintDec+0x3c0>)


                        if (result!=0 || divisor==1) leading_zero = false;
 8000880:	2900      	cmp	r1, #0
 8000882:	f47f af66 	bne.w	8000752 <PrintDec+0x27e>
 8000886:	e767      	b.n	8000758 <PrintDec+0x284>
 8000888:	4c02      	ldr	r4, [pc, #8]	; (8000894 <PrintDec+0x3c0>)
 800088a:	e743      	b.n	8000714 <PrintDec+0x240>
 800088c:	4c01      	ldr	r4, [pc, #4]	; (8000894 <PrintDec+0x3c0>)
 800088e:	e721      	b.n	80006d4 <PrintDec+0x200>
 8000890:	4c00      	ldr	r4, [pc, #0]	; (8000894 <PrintDec+0x3c0>)
 8000892:	e6fb      	b.n	800068c <PrintDec+0x1b8>
 8000894:	08000439 	.word	0x08000439

08000898 <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800089c:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800089e:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80008a0:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80008a2:	4681      	mov	r9, r0
 80008a4:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80008a6:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	f000 80b7 	beq.w	8000a1c <PrintHex+0x184>
                if (c=='x') break;
 80008ae:	2b78      	cmp	r3, #120	; 0x78
 80008b0:	f000 80b4 	beq.w	8000a1c <PrintHex+0x184>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 80008b4:	4fb4      	ldr	r7, [pc, #720]	; (8000b88 <PrintHex+0x2f0>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 80008b6:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80008b8:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 80008ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80008be:	2a08      	cmp	r2, #8
 80008c0:	f200 80a8 	bhi.w	8000a14 <PrintHex+0x17c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80008c4:	f819 2004 	ldrb.w	r2, [r9, r4]
 80008c8:	eb09 0104 	add.w	r1, r9, r4
 80008cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80008d0:	2b09      	cmp	r3, #9
 80008d2:	a803      	add	r0, sp, #12
 80008d4:	f04f 0300 	mov.w	r3, #0
 80008d8:	d808      	bhi.n	80008ec <PrintHex+0x54>
                                tol[j] = s[i++];
 80008da:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80008dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 80008e0:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80008e2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80008e6:	3301      	adds	r3, #1
 80008e8:	2d09      	cmp	r5, #9
 80008ea:	d9f6      	bls.n	80008da <PrintHex+0x42>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80008ec:	a906      	add	r1, sp, #24
 80008ee:	18ca      	adds	r2, r1, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 80008f0:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80008f2:	f802 8c0c 	strb.w	r8, [r2, #-12]
                        i--;
 80008f6:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 80008f8:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80008fa:	3401      	adds	r4, #1
 80008fc:	f819 3004 	ldrb.w	r3, [r9, r4]
 8000900:	b10b      	cbz	r3, 8000906 <PrintHex+0x6e>
                if (c=='x') break;
 8000902:	2b78      	cmp	r3, #120	; 0x78
 8000904:	d1d9      	bne.n	80008ba <PrintHex+0x22>
 8000906:	9901      	ldr	r1, [sp, #4]
 8000908:	9b02      	ldr	r3, [sp, #8]
 800090a:	ba0a      	rev	r2, r1
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 800090c:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 8087 	beq.w	8000a22 <PrintHex+0x18a>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8000914:	07da      	lsls	r2, r3, #31
 8000916:	f100 810f 	bmi.w	8000b38 <PrintHex+0x2a0>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 800091a:	2101      	movs	r1, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800091c:	f1c3 0208 	rsb	r2, r3, #8
 8000920:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
 8000924:	105a      	asrs	r2, r3, #1
 8000926:	2a03      	cmp	r2, #3
 8000928:	f300 80c9 	bgt.w	8000abe <PrintHex+0x226>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800092c:	ac01      	add	r4, sp, #4
 800092e:	18a5      	adds	r5, r4, r2
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000930:	462c      	mov	r4, r5
 8000932:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000936:	43ef      	mvns	r7, r5
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000938:	0903      	lsrs	r3, r0, #4
 800093a:	f007 0901 	and.w	r9, r7, #1
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800093e:	f10d 0808 	add.w	r8, sp, #8
 8000942:	4d92      	ldr	r5, [pc, #584]	; (8000b8c <PrintHex+0x2f4>)
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000944:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000948:	f000 8131 	beq.w	8000bae <PrintHex+0x316>
                        if (uHex<10) uHex+='0';
 800094c:	2b09      	cmp	r3, #9
 800094e:	f240 816e 	bls.w	8000c2e <PrintHex+0x396>
                        else         uHex+='A'-10;
 8000952:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000956:	47a8      	blx	r5
 8000958:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800095a:	2f00      	cmp	r7, #0
 800095c:	f000 8130 	beq.w	8000bc0 <PrintHex+0x328>
                        if (lHex<10) lHex+='0';
 8000960:	2f09      	cmp	r7, #9
 8000962:	f240 8152 	bls.w	8000c0a <PrintHex+0x372>
                        else         lHex+='A'-10;
 8000966:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800096a:	47a8      	blx	r5
 800096c:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800096e:	4544      	cmp	r4, r8
 8000970:	f000 80a5 	beq.w	8000abe <PrintHex+0x226>
 8000974:	f1b9 0f00 	cmp.w	r9, #0
 8000978:	d017      	beq.n	80009aa <PrintHex+0x112>
                        c = s[i];
 800097a:	f814 0b01 	ldrb.w	r0, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800097e:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000980:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000984:	d031      	beq.n	80009ea <PrintHex+0x152>
                        if (uHex<10) uHex+='0';
 8000986:	2b09      	cmp	r3, #9
 8000988:	f240 8142 	bls.w	8000c10 <PrintHex+0x378>
                        else         uHex+='A'-10;
 800098c:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000990:	47a8      	blx	r5
 8000992:	2200      	movs	r2, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000994:	b3a7      	cbz	r7, 8000a00 <PrintHex+0x168>
                        if (lHex<10) lHex+='0';
 8000996:	2f09      	cmp	r7, #9
 8000998:	f240 813d 	bls.w	8000c16 <PrintHex+0x37e>
                        else         lHex+='A'-10;
 800099c:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80009a0:	47a8      	blx	r5
 80009a2:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 80009a4:	4544      	cmp	r4, r8
 80009a6:	f000 808a 	beq.w	8000abe <PrintHex+0x226>
                        c = s[i];
 80009aa:	f814 3b01 	ldrb.w	r3, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80009ae:	091a      	lsrs	r2, r3, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80009b0:	f003 070f 	and.w	r7, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80009b4:	f000 80d4 	beq.w	8000b60 <PrintHex+0x2c8>
                        if (uHex<10) uHex+='0';
 80009b8:	2a09      	cmp	r2, #9
                        else         uHex+='A'-10;
 80009ba:	bf88      	it	hi
 80009bc:	f102 0037 	addhi.w	r0, r2, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80009c0:	f240 812c 	bls.w	8000c1c <PrintHex+0x384>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 80009c4:	47a8      	blx	r5
 80009c6:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80009c8:	2f00      	cmp	r7, #0
 80009ca:	f000 80d2 	beq.w	8000b72 <PrintHex+0x2da>
                        if (lHex<10) lHex+='0';
 80009ce:	2f09      	cmp	r7, #9
                        else         lHex+='A'-10;
 80009d0:	bf88      	it	hi
 80009d2:	f107 0037 	addhi.w	r0, r7, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80009d6:	f240 8124 	bls.w	8000c22 <PrintHex+0x38a>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80009da:	47a8      	blx	r5
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 80009dc:	f814 0b01 	ldrb.w	r0, [r4], #1
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80009e0:	2100      	movs	r1, #0
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80009e2:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80009e4:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80009e8:	d1cd      	bne.n	8000986 <PrintHex+0xee>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 80009ea:	2900      	cmp	r1, #0
 80009ec:	f000 8110 	beq.w	8000c10 <PrintHex+0x378>
                                if (flag0) print_byte_out('0');
 80009f0:	2e00      	cmp	r6, #0
 80009f2:	f040 80cd 	bne.w	8000b90 <PrintHex+0x2f8>
                                else       print_byte_out(' ');
 80009f6:	2020      	movs	r0, #32
 80009f8:	47a8      	blx	r5
 80009fa:	2201      	movs	r2, #1
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80009fc:	2f00      	cmp	r7, #0
 80009fe:	d1ca      	bne.n	8000996 <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	f000 8108 	beq.w	8000c16 <PrintHex+0x37e>
                                if (flag0) print_byte_out('0');
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	f040 80ba 	bne.w	8000b80 <PrintHex+0x2e8>
                                else       print_byte_out(' ');
 8000a0c:	2020      	movs	r0, #32
 8000a0e:	47a8      	blx	r5
 8000a10:	2101      	movs	r1, #1
 8000a12:	e7c7      	b.n	80009a4 <PrintHex+0x10c>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8000a14:	2b30      	cmp	r3, #48	; 0x30
 8000a16:	bf08      	it	eq
 8000a18:	2601      	moveq	r6, #1
 8000a1a:	e76e      	b.n	80008fa <PrintHex+0x62>
 8000a1c:	9c01      	ldr	r4, [sp, #4]
 8000a1e:	ba25      	rev	r5, r4
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000a20:	9501      	str	r5, [sp, #4]
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a22:	f89d 3004 	ldrb.w	r3, [sp, #4]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a26:	091a      	lsrs	r2, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a28:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a2c:	d04a      	beq.n	8000ac4 <PrintHex+0x22c>
                        if (uHex<10) uHex+='0';
 8000a2e:	2a09      	cmp	r2, #9
 8000a30:	f240 80fa 	bls.w	8000c28 <PrintHex+0x390>
                        else         uHex+='A'-10;
 8000a34:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000a38:	4d54      	ldr	r5, [pc, #336]	; (8000b8c <PrintHex+0x2f4>)
 8000a3a:	47a8      	blx	r5
 8000a3c:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a3e:	2c00      	cmp	r4, #0
 8000a40:	d144      	bne.n	8000acc <PrintHex+0x234>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2900      	cmp	r1, #0
 8000a46:	f000 80fb 	beq.w	8000c40 <PrintHex+0x3a8>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a4e:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a50:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a54:	d047      	beq.n	8000ae6 <PrintHex+0x24e>
                        if (uHex<10) uHex+='0';
 8000a56:	2909      	cmp	r1, #9
 8000a58:	f240 80ec 	bls.w	8000c34 <PrintHex+0x39c>
                        else         uHex+='A'-10;
 8000a5c:	f101 0037 	add.w	r0, r1, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000a60:	47a8      	blx	r5
 8000a62:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d144      	bne.n	8000af2 <PrintHex+0x25a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 80e5 	beq.w	8000c3a <PrintHex+0x3a2>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a70:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a74:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a76:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a7a:	d047      	beq.n	8000b0c <PrintHex+0x274>
                        if (uHex<10) uHex+='0';
 8000a7c:	2b09      	cmp	r3, #9
 8000a7e:	f240 80be 	bls.w	8000bfe <PrintHex+0x366>
                        else         uHex+='A'-10;
 8000a82:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000a86:	47a8      	blx	r5
 8000a88:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a8a:	2c00      	cmp	r4, #0
 8000a8c:	d143      	bne.n	8000b16 <PrintHex+0x27e>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2900      	cmp	r1, #0
 8000a92:	f000 80b7 	beq.w	8000c04 <PrintHex+0x36c>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a96:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a9a:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a9c:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000aa0:	d045      	beq.n	8000b2e <PrintHex+0x296>
                        if (uHex<10) uHex+='0';
 8000aa2:	2909      	cmp	r1, #9
                        else         uHex+='A'-10;
 8000aa4:	bf88      	it	hi
 8000aa6:	f101 0037 	addhi.w	r0, r1, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000aaa:	d942      	bls.n	8000b32 <PrintHex+0x29a>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000aac:	47a8      	blx	r5
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000aae:	2c00      	cmp	r4, #0
 8000ab0:	d07a      	beq.n	8000ba8 <PrintHex+0x310>
                        if (lHex<10) lHex+='0';
 8000ab2:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 8000ab4:	bf88      	it	hi
 8000ab6:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000aba:	d975      	bls.n	8000ba8 <PrintHex+0x310>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000abc:	47a8      	blx	r5
                }
        }
        return;
}
 8000abe:	b007      	add	sp, #28
 8000ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4d31      	ldr	r5, [pc, #196]	; (8000b8c <PrintHex+0x2f4>)
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000ac8:	2c00      	cmp	r4, #0
 8000aca:	d0ba      	beq.n	8000a42 <PrintHex+0x1aa>
                        if (lHex<10) lHex+='0';
 8000acc:	2c09      	cmp	r4, #9
 8000ace:	f240 80b7 	bls.w	8000c40 <PrintHex+0x3a8>
                        else         lHex+='A'-10;
 8000ad2:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000ad6:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000ad8:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000adc:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000ade:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000ae0:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000ae4:	d1b7      	bne.n	8000a56 <PrintHex+0x1be>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	f000 80a4 	beq.w	8000c34 <PrintHex+0x39c>
 8000aec:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000aee:	2c00      	cmp	r4, #0
 8000af0:	d0ba      	beq.n	8000a68 <PrintHex+0x1d0>
                        if (lHex<10) lHex+='0';
 8000af2:	2c09      	cmp	r4, #9
 8000af4:	f240 80a1 	bls.w	8000c3a <PrintHex+0x3a2>
                        else         lHex+='A'-10;
 8000af8:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000afc:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000afe:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000b02:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000b04:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000b06:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000b0a:	d1b7      	bne.n	8000a7c <PrintHex+0x1e4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	d076      	beq.n	8000bfe <PrintHex+0x366>
 8000b10:	2101      	movs	r1, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000b12:	2c00      	cmp	r4, #0
 8000b14:	d0bb      	beq.n	8000a8e <PrintHex+0x1f6>
                        if (lHex<10) lHex+='0';
 8000b16:	2c09      	cmp	r4, #9
 8000b18:	d974      	bls.n	8000c04 <PrintHex+0x36c>
                        else         lHex+='A'-10;
 8000b1a:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000b1e:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000b20:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000b24:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000b26:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000b28:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000b2c:	d1b9      	bne.n	8000aa2 <PrintHex+0x20a>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000b2e:	2a00      	cmp	r2, #0
 8000b30:	d1bd      	bne.n	8000aae <PrintHex+0x216>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000b32:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000b36:	e7b9      	b.n	8000aac <PrintHex+0x214>
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8000b38:	43d8      	mvns	r0, r3
 8000b3a:	3008      	adds	r0, #8
 8000b3c:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8000b40:	aa06      	add	r2, sp, #24
 8000b42:	eb02 0163 	add.w	r1, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 8000b46:	f811 0c14 	ldrb.w	r0, [r1, #-20]
                        if (lHex!=0) leading_zero=false;
 8000b4a:	f010 030f 	ands.w	r3, r0, #15
 8000b4e:	d045      	beq.n	8000bdc <PrintHex+0x344>
                        if (lHex<10) lHex+='0';
 8000b50:	2b09      	cmp	r3, #9
 8000b52:	d951      	bls.n	8000bf8 <PrintHex+0x360>
                        else         lHex+='A'-10;
 8000b54:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <PrintHex+0x2f4>)
 8000b5a:	4798      	blx	r3
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e042      	b.n	8000be6 <PrintHex+0x34e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d05b      	beq.n	8000c1c <PrintHex+0x384>
                                if (flag0) print_byte_out('0');
 8000b64:	b1e6      	cbz	r6, 8000ba0 <PrintHex+0x308>
 8000b66:	2030      	movs	r0, #48	; 0x30
 8000b68:	47a8      	blx	r5
 8000b6a:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000b6c:	2f00      	cmp	r7, #0
 8000b6e:	f47f af2e 	bne.w	80009ce <PrintHex+0x136>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000b72:	2900      	cmp	r1, #0
 8000b74:	d055      	beq.n	8000c22 <PrintHex+0x38a>
                                if (flag0) print_byte_out('0');
 8000b76:	b17e      	cbz	r6, 8000b98 <PrintHex+0x300>
 8000b78:	2030      	movs	r0, #48	; 0x30
 8000b7a:	47a8      	blx	r5
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	e6fc      	b.n	800097a <PrintHex+0xe2>
 8000b80:	2030      	movs	r0, #48	; 0x30
 8000b82:	47a8      	blx	r5
 8000b84:	2101      	movs	r1, #1
 8000b86:	e70d      	b.n	80009a4 <PrintHex+0x10c>
 8000b88:	08000491 	.word	0x08000491
 8000b8c:	08000439 	.word	0x08000439
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000b90:	2030      	movs	r0, #48	; 0x30
 8000b92:	47a8      	blx	r5
 8000b94:	2201      	movs	r2, #1
 8000b96:	e6fd      	b.n	8000994 <PrintHex+0xfc>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000b98:	2020      	movs	r0, #32
 8000b9a:	47a8      	blx	r5
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	e6ec      	b.n	800097a <PrintHex+0xe2>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000ba0:	2020      	movs	r0, #32
 8000ba2:	47a8      	blx	r5
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	e70f      	b.n	80009c8 <PrintHex+0x130>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000ba8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000bac:	e786      	b.n	8000abc <PrintHex+0x224>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000bae:	2900      	cmp	r1, #0
 8000bb0:	d03d      	beq.n	8000c2e <PrintHex+0x396>
                                if (flag0) print_byte_out('0');
 8000bb2:	b17e      	cbz	r6, 8000bd4 <PrintHex+0x33c>
 8000bb4:	2030      	movs	r0, #48	; 0x30
 8000bb6:	47a8      	blx	r5
 8000bb8:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000bba:	2f00      	cmp	r7, #0
 8000bbc:	f47f aed0 	bne.w	8000960 <PrintHex+0xc8>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000bc0:	b319      	cbz	r1, 8000c0a <PrintHex+0x372>
                                if (flag0) print_byte_out('0');
 8000bc2:	b11e      	cbz	r6, 8000bcc <PrintHex+0x334>
 8000bc4:	2030      	movs	r0, #48	; 0x30
 8000bc6:	47a8      	blx	r5
 8000bc8:	2101      	movs	r1, #1
 8000bca:	e6d0      	b.n	800096e <PrintHex+0xd6>
                                else       print_byte_out(' ');
 8000bcc:	2020      	movs	r0, #32
 8000bce:	47a8      	blx	r5
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	e6cc      	b.n	800096e <PrintHex+0xd6>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000bd4:	2020      	movs	r0, #32
 8000bd6:	47a8      	blx	r5
 8000bd8:	2101      	movs	r1, #1
 8000bda:	e6be      	b.n	800095a <PrintHex+0xc2>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000bdc:	b13e      	cbz	r6, 8000bee <PrintHex+0x356>
 8000bde:	491a      	ldr	r1, [pc, #104]	; (8000c48 <PrintHex+0x3b0>)
 8000be0:	2030      	movs	r0, #48	; 0x30
 8000be2:	4788      	blx	r1
 8000be4:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 8000be6:	9802      	ldr	r0, [sp, #8]
 8000be8:	1e43      	subs	r3, r0, #1
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	e696      	b.n	800091c <PrintHex+0x84>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000bee:	2020      	movs	r0, #32
 8000bf0:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <PrintHex+0x3b0>)
 8000bf2:	4790      	blx	r2
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	e7f6      	b.n	8000be6 <PrintHex+0x34e>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8000bf8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000bfc:	e7ac      	b.n	8000b58 <PrintHex+0x2c0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000bfe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000c02:	e740      	b.n	8000a86 <PrintHex+0x1ee>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000c04:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000c08:	e789      	b.n	8000b1e <PrintHex+0x286>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000c0a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000c0e:	e6ac      	b.n	800096a <PrintHex+0xd2>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000c10:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000c14:	e6bc      	b.n	8000990 <PrintHex+0xf8>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000c16:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000c1a:	e6c1      	b.n	80009a0 <PrintHex+0x108>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000c1c:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8000c20:	e6d0      	b.n	80009c4 <PrintHex+0x12c>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000c22:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000c26:	e6d8      	b.n	80009da <PrintHex+0x142>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000c28:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8000c2c:	e704      	b.n	8000a38 <PrintHex+0x1a0>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000c2e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000c32:	e690      	b.n	8000956 <PrintHex+0xbe>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000c34:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000c38:	e712      	b.n	8000a60 <PrintHex+0x1c8>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000c3a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000c3e:	e75d      	b.n	8000afc <PrintHex+0x264>
 8000c40:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000c44:	e747      	b.n	8000ad6 <PrintHex+0x23e>
 8000c46:	bf00      	nop
 8000c48:	08000439 	.word	0x08000439

08000c4c <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 8000c4c:	b40f      	push	{r0, r1, r2, r3}
 8000c4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c52:	b085      	sub	sp, #20
	int		i;
	va_list args;
	char	*s=fmt;
 8000c54:	f10d 0930 	add.w	r9, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000c58:	4bac      	ldr	r3, [pc, #688]	; (8000f0c <Lb_printf+0x2c0>)
 8000c5a:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 8000c5c:	f859 4b04 	ldr.w	r4, [r9], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000c60:	4dab      	ldr	r5, [pc, #684]	; (8000f10 <Lb_printf+0x2c4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000c62:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8000f1c <Lb_printf+0x2d0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000c66:	4fab      	ldr	r7, [pc, #684]	; (8000f14 <Lb_printf+0x2c8>)
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000c68:	4eab      	ldr	r6, [pc, #684]	; (8000f18 <Lb_printf+0x2cc>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000c6a:	701a      	strb	r2, [r3, #0]
	
	while (*s)
 8000c6c:	7820      	ldrb	r0, [r4, #0]
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	f000 80be 	beq.w	8000df0 <Lb_printf+0x1a4>
	{
		if (*s=='%')
 8000c74:	2825      	cmp	r0, #37	; 0x25
 8000c76:	f040 80c0 	bne.w	8000dfa <Lb_printf+0x1ae>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c7a:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8000c7c:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c7e:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8000c82:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8000c84:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c88:	f240 80d6 	bls.w	8000e38 <Lb_printf+0x1ec>
 8000c8c:	2a78      	cmp	r2, #120	; 0x78
 8000c8e:	f000 80dd 	beq.w	8000e4c <Lb_printf+0x200>
 8000c92:	2a73      	cmp	r2, #115	; 0x73
 8000c94:	f000 80dd 	beq.w	8000e52 <Lb_printf+0x206>
 8000c98:	2a25      	cmp	r2, #37	; 0x25
 8000c9a:	f000 80dd 	beq.w	8000e58 <Lb_printf+0x20c>
 8000c9e:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ca0:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ca4:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ca8:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000caa:	2a01      	cmp	r2, #1
 8000cac:	f240 80d6 	bls.w	8000e5c <Lb_printf+0x210>
 8000cb0:	2978      	cmp	r1, #120	; 0x78
 8000cb2:	f000 80d6 	beq.w	8000e62 <Lb_printf+0x216>
 8000cb6:	2973      	cmp	r1, #115	; 0x73
 8000cb8:	f000 80d6 	beq.w	8000e68 <Lb_printf+0x21c>
 8000cbc:	2925      	cmp	r1, #37	; 0x25
 8000cbe:	f000 80d6 	beq.w	8000e6e <Lb_printf+0x222>
 8000cc2:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000cc4:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000cc8:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ccc:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000cce:	2901      	cmp	r1, #1
 8000cd0:	f240 80cf 	bls.w	8000e72 <Lb_printf+0x226>
 8000cd4:	2a78      	cmp	r2, #120	; 0x78
 8000cd6:	f000 80cf 	beq.w	8000e78 <Lb_printf+0x22c>
 8000cda:	2a73      	cmp	r2, #115	; 0x73
 8000cdc:	f000 80cf 	beq.w	8000e7e <Lb_printf+0x232>
 8000ce0:	2a25      	cmp	r2, #37	; 0x25
 8000ce2:	f000 80cf 	beq.w	8000e84 <Lb_printf+0x238>
 8000ce6:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ce8:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000cec:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000cf0:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000cf2:	2a01      	cmp	r2, #1
 8000cf4:	f240 80c8 	bls.w	8000e88 <Lb_printf+0x23c>
 8000cf8:	2978      	cmp	r1, #120	; 0x78
 8000cfa:	f000 80c8 	beq.w	8000e8e <Lb_printf+0x242>
 8000cfe:	2973      	cmp	r1, #115	; 0x73
 8000d00:	f000 80c8 	beq.w	8000e94 <Lb_printf+0x248>
 8000d04:	2925      	cmp	r1, #37	; 0x25
 8000d06:	f000 80c8 	beq.w	8000e9a <Lb_printf+0x24e>
 8000d0a:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d0c:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d10:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d14:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d16:	2901      	cmp	r1, #1
 8000d18:	f240 80c1 	bls.w	8000e9e <Lb_printf+0x252>
 8000d1c:	2a78      	cmp	r2, #120	; 0x78
 8000d1e:	f000 80c1 	beq.w	8000ea4 <Lb_printf+0x258>
 8000d22:	2a73      	cmp	r2, #115	; 0x73
 8000d24:	f000 80c1 	beq.w	8000eaa <Lb_printf+0x25e>
 8000d28:	2a25      	cmp	r2, #37	; 0x25
 8000d2a:	f000 80c1 	beq.w	8000eb0 <Lb_printf+0x264>
 8000d2e:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d30:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d34:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d38:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d3a:	2a01      	cmp	r2, #1
 8000d3c:	f240 80ba 	bls.w	8000eb4 <Lb_printf+0x268>
 8000d40:	2978      	cmp	r1, #120	; 0x78
 8000d42:	f000 80ba 	beq.w	8000eba <Lb_printf+0x26e>
 8000d46:	2973      	cmp	r1, #115	; 0x73
 8000d48:	f000 80ba 	beq.w	8000ec0 <Lb_printf+0x274>
 8000d4c:	2925      	cmp	r1, #37	; 0x25
 8000d4e:	f000 80ba 	beq.w	8000ec6 <Lb_printf+0x27a>
 8000d52:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d54:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d58:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d5c:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d5e:	2901      	cmp	r1, #1
 8000d60:	f240 80b3 	bls.w	8000eca <Lb_printf+0x27e>
 8000d64:	2a78      	cmp	r2, #120	; 0x78
 8000d66:	f000 80b3 	beq.w	8000ed0 <Lb_printf+0x284>
 8000d6a:	2a73      	cmp	r2, #115	; 0x73
 8000d6c:	f000 80b3 	beq.w	8000ed6 <Lb_printf+0x28a>
 8000d70:	2a25      	cmp	r2, #37	; 0x25
 8000d72:	f000 80b3 	beq.w	8000edc <Lb_printf+0x290>
 8000d76:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d78:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d7c:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 8000d80:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d82:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d86:	f240 80ab 	bls.w	8000ee0 <Lb_printf+0x294>
 8000d8a:	2978      	cmp	r1, #120	; 0x78
 8000d8c:	f000 80ab 	beq.w	8000ee6 <Lb_printf+0x29a>
 8000d90:	2973      	cmp	r1, #115	; 0x73
 8000d92:	f000 80ab 	beq.w	8000eec <Lb_printf+0x2a0>
 8000d96:	2925      	cmp	r1, #37	; 0x25
 8000d98:	f000 80ab 	beq.w	8000ef2 <Lb_printf+0x2a6>
 8000d9c:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d9e:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000da2:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8000da6:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000da8:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000dac:	f240 80a3 	bls.w	8000ef6 <Lb_printf+0x2aa>
 8000db0:	2a78      	cmp	r2, #120	; 0x78
 8000db2:	f000 80a3 	beq.w	8000efc <Lb_printf+0x2b0>
 8000db6:	2a73      	cmp	r2, #115	; 0x73
 8000db8:	f000 80a3 	beq.w	8000f02 <Lb_printf+0x2b6>
 8000dbc:	2a25      	cmp	r2, #37	; 0x25
 8000dbe:	f000 80a3 	beq.w	8000f08 <Lb_printf+0x2bc>
 8000dc2:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000dc4:	f88d 200d 	strb.w	r2, [sp, #13]
 8000dc8:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000dcc:	1c5c      	adds	r4, r3, #1
 8000dce:	2864      	cmp	r0, #100	; 0x64
 8000dd0:	d02b      	beq.n	8000e2a <Lb_printf+0x1de>
 8000dd2:	d815      	bhi.n	8000e00 <Lb_printf+0x1b4>
 8000dd4:	2825      	cmp	r0, #37	; 0x25
 8000dd6:	d01f      	beq.n	8000e18 <Lb_printf+0x1cc>
 8000dd8:	2863      	cmp	r0, #99	; 0x63
 8000dda:	f47f af47 	bne.w	8000c6c <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000dde:	f899 0000 	ldrb.w	r0, [r9]
 8000de2:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000de4:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000de6:	f109 0904 	add.w	r9, r9, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000dea:	2800      	cmp	r0, #0
 8000dec:	f47f af42 	bne.w	8000c74 <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 8000df0:	b005      	add	sp, #20
 8000df2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000df6:	b004      	add	sp, #16
 8000df8:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000dfa:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8000dfc:	3401      	adds	r4, #1
 8000dfe:	e735      	b.n	8000c6c <Lb_printf+0x20>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000e00:	2873      	cmp	r0, #115	; 0x73
 8000e02:	d00b      	beq.n	8000e1c <Lb_printf+0x1d0>
 8000e04:	2878      	cmp	r0, #120	; 0x78
 8000e06:	f47f af31 	bne.w	8000c6c <Lb_printf+0x20>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000e0a:	f8d9 1000 	ldr.w	r1, [r9]
 8000e0e:	a801      	add	r0, sp, #4
 8000e10:	f109 0904 	add.w	r9, r9, #4
 8000e14:	47b0      	blx	r6
					break;
 8000e16:	e729      	b.n	8000c6c <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000e18:	47a8      	blx	r5
 8000e1a:	e727      	b.n	8000c6c <Lb_printf+0x20>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000e1c:	f8d9 1000 	ldr.w	r1, [r9]
 8000e20:	a801      	add	r0, sp, #4
 8000e22:	f109 0904 	add.w	r9, r9, #4
 8000e26:	47b8      	blx	r7
 					break;
 8000e28:	e720      	b.n	8000c6c <Lb_printf+0x20>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000e2a:	f8d9 1000 	ldr.w	r1, [r9]
 8000e2e:	a801      	add	r0, sp, #4
 8000e30:	f109 0904 	add.w	r9, r9, #4
 8000e34:	47c0      	blx	r8
					break;
 8000e36:	e719      	b.n	8000c6c <Lb_printf+0x20>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e38:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000e3a:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000e3c:	aa04      	add	r2, sp, #16
 8000e3e:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 8000e40:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000e42:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 8000e46:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8000e4a:	e7bf      	b.n	8000dcc <Lb_printf+0x180>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000e4c:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e4e:	2078      	movs	r0, #120	; 0x78
 8000e50:	e7f4      	b.n	8000e3c <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000e52:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e54:	2073      	movs	r0, #115	; 0x73
 8000e56:	e7f1      	b.n	8000e3c <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000e58:	2401      	movs	r4, #1
 8000e5a:	e7ef      	b.n	8000e3c <Lb_printf+0x1f0>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e5c:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e5e:	2402      	movs	r4, #2
 8000e60:	e7ec      	b.n	8000e3c <Lb_printf+0x1f0>
 8000e62:	2402      	movs	r4, #2
 8000e64:	2078      	movs	r0, #120	; 0x78
 8000e66:	e7e9      	b.n	8000e3c <Lb_printf+0x1f0>
 8000e68:	2402      	movs	r4, #2
 8000e6a:	2073      	movs	r0, #115	; 0x73
 8000e6c:	e7e6      	b.n	8000e3c <Lb_printf+0x1f0>
 8000e6e:	2402      	movs	r4, #2
 8000e70:	e7e4      	b.n	8000e3c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e72:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e74:	2403      	movs	r4, #3
 8000e76:	e7e1      	b.n	8000e3c <Lb_printf+0x1f0>
 8000e78:	2403      	movs	r4, #3
 8000e7a:	2078      	movs	r0, #120	; 0x78
 8000e7c:	e7de      	b.n	8000e3c <Lb_printf+0x1f0>
 8000e7e:	2403      	movs	r4, #3
 8000e80:	2073      	movs	r0, #115	; 0x73
 8000e82:	e7db      	b.n	8000e3c <Lb_printf+0x1f0>
 8000e84:	2403      	movs	r4, #3
 8000e86:	e7d9      	b.n	8000e3c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e88:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e8a:	2404      	movs	r4, #4
 8000e8c:	e7d6      	b.n	8000e3c <Lb_printf+0x1f0>
 8000e8e:	2404      	movs	r4, #4
 8000e90:	2078      	movs	r0, #120	; 0x78
 8000e92:	e7d3      	b.n	8000e3c <Lb_printf+0x1f0>
 8000e94:	2404      	movs	r4, #4
 8000e96:	2073      	movs	r0, #115	; 0x73
 8000e98:	e7d0      	b.n	8000e3c <Lb_printf+0x1f0>
 8000e9a:	2404      	movs	r4, #4
 8000e9c:	e7ce      	b.n	8000e3c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e9e:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ea0:	2405      	movs	r4, #5
 8000ea2:	e7cb      	b.n	8000e3c <Lb_printf+0x1f0>
 8000ea4:	2405      	movs	r4, #5
 8000ea6:	2078      	movs	r0, #120	; 0x78
 8000ea8:	e7c8      	b.n	8000e3c <Lb_printf+0x1f0>
 8000eaa:	2405      	movs	r4, #5
 8000eac:	2073      	movs	r0, #115	; 0x73
 8000eae:	e7c5      	b.n	8000e3c <Lb_printf+0x1f0>
 8000eb0:	2405      	movs	r4, #5
 8000eb2:	e7c3      	b.n	8000e3c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000eb4:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000eb6:	2406      	movs	r4, #6
 8000eb8:	e7c0      	b.n	8000e3c <Lb_printf+0x1f0>
 8000eba:	2406      	movs	r4, #6
 8000ebc:	2078      	movs	r0, #120	; 0x78
 8000ebe:	e7bd      	b.n	8000e3c <Lb_printf+0x1f0>
 8000ec0:	2406      	movs	r4, #6
 8000ec2:	2073      	movs	r0, #115	; 0x73
 8000ec4:	e7ba      	b.n	8000e3c <Lb_printf+0x1f0>
 8000ec6:	2406      	movs	r4, #6
 8000ec8:	e7b8      	b.n	8000e3c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000eca:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ecc:	2407      	movs	r4, #7
 8000ece:	e7b5      	b.n	8000e3c <Lb_printf+0x1f0>
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	2078      	movs	r0, #120	; 0x78
 8000ed4:	e7b2      	b.n	8000e3c <Lb_printf+0x1f0>
 8000ed6:	2407      	movs	r4, #7
 8000ed8:	2073      	movs	r0, #115	; 0x73
 8000eda:	e7af      	b.n	8000e3c <Lb_printf+0x1f0>
 8000edc:	2407      	movs	r4, #7
 8000ede:	e7ad      	b.n	8000e3c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ee0:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ee2:	2408      	movs	r4, #8
 8000ee4:	e7aa      	b.n	8000e3c <Lb_printf+0x1f0>
 8000ee6:	2408      	movs	r4, #8
 8000ee8:	2078      	movs	r0, #120	; 0x78
 8000eea:	e7a7      	b.n	8000e3c <Lb_printf+0x1f0>
 8000eec:	2408      	movs	r4, #8
 8000eee:	2073      	movs	r0, #115	; 0x73
 8000ef0:	e7a4      	b.n	8000e3c <Lb_printf+0x1f0>
 8000ef2:	2408      	movs	r4, #8
 8000ef4:	e7a2      	b.n	8000e3c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	2409      	movs	r4, #9
 8000efa:	e79f      	b.n	8000e3c <Lb_printf+0x1f0>
 8000efc:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000efe:	2078      	movs	r0, #120	; 0x78
 8000f00:	e79c      	b.n	8000e3c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f02:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f04:	2073      	movs	r0, #115	; 0x73
 8000f06:	e799      	b.n	8000e3c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f08:	2409      	movs	r4, #9
 8000f0a:	e797      	b.n	8000e3c <Lb_printf+0x1f0>
 8000f0c:	2000040c 	.word	0x2000040c
 8000f10:	08000439 	.word	0x08000439
 8000f14:	08000471 	.word	0x08000471
 8000f18:	08000899 	.word	0x08000899
 8000f1c:	080004d5 	.word	0x080004d5

08000f20 <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8000f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8000f24:	4cab      	ldr	r4, [pc, #684]	; (80011d4 <Lb_vsprintf+0x2b4>)
	StrPrintBufIndex = 0;
 8000f26:	4eac      	ldr	r6, [pc, #688]	; (80011d8 <Lb_vsprintf+0x2b8>)
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8000f28:	6020      	str	r0, [r4, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8000f2a:	4bac      	ldr	r3, [pc, #688]	; (80011dc <Lb_vsprintf+0x2bc>)
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8000f2c:	2000      	movs	r0, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8000f2e:	4615      	mov	r5, r2
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8000f30:	6030      	str	r0, [r6, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8000f32:	2201      	movs	r2, #1



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000f34:	4eaa      	ldr	r6, [pc, #680]	; (80011e0 <Lb_vsprintf+0x2c0>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000f36:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 80011e8 <Lb_vsprintf+0x2c8>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000f3a:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 80011ec <Lb_vsprintf+0x2cc>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000f3e:	4fa9      	ldr	r7, [pc, #676]	; (80011e4 <Lb_vsprintf+0x2c4>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8000f40:	b085      	sub	sp, #20
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8000f42:	701a      	strb	r2, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
	int		i;
	char	*s=fmt;
 8000f44:	460c      	mov	r4, r1
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8000f46:	7820      	ldrb	r0, [r4, #0]
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	f000 80bc 	beq.w	80010c6 <Lb_vsprintf+0x1a6>
	{
		if (*s=='%')
 8000f4e:	2825      	cmp	r0, #37	; 0x25
 8000f50:	f040 80bc 	bne.w	80010cc <Lb_vsprintf+0x1ac>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f54:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8000f56:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f58:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8000f5c:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8000f5e:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f62:	f240 80cc 	bls.w	80010fe <Lb_vsprintf+0x1de>
 8000f66:	2a78      	cmp	r2, #120	; 0x78
 8000f68:	f000 80d3 	beq.w	8001112 <Lb_vsprintf+0x1f2>
 8000f6c:	2a73      	cmp	r2, #115	; 0x73
 8000f6e:	f000 80d3 	beq.w	8001118 <Lb_vsprintf+0x1f8>
 8000f72:	2a25      	cmp	r2, #37	; 0x25
 8000f74:	f000 80d3 	beq.w	800111e <Lb_vsprintf+0x1fe>
 8000f78:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f7a:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f7e:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f82:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f84:	2a01      	cmp	r2, #1
 8000f86:	f240 80cc 	bls.w	8001122 <Lb_vsprintf+0x202>
 8000f8a:	2978      	cmp	r1, #120	; 0x78
 8000f8c:	f000 80cc 	beq.w	8001128 <Lb_vsprintf+0x208>
 8000f90:	2973      	cmp	r1, #115	; 0x73
 8000f92:	f000 80cc 	beq.w	800112e <Lb_vsprintf+0x20e>
 8000f96:	2925      	cmp	r1, #37	; 0x25
 8000f98:	f000 80cc 	beq.w	8001134 <Lb_vsprintf+0x214>
 8000f9c:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f9e:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000fa2:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000fa6:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000fa8:	2901      	cmp	r1, #1
 8000faa:	f240 80c5 	bls.w	8001138 <Lb_vsprintf+0x218>
 8000fae:	2a78      	cmp	r2, #120	; 0x78
 8000fb0:	f000 80c5 	beq.w	800113e <Lb_vsprintf+0x21e>
 8000fb4:	2a73      	cmp	r2, #115	; 0x73
 8000fb6:	f000 80c5 	beq.w	8001144 <Lb_vsprintf+0x224>
 8000fba:	2a25      	cmp	r2, #37	; 0x25
 8000fbc:	f000 80c5 	beq.w	800114a <Lb_vsprintf+0x22a>
 8000fc0:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000fc2:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000fc6:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000fca:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000fcc:	2a01      	cmp	r2, #1
 8000fce:	f240 80be 	bls.w	800114e <Lb_vsprintf+0x22e>
 8000fd2:	2978      	cmp	r1, #120	; 0x78
 8000fd4:	f000 80be 	beq.w	8001154 <Lb_vsprintf+0x234>
 8000fd8:	2973      	cmp	r1, #115	; 0x73
 8000fda:	f000 80be 	beq.w	800115a <Lb_vsprintf+0x23a>
 8000fde:	2925      	cmp	r1, #37	; 0x25
 8000fe0:	f000 80be 	beq.w	8001160 <Lb_vsprintf+0x240>
 8000fe4:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000fe6:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000fea:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000fee:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ff0:	2901      	cmp	r1, #1
 8000ff2:	f240 80b7 	bls.w	8001164 <Lb_vsprintf+0x244>
 8000ff6:	2a78      	cmp	r2, #120	; 0x78
 8000ff8:	f000 80b7 	beq.w	800116a <Lb_vsprintf+0x24a>
 8000ffc:	2a73      	cmp	r2, #115	; 0x73
 8000ffe:	f000 80b7 	beq.w	8001170 <Lb_vsprintf+0x250>
 8001002:	2a25      	cmp	r2, #37	; 0x25
 8001004:	f000 80b7 	beq.w	8001176 <Lb_vsprintf+0x256>
 8001008:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800100a:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800100e:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001012:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001014:	2a01      	cmp	r2, #1
 8001016:	f240 80b0 	bls.w	800117a <Lb_vsprintf+0x25a>
 800101a:	2978      	cmp	r1, #120	; 0x78
 800101c:	f000 80b0 	beq.w	8001180 <Lb_vsprintf+0x260>
 8001020:	2973      	cmp	r1, #115	; 0x73
 8001022:	f000 80b0 	beq.w	8001186 <Lb_vsprintf+0x266>
 8001026:	2925      	cmp	r1, #37	; 0x25
 8001028:	f000 80b0 	beq.w	800118c <Lb_vsprintf+0x26c>
 800102c:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800102e:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001032:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001036:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001038:	2901      	cmp	r1, #1
 800103a:	f240 80a9 	bls.w	8001190 <Lb_vsprintf+0x270>
 800103e:	2a78      	cmp	r2, #120	; 0x78
 8001040:	f000 80a9 	beq.w	8001196 <Lb_vsprintf+0x276>
 8001044:	2a73      	cmp	r2, #115	; 0x73
 8001046:	f000 80a9 	beq.w	800119c <Lb_vsprintf+0x27c>
 800104a:	2a25      	cmp	r2, #37	; 0x25
 800104c:	f000 80a9 	beq.w	80011a2 <Lb_vsprintf+0x282>
 8001050:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001052:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001056:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 800105a:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800105c:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001060:	f240 80a1 	bls.w	80011a6 <Lb_vsprintf+0x286>
 8001064:	2978      	cmp	r1, #120	; 0x78
 8001066:	f000 80a1 	beq.w	80011ac <Lb_vsprintf+0x28c>
 800106a:	2973      	cmp	r1, #115	; 0x73
 800106c:	f000 80a1 	beq.w	80011b2 <Lb_vsprintf+0x292>
 8001070:	2925      	cmp	r1, #37	; 0x25
 8001072:	f000 80a1 	beq.w	80011b8 <Lb_vsprintf+0x298>
 8001076:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001078:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800107c:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8001080:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001082:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001086:	f240 8099 	bls.w	80011bc <Lb_vsprintf+0x29c>
 800108a:	2a78      	cmp	r2, #120	; 0x78
 800108c:	f000 8099 	beq.w	80011c2 <Lb_vsprintf+0x2a2>
 8001090:	2a73      	cmp	r2, #115	; 0x73
 8001092:	f000 8099 	beq.w	80011c8 <Lb_vsprintf+0x2a8>
 8001096:	2a25      	cmp	r2, #37	; 0x25
 8001098:	f000 8099 	beq.w	80011ce <Lb_vsprintf+0x2ae>
 800109c:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800109e:	f88d 200d 	strb.w	r2, [sp, #13]
 80010a2:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80010a6:	1c5c      	adds	r4, r3, #1
 80010a8:	2864      	cmp	r0, #100	; 0x64
 80010aa:	d023      	beq.n	80010f4 <Lb_vsprintf+0x1d4>
 80010ac:	d811      	bhi.n	80010d2 <Lb_vsprintf+0x1b2>
 80010ae:	2825      	cmp	r0, #37	; 0x25
 80010b0:	d019      	beq.n	80010e6 <Lb_vsprintf+0x1c6>
 80010b2:	2863      	cmp	r0, #99	; 0x63
 80010b4:	f47f af47 	bne.w	8000f46 <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80010b8:	7828      	ldrb	r0, [r5, #0]
 80010ba:	47b0      	blx	r6
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 80010bc:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 80010be:	3504      	adds	r5, #4
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 80010c0:	2800      	cmp	r0, #0
 80010c2:	f47f af44 	bne.w	8000f4e <Lb_vsprintf+0x2e>
			s++;
		}
	}
	
	return;
}
 80010c6:	b005      	add	sp, #20
 80010c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80010cc:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 80010ce:	3401      	adds	r4, #1
 80010d0:	e739      	b.n	8000f46 <Lb_vsprintf+0x26>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80010d2:	2873      	cmp	r0, #115	; 0x73
 80010d4:	d009      	beq.n	80010ea <Lb_vsprintf+0x1ca>
 80010d6:	2878      	cmp	r0, #120	; 0x78
 80010d8:	f47f af35 	bne.w	8000f46 <Lb_vsprintf+0x26>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 80010dc:	6829      	ldr	r1, [r5, #0]
 80010de:	a801      	add	r0, sp, #4
 80010e0:	3504      	adds	r5, #4
 80010e2:	47b8      	blx	r7
					break;
 80010e4:	e72f      	b.n	8000f46 <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80010e6:	47b0      	blx	r6
 80010e8:	e72d      	b.n	8000f46 <Lb_vsprintf+0x26>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 80010ea:	6829      	ldr	r1, [r5, #0]
 80010ec:	a801      	add	r0, sp, #4
 80010ee:	3504      	adds	r5, #4
 80010f0:	47c0      	blx	r8
 					break;
 80010f2:	e728      	b.n	8000f46 <Lb_vsprintf+0x26>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 80010f4:	6829      	ldr	r1, [r5, #0]
 80010f6:	a801      	add	r0, sp, #4
 80010f8:	3504      	adds	r5, #4
 80010fa:	47c8      	blx	r9
					break;
 80010fc:	e723      	b.n	8000f46 <Lb_vsprintf+0x26>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80010fe:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001100:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8001102:	aa04      	add	r2, sp, #16
 8001104:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 8001106:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8001108:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 800110c:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8001110:	e7c9      	b.n	80010a6 <Lb_vsprintf+0x186>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001112:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001114:	2078      	movs	r0, #120	; 0x78
 8001116:	e7f4      	b.n	8001102 <Lb_vsprintf+0x1e2>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001118:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800111a:	2073      	movs	r0, #115	; 0x73
 800111c:	e7f1      	b.n	8001102 <Lb_vsprintf+0x1e2>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800111e:	2401      	movs	r4, #1
 8001120:	e7ef      	b.n	8001102 <Lb_vsprintf+0x1e2>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001122:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001124:	2402      	movs	r4, #2
 8001126:	e7ec      	b.n	8001102 <Lb_vsprintf+0x1e2>
 8001128:	2402      	movs	r4, #2
 800112a:	2078      	movs	r0, #120	; 0x78
 800112c:	e7e9      	b.n	8001102 <Lb_vsprintf+0x1e2>
 800112e:	2402      	movs	r4, #2
 8001130:	2073      	movs	r0, #115	; 0x73
 8001132:	e7e6      	b.n	8001102 <Lb_vsprintf+0x1e2>
 8001134:	2402      	movs	r4, #2
 8001136:	e7e4      	b.n	8001102 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001138:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800113a:	2403      	movs	r4, #3
 800113c:	e7e1      	b.n	8001102 <Lb_vsprintf+0x1e2>
 800113e:	2403      	movs	r4, #3
 8001140:	2078      	movs	r0, #120	; 0x78
 8001142:	e7de      	b.n	8001102 <Lb_vsprintf+0x1e2>
 8001144:	2403      	movs	r4, #3
 8001146:	2073      	movs	r0, #115	; 0x73
 8001148:	e7db      	b.n	8001102 <Lb_vsprintf+0x1e2>
 800114a:	2403      	movs	r4, #3
 800114c:	e7d9      	b.n	8001102 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800114e:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001150:	2404      	movs	r4, #4
 8001152:	e7d6      	b.n	8001102 <Lb_vsprintf+0x1e2>
 8001154:	2404      	movs	r4, #4
 8001156:	2078      	movs	r0, #120	; 0x78
 8001158:	e7d3      	b.n	8001102 <Lb_vsprintf+0x1e2>
 800115a:	2404      	movs	r4, #4
 800115c:	2073      	movs	r0, #115	; 0x73
 800115e:	e7d0      	b.n	8001102 <Lb_vsprintf+0x1e2>
 8001160:	2404      	movs	r4, #4
 8001162:	e7ce      	b.n	8001102 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001164:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001166:	2405      	movs	r4, #5
 8001168:	e7cb      	b.n	8001102 <Lb_vsprintf+0x1e2>
 800116a:	2405      	movs	r4, #5
 800116c:	2078      	movs	r0, #120	; 0x78
 800116e:	e7c8      	b.n	8001102 <Lb_vsprintf+0x1e2>
 8001170:	2405      	movs	r4, #5
 8001172:	2073      	movs	r0, #115	; 0x73
 8001174:	e7c5      	b.n	8001102 <Lb_vsprintf+0x1e2>
 8001176:	2405      	movs	r4, #5
 8001178:	e7c3      	b.n	8001102 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800117a:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800117c:	2406      	movs	r4, #6
 800117e:	e7c0      	b.n	8001102 <Lb_vsprintf+0x1e2>
 8001180:	2406      	movs	r4, #6
 8001182:	2078      	movs	r0, #120	; 0x78
 8001184:	e7bd      	b.n	8001102 <Lb_vsprintf+0x1e2>
 8001186:	2406      	movs	r4, #6
 8001188:	2073      	movs	r0, #115	; 0x73
 800118a:	e7ba      	b.n	8001102 <Lb_vsprintf+0x1e2>
 800118c:	2406      	movs	r4, #6
 800118e:	e7b8      	b.n	8001102 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001190:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001192:	2407      	movs	r4, #7
 8001194:	e7b5      	b.n	8001102 <Lb_vsprintf+0x1e2>
 8001196:	2407      	movs	r4, #7
 8001198:	2078      	movs	r0, #120	; 0x78
 800119a:	e7b2      	b.n	8001102 <Lb_vsprintf+0x1e2>
 800119c:	2407      	movs	r4, #7
 800119e:	2073      	movs	r0, #115	; 0x73
 80011a0:	e7af      	b.n	8001102 <Lb_vsprintf+0x1e2>
 80011a2:	2407      	movs	r4, #7
 80011a4:	e7ad      	b.n	8001102 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80011a6:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80011a8:	2408      	movs	r4, #8
 80011aa:	e7aa      	b.n	8001102 <Lb_vsprintf+0x1e2>
 80011ac:	2408      	movs	r4, #8
 80011ae:	2078      	movs	r0, #120	; 0x78
 80011b0:	e7a7      	b.n	8001102 <Lb_vsprintf+0x1e2>
 80011b2:	2408      	movs	r4, #8
 80011b4:	2073      	movs	r0, #115	; 0x73
 80011b6:	e7a4      	b.n	8001102 <Lb_vsprintf+0x1e2>
 80011b8:	2408      	movs	r4, #8
 80011ba:	e7a2      	b.n	8001102 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80011bc:	4610      	mov	r0, r2
 80011be:	2409      	movs	r4, #9
 80011c0:	e79f      	b.n	8001102 <Lb_vsprintf+0x1e2>
 80011c2:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80011c4:	2078      	movs	r0, #120	; 0x78
 80011c6:	e79c      	b.n	8001102 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80011c8:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80011ca:	2073      	movs	r0, #115	; 0x73
 80011cc:	e799      	b.n	8001102 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80011ce:	2409      	movs	r4, #9
 80011d0:	e797      	b.n	8001102 <Lb_vsprintf+0x1e2>
 80011d2:	bf00      	nop
 80011d4:	200004c0 	.word	0x200004c0
 80011d8:	20000408 	.word	0x20000408
 80011dc:	2000040c 	.word	0x2000040c
 80011e0:	08000439 	.word	0x08000439
 80011e4:	08000899 	.word	0x08000899
 80011e8:	080004d5 	.word	0x080004d5
 80011ec:	08000471 	.word	0x08000471

080011f0 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 80011f0:	4668      	mov	r0, sp
 80011f2:	f020 0107 	bic.w	r1, r0, #7
 80011f6:	468d      	mov	sp, r1
 80011f8:	b579      	push	{r0, r3, r4, r5, r6, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80011fa:	492a      	ldr	r1, [pc, #168]	; (80012a4 <zero_loop+0x62>)
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <zero_loop+0x66>)
 80011fe:	4299      	cmp	r1, r3
 8001200:	d21b      	bcs.n	800123a <Hw_StartUp_Init+0x4a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 8001202:	1cda      	adds	r2, r3, #3
 8001204:	1d0c      	adds	r4, r1, #4
 8001206:	1b15      	subs	r5, r2, r4
 8001208:	4828      	ldr	r0, [pc, #160]	; (80012ac <zero_loop+0x6a>)
 800120a:	f025 0203 	bic.w	r2, r5, #3
 800120e:	1d16      	adds	r6, r2, #4
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 8001210:	6805      	ldr	r5, [r0, #0]
 8001212:	2304      	movs	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001214:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8001216:	600d      	str	r5, [r1, #0]
 8001218:	f3c2 0280 	ubfx	r2, r2, #2, #1
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800121c:	d00d      	beq.n	800123a <Hw_StartUp_Init+0x4a>
 800121e:	b122      	cbz	r2, 800122a <Hw_StartUp_Init+0x3a>
	{
		*(pulDest++) = *(pulSrc++);
 8001220:	6842      	ldr	r2, [r0, #4]
 8001222:	2308      	movs	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001224:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8001226:	6022      	str	r2, [r4, #0]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001228:	d007      	beq.n	800123a <Hw_StartUp_Init+0x4a>
	{
		*(pulDest++) = *(pulSrc++);
 800122a:	581d      	ldr	r5, [r3, r0]
 800122c:	1d1a      	adds	r2, r3, #4
 800122e:	505d      	str	r5, [r3, r1]
 8001230:	5884      	ldr	r4, [r0, r2]
 8001232:	3308      	adds	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001234:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8001236:	508c      	str	r4, [r1, r2]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001238:	d1f7      	bne.n	800122a <Hw_StartUp_Init+0x3a>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 800123a:	481e      	ldr	r0, [pc, #120]	; (80012b4 <zero_loop+0x72>)
 800123c:	491e      	ldr	r1, [pc, #120]	; (80012b8 <zero_loop+0x76>)
 800123e:	f04f 0200 	mov.w	r2, #0

08001242 <zero_loop>:
 8001242:	4288      	cmp	r0, r1
 8001244:	bfb8      	it	lt
 8001246:	f840 2b04 	strlt.w	r2, [r0], #4
 800124a:	f6ff affa 	blt.w	8001242 <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 800124e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001252:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001256:	6811      	ldr	r1, [r2, #0]
 8001258:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800125c:	f441 3080 	orr.w	r0, r1, #65536	; 0x10000
 8001260:	6010      	str	r0, [r2, #0]
 8001262:	e004      	b.n	800126e <zero_loop+0x2c>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8001264:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8001266:	0381      	lsls	r1, r0, #14
 8001268:	d405      	bmi.n	8001276 <zero_loop+0x34>
 800126a:	3b01      	subs	r3, #1
 800126c:	d003      	beq.n	8001276 <zero_loop+0x34>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 800126e:	6811      	ldr	r1, [r2, #0]
 8001270:	3b01      	subs	r3, #1
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8001272:	0388      	lsls	r0, r1, #14
 8001274:	d5f6      	bpl.n	8001264 <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8001276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127a:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800127e:	680a      	ldr	r2, [r1, #0]
 8001280:	f042 0010 	orr.w	r0, r2, #16
 8001284:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 8001286:	680b      	ldr	r3, [r1, #0]
 8001288:	f023 0203 	bic.w	r2, r3, #3
 800128c:	600a      	str	r2, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 800128e:	6808      	ldr	r0, [r1, #0]
 8001290:	f040 0302 	orr.w	r3, r0, #2
 8001294:	600b      	str	r3, [r1, #0]


    main();
 8001296:	4906      	ldr	r1, [pc, #24]	; (80012b0 <zero_loop+0x6e>)
 8001298:	4788      	blx	r1

}
 800129a:	e8bd 4079 	ldmia.w	sp!, {r0, r3, r4, r5, r6, lr}
 800129e:	4685      	mov	sp, r0
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000310 	.word	0x20000310
 80012ac:	08004538 	.word	0x08004538
 80012b0:	08000019 	.word	0x08000019
 80012b4:	20000400 	.word	0x20000400
 80012b8:	2000162c 	.word	0x2000162c

080012bc <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 80012bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 80012be:	f241 43f5 	movw	r3, #5365	; 0x14f5
 80012c2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80012c6:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 80012c8:	f241 7031 	movw	r0, #5937	; 0x1731
 80012cc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80012d0:	4780      	blx	r0
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80012d2:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80012d6:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80012da:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 80012de:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 80012e2:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80012e6:	f241 0104 	movw	r1, #4100	; 0x1004
 80012ea:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80012ee:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 80012f2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80012f6:	f2c3 3044 	movt	r0, #13124	; 0x3344
 80012fa:	f2c4 0101 	movt	r1, #16385	; 0x4001
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80012fe:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8001302:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8001306:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800130a:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 800130e:	f242 533d 	movw	r3, #9533	; 0x253d
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8001312:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 8001316:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800131a:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800131c:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800131e:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8001320:	6008      	str	r0, [r1, #0]
	
	Hw_DMA_Init();
 8001322:	4798      	blx	r3
	Hw_Uart_Init();
 8001324:	f241 413d 	movw	r1, #5181	; 0x143d
 8001328:	f6c0 0100 	movt	r1, #2048	; 0x800
 800132c:	4788      	blx	r1
	Hw_Led_Init();
 800132e:	f241 5089 	movw	r0, #5513	; 0x1589
 8001332:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001336:	4780      	blx	r0
	Hw_Timer_Init();
 8001338:	f241 7281 	movw	r2, #6017	; 0x1781
 800133c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001340:	4790      	blx	r2
	Hw_Si47xx_Init();
 8001342:	f641 4329 	movw	r3, #7209	; 0x1c29
 8001346:	f6c0 0300 	movt	r3, #2048	; 0x800
 800134a:	4798      	blx	r3
	Hw_N5110G_Init();
 800134c:	f641 6151 	movw	r1, #7761	; 0x1e51
 8001350:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001354:	4788      	blx	r1
	Hw_I2C_Init();
 8001356:	f641 2071 	movw	r0, #6769	; 0x1a71
 800135a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800135e:	4780      	blx	r0
	
	Hw_VCom_Init();
 8001360:	f641 2245 	movw	r2, #6725	; 0x1a45
 8001364:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001368:	4790      	blx	r2
 800136a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800136c <Hw_Wait>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
 800136c:	b082      	sub	sp, #8
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 800136e:	2300      	movs	r3, #0
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	9901      	ldr	r1, [sp, #4]
 8001374:	4288      	cmp	r0, r1
 8001376:	d905      	bls.n	8001384 <Hw_Wait+0x18>
 8001378:	9a01      	ldr	r2, [sp, #4]
 800137a:	1c53      	adds	r3, r2, #1
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	9901      	ldr	r1, [sp, #4]
 8001380:	4281      	cmp	r1, r0
 8001382:	d3f9      	bcc.n	8001378 <Hw_Wait+0xc>
}
 8001384:	b002      	add	sp, #8
 8001386:	4770      	bx	lr

08001388 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8001388:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 800138a:	f643 0304 	movw	r3, #14340	; 0x3804
 800138e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001392:	6818      	ldr	r0, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8001394:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8001396:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 8001398:	f241 6241 	movw	r2, #5697	; 0x1641
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 800139c:	f801 0d01 	strb.w	r0, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 80013a0:	f6c0 0200 	movt	r2, #2048	; 0x800
 80013a4:	2000      	movs	r0, #0
 80013a6:	4790      	blx	r2
}
 80013a8:	b003      	add	sp, #12
 80013aa:	bd00      	pop	{pc}

080013ac <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 80013ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80013b0:	f241 0618 	movw	r6, #4120	; 0x1018
 80013b4:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80013b8:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 80013ba:	f240 43c4 	movw	r3, #1220	; 0x4c4
 80013be:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80013c2:	f643 040c 	movw	r4, #14348	; 0x380c
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80013c6:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 80013ca:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80013ce:	f643 0708 	movw	r7, #14344	; 0x3808
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 80013d2:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 80013d4:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80013d6:	f2c4 0401 	movt	r4, #16385	; 0x4001
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80013da:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80013dc:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80013e0:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 80013e4:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80013e8:	200c      	movs	r0, #12
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80013ea:	f240 2171 	movw	r1, #625	; 0x271
 80013ee:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80013f2:	f24e 1504 	movw	r5, #57604	; 0xe104
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80013f6:	f8c6 8000 	str.w	r8, [r6]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80013fa:	f2ce 0500 	movt	r5, #57344	; 0xe000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80013fe:	6020      	str	r0, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8001400:	f8cc 2000 	str.w	r2, [ip]
	REG_USART1_CR3  = 0;
 8001404:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8001408:	6039      	str	r1, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800140a:	682b      	ldr	r3, [r5, #0]
 800140c:	f043 0020 	orr.w	r0, r3, #32
 8001410:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8001412:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8001414:	f241 7345 	movw	r3, #5957	; 0x1745
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8001418:	f041 0020 	orr.w	r0, r1, #32
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800141c:	f241 3189 	movw	r1, #5001	; 0x1389
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8001420:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8001422:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001426:	2025      	movs	r0, #37	; 0x25
 8001428:	f6c0 0300 	movt	r3, #2048	; 0x800
 800142c:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 800142e:	6822      	ldr	r2, [r4, #0]
 8001430:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 8001434:	6021      	str	r1, [r4, #0]
 8001436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800143a:	bf00      	nop

0800143c <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 800143c:	f241 53e1 	movw	r3, #5601	; 0x15e1
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8001440:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 8001442:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001446:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001448:	f240 43c4 	movw	r3, #1220	; 0x4c4
 800144c:	2200      	movs	r2, #0
 800144e:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8001452:	f241 34ad 	movw	r4, #5037	; 0x13ad
 8001456:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800145a:	4611      	mov	r1, r2
 800145c:	f6c0 0400 	movt	r4, #2048	; 0x800
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001460:	605a      	str	r2, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001462:	609a      	str	r2, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001464:	611a      	str	r2, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001466:	615a      	str	r2, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001468:	61da      	str	r2, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800146a:	621a      	str	r2, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001470:	635a      	str	r2, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001472:	639a      	str	r2, [r3, #56]	; 0x38
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8001474:	47a0      	blx	r4
 8001476:	bd10      	pop	{r4, pc}

08001478 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8001478:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 800147a:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 800147c:	b083      	sub	sp, #12
 800147e:	4d08      	ldr	r5, [pc, #32]	; (80014a0 <Hw_Uart_Getch+0x28>)
 8001480:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 8001482:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 8001486:	4620      	mov	r0, r4
 8001488:	47a8      	blx	r5
 800148a:	2800      	cmp	r0, #0
 800148c:	d0fb      	beq.n	8001486 <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 800148e:	4620      	mov	r0, r4
 8001490:	f10d 0107 	add.w	r1, sp, #7
 8001494:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <Hw_Uart_Getch+0x2c>)
 8001496:	4790      	blx	r2

	return Uart_GetData;
}
 8001498:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800149c:	b003      	add	sp, #12
 800149e:	bd30      	pop	{r4, r5, pc}
 80014a0:	08001611 	.word	0x08001611
 80014a4:	080016b9 	.word	0x080016b9

080014a8 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 80014a8:	280a      	cmp	r0, #10
 80014aa:	d00d      	beq.n	80014c8 <print_byte+0x20>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80014ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80014b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80014b4:	6813      	ldr	r3, [r2, #0]
 80014b6:	0619      	lsls	r1, r3, #24
 80014b8:	d5fc      	bpl.n	80014b4 <print_byte+0xc>
    
    REG_USART1_DR = Uart_PutData;
 80014ba:	f643 0104 	movw	r1, #14340	; 0x3804
 80014be:	b2c0      	uxtb	r0, r0
 80014c0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80014c4:	6008      	str	r0, [r1, #0]
 80014c6:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80014c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80014cc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80014d0:	6813      	ldr	r3, [r2, #0]
 80014d2:	061b      	lsls	r3, r3, #24
 80014d4:	d5fc      	bpl.n	80014d0 <print_byte+0x28>
    
    REG_USART1_DR = Uart_PutData;
 80014d6:	f643 0104 	movw	r1, #14340	; 0x3804
 80014da:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80014de:	220d      	movs	r2, #13
 80014e0:	600a      	str	r2, [r1, #0]
 80014e2:	e7e3      	b.n	80014ac <print_byte+0x4>

080014e4 <get_byte>:
#endif    
}


char get_byte(void)
{
 80014e4:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 80014e6:	f241 4379 	movw	r3, #5241	; 0x1479
 80014ea:	2000      	movs	r0, #0
 80014ec:	f6c0 0300 	movt	r3, #2048	; 0x800
 80014f0:	4798      	blx	r3
#endif
	
	return Ch;
}
 80014f2:	bd08      	pop	{r3, pc}

080014f4 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 80014f4:	f241 0304 	movw	r3, #4100	; 0x1004
 80014f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014fc:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 80014fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8001502:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 8001506:	f020 02f0 	bic.w	r2, r0, #240	; 0xf0
 800150a:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 800150c:	6818      	ldr	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800150e:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8001512:	f440 12e8 	orr.w	r2, r0, #1900544	; 0x1d0000
 8001516:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8001518:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800151a:	4608      	mov	r0, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800151c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001520:	600a      	str	r2, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8001522:	6801      	ldr	r1, [r0, #0]
 8001524:	018b      	lsls	r3, r1, #6
 8001526:	d5fc      	bpl.n	8001522 <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8001528:	f241 0304 	movw	r3, #4100	; 0x1004
 800152c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001530:	6818      	ldr	r0, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8001532:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8001534:	f020 0103 	bic.w	r1, r0, #3
 8001538:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	f040 0102 	orr.w	r1, r0, #2
 8001540:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 8001548:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 8001550:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 8001558:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 8001560:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	6018      	str	r0, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8001566:	6813      	ldr	r3, [r2, #0]
 8001568:	f003 010c 	and.w	r1, r3, #12
 800156c:	2908      	cmp	r1, #8
 800156e:	d1fa      	bne.n	8001566 <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 8001570:	f241 0018 	movw	r0, #4120	; 0x1018
 8001574:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001578:	6802      	ldr	r2, [r0, #0]
 800157a:	f442 4380 	orr.w	r3, r2, #16384	; 0x4000
 800157e:	f043 011d 	orr.w	r1, r3, #29
 8001582:	6001      	str	r1, [r0, #0]
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop

08001588 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8001588:	2204      	movs	r2, #4
 800158a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800158e:	6811      	ldr	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8001590:	f44f 6340 	mov.w	r3, #3072	; 0xc00
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8001594:	f021 60e0 	bic.w	r0, r1, #117440512	; 0x7000000
 8001598:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 800159a:	6811      	ldr	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 800159c:	f2c4 0301 	movt	r3, #16385	; 0x4001
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
 80015a0:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 80015a4:	6010      	str	r0, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80015a6:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80015a8:	f640 420c 	movw	r2, #3084	; 0xc0c
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80015ac:	f421 4070 	bic.w	r0, r1, #61440	; 0xf000
 80015b0:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 80015b2:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80015b4:	f2c4 0201 	movt	r2, #16385	; 0x4001
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 80015b8:	f441 5040 	orr.w	r0, r1, #12288	; 0x3000
 80015bc:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	6019      	str	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80015c2:	6813      	ldr	r3, [r2, #0]
 80015c4:	f043 0008 	orr.w	r0, r3, #8
 80015c8:	6010      	str	r0, [r2, #0]
 80015ca:	4770      	bx	lr

080015cc <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 80015cc:	b938      	cbnz	r0, 80015de <Hw_Led_Toggle+0x12>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 80015ce:	f640 430c 	movw	r3, #3084	; 0xc0c
 80015d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	f082 0008 	eor.w	r0, r2, #8
 80015dc:	6018      	str	r0, [r3, #0]
 80015de:	4770      	bx	lr

080015e0 <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 80015e0:	f240 51f8 	movw	r1, #1528	; 0x5f8
 80015e4:	f240 6208 	movw	r2, #1544	; 0x608
 80015e8:	2300      	movs	r3, #0
 80015ea:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80015ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80015f2:	800b      	strh	r3, [r1, #0]
 80015f4:	8013      	strh	r3, [r2, #0]
 80015f6:	804b      	strh	r3, [r1, #2]
 80015f8:	8053      	strh	r3, [r2, #2]
 80015fa:	808b      	strh	r3, [r1, #4]
 80015fc:	8093      	strh	r3, [r2, #4]
 80015fe:	80cb      	strh	r3, [r1, #6]
 8001600:	80d3      	strh	r3, [r2, #6]
 8001602:	810b      	strh	r3, [r1, #8]
 8001604:	8113      	strh	r3, [r2, #8]
 8001606:	814b      	strh	r3, [r1, #10]
 8001608:	8153      	strh	r3, [r2, #10]
 800160a:	818b      	strh	r3, [r1, #12]
 800160c:	8193      	strh	r3, [r2, #12]
 800160e:	4770      	bx	lr

08001610 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HW_UART_Q_VAILD+0x28>)
 8001612:	490a      	ldr	r1, [pc, #40]	; (800163c <HW_UART_Q_VAILD+0x2c>)
 8001614:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8001618:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
 800161c:	201f      	movs	r0, #31
 800161e:	1ad2      	subs	r2, r2, r3
 8001620:	3220      	adds	r2, #32
 8001622:	f2c8 0000 	movt	r0, #32768	; 0x8000
 8001626:	4010      	ands	r0, r2
 8001628:	2800      	cmp	r0, #0
 800162a:	db00      	blt.n	800162e <HW_UART_Q_VAILD+0x1e>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 800162c:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800162e:	3801      	subs	r0, #1
 8001630:	f060 011f 	orn	r1, r0, #31
 8001634:	1c48      	adds	r0, r1, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8001636:	4770      	bx	lr
 8001638:	20000608 	.word	0x20000608
 800163c:	200005f8 	.word	0x200005f8

08001640 <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001640:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <Hw_Uart_Q_Push+0x6c>)
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <Hw_Uart_Q_Push+0x70>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8001644:	b4f0      	push	{r4, r5, r6, r7}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001646:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 800164a:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 800164e:	b22c      	sxth	r4, r5
 8001650:	231f      	movs	r3, #31
 8001652:	1ba6      	subs	r6, r4, r6
 8001654:	3620      	adds	r6, #32
 8001656:	f2c8 0300 	movt	r3, #32768	; 0x8000
 800165a:	4033      	ands	r3, r6
 800165c:	2b00      	cmp	r3, #0
 800165e:	db18      	blt.n	8001692 <Hw_Uart_Q_Push+0x52>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8001660:	2b1f      	cmp	r3, #31
 8001662:	d01c      	beq.n	800169e <Hw_Uart_Q_Push+0x5e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8001664:	3501      	adds	r5, #1
 8001666:	b2ad      	uxth	r5, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8001668:	231f      	movs	r3, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800166a:	780e      	ldrb	r6, [r1, #0]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800166c:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8001670:	b229      	sxth	r1, r5
 8001672:	400b      	ands	r3, r1
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8001674:	eb00 1740 	add.w	r7, r0, r0, lsl #5
 8001678:	490e      	ldr	r1, [pc, #56]	; (80016b4 <Hw_Uart_Q_Push+0x74>)
 800167a:	193c      	adds	r4, r7, r4
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800167c:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800167e:	550e      	strb	r6, [r1, r4]
 8001680:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8001684:	db0d      	blt.n	80016a2 <Hw_Uart_Q_Push+0x62>
 8001686:	4909      	ldr	r1, [pc, #36]	; (80016ac <Hw_Uart_Q_Push+0x6c>)
 8001688:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

	return TRUE;
 800168c:	2001      	movs	r0, #1
}
 800168e:	bcf0      	pop	{r4, r5, r6, r7}
 8001690:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001692:	3b01      	subs	r3, #1
 8001694:	f063 031f 	orn	r3, r3, #31
 8001698:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 800169a:	2b1f      	cmp	r3, #31
 800169c:	d1e2      	bne.n	8001664 <Hw_Uart_Q_Push+0x24>
 800169e:	2000      	movs	r0, #0
 80016a0:	e7f5      	b.n	800168e <Hw_Uart_Q_Push+0x4e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80016a2:	1e5a      	subs	r2, r3, #1
 80016a4:	f062 031f 	orn	r3, r2, #31
 80016a8:	3301      	adds	r3, #1
 80016aa:	e7ec      	b.n	8001686 <Hw_Uart_Q_Push+0x46>
 80016ac:	20000608 	.word	0x20000608
 80016b0:	200005f8 	.word	0x200005f8
 80016b4:	20000500 	.word	0x20000500

080016b8 <Hw_Uart_Q_Pop>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80016b8:	4a1a      	ldr	r2, [pc, #104]	; (8001724 <Hw_Uart_Q_Pop+0x6c>)
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <Hw_Uart_Q_Pop+0x70>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 80016bc:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80016be:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 80016c2:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 80016c6:	b22c      	sxth	r4, r5
 80016c8:	231f      	movs	r3, #31
 80016ca:	1b36      	subs	r6, r6, r4
 80016cc:	3620      	adds	r6, #32
 80016ce:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80016d2:	4033      	ands	r3, r6
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db17      	blt.n	8001708 <Hw_Uart_Q_Pop+0x50>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 80016d8:	b1e3      	cbz	r3, 8001714 <Hw_Uart_Q_Pop+0x5c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80016da:	eb00 1640 	add.w	r6, r0, r0, lsl #5
 80016de:	3501      	adds	r5, #1
 80016e0:	1934      	adds	r4, r6, r4
 80016e2:	4e12      	ldr	r6, [pc, #72]	; (800172c <Hw_Uart_Q_Pop+0x74>)
 80016e4:	b2ad      	uxth	r5, r5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80016e6:	231f      	movs	r3, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80016e8:	5d34      	ldrb	r4, [r6, r4]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80016ea:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80016ee:	b22e      	sxth	r6, r5
 80016f0:	4033      	ands	r3, r6
 80016f2:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80016f4:	700c      	strb	r4, [r1, #0]
 80016f6:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80016fa:	db0d      	blt.n	8001718 <Hw_Uart_Q_Pop+0x60>
 80016fc:	4909      	ldr	r1, [pc, #36]	; (8001724 <Hw_Uart_Q_Pop+0x6c>)
 80016fe:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

    return TRUE;
 8001702:	2001      	movs	r0, #1
}
 8001704:	bc70      	pop	{r4, r5, r6}
 8001706:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001708:	3b01      	subs	r3, #1
 800170a:	f063 031f 	orn	r3, r3, #31
 800170e:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e2      	bne.n	80016da <Hw_Uart_Q_Pop+0x22>
 8001714:	4618      	mov	r0, r3
 8001716:	e7f5      	b.n	8001704 <Hw_Uart_Q_Pop+0x4c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8001718:	1e59      	subs	r1, r3, #1
 800171a:	f061 021f 	orn	r2, r1, #31
 800171e:	1c53      	adds	r3, r2, #1
 8001720:	e7ec      	b.n	80016fc <Hw_Uart_Q_Pop+0x44>
 8001722:	bf00      	nop
 8001724:	200005f8 	.word	0x200005f8
 8001728:	20000608 	.word	0x20000608
 800172c:	20000500 	.word	0x20000500

08001730 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8001730:	f640 0300 	movw	r3, #2048	; 0x800
 8001734:	f64e 5208 	movw	r2, #60680	; 0xed08
 8001738:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800173c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4770      	bx	lr

08001744 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8001744:	f640 0300 	movw	r3, #2048	; 0x800
 8001748:	3010      	adds	r0, #16
 800174a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800174e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8001752:	4770      	bx	lr

08001754 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8001754:	f640 0300 	movw	r3, #2048	; 0x800
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8001758:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 800175a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800175e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8001762:	4770      	bx	lr

08001764 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 8001764:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8001766:	f641 11d9 	movw	r1, #6617	; 0x19d9
 800176a:	f241 7355 	movw	r3, #5973	; 0x1755
 800176e:	203c      	movs	r0, #60	; 0x3c
 8001770:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001774:	2200      	movs	r2, #0
 8001776:	f6c0 0300 	movt	r3, #2048	; 0x800
 800177a:	4798      	blx	r3
 800177c:	bd08      	pop	{r3, pc}
 800177e:	bf00      	nop

08001780 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8001780:	b538      	push	{r3, r4, r5, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8001782:	4d28      	ldr	r5, [pc, #160]	; (8001824 <Hw_Timer_Init+0xa4>)
 8001784:	782b      	ldrb	r3, [r5, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d04a      	beq.n	8001820 <Hw_Timer_Init+0xa0>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800178a:	4827      	ldr	r0, [pc, #156]	; (8001828 <Hw_Timer_Init+0xa8>)
 800178c:	2400      	movs	r4, #0
 800178e:	7004      	strb	r4, [r0, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001790:	8044      	strh	r4, [r0, #2]
		Timer_Tbl[i].Timer_Init = 0;
 8001792:	8084      	strh	r4, [r0, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 8001794:	6084      	str	r4, [r0, #8]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001796:	7404      	strb	r4, [r0, #16]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001798:	8244      	strh	r4, [r0, #18]
		Timer_Tbl[i].Timer_Init = 0;
 800179a:	8284      	strh	r4, [r0, #20]
		Timer_Tbl[i].TmrFnct    = NULL;
 800179c:	6184      	str	r4, [r0, #24]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800179e:	f880 4020 	strb.w	r4, [r0, #32]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80017a2:	8444      	strh	r4, [r0, #34]	; 0x22
		Timer_Tbl[i].Timer_Init = 0;
 80017a4:	8484      	strh	r4, [r0, #36]	; 0x24
		Timer_Tbl[i].TmrFnct    = NULL;
 80017a6:	6284      	str	r4, [r0, #40]	; 0x28
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80017a8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
		Timer_Tbl[i].Timer_Ctn  = 0;
 80017ac:	8644      	strh	r4, [r0, #50]	; 0x32
		Timer_Tbl[i].Timer_Init = 0;
 80017ae:	8684      	strh	r4, [r0, #52]	; 0x34
		Timer_Tbl[i].TmrFnct    = NULL;
 80017b0:	6384      	str	r4, [r0, #56]	; 0x38
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80017b2:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
		Timer_Tbl[i].Timer_Ctn  = 0;
 80017b6:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
		Timer_Tbl[i].Timer_Init = 0;
 80017ba:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
		Timer_Tbl[i].TmrFnct    = NULL;
 80017be:	6484      	str	r4, [r0, #72]	; 0x48
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80017c0:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
		Timer_Tbl[i].Timer_Ctn  = 0;
 80017c4:	f8a0 4052 	strh.w	r4, [r0, #82]	; 0x52
		Timer_Tbl[i].Timer_Init = 0;
 80017c8:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
		Timer_Tbl[i].TmrFnct    = NULL;
 80017cc:	6584      	str	r4, [r0, #88]	; 0x58
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80017ce:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
		Timer_Tbl[i].Timer_Ctn  = 0;
 80017d2:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
		Timer_Tbl[i].Timer_Init = 0;
 80017d6:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		Timer_Tbl[i].TmrFnct    = NULL;
 80017da:	6684      	str	r4, [r0, #104]	; 0x68
	}	                   
	
	
	Hw_Timer_SetupISR();
 80017dc:	4913      	ldr	r1, [pc, #76]	; (800182c <Hw_Timer_Init+0xac>)
 80017de:	4788      	blx	r1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 80017e0:	f24e 0114 	movw	r1, #57364	; 0xe014
 80017e4:	f641 103f 	movw	r0, #6463	; 0x193f
	
	REG_STK_VAL  = 0;	
 80017e8:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 80017ec:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80017f0:	f2c0 0001 	movt	r0, #1
	
	REG_STK_VAL  = 0;	
 80017f4:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 80017f8:	f24e 0310 	movw	r3, #57360	; 0xe010
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 80017fc:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 80017fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8001802:	6014      	str	r4, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8001804:	6819      	ldr	r1, [r3, #0]
 8001806:	f041 0004 	orr.w	r0, r1, #4
 800180a:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	f042 0102 	orr.w	r1, r2, #2
 8001812:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	f040 0201 	orr.w	r2, r0, #1
 800181a:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 800181c:	2301      	movs	r3, #1
 800181e:	702b      	strb	r3, [r5, #0]
 8001820:	bd38      	pop	{r3, r4, r5, pc}
 8001822:	bf00      	nop
 8001824:	20000480 	.word	0x20000480
 8001828:	20000410 	.word	0x20000410
 800182c:	08001765 	.word	0x08001765

08001830 <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8001830:	4b66      	ldr	r3, [pc, #408]	; (80019cc <Hw_Timer_Tick+0x19c>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 8001832:	4a67      	ldr	r2, [pc, #412]	; (80019d0 <Hw_Timer_Tick+0x1a0>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8001834:	6819      	ldr	r1, [r3, #0]
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8001836:	b510      	push	{r4, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8001838:	1c48      	adds	r0, r1, #1
 800183a:	6018      	str	r0, [r3, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 800183c:	8814      	ldrh	r4, [r2, #0]
 800183e:	b2a3      	uxth	r3, r4
 8001840:	b11b      	cbz	r3, 800184a <Hw_Timer_Tick+0x1a>
 8001842:	8811      	ldrh	r1, [r2, #0]
 8001844:	1e48      	subs	r0, r1, #1
 8001846:	b284      	uxth	r4, r0
 8001848:	8014      	strh	r4, [r2, #0]
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 800184a:	4c62      	ldr	r4, [pc, #392]	; (80019d4 <Hw_Timer_Tick+0x1a4>)
 800184c:	7822      	ldrb	r2, [r4, #0]
 800184e:	2a01      	cmp	r2, #1
 8001850:	d01d      	beq.n	800188e <Hw_Timer_Tick+0x5e>
 8001852:	7c20      	ldrb	r0, [r4, #16]
 8001854:	4a5f      	ldr	r2, [pc, #380]	; (80019d4 <Hw_Timer_Tick+0x1a4>)
 8001856:	2801      	cmp	r0, #1
 8001858:	d02b      	beq.n	80018b2 <Hw_Timer_Tick+0x82>
 800185a:	f894 0020 	ldrb.w	r0, [r4, #32]
 800185e:	4a5d      	ldr	r2, [pc, #372]	; (80019d4 <Hw_Timer_Tick+0x1a4>)
 8001860:	2801      	cmp	r0, #1
 8001862:	d038      	beq.n	80018d6 <Hw_Timer_Tick+0xa6>
 8001864:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8001868:	4a5a      	ldr	r2, [pc, #360]	; (80019d4 <Hw_Timer_Tick+0x1a4>)
 800186a:	2801      	cmp	r0, #1
 800186c:	d046      	beq.n	80018fc <Hw_Timer_Tick+0xcc>
 800186e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8001872:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <Hw_Timer_Tick+0x1a4>)
 8001874:	2801      	cmp	r0, #1
 8001876:	d054      	beq.n	8001922 <Hw_Timer_Tick+0xf2>
 8001878:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 800187c:	4a55      	ldr	r2, [pc, #340]	; (80019d4 <Hw_Timer_Tick+0x1a4>)
 800187e:	2801      	cmp	r0, #1
 8001880:	d066      	beq.n	8001950 <Hw_Timer_Tick+0x120>
 8001882:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8001886:	4a53      	ldr	r2, [pc, #332]	; (80019d4 <Hw_Timer_Tick+0x1a4>)
 8001888:	2801      	cmp	r0, #1
 800188a:	d078      	beq.n	800197e <Hw_Timer_Tick+0x14e>
 800188c:	bd10      	pop	{r4, pc}
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800188e:	8863      	ldrh	r3, [r4, #2]
 8001890:	1e59      	subs	r1, r3, #1
 8001892:	b288      	uxth	r0, r1
 8001894:	8060      	strh	r0, [r4, #2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001896:	2800      	cmp	r0, #0
 8001898:	d1db      	bne.n	8001852 <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800189a:	7862      	ldrb	r2, [r4, #1]
 800189c:	2a01      	cmp	r2, #1
 800189e:	f000 8086 	beq.w	80019ae <Hw_Timer_Tick+0x17e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80018a2:	88a1      	ldrh	r1, [r4, #4]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80018a4:	68a3      	ldr	r3, [r4, #8]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80018a6:	8061      	strh	r1, [r4, #2]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80018a8:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80018aa:	7c20      	ldrb	r0, [r4, #16]
 80018ac:	4a49      	ldr	r2, [pc, #292]	; (80019d4 <Hw_Timer_Tick+0x1a4>)
 80018ae:	2801      	cmp	r0, #1
 80018b0:	d1d3      	bne.n	800185a <Hw_Timer_Tick+0x2a>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80018b2:	8a51      	ldrh	r1, [r2, #18]
 80018b4:	1e4b      	subs	r3, r1, #1
 80018b6:	b298      	uxth	r0, r3
 80018b8:	8250      	strh	r0, [r2, #18]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80018ba:	2800      	cmp	r0, #0
 80018bc:	d1cd      	bne.n	800185a <Hw_Timer_Tick+0x2a>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80018be:	7c51      	ldrb	r1, [r2, #17]
 80018c0:	2901      	cmp	r1, #1
 80018c2:	d072      	beq.n	80019aa <Hw_Timer_Tick+0x17a>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80018c4:	8aa2      	ldrh	r2, [r4, #20]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80018c6:	69a3      	ldr	r3, [r4, #24]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80018c8:	8262      	strh	r2, [r4, #18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80018ca:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80018cc:	f894 0020 	ldrb.w	r0, [r4, #32]
 80018d0:	4a40      	ldr	r2, [pc, #256]	; (80019d4 <Hw_Timer_Tick+0x1a4>)
 80018d2:	2801      	cmp	r0, #1
 80018d4:	d1c6      	bne.n	8001864 <Hw_Timer_Tick+0x34>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80018d6:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 80018d8:	1e4b      	subs	r3, r1, #1
 80018da:	b298      	uxth	r0, r3
 80018dc:	8450      	strh	r0, [r2, #34]	; 0x22

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80018de:	2800      	cmp	r0, #0
 80018e0:	d1c0      	bne.n	8001864 <Hw_Timer_Tick+0x34>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80018e2:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 80018e6:	2901      	cmp	r1, #1
 80018e8:	d06c      	beq.n	80019c4 <Hw_Timer_Tick+0x194>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80018ea:	8ca2      	ldrh	r2, [r4, #36]	; 0x24

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80018ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80018ee:	8462      	strh	r2, [r4, #34]	; 0x22

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80018f0:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80018f2:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 80018f6:	4a37      	ldr	r2, [pc, #220]	; (80019d4 <Hw_Timer_Tick+0x1a4>)
 80018f8:	2801      	cmp	r0, #1
 80018fa:	d1b8      	bne.n	800186e <Hw_Timer_Tick+0x3e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80018fc:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 80018fe:	1e4b      	subs	r3, r1, #1
 8001900:	b298      	uxth	r0, r3
 8001902:	8650      	strh	r0, [r2, #50]	; 0x32

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001904:	2800      	cmp	r0, #0
 8001906:	d1b2      	bne.n	800186e <Hw_Timer_Tick+0x3e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001908:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800190c:	2901      	cmp	r1, #1
 800190e:	d056      	beq.n	80019be <Hw_Timer_Tick+0x18e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001910:	8ea2      	ldrh	r2, [r4, #52]	; 0x34

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001912:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001914:	8662      	strh	r2, [r4, #50]	; 0x32

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001916:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001918:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800191c:	4a2d      	ldr	r2, [pc, #180]	; (80019d4 <Hw_Timer_Tick+0x1a4>)
 800191e:	2801      	cmp	r0, #1
 8001920:	d1aa      	bne.n	8001878 <Hw_Timer_Tick+0x48>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001922:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
 8001926:	1e4b      	subs	r3, r1, #1
 8001928:	b298      	uxth	r0, r3
 800192a:	f8a2 0042 	strh.w	r0, [r2, #66]	; 0x42

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800192e:	2800      	cmp	r0, #0
 8001930:	d1a2      	bne.n	8001878 <Hw_Timer_Tick+0x48>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001932:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
 8001936:	2901      	cmp	r1, #1
 8001938:	d03e      	beq.n	80019b8 <Hw_Timer_Tick+0x188>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800193a:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800193e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001940:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001944:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001946:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 800194a:	4a22      	ldr	r2, [pc, #136]	; (80019d4 <Hw_Timer_Tick+0x1a4>)
 800194c:	2801      	cmp	r0, #1
 800194e:	d198      	bne.n	8001882 <Hw_Timer_Tick+0x52>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001950:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
 8001954:	1e4b      	subs	r3, r1, #1
 8001956:	b298      	uxth	r0, r3
 8001958:	f8a2 0052 	strh.w	r0, [r2, #82]	; 0x52

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800195c:	2800      	cmp	r0, #0
 800195e:	d190      	bne.n	8001882 <Hw_Timer_Tick+0x52>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001960:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
 8001964:	2901      	cmp	r1, #1
 8001966:	d024      	beq.n	80019b2 <Hw_Timer_Tick+0x182>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001968:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800196c:	6da3      	ldr	r3, [r4, #88]	; 0x58
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800196e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001972:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001974:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8001978:	4a16      	ldr	r2, [pc, #88]	; (80019d4 <Hw_Timer_Tick+0x1a4>)
 800197a:	2801      	cmp	r0, #1
 800197c:	d186      	bne.n	800188c <Hw_Timer_Tick+0x5c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800197e:	f8b2 1062 	ldrh.w	r1, [r2, #98]	; 0x62
 8001982:	1e4b      	subs	r3, r1, #1
 8001984:	b298      	uxth	r0, r3
 8001986:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800198a:	2800      	cmp	r0, #0
 800198c:	f47f af7e 	bne.w	800188c <Hw_Timer_Tick+0x5c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001990:	f892 1061 	ldrb.w	r1, [r2, #97]	; 0x61

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001994:	6ea3      	ldr	r3, [r4, #104]	; 0x68
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001996:	2901      	cmp	r1, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8001998:	bf08      	it	eq
 800199a:	f882 0060 	strbeq.w	r0, [r2, #96]	; 0x60

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800199e:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80019a2:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80019a6:	4798      	blx	r3
 80019a8:	bd10      	pop	{r4, pc}

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 80019aa:	7410      	strb	r0, [r2, #16]
 80019ac:	e78a      	b.n	80018c4 <Hw_Timer_Tick+0x94>
 80019ae:	7020      	strb	r0, [r4, #0]
 80019b0:	e777      	b.n	80018a2 <Hw_Timer_Tick+0x72>
 80019b2:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 80019b6:	e7d7      	b.n	8001968 <Hw_Timer_Tick+0x138>
 80019b8:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
 80019bc:	e7bd      	b.n	800193a <Hw_Timer_Tick+0x10a>
 80019be:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
 80019c2:	e7a5      	b.n	8001910 <Hw_Timer_Tick+0xe0>
 80019c4:	f882 0020 	strb.w	r0, [r2, #32]
 80019c8:	e78f      	b.n	80018ea <Hw_Timer_Tick+0xba>
 80019ca:	bf00      	nop
 80019cc:	20000484 	.word	0x20000484
 80019d0:	20000488 	.word	0x20000488
 80019d4:	20000410 	.word	0x20000410

080019d8 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 80019d8:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 80019da:	f641 0331 	movw	r3, #6193	; 0x1831
 80019de:	f6c0 0300 	movt	r3, #2048	; 0x800
 80019e2:	4798      	blx	r3
 80019e4:	bd08      	pop	{r3, pc}
 80019e6:	bf00      	nop

080019e8 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 80019e8:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 80019ea:	f240 4410 	movw	r4, #1040	; 0x410
 80019ee:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80019f2:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 80019f6:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 80019f8:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 80019fa:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 80019fc:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 80019fe:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 8001a00:	8081      	strh	r1, [r0, #4]
}
 8001a02:	bc10      	pop	{r4}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8001a08:	2806      	cmp	r0, #6
 8001a0a:	d803      	bhi.n	8001a14 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8001a0c:	4b02      	ldr	r3, [pc, #8]	; (8001a18 <Hw_Timer_Start+0x10>)
 8001a0e:	0100      	lsls	r0, r0, #4
 8001a10:	2201      	movs	r2, #1
 8001a12:	541a      	strb	r2, [r3, r0]
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000410 	.word	0x20000410

08001a1c <Hw_Timer_Stop>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Stop(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8001a1c:	2806      	cmp	r0, #6
 8001a1e:	d803      	bhi.n	8001a28 <Hw_Timer_Stop+0xc>
		Timer_Tbl[TmrNum].Timer_En = OFF;
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <Hw_Timer_Stop+0x10>)
 8001a22:	0100      	lsls	r0, r0, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	541a      	strb	r2, [r3, r0]
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000410 	.word	0x20000410

08001a30 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8001a30:	4a03      	ldr	r2, [pc, #12]	; (8001a40 <Hw_Timer_Delay_ms+0x10>)
 8001a32:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 8001a34:	8813      	ldrh	r3, [r2, #0]
 8001a36:	b298      	uxth	r0, r3
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d1fb      	bne.n	8001a34 <Hw_Timer_Delay_ms+0x4>
}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000488 	.word	0x20000488

08001a44 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8001a44:	b508      	push	{r3, lr}
	Set_System();
 8001a46:	f642 7359 	movw	r3, #12121	; 0x2f59
 8001a4a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a4e:	4798      	blx	r3
	Set_USBClock();
 8001a50:	f642 7079 	movw	r0, #12153	; 0x2f79
 8001a54:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a58:	4780      	blx	r0
	USB_Interrupts_Config();
 8001a5a:	f642 71bd 	movw	r1, #12221	; 0x2fbd
 8001a5e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001a62:	4788      	blx	r1
	USB_Init();	
 8001a64:	f643 32a5 	movw	r2, #15269	; 0x3ba5
 8001a68:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001a6c:	4790      	blx	r2
 8001a6e:	bd08      	pop	{r3, pc}

08001a70 <Hw_I2C_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_Init( void )
{
 8001a70:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	#if HW_I2C_USE_SW_I2C == 1
	Hw_I2C_SW_Init();	
	#else
	Hw_I2C_HW_Init();		
 8001a72:	f641 23d9 	movw	r3, #6873	; 0x1ad9
 8001a76:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a7a:	4798      	blx	r3
 8001a7c:	bd08      	pop	{r3, pc}
 8001a7e:	bf00      	nop

08001a80 <Hw_I2C_Write>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_Write( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8001a80:	b510      	push	{r4, lr}
	
	Ret = Hw_I2C_SW_Write( Ch, i2c_addr, pdata, len );
	
	#else

	Ret = Hw_I2C_HW_Write( Ch, i2c_addr, pdata, len );
 8001a82:	f641 344d 	movw	r4, #6989	; 0x1b4d
 8001a86:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001a8a:	47a0      	blx	r4
	
	#endif

    return Ret;
}
 8001a8c:	bd10      	pop	{r4, pc}
 8001a8e:	bf00      	nop

08001a90 <Hw_I2C_HW_IO_Setup>:
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8001a90:	2204      	movs	r2, #4
 8001a92:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001a96:	6811      	ldr	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8001a98:	f640 4304 	movw	r3, #3076	; 0xc04
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8001a9c:	f041 0002 	orr.w	r0, r1, #2
 8001aa0:	6010      	str	r0, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8001aa2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	f022 010f 	bic.w	r1, r2, #15
 8001aac:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	f040 0203 	orr.w	r2, r0, #3
 8001ab4:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 8001ab6:	6819      	ldr	r1, [r3, #0]
 8001ab8:	f041 000c 	orr.w	r0, r1, #12
 8001abc:	6018      	str	r0, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8001ac4:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	f040 0230 	orr.w	r2, r0, #48	; 0x30
 8001acc:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 8001ace:	6819      	ldr	r1, [r3, #0]
 8001ad0:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 8001ad4:	6018      	str	r0, [r3, #0]
 8001ad6:	4770      	bx	lr

08001ad8 <Hw_I2C_HW_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_HW_Init( void )
{
 8001ad8:	b538      	push	{r3, r4, r5, lr}
	u32 SR;


	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	
 8001ada:	f641 2391 	movw	r3, #6801	; 0x1a91
 8001ade:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001ae2:	4798      	blx	r3


	REG_I2C1_CR1 = 0;
 8001ae4:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001ae8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001aec:	2500      	movs	r5, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8001aee:	f245 4404 	movw	r4, #21508	; 0x5404
	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	


	REG_I2C1_CR1 = 0;
 8001af2:	601d      	str	r5, [r3, #0]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8001af4:	f2c4 0400 	movt	r4, #16384	; 0x4000
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8001af8:	f245 401c 	movw	r0, #21532	; 0x541c

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8001afc:	2524      	movs	r5, #36	; 0x24
 8001afe:	6025      	str	r5, [r4, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8001b00:	f2c4 0000 	movt	r0, #16384	; 0x4000
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8001b04:	f245 4120 	movw	r1, #21536	; 0x5420
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8001b08:	f248 041e 	movw	r4, #32798	; 0x801e
 8001b0c:	6004      	str	r4, [r0, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8001b0e:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8001b12:	2004      	movs	r0, #4


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8001b14:	f241 021c 	movw	r2, #4124	; 0x101c
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8001b18:	6008      	str	r0, [r1, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8001b1a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b1e:	6810      	ldr	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8001b20:	f245 4114 	movw	r1, #21524	; 0x5414
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8001b24:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8001b28:	6010      	str	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8001b2a:	6818      	ldr	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8001b2c:	f245 4218 	movw	r2, #21528	; 0x5418
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8001b30:	f020 0002 	bic.w	r0, r0, #2
 8001b34:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8001b36:	6818      	ldr	r0, [r3, #0]

	SR = REG_I2C1_SR1;
 8001b38:	f2c4 0100 	movt	r1, #16384	; 0x4000
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8001b3c:	f040 0001 	orr.w	r0, r0, #1
 8001b40:	6018      	str	r0, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8001b42:	f2c4 0200 	movt	r2, #16384	; 0x4000


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8001b46:	680b      	ldr	r3, [r1, #0]
	SR = REG_I2C1_SR2;
 8001b48:	6813      	ldr	r3, [r2, #0]
 8001b4a:	bd38      	pop	{r3, r4, r5, pc}

08001b4c <Hw_I2C_HW_Write>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_HW_Write( u8 Ch, u16 i2c_addr, u8* pdata, u16 len )
{
 8001b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u32 TimeOut;
	u32 SR1;
	u32 SR2;


	switch( Ch )
 8001b50:	4605      	mov	r5, r0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_HW_Write( u8 Ch, u16 i2c_addr, u8* pdata, u16 len )
{
 8001b52:	468a      	mov	sl, r1
	u32 TimeOut;
	u32 SR1;
	u32 SR2;


	switch( Ch )
 8001b54:	2800      	cmp	r0, #0
 8001b56:	d13a      	bne.n	8001bce <Hw_I2C_HW_Write+0x82>
	{
		case 0:
			SET_BIT( REG_I2C1_CR1, 8 );	// START
 8001b58:	f44f 48a8 	mov.w	r8, #21504	; 0x5400
 8001b5c:	f2c4 0800 	movt	r8, #16384	; 0x4000
 8001b60:	f8d8 3000 	ldr.w	r3, [r8]
			Lb_printf("S0\n" );

			Ret = Hw_I2C_HW_WaitForBitSet( Ch, (u32 *)&REG_I2C1_SR1, 0, 10000 );
			if( Ret != 0 ) break;

			Lb_printf("S1 %x\n", REG_I2C1_SR1);
 8001b64:	f245 4714 	movw	r7, #21524	; 0x5414


	switch( Ch )
	{
		case 0:
			SET_BIT( REG_I2C1_CR1, 8 );	// START
 8001b68:	f443 7180 	orr.w	r1, r3, #256	; 0x100

			Lb_printf("S0\n" );
 8001b6c:	4c19      	ldr	r4, [pc, #100]	; (8001bd4 <Hw_I2C_HW_Write+0x88>)

			Ret = Hw_I2C_HW_WaitForBitSet( Ch, (u32 *)&REG_I2C1_SR1, 0, 10000 );
			if( Ret != 0 ) break;

			Lb_printf("S1 %x\n", REG_I2C1_SR1);
 8001b6e:	f2c4 0700 	movt	r7, #16384	; 0x4000
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_I2C1_CR1, 8 );	// START

			Lb_printf("S0\n" );
 8001b72:	4819      	ldr	r0, [pc, #100]	; (8001bd8 <Hw_I2C_HW_Write+0x8c>)


	switch( Ch )
	{
		case 0:
			SET_BIT( REG_I2C1_CR1, 8 );	// START
 8001b74:	f8c8 1000 	str.w	r1, [r8]

			Ret = Hw_I2C_HW_WaitForBitSet( Ch, (u32 *)&REG_I2C1_SR1, 0, 10000 );
			if( Ret != 0 ) break;

			Lb_printf("S1 %x\n", REG_I2C1_SR1);
			Lb_printf("S1 %x\n", REG_I2C1_SR2);
 8001b78:	f245 4618 	movw	r6, #21528	; 0x5418
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_I2C1_CR1, 8 );	// START

			Lb_printf("S0\n" );
 8001b7c:	47a0      	blx	r4

			Ret = Hw_I2C_HW_WaitForBitSet( Ch, (u32 *)&REG_I2C1_SR1, 0, 10000 );
			if( Ret != 0 ) break;

			Lb_printf("S1 %x\n", REG_I2C1_SR1);
			Lb_printf("S1 %x\n", REG_I2C1_SR2);
 8001b7e:	f2c4 0600 	movt	r6, #16384	; 0x4000
			Lb_printf("S0\n" );

			Ret = Hw_I2C_HW_WaitForBitSet( Ch, (u32 *)&REG_I2C1_SR1, 0, 10000 );
			if( Ret != 0 ) break;

			Lb_printf("S1 %x\n", REG_I2C1_SR1);
 8001b82:	6839      	ldr	r1, [r7, #0]
 8001b84:	4815      	ldr	r0, [pc, #84]	; (8001bdc <Hw_I2C_HW_Write+0x90>)
			Lb_printf("S1 %x\n", REG_I2C1_SR2);


			REG_I2C1_DR = i2c_addr;		// ADDR Write 
 8001b86:	f245 4910 	movw	r9, #21520	; 0x5410
			Lb_printf("S0\n" );

			Ret = Hw_I2C_HW_WaitForBitSet( Ch, (u32 *)&REG_I2C1_SR1, 0, 10000 );
			if( Ret != 0 ) break;

			Lb_printf("S1 %x\n", REG_I2C1_SR1);
 8001b8a:	47a0      	blx	r4
			Lb_printf("S1 %x\n", REG_I2C1_SR2);


			REG_I2C1_DR = i2c_addr;		// ADDR Write 
 8001b8c:	f2c4 0900 	movt	r9, #16384	; 0x4000

			Ret = Hw_I2C_HW_WaitForBitSet( Ch, (u32 *)&REG_I2C1_SR1, 0, 10000 );
			if( Ret != 0 ) break;

			Lb_printf("S1 %x\n", REG_I2C1_SR1);
			Lb_printf("S1 %x\n", REG_I2C1_SR2);
 8001b90:	6831      	ldr	r1, [r6, #0]
 8001b92:	4812      	ldr	r0, [pc, #72]	; (8001bdc <Hw_I2C_HW_Write+0x90>)
 8001b94:	47a0      	blx	r4


			REG_I2C1_DR = i2c_addr;		// ADDR Write 
 8001b96:	f8c9 a000 	str.w	sl, [r9]

			Ret = Hw_I2C_HW_WaitForBitSet( Ch, (u32 *)&REG_I2C1_SR1, 1, 10000 );
			if( Ret != 0 ) break;

			Lb_printf("S2 %x\n", REG_I2C1_SR1);
 8001b9a:	6839      	ldr	r1, [r7, #0]
 8001b9c:	4810      	ldr	r0, [pc, #64]	; (8001be0 <Hw_I2C_HW_Write+0x94>)
 8001b9e:	47a0      	blx	r4
			Lb_printf("S2 %x\n", REG_I2C1_SR2);
 8001ba0:	6831      	ldr	r1, [r6, #0]
 8001ba2:	480f      	ldr	r0, [pc, #60]	; (8001be0 <Hw_I2C_HW_Write+0x94>)
 8001ba4:	47a0      	blx	r4


			REG_I2C1_DR = 0x00;		
 8001ba6:	f8c9 5000 	str.w	r5, [r9]
			Ret = Hw_I2C_HW_WaitForBitSet( Ch, (u32 *)&REG_I2C1_SR1, 7, 10000 );
			if( Ret != 0 ) break;
			Ret = Hw_I2C_HW_WaitForBitSet( Ch, (u32 *)&REG_I2C1_SR1, 2, 10000 );
			if( Ret != 0 ) break;

			Lb_printf("S2 %x\n", REG_I2C1_SR1);
 8001baa:	6839      	ldr	r1, [r7, #0]
 8001bac:	480c      	ldr	r0, [pc, #48]	; (8001be0 <Hw_I2C_HW_Write+0x94>)
 8001bae:	47a0      	blx	r4
			Lb_printf("S2 %x\n", REG_I2C1_SR2);
 8001bb0:	6831      	ldr	r1, [r6, #0]
 8001bb2:	480b      	ldr	r0, [pc, #44]	; (8001be0 <Hw_I2C_HW_Write+0x94>)
 8001bb4:	47a0      	blx	r4

			SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 8001bb6:	f8d8 2000 	ldr.w	r2, [r8]

			Lb_printf("S3 %x\n", REG_I2C1_SR1);
 8001bba:	480a      	ldr	r0, [pc, #40]	; (8001be4 <Hw_I2C_HW_Write+0x98>)
			if( Ret != 0 ) break;

			Lb_printf("S2 %x\n", REG_I2C1_SR1);
			Lb_printf("S2 %x\n", REG_I2C1_SR2);

			SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 8001bbc:	f442 7300 	orr.w	r3, r2, #512	; 0x200
 8001bc0:	f8c8 3000 	str.w	r3, [r8]

			Lb_printf("S3 %x\n", REG_I2C1_SR1);
 8001bc4:	6839      	ldr	r1, [r7, #0]
 8001bc6:	47a0      	blx	r4
			Lb_printf("S3 %x\n", REG_I2C1_SR2);
 8001bc8:	6831      	ldr	r1, [r6, #0]
 8001bca:	4806      	ldr	r0, [pc, #24]	; (8001be4 <Hw_I2C_HW_Write+0x98>)
 8001bcc:	47a0      	blx	r4
	}
	
	Hw_I2C_SW_EndTransmit(Ch);
	*/
    return Ret;
}
 8001bce:	2000      	movs	r0, #0
 8001bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bd4:	08000c4d 	.word	0x08000c4d
 8001bd8:	08004464 	.word	0x08004464
 8001bdc:	08004468 	.word	0x08004468
 8001be0:	08004470 	.word	0x08004470
 8001be4:	08004478 	.word	0x08004478

08001be8 <Hw_Si47xx_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
 8001be8:	b538      	push	{r3, r4, r5, lr}
	Hw_Wait(100);
 8001bea:	f241 356d 	movw	r5, #4973	; 0x136d
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8001bee:	f640 440c 	movw	r4, #3084	; 0xc0c
 8001bf2:	f2c4 0401 	movt	r4, #16385	; 0x4001
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
 8001bf6:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001bfa:	2064      	movs	r0, #100	; 0x64
 8001bfc:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8001bfe:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(100);
 8001c00:	2064      	movs	r0, #100	; 0x64
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8001c02:	f043 0120 	orr.w	r1, r3, #32
 8001c06:	6021      	str	r1, [r4, #0]
	Hw_Wait(100);
 8001c08:	47a8      	blx	r5
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8001c0a:	6822      	ldr	r2, [r4, #0]
	Hw_Wait(500);	
 8001c0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8001c10:	f022 0320 	bic.w	r3, r2, #32
 8001c14:	6023      	str	r3, [r4, #0]
	Hw_Wait(500);	
 8001c16:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8001c18:	6821      	ldr	r1, [r4, #0]
	Hw_Wait(100);
 8001c1a:	2064      	movs	r0, #100	; 0x64
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
	Hw_Wait(500);	
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8001c1c:	f041 0220 	orr.w	r2, r1, #32
 8001c20:	6022      	str	r2, [r4, #0]
	Hw_Wait(100);
 8001c22:	47a8      	blx	r5
 8001c24:	bd38      	pop	{r3, r4, r5, pc}
 8001c26:	bf00      	nop

08001c28 <Hw_Si47xx_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Init( void )
{
 8001c28:	b508      	push	{r3, lr}
	Hw_I2C_Init();
 8001c2a:	f641 2371 	movw	r3, #6769	; 0x1a71
 8001c2e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001c32:	4798      	blx	r3

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 8001c34:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001c38:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001c3c:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 8001c3e:	f641 32e9 	movw	r2, #7145	; 0x1be9

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 8001c42:	f421 0370 	bic.w	r3, r1, #15728640	; 0xf00000
 8001c46:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8001c48:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 8001c4a:	f6c0 0200 	movt	r2, #2048	; 0x800
	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8001c4e:	f441 1340 	orr.w	r3, r1, #3145728	; 0x300000
 8001c52:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 8001c54:	6801      	ldr	r1, [r0, #0]
 8001c56:	6001      	str	r1, [r0, #0]
	

	Hw_Si47xx_Reset();
 8001c58:	4790      	blx	r2
 8001c5a:	bd08      	pop	{r3, pc}

08001c5c <Hw_SPI_Ch2_Init>:

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8001c5c:	f640 4304 	movw	r3, #3076	; 0xc04
 8001c60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c64:	6819      	ldr	r1, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001c66:	f44f 5260 	mov.w	r2, #14336	; 0x3800

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8001c6a:	f421 2070 	bic.w	r0, r1, #983040	; 0xf0000
 8001c6e:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 8001c70:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8001c72:	f643 0104 	movw	r1, #14340	; 0x3804
	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 8001c76:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8001c7a:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 8001c7c:	6818      	ldr	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001c7e:	f2c4 0200 	movt	r2, #16384	; 0x4000
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 8001c82:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8001c86:	6018      	str	r0, [r3, #0]
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8001c88:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8001c8a:	f2c4 0100 	movt	r1, #16384	; 0x4000
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8001c8e:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 8001c92:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (20));	// MODE   - Output mode, max speed 50Mhz
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 8001c9a:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (22));	// CNF    - Alternate function output Push-pull
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001ca2:	6018      	str	r0, [r3, #0]

	// PB15 - SPI2_MOSI
	REG_GPIOB_CRH &= ~(0x0F << (28));	// Clear
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8001caa:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (28));	// MODE   - Output mode, max speed 50Mhz
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
 8001cb2:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (30));	// CNF    - Alternate function output Push-pull
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001cba:	6018      	str	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001cbc:	f244 031c 	movw	r3, #16412	; 0x401c
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8001cc0:	2004      	movs	r0, #4



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001cc2:	6013      	str	r3, [r2, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8001cc4:	6008      	str	r0, [r1, #0]
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR1, 6 );
 8001cc6:	6811      	ldr	r1, [r2, #0]
 8001cc8:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4770      	bx	lr

08001cd0 <Hw_SPI_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Init(void)
{
 8001cd0:	b510      	push	{r4, lr}
	static u8 Called = 0;


	if( Called == 1 ) return;
 8001cd2:	4c08      	ldr	r4, [pc, #32]	; (8001cf4 <Hw_SPI_Init+0x24>)
 8001cd4:	7823      	ldrb	r3, [r4, #0]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d00b      	beq.n	8001cf2 <Hw_SPI_Init+0x22>


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 8001cda:	f241 001c 	movw	r0, #4124	; 0x101c
 8001cde:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ce2:	6802      	ldr	r2, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <Hw_SPI_Init+0x28>)
	if( Called == 1 ) return;


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 8001ce6:	f442 4180 	orr.w	r1, r2, #16384	; 0x4000
 8001cea:	6001      	str	r1, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 8001cec:	4798      	blx	r3

	Called = 1;	
 8001cee:	2001      	movs	r0, #1
 8001cf0:	7020      	strb	r0, [r4, #0]
 8001cf2:	bd10      	pop	{r4, pc}
 8001cf4:	2000048a 	.word	0x2000048a
 8001cf8:	08001c5d 	.word	0x08001c5d

08001cfc <Hw_SPI_StartDMA>:
              
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_StartDMA( u8 Ch )
{
	switch( Ch )
 8001cfc:	2801      	cmp	r0, #1
 8001cfe:	d10b      	bne.n	8001d18 <Hw_SPI_StartDMA+0x1c>
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR2, 1 );	// TX DMA Enable
 8001d00:	f643 0304 	movw	r3, #14340	; 0x3804
 8001d04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	f042 0002 	orr.w	r0, r2, #2
 8001d0e:	6018      	str	r0, [r3, #0]
			SET_BIT( REG_SPI2_CR2, 0 );	// RX DMA Enable
 8001d10:	6819      	ldr	r1, [r3, #0]
 8001d12:	f041 0201 	orr.w	r2, r1, #1
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop

08001d1c <Hw_SPI_Write8Bit>:
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8001d1c:	2801      	cmp	r0, #1
 8001d1e:	d001      	beq.n	8001d24 <Hw_SPI_Write8Bit+0x8>
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8001d20:	2000      	movs	r0, #0
}
 8001d22:	4770      	bx	lr
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8001d24:	f643 0208 	movw	r2, #14344	; 0x3808
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8001d28:	f242 730f 	movw	r3, #9999	; 0x270f
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8001d2c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001d30:	e006      	b.n	8001d40 <Hw_SPI_Write8Bit+0x24>
 8001d32:	6810      	ldr	r0, [r2, #0]
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 8001d34:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8001d36:	0780      	lsls	r0, r0, #30
 8001d38:	d405      	bmi.n	8001d46 <Hw_SPI_Write8Bit+0x2a>
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 8001d3a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8001d3e:	d305      	bcc.n	8001d4c <Hw_SPI_Write8Bit+0x30>
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8001d40:	6810      	ldr	r0, [r2, #0]
 8001d42:	0780      	lsls	r0, r0, #30
 8001d44:	d5f5      	bpl.n	8001d32 <Hw_SPI_Write8Bit+0x16>
			}
			if( TimeOut == 0 ) return 1;
 8001d46:	b90b      	cbnz	r3, 8001d4c <Hw_SPI_Write8Bit+0x30>
 8001d48:	2001      	movs	r0, #1
 8001d4a:	4770      	bx	lr
			REG_SPI2_DR = WriteData;
 8001d4c:	f643 000c 	movw	r0, #14348	; 0x380c
 8001d50:	f2c4 0000 	movt	r0, #16384	; 0x4000

			
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8001d54:	f643 0208 	movw	r2, #14344	; 0x3808
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
			}
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;
 8001d58:	6001      	str	r1, [r0, #0]

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8001d5a:	f242 730f 	movw	r3, #9999	; 0x270f
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8001d5e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001d62:	e006      	b.n	8001d72 <Hw_SPI_Write8Bit+0x56>
 8001d64:	6810      	ldr	r0, [r2, #0]
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8001d66:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8001d68:	07c1      	lsls	r1, r0, #31
 8001d6a:	d405      	bmi.n	8001d78 <Hw_SPI_Write8Bit+0x5c>
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8001d6c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8001d70:	d304      	bcc.n	8001d7c <Hw_SPI_Write8Bit+0x60>
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8001d72:	6811      	ldr	r1, [r2, #0]
 8001d74:	07c8      	lsls	r0, r1, #31
 8001d76:	d5f5      	bpl.n	8001d64 <Hw_SPI_Write8Bit+0x48>
			}
			if( TimeOut == 0 ) return 1;
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0e5      	beq.n	8001d48 <Hw_SPI_Write8Bit+0x2c>
		
			ReadData = REG_SPI2_DR;
 8001d7c:	f643 020c 	movw	r2, #14348	; 0x380c
 8001d80:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001d84:	6813      	ldr	r3, [r2, #0]
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8001d86:	2000      	movs	r0, #0
			}
			if( TimeOut == 0 ) return 1;
		
			ReadData = REG_SPI2_DR;
			
			break;
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop

08001d8c <Hw_N5100G_FrameTick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5100G_FrameTick( void )
{
 8001d8c:	b508      	push	{r3, lr}
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <Hw_N5100G_FrameTick+0x38>)
 8001d90:	4798      	blx	r3
 8001d92:	2801      	cmp	r0, #1
 8001d94:	d00d      	beq.n	8001db2 <Hw_N5100G_FrameTick+0x26>
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <Hw_N5100G_FrameTick+0x3c>)
 8001d98:	6803      	ldr	r3, [r0, #0]
		{
			Hw_N5110G_Frame_DrawReq--;
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 8001d9a:	b903      	cbnz	r3, 8001d9e <Hw_N5100G_FrameTick+0x12>
 8001d9c:	bd08      	pop	{r3, pc}
	{
		Hw_DMA_SPI2_Setup( (u32)Hw_N5110G_TxFrameBuf, (u32)Hw_N5110G_RxFrameBuf, HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT );				
 8001d9e:	480b      	ldr	r0, [pc, #44]	; (8001dcc <Hw_N5100G_FrameTick+0x40>)
 8001da0:	490b      	ldr	r1, [pc, #44]	; (8001dd0 <Hw_N5100G_FrameTick+0x44>)
 8001da2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <Hw_N5100G_FrameTick+0x48>)
 8001da8:	4798      	blx	r3
		Hw_SPI_StartDMA( HW_SPI_CH2 );			
 8001daa:	2001      	movs	r0, #1
 8001dac:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <Hw_N5100G_FrameTick+0x4c>)
 8001dae:	4790      	blx	r2
 8001db0:	bd08      	pop	{r3, pc}
{
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
	{
		if( Hw_N5110G_Frame_DrawReq > 0 )
 8001db2:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <Hw_N5100G_FrameTick+0x3c>)
 8001db4:	6811      	ldr	r1, [r2, #0]
 8001db6:	2900      	cmp	r1, #0
 8001db8:	d0f0      	beq.n	8001d9c <Hw_N5100G_FrameTick+0x10>
		{
			Hw_N5110G_Frame_DrawReq--;
 8001dba:	1e4b      	subs	r3, r1, #1
 8001dbc:	6013      	str	r3, [r2, #0]
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0ec      	beq.n	8001d9c <Hw_N5100G_FrameTick+0x10>
 8001dc2:	e7ec      	b.n	8001d9e <Hw_N5100G_FrameTick+0x12>
 8001dc4:	080025d9 	.word	0x080025d9
 8001dc8:	20000b8c 	.word	0x20000b8c
 8001dcc:	20000990 	.word	0x20000990
 8001dd0:	20000b90 	.word	0x20000b90
 8001dd4:	08002561 	.word	0x08002561
 8001dd8:	08001cfd 	.word	0x08001cfd

08001ddc <Hw_N5110G_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
 8001ddc:	b510      	push	{r4, lr}
	HW_N5110G_RESET_ON();
 8001dde:	f640 440c 	movw	r4, #3084	; 0xc0c
 8001de2:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001de6:	6822      	ldr	r2, [r4, #0]
	Hw_Timer_Delay_ms(10);
 8001de8:	f641 2331 	movw	r3, #6705	; 0x1a31
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
	HW_N5110G_RESET_ON();
 8001dec:	f422 6080 	bic.w	r0, r2, #1024	; 0x400
 8001df0:	6020      	str	r0, [r4, #0]
	Hw_Timer_Delay_ms(10);
 8001df2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001df6:	200a      	movs	r0, #10
 8001df8:	4798      	blx	r3
	HW_N5110G_RESET_OFF();
 8001dfa:	6821      	ldr	r1, [r4, #0]
 8001dfc:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 8001e00:	6022      	str	r2, [r4, #0]
 8001e02:	bd10      	pop	{r4, pc}

08001e04 <Hw_N5110G_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 8001e04:	b510      	push	{r4, lr}
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8001e06:	f640 440c 	movw	r4, #3084	; 0xc0c
 8001e0a:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001e0e:	6823      	ldr	r3, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 8001e10:	4601      	mov	r1, r0
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8001e12:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 8001e16:	f641 531d 	movw	r3, #7453	; 0x1d1d
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8001e1a:	6022      	str	r2, [r4, #0]
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001e22:	4798      	blx	r3
	HW_N5110G_SEL_DATA();
 8001e24:	6821      	ldr	r1, [r4, #0]
 8001e26:	f441 6200 	orr.w	r2, r1, #2048	; 0x800
 8001e2a:	6022      	str	r2, [r4, #0]
	
	return Ret;
}
 8001e2c:	bd10      	pop	{r4, pc}
 8001e2e:	bf00      	nop

08001e30 <Hw_N5110G_Goto>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 8001e30:	b570      	push	{r4, r5, r6, lr}
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 8001e32:	f641 6405 	movw	r4, #7685	; 0x1e05
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 8001e36:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 8001e38:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001e3c:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 8001e40:	47a0      	blx	r4
 8001e42:	4606      	mov	r6, r0
	Ret |= Hw_N5110G_WriteCmd( 0x80|x );
 8001e44:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 8001e48:	47a0      	blx	r4
 8001e4a:	4330      	orrs	r0, r6

	return Ret;
}
 8001e4c:	b280      	uxth	r0, r0
 8001e4e:	bd70      	pop	{r4, r5, r6, pc}

08001e50 <Hw_N5110G_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8001e50:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 8001e52:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <Hw_N5110G_Init+0xbc>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8001e54:	b083      	sub	sp, #12
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 8001e56:	4798      	blx	r3
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8001e58:	f640 4004 	movw	r0, #3076	; 0xc04
 8001e5c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001e60:	6802      	ldr	r2, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 8001e62:	f640 440c 	movw	r4, #3084	; 0xc0c
	
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8001e66:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 8001e6a:	6001      	str	r1, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 8001e6c:	6805      	ldr	r5, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 8001e6e:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 8001e72:	f445 7640 	orr.w	r6, r5, #768	; 0x300
 8001e76:	6006      	str	r6, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8001e78:	6807      	ldr	r7, [r0, #0]
	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
	
	Hw_N5110G_Reset();
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8001e7a:	4d25      	ldr	r5, [pc, #148]	; (8001f10 <Hw_N5110G_Init+0xc0>)
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8001e7c:	6007      	str	r7, [r0, #0]

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8001e7e:	6803      	ldr	r3, [r0, #0]
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8001e80:	2600      	movs	r6, #0
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8001e82:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8001e86:	6002      	str	r2, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
 8001e88:	6801      	ldr	r1, [r0, #0]
 8001e8a:	f441 5740 	orr.w	r7, r1, #12288	; 0x3000
 8001e8e:	6007      	str	r7, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 8001e90:	6803      	ldr	r3, [r0, #0]
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
 8001e92:	4f20      	ldr	r7, [pc, #128]	; (8001f14 <Hw_N5110G_Init+0xc4>)

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 8001e94:	6003      	str	r3, [r0, #0]


	HW_N5110G_RESET_OFF();
 8001e96:	6820      	ldr	r0, [r4, #0]
 8001e98:	f440 6280 	orr.w	r2, r0, #1024	; 0x400
 8001e9c:	6022      	str	r2, [r4, #0]
	HW_N5110G_SEL_CMD();
 8001e9e:	6821      	ldr	r1, [r4, #0]
	
	Hw_N5110G_Reset();
 8001ea0:	481d      	ldr	r0, [pc, #116]	; (8001f18 <Hw_N5110G_Init+0xc8>)
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
 8001ea2:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 8001ea6:	6023      	str	r3, [r4, #0]
	
	Hw_N5110G_Reset();
 8001ea8:	4780      	blx	r0
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8001eaa:	2021      	movs	r0, #33	; 0x21
 8001eac:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0xC6);	// Write Vop
 8001eae:	20c6      	movs	r0, #198	; 0xc6
 8001eb0:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x06);	// Set Temperature Coefficient
 8001eb2:	2006      	movs	r0, #6
 8001eb4:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x13);	// Set Bias System
 8001eb6:	2013      	movs	r0, #19
 8001eb8:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x20);	// H = 0
 8001eba:	2020      	movs	r0, #32
 8001ebc:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
 8001ebe:	200c      	movs	r0, #12
 8001ec0:	47a8      	blx	r5
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
 8001ec2:	4631      	mov	r1, r6
 8001ec4:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <Hw_N5110G_Init+0xcc>)
 8001ec6:	4630      	mov	r0, r6
 8001ec8:	4790      	blx	r2
	
	
	HW_N5110G_SEL_DATA();
 8001eca:	6821      	ldr	r1, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8001ecc:	2003      	movs	r0, #3
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
 8001ece:	f441 6300 	orr.w	r3, r1, #2048	; 0x800
 8001ed2:	6023      	str	r3, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
 8001ed4:	4c12      	ldr	r4, [pc, #72]	; (8001f20 <Hw_N5110G_Init+0xd0>)
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8001ed6:	2121      	movs	r1, #33	; 0x21
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <Hw_N5110G_Init+0xd4>)
 8001eda:	9600      	str	r6, [sp, #0]
 8001edc:	2202      	movs	r2, #2
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8001ede:	8026      	strh	r6, [r4, #0]
	Hw_N5110G_Frame_DrawReq	= 0;						
 8001ee0:	603e      	str	r6, [r7, #0]
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8001ee2:	4c11      	ldr	r4, [pc, #68]	; (8001f28 <Hw_N5110G_Init+0xd8>)
 8001ee4:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <Hw_N5110G_Init+0xdc>)
 8001eea:	4790      	blx	r2
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <Hw_N5110G_Init+0xe0>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001eee:	4631      	mov	r1, r6
     TITLE   : Hw_5110G_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
 8001ef0:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8001ef4:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001ef6:	7059      	strb	r1, [r3, #1]
 8001ef8:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8001efa:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001efc:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8001efe:	d1f9      	bne.n	8001ef4 <Hw_N5110G_Init+0xa4>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001f00:	6839      	ldr	r1, [r7, #0]
 8001f02:	1c88      	adds	r0, r1, #2
 8001f04:	6038      	str	r0, [r7, #0]
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
	
	
	Hw_N5110G_Clear();	
	Hw_N5110G_DrawRequest();
}
 8001f06:	b003      	add	sp, #12
 8001f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	08001cd1 	.word	0x08001cd1
 8001f10:	08001e05 	.word	0x08001e05
 8001f14:	20000b8c 	.word	0x20000b8c
 8001f18:	08001ddd 	.word	0x08001ddd
 8001f1c:	08001e31 	.word	0x08001e31
 8001f20:	20000b88 	.word	0x20000b88
 8001f24:	08001d8d 	.word	0x08001d8d
 8001f28:	080019e9 	.word	0x080019e9
 8001f2c:	08001a09 	.word	0x08001a09
 8001f30:	2000098f 	.word	0x2000098f

08001f34 <Hw_N5110G_Clear>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
{
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <Hw_N5110G_Clear+0x20>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001f36:	2100      	movs	r1, #0
     TITLE   : Hw_N5110G_Clear
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
 8001f38:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8001f3c:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001f3e:	7059      	strb	r1, [r3, #1]
 8001f40:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8001f42:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001f44:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8001f46:	d1f9      	bne.n	8001f3c <Hw_N5110G_Clear+0x8>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001f48:	4903      	ldr	r1, [pc, #12]	; (8001f58 <Hw_N5110G_Clear+0x24>)
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 8001f4a:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001f4c:	680a      	ldr	r2, [r1, #0]
 8001f4e:	1c53      	adds	r3, r2, #1
 8001f50:	600b      	str	r3, [r1, #0]
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 8001f52:	4770      	bx	lr
 8001f54:	2000098f 	.word	0x2000098f
 8001f58:	20000b8c 	.word	0x20000b8c

08001f5c <Hw_N5110G_WriteStr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 8001f5c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8001f60:	7807      	ldrb	r7, [r0, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 8001f62:	b086      	sub	sp, #24
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8001f64:	2f00      	cmp	r7, #0
 8001f66:	f000 8085 	beq.w	8002074 <Hw_N5110G_WriteStr+0x118>
 8001f6a:	f640 3188 	movw	r1, #2952	; 0xb88
 8001f6e:	f2c2 0100 	movt	r1, #8192	; 0x2000
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001f72:	f640 0c21 	movw	ip, #2081	; 0x821
 8001f76:	f8b1 9000 	ldrh.w	r9, [r1]
 8001f7a:	f8df a104 	ldr.w	sl, [pc, #260]	; 8002080 <Hw_N5110G_WriteStr+0x124>
 8001f7e:	f2c2 0c82 	movt	ip, #8322	; 0x2082
 8001f82:	9001      	str	r0, [sp, #4]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001f84:	f109 0301 	add.w	r3, r9, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001f88:	b298      	uxth	r0, r3
 8001f8a:	08c2      	lsrs	r2, r0, #3
 8001f8c:	fbac 2402 	umull	r2, r4, ip, r2
 8001f90:	08e5      	lsrs	r5, r4, #3
 8001f92:	ebc5 1685 	rsb	r6, r5, r5, lsl #6
 8001f96:	eba0 01c6 	sub.w	r1, r0, r6, lsl #3
 8001f9a:	b289      	uxth	r1, r1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001f9c:	1c4b      	adds	r3, r1, #1
 8001f9e:	b298      	uxth	r0, r3
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001fa0:	08c2      	lsrs	r2, r0, #3
 8001fa2:	fbac 4502 	umull	r4, r5, ip, r2
 8001fa6:	08ec      	lsrs	r4, r5, #3
 8001fa8:	ebc4 1684 	rsb	r6, r4, r4, lsl #6
 8001fac:	eba0 03c6 	sub.w	r3, r0, r6, lsl #3
 8001fb0:	b29a      	uxth	r2, r3
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001fb2:	1c50      	adds	r0, r2, #1
 8001fb4:	b284      	uxth	r4, r0
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001fb6:	08e5      	lsrs	r5, r4, #3
 8001fb8:	fbac 5605 	umull	r5, r6, ip, r5
 8001fbc:	08f3      	lsrs	r3, r6, #3
 8001fbe:	ebc3 1083 	rsb	r0, r3, r3, lsl #6
 8001fc2:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
 8001fc6:	fa1f f884 	uxth.w	r8, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001fca:	f108 0501 	add.w	r5, r8, #1
 8001fce:	b2ae      	uxth	r6, r5
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001fd0:	08f3      	lsrs	r3, r6, #3
 8001fd2:	fbac 4003 	umull	r4, r0, ip, r3
 8001fd6:	08c4      	lsrs	r4, r0, #3
 8001fd8:	ebc4 1584 	rsb	r5, r4, r4, lsl #6
 8001fdc:	eba6 06c5 	sub.w	r6, r6, r5, lsl #3
 8001fe0:	b2b6      	uxth	r6, r6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001fe2:	1c73      	adds	r3, r6, #1
 8001fe4:	b29c      	uxth	r4, r3
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001fe6:	08e0      	lsrs	r0, r4, #3
 8001fe8:	fbac 5300 	umull	r5, r3, ip, r0
 8001fec:	08dd      	lsrs	r5, r3, #3
 8001fee:	ebc5 1085 	rsb	r0, r5, r5, lsl #6
 8001ff2:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
 8001ff6:	b2a5      	uxth	r5, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001ff8:	1c6b      	adds	r3, r5, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001ffa:	b298      	uxth	r0, r3
 8001ffc:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
 8002000:	fbac 340b 	umull	r3, r4, ip, fp
 8002004:	3f20      	subs	r7, #32
 8002006:	ea4f 0bd4 	mov.w	fp, r4, lsr #3
	u16 i;
	u8  Ch;
	
	for( i=0; i<6; i++ )
	{
		Ch = Hw_N5110G_Font6_8[CharData-32][i];
 800200a:	f240 0404 	movw	r4, #4
 800200e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002012:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8002016:	eb04 0347 	add.w	r3, r4, r7, lsl #1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 800201a:	f814 7017 	ldrb.w	r7, [r4, r7, lsl #1]
 800201e:	789c      	ldrb	r4, [r3, #2]
 8002020:	9702      	str	r7, [sp, #8]
 8002022:	9403      	str	r4, [sp, #12]
 8002024:	78dc      	ldrb	r4, [r3, #3]
 8002026:	785f      	ldrb	r7, [r3, #1]
 8002028:	9404      	str	r4, [sp, #16]
 800202a:	791c      	ldrb	r4, [r3, #4]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 800202c:	ebcb 1b8b 	rsb	fp, fp, fp, lsl #6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002030:	9405      	str	r4, [sp, #20]
 8002032:	9c02      	ldr	r4, [sp, #8]
 8002034:	795b      	ldrb	r3, [r3, #5]
 8002036:	f80a 4009 	strb.w	r4, [sl, r9]
 800203a:	f80a 7001 	strb.w	r7, [sl, r1]
 800203e:	9f03      	ldr	r7, [sp, #12]
 8002040:	9c05      	ldr	r4, [sp, #20]
 8002042:	f80a 7002 	strb.w	r7, [sl, r2]
 8002046:	9a04      	ldr	r2, [sp, #16]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002048:	eba0 00cb 	sub.w	r0, r0, fp, lsl #3
 800204c:	f640 3188 	movw	r1, #2952	; 0xb88
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002050:	f80a 2008 	strb.w	r2, [sl, r8]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002054:	fa1f f980 	uxth.w	r9, r0
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002058:	f80a 4006 	strb.w	r4, [sl, r6]
 800205c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002060:	f80a 3005 	strb.w	r3, [sl, r5]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8002064:	9d01      	ldr	r5, [sp, #4]
 8002066:	f8a1 9000 	strh.w	r9, [r1]
 800206a:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 800206e:	9501      	str	r5, [sp, #4]
 8002070:	2f00      	cmp	r7, #0
 8002072:	d187      	bne.n	8001f84 <Hw_N5110G_WriteStr+0x28>
		Ret |= Hw_N5110G_WriteChar( *pStr );
		pStr++;
	}
		
	return Ret;
}
 8002074:	2000      	movs	r0, #0
 8002076:	b006      	add	sp, #24
 8002078:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000990 	.word	0x20000990

08002084 <Hw_N5110G_DrawRequest>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002084:	f640 338c 	movw	r3, #2956	; 0xb8c
 8002088:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	1c50      	adds	r0, r2, #1
 8002090:	6018      	str	r0, [r3, #0]
 8002092:	4770      	bx	lr

08002094 <Hw_N5110G_DrawClearRect>:
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawClearRect( u16 s_x, u16 s_y, u16 e_x, u16 e_y )
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
 8002094:	4290      	cmp	r0, r2
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawClearRect( u16 s_x, u16 s_y, u16 e_x, u16 e_y )
{
 8002096:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
 800209a:	d84f      	bhi.n	800213c <Hw_N5110G_DrawClearRect+0xa8>
 800209c:	4d29      	ldr	r5, [pc, #164]	; (8002144 <Hw_N5110G_DrawClearRect+0xb0>)
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800209e:	f04f 0854 	mov.w	r8, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80020a2:	f04f 0c01 	mov.w	ip, #1
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 80020a6:	4299      	cmp	r1, r3
 80020a8:	d844      	bhi.n	8002134 <Hw_N5110G_DrawClearRect+0xa0>
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80020aa:	f001 0907 	and.w	r9, r1, #7
 80020ae:	fa0c f909 	lsl.w	r9, ip, r9
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80020b2:	08ce      	lsrs	r6, r1, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80020b4:	fb08 0606 	mla	r6, r8, r6, r0
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 80020b8:	1c4c      	adds	r4, r1, #1
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80020ba:	f815 a006 	ldrb.w	sl, [r5, r6]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 80020be:	b2a4      	uxth	r4, r4
 80020c0:	1a5f      	subs	r7, r3, r1
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80020c2:	ea2a 0909 	bic.w	r9, sl, r9
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 80020c6:	42a3      	cmp	r3, r4
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80020c8:	f805 9006 	strb.w	r9, [r5, r6]
 80020cc:	f007 0701 	and.w	r7, r7, #1
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 80020d0:	d330      	bcc.n	8002134 <Hw_N5110G_DrawClearRect+0xa0>
 80020d2:	b17f      	cbz	r7, 80020f4 <Hw_N5110G_DrawClearRect+0x60>
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80020d4:	f004 0607 	and.w	r6, r4, #7
 80020d8:	fa0c f706 	lsl.w	r7, ip, r6
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80020dc:	08e6      	lsrs	r6, r4, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80020de:	fb08 0606 	mla	r6, r8, r6, r0
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 80020e2:	3401      	adds	r4, #1
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80020e4:	f815 9006 	ldrb.w	r9, [r5, r6]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 80020e8:	b2a4      	uxth	r4, r4
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80020ea:	ea29 0707 	bic.w	r7, r9, r7
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 80020ee:	42a3      	cmp	r3, r4
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80020f0:	55af      	strb	r7, [r5, r6]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 80020f2:	d31f      	bcc.n	8002134 <Hw_N5110G_DrawClearRect+0xa0>
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80020f4:	f004 0a07 	and.w	sl, r4, #7
 80020f8:	fa0c fa0a 	lsl.w	sl, ip, sl
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 80020fc:	1c67      	adds	r7, r4, #1
 80020fe:	b2be      	uxth	r6, r7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002100:	f006 0b07 	and.w	fp, r6, #7
 8002104:	fa0c f90b 	lsl.w	r9, ip, fp
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002108:	08e4      	lsrs	r4, r4, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800210a:	fb08 0404 	mla	r4, r8, r4, r0
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800210e:	08f7      	lsrs	r7, r6, #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002110:	f815 b004 	ldrb.w	fp, [r5, r4]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002114:	fb08 0707 	mla	r7, r8, r7, r0
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002118:	ea2b 0a0a 	bic.w	sl, fp, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800211c:	f805 a004 	strb.w	sl, [r5, r4]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002120:	f815 a007 	ldrb.w	sl, [r5, r7]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002124:	1c74      	adds	r4, r6, #1
 8002126:	b2a4      	uxth	r4, r4
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002128:	ea2a 0909 	bic.w	r9, sl, r9
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 800212c:	42a3      	cmp	r3, r4
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800212e:	f805 9007 	strb.w	r9, [r5, r7]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002132:	d2df      	bcs.n	80020f4 <Hw_N5110G_DrawClearRect+0x60>
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawClearRect( u16 s_x, u16 s_y, u16 e_x, u16 e_y )
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
 8002134:	3001      	adds	r0, #1
 8002136:	b280      	uxth	r0, r0
 8002138:	4282      	cmp	r2, r0
 800213a:	d2b4      	bcs.n	80020a6 <Hw_N5110G_DrawClearRect+0x12>
		for( j=s_y; j<=e_y; j++ )
		{
			Hw_N5110G_ClrPixel( i, j );
		}
	}
}
 800213c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000990 	.word	0x20000990

08002148 <Hw_N5110G_DrawPrint>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_DrawPrint( u8 x_str, u8 y_str,  char *format, ... )
{
 8002148:	b40c      	push	{r2, r3}
 800214a:	b530      	push	{r4, r5, lr}
 800214c:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 800214e:	aa36      	add	r2, sp, #216	; 0xd8
 8002150:	f640 7321 	movw	r3, #3873	; 0xf21
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_DrawPrint( u8 x_str, u8 y_str,  char *format, ... )
{
 8002154:	460d      	mov	r5, r1
 8002156:	4604      	mov	r4, r0
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8002158:	f852 1b04 	ldr.w	r1, [r2], #4
 800215c:	4668      	mov	r0, sp
 800215e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002162:	4798      	blx	r3

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8002164:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8002168:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800216c:	004c      	lsls	r4, r1, #1
 800216e:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 8002172:	f640 3288 	movw	r2, #2952	; 0xb88

	Hw_N5110G_WriteStr( Str );		
 8002176:	f641 735d 	movw	r3, #8029	; 0x1f5d

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 800217a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800217e:	eb04 0585 	add.w	r5, r4, r5, lsl #2

	Hw_N5110G_WriteStr( Str );		
 8002182:	4668      	mov	r0, sp
 8002184:	f6c0 0300 	movt	r3, #2048	; 0x800

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8002188:	8015      	strh	r5, [r2, #0]

	Hw_N5110G_WriteStr( Str );		
 800218a:	4798      	blx	r3
		
	Lb_va_end(ap);		
	
	return Ret;
}
 800218c:	2000      	movs	r0, #0
 800218e:	b033      	add	sp, #204	; 0xcc
 8002190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002194:	b002      	add	sp, #8
 8002196:	4770      	bx	lr

08002198 <Hw_N5110G_DrawCircle>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8002198:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800219c:	b088      	sub	sp, #32
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 800219e:	0054      	lsls	r4, r2, #1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 80021a0:	9005      	str	r0, [sp, #20]
 80021a2:	9106      	str	r1, [sp, #24]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 80021a4:	f1c4 0003 	rsb	r0, r4, #3
 80021a8:	9d05      	ldr	r5, [sp, #20]
 80021aa:	9c06      	ldr	r4, [sp, #24]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 80021ac:	9304      	str	r3, [sp, #16]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 80021ae:	b283      	uxth	r3, r0
 80021b0:	9303      	str	r3, [sp, #12]
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];
 80021b2:	49a0      	ldr	r1, [pc, #640]	; (8002434 <Hw_N5110G_DrawCircle+0x29c>)
{
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 80021b4:	4620      	mov	r0, r4
 80021b6:	9501      	str	r5, [sp, #4]
 80021b8:	9502      	str	r5, [sp, #8]
	CurX = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e0a5      	b.n	800230a <Hw_N5110G_DrawCircle+0x172>
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 80021be:	f8dd b018 	ldr.w	fp, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80021c2:	f04f 0901 	mov.w	r9, #1
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
 80021c6:	ebc2 060b 	rsb	r6, r2, fp
 80021ca:	b2b6      	uxth	r6, r6
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80021cc:	f006 0807 	and.w	r8, r6, #7
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 80021d0:	eb02 050b 	add.w	r5, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80021d4:	fa09 fb08 	lsl.w	fp, r9, r8
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 80021d8:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80021da:	f007 0a07 	and.w	sl, r7, #7
 80021de:	f000 0507 	and.w	r5, r0, #7
 80021e2:	fa09 fc0a 	lsl.w	ip, r9, sl
 80021e6:	f04f 0801 	mov.w	r8, #1
 80021ea:	fa09 fa05 	lsl.w	sl, r9, r5
 80021ee:	f004 0907 	and.w	r9, r4, #7
 80021f2:	f8cd b01c 	str.w	fp, [sp, #28]
 80021f6:	fa08 fb09 	lsl.w	fp, r8, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80021fa:	2554      	movs	r5, #84	; 0x54
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80021fc:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80021fe:	fb05 f707 	mul.w	r7, r5, r7
 8002202:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002206:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002208:	eb07 0809 	add.w	r8, r7, r9
 800220c:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002210:	f8cd b000 	str.w	fp, [sp]
 8002214:	f811 b008 	ldrb.w	fp, [r1, r8]
 8002218:	fa5f fc8c 	uxtb.w	ip, ip
 800221c:	ea4b 050c 	orr.w	r5, fp, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002220:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002224:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002228:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800222c:	f811 b008 	ldrb.w	fp, [r1, r8]
 8002230:	fa5f f589 	uxtb.w	r5, r9
 8002234:	ea4b 0b05 	orr.w	fp, fp, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002238:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800223c:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002240:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002244:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002246:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800224a:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800224e:	ea49 0c0c 	orr.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002252:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002256:	2754      	movs	r7, #84	; 0x54
 8002258:	4446      	add	r6, r8
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 800225a:	f8dd 9014 	ldr.w	r9, [sp, #20]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800225e:	fb07 f80b 	mul.w	r8, r7, fp
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002262:	f811 b006 	ldrb.w	fp, [r1, r6]
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 8002266:	eb02 0709 	add.w	r7, r2, r9
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800226a:	ea4b 0505 	orr.w	r5, fp, r5
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800226e:	b2bf      	uxth	r7, r7
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002270:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002274:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002278:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800227a:	eb08 0607 	add.w	r6, r8, r7
 800227e:	fb0b f50c 	mul.w	r5, fp, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002282:	f811 9006 	ldrb.w	r9, [r1, r6]
 8002286:	fa5f fa8a 	uxtb.w	sl, sl
 800228a:	f8dd b000 	ldr.w	fp, [sp]
 800228e:	ea49 0c0a 	orr.w	ip, r9, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002292:	f801 c006 	strb.w	ip, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002296:	19ef      	adds	r7, r5, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002298:	fa5f f98b 	uxtb.w	r9, fp
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 800229c:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80022a0:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 80022a2:	ebc2 0c0b 	rsb	ip, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80022a6:	ea46 0609 	orr.w	r6, r6, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80022aa:	fa1f fc8c 	uxth.w	ip, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80022ae:	55ce      	strb	r6, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80022b0:	44e0      	add	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80022b2:	f811 7008 	ldrb.w	r7, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80022b6:	4465      	add	r5, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80022b8:	ea47 0a0a 	orr.w	sl, r7, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80022bc:	f801 a008 	strb.w	sl, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80022c0:	5d4e      	ldrb	r6, [r1, r5]
 80022c2:	ea46 0909 	orr.w	r9, r6, r9
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80022c6:	f801 9005 	strb.w	r9, [r1, r5]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 80022ca:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80022ce:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 80022d2:	f040 80a8 	bne.w	8002426 <Hw_N5110G_DrawCircle+0x28e>
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 80022d6:	9f03      	ldr	r7, [sp, #12]
 80022d8:	1a9d      	subs	r5, r3, r2
 80022da:	370a      	adds	r7, #10
 80022dc:	eb07 0685 	add.w	r6, r7, r5, lsl #2
			CurY--;
 80022e0:	3a01      	subs	r2, #1
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 80022e2:	b2b7      	uxth	r7, r6
 80022e4:	9703      	str	r7, [sp, #12]
			CurY--;
 80022e6:	b292      	uxth	r2, r2
 80022e8:	9d02      	ldr	r5, [sp, #8]
 80022ea:	9f01      	ldr	r7, [sp, #4]
		}
		CurX++;
 80022ec:	3301      	adds	r3, #1
 80022ee:	1c6e      	adds	r6, r5, #1
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	1e7d      	subs	r5, r7, #1
 80022f4:	3001      	adds	r0, #1
 80022f6:	3c01      	subs	r4, #1
 80022f8:	b2b6      	uxth	r6, r6
 80022fa:	b2ad      	uxth	r5, r5
  
	D    = 3 - (Radius << 1);
	CurX = 0;
	CurY = Radius;
	
	while (CurX <= CurY)
 80022fc:	429a      	cmp	r2, r3
 80022fe:	9602      	str	r6, [sp, #8]
 8002300:	9501      	str	r5, [sp, #4]
 8002302:	b280      	uxth	r0, r0
 8002304:	b2a4      	uxth	r4, r4
 8002306:	f0c0 8115 	bcc.w	8002534 <Hw_N5110G_DrawCircle+0x39c>
	{
		if( Mode == 0 )
 800230a:	9e04      	ldr	r6, [sp, #16]
 800230c:	2e00      	cmp	r6, #0
 800230e:	f43f af56 	beq.w	80021be <Hw_N5110G_DrawCircle+0x26>
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
 8002312:	9d04      	ldr	r5, [sp, #16]
 8002314:	2d01      	cmp	r5, #1
 8002316:	f000 808f 	beq.w	8002438 <Hw_N5110G_DrawCircle+0x2a0>
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
 800231a:	9f04      	ldr	r7, [sp, #16]
 800231c:	2f02      	cmp	r7, #2
 800231e:	d1d4      	bne.n	80022ca <Hw_N5110G_DrawCircle+0x132>
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8002320:	9e06      	ldr	r6, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002322:	f04f 0901 	mov.w	r9, #1
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8002326:	1995      	adds	r5, r2, r6
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
 8002328:	1ab6      	subs	r6, r6, r2
 800232a:	b2b6      	uxth	r6, r6
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 800232c:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800232e:	f006 0507 	and.w	r5, r6, #7
 8002332:	fa09 fa05 	lsl.w	sl, r9, r5
 8002336:	f007 0c07 	and.w	ip, r7, #7
 800233a:	f04f 0801 	mov.w	r8, #1
 800233e:	fa08 fb0c 	lsl.w	fp, r8, ip
 8002342:	f004 0c07 	and.w	ip, r4, #7
 8002346:	fa09 f80c 	lsl.w	r8, r9, ip
 800234a:	f000 0507 	and.w	r5, r0, #7
 800234e:	f8cd a01c 	str.w	sl, [sp, #28]
 8002352:	fa09 fa05 	lsl.w	sl, r9, r5
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002356:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002358:	2554      	movs	r5, #84	; 0x54
 800235a:	fb05 f707 	mul.w	r7, r5, r7
 800235e:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002362:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002364:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002368:	f8cd 8000 	str.w	r8, [sp]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800236c:	eb07 0809 	add.w	r8, r7, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002370:	f811 5008 	ldrb.w	r5, [r1, r8]
 8002374:	fa5f fc8b 	uxtb.w	ip, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002378:	f8dd 9008 	ldr.w	r9, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800237c:	ea85 0b0c 	eor.w	fp, r5, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002380:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002384:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002388:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800238c:	f811 9008 	ldrb.w	r9, [r1, r8]
 8002390:	fa5f f58b 	uxtb.w	r5, fp
 8002394:	ea89 0905 	eor.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002398:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800239c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80023a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80023a4:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80023a6:	f811 b007 	ldrb.w	fp, [r1, r7]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80023aa:	ea4f 08d0 	mov.w	r8, r0, lsr #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80023ae:	ea8b 0c0c 	eor.w	ip, fp, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80023b2:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80023b6:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80023ba:	444e      	add	r6, r9
 80023bc:	fb0b f808 	mul.w	r8, fp, r8
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 80023c0:	f8dd c014 	ldr.w	ip, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80023c4:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 80023c6:	eb02 090c 	add.w	r9, r2, ip
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80023ca:	407d      	eors	r5, r7
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80023cc:	fa1f f989 	uxth.w	r9, r9
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80023d0:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80023d4:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80023d6:	fb0b fc07 	mul.w	ip, fp, r7
 80023da:	eb08 0509 	add.w	r5, r8, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80023de:	5d4f      	ldrb	r7, [r1, r5]
 80023e0:	fa5f f68a 	uxtb.w	r6, sl
 80023e4:	4077      	eors	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80023e6:	554f      	strb	r7, [r1, r5]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80023e8:	44e1      	add	r9, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80023ea:	9d00      	ldr	r5, [sp, #0]
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 80023ec:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80023f0:	f811 a009 	ldrb.w	sl, [r1, r9]
 80023f4:	b2ed      	uxtb	r5, r5
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 80023f6:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80023fa:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80023fc:	ea8a 0a05 	eor.w	sl, sl, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002400:	f801 a009 	strb.w	sl, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002404:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002406:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800240a:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800240c:	ea89 0606 	eor.w	r6, r9, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002410:	f801 6008 	strb.w	r6, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002414:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002416:	f8dd c00c 	ldr.w	ip, [sp, #12]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800241a:	4075      	eors	r5, r6
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 800241c:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002420:	55cd      	strb	r5, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002422:	f43f af58 	beq.w	80022d6 <Hw_N5110G_DrawCircle+0x13e>
		{ 
			D += (CurX << 2) + 6;
 8002426:	eb0c 0583 	add.w	r5, ip, r3, lsl #2
 800242a:	1dae      	adds	r6, r5, #6
 800242c:	b2b7      	uxth	r7, r6
 800242e:	9703      	str	r7, [sp, #12]
 8002430:	e75a      	b.n	80022e8 <Hw_N5110G_DrawCircle+0x150>
 8002432:	bf00      	nop
 8002434:	20000990 	.word	0x20000990
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 8002438:	9e06      	ldr	r6, [sp, #24]
 800243a:	1997      	adds	r7, r2, r6
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 800243c:	ebc2 0806 	rsb	r8, r2, r6
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 8002440:	b2bf      	uxth	r7, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 8002442:	fa1f f988 	uxth.w	r9, r8
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002446:	f007 0b07 	and.w	fp, r7, #7
 800244a:	9e04      	ldr	r6, [sp, #16]
 800244c:	fa05 fc0b 	lsl.w	ip, r5, fp
 8002450:	f009 0507 	and.w	r5, r9, #7
 8002454:	fa06 fa05 	lsl.w	sl, r6, r5
 8002458:	9d04      	ldr	r5, [sp, #16]
 800245a:	f000 0607 	and.w	r6, r0, #7
 800245e:	fa05 fb06 	lsl.w	fp, r5, r6
 8002462:	f004 0607 	and.w	r6, r4, #7
 8002466:	40b5      	lsls	r5, r6
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002468:	08ff      	lsrs	r7, r7, #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800246a:	9507      	str	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800246c:	2554      	movs	r5, #84	; 0x54
 800246e:	fb05 f707 	mul.w	r7, r5, r7
 8002472:	f8dd 8008 	ldr.w	r8, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002476:	ea4f 06d9 	mov.w	r6, r9, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800247a:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800247c:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002480:	2554      	movs	r5, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002482:	ea6f 0c0c 	mvn.w	ip, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002486:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800248a:	fa5f fc8c 	uxtb.w	ip, ip
 800248e:	ea09 050c 	and.w	r5, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002492:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002496:	f8dd 8008 	ldr.w	r8, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800249a:	ea6f 050a 	mvn.w	r5, sl
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800249e:	44b0      	add	r8, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80024a0:	f811 9008 	ldrb.w	r9, [r1, r8]
 80024a4:	b2ed      	uxtb	r5, r5
 80024a6:	ea09 0a05 	and.w	sl, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80024aa:	f801 a008 	strb.w	sl, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80024ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80024b2:	ea4f 0ad0 	mov.w	sl, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80024b6:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80024b8:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80024bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80024c0:	ea09 0c0c 	and.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80024c4:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80024c8:	f04f 0754 	mov.w	r7, #84	; 0x54
 80024cc:	4446      	add	r6, r8
 80024ce:	fb07 fa0a 	mul.w	sl, r7, sl
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 80024d2:	f8dd 9014 	ldr.w	r9, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80024d6:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 80024d8:	eb02 0c09 	add.w	ip, r2, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80024dc:	fa1f f88c 	uxth.w	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80024e0:	403d      	ands	r5, r7
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80024e2:	558d      	strb	r5, [r1, r6]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80024e4:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80024e8:	eb0a 0508 	add.w	r5, sl, r8
 80024ec:	2654      	movs	r6, #84	; 0x54
 80024ee:	fb06 fc07 	mul.w	ip, r6, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80024f2:	5d4f      	ldrb	r7, [r1, r5]
 80024f4:	ea6f 060b 	mvn.w	r6, fp
 80024f8:	b2f6      	uxtb	r6, r6
 80024fa:	4037      	ands	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80024fc:	554f      	strb	r7, [r1, r5]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80024fe:	9d07      	ldr	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002500:	44e0      	add	r8, ip
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 8002502:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002506:	f811 9008 	ldrb.w	r9, [r1, r8]
 800250a:	43ef      	mvns	r7, r5
 800250c:	b2fd      	uxtb	r5, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 800250e:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002512:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002514:	ea09 0905 	and.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002518:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800251c:	44ba      	add	sl, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800251e:	f811 800a 	ldrb.w	r8, [r1, sl]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002522:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002524:	ea08 0606 	and.w	r6, r8, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002528:	f801 600a 	strb.w	r6, [r1, sl]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800252c:	5dce      	ldrb	r6, [r1, r7]
 800252e:	4035      	ands	r5, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002530:	55cd      	strb	r5, [r1, r7]
 8002532:	e6ca      	b.n	80022ca <Hw_N5110G_DrawCircle+0x132>
			D += ((CurX - CurY) << 2) + 10;
			CurY--;
		}
		CurX++;
	}
}
 8002534:	b008      	add	sp, #32
 8002536:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800253a:	4770      	bx	lr

0800253c <Hw_DMA_Init>:
void Hw_DMA_Init(void)
{
	static u8 Called = 0;


	if( Called == 1 ) return;
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <Hw_DMA_Init+0x20>)
 800253e:	7813      	ldrb	r3, [r2, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d009      	beq.n	8002558 <Hw_DMA_Init+0x1c>


	// 1. Clock Enable
	//
	REG_RCC_AHBENR |= (1<<0);		// DMA1 Clock enable
 8002544:	f241 0014 	movw	r0, #4116	; 0x1014
 8002548:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800254c:	6801      	ldr	r1, [r0, #0]
 800254e:	f041 0301 	orr.w	r3, r1, #1
 8002552:	6003      	str	r3, [r0, #0]
	

	Called = 1;	
 8002554:	2001      	movs	r0, #1
 8002556:	7010      	strb	r0, [r2, #0]
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2000048b 	.word	0x2000048b

08002560 <Hw_DMA_SPI2_Setup>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
 8002560:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8002564:	2344      	movs	r3, #68	; 0x44
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8002566:	274c      	movs	r7, #76	; 0x4c
 8002568:	f643 040c 	movw	r4, #14348	; 0x380c
	REG_DMA1_CMAR(4)  = ReadAddress;
 800256c:	2650      	movs	r6, #80	; 0x50
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 800256e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002572:	f04f 0c00 	mov.w	ip, #0
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8002576:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800257a:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(4)  = ReadAddress;
 800257e:	f2c4 0602 	movt	r6, #16386	; 0x4002
	REG_DMA1_CNDTR(4) = BufSize;
 8002582:	2548      	movs	r5, #72	; 0x48
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8002584:	f8c3 c000 	str.w	ip, [r3]
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 8002588:	f2c4 0502 	movt	r5, #16386	; 0x4002
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 800258c:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(4)  = ReadAddress;
 800258e:	6031      	str	r1, [r6, #0]
	REG_DMA1_CNDTR(4) = BufSize;
	
	
	
	REG_DMA1_CCR(4) = 0
 8002590:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 8002594:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(4) = 0
 8002596:	6019      	str	r1, [r3, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8002598:	f8d3 8000 	ldr.w	r8, [r3]
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 800259c:	2158      	movs	r1, #88	; 0x58
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 800259e:	2760      	movs	r7, #96	; 0x60
	REG_DMA1_CMAR(5)  = WriteAddress;
 80025a0:	2664      	movs	r6, #100	; 0x64
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 80025a2:	f2c4 0102 	movt	r1, #16386	; 0x4002
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 80025a6:	255c      	movs	r5, #92	; 0x5c
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 80025a8:	f048 0801 	orr.w	r8, r8, #1
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 80025ac:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(5)  = WriteAddress;
 80025b0:	f2c4 0602 	movt	r6, #16386	; 0x4002
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 80025b4:	f8c3 8000 	str.w	r8, [r3]
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 80025b8:	f2c4 0502 	movt	r5, #16386	; 0x4002
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 80025bc:	f8c1 c000 	str.w	ip, [r1]
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 80025c0:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(5)  = WriteAddress;
 80025c2:	6030      	str	r0, [r6, #0]
	REG_DMA1_CNDTR(5) = BufSize;
	
	
	
	REG_DMA1_CCR(5) = 0
 80025c4:	2090      	movs	r0, #144	; 0x90
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 80025c6:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(5) = 0
 80025c8:	6008      	str	r0, [r1, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(5) |= (1<<0);	// Channel enable
 80025ca:	680a      	ldr	r2, [r1, #0]
 80025cc:	f042 0301 	orr.w	r3, r2, #1
 80025d0:	600b      	str	r3, [r1, #0]
}
 80025d2:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80025d6:	4770      	bx	lr

080025d8 <Hw_DMA_SPI2_IsTransFinished>:
---------------------------------------------------------------------------*/
u8 Hw_DMA_SPI2_IsTransFinished( void )
{
	u8 Ret = 0;
	
	if( REG_DMA1_ISR & (1<<13) )
 80025d8:	2300      	movs	r3, #0
 80025da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 80025e4:	d00a      	beq.n	80025fc <Hw_DMA_SPI2_IsTransFinished+0x24>
	{
		if( REG_DMA1_ISR & (1<<17) )
 80025e6:	6819      	ldr	r1, [r3, #0]
 80025e8:	f411 3000 	ands.w	r0, r1, #131072	; 0x20000
 80025ec:	d006      	beq.n	80025fc <Hw_DMA_SPI2_IsTransFinished+0x24>
		{
			REG_DMA1_IFCR = (1<<17) | (1<<13);
 80025ee:	2304      	movs	r3, #4
 80025f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025f4:	f44f 3208 	mov.w	r2, #139264	; 0x22000
 80025f8:	601a      	str	r2, [r3, #0]
			Ret = 1;
 80025fa:	2001      	movs	r0, #1
		}
	}
	return Ret;
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop

08002600 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8002600:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <EP1_IN_Callback+0x58>)
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	2a01      	cmp	r2, #1
 8002608:	d000      	beq.n	800260c <EP1_IN_Callback+0xc>
 800260a:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 800260c:	4c13      	ldr	r4, [pc, #76]	; (800265c <EP1_IN_Callback+0x5c>)
 800260e:	6820      	ldr	r0, [r4, #0]
 8002610:	b300      	cbz	r0, 8002654 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8002612:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002614:	4a12      	ldr	r2, [pc, #72]	; (8002660 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8002616:	d814      	bhi.n	8002642 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002618:	6811      	ldr	r1, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 800261a:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 800261c:	1808      	adds	r0, r1, r0
 800261e:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 8002620:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002622:	b28b      	uxth	r3, r1
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8002624:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8002626:	480f      	ldr	r0, [pc, #60]	; (8002664 <EP1_IN_Callback+0x64>)
 8002628:	21c0      	movs	r1, #192	; 0xc0
 800262a:	18c0      	adds	r0, r0, r3
 800262c:	462a      	mov	r2, r5
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <EP1_IN_Callback+0x68>)
 8002630:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8002632:	2001      	movs	r0, #1
 8002634:	4629      	mov	r1, r5
 8002636:	4a0d      	ldr	r2, [pc, #52]	; (800266c <EP1_IN_Callback+0x6c>)
 8002638:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 800263a:	2001      	movs	r0, #1
 800263c:	490c      	ldr	r1, [pc, #48]	; (8002670 <EP1_IN_Callback+0x70>)
 800263e:	4788      	blx	r1
 8002640:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002642:	6815      	ldr	r5, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8002644:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8002646:	f105 0140 	add.w	r1, r5, #64	; 0x40
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 800264a:	b2ab      	uxth	r3, r5
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 800264c:	6020      	str	r0, [r4, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800264e:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8002650:	2540      	movs	r5, #64	; 0x40
 8002652:	e7e8      	b.n	8002626 <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8002654:	7018      	strb	r0, [r3, #0]
 8002656:	bd38      	pop	{r3, r4, r5, pc}
 8002658:	200004ac 	.word	0x200004ac
 800265c:	200004b8 	.word	0x200004b8
 8002660:	200004b4 	.word	0x200004b4
 8002664:	20000df0 	.word	0x20000df0
 8002668:	08003be9 	.word	0x08003be9
 800266c:	08003e99 	.word	0x08003e99
 8002670:	08003d5d 	.word	0x08003d5d

08002674 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8002674:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8002676:	f640 5488 	movw	r4, #3464	; 0xd88
 800267a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800267e:	f643 7359 	movw	r3, #16217	; 0x3f59
 8002682:	4621      	mov	r1, r4
 8002684:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002688:	2003      	movs	r0, #3
 800268a:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 800268c:	f243 0289 	movw	r2, #12425	; 0x3089
 8002690:	b2c1      	uxtb	r1, r0
 8002692:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002696:	4620      	mov	r0, r4
 8002698:	4790      	blx	r2
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 800269a:	f643 5181 	movw	r1, #15745	; 0x3d81
 800269e:	2003      	movs	r0, #3
 80026a0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80026a4:	4788      	blx	r1
 80026a6:	bd10      	pop	{r4, pc}

080026a8 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 80026a8:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <SOF_Callback+0x24>)
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	2805      	cmp	r0, #5
 80026b0:	d000      	beq.n	80026b4 <SOF_Callback+0xc>
 80026b2:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <SOF_Callback+0x28>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	1c51      	adds	r1, r2, #1
 80026ba:	2a05      	cmp	r2, #5
 80026bc:	6019      	str	r1, [r3, #0]
 80026be:	d1f8      	bne.n	80026b2 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 80026c0:	2000      	movs	r0, #0
 80026c2:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <SOF_Callback+0x2c>)
 80026c6:	4798      	blx	r3
 80026c8:	e7f3      	b.n	80026b2 <SOF_Callback+0xa>
 80026ca:	bf00      	nop
 80026cc:	200004a0 	.word	0x200004a0
 80026d0:	2000048c 	.word	0x2000048c
 80026d4:	080030f9 	.word	0x080030f9

080026d8 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80026d8:	f645 4244 	movw	r2, #23620	; 0x5c44
 80026dc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80026e0:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 80026e2:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80026e4:	4c8f      	ldr	r4, [pc, #572]	; (8002924 <USB_Istr+0x24c>)
 80026e6:	b298      	uxth	r0, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80026e8:	4d8f      	ldr	r5, [pc, #572]	; (8002928 <USB_Istr+0x250>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80026ea:	8020      	strh	r0, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80026ec:	8821      	ldrh	r1, [r4, #0]
 80026ee:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 80026f0:	b089      	sub	sp, #36	; 0x24
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80026f2:	4019      	ands	r1, r3
 80026f4:	f401 7000 	and.w	r0, r1, #512	; 0x200
 80026f8:	b281      	uxth	r1, r0
 80026fa:	2900      	cmp	r1, #0
 80026fc:	d168      	bne.n	80027d0 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 80026fe:	8822      	ldrh	r2, [r4, #0]
 8002700:	f402 4100 	and.w	r1, r2, #32768	; 0x8000
 8002704:	420b      	tst	r3, r1
 8002706:	d15f      	bne.n	80027c8 <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8002708:	8822      	ldrh	r2, [r4, #0]
 800270a:	f402 6180 	and.w	r1, r2, #1024	; 0x400
 800270e:	420b      	tst	r3, r1
 8002710:	d14e      	bne.n	80027b0 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8002712:	8820      	ldrh	r0, [r4, #0]
 8002714:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
 8002718:	4213      	tst	r3, r2
 800271a:	d006      	beq.n	800272a <USB_Istr+0x52>
  {
    _SetISTR((uint16_t)CLR_ERR);
 800271c:	f645 4044 	movw	r0, #23620	; 0x5c44
 8002720:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002724:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8002728:	6001      	str	r1, [r0, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 800272a:	8822      	ldrh	r2, [r4, #0]
 800272c:	f402 5080 	and.w	r0, r2, #4096	; 0x1000
 8002730:	4203      	tst	r3, r0
 8002732:	d131      	bne.n	8002798 <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8002734:	8820      	ldrh	r0, [r4, #0]
 8002736:	f400 6100 	and.w	r1, r0, #2048	; 0x800
 800273a:	420b      	tst	r3, r1
 800273c:	d00e      	beq.n	800275c <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 800273e:	4b7b      	ldr	r3, [pc, #492]	; (800292c <USB_Istr+0x254>)
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	2a00      	cmp	r2, #0
 8002744:	d125      	bne.n	8002792 <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8002746:	2002      	movs	r0, #2
 8002748:	4979      	ldr	r1, [pc, #484]	; (8002930 <USB_Istr+0x258>)
 800274a:	4788      	blx	r1
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 800274c:	f645 4244 	movw	r2, #23620	; 0x5c44
 8002750:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002754:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8002758:	882b      	ldrh	r3, [r5, #0]
 800275a:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 800275c:	8820      	ldrh	r0, [r4, #0]
 800275e:	f400 7280 	and.w	r2, r0, #256	; 0x100
 8002762:	4213      	tst	r3, r2
 8002764:	d013      	beq.n	800278e <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8002766:	f645 4344 	movw	r3, #23620	; 0x5c44
 800276a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 800276e:	f645 4048 	movw	r0, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8002772:	f64f 61ff 	movw	r1, #65279	; 0xfeff
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8002776:	f2c4 0000 	movt	r0, #16384	; 0x4000

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 800277a:	6019      	str	r1, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 800277c:	6802      	ldr	r2, [r0, #0]
 800277e:	0410      	lsls	r0, r2, #16
 8002780:	d432      	bmi.n	80027e8 <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8002782:	4b6c      	ldr	r3, [pc, #432]	; (8002934 <USB_Istr+0x25c>)
 8002784:	2000      	movs	r0, #0
 8002786:	6018      	str	r0, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8002788:	2007      	movs	r0, #7
 800278a:	4b69      	ldr	r3, [pc, #420]	; (8002930 <USB_Istr+0x258>)
 800278c:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800278e:	b009      	add	sp, #36	; 0x24
 8002790:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 8002792:	4869      	ldr	r0, [pc, #420]	; (8002938 <USB_Istr+0x260>)
 8002794:	4780      	blx	r0
 8002796:	e7d9      	b.n	800274c <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8002798:	f645 4344 	movw	r3, #23620	; 0x5c44
 800279c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80027a0:	f64e 71ff 	movw	r1, #61439	; 0xefff
 80027a4:	6019      	str	r1, [r3, #0]
    Resume(RESUME_EXTERNAL);
 80027a6:	2000      	movs	r0, #0
 80027a8:	4a61      	ldr	r2, [pc, #388]	; (8002930 <USB_Istr+0x258>)
 80027aa:	4790      	blx	r2
 80027ac:	882b      	ldrh	r3, [r5, #0]
 80027ae:	e7c1      	b.n	8002734 <USB_Istr+0x5c>
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
    Device_Property.Reset();
 80027b0:	4a62      	ldr	r2, [pc, #392]	; (800293c <USB_Istr+0x264>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 80027b2:	f645 4344 	movw	r3, #23620	; 0x5c44
 80027b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80027ba:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 80027be:	6018      	str	r0, [r3, #0]
    Device_Property.Reset();
 80027c0:	6851      	ldr	r1, [r2, #4]
 80027c2:	4788      	blx	r1
 80027c4:	882b      	ldrh	r3, [r5, #0]
 80027c6:	e7a4      	b.n	8002712 <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 80027c8:	485d      	ldr	r0, [pc, #372]	; (8002940 <USB_Istr+0x268>)
 80027ca:	4780      	blx	r0
 80027cc:	882b      	ldrh	r3, [r5, #0]
 80027ce:	e79b      	b.n	8002708 <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 80027d0:	4b5c      	ldr	r3, [pc, #368]	; (8002944 <USB_Istr+0x26c>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 80027d2:	f64f 50ff 	movw	r0, #65023	; 0xfdff
 80027d6:	6010      	str	r0, [r2, #0]
    bIntPackSOF++;
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	1c51      	adds	r1, r2, #1
 80027dc:	b2c8      	uxtb	r0, r1
 80027de:	7018      	strb	r0, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <USB_Istr+0x270>)
 80027e2:	4798      	blx	r3
 80027e4:	882b      	ldrh	r3, [r5, #0]
 80027e6:	e78a      	b.n	80026fe <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 80027e8:	4852      	ldr	r0, [pc, #328]	; (8002934 <USB_Istr+0x25c>)
 80027ea:	6801      	ldr	r1, [r0, #0]
 80027ec:	1c4a      	adds	r2, r1, #1
 80027ee:	6002      	str	r2, [r0, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 80027f0:	6801      	ldr	r1, [r0, #0]
 80027f2:	2903      	cmp	r1, #3
 80027f4:	d9c8      	bls.n	8002788 <USB_Istr+0xb0>
 80027f6:	f645 4240 	movw	r2, #23616	; 0x5c40
 80027fa:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80027fe:	6811      	ldr	r1, [r2, #0]
 8002800:	0709      	lsls	r1, r1, #28
 8002802:	d4c1      	bmi.n	8002788 <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8002804:	6815      	ldr	r5, [r2, #0]
 8002806:	4951      	ldr	r1, [pc, #324]	; (800294c <USB_Istr+0x274>)
 8002808:	b2ad      	uxth	r5, r5
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800280a:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 800280e:	600d      	str	r5, [r1, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002810:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002814:	6825      	ldr	r5, [r4, #0]
 8002816:	f645 4404 	movw	r4, #23556	; 0x5c04
 800281a:	b2ad      	uxth	r5, r5
 800281c:	9500      	str	r5, [sp, #0]
 800281e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002822:	6825      	ldr	r5, [r4, #0]
 8002824:	f645 4408 	movw	r4, #23560	; 0x5c08
 8002828:	b2ad      	uxth	r5, r5
 800282a:	9501      	str	r5, [sp, #4]
 800282c:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002830:	6825      	ldr	r5, [r4, #0]
 8002832:	f645 440c 	movw	r4, #23564	; 0x5c0c
 8002836:	b2ad      	uxth	r5, r5
 8002838:	9502      	str	r5, [sp, #8]
 800283a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800283e:	6825      	ldr	r5, [r4, #0]
 8002840:	f645 4410 	movw	r4, #23568	; 0x5c10
 8002844:	b2ad      	uxth	r5, r5
 8002846:	9503      	str	r5, [sp, #12]
 8002848:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800284c:	6825      	ldr	r5, [r4, #0]
 800284e:	f645 4414 	movw	r4, #23572	; 0x5c14
 8002852:	b2ad      	uxth	r5, r5
 8002854:	9504      	str	r5, [sp, #16]
 8002856:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800285a:	6825      	ldr	r5, [r4, #0]
 800285c:	f645 4418 	movw	r4, #23576	; 0x5c18
 8002860:	b2ad      	uxth	r5, r5
 8002862:	9505      	str	r5, [sp, #20]
 8002864:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002868:	6825      	ldr	r5, [r4, #0]
 800286a:	f645 441c 	movw	r4, #23580	; 0x5c1c
 800286e:	b2ad      	uxth	r5, r5
 8002870:	9506      	str	r5, [sp, #24]
 8002872:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002876:	6824      	ldr	r4, [r4, #0]
 8002878:	b2a4      	uxth	r4, r4
 800287a:	9407      	str	r4, [sp, #28]
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 800287c:	680c      	ldr	r4, [r1, #0]
 800287e:	f044 0401 	orr.w	r4, r4, #1
 8002882:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 8002884:	680c      	ldr	r4, [r1, #0]
 8002886:	b2a4      	uxth	r4, r4
 8002888:	6014      	str	r4, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 800288a:	680c      	ldr	r4, [r1, #0]
 800288c:	f024 0401 	bic.w	r4, r4, #1
 8002890:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 8002892:	6809      	ldr	r1, [r1, #0]
 8002894:	b289      	uxth	r1, r1
 8002896:	6011      	str	r1, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8002898:	6819      	ldr	r1, [r3, #0]
 800289a:	f645 4244 	movw	r2, #23620	; 0x5c44
 800289e:	0549      	lsls	r1, r1, #21
 80028a0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80028a4:	d5f8      	bpl.n	8002898 <USB_Istr+0x1c0>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 80028a6:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80028aa:	6013      	str	r3, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 80028ac:	9900      	ldr	r1, [sp, #0]
 80028ae:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80028b2:	b28a      	uxth	r2, r1
 80028b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	9901      	ldr	r1, [sp, #4]
 80028bc:	f645 4304 	movw	r3, #23556	; 0x5c04
 80028c0:	b28a      	uxth	r2, r1
 80028c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	9902      	ldr	r1, [sp, #8]
 80028ca:	f645 4308 	movw	r3, #23560	; 0x5c08
 80028ce:	b28a      	uxth	r2, r1
 80028d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	9903      	ldr	r1, [sp, #12]
 80028d8:	f645 430c 	movw	r3, #23564	; 0x5c0c
 80028dc:	b28a      	uxth	r2, r1
 80028de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	9904      	ldr	r1, [sp, #16]
 80028e6:	f645 4310 	movw	r3, #23568	; 0x5c10
 80028ea:	b28a      	uxth	r2, r1
 80028ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	9905      	ldr	r1, [sp, #20]
 80028f4:	f645 4314 	movw	r3, #23572	; 0x5c14
 80028f8:	b28a      	uxth	r2, r1
 80028fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	9906      	ldr	r1, [sp, #24]
 8002902:	f645 4318 	movw	r3, #23576	; 0x5c18
 8002906:	b28a      	uxth	r2, r1
 8002908:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	9907      	ldr	r1, [sp, #28]
 8002910:	f645 431c 	movw	r3, #23580	; 0x5c1c
 8002914:	b28a      	uxth	r2, r1
 8002916:	f2c4 0300 	movt	r3, #16384	; 0x4000
      
        esof_counter = 0;
 800291a:	2100      	movs	r1, #0
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 800291c:	601a      	str	r2, [r3, #0]
      
        esof_counter = 0;
 800291e:	6001      	str	r1, [r0, #0]
 8002920:	e732      	b.n	8002788 <USB_Istr+0xb0>
 8002922:	bf00      	nop
 8002924:	20000dc8 	.word	0x20000dc8
 8002928:	20001624 	.word	0x20001624
 800292c:	200004a4 	.word	0x200004a4
 8002930:	08002e05 	.word	0x08002e05
 8002934:	20000498 	.word	0x20000498
 8002938:	08002c35 	.word	0x08002c35
 800293c:	20000288 	.word	0x20000288
 8002940:	08003f91 	.word	0x08003f91
 8002944:	20000494 	.word	0x20000494
 8002948:	080026a9 	.word	0x080026a9
 800294c:	20000490 	.word	0x20000490

08002950 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <Virtual_Com_Port_SetConfiguration+0x10>)
 8002952:	7a98      	ldrb	r0, [r3, #10]
 8002954:	b110      	cbz	r0, 800295c <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8002956:	4903      	ldr	r1, [pc, #12]	; (8002964 <Virtual_Com_Port_SetConfiguration+0x14>)
 8002958:	2205      	movs	r2, #5
 800295a:	600a      	str	r2, [r1, #0]
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20001600 	.word	0x20001600
 8002964:	200004a0 	.word	0x200004a0

08002968 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8002968:	f240 43a0 	movw	r3, #1184	; 0x4a0
 800296c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002970:	2204      	movs	r2, #4
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop

08002978 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <Virtual_Com_Port_Status_In+0x10>)
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	2a20      	cmp	r2, #32
 800297e:	d101      	bne.n	8002984 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8002980:	2000      	movs	r0, #0
 8002982:	7018      	strb	r0, [r3, #0]
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	2000049c 	.word	0x2000049c

0800298c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop

08002990 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8002990:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8002992:	b510      	push	{r4, lr}
 8002994:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8002996:	d003      	beq.n	80029a0 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8002998:	2820      	cmp	r0, #32
 800299a:	d011      	beq.n	80029c0 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800299c:	2002      	movs	r0, #2
 800299e:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80029a0:	4a0f      	ldr	r2, [pc, #60]	; (80029e0 <Virtual_Com_Port_Data_Setup+0x50>)
 80029a2:	6813      	ldr	r3, [r2, #0]
 80029a4:	7818      	ldrb	r0, [r3, #0]
 80029a6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80029aa:	2921      	cmp	r1, #33	; 0x21
 80029ac:	d1f6      	bne.n	800299c <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 80029ae:	490d      	ldr	r1, [pc, #52]	; (80029e4 <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80029b0:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 80029b2:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 80029b4:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80029b6:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 80029b8:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 80029ba:	4788      	blx	r1
  return USB_SUCCESS;
 80029bc:	4620      	mov	r0, r4
 80029be:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80029c0:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <Virtual_Com_Port_Data_Setup+0x50>)
 80029c2:	6811      	ldr	r1, [r2, #0]
 80029c4:	7808      	ldrb	r0, [r1, #0]
 80029c6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80029ca:	2921      	cmp	r1, #33	; 0x21
 80029cc:	d003      	beq.n	80029d6 <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 80029ce:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 80029d0:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 80029d2:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 80029d4:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 80029d6:	4c04      	ldr	r4, [pc, #16]	; (80029e8 <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 80029d8:	4904      	ldr	r1, [pc, #16]	; (80029ec <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 80029da:	7023      	strb	r3, [r4, #0]
 80029dc:	e7e8      	b.n	80029b0 <Virtual_Com_Port_Data_Setup+0x20>
 80029de:	bf00      	nop
 80029e0:	20001620 	.word	0x20001620
 80029e4:	08002a25 	.word	0x08002a25
 80029e8:	2000049c 	.word	0x2000049c
 80029ec:	08002a3d 	.word	0x08002a3d

080029f0 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80029f0:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <Virtual_Com_Port_NoData_Setup+0x20>)
 80029f2:	6819      	ldr	r1, [r3, #0]
 80029f4:	780a      	ldrb	r2, [r1, #0]
 80029f6:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 80029fa:	2b21      	cmp	r3, #33	; 0x21
 80029fc:	d001      	beq.n	8002a02 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 80029fe:	2002      	movs	r0, #2
}
 8002a00:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8002a02:	2802      	cmp	r0, #2
 8002a04:	d001      	beq.n	8002a0a <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 8002a06:	2822      	cmp	r0, #34	; 0x22
 8002a08:	d1f9      	bne.n	80029fe <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20001620 	.word	0x20001620

08002a14 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8002a14:	b109      	cbz	r1, 8002a1a <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 8002a16:	2002      	movs	r0, #2
 8002a18:	4770      	bx	lr
  }
  else if (Interface > 1)
 8002a1a:	2801      	cmp	r0, #1
 8002a1c:	d8fb      	bhi.n	8002a16 <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8002a1e:	4608      	mov	r0, r1
}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop

08002a24 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002a24:	b108      	cbz	r0, 8002a2a <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8002a26:	4803      	ldr	r0, [pc, #12]	; (8002a34 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8002a28:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002a2a:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <Virtual_Com_Port_GetLineCoding+0x14>)
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	6819      	ldr	r1, [r3, #0]
 8002a30:	820a      	strh	r2, [r1, #16]
    return NULL;
 8002a32:	4770      	bx	lr
 8002a34:	20000304 	.word	0x20000304
 8002a38:	20001620 	.word	0x20001620

08002a3c <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002a3c:	b108      	cbz	r0, 8002a42 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8002a3e:	4803      	ldr	r0, [pc, #12]	; (8002a4c <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8002a40:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002a42:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <Virtual_Com_Port_SetLineCoding+0x14>)
 8002a44:	2208      	movs	r2, #8
 8002a46:	6819      	ldr	r1, [r3, #0]
 8002a48:	820a      	strh	r2, [r1, #16]
    return NULL;
 8002a4a:	4770      	bx	lr
 8002a4c:	20000304 	.word	0x20000304
 8002a50:	20001620 	.word	0x20001620

08002a54 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8002a54:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	78ca      	ldrb	r2, [r1, #3]
  if (wValue0 > 4)
 8002a5c:	2a04      	cmp	r2, #4
 8002a5e:	d805      	bhi.n	8002a6c <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8002a62:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8002a68:	4790      	blx	r2
 8002a6a:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 8002a6c:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 8002a6e:	bd08      	pop	{r3, pc}
 8002a70:	20001620 	.word	0x20001620
 8002a74:	200002e4 	.word	0x200002e4
 8002a78:	080035b1 	.word	0x080035b1

08002a7c <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8002a7c:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8002a7e:	f240 2180 	movw	r1, #640	; 0x280
 8002a82:	f243 53b1 	movw	r3, #13745	; 0x35b1
 8002a86:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002a8a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002a8e:	4798      	blx	r3
}
 8002a90:	bd08      	pop	{r3, pc}
 8002a92:	bf00      	nop

08002a94 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8002a94:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8002a96:	f240 21dc 	movw	r1, #732	; 0x2dc
 8002a9a:	f243 53b1 	movw	r3, #13745	; 0x35b1
 8002a9e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002aa2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002aa6:	4798      	blx	r3
}
 8002aa8:	bd08      	pop	{r3, pc}
 8002aaa:	bf00      	nop

08002aac <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002aac:	f241 6220 	movw	r2, #5664	; 0x1620

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002ab0:	f244 43f4 	movw	r3, #17652	; 0x44f4
 8002ab4:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002ab8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002abc:	6810      	ldr	r0, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002abe:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8002ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002ac4:	2400      	movs	r4, #0
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8002ac6:	f643 45b1 	movw	r5, #15537	; 0x3cb1
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002aca:	7241      	strb	r1, [r0, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002acc:	7284      	strb	r4, [r0, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8002ace:	72c4      	strb	r4, [r0, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8002ad0:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002ad4:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8002ad6:	f643 46c5 	movw	r6, #15557	; 0x3cc5
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8002ada:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8002adc:	f6c0 0600 	movt	r6, #2048	; 0x800
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8002ae6:	f643 45dd 	movw	r5, #15581	; 0x3cdd
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8002aea:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8002aec:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002af0:	2110      	movs	r1, #16
 8002af2:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8002af4:	f643 6a31 	movw	sl, #15921	; 0x3e31

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8002af8:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8002afa:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8002afe:	2140      	movs	r1, #64	; 0x40
 8002b00:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002b02:	f643 680d 	movw	r8, #15885	; 0x3e0d
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8002b06:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002b08:	f6c0 0800 	movt	r8, #2048	; 0x800
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	4620      	mov	r0, r4
  Clear_Status_Out(ENDP0);
 8002b10:	f643 57a5 	movw	r7, #15781	; 0x3da5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002b14:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8002b16:	f6c0 0700 	movt	r7, #2048	; 0x800
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	47b8      	blx	r7
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8002b1e:	f240 2288 	movw	r2, #648	; 0x288
 8002b22:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002b26:	f643 69b9 	movw	r9, #16057	; 0x3eb9
 8002b2a:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8002b2e:	f6c0 0900 	movt	r9, #2048	; 0x800
 8002b32:	4620      	mov	r0, r4
 8002b34:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8002b36:	f643 5381 	movw	r3, #15745	; 0x3d81
 8002b3a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002b3e:	4620      	mov	r0, r4
 8002b40:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8002b42:	2001      	movs	r0, #1
 8002b44:	4621      	mov	r1, r4
 8002b46:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8002b48:	2001      	movs	r0, #1
 8002b4a:	21c0      	movs	r1, #192	; 0xc0
 8002b4c:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8002b4e:	f643 571d 	movw	r7, #15645	; 0x3d1d
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8002b52:	2001      	movs	r0, #1
 8002b54:	2120      	movs	r1, #32
 8002b56:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8002b58:	f6c0 0700 	movt	r7, #2048	; 0x800
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	4621      	mov	r1, r4
 8002b60:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8002b62:	2002      	movs	r0, #2
 8002b64:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002b68:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b70:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8002b72:	2002      	movs	r0, #2
 8002b74:	4621      	mov	r1, r4
 8002b76:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8002b78:	2002      	movs	r0, #2
 8002b7a:	2120      	movs	r1, #32
 8002b7c:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8002b7e:	2003      	movs	r0, #3
 8002b80:	4621      	mov	r1, r4
 8002b82:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8002b84:	2003      	movs	r0, #3
 8002b86:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002b8a:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8002b8c:	2003      	movs	r0, #3
 8002b8e:	2140      	movs	r1, #64	; 0x40
 8002b90:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8002b92:	2003      	movs	r0, #3
 8002b94:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002b98:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	2003      	movs	r0, #3
 8002b9e:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8002ba0:	f643 218d 	movw	r1, #14989	; 0x3a8d
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002baa:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 8002bac:	f240 40a0 	movw	r0, #1184	; 0x4a0
 8002bb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	6002      	str	r2, [r0, #0]
 8002bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002bbc <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8002bbc:	f243 139d 	movw	r3, #12701	; 0x319d
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8002bc0:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8002bc2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002bc6:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 8002bc8:	f241 6020 	movw	r0, #5664	; 0x1620
 8002bcc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002bd0:	6802      	ldr	r2, [r0, #0]
 8002bd2:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 8002bd4:	f642 31f9 	movw	r1, #11257	; 0x2bf9

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8002bd8:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 8002bda:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002bde:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8002be0:	f643 732d 	movw	r3, #16173	; 0x3f2d
 8002be4:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002be8:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 8002bea:	f240 40a0 	movw	r0, #1184	; 0x4a0
 8002bee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002bf2:	6004      	str	r4, [r0, #0]
 8002bf4:	bd10      	pop	{r4, pc}
 8002bf6:	bf00      	nop

08002bf8 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8002bf8:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8002bfa:	f243 036d 	movw	r3, #12397	; 0x306d
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002c04:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8002c06:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8002c0a:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002c0e:	f241 6224 	movw	r2, #5668	; 0x1624
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8002c12:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8002c16:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002c18:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8002c1c:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8002c1e:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002c22:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8002c26:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8002c28:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 8002c2a:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8002c2c:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002c2e:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 8002c30:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 8002c32:	bd38      	pop	{r3, r4, r5, pc}

08002c34 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8002c34:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8002c36:	2100      	movs	r1, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8002c38:	b083      	sub	sp, #12
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8002c3a:	f645 4340 	movw	r3, #23616	; 0x5c40

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002c3e:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8002c42:	9101      	str	r1, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8002c44:	f2c4 0300 	movt	r3, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002c48:	f2c4 0200 	movt	r2, #16384	; 0x4000
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8002c4c:	6818      	ldr	r0, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002c4e:	6814      	ldr	r4, [r2, #0]
 8002c50:	4960      	ldr	r1, [pc, #384]	; (8002dd4 <Suspend+0x1a0>)
 8002c52:	b2a5      	uxth	r5, r4
 8002c54:	f645 4604 	movw	r6, #23556	; 0x5c04
 8002c58:	600d      	str	r5, [r1, #0]
 8002c5a:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8002c5e:	6837      	ldr	r7, [r6, #0]
 8002c60:	f645 4208 	movw	r2, #23560	; 0x5c08
 8002c64:	b2bc      	uxth	r4, r7
 8002c66:	604c      	str	r4, [r1, #4]
 8002c68:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002c6c:	6815      	ldr	r5, [r2, #0]
 8002c6e:	f645 460c 	movw	r6, #23564	; 0x5c0c
 8002c72:	b2af      	uxth	r7, r5
 8002c74:	608f      	str	r7, [r1, #8]
 8002c76:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8002c7a:	6834      	ldr	r4, [r6, #0]
 8002c7c:	f645 4210 	movw	r2, #23568	; 0x5c10
 8002c80:	b2a5      	uxth	r5, r4
 8002c82:	60cd      	str	r5, [r1, #12]
 8002c84:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002c88:	6816      	ldr	r6, [r2, #0]
 8002c8a:	f645 4714 	movw	r7, #23572	; 0x5c14
 8002c8e:	b2b4      	uxth	r4, r6
 8002c90:	610c      	str	r4, [r1, #16]
 8002c92:	f2c4 0700 	movt	r7, #16384	; 0x4000
 8002c96:	683d      	ldr	r5, [r7, #0]
 8002c98:	f645 4218 	movw	r2, #23576	; 0x5c18
 8002c9c:	b2ae      	uxth	r6, r5
 8002c9e:	614e      	str	r6, [r1, #20]
 8002ca0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002ca4:	6817      	ldr	r7, [r2, #0]
 8002ca6:	f645 451c 	movw	r5, #23580	; 0x5c1c
 8002caa:	b2bc      	uxth	r4, r7
 8002cac:	618c      	str	r4, [r1, #24]
 8002cae:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002cb2:	682e      	ldr	r6, [r5, #0]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8002cb4:	b282      	uxth	r2, r0
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8002cb6:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8002cba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8002cbe:	4004      	ands	r4, r0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002cc0:	b2b7      	uxth	r7, r6
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8002cc2:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8002cc6:	f042 0601 	orr.w	r6, r2, #1
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8002cca:	f645 4044 	movw	r0, #23620	; 0x5c44
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002cce:	61cf      	str	r7, [r1, #28]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8002cd0:	f2c4 0000 	movt	r0, #16384	; 0x4000
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8002cd4:	601a      	str	r2, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8002cd6:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8002cd8:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8002cda:	6802      	ldr	r2, [r0, #0]
 8002cdc:	f645 4344 	movw	r3, #23620	; 0x5c44
 8002ce0:	0552      	lsls	r2, r2, #21
 8002ce2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ce6:	d5f8      	bpl.n	8002cda <Suspend+0xa6>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8002ce8:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8002cec:	6018      	str	r0, [r3, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8002cee:	6808      	ldr	r0, [r1, #0]
 8002cf0:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8002cf4:	b280      	uxth	r0, r0
 8002cf6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002cfa:	6010      	str	r0, [r2, #0]
 8002cfc:	6848      	ldr	r0, [r1, #4]
 8002cfe:	f645 4204 	movw	r2, #23556	; 0x5c04
 8002d02:	b280      	uxth	r0, r0
 8002d04:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002d08:	6010      	str	r0, [r2, #0]
 8002d0a:	6888      	ldr	r0, [r1, #8]
 8002d0c:	f645 4208 	movw	r2, #23560	; 0x5c08
 8002d10:	b280      	uxth	r0, r0
 8002d12:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002d16:	6010      	str	r0, [r2, #0]
 8002d18:	68c8      	ldr	r0, [r1, #12]
 8002d1a:	f645 420c 	movw	r2, #23564	; 0x5c0c
 8002d1e:	b280      	uxth	r0, r0
 8002d20:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002d24:	6010      	str	r0, [r2, #0]
 8002d26:	6908      	ldr	r0, [r1, #16]
 8002d28:	f645 4210 	movw	r2, #23568	; 0x5c10
 8002d2c:	b280      	uxth	r0, r0
 8002d2e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002d32:	6010      	str	r0, [r2, #0]
 8002d34:	6948      	ldr	r0, [r1, #20]
 8002d36:	f645 4214 	movw	r2, #23572	; 0x5c14
 8002d3a:	b280      	uxth	r0, r0
 8002d3c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002d40:	6010      	str	r0, [r2, #0]
 8002d42:	6988      	ldr	r0, [r1, #24]
 8002d44:	f645 4218 	movw	r2, #23576	; 0x5c18
 8002d48:	b280      	uxth	r0, r0
 8002d4a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002d4e:	6010      	str	r0, [r2, #0]
 8002d50:	69c8      	ldr	r0, [r1, #28]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8002d52:	f645 4240 	movw	r2, #23616	; 0x5c40
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8002d56:	f645 411c 	movw	r1, #23580	; 0x5c1c
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8002d5a:	f2c4 0200 	movt	r2, #16384	; 0x4000
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8002d5e:	b280      	uxth	r0, r0
 8002d60:	f2c4 0100 	movt	r1, #16384	; 0x4000
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 8002d64:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8002d68:	6008      	str	r0, [r1, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8002d6a:	6014      	str	r4, [r2, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 8002d6c:	6810      	ldr	r0, [r2, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002d6e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 8002d72:	b284      	uxth	r4, r0
 8002d74:	f044 0004 	orr.w	r0, r4, #4
 8002d78:	6010      	str	r0, [r2, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002d7a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002d7e:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8002d80:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002d84:	9001      	str	r0, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 8002d86:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8002d88:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 8002d8c:	f020 0003 	bic.w	r0, r0, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 8002d90:	f040 0001 	orr.w	r0, r0, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 8002d94:	6008      	str	r0, [r1, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8002d96:	6820      	ldr	r0, [r4, #0]
 8002d98:	f040 0004 	orr.w	r0, r0, #4
 8002d9c:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	04c0      	lsls	r0, r0, #19
 8002da2:	d50f      	bpl.n	8002dc4 <Suspend+0x190>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 8002da4:	f64e 70ff 	movw	r0, #61439	; 0xefff
 8002da8:	6018      	str	r0, [r3, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 8002daa:	6810      	ldr	r0, [r2, #0]
        wCNTR&=~CNTR_FSUSP;
 8002dac:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8002db0:	4003      	ands	r3, r0
        _SetCNTR(wCNTR);
 8002db2:	6013      	str	r3, [r2, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 8002db4:	9a01      	ldr	r2, [sp, #4]
 8002db6:	600a      	str	r2, [r1, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 8002db8:	6821      	ldr	r1, [r4, #0]
 8002dba:	f021 0004 	bic.w	r0, r1, #4
 8002dbe:	6020      	str	r0, [r4, #0]
#endif
    }
}
 8002dc0:	b003      	add	sp, #12
 8002dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <Suspend+0x1a4>)
 8002dc6:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 8002dc8:	6822      	ldr	r2, [r4, #0]
 8002dca:	f022 0104 	bic.w	r1, r2, #4
 8002dce:	6021      	str	r1, [r4, #0]
 8002dd0:	e7f6      	b.n	8002dc0 <Suspend+0x18c>
 8002dd2:	bf00      	nop
 8002dd4:	20000dd0 	.word	0x20000dd0
 8002dd8:	080031e1 	.word	0x080031e1

08002ddc <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8002ddc:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8002dde:	f645 4440 	movw	r4, #23616	; 0x5c40
 8002de2:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002de6:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 8002de8:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8002dec:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8002dee:	f642 709d 	movw	r0, #12189	; 0x2f9d
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8002df2:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8002df4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002df8:	4780      	blx	r0

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8002dfa:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 8002dfe:	6021      	str	r1, [r4, #0]
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	bf00      	nop

08002e04 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8002e04:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 8002e06:	4c2b      	ldr	r4, [pc, #172]	; (8002eb4 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8002e08:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 8002e0a:	bf18      	it	ne
 8002e0c:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 8002e0e:	7823      	ldrb	r3, [r4, #0]
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d819      	bhi.n	8002e48 <Resume+0x44>
 8002e14:	e8df f003 	tbb	[pc, r3]
 8002e18:	2f2a221b 	.word	0x2f2a221b
 8002e1c:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8002e1e:	7860      	ldrb	r0, [r4, #1]
 8002e20:	1e41      	subs	r1, r0, #1
 8002e22:	b2ca      	uxtb	r2, r1
 8002e24:	7062      	strb	r2, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8002e26:	7863      	ldrb	r3, [r4, #1]
 8002e28:	b983      	cbnz	r3, 8002e4c <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 8002e2a:	f645 4240 	movw	r2, #23616	; 0x5c40
 8002e2e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002e32:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 8002e34:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002e38:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 8002e3a:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 8002e3c:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <Resume+0xb0>)
        remotewakeupon = 0;
 8002e3e:	491e      	ldr	r1, [pc, #120]	; (8002eb8 <Resume+0xb4>)
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 8002e40:	2006      	movs	r0, #6
 8002e42:	7010      	strb	r0, [r2, #0]
        remotewakeupon = 0;
 8002e44:	600b      	str	r3, [r1, #0]
 8002e46:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8002e48:	2106      	movs	r1, #6
 8002e4a:	7021      	strb	r1, [r4, #0]
 8002e4c:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 8002e4e:	4a1a      	ldr	r2, [pc, #104]	; (8002eb8 <Resume+0xb4>)
 8002e50:	6811      	ldr	r1, [r2, #0]
 8002e52:	2900      	cmp	r1, #0
 8002e54:	d028      	beq.n	8002ea8 <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8002e56:	2005      	movs	r0, #5
 8002e58:	7020      	strb	r0, [r4, #0]
 8002e5a:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 8002e5c:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <Resume+0xb8>)
 8002e5e:	4790      	blx	r2
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 8002e60:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <Resume+0xb4>)
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8002e62:	2104      	movs	r1, #4
      remotewakeupon = 1;
 8002e64:	2001      	movs	r0, #1
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8002e66:	7021      	strb	r1, [r4, #0]
      remotewakeupon = 1;
 8002e68:	6018      	str	r0, [r3, #0]
      break;
 8002e6a:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8002e6c:	2302      	movs	r3, #2
      ResumeS.eState = RESUME_WAIT;
 8002e6e:	2003      	movs	r0, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8002e70:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8002e72:	7020      	strb	r0, [r4, #0]
      break;
 8002e74:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 8002e76:	7862      	ldrb	r2, [r4, #1]
 8002e78:	1e51      	subs	r1, r2, #1
 8002e7a:	b2cb      	uxtb	r3, r1
 8002e7c:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8002e7e:	7860      	ldrb	r0, [r4, #1]
 8002e80:	2800      	cmp	r0, #0
 8002e82:	d1e3      	bne.n	8002e4c <Resume+0x48>
        ResumeS.eState = RESUME_START;
 8002e84:	490b      	ldr	r1, [pc, #44]	; (8002eb4 <Resume+0xb0>)
 8002e86:	2204      	movs	r2, #4
 8002e88:	700a      	strb	r2, [r1, #0]
 8002e8a:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8002e8c:	f645 4340 	movw	r3, #23616	; 0x5c40
 8002e90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002e94:	6818      	ldr	r0, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8002e96:	b282      	uxth	r2, r0
 8002e98:	f042 0110 	orr.w	r1, r2, #16
 8002e9c:	6019      	str	r1, [r3, #0]
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 8002e9e:	200a      	movs	r0, #10
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 8002ea0:	2305      	movs	r3, #5
 8002ea2:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 8002ea4:	7060      	strb	r0, [r4, #1]
      break;
 8002ea6:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <Resume+0xb8>)
 8002eaa:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 8002eac:	2206      	movs	r2, #6
 8002eae:	7022      	strb	r2, [r4, #0]
 8002eb0:	bd10      	pop	{r4, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000dcc 	.word	0x20000dcc
 8002eb8:	200004a8 	.word	0x200004a8
 8002ebc:	08002ddd 	.word	0x08002ddd

08002ec0 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8002ec0:	f240 4314 	movw	r3, #1044	; 0x414
 8002ec4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ec8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	4770      	bx	lr

08002ed0 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8002ed0:	b470      	push	{r4, r5, r6}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002ed2:	b38a      	cbz	r2, 8002f38 <IntToUnicode+0x68>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8002ed4:	1e56      	subs	r6, r2, #1
 8002ed6:	b2f2      	uxtb	r2, r6
 8002ed8:	1c53      	adds	r3, r2, #1
 8002eda:	005e      	lsls	r6, r3, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8002edc:	0f03      	lsrs	r3, r0, #28
 8002ede:	1eb2      	subs	r2, r6, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002ee0:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8002ee2:	2b09      	cmp	r3, #9
 8002ee4:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002ee8:	d928      	bls.n	8002f3c <IntToUnicode+0x6c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002eea:	3337      	adds	r3, #55	; 0x37
 8002eec:	700b      	strb	r3, [r1, #0]
 8002eee:	2302      	movs	r3, #2
    }
    
    value = value << 4;
 8002ef0:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002ef2:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002ef4:	704c      	strb	r4, [r1, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002ef6:	d01f      	beq.n	8002f38 <IntToUnicode+0x68>
 8002ef8:	b152      	cbz	r2, 8002f10 <IntToUnicode+0x40>
  {
    if( ((value >> 28)) < 0xA )
 8002efa:	0f02      	lsrs	r2, r0, #28
 8002efc:	2a09      	cmp	r2, #9
 8002efe:	d913      	bls.n	8002f28 <IntToUnicode+0x58>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002f00:	3237      	adds	r2, #55	; 0x37
 8002f02:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8002f04:	18ca      	adds	r2, r1, r3
 8002f06:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8002f08:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002f0a:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002f0c:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002f0e:	d013      	beq.n	8002f38 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8002f10:	0f05      	lsrs	r5, r0, #28
 8002f12:	2d09      	cmp	r5, #9
 8002f14:	d815      	bhi.n	8002f42 <IntToUnicode+0x72>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002f16:	3530      	adds	r5, #48	; 0x30
 8002f18:	54cd      	strb	r5, [r1, r3]
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8002f1a:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8002f1c:	0f02      	lsrs	r2, r0, #28
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8002f1e:	18cd      	adds	r5, r1, r3
 8002f20:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8002f22:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002f24:	706c      	strb	r4, [r5, #1]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8002f26:	d8eb      	bhi.n	8002f00 <IntToUnicode+0x30>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002f28:	3230      	adds	r2, #48	; 0x30
 8002f2a:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8002f2c:	18ca      	adds	r2, r1, r3
 8002f2e:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8002f30:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002f32:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002f34:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002f36:	d1eb      	bne.n	8002f10 <IntToUnicode+0x40>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8002f38:	bc70      	pop	{r4, r5, r6}
 8002f3a:	4770      	bx	lr
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002f3c:	3330      	adds	r3, #48	; 0x30
 8002f3e:	700b      	strb	r3, [r1, #0]
 8002f40:	e7d5      	b.n	8002eee <IntToUnicode+0x1e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002f42:	3537      	adds	r5, #55	; 0x37
 8002f44:	54cd      	strb	r5, [r1, r3]
 8002f46:	e7e8      	b.n	8002f1a <IntToUnicode+0x4a>

08002f48 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8002f48:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 8002f4a:	f242 63d9 	movw	r3, #9945	; 0x26d9
 8002f4e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002f52:	4798      	blx	r3
 8002f54:	bd08      	pop	{r3, pc}
 8002f56:	bf00      	nop

08002f58 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8002f58:	f241 0304 	movw	r3, #4100	; 0x1004
 8002f5c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	f422 0070 	bic.w	r0, r2, #15728640	; 0xf00000
 8002f66:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 8002f68:	6819      	ldr	r1, [r3, #0]
 8002f6a:	f441 1200 	orr.w	r2, r1, #2097152	; 0x200000
 8002f6e:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	6018      	str	r0, [r3, #0]
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop

08002f78 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8002f78:	f241 0204 	movw	r2, #4100	; 0x1004
 8002f7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002f80:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8002f82:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8002f86:	f421 0080 	bic.w	r0, r1, #4194304	; 0x400000
 8002f8a:	6010      	str	r0, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8002f8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	f442 0100 	orr.w	r1, r2, #8388608	; 0x800000
 8002f96:	6019      	str	r1, [r3, #0]
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop

08002f9c <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <Leave_LowPowerMode+0x18>)
 8002f9e:	7a98      	ldrb	r0, [r3, #10]
 8002fa0:	b918      	cbnz	r0, 8002faa <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 8002fa2:	4905      	ldr	r1, [pc, #20]	; (8002fb8 <Leave_LowPowerMode+0x1c>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	600a      	str	r2, [r1, #0]
 8002fa8:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8002faa:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <Leave_LowPowerMode+0x1c>)
 8002fac:	2005      	movs	r0, #5
 8002fae:	6018      	str	r0, [r3, #0]
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20001600 	.word	0x20001600
 8002fb8:	200004a0 	.word	0x200004a0

08002fbc <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8002fbc:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8002fc0:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8002fc2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002fc6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8002fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8002fce:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8002fd0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002fd4:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8002fd6:	f240 4404 	movw	r4, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8002fda:	f420 2580 	bic.w	r5, r0, #262144	; 0x40000
 8002fde:	601d      	str	r5, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8002fe0:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8002fe4:	6822      	ldr	r2, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8002fe6:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 8002fea:	f422 2080 	bic.w	r0, r2, #262144	; 0x40000
 8002fee:	6020      	str	r0, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8002ff0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8002ff4:	680c      	ldr	r4, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8002ff6:	f240 450c 	movw	r5, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8002ffa:	f444 2280 	orr.w	r2, r4, #262144	; 0x40000
 8002ffe:	600a      	str	r2, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8003000:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8003004:	6829      	ldr	r1, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003006:	f241 7455 	movw	r4, #5973	; 0x1755
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800300a:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 800300e:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003010:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003012:	f642 7149 	movw	r1, #12105	; 0x2f49
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003016:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800301a:	2090      	movs	r0, #144	; 0x90
 800301c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003020:	2200      	movs	r2, #0
 8003022:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003026:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003028:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 800302a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800302e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003032:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8003034:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8003036:	f442 1180 	orr.w	r1, r2, #1048576	; 0x100000
 800303a:	6019      	str	r1, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 800303c:	f642 61c1 	movw	r1, #11969	; 0x2ec1
 8003040:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003044:	2200      	movs	r2, #0
 8003046:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8003048:	f24e 1004 	movw	r0, #57604	; 0xe104
 800304c:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8003050:	6802      	ldr	r2, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8003052:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8003056:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 800305a:	6001      	str	r1, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 800305c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	f440 2280 	orr.w	r2, r0, #262144	; 0x40000
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	bd38      	pop	{r3, r4, r5, pc}
 800306a:	bf00      	nop

0800306c <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 800306c:	f241 030c 	movw	r3, #4108	; 0x100c
 8003070:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003074:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 8003076:	b918      	cbnz	r0, 8003080 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8003078:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 800307c:	6018      	str	r0, [r3, #0]
 800307e:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8003080:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003084:	6019      	str	r1, [r3, #0]
 8003086:	4770      	bx	lr

08003088 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8003088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800308c:	460f      	mov	r7, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800308e:	b082      	sub	sp, #8
 8003090:	4605      	mov	r5, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003092:	b361      	cbz	r1, 80030ee <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003094:	7803      	ldrb	r3, [r0, #0]
 8003096:	1e4a      	subs	r2, r1, #1
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003098:	2005      	movs	r0, #5
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800309a:	2401      	movs	r4, #1
 800309c:	4e15      	ldr	r6, [pc, #84]	; (80030f4 <USB_To_USART_Send_Data+0x6c>)
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 800309e:	f10d 0107 	add.w	r1, sp, #7
 80030a2:	ea02 0804 	and.w	r8, r2, r4
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80030a6:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80030aa:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80030ac:	42bc      	cmp	r4, r7
 80030ae:	d21e      	bcs.n	80030ee <USB_To_USART_Send_Data+0x66>
 80030b0:	f1b8 0f00 	cmp.w	r8, #0
 80030b4:	d009      	beq.n	80030ca <USB_To_USART_Send_Data+0x42>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80030b6:	786b      	ldrb	r3, [r5, #1]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80030b8:	2005      	movs	r0, #5
 80030ba:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80030be:	2402      	movs	r4, #2
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80030c0:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80030c4:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80030c6:	42bc      	cmp	r4, r7
 80030c8:	d211      	bcs.n	80030ee <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80030ca:	5d2a      	ldrb	r2, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80030cc:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80030d0:	3401      	adds	r4, #1
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 80030d2:	2005      	movs	r0, #5
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80030d4:	f88d 2007 	strb.w	r2, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80030d8:	47b0      	blx	r6
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80030da:	5d2b      	ldrb	r3, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80030dc:	2005      	movs	r0, #5
 80030de:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80030e2:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80030e4:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80030e8:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80030ea:	42bc      	cmp	r4, r7
 80030ec:	d3ed      	bcc.n	80030ca <USB_To_USART_Send_Data+0x42>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 80030ee:	b002      	add	sp, #8
 80030f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030f4:	08001641 	.word	0x08001641

080030f8 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 80030f8:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 80030fa:	4c20      	ldr	r4, [pc, #128]	; (800317c <Handle_USBAsynchXfer+0x84>)
 80030fc:	7823      	ldrb	r3, [r4, #0]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d023      	beq.n	800314a <Handle_USBAsynchXfer+0x52>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8003102:	4d1f      	ldr	r5, [pc, #124]	; (8003180 <Handle_USBAsynchXfer+0x88>)
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310a:	d02c      	beq.n	8003166 <Handle_USBAsynchXfer+0x6e>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800310c:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <Handle_USBAsynchXfer+0x8c>)
 800310e:	6811      	ldr	r1, [r2, #0]
 8003110:	428b      	cmp	r3, r1
 8003112:	d02f      	beq.n	8003174 <Handle_USBAsynchXfer+0x7c>
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8003114:	d81a      	bhi.n	800314c <Handle_USBAsynchXfer+0x54>
 8003116:	b298      	uxth	r0, r3
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8003118:	1ace      	subs	r6, r1, r3
 800311a:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800311c:	2e40      	cmp	r6, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800311e:	6016      	str	r6, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003120:	d91b      	bls.n	800315a <Handle_USBAsynchXfer+0x62>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8003122:	3e40      	subs	r6, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8003124:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8003126:	6016      	str	r6, [r2, #0]
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8003128:	602b      	str	r3, [r5, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800312a:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800312c:	4b17      	ldr	r3, [pc, #92]	; (800318c <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 800312e:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8003130:	1818      	adds	r0, r3, r0
 8003132:	4632      	mov	r2, r6
 8003134:	21c0      	movs	r1, #192	; 0xc0
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8003138:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800313a:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 800313c:	4628      	mov	r0, r5
 800313e:	4631      	mov	r1, r6
 8003140:	4a14      	ldr	r2, [pc, #80]	; (8003194 <Handle_USBAsynchXfer+0x9c>)
 8003142:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 8003144:	4628      	mov	r0, r5
 8003146:	4914      	ldr	r1, [pc, #80]	; (8003198 <Handle_USBAsynchXfer+0xa0>)
 8003148:	4788      	blx	r1
 800314a:	bd70      	pop	{r4, r5, r6, pc}
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800314c:	f5c3 6600 	rsb	r6, r3, #2048	; 0x800
 8003150:	4a0d      	ldr	r2, [pc, #52]	; (8003188 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003152:	2e40      	cmp	r6, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8003154:	6016      	str	r6, [r2, #0]
 8003156:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003158:	d8e3      	bhi.n	8003122 <Handle_USBAsynchXfer+0x2a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 800315a:	18f1      	adds	r1, r6, r3
 800315c:	6029      	str	r1, [r5, #0]
      USART_Rx_length = 0;
 800315e:	2500      	movs	r5, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 8003160:	b2b6      	uxth	r6, r6
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8003162:	6015      	str	r5, [r2, #0]
 8003164:	e7e2      	b.n	800312c <Handle_USBAsynchXfer+0x34>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8003166:	4907      	ldr	r1, [pc, #28]	; (8003184 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8003168:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800316a:	6809      	ldr	r1, [r1, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 800316c:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800316e:	b109      	cbz	r1, 8003174 <Handle_USBAsynchXfer+0x7c>
 8003170:	4603      	mov	r3, r0
 8003172:	e7d1      	b.n	8003118 <Handle_USBAsynchXfer+0x20>
    {
      USB_Tx_State = 0; 
 8003174:	2000      	movs	r0, #0
 8003176:	7020      	strb	r0, [r4, #0]
      return;
 8003178:	bd70      	pop	{r4, r5, r6, pc}
 800317a:	bf00      	nop
 800317c:	200004ac 	.word	0x200004ac
 8003180:	200004b4 	.word	0x200004b4
 8003184:	200004b0 	.word	0x200004b0
 8003188:	200004b8 	.word	0x200004b8
 800318c:	20000df0 	.word	0x20000df0
 8003190:	08003be9 	.word	0x08003be9
 8003194:	08003e99 	.word	0x08003e99
 8003198:	08003d5d 	.word	0x08003d5d

0800319c <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 800319c:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800319e:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80031a2:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80031a6:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80031aa:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80031ae:	6810      	ldr	r0, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 80031b0:	681a      	ldr	r2, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 80031b2:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 80031b6:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80031ba:	1880      	adds	r0, r0, r2
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 80031bc:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80031be:	d007      	beq.n	80031d0 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 80031c0:	4904      	ldr	r1, [pc, #16]	; (80031d4 <Get_SerialNum+0x38>)
 80031c2:	2208      	movs	r2, #8
 80031c4:	4d04      	ldr	r5, [pc, #16]	; (80031d8 <Get_SerialNum+0x3c>)
 80031c6:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 80031c8:	4620      	mov	r0, r4
 80031ca:	4904      	ldr	r1, [pc, #16]	; (80031dc <Get_SerialNum+0x40>)
 80031cc:	2204      	movs	r2, #4
 80031ce:	47a8      	blx	r5
 80031d0:	bd38      	pop	{r3, r4, r5, pc}
 80031d2:	bf00      	nop
 80031d4:	2000022e 	.word	0x2000022e
 80031d8:	08002ed1 	.word	0x08002ed1
 80031dc:	2000023e 	.word	0x2000023e

080031e0 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 80031e0:	bf30      	wfi
 80031e2:	4770      	bx	lr

080031e4 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 80031e4:	b508      	push	{r3, lr}
  if (Length == 0)
 80031e6:	b138      	cbz	r0, 80031f8 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <Standard_GetConfiguration+0x20>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	6801      	ldr	r1, [r0, #0]
 80031ee:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_Configuration;
 80031f0:	4a05      	ldr	r2, [pc, #20]	; (8003208 <Standard_GetConfiguration+0x24>)
 80031f2:	6810      	ldr	r0, [r2, #0]
 80031f4:	300a      	adds	r0, #10
}
 80031f6:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <Standard_GetConfiguration+0x24>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8003200:	bd08      	pop	{r3, pc}
 8003202:	bf00      	nop
 8003204:	2000161c 	.word	0x2000161c
 8003208:	20001620 	.word	0x20001620

0800320c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800320c:	b508      	push	{r3, lr}
  if (Length == 0)
 800320e:	b138      	cbz	r0, 8003220 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <Standard_GetInterface+0x20>)
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	6881      	ldr	r1, [r0, #8]
 8003216:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8003218:	4a05      	ldr	r2, [pc, #20]	; (8003230 <Standard_GetInterface+0x24>)
 800321a:	6810      	ldr	r0, [r2, #0]
 800321c:	300c      	adds	r0, #12
}
 800321e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8003220:	4b03      	ldr	r3, [pc, #12]	; (8003230 <Standard_GetInterface+0x24>)
 8003222:	2201      	movs	r2, #1
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8003228:	bd08      	pop	{r3, pc}
 800322a:	bf00      	nop
 800322c:	2000161c 	.word	0x2000161c
 8003230:	20001620 	.word	0x20001620

08003234 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8003234:	b508      	push	{r3, lr}
  if (Length == 0)
 8003236:	2800      	cmp	r0, #0
 8003238:	d03b      	beq.n	80032b2 <Standard_GetStatus+0x7e>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800323a:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <Standard_GetStatus+0x94>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800323c:	4823      	ldr	r0, [pc, #140]	; (80032cc <Standard_GetStatus+0x98>)
 800323e:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003240:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8003242:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003244:	7813      	ldrb	r3, [r2, #0]
 8003246:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800324a:	d112      	bne.n	8003272 <Standard_GetStatus+0x3e>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 800324c:	7a53      	ldrb	r3, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800324e:	f003 0220 	and.w	r2, r3, #32
 8003252:	b2d1      	uxtb	r1, r2
 8003254:	bb59      	cbnz	r1, 80032ae <Standard_GetStatus+0x7a>
 8003256:	7802      	ldrb	r2, [r0, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	b2d9      	uxtb	r1, r3
 800325e:	b311      	cbz	r1, 80032a6 <Standard_GetStatus+0x72>
    {
      SetBit(StatusInfo0, 0);
 8003260:	f042 0301 	orr.w	r3, r2, #1
 8003264:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8003266:	481a      	ldr	r0, [pc, #104]	; (80032d0 <Standard_GetStatus+0x9c>)
 8003268:	6801      	ldr	r1, [r0, #0]
 800326a:	690a      	ldr	r2, [r1, #16]
 800326c:	4790      	blx	r2
  return (uint8_t *)&StatusInfo;
 800326e:	4817      	ldr	r0, [pc, #92]	; (80032cc <Standard_GetStatus+0x98>)
 8003270:	bd08      	pop	{r3, pc}
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8003272:	2b01      	cmp	r3, #1
 8003274:	d016      	beq.n	80032a4 <Standard_GetStatus+0x70>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8003276:	2b02      	cmp	r3, #2
 8003278:	d113      	bne.n	80032a2 <Standard_GetStatus+0x6e>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800327a:	7951      	ldrb	r1, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 800327c:	f001 020f 	and.w	r2, r1, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8003280:	0093      	lsls	r3, r2, #2
 8003282:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8003286:	f502 43b8 	add.w	r3, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800328a:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800328e:	6819      	ldr	r1, [r3, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8003290:	d114      	bne.n	80032bc <Standard_GetStatus+0x88>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8003292:	f401 5240 	and.w	r2, r1, #12288	; 0x3000
 8003296:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800329a:	d1e4      	bne.n	8003266 <Standard_GetStatus+0x32>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 800329c:	2101      	movs	r1, #1
 800329e:	7001      	strb	r1, [r0, #0]
 80032a0:	e7e1      	b.n	8003266 <Standard_GetStatus+0x32>
    }

  }
  else
  {
    return NULL;
 80032a2:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 80032a4:	bd08      	pop	{r3, pc}
    {
      SetBit(StatusInfo0, 0);
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	7002      	strb	r2, [r0, #0]
 80032ac:	e7db      	b.n	8003266 <Standard_GetStatus+0x32>
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 80032ae:	2202      	movs	r2, #2
 80032b0:	e7d2      	b.n	8003258 <Standard_GetStatus+0x24>
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <Standard_GetStatus+0x94>)
 80032b4:	2202      	movs	r2, #2
 80032b6:	6819      	ldr	r1, [r3, #0]
 80032b8:	820a      	strh	r2, [r1, #16]
    return 0;
 80032ba:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80032bc:	f001 0330 	and.w	r3, r1, #48	; 0x30
 80032c0:	2b10      	cmp	r3, #16
 80032c2:	d1d0      	bne.n	8003266 <Standard_GetStatus+0x32>
 80032c4:	e7ea      	b.n	800329c <Standard_GetStatus+0x68>
 80032c6:	bf00      	nop
 80032c8:	20001620 	.word	0x20001620
 80032cc:	200015f0 	.word	0x200015f0
 80032d0:	2000161c 	.word	0x2000161c

080032d4 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80032d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80032d8:	4e27      	ldr	r6, [pc, #156]	; (8003378 <DataStageIn+0xa4>)
 80032da:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 80032dc:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 80032de:	7a27      	ldrb	r7, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80032e0:	b923      	cbnz	r3, 80032ec <DataStageIn+0x18>
 80032e2:	2f04      	cmp	r7, #4
 80032e4:	d02a      	beq.n	800333c <DataStageIn+0x68>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80032e6:	8aa5      	ldrh	r5, [r4, #20]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80032e8:	2704      	movs	r7, #4
 80032ea:	e003      	b.n	80032f4 <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80032ec:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 80032ee:	42ab      	cmp	r3, r5
 80032f0:	d9fa      	bls.n	80032e8 <DataStageIn+0x14>
 80032f2:	2702      	movs	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80032f4:	429d      	cmp	r5, r3
 80032f6:	bf28      	it	cs
 80032f8:	461d      	movcs	r5, r3
 80032fa:	69a1      	ldr	r1, [r4, #24]
 80032fc:	4628      	mov	r0, r5
 80032fe:	4788      	blx	r1
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8003300:	4a1e      	ldr	r2, [pc, #120]	; (800337c <DataStageIn+0xa8>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8003302:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8003304:	2000      	movs	r0, #0
 8003306:	4790      	blx	r2
 8003308:	462a      	mov	r2, r5
 800330a:	4601      	mov	r1, r0
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <DataStageIn+0xac>)
 800330e:	4640      	mov	r0, r8
 8003310:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8003312:	4629      	mov	r1, r5
 8003314:	2000      	movs	r0, #0
 8003316:	4a1b      	ldr	r2, [pc, #108]	; (8003384 <DataStageIn+0xb0>)
 8003318:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 800331a:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800331c:	8a61      	ldrh	r1, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800331e:	1b43      	subs	r3, r0, r5
 8003320:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8003322:	186d      	adds	r5, r5, r1
  vSetEPTxStatus(EP_TX_VALID);
 8003324:	4818      	ldr	r0, [pc, #96]	; (8003388 <DataStageIn+0xb4>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8003326:	4b19      	ldr	r3, [pc, #100]	; (800338c <DataStageIn+0xb8>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8003328:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 800332a:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800332c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003330:	6834      	ldr	r4, [r6, #0]

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8003332:	8002      	strh	r2, [r0, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8003334:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8003336:	7227      	strb	r7, [r4, #8]
 8003338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 800333c:	4a14      	ldr	r2, [pc, #80]	; (8003390 <DataStageIn+0xbc>)
 800333e:	7810      	ldrb	r0, [r2, #0]
 8003340:	2801      	cmp	r0, #1
 8003342:	d006      	beq.n	8003352 <DataStageIn+0x7e>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8003344:	4910      	ldr	r1, [pc, #64]	; (8003388 <DataStageIn+0xb4>)
 8003346:	2710      	movs	r7, #16
 8003348:	800f      	strh	r7, [r1, #0]
 800334a:	2707      	movs	r7, #7
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800334c:	7227      	strb	r7, [r4, #8]
 800334e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8003352:	f645 4050 	movw	r0, #23632	; 0x5c50
 8003356:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800335a:	6800      	ldr	r0, [r0, #0]
 800335c:	f243 0102 	movw	r1, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8003360:	b280      	uxth	r0, r0
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8003362:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003366:	1841      	adds	r1, r0, r1
 8003368:	0048      	lsls	r0, r1, #1
 800336a:	4907      	ldr	r1, [pc, #28]	; (8003388 <DataStageIn+0xb4>)
 800336c:	6003      	str	r3, [r0, #0]
 800336e:	2030      	movs	r0, #48	; 0x30
 8003370:	8008      	strh	r0, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8003372:	7013      	strb	r3, [r2, #0]
 8003374:	e7df      	b.n	8003336 <DataStageIn+0x62>
 8003376:	bf00      	nop
 8003378:	20001620 	.word	0x20001620
 800337c:	08003e59 	.word	0x08003e59
 8003380:	08003be9 	.word	0x08003be9
 8003384:	08003e99 	.word	0x08003e99
 8003388:	20001628 	.word	0x20001628
 800338c:	20001626 	.word	0x20001626
 8003390:	200004bc 	.word	0x200004bc

08003394 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8003394:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <Standard_SetConfiguration+0x30>)
 8003398:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <Standard_SetConfiguration+0x34>)
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	7851      	ldrb	r1, [r2, #1]
 800339e:	78c3      	ldrb	r3, [r0, #3]
 80033a0:	4299      	cmp	r1, r3
 80033a2:	d201      	bcs.n	80033a8 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 80033a4:	2002      	movs	r0, #2
  }
}
 80033a6:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80033a8:	7882      	ldrb	r2, [r0, #2]
 80033aa:	2a00      	cmp	r2, #0
 80033ac:	d1fa      	bne.n	80033a4 <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 80033ae:	8884      	ldrh	r4, [r0, #4]
 80033b0:	2c00      	cmp	r4, #0
 80033b2:	d1f7      	bne.n	80033a4 <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 80033b4:	7283      	strb	r3, [r0, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 80033b6:	4805      	ldr	r0, [pc, #20]	; (80033cc <Standard_SetConfiguration+0x38>)
 80033b8:	6801      	ldr	r1, [r0, #0]
 80033ba:	684b      	ldr	r3, [r1, #4]
 80033bc:	4798      	blx	r3
    return USB_SUCCESS;
 80033be:	4620      	mov	r0, r4
 80033c0:	bd10      	pop	{r4, pc}
 80033c2:	bf00      	nop
 80033c4:	20001620 	.word	0x20001620
 80033c8:	2000030c 	.word	0x2000030c
 80033cc:	2000161c 	.word	0x2000161c

080033d0 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 80033d0:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <Standard_SetInterface+0x44>)
 80033d4:	4c10      	ldr	r4, [pc, #64]	; (8003418 <Standard_SetInterface+0x48>)
 80033d6:	6811      	ldr	r1, [r2, #0]
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	698a      	ldr	r2, [r1, #24]
 80033dc:	7958      	ldrb	r0, [r3, #5]
 80033de:	78d9      	ldrb	r1, [r3, #3]
 80033e0:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	7a99      	ldrb	r1, [r3, #10]
 80033e6:	b909      	cbnz	r1, 80033ec <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 80033e8:	2002      	movs	r0, #2
}
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d1fb      	bne.n	80033e8 <Standard_SetInterface+0x18>
 80033f0:	7918      	ldrb	r0, [r3, #4]
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d1f8      	bne.n	80033e8 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 80033f6:	789d      	ldrb	r5, [r3, #2]
 80033f8:	2d00      	cmp	r5, #0
 80033fa:	d1f5      	bne.n	80033e8 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <Standard_SetInterface+0x4c>)
 80033fe:	6813      	ldr	r3, [r2, #0]
 8003400:	68d9      	ldr	r1, [r3, #12]
 8003402:	4788      	blx	r1
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003404:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8003406:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003408:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800340a:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800340c:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800340e:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8003410:	bd38      	pop	{r3, r4, r5, pc}
 8003412:	bf00      	nop
 8003414:	200015f8 	.word	0x200015f8
 8003418:	20001620 	.word	0x20001620
 800341c:	2000161c 	.word	0x2000161c

08003420 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8003420:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8003422:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <Standard_ClearFeature+0xd8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003428:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800342c:	d003      	beq.n	8003436 <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800342e:	2802      	cmp	r0, #2
 8003430:	d006      	beq.n	8003440 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 8003432:	2002      	movs	r0, #2
}
 8003434:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8003436:	7a59      	ldrb	r1, [r3, #9]
 8003438:	f021 0220 	bic.w	r2, r1, #32
 800343c:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800343e:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8003440:	885a      	ldrh	r2, [r3, #2]
 8003442:	2a00      	cmp	r2, #0
 8003444:	d1f6      	bne.n	8003434 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8003446:	7919      	ldrb	r1, [r3, #4]
 8003448:	2900      	cmp	r1, #0
 800344a:	d1f3      	bne.n	8003434 <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 800344c:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 800344e:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8003452:	0081      	lsls	r1, r0, #2
 8003454:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8003458:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800345a:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800345e:	bf56      	itet	pl
 8003460:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8003462:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8003464:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8003468:	4c24      	ldr	r4, [pc, #144]	; (80034fc <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800346a:	bf48      	it	mi
 800346c:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8003470:	7824      	ldrb	r4, [r4, #0]
 8003472:	42a0      	cmp	r0, r4
 8003474:	d2dd      	bcs.n	8003432 <Standard_ClearFeature+0x12>
 8003476:	2d00      	cmp	r5, #0
 8003478:	d0db      	beq.n	8003432 <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 800347a:	7a9b      	ldrb	r3, [r3, #10]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0d8      	beq.n	8003432 <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8003480:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003484:	b2d3      	uxtb	r3, r2
 8003486:	b173      	cbz	r3, 80034a6 <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8003488:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800348c:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 8003490:	6813      	ldr	r3, [r2, #0]
 8003492:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8003496:	2910      	cmp	r1, #16
 8003498:	d021      	beq.n	80034de <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800349a:	4819      	ldr	r0, [pc, #100]	; (8003500 <Standard_ClearFeature+0xe0>)
 800349c:	6801      	ldr	r1, [r0, #0]
 800349e:	694a      	ldr	r2, [r1, #20]
 80034a0:	4790      	blx	r2
    return USB_SUCCESS;
 80034a2:	2000      	movs	r0, #0
 80034a4:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80034a6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80034aa:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 80034ae:	6822      	ldr	r2, [r4, #0]
 80034b0:	f402 5340 	and.w	r3, r2, #12288	; 0x3000
 80034b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b8:	d1ef      	bne.n	800349a <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 80034ba:	b9c8      	cbnz	r0, 80034f0 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 80034bc:	4a11      	ldr	r2, [pc, #68]	; (8003504 <Standard_ClearFeature+0xe4>)
 80034be:	4b12      	ldr	r3, [pc, #72]	; (8003508 <Standard_ClearFeature+0xe8>)
 80034c0:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 80034c4:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 80034c6:	6820      	ldr	r0, [r4, #0]
 80034c8:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 80034cc:	4001      	ands	r1, r0
 80034ce:	f481 5240 	eor.w	r2, r1, #12288	; 0x3000
 80034d2:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80034d6:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 80034da:	6020      	str	r0, [r4, #0]
 80034dc:	e7dd      	b.n	800349a <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 80034de:	b2c4      	uxtb	r4, r0
 80034e0:	4620      	mov	r0, r4
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <Standard_ClearFeature+0xec>)
 80034e4:	4790      	blx	r2
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 80034e6:	4620      	mov	r0, r4
 80034e8:	2130      	movs	r1, #48	; 0x30
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <Standard_ClearFeature+0xf0>)
 80034ec:	4798      	blx	r3
 80034ee:	e7d4      	b.n	800349a <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 80034f0:	4908      	ldr	r1, [pc, #32]	; (8003514 <Standard_ClearFeature+0xf4>)
 80034f2:	4788      	blx	r1
 80034f4:	e7e7      	b.n	80034c6 <Standard_ClearFeature+0xa6>
 80034f6:	bf00      	nop
 80034f8:	20001620 	.word	0x20001620
 80034fc:	2000030c 	.word	0x2000030c
 8003500:	2000161c 	.word	0x2000161c
 8003504:	20000288 	.word	0x20000288
 8003508:	08003eb9 	.word	0x08003eb9
 800350c:	08003de9 	.word	0x08003de9
 8003510:	08003cdd 	.word	0x08003cdd
 8003514:	08003dc5 	.word	0x08003dc5

08003518 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8003518:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800351a:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <Standard_SetEndPointFeature+0x8c>)
 800351c:	6819      	ldr	r1, [r3, #0]
 800351e:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 8003520:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8003524:	0090      	lsls	r0, r2, #2
 8003526:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 800352a:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800352c:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8003530:	bf56      	itet	pl
 8003532:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8003534:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8003536:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800353a:	4c1b      	ldr	r4, [pc, #108]	; (80035a8 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800353c:	bf48      	it	mi
 800353e:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8003542:	7824      	ldrb	r4, [r4, #0]
 8003544:	42a2      	cmp	r2, r4
 8003546:	d301      	bcc.n	800354c <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8003548:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 800354a:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 800354c:	884a      	ldrh	r2, [r1, #2]
 800354e:	2a00      	cmp	r2, #0
 8003550:	d1fa      	bne.n	8003548 <Standard_SetEndPointFeature+0x30>
 8003552:	2d00      	cmp	r5, #0
 8003554:	d0f8      	beq.n	8003548 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 8003556:	7a89      	ldrb	r1, [r1, #10]
 8003558:	2900      	cmp	r1, #0
 800355a:	d0f5      	beq.n	8003548 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800355c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8003560:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003564:	f500 42b8 	add.w	r2, r0, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8003568:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800356a:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800356c:	b17b      	cbz	r3, 800358e <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800356e:	f648 70bf 	movw	r0, #36799	; 0x8fbf
 8003572:	4008      	ands	r0, r1
 8003574:	f080 0110 	eor.w	r1, r0, #16
 8003578:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 800357c:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8003580:	6010      	str	r0, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <Standard_SetEndPointFeature+0x94>)
 8003584:	6811      	ldr	r1, [r2, #0]
 8003586:	698b      	ldr	r3, [r1, #24]
 8003588:	4798      	blx	r3
  return USB_SUCCESS;
 800358a:	2000      	movs	r0, #0
 800358c:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800358e:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8003592:	400b      	ands	r3, r1
 8003594:	f483 5080 	eor.w	r0, r3, #4096	; 0x1000
 8003598:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 800359c:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e7ee      	b.n	8003582 <Standard_SetEndPointFeature+0x6a>
 80035a4:	20001620 	.word	0x20001620
 80035a8:	2000030c 	.word	0x2000030c
 80035ac:	2000161c 	.word	0x2000161c

080035b0 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <Standard_GetDescriptorData+0x18>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 80035b6:	b110      	cbz	r0, 80035be <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 80035b8:	6808      	ldr	r0, [r1, #0]
 80035ba:	1880      	adds	r0, r0, r2
}
 80035bc:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 80035be:	8889      	ldrh	r1, [r1, #4]
 80035c0:	1a8a      	subs	r2, r1, r2
 80035c2:	821a      	strh	r2, [r3, #16]
    return 0;
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20001620 	.word	0x20001620

080035cc <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 80035cc:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80035ce:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <Post0_Process+0x34>)
 80035d0:	2000      	movs	r0, #0
 80035d2:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80035d6:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <Post0_Process+0x38>)
 80035d8:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 80035da:	480b      	ldr	r0, [pc, #44]	; (8003608 <Post0_Process+0x3c>)
 80035dc:	6801      	ldr	r1, [r0, #0]
 80035de:	7a08      	ldrb	r0, [r1, #8]
 80035e0:	2808      	cmp	r0, #8
 80035e2:	d106      	bne.n	80035f2 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <Post0_Process+0x40>)
 80035e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035ea:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 80035ec:	4a08      	ldr	r2, [pc, #32]	; (8003610 <Post0_Process+0x44>)
 80035ee:	2110      	movs	r1, #16
 80035f0:	8011      	strh	r1, [r2, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 80035f2:	f1b0 0c09 	subs.w	ip, r0, #9
 80035f6:	f1dc 0000 	rsbs	r0, ip, #0
 80035fa:	eb50 000c 	adcs.w	r0, r0, ip
 80035fe:	bd08      	pop	{r3, pc}
 8003600:	20000288 	.word	0x20000288
 8003604:	08003eb9 	.word	0x08003eb9
 8003608:	20001620 	.word	0x20001620
 800360c:	20001626 	.word	0x20001626
 8003610:	20001628 	.word	0x20001628

08003614 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 8003616:	4d33      	ldr	r5, [pc, #204]	; (80036e4 <Out0_Process+0xd0>)
 8003618:	682c      	ldr	r4, [r5, #0]
 800361a:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800361c:	2b02      	cmp	r3, #2
 800361e:	d007      	beq.n	8003630 <Out0_Process+0x1c>
 8003620:	2b04      	cmp	r3, #4
 8003622:	d005      	beq.n	8003630 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8003624:	2b03      	cmp	r3, #3
 8003626:	d008      	beq.n	800363a <Out0_Process+0x26>
 8003628:	2b05      	cmp	r3, #5
 800362a:	d006      	beq.n	800363a <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 800362c:	2b07      	cmp	r3, #7
 800362e:	d00d      	beq.n	800364c <Out0_Process+0x38>
 8003630:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8003632:	7222      	strb	r2, [r4, #8]

  return Post0_Process();
 8003634:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <Out0_Process+0xd4>)
 8003636:	4798      	blx	r3
 8003638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 800363a:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 800363c:	8a20      	ldrh	r0, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 800363e:	b311      	cbz	r1, 8003686 <Out0_Process+0x72>
 8003640:	b958      	cbnz	r0, 800365a <Out0_Process+0x46>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8003642:	8aa4      	ldrh	r4, [r4, #20]
 8003644:	2c00      	cmp	r4, #0
 8003646:	d045      	beq.n	80036d4 <Out0_Process+0xc0>
 8003648:	4a28      	ldr	r2, [pc, #160]	; (80036ec <Out0_Process+0xd8>)
 800364a:	e02e      	b.n	80036aa <Out0_Process+0x96>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 800364c:	4828      	ldr	r0, [pc, #160]	; (80036f0 <Out0_Process+0xdc>)
 800364e:	6801      	ldr	r1, [r0, #0]
 8003650:	68ca      	ldr	r2, [r1, #12]
 8003652:	4790      	blx	r2
 8003654:	682c      	ldr	r4, [r5, #0]
 8003656:	2208      	movs	r2, #8
 8003658:	e7eb      	b.n	8003632 <Out0_Process+0x1e>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 800365a:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800365c:	4286      	cmp	r6, r0
 800365e:	bf28      	it	cs
 8003660:	4606      	movcs	r6, r0
 8003662:	4630      	mov	r0, r6
 8003664:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8003666:	8a63      	ldrh	r3, [r4, #18]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8003668:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800366a:	8a20      	ldrh	r0, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800366c:	18f1      	adds	r1, r6, r3
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 800366e:	1b82      	subs	r2, r0, r6
 8003670:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8003672:	8261      	strh	r1, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8003674:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <Out0_Process+0xe0>)
 8003676:	2000      	movs	r0, #0
 8003678:	4798      	blx	r3
 800367a:	4632      	mov	r2, r6
 800367c:	4601      	mov	r1, r0
 800367e:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <Out0_Process+0xe4>)
 8003680:	4638      	mov	r0, r7
 8003682:	4798      	blx	r3
 8003684:	8a20      	ldrh	r0, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8003686:	2800      	cmp	r0, #0
 8003688:	d0db      	beq.n	8003642 <Out0_Process+0x2e>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800368a:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <Out0_Process+0xe8>)
    SetEPTxCount(ENDP0, 0);
 800368c:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800368e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8003692:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8003694:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8003696:	4a1a      	ldr	r2, [pc, #104]	; (8003700 <Out0_Process+0xec>)
 8003698:	4790      	blx	r2
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800369a:	8a23      	ldrh	r3, [r4, #16]
 800369c:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800369e:	4a13      	ldr	r2, [pc, #76]	; (80036ec <Out0_Process+0xd8>)
 80036a0:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80036a2:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80036a4:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80036a6:	d915      	bls.n	80036d4 <Out0_Process+0xc0>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 80036a8:	b9c3      	cbnz	r3, 80036dc <Out0_Process+0xc8>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80036aa:	682c      	ldr	r4, [r5, #0]
 80036ac:	2106      	movs	r1, #6
      USB_StatusIn();
 80036ae:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80036b2:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 80036b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80036be:	b281      	uxth	r1, r0
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 80036c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036c4:	18c8      	adds	r0, r1, r3
 80036c6:	0043      	lsls	r3, r0, #1
 80036c8:	2100      	movs	r1, #0
 80036ca:	6019      	str	r1, [r3, #0]
 80036cc:	2030      	movs	r0, #48	; 0x30
 80036ce:	8010      	strh	r0, [r2, #0]
 80036d0:	7a22      	ldrb	r2, [r4, #8]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 80036d2:	e7ae      	b.n	8003632 <Out0_Process+0x1e>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 80036d4:	682c      	ldr	r4, [r5, #0]
 80036d6:	2203      	movs	r2, #3
 80036d8:	7222      	strb	r2, [r4, #8]
 80036da:	e7aa      	b.n	8003632 <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 80036dc:	682c      	ldr	r4, [r5, #0]
 80036de:	2205      	movs	r2, #5
 80036e0:	7222      	strb	r2, [r4, #8]
 80036e2:	e7a6      	b.n	8003632 <Out0_Process+0x1e>
 80036e4:	20001620 	.word	0x20001620
 80036e8:	080035cd 	.word	0x080035cd
 80036ec:	20001628 	.word	0x20001628
 80036f0:	200015f8 	.word	0x200015f8
 80036f4:	08003e79 	.word	0x08003e79
 80036f8:	08003c61 	.word	0x08003c61
 80036fc:	20001626 	.word	0x20001626
 8003700:	08003e99 	.word	0x08003e99

08003704 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8003704:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003706:	f645 4350 	movw	r3, #23632	; 0x5c50

  if (pInformation->ControlState != PAUSE)
 800370a:	4d9e      	ldr	r5, [pc, #632]	; (8003984 <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800370c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003710:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8003712:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003714:	f243 0004 	movw	r0, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8003718:	b291      	uxth	r1, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800371a:	f2c2 0000 	movt	r0, #8192	; 0x2000

  if (pInformation->ControlState != PAUSE)
 800371e:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003720:	180e      	adds	r6, r1, r0
 8003722:	0073      	lsls	r3, r6, #1

  if (pInformation->ControlState != PAUSE)
 8003724:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8003726:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003728:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800372a:	d044      	beq.n	80037b6 <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800372c:	b2b7      	uxth	r7, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800372e:	0078      	lsls	r0, r7, #1
 8003730:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 8003734:	f501 46c0 	add.w	r6, r1, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8003738:	7832      	ldrb	r2, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800373a:	4f93      	ldr	r7, [pc, #588]	; (8003988 <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800373c:	7022      	strb	r2, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800373e:	7873      	ldrb	r3, [r6, #1]
 8003740:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8003742:	88b0      	ldrh	r0, [r6, #4]
 8003744:	47b8      	blx	r7
 8003746:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8003748:	8930      	ldrh	r0, [r6, #8]
 800374a:	682c      	ldr	r4, [r5, #0]
 800374c:	47b8      	blx	r7
 800374e:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8003750:	89b0      	ldrh	r0, [r6, #12]
 8003752:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 8003754:	2101      	movs	r1, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8003756:	80e0      	strh	r0, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8003758:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 800375a:	2800      	cmp	r0, #0
 800375c:	d030      	beq.n	80037c0 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 800375e:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8003760:	2906      	cmp	r1, #6
 8003762:	f000 8087 	beq.w	8003874 <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8003766:	2900      	cmp	r1, #0
 8003768:	d15e      	bne.n	8003828 <Setup0_Process+0x124>
 800376a:	8863      	ldrh	r3, [r4, #2]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8094 	beq.w	800389a <Setup0_Process+0x196>
 8003772:	4e86      	ldr	r6, [pc, #536]	; (800398c <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8003774:	6833      	ldr	r3, [r6, #0]
 8003776:	4608      	mov	r0, r1
 8003778:	6919      	ldr	r1, [r3, #16]
 800377a:	4788      	blx	r1
    if (Result == USB_NOT_READY)
 800377c:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 800377e:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 8003780:	d062      	beq.n	8003848 <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8003782:	8a1a      	ldrh	r2, [r3, #16]
 8003784:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003788:	428a      	cmp	r2, r1
 800378a:	d05d      	beq.n	8003848 <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800378c:	2802      	cmp	r0, #2
 800378e:	d00c      	beq.n	80037aa <Setup0_Process+0xa6>
 8003790:	b15a      	cbz	r2, 80037aa <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8003792:	f993 1000 	ldrsb.w	r1, [r3]
 8003796:	2900      	cmp	r1, #0
 8003798:	f2c0 80b5 	blt.w	8003906 <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 800379c:	2203      	movs	r2, #3
 800379e:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 80037a0:	4b7b      	ldr	r3, [pc, #492]	; (8003990 <Setup0_Process+0x28c>)
 80037a2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80037a6:	8018      	strh	r0, [r3, #0]
 80037a8:	e001      	b.n	80037ae <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80037aa:	2008      	movs	r0, #8
 80037ac:	7218      	strb	r0, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 80037ae:	4b79      	ldr	r3, [pc, #484]	; (8003994 <Setup0_Process+0x290>)
 80037b0:	4798      	blx	r3
}
 80037b2:	b003      	add	sp, #12
 80037b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b6:	88e0      	ldrh	r0, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 80037b8:	2101      	movs	r1, #1
 80037ba:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 80037bc:	2800      	cmp	r0, #0
 80037be:	d1ce      	bne.n	800375e <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80037c0:	7822      	ldrb	r2, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 80037c2:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80037c4:	f012 037f 	ands.w	r3, r2, #127	; 0x7f
 80037c8:	d141      	bne.n	800384e <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 80037ca:	2e09      	cmp	r6, #9
 80037cc:	f000 8108 	beq.w	80039e0 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 80037d0:	2e05      	cmp	r6, #5
 80037d2:	f000 80bf 	beq.w	8003954 <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 80037d6:	2e03      	cmp	r6, #3
 80037d8:	f000 80f0 	beq.w	80039bc <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 80037dc:	2e01      	cmp	r6, #1
 80037de:	d13b      	bne.n	8003858 <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 80037e0:	78e1      	ldrb	r1, [r4, #3]
 80037e2:	2901      	cmp	r1, #1
 80037e4:	d138      	bne.n	8003858 <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 80037e6:	88a2      	ldrh	r2, [r4, #4]
 80037e8:	2a00      	cmp	r2, #0
 80037ea:	d135      	bne.n	8003858 <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 80037ec:	7a63      	ldrb	r3, [r4, #9]
 80037ee:	f003 0420 	and.w	r4, r3, #32
 80037f2:	b2e0      	uxtb	r0, r4
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d02f      	beq.n	8003858 <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 80037f8:	4967      	ldr	r1, [pc, #412]	; (8003998 <Setup0_Process+0x294>)
 80037fa:	4788      	blx	r1
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 80037fc:	bb60      	cbnz	r0, 8003858 <Setup0_Process+0x154>
 80037fe:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8003800:	f645 4050 	movw	r0, #23632	; 0x5c50
 8003804:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003808:	6801      	ldr	r1, [r0, #0]
 800380a:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800380e:	b28a      	uxth	r2, r1
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8003810:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003814:	18d0      	adds	r0, r2, r3
 8003816:	0041      	lsls	r1, r0, #1
 8003818:	2300      	movs	r3, #0
 800381a:	4a60      	ldr	r2, [pc, #384]	; (800399c <Setup0_Process+0x298>)
 800381c:	600b      	str	r3, [r1, #0]
 800381e:	2030      	movs	r0, #48	; 0x30
 8003820:	2106      	movs	r1, #6
 8003822:	8010      	strh	r0, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8003824:	7221      	strb	r1, [r4, #8]
 8003826:	e7c2      	b.n	80037ae <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8003828:	2908      	cmp	r1, #8
 800382a:	d148      	bne.n	80038be <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800382c:	7820      	ldrb	r0, [r4, #0]
 800382e:	0643      	lsls	r3, r0, #25
 8003830:	d19f      	bne.n	8003772 <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 8003832:	4a5b      	ldr	r2, [pc, #364]	; (80039a0 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8003834:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8003836:	61a2      	str	r2, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8003838:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 800383a:	4790      	blx	r2
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800383c:	682b      	ldr	r3, [r5, #0]
 800383e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003842:	8a1a      	ldrh	r2, [r3, #16]
 8003844:	4282      	cmp	r2, r0
 8003846:	d1a3      	bne.n	8003790 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8003848:	2109      	movs	r1, #9
 800384a:	7219      	strb	r1, [r3, #8]
 800384c:	e7af      	b.n	80037ae <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800384e:	2b01      	cmp	r3, #1
 8003850:	d071      	beq.n	8003936 <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8003852:	2b02      	cmp	r3, #2
 8003854:	f000 808d 	beq.w	8003972 <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8003858:	494c      	ldr	r1, [pc, #304]	; (800398c <Setup0_Process+0x288>)
 800385a:	4630      	mov	r0, r6
 800385c:	680a      	ldr	r2, [r1, #0]
 800385e:	6953      	ldr	r3, [r2, #20]
 8003860:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8003862:	2803      	cmp	r0, #3
 8003864:	f000 80c5 	beq.w	80039f2 <Setup0_Process+0x2ee>
 8003868:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800386a:	2800      	cmp	r0, #0
 800386c:	d0c8      	beq.n	8003800 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 800386e:	2108      	movs	r1, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8003870:	7221      	strb	r1, [r4, #8]
 8003872:	e79c      	b.n	80037ae <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003874:	7826      	ldrb	r6, [r4, #0]
 8003876:	0673      	lsls	r3, r6, #25
 8003878:	f47f af7b 	bne.w	8003772 <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 800387c:	78a2      	ldrb	r2, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800387e:	4e43      	ldr	r6, [pc, #268]	; (800398c <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 8003880:	2a01      	cmp	r2, #1
 8003882:	f000 80b0 	beq.w	80039e6 <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8003886:	2a02      	cmp	r2, #2
 8003888:	d05e      	beq.n	8003948 <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 800388a:	2a03      	cmp	r2, #3
 800388c:	f47f af72 	bne.w	8003774 <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8003890:	6830      	ldr	r0, [r6, #0]
 8003892:	6a42      	ldr	r2, [r0, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8003894:	2a00      	cmp	r2, #0
 8003896:	d1cd      	bne.n	8003834 <Setup0_Process+0x130>
 8003898:	e76c      	b.n	8003774 <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 800389a:	6860      	ldr	r0, [r4, #4]
 800389c:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 80038a0:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80038a4:	f47f af65 	bne.w	8003772 <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80038a8:	7823      	ldrb	r3, [r4, #0]
 80038aa:	f013 007f 	ands.w	r0, r3, #127	; 0x7f
 80038ae:	f040 80a4 	bne.w	80039fa <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 80038b2:	88a3      	ldrh	r3, [r4, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f47f af5c 	bne.w	8003772 <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 80038ba:	4a3a      	ldr	r2, [pc, #232]	; (80039a4 <Setup0_Process+0x2a0>)
 80038bc:	e7ba      	b.n	8003834 <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 80038be:	290a      	cmp	r1, #10
 80038c0:	f47f af57 	bne.w	8003772 <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80038c4:	7826      	ldrb	r6, [r4, #0]
 80038c6:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 80038ca:	2a01      	cmp	r2, #1
 80038cc:	f47f af51 	bne.w	8003772 <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 80038d0:	7aa3      	ldrb	r3, [r4, #10]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f43f af4d 	beq.w	8003772 <Setup0_Process+0x6e>
 80038d8:	8863      	ldrh	r3, [r4, #2]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f47f af49 	bne.w	8003772 <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 80038e0:	6860      	ldr	r0, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 80038e2:	4e2a      	ldr	r6, [pc, #168]	; (800398c <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 80038e4:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 80038e8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80038ec:	f47f af42 	bne.w	8003774 <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 80038f0:	6832      	ldr	r2, [r6, #0]
 80038f2:	4619      	mov	r1, r3
 80038f4:	7960      	ldrb	r0, [r4, #5]
 80038f6:	6993      	ldr	r3, [r2, #24]
 80038f8:	4798      	blx	r3
 80038fa:	2800      	cmp	r0, #0
 80038fc:	f040 80b8 	bne.w	8003a70 <Setup0_Process+0x36c>
 8003900:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8003902:	4a29      	ldr	r2, [pc, #164]	; (80039a8 <Setup0_Process+0x2a4>)
 8003904:	e796      	b.n	8003834 <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8003906:	88d9      	ldrh	r1, [r3, #6]
 8003908:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800390a:	9801      	ldr	r0, [sp, #4]
 800390c:	4282      	cmp	r2, r0
 800390e:	d817      	bhi.n	8003940 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8003910:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8003912:	491e      	ldr	r1, [pc, #120]	; (800398c <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8003914:	d208      	bcs.n	8003928 <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8003916:	6808      	ldr	r0, [r1, #0]
 8003918:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800391c:	4282      	cmp	r2, r0
 800391e:	f080 808f 	bcs.w	8003a40 <Setup0_Process+0x33c>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8003922:	4a22      	ldr	r2, [pc, #136]	; (80039ac <Setup0_Process+0x2a8>)
 8003924:	2000      	movs	r0, #0
 8003926:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8003928:	6809      	ldr	r1, [r1, #0]
 800392a:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 800392e:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8003930:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <Setup0_Process+0x2ac>)
 8003932:	4798      	blx	r3
 8003934:	e73b      	b.n	80037ae <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8003936:	2e0b      	cmp	r6, #11
 8003938:	d18e      	bne.n	8003858 <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 800393a:	481e      	ldr	r0, [pc, #120]	; (80039b4 <Setup0_Process+0x2b0>)
 800393c:	4780      	blx	r0
 800393e:	e75d      	b.n	80037fc <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8003940:	9801      	ldr	r0, [sp, #4]
 8003942:	4912      	ldr	r1, [pc, #72]	; (800398c <Setup0_Process+0x288>)
 8003944:	8218      	strh	r0, [r3, #16]
 8003946:	e7ef      	b.n	8003928 <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8003948:	6833      	ldr	r3, [r6, #0]
 800394a:	6a1a      	ldr	r2, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800394c:	2a00      	cmp	r2, #0
 800394e:	f47f af71 	bne.w	8003834 <Setup0_Process+0x130>
 8003952:	e70f      	b.n	8003774 <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8003954:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8003958:	2800      	cmp	r0, #0
 800395a:	db88      	blt.n	800386e <Setup0_Process+0x16a>
 800395c:	78a1      	ldrb	r1, [r4, #2]
 800395e:	2900      	cmp	r1, #0
 8003960:	d185      	bne.n	800386e <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 8003962:	88a2      	ldrh	r2, [r4, #4]
 8003964:	2a00      	cmp	r2, #0
 8003966:	d182      	bne.n	800386e <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 8003968:	7aa3      	ldrb	r3, [r4, #10]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f43f af48 	beq.w	8003800 <Setup0_Process+0xfc>
 8003970:	e77d      	b.n	800386e <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8003972:	2e01      	cmp	r6, #1
 8003974:	f43f af40 	beq.w	80037f8 <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8003978:	2e03      	cmp	r6, #3
 800397a:	f47f af6d 	bne.w	8003858 <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 800397e:	4c0e      	ldr	r4, [pc, #56]	; (80039b8 <Setup0_Process+0x2b4>)
 8003980:	47a0      	blx	r4
 8003982:	e73b      	b.n	80037fc <Setup0_Process+0xf8>
 8003984:	20001620 	.word	0x20001620
 8003988:	08003f21 	.word	0x08003f21
 800398c:	200015f8 	.word	0x200015f8
 8003990:	20001626 	.word	0x20001626
 8003994:	080035cd 	.word	0x080035cd
 8003998:	08003421 	.word	0x08003421
 800399c:	20001628 	.word	0x20001628
 80039a0:	080031e5 	.word	0x080031e5
 80039a4:	08003235 	.word	0x08003235
 80039a8:	0800320d 	.word	0x0800320d
 80039ac:	200004bc 	.word	0x200004bc
 80039b0:	080032d5 	.word	0x080032d5
 80039b4:	080033d1 	.word	0x080033d1
 80039b8:	08003519 	.word	0x08003519
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 80039bc:	78e2      	ldrb	r2, [r4, #3]
 80039be:	2a01      	cmp	r2, #1
 80039c0:	f47f af4a 	bne.w	8003858 <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 80039c4:	88a3      	ldrh	r3, [r4, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f47f af46 	bne.w	8003858 <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 80039cc:	7a60      	ldrb	r0, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 80039ce:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <Setup0_Process+0x374>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 80039d0:	f040 0120 	orr.w	r1, r0, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 80039d4:	6813      	ldr	r3, [r2, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 80039d6:	7261      	strb	r1, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 80039d8:	69dc      	ldr	r4, [r3, #28]
 80039da:	47a0      	blx	r4
 80039dc:	682c      	ldr	r4, [r5, #0]
 80039de:	e70f      	b.n	8003800 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 80039e0:	4c26      	ldr	r4, [pc, #152]	; (8003a7c <Setup0_Process+0x378>)
 80039e2:	47a0      	blx	r4
 80039e4:	e70a      	b.n	80037fc <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80039e6:	6832      	ldr	r2, [r6, #0]
 80039e8:	69d2      	ldr	r2, [r2, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 80039ea:	2a00      	cmp	r2, #0
 80039ec:	f47f af22 	bne.w	8003834 <Setup0_Process+0x130>
 80039f0:	e6c0      	b.n	8003774 <Setup0_Process+0x70>
 80039f2:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 80039f4:	2109      	movs	r1, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80039f6:	7221      	strb	r1, [r4, #8]
 80039f8:	e6d9      	b.n	80037ae <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80039fa:	2801      	cmp	r0, #1
 80039fc:	d02b      	beq.n	8003a56 <Setup0_Process+0x352>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80039fe:	2802      	cmp	r0, #2
 8003a00:	f47f aeb7 	bne.w	8003772 <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8003a04:	7963      	ldrb	r3, [r4, #5]
 8003a06:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8003a0a:	0096      	lsls	r6, r2, #2
 8003a0c:	f106 4080 	add.w	r0, r6, #1073741824	; 0x40000000
 8003a10:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8003a14:	061e      	lsls	r6, r3, #24
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8003a16:	bf56      	itet	pl
 8003a18:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8003a1a:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8003a1c:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8003a20:	4817      	ldr	r0, [pc, #92]	; (8003a80 <Setup0_Process+0x37c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8003a22:	bf48      	it	mi
 8003a24:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8003a28:	7800      	ldrb	r0, [r0, #0]
 8003a2a:	4282      	cmp	r2, r0
 8003a2c:	f4bf aea1 	bcs.w	8003772 <Setup0_Process+0x6e>
 8003a30:	f013 0f70 	tst.w	r3, #112	; 0x70
 8003a34:	f47f ae9d 	bne.w	8003772 <Setup0_Process+0x6e>
          && (Status != 0))
 8003a38:	2e00      	cmp	r6, #0
 8003a3a:	f47f af3e 	bne.w	80038ba <Setup0_Process+0x1b6>
 8003a3e:	e698      	b.n	8003772 <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8003a40:	fb92 f4f0 	sdiv	r4, r2, r0
 8003a44:	fb00 2214 	mls	r2, r0, r4, r2
 8003a48:	2a00      	cmp	r2, #0
 8003a4a:	f47f af6d 	bne.w	8003928 <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8003a4e:	4a0d      	ldr	r2, [pc, #52]	; (8003a84 <Setup0_Process+0x380>)
 8003a50:	2001      	movs	r0, #1
 8003a52:	7010      	strb	r0, [r2, #0]
 8003a54:	e768      	b.n	8003928 <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8003a56:	4e0c      	ldr	r6, [pc, #48]	; (8003a88 <Setup0_Process+0x384>)
 8003a58:	7960      	ldrb	r0, [r4, #5]
 8003a5a:	6833      	ldr	r3, [r6, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	4790      	blx	r2
 8003a60:	b930      	cbnz	r0, 8003a70 <Setup0_Process+0x36c>
          && (pInformation->Current_Configuration != 0))
 8003a62:	682c      	ldr	r4, [r5, #0]
 8003a64:	7aa0      	ldrb	r0, [r4, #10]
 8003a66:	2800      	cmp	r0, #0
 8003a68:	f47f af27 	bne.w	80038ba <Setup0_Process+0x1b6>
 8003a6c:	7861      	ldrb	r1, [r4, #1]
 8003a6e:	e681      	b.n	8003774 <Setup0_Process+0x70>
 8003a70:	6829      	ldr	r1, [r5, #0]
 8003a72:	7849      	ldrb	r1, [r1, #1]
 8003a74:	e67e      	b.n	8003774 <Setup0_Process+0x70>
 8003a76:	bf00      	nop
 8003a78:	2000161c 	.word	0x2000161c
 8003a7c:	08003395 	.word	0x08003395
 8003a80:	2000030c 	.word	0x2000030c
 8003a84:	200004bc 	.word	0x200004bc
 8003a88:	200015f8 	.word	0x200015f8

08003a8c <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8003a8c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8003a8e:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <SetDeviceAddress+0xa4>)
 8003a90:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003a92:	2e00      	cmp	r6, #0
 8003a94:	d043      	beq.n	8003b1e <SetDeviceAddress+0x92>
 8003a96:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8003a9a:	f2c4 0200 	movt	r2, #16384	; 0x4000
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003a9e:	6814      	ldr	r4, [r2, #0]
 8003aa0:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003aa4:	4021      	ands	r1, r4
 8003aa6:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8003aaa:	f043 0180 	orr.w	r1, r3, #128	; 0x80
 8003aae:	6011      	str	r1, [r2, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	1e74      	subs	r4, r6, #1
 8003ab4:	f645 4304 	movw	r3, #23556	; 0x5c04
 8003ab8:	4296      	cmp	r6, r2
 8003aba:	f004 0401 	and.w	r4, r4, #1
 8003abe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ac2:	d92c      	bls.n	8003b1e <SetDeviceAddress+0x92>
 8003ac4:	b17c      	cbz	r4, 8003ae6 <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003ac6:	6819      	ldr	r1, [r3, #0]
 8003ac8:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003acc:	400a      	ands	r2, r1
 8003ace:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8003ad2:	f041 0281 	orr.w	r2, r1, #129	; 0x81
 8003ad6:	601a      	str	r2, [r3, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f645 4308 	movw	r3, #23560	; 0x5c08
 8003ade:	4296      	cmp	r6, r2
 8003ae0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ae4:	d91b      	bls.n	8003b1e <SetDeviceAddress+0x92>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003ae6:	681f      	ldr	r7, [r3, #0]
 8003ae8:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8003aec:	f640 740f 	movw	r4, #3855	; 0xf0f
 8003af0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003af4:	403c      	ands	r4, r7
 8003af6:	ea45 0704 	orr.w	r7, r5, r4
 8003afa:	4619      	mov	r1, r3
 8003afc:	f841 7b04 	str.w	r7, [r1], #4
 8003b00:	685f      	ldr	r7, [r3, #4]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003b02:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003b04:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8003b08:	f640 740f 	movw	r4, #3855	; 0xf0f
 8003b0c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003b10:	403c      	ands	r4, r7
 8003b12:	432c      	orrs	r4, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003b14:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003b16:	605c      	str	r4, [r3, #4]
 8003b18:	1d0b      	adds	r3, r1, #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003b1a:	4296      	cmp	r6, r2
 8003b1c:	d8e3      	bhi.n	8003ae6 <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8003b1e:	f645 434c 	movw	r3, #23628	; 0x5c4c
 8003b22:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003b26:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b2a:	6018      	str	r0, [r3, #0]
}
 8003b2c:	bcf0      	pop	{r4, r5, r6, r7}
 8003b2e:	4770      	bx	lr
 8003b30:	2000030c 	.word	0x2000030c

08003b34 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8003b34:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8003b36:	4c14      	ldr	r4, [pc, #80]	; (8003b88 <In0_Process+0x54>)
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8003b3c:	2a02      	cmp	r2, #2
 8003b3e:	d012      	beq.n	8003b66 <In0_Process+0x32>
 8003b40:	2a04      	cmp	r2, #4
 8003b42:	d010      	beq.n	8003b66 <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8003b44:	2a06      	cmp	r2, #6
 8003b46:	d004      	beq.n	8003b52 <In0_Process+0x1e>
 8003b48:	2008      	movs	r0, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8003b4a:	7218      	strb	r0, [r3, #8]

  return Post0_Process();
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <In0_Process+0x58>)
 8003b4e:	4798      	blx	r3
}
 8003b50:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8003b52:	7859      	ldrb	r1, [r3, #1]
 8003b54:	2905      	cmp	r1, #5
 8003b56:	d00b      	beq.n	8003b70 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <In0_Process+0x5c>)
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	6881      	ldr	r1, [r0, #8]
 8003b5e:	4788      	blx	r1
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	2008      	movs	r0, #8
 8003b64:	e7f1      	b.n	8003b4a <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8003b66:	4a0b      	ldr	r2, [pc, #44]	; (8003b94 <In0_Process+0x60>)
 8003b68:	4790      	blx	r2
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	7a18      	ldrb	r0, [r3, #8]
 8003b6e:	e7ec      	b.n	8003b4a <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8003b70:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8003b72:	0652      	lsls	r2, r2, #25
 8003b74:	d1f0      	bne.n	8003b58 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8003b76:	78d8      	ldrb	r0, [r3, #3]
 8003b78:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <In0_Process+0x64>)
 8003b7a:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8003b7c:	4807      	ldr	r0, [pc, #28]	; (8003b9c <In0_Process+0x68>)
 8003b7e:	6801      	ldr	r1, [r0, #0]
 8003b80:	6a0a      	ldr	r2, [r1, #32]
 8003b82:	4790      	blx	r2
 8003b84:	e7e8      	b.n	8003b58 <In0_Process+0x24>
 8003b86:	bf00      	nop
 8003b88:	20001620 	.word	0x20001620
 8003b8c:	080035cd 	.word	0x080035cd
 8003b90:	200015f8 	.word	0x200015f8
 8003b94:	080032d5 	.word	0x080032d5
 8003b98:	08003a8d 	.word	0x08003a8d
 8003b9c:	2000161c 	.word	0x2000161c

08003ba0 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop

08003ba4 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8003ba4:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 8003ba6:	f241 6200 	movw	r2, #5632	; 0x1600
 8003baa:	f241 6420 	movw	r4, #5664	; 0x1620
 8003bae:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003bb2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003bb6:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 8003bb8:	2402      	movs	r4, #2
 8003bba:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 8003bbc:	f241 50f8 	movw	r0, #5624	; 0x15f8
 8003bc0:	f240 2388 	movw	r3, #648	; 0x288
  pUser_Standard_Requests = &User_Standard_Requests;
 8003bc4:	f241 611c 	movw	r1, #5660	; 0x161c
 8003bc8:	f240 22b8 	movw	r2, #696	; 0x2b8
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8003bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bd0:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 8003bd4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003bd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8003bdc:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8003bde:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	4780      	blx	r0
 8003be4:	bd10      	pop	{r4, pc}
 8003be6:	bf00      	nop

08003be8 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8003be8:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8003bec:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003bf0:	1c53      	adds	r3, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8003bf2:	004a      	lsls	r2, r1, #1
  for (i = n; i != 0; i--)
 8003bf4:	1059      	asrs	r1, r3, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003bf6:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003bf8:	d02f      	beq.n	8003c5a <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003bfa:	7845      	ldrb	r5, [r0, #1]
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8003bfc:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003bfe:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8003c02:	3901      	subs	r1, #1
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003c04:	ea44 2305 	orr.w	r3, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8003c08:	f822 3b04 	strh.w	r3, [r2], #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	3204      	adds	r2, #4
 8003c10:	f001 0101 	and.w	r1, r1, #1
 8003c14:	3002      	adds	r0, #2
 8003c16:	b303      	cbz	r3, 8003c5a <UserToPMABufferCopy+0x72>
 8003c18:	b159      	cbz	r1, 8003c32 <UserToPMABufferCopy+0x4a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003c1a:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003c1e:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8003c22:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003c24:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8003c28:	f822 1c04 	strh.w	r1, [r2, #-4]
 8003c2c:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	d013      	beq.n	8003c5a <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003c32:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003c36:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8003c3a:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8003c3e:	f822 4c04 	strh.w	r4, [r2, #-4]
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003c42:	7844      	ldrb	r4, [r0, #1]
 8003c44:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003c46:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8003c4a:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003c4c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8003c50:	f822 1b04 	strh.w	r1, [r2], #4
 8003c54:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003c56:	3b02      	subs	r3, #2
 8003c58:	d1eb      	bne.n	8003c32 <UserToPMABufferCopy+0x4a>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8003c5a:	bc30      	pop	{r4, r5}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop

08003c60 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8003c60:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8003c64:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8003c68:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8003c6a:	0059      	lsls	r1, r3, #1
  for (i = n; i != 0; i--)
 8003c6c:	1052      	asrs	r2, r2, #1
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003c6e:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003c70:	d01c      	beq.n	8003cac <PMAToUserBufferCopy+0x4c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003c72:	680b      	ldr	r3, [r1, #0]
 8003c74:	3a01      	subs	r2, #1
 8003c76:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	3002      	adds	r0, #2
 8003c7e:	f002 0201 	and.w	r2, r2, #1
 8003c82:	b19b      	cbz	r3, 8003cac <PMAToUserBufferCopy+0x4c>
 8003c84:	b132      	cbz	r2, 8003c94 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003c86:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8003c8a:	f820 2c02 	strh.w	r2, [r0, #-2]
 8003c8e:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003c90:	3b01      	subs	r3, #1
 8003c92:	d00b      	beq.n	8003cac <PMAToUserBufferCopy+0x4c>
 8003c94:	1d0c      	adds	r4, r1, #4
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003c96:	684d      	ldr	r5, [r1, #4]
 8003c98:	6889      	ldr	r1, [r1, #8]
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	f820 5c02 	strh.w	r5, [r0, #-2]
 8003ca0:	f822 1b02 	strh.w	r1, [r2], #2
 8003ca4:	1c90      	adds	r0, r2, #2
 8003ca6:	1d21      	adds	r1, r4, #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003ca8:	3b02      	subs	r3, #2
 8003caa:	d1f3      	bne.n	8003c94 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8003cac:	bc30      	pop	{r4, r5}
 8003cae:	4770      	bx	lr

08003cb0 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8003cb0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003cb4:	f645 4250 	movw	r2, #23632	; 0x5c50
 8003cb8:	4003      	ands	r3, r0
 8003cba:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop

08003cc4 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8003cc4:	0080      	lsls	r0, r0, #2
 8003cc6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003cca:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8003cce:	6810      	ldr	r0, [r2, #0]
 8003cd0:	f648 138f 	movw	r3, #35215	; 0x898f
 8003cd4:	4003      	ands	r3, r0
 8003cd6:	4319      	orrs	r1, r3
 8003cd8:	6011      	str	r1, [r2, #0]
 8003cda:	4770      	bx	lr

08003cdc <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8003cdc:	0080      	lsls	r0, r0, #2
 8003cde:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003ce2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8003ce6:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8003ce8:	f001 0010 	and.w	r0, r1, #16
 8003cec:	6814      	ldr	r4, [r2, #0]
 8003cee:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8003cf2:	b280      	uxth	r0, r0
 8003cf4:	4023      	ands	r3, r4
 8003cf6:	b968      	cbnz	r0, 8003d14 <SetEPTxStatus+0x38>
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f001 0120 	and.w	r1, r1, #32
 8003cfe:	b288      	uxth	r0, r1
 8003d00:	b108      	cbz	r0, 8003d06 <SetEPTxStatus+0x2a>
 8003d02:	f083 0320 	eor.w	r3, r3, #32
 8003d06:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8003d0a:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8003d0e:	6010      	str	r0, [r2, #0]
}
 8003d10:	bc10      	pop	{r4}
 8003d12:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8003d14:	f083 0310 	eor.w	r3, r3, #16
 8003d18:	e7ef      	b.n	8003cfa <SetEPTxStatus+0x1e>
 8003d1a:	bf00      	nop

08003d1c <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8003d1c:	0080      	lsls	r0, r0, #2
 8003d1e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003d22:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8003d26:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8003d28:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 8003d2c:	6814      	ldr	r4, [r2, #0]
 8003d2e:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8003d32:	b280      	uxth	r0, r0
 8003d34:	4023      	ands	r3, r4
 8003d36:	b968      	cbnz	r0, 8003d54 <SetEPRxStatus+0x38>
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8003d3e:	b288      	uxth	r0, r1
 8003d40:	b108      	cbz	r0, 8003d46 <SetEPRxStatus+0x2a>
 8003d42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d46:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8003d4a:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8003d4e:	6010      	str	r0, [r2, #0]
}
 8003d50:	bc10      	pop	{r4}
 8003d52:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8003d54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d58:	e7ef      	b.n	8003d3a <SetEPRxStatus+0x1e>
 8003d5a:	bf00      	nop

08003d5c <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8003d5c:	0080      	lsls	r0, r0, #2
 8003d5e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003d62:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8003d66:	6801      	ldr	r1, [r0, #0]
 8003d68:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8003d6c:	400b      	ands	r3, r1
 8003d6e:	f083 0230 	eor.w	r2, r3, #48	; 0x30
 8003d72:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8003d76:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8003d7a:	6003      	str	r3, [r0, #0]
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop

08003d80 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8003d80:	0080      	lsls	r0, r0, #2
 8003d82:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003d86:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8003d8a:	6801      	ldr	r1, [r0, #0]
 8003d8c:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8003d90:	400b      	ands	r3, r1
 8003d92:	f483 5240 	eor.w	r2, r3, #12288	; 0x3000
 8003d96:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8003d9a:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8003d9e:	6003      	str	r3, [r0, #0]
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop

08003da4 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8003da4:	0080      	lsls	r0, r0, #2
 8003da6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003daa:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8003dae:	6801      	ldr	r1, [r0, #0]
 8003db0:	f640 630f 	movw	r3, #3599	; 0xe0f
 8003db4:	400b      	ands	r3, r1
 8003db6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003dba:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8003dbe:	6001      	str	r1, [r0, #0]
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop

08003dc4 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8003dc4:	0080      	lsls	r0, r0, #2
 8003dc6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8003dca:	f503 40b8 	add.w	r0, r3, #23552	; 0x5c00
 8003dce:	6802      	ldr	r2, [r0, #0]
 8003dd0:	0451      	lsls	r1, r2, #17
 8003dd2:	d508      	bpl.n	8003de6 <ClearDTOG_RX+0x22>
 8003dd4:	6801      	ldr	r1, [r0, #0]
 8003dd6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003dda:	400b      	ands	r3, r1
 8003ddc:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8003de0:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8003de4:	6001      	str	r1, [r0, #0]
 8003de6:	4770      	bx	lr

08003de8 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8003de8:	0080      	lsls	r0, r0, #2
 8003dea:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8003dee:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	0650      	lsls	r0, r2, #25
 8003df6:	d508      	bpl.n	8003e0a <ClearDTOG_TX+0x22>
 8003df8:	6819      	ldr	r1, [r3, #0]
 8003dfa:	f640 700f 	movw	r0, #3855	; 0xf0f
 8003dfe:	4008      	ands	r0, r1
 8003e00:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 8003e04:	f042 01c0 	orr.w	r1, r2, #192	; 0xc0
 8003e08:	6019      	str	r1, [r3, #0]
 8003e0a:	4770      	bx	lr

08003e0c <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8003e0c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003e10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8003e1a:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8003e1c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003e20:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8003e24:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 8003e28:	0042      	lsls	r2, r0, #1
 8003e2a:	400b      	ands	r3, r1
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	4770      	bx	lr

08003e30 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8003e30:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003e34:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8003e3e:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8003e40:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e48:	18c3      	adds	r3, r0, r3
 8003e4a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e4e:	0058      	lsls	r0, r3, #1
 8003e50:	400a      	ands	r2, r1
 8003e52:	6002      	str	r2, [r0, #0]
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop

08003e58 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8003e58:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003e5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e60:	6819      	ldr	r1, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8003e62:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8003e64:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003e68:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8003e6c:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 8003e70:	004a      	lsls	r2, r1, #1
}
 8003e72:	8810      	ldrh	r0, [r2, #0]
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop

08003e78 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8003e78:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003e7c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	f243 0104 	movw	r1, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8003e86:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8003e88:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003e8c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003e90:	1842      	adds	r2, r0, r1
 8003e92:	0051      	lsls	r1, r2, #1
}
 8003e94:	8808      	ldrh	r0, [r1, #0]
 8003e96:	4770      	bx	lr

08003e98 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8003e98:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003e9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8003ea6:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8003ea8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003eb0:	18c3      	adds	r3, r0, r3
 8003eb2:	005a      	lsls	r2, r3, #1
 8003eb4:	6011      	str	r1, [r2, #0]
 8003eb6:	4770      	bx	lr

08003eb8 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8003eb8:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003ebc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8003ec6:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8003ec8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ed0:	18c3      	adds	r3, r0, r3
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	293e      	cmp	r1, #62	; 0x3e
 8003ed6:	d909      	bls.n	8003eec <SetEPRxCount+0x34>
 8003ed8:	094a      	lsrs	r2, r1, #5
 8003eda:	06c9      	lsls	r1, r1, #27
 8003edc:	d101      	bne.n	8003ee2 <SetEPRxCount+0x2a>
 8003ede:	1e50      	subs	r0, r2, #1
 8003ee0:	b282      	uxth	r2, r0
 8003ee2:	0291      	lsls	r1, r2, #10
 8003ee4:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8003ee8:	6018      	str	r0, [r3, #0]
 8003eea:	4770      	bx	lr
 8003eec:	084a      	lsrs	r2, r1, #1
 8003eee:	07c8      	lsls	r0, r1, #31
 8003ef0:	bf48      	it	mi
 8003ef2:	3201      	addmi	r2, #1
 8003ef4:	0291      	lsls	r1, r2, #10
 8003ef6:	6019      	str	r1, [r3, #0]
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop

08003efc <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8003efc:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003f00:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	f243 0106 	movw	r1, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8003f0a:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8003f0c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003f10:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003f14:	1842      	adds	r2, r0, r1
 8003f16:	0051      	lsls	r1, r2, #1
 8003f18:	680b      	ldr	r3, [r1, #0]
}
 8003f1a:	0598      	lsls	r0, r3, #22
 8003f1c:	0d80      	lsrs	r0, r0, #22
 8003f1e:	4770      	bx	lr

08003f20 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8003f20:	b2c3      	uxtb	r3, r0
 8003f22:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8003f24:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop

08003f2c <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8003f2c:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8003f2e:	f241 6324 	movw	r3, #5668	; 0x1624
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8003f32:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8003f36:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8003f3a:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 8003f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8003f48:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8003f4c:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 8003f4e:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8003f50:	6011      	str	r1, [r2, #0]
  return 0;
}
 8003f52:	bc10      	pop	{r4}
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop

08003f58 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8003f58:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8003f5a:	f643 63fd 	movw	r3, #16125	; 0x3efd
 8003f5e:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8003f62:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003f66:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8003f68:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8003f6a:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8003f6c:	f643 6179 	movw	r1, #15993	; 0x3e79
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8003f70:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8003f72:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003f76:	4628      	mov	r0, r5
 8003f78:	4788      	blx	r1
 8003f7a:	f643 4361 	movw	r3, #15457	; 0x3c61
 8003f7e:	4601      	mov	r1, r0
 8003f80:	4622      	mov	r2, r4
 8003f82:	4630      	mov	r0, r6
 8003f84:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003f88:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	bd70      	pop	{r4, r5, r6, pc}
 8003f8e:	bf00      	nop

08003f90 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8003f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f94:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8004144 <CTR_LP+0x1b4>
 8003f98:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8003f9a:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8003f9e:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8003fa0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8004148 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8003fa4:	4d62      	ldr	r5, [pc, #392]	; (8004130 <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8003fa6:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8003faa:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 8003fae:	46d0      	mov	r8, sl
 8003fb0:	f8db 0000 	ldr.w	r0, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8003fb4:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8003fb8:	b282      	uxth	r2, r0
 8003fba:	0403      	lsls	r3, r0, #16
 8003fbc:	f8aa 2000 	strh.w	r2, [sl]
 8003fc0:	f140 80ab 	bpl.w	800411a <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8003fc4:	f8b8 3000 	ldrh.w	r3, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8003fc8:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8003fcc:	f003 020f 	and.w	r2, r3, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8003fd0:	0090      	lsls	r0, r2, #2
 8003fd2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 8003fd6:	4e57      	ldr	r6, [pc, #348]	; (8004134 <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8003fd8:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8003fdc:	4f54      	ldr	r7, [pc, #336]	; (8004130 <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 8003fde:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8003fe0:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8003fe4:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 8003fe8:	2a00      	cmp	r2, #0
 8003fea:	d133      	bne.n	8004054 <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8003fec:	6822      	ldr	r2, [r4, #0]
 8003fee:	b290      	uxth	r0, r2
 8003ff0:	8028      	strh	r0, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8003ff2:	882b      	ldrh	r3, [r5, #0]
 8003ff4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003ff8:	8032      	strh	r2, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 8003ffa:	8828      	ldrh	r0, [r5, #0]
 8003ffc:	f400 5340 	and.w	r3, r0, #12288	; 0x3000
 8004000:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	4011      	ands	r1, r2
 8004006:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800400a:	f081 0020 	eor.w	r0, r1, #32
 800400e:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8004012:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004016:	6022      	str	r2, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8004018:	f8b8 1000 	ldrh.w	r1, [r8]
 800401c:	f001 0010 	and.w	r0, r1, #16
 8004020:	b283      	uxth	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d049      	beq.n	80040ba <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8004026:	6822      	ldr	r2, [r4, #0]
 8004028:	b291      	uxth	r1, r2
 800402a:	f8ad 1006 	strh.w	r1, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 800402e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004032:	f400 6300 	and.w	r3, r0, #2048	; 0x800
 8004036:	b29a      	uxth	r2, r3
 8004038:	2a00      	cmp	r2, #0
 800403a:	d171      	bne.n	8004120 <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 800403c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8004040:	b208      	sxth	r0, r1
 8004042:	2800      	cmp	r0, #0
 8004044:	dab4      	bge.n	8003fb0 <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 8004046:	6822      	ldr	r2, [r4, #0]
 8004048:	f640 738f 	movw	r3, #3983	; 0xf8f
 800404c:	4013      	ands	r3, r2
 800404e:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8004050:	4939      	ldr	r1, [pc, #228]	; (8004138 <CTR_LP+0x1a8>)
 8004052:	e038      	b.n	80040c6 <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8004054:	6804      	ldr	r4, [r0, #0]
 8004056:	b2a1      	uxth	r1, r4
 8004058:	f8ad 1006 	strh.w	r1, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 800405c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004060:	b214      	sxth	r4, r2
 8004062:	2c00      	cmp	r4, #0
 8004064:	db1b      	blt.n	800409e <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8004066:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800406a:	f001 0280 	and.w	r2, r1, #128	; 0x80
 800406e:	b293      	uxth	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d09d      	beq.n	8003fb0 <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8004074:	f899 4000 	ldrb.w	r4, [r9]
 8004078:	f648 730f 	movw	r3, #36623	; 0x8f0f
 800407c:	00a0      	lsls	r0, r4, #2
 800407e:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 8004082:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 8004086:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8004088:	3c01      	subs	r4, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800408a:	4003      	ands	r3, r0
 800408c:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800408e:	f240 2348 	movw	r3, #584	; 0x248
 8004092:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004096:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800409a:	4788      	blx	r1
 800409c:	e788      	b.n	8003fb0 <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800409e:	6801      	ldr	r1, [r0, #0]
 80040a0:	f640 728f 	movw	r2, #3983	; 0xf8f
 80040a4:	400a      	ands	r2, r1
 80040a6:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80040a8:	f240 2064 	movw	r0, #612	; 0x264
 80040ac:	3b01      	subs	r3, #1
 80040ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80040b2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80040b6:	47a0      	blx	r4
 80040b8:	e7d5      	b.n	8004066 <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80040ba:	6821      	ldr	r1, [r4, #0]
 80040bc:	f648 730f 	movw	r3, #36623	; 0x8f0f
 80040c0:	400b      	ands	r3, r1
        In0_Process();
 80040c2:	491e      	ldr	r1, [pc, #120]	; (800413c <CTR_LP+0x1ac>)
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80040c4:	6023      	str	r3, [r4, #0]
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 80040c6:	4788      	blx	r1
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80040c8:	6820      	ldr	r0, [r4, #0]
 80040ca:	883a      	ldrh	r2, [r7, #0]
 80040cc:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 80040d0:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 80040d4:	b28a      	uxth	r2, r1
 80040d6:	4003      	ands	r3, r0
 80040d8:	b10a      	cbz	r2, 80040de <CTR_LP+0x14e>
 80040da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040de:	8838      	ldrh	r0, [r7, #0]
 80040e0:	f400 5100 	and.w	r1, r0, #8192	; 0x2000
 80040e4:	b28a      	uxth	r2, r1
 80040e6:	b10a      	cbz	r2, 80040ec <CTR_LP+0x15c>
 80040e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040ec:	8830      	ldrh	r0, [r6, #0]
 80040ee:	f000 0110 	and.w	r1, r0, #16
 80040f2:	b28a      	uxth	r2, r1
 80040f4:	b10a      	cbz	r2, 80040fa <CTR_LP+0x16a>
 80040f6:	f083 0310 	eor.w	r3, r3, #16
 80040fa:	8830      	ldrh	r0, [r6, #0]
 80040fc:	f000 0120 	and.w	r1, r0, #32
 8004100:	b28a      	uxth	r2, r1
 8004102:	b10a      	cbz	r2, 8004108 <CTR_LP+0x178>
 8004104:	f083 0320 	eor.w	r3, r3, #32
 8004108:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 800410c:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8004110:	f040 0280 	orr.w	r2, r0, #128	; 0x80
 8004114:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8004118:	600a      	str	r2, [r1, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800411a:	b003      	add	sp, #12
 800411c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8004120:	6820      	ldr	r0, [r4, #0]
 8004122:	f640 728f 	movw	r2, #3983	; 0xf8f
 8004126:	4002      	ands	r2, r0
 8004128:	6022      	str	r2, [r4, #0]
          Setup0_Process();
 800412a:	4905      	ldr	r1, [pc, #20]	; (8004140 <CTR_LP+0x1b0>)
 800412c:	e7cb      	b.n	80040c6 <CTR_LP+0x136>
 800412e:	bf00      	nop
 8004130:	20001626 	.word	0x20001626
 8004134:	20001628 	.word	0x20001628
 8004138:	08003615 	.word	0x08003615
 800413c:	08003b35 	.word	0x08003b35
 8004140:	08003705 	.word	0x08003705
 8004144:	20000dc8 	.word	0x20000dc8
 8004148:	200015fc 	.word	0x200015fc
 800414c:	00000a0a 	.word	0x00000a0a
 8004150:	2a2a2a2a 	.word	0x2a2a2a2a
 8004154:	2a2a2a2a 	.word	0x2a2a2a2a
 8004158:	2a2a2a2a 	.word	0x2a2a2a2a
 800415c:	2a2a2a2a 	.word	0x2a2a2a2a
 8004160:	2a2a2a2a 	.word	0x2a2a2a2a
 8004164:	2a2a2a2a 	.word	0x2a2a2a2a
 8004168:	2a2a2a2a 	.word	0x2a2a2a2a
 800416c:	2a2a2a2a 	.word	0x2a2a2a2a
 8004170:	2a2a2a2a 	.word	0x2a2a2a2a
 8004174:	2a2a2a2a 	.word	0x2a2a2a2a
 8004178:	2a2a2a2a 	.word	0x2a2a2a2a
 800417c:	2a2a2a2a 	.word	0x2a2a2a2a
 8004180:	2a2a2a2a 	.word	0x2a2a2a2a
 8004184:	0a2a2a2a 	.word	0x0a2a2a2a
 8004188:	00000000 	.word	0x00000000
 800418c:	20202020 	.word	0x20202020
 8004190:	20202020 	.word	0x20202020
 8004194:	20202020 	.word	0x20202020
 8004198:	20202020 	.word	0x20202020
 800419c:	20202020 	.word	0x20202020
 80041a0:	4c472020 	.word	0x4c472020
 80041a4:	56206463 	.word	0x56206463
 80041a8:	20322e30 	.word	0x20322e30
 80041ac:	20202020 	.word	0x20202020
 80041b0:	20202020 	.word	0x20202020
 80041b4:	20202020 	.word	0x20202020
 80041b8:	20202020 	.word	0x20202020
 80041bc:	20202020 	.word	0x20202020
 80041c0:	000a2020 	.word	0x000a2020
 80041c4:	2e31202a 	.word	0x2e31202a
 80041c8:	44434c20 	.word	0x44434c20
 80041cc:	656c4320 	.word	0x656c4320
 80041d0:	20207261 	.word	0x20207261
 80041d4:	20202020 	.word	0x20202020
 80041d8:	20202020 	.word	0x20202020
 80041dc:	20202020 	.word	0x20202020
 80041e0:	20202020 	.word	0x20202020
 80041e4:	20202020 	.word	0x20202020
 80041e8:	20202020 	.word	0x20202020
 80041ec:	20202020 	.word	0x20202020
 80041f0:	20202020 	.word	0x20202020
 80041f4:	20202020 	.word	0x20202020
 80041f8:	0a2a2020 	.word	0x0a2a2020
 80041fc:	00000000 	.word	0x00000000
 8004200:	2e32202a 	.word	0x2e32202a
 8004204:	756f4320 	.word	0x756f4320
 8004208:	2b20746e 	.word	0x2b20746e
 800420c:	2020202b 	.word	0x2020202b
 8004210:	20202020 	.word	0x20202020
 8004214:	20202020 	.word	0x20202020
 8004218:	20202020 	.word	0x20202020
 800421c:	20202020 	.word	0x20202020
 8004220:	20202020 	.word	0x20202020
 8004224:	20202020 	.word	0x20202020
 8004228:	20202020 	.word	0x20202020
 800422c:	20202020 	.word	0x20202020
 8004230:	20202020 	.word	0x20202020
 8004234:	0a2a2020 	.word	0x0a2a2020
 8004238:	00000000 	.word	0x00000000
 800423c:	2e33202a 	.word	0x2e33202a
 8004240:	756f4320 	.word	0x756f4320
 8004244:	2d20746e 	.word	0x2d20746e
 8004248:	2020202d 	.word	0x2020202d
 800424c:	20202020 	.word	0x20202020
 8004250:	20202020 	.word	0x20202020
 8004254:	20202020 	.word	0x20202020
 8004258:	20202020 	.word	0x20202020
 800425c:	20202020 	.word	0x20202020
 8004260:	20202020 	.word	0x20202020
 8004264:	20202020 	.word	0x20202020
 8004268:	20202020 	.word	0x20202020
 800426c:	20202020 	.word	0x20202020
 8004270:	0a2a2020 	.word	0x0a2a2020
 8004274:	00000000 	.word	0x00000000
 8004278:	2e34202a 	.word	0x2e34202a
 800427c:	766f4d20 	.word	0x766f4d20
 8004280:	69432065 	.word	0x69432065
 8004284:	656c6372 	.word	0x656c6372
 8004288:	61745320 	.word	0x61745320
 800428c:	20207472 	.word	0x20207472
 8004290:	20202020 	.word	0x20202020
 8004294:	20202020 	.word	0x20202020
 8004298:	20202020 	.word	0x20202020
 800429c:	20202020 	.word	0x20202020
 80042a0:	20202020 	.word	0x20202020
 80042a4:	20202020 	.word	0x20202020
 80042a8:	20202020 	.word	0x20202020
 80042ac:	0a2a2020 	.word	0x0a2a2020
 80042b0:	00000000 	.word	0x00000000
 80042b4:	2e35202a 	.word	0x2e35202a
 80042b8:	766f4d20 	.word	0x766f4d20
 80042bc:	69432065 	.word	0x69432065
 80042c0:	656c6372 	.word	0x656c6372
 80042c4:	646e4520 	.word	0x646e4520
 80042c8:	20202020 	.word	0x20202020
 80042cc:	20202020 	.word	0x20202020
 80042d0:	20202020 	.word	0x20202020
 80042d4:	20202020 	.word	0x20202020
 80042d8:	20202020 	.word	0x20202020
 80042dc:	20202020 	.word	0x20202020
 80042e0:	20202020 	.word	0x20202020
 80042e4:	20202020 	.word	0x20202020
 80042e8:	0a2a2020 	.word	0x0a2a2020
 80042ec:	00000000 	.word	0x00000000
 80042f0:	2e36202a 	.word	0x2e36202a
 80042f4:	43324920 	.word	0x43324920
 80042f8:	20574820 	.word	0x20574820
 80042fc:	20202020 	.word	0x20202020
 8004300:	20202020 	.word	0x20202020
 8004304:	20202020 	.word	0x20202020
 8004308:	20202020 	.word	0x20202020
 800430c:	20202020 	.word	0x20202020
 8004310:	20202020 	.word	0x20202020
 8004314:	20202020 	.word	0x20202020
 8004318:	20202020 	.word	0x20202020
 800431c:	20202020 	.word	0x20202020
 8004320:	20202020 	.word	0x20202020
 8004324:	0a2a2020 	.word	0x0a2a2020
 8004328:	00000000 	.word	0x00000000
 800432c:	2e37202a 	.word	0x2e37202a
 8004330:	20202020 	.word	0x20202020
 8004334:	20202020 	.word	0x20202020
 8004338:	20202020 	.word	0x20202020
 800433c:	20202020 	.word	0x20202020
 8004340:	20202020 	.word	0x20202020
 8004344:	20202020 	.word	0x20202020
 8004348:	20202020 	.word	0x20202020
 800434c:	20202020 	.word	0x20202020
 8004350:	20202020 	.word	0x20202020
 8004354:	20202020 	.word	0x20202020
 8004358:	20202020 	.word	0x20202020
 800435c:	20202020 	.word	0x20202020
 8004360:	0a2a2020 	.word	0x0a2a2020
 8004364:	00000000 	.word	0x00000000
 8004368:	2e38202a 	.word	0x2e38202a
 800436c:	20202020 	.word	0x20202020
 8004370:	20202020 	.word	0x20202020
 8004374:	20202020 	.word	0x20202020
 8004378:	20202020 	.word	0x20202020
 800437c:	20202020 	.word	0x20202020
 8004380:	20202020 	.word	0x20202020
 8004384:	20202020 	.word	0x20202020
 8004388:	20202020 	.word	0x20202020
 800438c:	20202020 	.word	0x20202020
 8004390:	20202020 	.word	0x20202020
 8004394:	20202020 	.word	0x20202020
 8004398:	20202020 	.word	0x20202020
 800439c:	0a2a2020 	.word	0x0a2a2020
 80043a0:	00000000 	.word	0x00000000
 80043a4:	2e39202a 	.word	0x2e39202a
 80043a8:	20202020 	.word	0x20202020
 80043ac:	20202020 	.word	0x20202020
 80043b0:	20202020 	.word	0x20202020
 80043b4:	20202020 	.word	0x20202020
 80043b8:	20202020 	.word	0x20202020
 80043bc:	20202020 	.word	0x20202020
 80043c0:	20202020 	.word	0x20202020
 80043c4:	20202020 	.word	0x20202020
 80043c8:	20202020 	.word	0x20202020
 80043cc:	20202020 	.word	0x20202020
 80043d0:	20202020 	.word	0x20202020
 80043d4:	20202020 	.word	0x20202020
 80043d8:	0a2a2020 	.word	0x0a2a2020
 80043dc:	00000000 	.word	0x00000000
 80043e0:	2e6d202a 	.word	0x2e6d202a
 80043e4:	654d2020 	.word	0x654d2020
 80043e8:	2020756e 	.word	0x2020756e
 80043ec:	20202020 	.word	0x20202020
 80043f0:	20202020 	.word	0x20202020
 80043f4:	20202020 	.word	0x20202020
 80043f8:	20202020 	.word	0x20202020
 80043fc:	20202020 	.word	0x20202020
 8004400:	20202020 	.word	0x20202020
 8004404:	20202020 	.word	0x20202020
 8004408:	20202020 	.word	0x20202020
 800440c:	20202020 	.word	0x20202020
 8004410:	20202020 	.word	0x20202020
 8004414:	0a2a2020 	.word	0x0a2a2020
 8004418:	00000000 	.word	0x00000000
 800441c:	0000000a 	.word	0x0000000a
 8004420:	00203e3e 	.word	0x00203e3e
 8004424:	2044434c 	.word	0x2044434c
 8004428:	61656c43 	.word	0x61656c43
 800442c:	000a2072 	.word	0x000a2072
 8004430:	6e756f43 	.word	0x6e756f43
 8004434:	2b2b2074 	.word	0x2b2b2074
 8004438:	00000a20 	.word	0x00000a20
 800443c:	72616d53 	.word	0x72616d53
 8004440:	626f7274 	.word	0x626f7274
 8004444:	4220746f 	.word	0x4220746f
 8004448:	00000044 	.word	0x00000044
 800444c:	6e756f43 	.word	0x6e756f43
 8004450:	203a2074 	.word	0x203a2074
 8004454:	00643425 	.word	0x00643425
 8004458:	6e756f43 	.word	0x6e756f43
 800445c:	2d2d2074 	.word	0x2d2d2074
 8004460:	00000a20 	.word	0x00000a20
 8004464:	000a3053 	.word	0x000a3053
 8004468:	25203153 	.word	0x25203153
 800446c:	00000a78 	.word	0x00000a78
 8004470:	25203253 	.word	0x25203253
 8004474:	00000a78 	.word	0x00000a78
 8004478:	25203353 	.word	0x25203353
 800447c:	00000a78 	.word	0x00000a78

08004480 <Virtual_Com_Port_StringVendor>:
 8004480:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8004490:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 80044a0:	00630069 00000073                       i.c.s...

080044a8 <Virtual_Com_Port_DeviceDescriptor>:
 80044a8:	02000112 40000002 57400483 02010200     .......@..@W....
 80044b8:	00000103                                ....

080044bc <Virtual_Com_Port_StringLangID>:
 80044bc:	04090304                                ....

080044c0 <Virtual_Com_Port_StringProduct>:
 80044c0:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 80044d0:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 80044e0:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 80044f0:	00000020                                 ...

080044f4 <Virtual_Com_Port_ConfigDescriptor>:
 80044f4:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8004504:	24050001 05011000 01000124 02022404     ...$....$....$..
 8004514:	00062405 82050701 ff000803 00010409     .$..............
 8004524:	00000a02 03050700 00004002 02810507     .........@......
 8004534:	00000040                                @...
