
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004f94  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000310  20000000  08004f94  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000123c  20000400  08005400  00010400  2**9
                  ALLOC
  3 ._usrstack    00000100  2000163c  0800663c  00010400  2**0
                  ALLOC
  4 .ARM.attributes 00000033  00000000  00000000  00010310  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000a62c  00000000  00000000  00010343  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000302c  00000000  00000000  0001a96f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000098dd  00000000  00000000  0001d99b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000bc0  00000000  00000000  00027278  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001bb8  00000000  00000000  00027e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003803  00000000  00000000  000299f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002677  00000000  00000000  0002d1f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000070  00000000  00000000  0002f86a  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001df4  00000000  00000000  0002f8dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 35 13 00 08                             .P. 5...

08000008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800000a:	f241 732d 	movw	r3, #5933	; 0x172d
 800000e:	2000      	movs	r0, #0
 8000010:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000014:	4798      	blx	r3
 8000016:	bd08      	pop	{r3, pc}

08000018 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000018:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001a:	4b0a      	ldr	r3, [pc, #40]	; (8000044 <main+0x2c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800001c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001e:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000020:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000022:	4809      	ldr	r0, [pc, #36]	; (8000048 <main+0x30>)
 8000024:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000026:	4d09      	ldr	r5, [pc, #36]	; (800004c <main+0x34>)
 8000028:	2202      	movs	r2, #2
 800002a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800002e:	4b08      	ldr	r3, [pc, #32]	; (8000050 <main+0x38>)
 8000030:	4620      	mov	r0, r4
 8000032:	9400      	str	r4, [sp, #0]
 8000034:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );		
 8000036:	4620      	mov	r0, r4
 8000038:	4906      	ldr	r1, [pc, #24]	; (8000054 <main+0x3c>)
 800003a:	4788      	blx	r1
	Main_Init();

	//-- 명령어 처리
	//
	//Ap_RadioMenu_ExeCmd();    
	Ap_GLcdMenu_ExeCmd();    
 800003c:	4a06      	ldr	r2, [pc, #24]	; (8000058 <main+0x40>)
 800003e:	4790      	blx	r2
 8000040:	e7fe      	b.n	8000040 <main+0x28>
 8000042:	bf00      	nop
 8000044:	08001401 	.word	0x08001401
 8000048:	0800005d 	.word	0x0800005d
 800004c:	08001b49 	.word	0x08001b49
 8000050:	08000009 	.word	0x08000009
 8000054:	08001b69 	.word	0x08001b69
 8000058:	08000379 	.word	0x08000379

0800005c <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 800005c:	b508      	push	{r3, lr}
	if( Ap_Radio_Init() == ERR_NONE )
 800005e:	4b05      	ldr	r3, [pc, #20]	; (8000074 <Ap_Init+0x18>)
 8000060:	4798      	blx	r3
 8000062:	b118      	cbz	r0, 800006c <Ap_Init+0x10>
	{
		Lb_printf("Radio Init OK : FM Mode\n");
	}
	else
	{
		Lb_printf("Radio Init Fail\n");
 8000064:	4804      	ldr	r0, [pc, #16]	; (8000078 <Ap_Init+0x1c>)
 8000066:	4905      	ldr	r1, [pc, #20]	; (800007c <Ap_Init+0x20>)
 8000068:	4788      	blx	r1
 800006a:	bd08      	pop	{r3, pc}
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
	if( Ap_Radio_Init() == ERR_NONE )
	{
		Lb_printf("Radio Init OK : FM Mode\n");
 800006c:	4804      	ldr	r0, [pc, #16]	; (8000080 <Ap_Init+0x24>)
 800006e:	4a03      	ldr	r2, [pc, #12]	; (800007c <Ap_Init+0x20>)
 8000070:	4790      	blx	r2
 8000072:	bd08      	pop	{r3, pc}
 8000074:	08000171 	.word	0x08000171
 8000078:	08004bb0 	.word	0x08004bb0
 800007c:	08000d91 	.word	0x08000d91
 8000080:	08004b94 	.word	0x08004b94

08000084 <Ap_Radio_BandSetFM>:
     ARG     : void
     RET     : 
     			u16 - Error Code
---------------------------------------------------------------------------*/
u16 Ap_Radio_BandSetFM( void )
{
 8000084:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000086:	4c06      	ldr	r4, [pc, #24]	; (80000a0 <Ap_Radio_BandSetFM+0x1c>)
 8000088:	2300      	movs	r3, #0
{
	u16 Ret = ERR_NONE;
	
	Ap_Radio_ApiStart();
	
	Ap_Radio_Log.Err_Hw = Hw_Si47xx_FM_Config();	
 800008a:	4806      	ldr	r0, [pc, #24]	; (80000a4 <Ap_Radio_BandSetFM+0x20>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 800008c:	82a3      	strh	r3, [r4, #20]
{
	u16 Ret = ERR_NONE;
	
	Ap_Radio_ApiStart();
	
	Ap_Radio_Log.Err_Hw = Hw_Si47xx_FM_Config();	
 800008e:	4780      	blx	r0
 8000090:	82a0      	strh	r0, [r4, #20]
	
	if( Ap_Radio_Log.Err_Hw == ERR_NONE )
 8000092:	b108      	cbz	r0, 8000098 <Ap_Radio_BandSetFM+0x14>
	{
		Ap_Radio_Log.Band_Mode = MODE_RADIO_BAND_FM;
	}
	else
	{
		Ret = ERR_RADIO_HW_ERR;
 8000094:	2002      	movs	r0, #2
	}
	
	return Ret;
}
 8000096:	bd10      	pop	{r4, pc}
	
	Ap_Radio_Log.Err_Hw = Hw_Si47xx_FM_Config();	
	
	if( Ap_Radio_Log.Err_Hw == ERR_NONE )
	{
		Ap_Radio_Log.Band_Mode = MODE_RADIO_BAND_FM;
 8000098:	2101      	movs	r1, #1
 800009a:	8021      	strh	r1, [r4, #0]
 800009c:	bd10      	pop	{r4, pc}
 800009e:	bf00      	nop
 80000a0:	200004bc 	.word	0x200004bc
 80000a4:	08002601 	.word	0x08002601

080000a8 <Ap_Radio_FM_ChannelSet>:
     			u16 Channel - Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_FM_ChannelSet( u16 Channel )
{
 80000a8:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80000aa:	4c0e      	ldr	r4, [pc, #56]	; (80000e4 <Ap_Radio_FM_ChannelSet+0x3c>)
 80000ac:	2100      	movs	r1, #0
	u16 Ret;
	
	Ap_Radio_ApiStart();


	if( Channel < Ap_Radio_Log.FM_Channel_Min ) Channel = Ap_Radio_Log.FM_Channel_Min;
 80000ae:	8922      	ldrh	r2, [r4, #8]
	if( Channel > Ap_Radio_Log.FM_Channel_Max ) Channel = Ap_Radio_Log.FM_Channel_Max;
 80000b0:	8963      	ldrh	r3, [r4, #10]
 80000b2:	4290      	cmp	r0, r2
 80000b4:	bf38      	it	cc
 80000b6:	4610      	movcc	r0, r2

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
 80000b8:	4298      	cmp	r0, r3
 80000ba:	bf28      	it	cs
 80000bc:	4618      	movcs	r0, r3
 80000be:	4a0a      	ldr	r2, [pc, #40]	; (80000e8 <Ap_Radio_FM_ChannelSet+0x40>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80000c0:	82a1      	strh	r1, [r4, #20]


	if( Channel < Ap_Radio_Log.FM_Channel_Min ) Channel = Ap_Radio_Log.FM_Channel_Min;
	if( Channel > Ap_Radio_Log.FM_Channel_Max ) Channel = Ap_Radio_Log.FM_Channel_Max;

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
 80000c2:	4790      	blx	r2
		
	if( Ret == ERR_NONE )
 80000c4:	b110      	cbz	r0, 80000cc <Ap_Radio_FM_ChannelSet+0x24>
	}
	
	
	if( Ret != ERR_NONE )
	{
		Ap_Radio_Log.Err_Hw = Ret;
 80000c6:	82a0      	strh	r0, [r4, #20]
		
		Ret = ERR_RADIO_HW_ERR;		
 80000c8:	2002      	movs	r0, #2
	}
			
	return Ret;
}
 80000ca:	bd10      	pop	{r4, pc}

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
		
	if( Ret == ERR_NONE )
	{
		Ret = Hw_Si47xx_WaitForSTC( 500 );		if( Ret != ERR_NONE ) return Ret;
 80000cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80000d0:	4b06      	ldr	r3, [pc, #24]	; (80000ec <Ap_Radio_FM_ChannelSet+0x44>)
 80000d2:	4798      	blx	r3
 80000d4:	2800      	cmp	r0, #0
 80000d6:	d1f8      	bne.n	80000ca <Ap_Radio_FM_ChannelSet+0x22>
		
		if( Ret == ERR_NONE )
		{
			Ret = Hw_Si47xx_FM_TUNE_STATUS(1);
 80000d8:	2001      	movs	r0, #1
 80000da:	4905      	ldr	r1, [pc, #20]	; (80000f0 <Ap_Radio_FM_ChannelSet+0x48>)
 80000dc:	4788      	blx	r1
			}
		}
	}
	
	
	if( Ret != ERR_NONE )
 80000de:	2800      	cmp	r0, #0
 80000e0:	d0f3      	beq.n	80000ca <Ap_Radio_FM_ChannelSet+0x22>
 80000e2:	e7f0      	b.n	80000c6 <Ap_Radio_FM_ChannelSet+0x1e>
 80000e4:	200004bc 	.word	0x200004bc
 80000e8:	08002571 	.word	0x08002571
 80000ec:	080024f9 	.word	0x080024f9
 80000f0:	0800249d 	.word	0x0800249d

080000f4 <Ap_Radio_AM_ChannelSet>:
     			u16 Channel - Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_AM_ChannelSet( u16 Channel )
{
 80000f4:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80000f6:	4c0e      	ldr	r4, [pc, #56]	; (8000130 <Ap_Radio_AM_ChannelSet+0x3c>)
 80000f8:	2100      	movs	r1, #0
	u16 Ret;
	
	Ap_Radio_ApiStart();


	if( Channel < Ap_Radio_Log.AM_Channel_Min ) Channel = Ap_Radio_Log.AM_Channel_Min;
 80000fa:	89a2      	ldrh	r2, [r4, #12]
	if( Channel > Ap_Radio_Log.AM_Channel_Max ) Channel = Ap_Radio_Log.AM_Channel_Max;
 80000fc:	89e3      	ldrh	r3, [r4, #14]
 80000fe:	4290      	cmp	r0, r2
 8000100:	bf38      	it	cc
 8000102:	4610      	movcc	r0, r2

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
 8000104:	4298      	cmp	r0, r3
 8000106:	bf28      	it	cs
 8000108:	4618      	movcs	r0, r3
 800010a:	4a0a      	ldr	r2, [pc, #40]	; (8000134 <Ap_Radio_AM_ChannelSet+0x40>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 800010c:	82a1      	strh	r1, [r4, #20]


	if( Channel < Ap_Radio_Log.AM_Channel_Min ) Channel = Ap_Radio_Log.AM_Channel_Min;
	if( Channel > Ap_Radio_Log.AM_Channel_Max ) Channel = Ap_Radio_Log.AM_Channel_Max;

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
 800010e:	4790      	blx	r2
		
	if( Ret == ERR_NONE )
 8000110:	b110      	cbz	r0, 8000118 <Ap_Radio_AM_ChannelSet+0x24>
	}
	
	
	if( Ret != ERR_NONE )
	{
		Ap_Radio_Log.Err_Hw = Ret;
 8000112:	82a0      	strh	r0, [r4, #20]
		
		Ret = ERR_RADIO_HW_ERR;		
 8000114:	2002      	movs	r0, #2
	}
			
	return Ret;
}
 8000116:	bd10      	pop	{r4, pc}

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
		
	if( Ret == ERR_NONE )
	{
		Ret = Hw_Si47xx_WaitForSTC( 500 );		if( Ret != ERR_NONE ) return Ret;
 8000118:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800011c:	4b06      	ldr	r3, [pc, #24]	; (8000138 <Ap_Radio_AM_ChannelSet+0x44>)
 800011e:	4798      	blx	r3
 8000120:	2800      	cmp	r0, #0
 8000122:	d1f8      	bne.n	8000116 <Ap_Radio_AM_ChannelSet+0x22>
		
		if( Ret == ERR_NONE )
		{
			Ret = Hw_Si47xx_AM_TUNE_STATUS(1);
 8000124:	2001      	movs	r0, #1
 8000126:	4905      	ldr	r1, [pc, #20]	; (800013c <Ap_Radio_AM_ChannelSet+0x48>)
 8000128:	4788      	blx	r1
			}
		}
	}
	
	
	if( Ret != ERR_NONE )
 800012a:	2800      	cmp	r0, #0
 800012c:	d0f3      	beq.n	8000116 <Ap_Radio_AM_ChannelSet+0x22>
 800012e:	e7f0      	b.n	8000112 <Ap_Radio_AM_ChannelSet+0x1e>
 8000130:	200004bc 	.word	0x200004bc
 8000134:	0800252d 	.word	0x0800252d
 8000138:	080024f9 	.word	0x080024f9
 800013c:	08002471 	.word	0x08002471

08000140 <Ap_Radio_ChannelSetFirst>:
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelSetFirst( void )
{
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
 8000140:	4a08      	ldr	r2, [pc, #32]	; (8000164 <Ap_Radio_ChannelSetFirst+0x24>)
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelSetFirst( void )
{
 8000142:	b508      	push	{r3, lr}
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
 8000144:	8813      	ldrh	r3, [r2, #0]
 8000146:	2b01      	cmp	r3, #1
 8000148:	d003      	beq.n	8000152 <Ap_Radio_ChannelSetFirst+0x12>
	{
		Ret = Ap_Radio_FM_ChannelSet( Ap_Radio_Log.FM_Channel_Min );
	}
	else
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_AM )
 800014a:	2b02      	cmp	r3, #2
 800014c:	d005      	beq.n	800015a <Ap_Radio_ChannelSetFirst+0x1a>
	{
		Ret = Ap_Radio_AM_ChannelSet( Ap_Radio_Log.AM_Channel_Min );
	}
	else
	{
		Ret = ERR_RADIO_BAND_ERR;
 800014e:	2003      	movs	r0, #3
	}	
	
	return Ret;
}
 8000150:	bd08      	pop	{r3, pc}
{
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
	{
		Ret = Ap_Radio_FM_ChannelSet( Ap_Radio_Log.FM_Channel_Min );
 8000152:	8910      	ldrh	r0, [r2, #8]
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <Ap_Radio_ChannelSetFirst+0x28>)
 8000156:	4790      	blx	r2
 8000158:	bd08      	pop	{r3, pc}
	}
	else
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_AM )
	{
		Ret = Ap_Radio_AM_ChannelSet( Ap_Radio_Log.AM_Channel_Min );
 800015a:	8990      	ldrh	r0, [r2, #12]
 800015c:	4903      	ldr	r1, [pc, #12]	; (800016c <Ap_Radio_ChannelSetFirst+0x2c>)
 800015e:	4788      	blx	r1
 8000160:	bd08      	pop	{r3, pc}
 8000162:	bf00      	nop
 8000164:	200004bc 	.word	0x200004bc
 8000168:	080000a9 	.word	0x080000a9
 800016c:	080000f5 	.word	0x080000f5

08000170 <Ap_Radio_Init>:
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_Init(void)
{
 8000170:	b508      	push	{r3, lr}
	u16 Ret = ERR_NONE;
	
		
	Hw_Si47xx_Init();
 8000172:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <Ap_Radio_Init+0x3c>)
 8000174:	4798      	blx	r3
	
	
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
 8000176:	480e      	ldr	r0, [pc, #56]	; (80001b0 <Ap_Radio_Init+0x40>)
 8000178:	f641 51b0 	movw	r1, #7600	; 0x1db0
 800017c:	8101      	strh	r1, [r0, #8]
	Ap_Radio_Log.FM_Channel_Max = 10790;
 800017e:	f642 2326 	movw	r3, #10790	; 0x2a26
	Ap_Radio_Log.AM_Channel_Min = 520;
 8000182:	f44f 7102 	mov.w	r1, #520	; 0x208
	Ap_Radio_Log.AM_Channel_Max = 1710;
	
	Ap_Radio_Log.Volume_Min = 0;
 8000186:	2200      	movs	r2, #0
	
	
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
	Ap_Radio_Log.FM_Channel_Max = 10790;
 8000188:	8143      	strh	r3, [r0, #10]
	Ap_Radio_Log.AM_Channel_Min = 520;
 800018a:	8181      	strh	r1, [r0, #12]
	Ap_Radio_Log.AM_Channel_Max = 1710;
 800018c:	f240 63ae 	movw	r3, #1710	; 0x6ae
	
	Ap_Radio_Log.Volume_Min = 0;
	Ap_Radio_Log.Volume_Max = 63;	
 8000190:	213f      	movs	r1, #63	; 0x3f
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
	Ap_Radio_Log.FM_Channel_Max = 10790;
	Ap_Radio_Log.AM_Channel_Min = 520;
	Ap_Radio_Log.AM_Channel_Max = 1710;
 8000192:	81c3      	strh	r3, [r0, #14]
	
	Ap_Radio_Log.Volume_Min = 0;
 8000194:	8082      	strh	r2, [r0, #4]
	Ap_Radio_Log.Volume_Max = 63;	
 8000196:	80c1      	strh	r1, [r0, #6]
	
	Ap_Radio_Log.Band_Mode = MODE_RADIO_BAND_NONE;
 8000198:	8002      	strh	r2, [r0, #0]
	Ap_Radio_Log.Mute_Mode = 0;
 800019a:	8042      	strh	r2, [r0, #2]
	
	Ap_Radio_Log.Err_Hw = 0;
 800019c:	8282      	strh	r2, [r0, #20]
	
	
	Ret = Ap_Radio_BandSetFM();
 800019e:	4805      	ldr	r0, [pc, #20]	; (80001b4 <Ap_Radio_Init+0x44>)
 80001a0:	4780      	blx	r0
	
	if( Ret == ERR_NONE )
 80001a2:	b908      	cbnz	r0, 80001a8 <Ap_Radio_Init+0x38>
	{
		Ret = Ap_Radio_ChannelSetFirst();
 80001a4:	4a04      	ldr	r2, [pc, #16]	; (80001b8 <Ap_Radio_Init+0x48>)
 80001a6:	4790      	blx	r2
	}
	
	return Ret;
}
 80001a8:	bd08      	pop	{r3, pc}
 80001aa:	bf00      	nop
 80001ac:	080022e9 	.word	0x080022e9
 80001b0:	200004bc 	.word	0x200004bc
 80001b4:	08000085 	.word	0x08000085
 80001b8:	08000141 	.word	0x08000141

080001bc <Ap_GCldMenu_MoveCircleTick_2nd>:
	cnt++;
}


void Ap_GCldMenu_MoveCircleTick_2nd( void )
{
 80001bc:	b538      	push	{r3, r4, r5, lr}
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 35, HW_N5110G_WIDTH, 45 );           						
	Hw_N5110G_DrawCircle( 10 + x, 40, 3, 0 ); 							
 80001be:	4c16      	ldr	r4, [pc, #88]	; (8000218 <Ap_GCldMenu_MoveCircleTick_2nd+0x5c>)
{
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 35, HW_N5110G_WIDTH, 45 );           						
 80001c0:	2000      	movs	r0, #0
 80001c2:	2123      	movs	r1, #35	; 0x23
 80001c4:	2254      	movs	r2, #84	; 0x54
 80001c6:	232d      	movs	r3, #45	; 0x2d
 80001c8:	4d14      	ldr	r5, [pc, #80]	; (800021c <Ap_GCldMenu_MoveCircleTick_2nd+0x60>)
 80001ca:	47a8      	blx	r5
	Hw_N5110G_DrawCircle( 10 + x, 40, 3, 0 ); 							
 80001cc:	f994 0000 	ldrsb.w	r0, [r4]
 80001d0:	2128      	movs	r1, #40	; 0x28
 80001d2:	300a      	adds	r0, #10
 80001d4:	2203      	movs	r2, #3
 80001d6:	2300      	movs	r3, #0
 80001d8:	b280      	uxth	r0, r0
 80001da:	4d11      	ldr	r5, [pc, #68]	; (8000220 <Ap_GCldMenu_MoveCircleTick_2nd+0x64>)
 80001dc:	47a8      	blx	r5
 	Hw_N5110G_DrawRequest();
 80001de:	4b11      	ldr	r3, [pc, #68]	; (8000224 <Ap_GCldMenu_MoveCircleTick_2nd+0x68>)
 80001e0:	4798      	blx	r3
 	
 	x += dir;
 80001e2:	4911      	ldr	r1, [pc, #68]	; (8000228 <Ap_GCldMenu_MoveCircleTick_2nd+0x6c>)
 80001e4:	7822      	ldrb	r2, [r4, #0]
 80001e6:	7808      	ldrb	r0, [r1, #0]
 80001e8:	1883      	adds	r3, r0, r2
 80001ea:	b2d8      	uxtb	r0, r3
 80001ec:	b2c3      	uxtb	r3, r0
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 80001ee:	b25a      	sxtb	r2, r3
 80001f0:	2a44      	cmp	r2, #68	; 0x44
	
	Hw_N5110G_DrawClearRect( 0, 35, HW_N5110G_WIDTH, 45 );           						
	Hw_N5110G_DrawCircle( 10 + x, 40, 3, 0 ); 							
 	Hw_N5110G_DrawRequest();
 	
 	x += dir;
 80001f2:	7023      	strb	r3, [r4, #0]
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 80001f4:	dd05      	ble.n	8000202 <Ap_GCldMenu_MoveCircleTick_2nd+0x46>
 	{
 		dir = -1;
 		x += dir;
 80001f6:	1e42      	subs	r2, r0, #1
 80001f8:	b2d3      	uxtb	r3, r2
 	
 	x += dir;
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 	{
 		dir = -1;
 80001fa:	20ff      	movs	r0, #255	; 0xff
 80001fc:	7008      	strb	r0, [r1, #0]
 		x += dir;
 80001fe:	7023      	strb	r3, [r4, #0]
 8000200:	b25a      	sxtb	r2, r3
 	}

 	if( x < 0 ) 
 8000202:	2a00      	cmp	r2, #0
 8000204:	da03      	bge.n	800020e <Ap_GCldMenu_MoveCircleTick_2nd+0x52>
 	{
 		dir = 1; 		
 		x  += dir;
 8000206:	3301      	adds	r3, #1
 		x += dir;
 	}

 	if( x < 0 ) 
 	{
 		dir = 1; 		
 8000208:	2001      	movs	r0, #1
 800020a:	7008      	strb	r0, [r1, #0]
 		x  += dir;
 800020c:	7023      	strb	r3, [r4, #0]
 	}

	cnt++;
 800020e:	4907      	ldr	r1, [pc, #28]	; (800022c <Ap_GCldMenu_MoveCircleTick_2nd+0x70>)
 8000210:	780a      	ldrb	r2, [r1, #0]
 8000212:	1c53      	adds	r3, r2, #1
 8000214:	700b      	strb	r3, [r1, #0]
 8000216:	bd38      	pop	{r3, r4, r5, pc}
 8000218:	20000402 	.word	0x20000402
 800021c:	08002add 	.word	0x08002add
 8000220:	08002be1 	.word	0x08002be1
 8000224:	08002acd 	.word	0x08002acd
 8000228:	20000001 	.word	0x20000001
 800022c:	20000400 	.word	0x20000400

08000230 <Ap_GCldMenu_MoveCircleTick_1st>:




void Ap_GCldMenu_MoveCircleTick_1st( void )
{
 8000230:	b538      	push	{r3, r4, r5, lr}
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 25, HW_N5110G_WIDTH, 35 );           						
	Hw_N5110G_DrawCircle( 10 + x, 30, 5, 0 ); 								
 8000232:	4c16      	ldr	r4, [pc, #88]	; (800028c <Ap_GCldMenu_MoveCircleTick_1st+0x5c>)
{
	static s8 x   = 0;
	static s8 dir = 1;
	static u8 cnt = 0;
	
	Hw_N5110G_DrawClearRect( 0, 25, HW_N5110G_WIDTH, 35 );           						
 8000234:	2000      	movs	r0, #0
 8000236:	2119      	movs	r1, #25
 8000238:	2254      	movs	r2, #84	; 0x54
 800023a:	2323      	movs	r3, #35	; 0x23
 800023c:	4d14      	ldr	r5, [pc, #80]	; (8000290 <Ap_GCldMenu_MoveCircleTick_1st+0x60>)
 800023e:	47a8      	blx	r5
	Hw_N5110G_DrawCircle( 10 + x, 30, 5, 0 ); 								
 8000240:	f994 0000 	ldrsb.w	r0, [r4]
 8000244:	211e      	movs	r1, #30
 8000246:	300a      	adds	r0, #10
 8000248:	2205      	movs	r2, #5
 800024a:	2300      	movs	r3, #0
 800024c:	b280      	uxth	r0, r0
 800024e:	4d11      	ldr	r5, [pc, #68]	; (8000294 <Ap_GCldMenu_MoveCircleTick_1st+0x64>)
 8000250:	47a8      	blx	r5
 	Hw_N5110G_DrawRequest();
 8000252:	4b11      	ldr	r3, [pc, #68]	; (8000298 <Ap_GCldMenu_MoveCircleTick_1st+0x68>)
 8000254:	4798      	blx	r3
 	
 	x += dir;
 8000256:	4911      	ldr	r1, [pc, #68]	; (800029c <Ap_GCldMenu_MoveCircleTick_1st+0x6c>)
 8000258:	7822      	ldrb	r2, [r4, #0]
 800025a:	7808      	ldrb	r0, [r1, #0]
 800025c:	1883      	adds	r3, r0, r2
 800025e:	b2d8      	uxtb	r0, r3
 8000260:	b2c3      	uxtb	r3, r0
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 8000262:	b25a      	sxtb	r2, r3
 8000264:	2a44      	cmp	r2, #68	; 0x44
	
	Hw_N5110G_DrawClearRect( 0, 25, HW_N5110G_WIDTH, 35 );           						
	Hw_N5110G_DrawCircle( 10 + x, 30, 5, 0 ); 								
 	Hw_N5110G_DrawRequest();
 	
 	x += dir;
 8000266:	7023      	strb	r3, [r4, #0]
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 8000268:	dd05      	ble.n	8000276 <Ap_GCldMenu_MoveCircleTick_1st+0x46>
 	{
 		dir = -1;
 		x += dir;
 800026a:	1e42      	subs	r2, r0, #1
 800026c:	b2d3      	uxtb	r3, r2
 	
 	x += dir;
 	
 	if( x >= (HW_N5110G_WIDTH-15) ) 
 	{
 		dir = -1;
 800026e:	20ff      	movs	r0, #255	; 0xff
 8000270:	7008      	strb	r0, [r1, #0]
 		x += dir;
 8000272:	7023      	strb	r3, [r4, #0]
 8000274:	b25a      	sxtb	r2, r3
 	}

 	if( x < 0 ) 
 8000276:	2a00      	cmp	r2, #0
 8000278:	da03      	bge.n	8000282 <Ap_GCldMenu_MoveCircleTick_1st+0x52>
 	{
 		dir = 1; 		
 		x  += dir;
 800027a:	3301      	adds	r3, #1
 		x += dir;
 	}

 	if( x < 0 ) 
 	{
 		dir = 1; 		
 800027c:	2001      	movs	r0, #1
 800027e:	7008      	strb	r0, [r1, #0]
 		x  += dir;
 8000280:	7023      	strb	r3, [r4, #0]
 	}

	cnt++;
 8000282:	4907      	ldr	r1, [pc, #28]	; (80002a0 <Ap_GCldMenu_MoveCircleTick_1st+0x70>)
 8000284:	780a      	ldrb	r2, [r1, #0]
 8000286:	1c53      	adds	r3, r2, #1
 8000288:	700b      	strb	r3, [r1, #0]
 800028a:	bd38      	pop	{r3, r4, r5, pc}
 800028c:	20000401 	.word	0x20000401
 8000290:	08002add 	.word	0x08002add
 8000294:	08002be1 	.word	0x08002be1
 8000298:	08002acd 	.word	0x08002acd
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000404 	.word	0x20000404

080002a4 <Ap_GLcdMenu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
 80002a4:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
 80002a6:	f644 30c4 	movw	r0, #19396	; 0x4bc4
 80002aa:	f640 5491 	movw	r4, #3473	; 0xd91
	Lb_printf("*******************************************************\n");
 80002ae:	f644 35c8 	movw	r5, #19400	; 0x4bc8
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 80002b2:	f6c0 0400 	movt	r4, #2048	; 0x800
	Lb_printf("*******************************************************\n");
 80002b6:	f6c0 0500 	movt	r5, #2048	; 0x800
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 80002ba:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002be:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80002c0:	4628      	mov	r0, r5
 80002c2:	47a0      	blx	r4
	Lb_printf("                      GLcd V0.2                       \n");
 80002c4:	f644 4004 	movw	r0, #19460	; 0x4c04
 80002c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002cc:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80002ce:	4628      	mov	r0, r5
 80002d0:	47a0      	blx	r4
	Lb_printf("* 1. LCD Clear                                        *\n");
 80002d2:	f644 403c 	movw	r0, #19516	; 0x4c3c
 80002d6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002da:	47a0      	blx	r4
	Lb_printf("* 2. Count ++                                         *\n");
 80002dc:	f644 4078 	movw	r0, #19576	; 0x4c78
 80002e0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002e4:	47a0      	blx	r4
	Lb_printf("* 3. Count --                                         *\n");
 80002e6:	f644 40b4 	movw	r0, #19636	; 0x4cb4
 80002ea:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002ee:	47a0      	blx	r4
	Lb_printf("* 4. Move Circle Start                                *\n");
 80002f0:	f644 40f0 	movw	r0, #19696	; 0x4cf0
 80002f4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002f8:	47a0      	blx	r4
	Lb_printf("* 5. Move Circle End                                  *\n");
 80002fa:	f644 502c 	movw	r0, #19756	; 0x4d2c
 80002fe:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000302:	47a0      	blx	r4
	Lb_printf("* 6.                                                  *\n");
 8000304:	f644 5068 	movw	r0, #19816	; 0x4d68
 8000308:	f6c0 0000 	movt	r0, #2048	; 0x800
 800030c:	47a0      	blx	r4
	Lb_printf("* 7.                                                  *\n");
 800030e:	f644 50a4 	movw	r0, #19876	; 0x4da4
 8000312:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000316:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 8000318:	f644 50e0 	movw	r0, #19936	; 0x4de0
 800031c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000320:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 8000322:	f644 601c 	movw	r0, #19996	; 0x4e1c
 8000326:	f6c0 0000 	movt	r0, #2048	; 0x800
 800032a:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 800032c:	f644 6058 	movw	r0, #20056	; 0x4e58
 8000330:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000334:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000336:	4628      	mov	r0, r5
 8000338:	47a0      	blx	r4
	Lb_printf("\n");
 800033a:	f644 6094 	movw	r0, #20116	; 0x4e94
 800033e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000342:	47a0      	blx	r4
 8000344:	bd38      	pop	{r3, r4, r5, pc}
 8000346:	bf00      	nop

08000348 <Ap_GLcdMenu_GetCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_GetCmd(void)
{
 8000348:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 800034a:	f644 6098 	movw	r0, #20120	; 0x4e98
 800034e:	f640 5491 	movw	r4, #3473	; 0xd91
 8000352:	f6c0 0400 	movt	r4, #2048	; 0x800
 8000356:	f6c0 0000 	movt	r0, #2048	; 0x800
 800035a:	47a0      	blx	r4

    key=get_byte();
 800035c:	f241 6345 	movw	r3, #5701	; 0x1645
 8000360:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000364:	4798      	blx	r3
 8000366:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 8000368:	f644 6094 	movw	r0, #20116	; 0x4e94
 800036c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000370:	47a0      	blx	r4
	
    return key;
}
 8000372:	4628      	mov	r0, r5
 8000374:	bd38      	pop	{r3, r4, r5, pc}
 8000376:	bf00      	nop

08000378 <Ap_GLcdMenu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 8000378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();	
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
 800037c:	2400      	movs	r4, #0
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 800037e:	b083      	sub	sp, #12
	static s8  CircleX  = 0;	
			
	
	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();	
 8000380:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8000570 <Ap_GLcdMenu_ExeCmd+0x1f8>
 8000384:	47c8      	blx	r9
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
 8000386:	4d6c      	ldr	r5, [pc, #432]	; (8000538 <Ap_GLcdMenu_ExeCmd+0x1c0>)
 8000388:	2001      	movs	r0, #1
 800038a:	2132      	movs	r1, #50	; 0x32
 800038c:	2202      	movs	r2, #2
 800038e:	4b6b      	ldr	r3, [pc, #428]	; (800053c <Ap_GLcdMenu_ExeCmd+0x1c4>)
 8000390:	9400      	str	r4, [sp, #0]
 8000392:	47a8      	blx	r5
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
 8000394:	2002      	movs	r0, #2
 8000396:	9400      	str	r4, [sp, #0]
 8000398:	2164      	movs	r1, #100	; 0x64
 800039a:	4602      	mov	r2, r0
 800039c:	4b68      	ldr	r3, [pc, #416]	; (8000540 <Ap_GLcdMenu_ExeCmd+0x1c8>)
 800039e:	47a8      	blx	r5
 80003a0:	4c68      	ldr	r4, [pc, #416]	; (8000544 <Ap_GLcdMenu_ExeCmd+0x1cc>)
				Hw_Timer_Start( HW_TIMER_CH_DEBUG1 );
				Hw_Timer_Start( HW_TIMER_CH_DEBUG2 );
               break;  

           case '5':
				Hw_Timer_Stop( HW_TIMER_CH_DEBUG1 );
 80003a2:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000574 <Ap_GLcdMenu_ExeCmd+0x1fc>
				Hw_N5110G_DrawRequest();
						
               break; 

           case '4':
				Hw_Timer_Start( HW_TIMER_CH_DEBUG1 );
 80003a6:	4f68      	ldr	r7, [pc, #416]	; (8000548 <Ap_GLcdMenu_ExeCmd+0x1d0>)
           		Hw_N5110G_DrawRequest();
           		
				break;

           case '3':
           		Lb_printf("Count -- \n");
 80003a8:	4e68      	ldr	r6, [pc, #416]	; (800054c <Ap_GLcdMenu_ExeCmd+0x1d4>)
              
				Hw_N5110G_DrawPrint(0,0,"Smartrobot BD");								
 80003aa:	4d69      	ldr	r5, [pc, #420]	; (8000550 <Ap_GLcdMenu_ExeCmd+0x1d8>)
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 80003ac:	47a0      	blx	r4
 80003ae:	4603      	mov	r3, r0
    {
        switch(key)
 80003b0:	3b31      	subs	r3, #49	; 0x31
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 80003b2:	2800      	cmp	r0, #0
 80003b4:	f000 808a 	beq.w	80004cc <Ap_GLcdMenu_ExeCmd+0x154>
    {
        switch(key)
 80003b8:	2b3c      	cmp	r3, #60	; 0x3c
 80003ba:	d8f7      	bhi.n	80003ac <Ap_GLcdMenu_ExeCmd+0x34>
 80003bc:	a201      	add	r2, pc, #4	; (adr r2, 80003c4 <Ap_GLcdMenu_ExeCmd+0x4c>)
 80003be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c2:	bf00      	nop
 80003c4:	0800052b 	.word	0x0800052b
 80003c8:	0800050d 	.word	0x0800050d
 80003cc:	080004dd 	.word	0x080004dd
 80003d0:	080004d3 	.word	0x080004d3
 80003d4:	080004b9 	.word	0x080004b9
 80003d8:	080003ad 	.word	0x080003ad
 80003dc:	080003ad 	.word	0x080003ad
 80003e0:	080003ad 	.word	0x080003ad
 80003e4:	080003ad 	.word	0x080003ad
 80003e8:	080003ad 	.word	0x080003ad
 80003ec:	080003ad 	.word	0x080003ad
 80003f0:	080003ad 	.word	0x080003ad
 80003f4:	080003ad 	.word	0x080003ad
 80003f8:	080003ad 	.word	0x080003ad
 80003fc:	080003ad 	.word	0x080003ad
 8000400:	080003ad 	.word	0x080003ad
 8000404:	080003ad 	.word	0x080003ad
 8000408:	080003ad 	.word	0x080003ad
 800040c:	080003ad 	.word	0x080003ad
 8000410:	080003ad 	.word	0x080003ad
 8000414:	080003ad 	.word	0x080003ad
 8000418:	080003ad 	.word	0x080003ad
 800041c:	080003ad 	.word	0x080003ad
 8000420:	080003ad 	.word	0x080003ad
 8000424:	080003ad 	.word	0x080003ad
 8000428:	080003ad 	.word	0x080003ad
 800042c:	080003ad 	.word	0x080003ad
 8000430:	080003ad 	.word	0x080003ad
 8000434:	08000535 	.word	0x08000535
 8000438:	080003ad 	.word	0x080003ad
 800043c:	080003ad 	.word	0x080003ad
 8000440:	080003ad 	.word	0x080003ad
 8000444:	080003ad 	.word	0x080003ad
 8000448:	080003ad 	.word	0x080003ad
 800044c:	080003ad 	.word	0x080003ad
 8000450:	080003ad 	.word	0x080003ad
 8000454:	080003ad 	.word	0x080003ad
 8000458:	080003ad 	.word	0x080003ad
 800045c:	080003ad 	.word	0x080003ad
 8000460:	080003ad 	.word	0x080003ad
 8000464:	080003ad 	.word	0x080003ad
 8000468:	080003ad 	.word	0x080003ad
 800046c:	080003ad 	.word	0x080003ad
 8000470:	080003ad 	.word	0x080003ad
 8000474:	080003ad 	.word	0x080003ad
 8000478:	080003ad 	.word	0x080003ad
 800047c:	080003ad 	.word	0x080003ad
 8000480:	080003ad 	.word	0x080003ad
 8000484:	080003ad 	.word	0x080003ad
 8000488:	080003ad 	.word	0x080003ad
 800048c:	080003ad 	.word	0x080003ad
 8000490:	080003ad 	.word	0x080003ad
 8000494:	080003ad 	.word	0x080003ad
 8000498:	080003ad 	.word	0x080003ad
 800049c:	080003ad 	.word	0x080003ad
 80004a0:	080003ad 	.word	0x080003ad
 80004a4:	080003ad 	.word	0x080003ad
 80004a8:	080003ad 	.word	0x080003ad
 80004ac:	080003ad 	.word	0x080003ad
 80004b0:	080003ad 	.word	0x080003ad
 80004b4:	08000535 	.word	0x08000535
				Hw_Timer_Start( HW_TIMER_CH_DEBUG1 );
				Hw_Timer_Start( HW_TIMER_CH_DEBUG2 );
               break;  

           case '5':
				Hw_Timer_Stop( HW_TIMER_CH_DEBUG1 );
 80004b8:	2001      	movs	r0, #1
 80004ba:	47c0      	blx	r8
				Hw_Timer_Stop( HW_TIMER_CH_DEBUG2 );
 80004bc:	2002      	movs	r0, #2
 80004be:	47c0      	blx	r8
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 80004c0:	47a0      	blx	r4
 80004c2:	4603      	mov	r3, r0
    {
        switch(key)
 80004c4:	3b31      	subs	r3, #49	; 0x31
		
		Hw_Timer_Set( HW_TIMER_CH_DEBUG1,  50, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_1st, NULL );
		Hw_Timer_Set( HW_TIMER_CH_DEBUG2, 100, LOOP_TIME, Ap_GCldMenu_MoveCircleTick_2nd, NULL );		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 80004c6:	2800      	cmp	r0, #0
 80004c8:	f47f af76 	bne.w	80003b8 <Ap_GLcdMenu_ExeCmd+0x40>
               break;
        }
    }
    
    return key;
}
 80004cc:	b003      	add	sp, #12
 80004ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				Hw_N5110G_DrawRequest();
						
               break; 

           case '4':
				Hw_Timer_Start( HW_TIMER_CH_DEBUG1 );
 80004d2:	2001      	movs	r0, #1
 80004d4:	47b8      	blx	r7
				Hw_Timer_Start( HW_TIMER_CH_DEBUG2 );
 80004d6:	2002      	movs	r0, #2
 80004d8:	47b8      	blx	r7
               break;  
 80004da:	e767      	b.n	80003ac <Ap_GLcdMenu_ExeCmd+0x34>
           		Hw_N5110G_DrawRequest();
           		
				break;

           case '3':
           		Lb_printf("Count -- \n");
 80004dc:	481d      	ldr	r0, [pc, #116]	; (8000554 <Ap_GLcdMenu_ExeCmd+0x1dc>)
 80004de:	47b0      	blx	r6
              
				Hw_N5110G_DrawPrint(0,0,"Smartrobot BD");								
 80004e0:	2000      	movs	r0, #0
 80004e2:	4601      	mov	r1, r0
 80004e4:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <Ap_GLcdMenu_ExeCmd+0x1e0>)
 80004e6:	47a8      	blx	r5
				Hw_N5110G_DrawPrint(0,2,"Count : %4d", --Count);						
 80004e8:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8000578 <Ap_GLcdMenu_ExeCmd+0x200>
 80004ec:	4a1b      	ldr	r2, [pc, #108]	; (800055c <Ap_GLcdMenu_ExeCmd+0x1e4>)
 80004ee:	f89e c000 	ldrb.w	ip, [lr]
 80004f2:	2102      	movs	r1, #2
 80004f4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004f8:	fa5f fc80 	uxtb.w	ip, r0
 80004fc:	4663      	mov	r3, ip
 80004fe:	2000      	movs	r0, #0
 8000500:	f88e c000 	strb.w	ip, [lr]
 8000504:	47a8      	blx	r5
				Hw_N5110G_DrawRequest();
 8000506:	4916      	ldr	r1, [pc, #88]	; (8000560 <Ap_GLcdMenu_ExeCmd+0x1e8>)
 8000508:	4788      	blx	r1
						
               break; 
 800050a:	e74f      	b.n	80003ac <Ap_GLcdMenu_ExeCmd+0x34>
           		Lb_printf("LCD Clear \n");
           		Hw_N5110G_Clear();
               	break;

           case '2':
           		Lb_printf("Count ++ \n");
 800050c:	4815      	ldr	r0, [pc, #84]	; (8000564 <Ap_GLcdMenu_ExeCmd+0x1ec>)
 800050e:	47b0      	blx	r6
                     		
				Hw_N5110G_DrawPrint(0,0,"Smartrobot BD");								
 8000510:	2000      	movs	r0, #0
 8000512:	4601      	mov	r1, r0
 8000514:	4a10      	ldr	r2, [pc, #64]	; (8000558 <Ap_GLcdMenu_ExeCmd+0x1e0>)
 8000516:	47a8      	blx	r5
				Hw_N5110G_DrawPrint(0,2,"Count : %4d", ++Count);						
 8000518:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8000578 <Ap_GLcdMenu_ExeCmd+0x200>
 800051c:	2102      	movs	r1, #2
 800051e:	f89e 3000 	ldrb.w	r3, [lr]
 8000522:	4a0e      	ldr	r2, [pc, #56]	; (800055c <Ap_GLcdMenu_ExeCmd+0x1e4>)
 8000524:	f103 0001 	add.w	r0, r3, #1
 8000528:	e7e6      	b.n	80004f8 <Ap_GLcdMenu_ExeCmd+0x180>
    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		Lb_printf("LCD Clear \n");
 800052a:	480f      	ldr	r0, [pc, #60]	; (8000568 <Ap_GLcdMenu_ExeCmd+0x1f0>)
 800052c:	47b0      	blx	r6
           		Hw_N5110G_Clear();
 800052e:	4a0f      	ldr	r2, [pc, #60]	; (800056c <Ap_GLcdMenu_ExeCmd+0x1f4>)
 8000530:	4790      	blx	r2
               	break;
 8000532:	e73b      	b.n	80003ac <Ap_GLcdMenu_ExeCmd+0x34>
           case '0':
               break;

			case 'm':
			case 'M':
				Ap_GLcdMenu_ShowMenu();
 8000534:	47c8      	blx	r9
				break;
 8000536:	e739      	b.n	80003ac <Ap_GLcdMenu_ExeCmd+0x34>
 8000538:	08001b49 	.word	0x08001b49
 800053c:	08000231 	.word	0x08000231
 8000540:	080001bd 	.word	0x080001bd
 8000544:	08000349 	.word	0x08000349
 8000548:	08001b69 	.word	0x08001b69
 800054c:	08000d91 	.word	0x08000d91
 8000550:	08002b91 	.word	0x08002b91
 8000554:	08004ed0 	.word	0x08004ed0
 8000558:	08004eb4 	.word	0x08004eb4
 800055c:	08004ec4 	.word	0x08004ec4
 8000560:	08002acd 	.word	0x08002acd
 8000564:	08004ea8 	.word	0x08004ea8
 8000568:	08004e9c 	.word	0x08004e9c
 800056c:	0800297d 	.word	0x0800297d
 8000570:	080002a5 	.word	0x080002a5
 8000574:	08001b7d 	.word	0x08001b7d
 8000578:	20000403 	.word	0x20000403

0800057c <print_byte_out>:




void print_byte_out(unsigned int c)
{
 800057c:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 8000580:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 8000582:	7819      	ldrb	r1, [r3, #0]
 8000584:	b151      	cbz	r1, 800059c <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8000586:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <print_byte_out+0x2c>)
 8000588:	4908      	ldr	r1, [pc, #32]	; (80005ac <print_byte_out+0x30>)
 800058a:	6814      	ldr	r4, [r2, #0]
 800058c:	6808      	ldr	r0, [r1, #0]
 800058e:	1c63      	adds	r3, r4, #1
 8000590:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8000592:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8000594:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8000596:	2200      	movs	r2, #0
 8000598:	54ca      	strb	r2, [r1, r3]
 800059a:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <print_byte_out+0x34>)
 800059e:	4798      	blx	r3
 80005a0:	bd38      	pop	{r3, r4, r5, pc}
 80005a2:	bf00      	nop
 80005a4:	2000040c 	.word	0x2000040c
 80005a8:	20000408 	.word	0x20000408
 80005ac:	200004d4 	.word	0x200004d4
 80005b0:	08001609 	.word	0x08001609

080005b4 <PrintString>:
        }
        return;
}

void PrintString(char *fmt, char *s)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
        if (!fmt || !s) return;
 80005b6:	b148      	cbz	r0, 80005cc <PrintString+0x18>
 80005b8:	b141      	cbz	r1, 80005cc <PrintString+0x18>
        while (*s) print_byte_out(*s++);
 80005ba:	7808      	ldrb	r0, [r1, #0]
 80005bc:	b130      	cbz	r0, 80005cc <PrintString+0x18>
 80005be:	4d04      	ldr	r5, [pc, #16]	; (80005d0 <PrintString+0x1c>)
 80005c0:	460c      	mov	r4, r1
 80005c2:	47a8      	blx	r5
 80005c4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d1fa      	bne.n	80005c2 <PrintString+0xe>
 80005cc:	bd38      	pop	{r3, r4, r5, pc}
 80005ce:	bf00      	nop
 80005d0:	0800057d 	.word	0x0800057d

080005d4 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 80005d4:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 80005d6:	b1c8      	cbz	r0, 800060c <DecToLong+0x38>
 80005d8:	7803      	ldrb	r3, [r0, #0]
 80005da:	b1cb      	cbz	r3, 8000610 <DecToLong+0x3c>


        for (*retval=0; *s; s++){
 80005dc:	2300      	movs	r3, #0
 80005de:	600b      	str	r3, [r1, #0]
 80005e0:	7802      	ldrb	r2, [r0, #0]
 80005e2:	b192      	cbz	r2, 800060a <DecToLong+0x36>
                if (*s < '0' || *s > '9') return false;
 80005e4:	3a30      	subs	r2, #48	; 0x30
 80005e6:	b2d4      	uxtb	r4, r2
 80005e8:	2c09      	cmp	r4, #9
 80005ea:	d902      	bls.n	80005f2 <DecToLong+0x1e>
 80005ec:	e012      	b.n	8000614 <DecToLong+0x40>
 80005ee:	2d09      	cmp	r5, #9
 80005f0:	d810      	bhi.n	8000614 <DecToLong+0x40>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 80005f2:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80005f6:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 80005fa:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80005fc:	f810 4f01 	ldrb.w	r4, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 8000600:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8000604:	b2d5      	uxtb	r5, r2
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 8000606:	2c00      	cmp	r4, #0
 8000608:	d1f1      	bne.n	80005ee <DecToLong+0x1a>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 800060a:	2001      	movs	r0, #1
}        // DecToLong.
 800060c:	bc30      	pop	{r4, r5}
 800060e:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 8000610:	4618      	mov	r0, r3
 8000612:	e7fb      	b.n	800060c <DecToLong+0x38>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 8000614:	2000      	movs	r0, #0
 8000616:	e7f9      	b.n	800060c <DecToLong+0x38>

08000618 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	4682      	mov	sl, r0
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800061e:	7800      	ldrb	r0, [r0, #0]
        return;
}


void PrintDec(char *fmt, int l)
{
 8000620:	b084      	sub	sp, #16
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 8000622:	2600      	movs	r6, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 8000624:	4689      	mov	r9, r1
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 8000626:	9600      	str	r6, [sp, #0]
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000628:	2800      	cmp	r0, #0
 800062a:	f000 8098 	beq.w	800075e <PrintDec+0x146>
	{
		if (c=='d') break;
 800062e:	2864      	cmp	r0, #100	; 0x64
 8000630:	f000 8095 	beq.w	800075e <PrintDec+0x146>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 8000634:	4fbb      	ldr	r7, [pc, #748]	; (8000924 <PrintDec+0x30c>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 8000636:	4634      	mov	r4, r6
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8000638:	46b0      	mov	r8, r6

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 800063a:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
 800063e:	2a08      	cmp	r2, #8
 8000640:	f200 8089 	bhi.w	8000756 <PrintDec+0x13e>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000644:	f81a 2004 	ldrb.w	r2, [sl, r4]
 8000648:	eb0a 0504 	add.w	r5, sl, r4
 800064c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000650:	2b09      	cmp	r3, #9
 8000652:	a801      	add	r0, sp, #4
 8000654:	f04f 0300 	mov.w	r3, #0
 8000658:	d808      	bhi.n	800066c <PrintDec+0x54>
			{
				tol[j] = s[i++];
 800065a:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800065c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			{
				tol[j] = s[i++];
 8000660:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000662:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000666:	3301      	adds	r3, #1
 8000668:	2909      	cmp	r1, #9
 800066a:	d9f6      	bls.n	800065a <PrintDec+0x42>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800066c:	ad04      	add	r5, sp, #16
 800066e:	18ea      	adds	r2, r5, r3
			i--;
			DecToLong(tol, &flagcnt);
 8000670:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8000672:	f802 8c0c 	strb.w	r8, [r2, #-12]
			i--;
 8000676:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 8000678:	47b8      	blx	r7
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800067a:	3401      	adds	r4, #1
 800067c:	f81a 0004 	ldrb.w	r0, [sl, r4]
 8000680:	b108      	cbz	r0, 8000686 <PrintDec+0x6e>
	{
		if (c=='d') break;
 8000682:	2864      	cmp	r0, #100	; 0x64
 8000684:	d1d9      	bne.n	800063a <PrintDec+0x22>
		else if (c=='l') flagl=true;
		else continue;
	}

	// 위의 flag에 따라 출력.
	if (flagcnt)
 8000686:	9800      	ldr	r0, [sp, #0]
 8000688:	2800      	cmp	r0, #0
 800068a:	d068      	beq.n	800075e <PrintDec+0x146>
	{
                if (flagcnt>9) flagcnt=9;
 800068c:	2809      	cmp	r0, #9
 800068e:	f300 8109 	bgt.w	80008a4 <PrintDec+0x28c>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 8000692:	1e47      	subs	r7, r0, #1


        while (cnt--){
 8000694:	1e81      	subs	r1, r0, #2
 8000696:	1ec5      	subs	r5, r0, #3
 8000698:	2f00      	cmp	r7, #0
 800069a:	f000 8108 	beq.w	80008ae <PrintDec+0x296>
 800069e:	f001 0401 	and.w	r4, r1, #1
                retval *= num;
 80006a2:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006a4:	1e4a      	subs	r2, r1, #1
 80006a6:	b171      	cbz	r1, 80006c6 <PrintDec+0xae>
 80006a8:	b124      	cbz	r4, 80006b4 <PrintDec+0x9c>
 80006aa:	3a01      	subs	r2, #1
 80006ac:	1c51      	adds	r1, r2, #1
                retval *= num;
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006b2:	d008      	beq.n	80006c6 <PrintDec+0xae>
                retval *= num;
 80006b4:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80006b8:	00f9      	lsls	r1, r7, #3
 80006ba:	eb01 0447 	add.w	r4, r1, r7, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006be:	3a02      	subs	r2, #2
                retval *= num;
 80006c0:	0063      	lsls	r3, r4, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006c2:	1c57      	adds	r7, r2, #1
 80006c4:	d1f6      	bne.n	80006b4 <PrintDec+0x9c>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80006c6:	fb99 f2f3 	sdiv	r2, r9, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006ca:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80006cc:	fb03 9912 	mls	r9, r3, r2, r9
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006d0:	f000 80ef 	beq.w	80008b2 <PrintDec+0x29a>
 80006d4:	f005 0001 	and.w	r0, r5, #1
                retval *= num;
 80006d8:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006da:	1e6b      	subs	r3, r5, #1
 80006dc:	b175      	cbz	r5, 80006fc <PrintDec+0xe4>
 80006de:	b120      	cbz	r0, 80006ea <PrintDec+0xd2>
 80006e0:	3b01      	subs	r3, #1
 80006e2:	1c58      	adds	r0, r3, #1
                retval *= num;
 80006e4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006e8:	d008      	beq.n	80006fc <PrintDec+0xe4>
                retval *= num;
 80006ea:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 80006ee:	00ef      	lsls	r7, r5, #3
 80006f0:	eb07 0145 	add.w	r1, r7, r5, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006f4:	3b02      	subs	r3, #2
                retval *= num;
 80006f6:	004c      	lsls	r4, r1, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006f8:	1c5d      	adds	r5, r3, #1
 80006fa:	d1f6      	bne.n	80006ea <PrintDec+0xd2>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80006fc:	f246 6567 	movw	r5, #26215	; 0x6667
 8000700:	4f89      	ldr	r7, [pc, #548]	; (8000928 <PrintDec+0x310>)
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 8000702:	f04f 0801 	mov.w	r8, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000706:	f2c6 6566 	movt	r5, #26214	; 0x6666
 800070a:	e00f      	b.n	800072c <PrintDec+0x114>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 800070c:	2c01      	cmp	r4, #1
 800070e:	d015      	beq.n	800073c <PrintDec+0x124>


                        if (leading_zero==true){
 8000710:	f1b8 0f00 	cmp.w	r8, #0
 8000714:	d012      	beq.n	800073c <PrintDec+0x124>
                                if (flag0)        print_byte_out('0');
 8000716:	2030      	movs	r0, #48	; 0x30
 8000718:	b906      	cbnz	r6, 800071c <PrintDec+0x104>
                                else                print_byte_out(' ');
 800071a:	2020      	movs	r0, #32
 800071c:	47b8      	blx	r7
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800071e:	fb85 2004 	smull	r2, r0, r5, r4
 8000722:	17e4      	asrs	r4, r4, #31
 8000724:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
 8000728:	2c00      	cmp	r4, #0
 800072a:	dd11      	ble.n	8000750 <PrintDec+0x138>
                        result = remainder/divisor;
 800072c:	fb99 f2f4 	sdiv	r2, r9, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8000730:	b2d0      	uxtb	r0, r2
 8000732:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000734:	fb04 9912 	mls	r9, r4, r2, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 8000738:	2a00      	cmp	r2, #0
 800073a:	d0e7      	beq.n	800070c <PrintDec+0xf4>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800073c:	47b8      	blx	r7
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800073e:	fb85 2004 	smull	r2, r0, r5, r4
 8000742:	17e4      	asrs	r4, r4, #31
 8000744:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
 8000748:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800074a:	f04f 0800 	mov.w	r8, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800074e:	dced      	bgt.n	800072c <PrintDec+0x114>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 8000750:	b004      	add	sp, #16
 8000752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 8000756:	2830      	cmp	r0, #48	; 0x30
 8000758:	bf08      	it	eq
 800075a:	2601      	moveq	r6, #1
 800075c:	e78d      	b.n	800067a <PrintDec+0x62>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800075e:	f642 73a1 	movw	r3, #12193	; 0x2fa1
 8000762:	f2c4 43b8 	movt	r3, #17592	; 0x44b8
 8000766:	fb83 2509 	smull	r2, r5, r3, r9
 800076a:	ea4f 71e9 	mov.w	r1, r9, asr #31
                        remainder %= divisor;
 800076e:	f44f 424a 	mov.w	r2, #51712	; 0xca00
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000772:	ebc1 7025 	rsb	r0, r1, r5, asr #28
                        remainder %= divisor;
 8000776:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
 800077a:	fb02 9910 	mls	r9, r2, r0, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 800077e:	2800      	cmp	r0, #0
 8000780:	f000 8099 	beq.w	80008b6 <PrintDec+0x29e>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000784:	b2c0      	uxtb	r0, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000786:	f643 3589 	movw	r5, #15241	; 0x3b89
 800078a:	f2c5 55e6 	movt	r5, #21990	; 0x55e6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800078e:	3030      	adds	r0, #48	; 0x30
 8000790:	4c65      	ldr	r4, [pc, #404]	; (8000928 <PrintDec+0x310>)
 8000792:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000794:	fb85 2309 	smull	r2, r3, r5, r9
                        remainder %= divisor;
 8000798:	f44f 4161 	mov.w	r1, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800079c:	ea4f 72e9 	mov.w	r2, r9, asr #31
 80007a0:	ebc2 6263 	rsb	r2, r2, r3, asr #25
                        remainder %= divisor;
 80007a4:	f2c0 51f5 	movt	r1, #1525	; 0x5f5
 80007a8:	fb01 9512 	mls	r5, r1, r2, r9


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80007ac:	b2d0      	uxtb	r0, r2
 80007ae:	3030      	adds	r0, #48	; 0x30
 80007b0:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007b2:	f64c 206b 	movw	r0, #51819	; 0xca6b
 80007b6:	f6c6 305f 	movt	r0, #27487	; 0x6b5f
 80007ba:	fb80 2305 	smull	r2, r3, r0, r5
 80007be:	17e9      	asrs	r1, r5, #31
                        remainder %= divisor;
 80007c0:	f249 6280 	movw	r2, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007c4:	ebc1 50a3 	rsb	r0, r1, r3, asr #22
                        remainder %= divisor;
 80007c8:	f2c0 0298 	movt	r2, #152	; 0x98
 80007cc:	fb02 5510 	mls	r5, r2, r0, r5


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80007d0:	b2c0      	uxtb	r0, r0
 80007d2:	3030      	adds	r0, #48	; 0x30
 80007d4:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007d6:	f64d 6083 	movw	r0, #56963	; 0xde83
 80007da:	f2c4 301b 	movt	r0, #17179	; 0x431b
 80007de:	fb80 2305 	smull	r2, r3, r0, r5
 80007e2:	17e9      	asrs	r1, r5, #31
                        remainder %= divisor;
 80007e4:	f244 2240 	movw	r2, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007e8:	ebc1 40a3 	rsb	r0, r1, r3, asr #18
                        remainder %= divisor;
 80007ec:	f2c0 020f 	movt	r2, #15
 80007f0:	fb02 5510 	mls	r5, r2, r0, r5


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80007f4:	b2c0      	uxtb	r0, r0
 80007f6:	3030      	adds	r0, #48	; 0x30
 80007f8:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007fa:	f24b 5089 	movw	r0, #46473	; 0xb589
 80007fe:	f2c1 40f8 	movt	r0, #5368	; 0x14f8
 8000802:	fb80 2305 	smull	r2, r3, r0, r5
 8000806:	17e9      	asrs	r1, r5, #31
                        remainder %= divisor;
 8000808:	f248 62a0 	movw	r2, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800080c:	ebc1 3063 	rsb	r0, r1, r3, asr #13
                        remainder %= divisor;
 8000810:	f2c0 0201 	movt	r2, #1
 8000814:	fb02 5510 	mls	r5, r2, r0, r5


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000818:	b2c0      	uxtb	r0, r0
 800081a:	3030      	adds	r0, #48	; 0x30
 800081c:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800081e:	f648 30ad 	movw	r0, #35757	; 0x8bad
 8000822:	f6c6 00db 	movt	r0, #26843	; 0x68db
 8000826:	fb80 2305 	smull	r2, r3, r0, r5
 800082a:	17e9      	asrs	r1, r5, #31
 800082c:	ebc1 3123 	rsb	r1, r1, r3, asr #12
                        remainder %= divisor;
 8000830:	f242 7210 	movw	r2, #10000	; 0x2710
 8000834:	fb02 5511 	mls	r5, r2, r1, r5


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000838:	b2c8      	uxtb	r0, r1
 800083a:	3030      	adds	r0, #48	; 0x30
 800083c:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800083e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
 8000842:	f2c1 0062 	movt	r0, #4194	; 0x1062
 8000846:	fb80 2305 	smull	r2, r3, r0, r5
 800084a:	17e9      	asrs	r1, r5, #31
 800084c:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
                        remainder %= divisor;
 8000850:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000854:	fb02 5511 	mls	r5, r2, r1, r5


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000858:	b2c8      	uxtb	r0, r1
 800085a:	3030      	adds	r0, #48	; 0x30
 800085c:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800085e:	f248 501f 	movw	r0, #34079	; 0x851f
 8000862:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
 8000866:	fb80 2305 	smull	r2, r3, r0, r5
 800086a:	17e9      	asrs	r1, r5, #31
 800086c:	ebc1 1163 	rsb	r1, r1, r3, asr #5
                        remainder %= divisor;
 8000870:	2264      	movs	r2, #100	; 0x64
 8000872:	fb02 5511 	mls	r5, r2, r1, r5


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000876:	b2c8      	uxtb	r0, r1
 8000878:	3030      	adds	r0, #48	; 0x30
 800087a:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800087c:	f246 6067 	movw	r0, #26215	; 0x6667
 8000880:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8000884:	fb80 2305 	smull	r2, r3, r0, r5
 8000888:	17e9      	asrs	r1, r5, #31
 800088a:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
                        remainder %= divisor;
 800088e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000892:	eba5 0542 	sub.w	r5, r5, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000896:	b2c8      	uxtb	r0, r1
 8000898:	3030      	adds	r0, #48	; 0x30
 800089a:	47a0      	blx	r4
 800089c:	b2e8      	uxtb	r0, r5
 800089e:	3030      	adds	r0, #48	; 0x30
 80008a0:	47a0      	blx	r4
 80008a2:	e755      	b.n	8000750 <PrintDec+0x138>
	}

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 80008a4:	2009      	movs	r0, #9
 80008a6:	9000      	str	r0, [sp, #0]
 80008a8:	2506      	movs	r5, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 80008aa:	2107      	movs	r1, #7
 80008ac:	e6f7      	b.n	800069e <PrintDec+0x86>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80008ae:	230a      	movs	r3, #10
 80008b0:	e709      	b.n	80006c6 <PrintDec+0xae>
 80008b2:	240a      	movs	r4, #10
 80008b4:	e722      	b.n	80006fc <PrintDec+0xe4>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80008b6:	f643 3489 	movw	r4, #15241	; 0x3b89
 80008ba:	f2c5 54e6 	movt	r4, #21990	; 0x55e6
 80008be:	fb84 2309 	smull	r2, r3, r4, r9
 80008c2:	ea4f 71e9 	mov.w	r1, r9, asr #31
                        remainder %= divisor;
 80008c6:	f44f 4561 	mov.w	r5, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80008ca:	ebc1 6263 	rsb	r2, r1, r3, asr #25
                        remainder %= divisor;
 80008ce:	f2c0 55f5 	movt	r5, #1525	; 0x5f5
 80008d2:	fb05 9512 	mls	r5, r5, r2, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 80008d6:	b10a      	cbz	r2, 80008dc <PrintDec+0x2c4>
 80008d8:	4c13      	ldr	r4, [pc, #76]	; (8000928 <PrintDec+0x310>)
 80008da:	e767      	b.n	80007ac <PrintDec+0x194>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80008dc:	f64c 206b 	movw	r0, #51819	; 0xca6b
 80008e0:	f6c6 305f 	movt	r0, #27487	; 0x6b5f
 80008e4:	fb80 2405 	smull	r2, r4, r0, r5
 80008e8:	17eb      	asrs	r3, r5, #31
                        remainder %= divisor;
 80008ea:	f249 6180 	movw	r1, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80008ee:	ebc3 50a4 	rsb	r0, r3, r4, asr #22
                        remainder %= divisor;
 80008f2:	f2c0 0198 	movt	r1, #152	; 0x98
 80008f6:	fb01 5510 	mls	r5, r1, r0, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 80008fa:	2800      	cmp	r0, #0
 80008fc:	d16a      	bne.n	80009d4 <PrintDec+0x3bc>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80008fe:	f64d 6283 	movw	r2, #56963	; 0xde83
 8000902:	f2c4 321b 	movt	r2, #17179	; 0x431b
 8000906:	fb82 2405 	smull	r2, r4, r2, r5
 800090a:	17eb      	asrs	r3, r5, #31
                        remainder %= divisor;
 800090c:	f244 2140 	movw	r1, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000910:	ebc3 40a4 	rsb	r0, r3, r4, asr #18
                        remainder %= divisor;
 8000914:	f2c0 010f 	movt	r1, #15
 8000918:	fb01 5510 	mls	r5, r1, r0, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 800091c:	b130      	cbz	r0, 800092c <PrintDec+0x314>
 800091e:	4c02      	ldr	r4, [pc, #8]	; (8000928 <PrintDec+0x310>)
 8000920:	e768      	b.n	80007f4 <PrintDec+0x1dc>
 8000922:	bf00      	nop
 8000924:	080005d5 	.word	0x080005d5
 8000928:	0800057d 	.word	0x0800057d
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800092c:	f24b 5289 	movw	r2, #46473	; 0xb589
 8000930:	f2c1 42f8 	movt	r2, #5368	; 0x14f8
 8000934:	fb82 2405 	smull	r2, r4, r2, r5
 8000938:	17eb      	asrs	r3, r5, #31
                        remainder %= divisor;
 800093a:	f248 61a0 	movw	r1, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800093e:	ebc3 3064 	rsb	r0, r3, r4, asr #13
                        remainder %= divisor;
 8000942:	f2c0 0101 	movt	r1, #1
 8000946:	fb01 5510 	mls	r5, r1, r0, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 800094a:	2800      	cmp	r0, #0
 800094c:	d140      	bne.n	80009d0 <PrintDec+0x3b8>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800094e:	f648 32ad 	movw	r2, #35757	; 0x8bad
 8000952:	f6c6 02db 	movt	r2, #26843	; 0x68db
 8000956:	fb82 2405 	smull	r2, r4, r2, r5
 800095a:	17eb      	asrs	r3, r5, #31
 800095c:	ebc3 3124 	rsb	r1, r3, r4, asr #12
                        remainder %= divisor;
 8000960:	f242 7010 	movw	r0, #10000	; 0x2710
 8000964:	fb00 5511 	mls	r5, r0, r1, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000968:	b109      	cbz	r1, 800096e <PrintDec+0x356>
 800096a:	4c1b      	ldr	r4, [pc, #108]	; (80009d8 <PrintDec+0x3c0>)
 800096c:	e764      	b.n	8000838 <PrintDec+0x220>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800096e:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 8000972:	f2c1 0262 	movt	r2, #4194	; 0x1062
 8000976:	fb82 2405 	smull	r2, r4, r2, r5
 800097a:	17eb      	asrs	r3, r5, #31
 800097c:	ebc3 11a4 	rsb	r1, r3, r4, asr #6
                        remainder %= divisor;
 8000980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000984:	fb00 5511 	mls	r5, r0, r1, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000988:	bb01      	cbnz	r1, 80009cc <PrintDec+0x3b4>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800098a:	f248 521f 	movw	r2, #34079	; 0x851f
 800098e:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
 8000992:	fb82 2405 	smull	r2, r4, r2, r5
 8000996:	17eb      	asrs	r3, r5, #31
 8000998:	ebc3 1164 	rsb	r1, r3, r4, asr #5
                        remainder %= divisor;
 800099c:	2064      	movs	r0, #100	; 0x64
 800099e:	fb00 5511 	mls	r5, r0, r1, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 80009a2:	b109      	cbz	r1, 80009a8 <PrintDec+0x390>
 80009a4:	4c0c      	ldr	r4, [pc, #48]	; (80009d8 <PrintDec+0x3c0>)
 80009a6:	e766      	b.n	8000876 <PrintDec+0x25e>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80009a8:	f246 6267 	movw	r2, #26215	; 0x6667
 80009ac:	f2c6 6266 	movt	r2, #26214	; 0x6666
 80009b0:	fb82 2405 	smull	r2, r4, r2, r5
 80009b4:	17eb      	asrs	r3, r5, #31
 80009b6:	ebc3 01a4 	rsb	r1, r3, r4, asr #2
                        remainder %= divisor;
 80009ba:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80009be:	eba5 0540 	sub.w	r5, r5, r0, lsl #1
 80009c2:	4c05      	ldr	r4, [pc, #20]	; (80009d8 <PrintDec+0x3c0>)


                        if (result!=0 || divisor==1) leading_zero = false;
 80009c4:	2900      	cmp	r1, #0
 80009c6:	f47f af66 	bne.w	8000896 <PrintDec+0x27e>
 80009ca:	e767      	b.n	800089c <PrintDec+0x284>
 80009cc:	4c02      	ldr	r4, [pc, #8]	; (80009d8 <PrintDec+0x3c0>)
 80009ce:	e743      	b.n	8000858 <PrintDec+0x240>
 80009d0:	4c01      	ldr	r4, [pc, #4]	; (80009d8 <PrintDec+0x3c0>)
 80009d2:	e721      	b.n	8000818 <PrintDec+0x200>
 80009d4:	4c00      	ldr	r4, [pc, #0]	; (80009d8 <PrintDec+0x3c0>)
 80009d6:	e6fb      	b.n	80007d0 <PrintDec+0x1b8>
 80009d8:	0800057d 	.word	0x0800057d

080009dc <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80009dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80009e0:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80009e2:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80009e4:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80009e6:	4681      	mov	r9, r0
 80009e8:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80009ea:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f000 80b7 	beq.w	8000b60 <PrintHex+0x184>
                if (c=='x') break;
 80009f2:	2b78      	cmp	r3, #120	; 0x78
 80009f4:	f000 80b4 	beq.w	8000b60 <PrintHex+0x184>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 80009f8:	4fb4      	ldr	r7, [pc, #720]	; (8000ccc <PrintHex+0x2f0>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 80009fa:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80009fc:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 80009fe:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000a02:	2a08      	cmp	r2, #8
 8000a04:	f200 80a8 	bhi.w	8000b58 <PrintHex+0x17c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000a08:	f819 2004 	ldrb.w	r2, [r9, r4]
 8000a0c:	eb09 0104 	add.w	r1, r9, r4
 8000a10:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000a14:	2b09      	cmp	r3, #9
 8000a16:	a803      	add	r0, sp, #12
 8000a18:	f04f 0300 	mov.w	r3, #0
 8000a1c:	d808      	bhi.n	8000a30 <PrintHex+0x54>
                                tol[j] = s[i++];
 8000a1e:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000a20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 8000a24:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000a26:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	2d09      	cmp	r5, #9
 8000a2e:	d9f6      	bls.n	8000a1e <PrintHex+0x42>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000a30:	a906      	add	r1, sp, #24
 8000a32:	18ca      	adds	r2, r1, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 8000a34:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000a36:	f802 8c0c 	strb.w	r8, [r2, #-12]
                        i--;
 8000a3a:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 8000a3c:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000a3e:	3401      	adds	r4, #1
 8000a40:	f819 3004 	ldrb.w	r3, [r9, r4]
 8000a44:	b10b      	cbz	r3, 8000a4a <PrintHex+0x6e>
                if (c=='x') break;
 8000a46:	2b78      	cmp	r3, #120	; 0x78
 8000a48:	d1d9      	bne.n	80009fe <PrintHex+0x22>
 8000a4a:	9901      	ldr	r1, [sp, #4]
 8000a4c:	9b02      	ldr	r3, [sp, #8]
 8000a4e:	ba0a      	rev	r2, r1
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000a50:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 8087 	beq.w	8000b66 <PrintHex+0x18a>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8000a58:	07da      	lsls	r2, r3, #31
 8000a5a:	f100 810f 	bmi.w	8000c7c <PrintHex+0x2a0>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000a5e:	2101      	movs	r1, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000a60:	f1c3 0208 	rsb	r2, r3, #8
 8000a64:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
 8000a68:	105a      	asrs	r2, r3, #1
 8000a6a:	2a03      	cmp	r2, #3
 8000a6c:	f300 80c9 	bgt.w	8000c02 <PrintHex+0x226>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000a70:	ac01      	add	r4, sp, #4
 8000a72:	18a5      	adds	r5, r4, r2
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000a74:	462c      	mov	r4, r5
 8000a76:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000a7a:	43ef      	mvns	r7, r5
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000a7c:	0903      	lsrs	r3, r0, #4
 8000a7e:	f007 0901 	and.w	r9, r7, #1
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000a82:	f10d 0808 	add.w	r8, sp, #8
 8000a86:	4d92      	ldr	r5, [pc, #584]	; (8000cd0 <PrintHex+0x2f4>)
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a88:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000a8c:	f000 8131 	beq.w	8000cf2 <PrintHex+0x316>
                        if (uHex<10) uHex+='0';
 8000a90:	2b09      	cmp	r3, #9
 8000a92:	f240 816e 	bls.w	8000d72 <PrintHex+0x396>
                        else         uHex+='A'-10;
 8000a96:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000a9a:	47a8      	blx	r5
 8000a9c:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	f000 8130 	beq.w	8000d04 <PrintHex+0x328>
                        if (lHex<10) lHex+='0';
 8000aa4:	2f09      	cmp	r7, #9
 8000aa6:	f240 8152 	bls.w	8000d4e <PrintHex+0x372>
                        else         lHex+='A'-10;
 8000aaa:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000aae:	47a8      	blx	r5
 8000ab0:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000ab2:	4544      	cmp	r4, r8
 8000ab4:	f000 80a5 	beq.w	8000c02 <PrintHex+0x226>
 8000ab8:	f1b9 0f00 	cmp.w	r9, #0
 8000abc:	d017      	beq.n	8000aee <PrintHex+0x112>
                        c = s[i];
 8000abe:	f814 0b01 	ldrb.w	r0, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000ac2:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000ac4:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000ac8:	d031      	beq.n	8000b2e <PrintHex+0x152>
                        if (uHex<10) uHex+='0';
 8000aca:	2b09      	cmp	r3, #9
 8000acc:	f240 8142 	bls.w	8000d54 <PrintHex+0x378>
                        else         uHex+='A'-10;
 8000ad0:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000ad4:	47a8      	blx	r5
 8000ad6:	2200      	movs	r2, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000ad8:	b3a7      	cbz	r7, 8000b44 <PrintHex+0x168>
                        if (lHex<10) lHex+='0';
 8000ada:	2f09      	cmp	r7, #9
 8000adc:	f240 813d 	bls.w	8000d5a <PrintHex+0x37e>
                        else         lHex+='A'-10;
 8000ae0:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000ae4:	47a8      	blx	r5
 8000ae6:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000ae8:	4544      	cmp	r4, r8
 8000aea:	f000 808a 	beq.w	8000c02 <PrintHex+0x226>
                        c = s[i];
 8000aee:	f814 3b01 	ldrb.w	r3, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000af2:	091a      	lsrs	r2, r3, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000af4:	f003 070f 	and.w	r7, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000af8:	f000 80d4 	beq.w	8000ca4 <PrintHex+0x2c8>
                        if (uHex<10) uHex+='0';
 8000afc:	2a09      	cmp	r2, #9
                        else         uHex+='A'-10;
 8000afe:	bf88      	it	hi
 8000b00:	f102 0037 	addhi.w	r0, r2, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000b04:	f240 812c 	bls.w	8000d60 <PrintHex+0x384>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000b08:	47a8      	blx	r5
 8000b0a:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000b0c:	2f00      	cmp	r7, #0
 8000b0e:	f000 80d2 	beq.w	8000cb6 <PrintHex+0x2da>
                        if (lHex<10) lHex+='0';
 8000b12:	2f09      	cmp	r7, #9
                        else         lHex+='A'-10;
 8000b14:	bf88      	it	hi
 8000b16:	f107 0037 	addhi.w	r0, r7, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000b1a:	f240 8124 	bls.w	8000d66 <PrintHex+0x38a>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000b1e:	47a8      	blx	r5
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000b20:	f814 0b01 	ldrb.w	r0, [r4], #1
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000b24:	2100      	movs	r1, #0
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000b26:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000b28:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000b2c:	d1cd      	bne.n	8000aca <PrintHex+0xee>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	f000 8110 	beq.w	8000d54 <PrintHex+0x378>
                                if (flag0) print_byte_out('0');
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	f040 80cd 	bne.w	8000cd4 <PrintHex+0x2f8>
                                else       print_byte_out(' ');
 8000b3a:	2020      	movs	r0, #32
 8000b3c:	47a8      	blx	r5
 8000b3e:	2201      	movs	r2, #1
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000b40:	2f00      	cmp	r7, #0
 8000b42:	d1ca      	bne.n	8000ada <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	f000 8108 	beq.w	8000d5a <PrintHex+0x37e>
                                if (flag0) print_byte_out('0');
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	f040 80ba 	bne.w	8000cc4 <PrintHex+0x2e8>
                                else       print_byte_out(' ');
 8000b50:	2020      	movs	r0, #32
 8000b52:	47a8      	blx	r5
 8000b54:	2101      	movs	r1, #1
 8000b56:	e7c7      	b.n	8000ae8 <PrintHex+0x10c>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8000b58:	2b30      	cmp	r3, #48	; 0x30
 8000b5a:	bf08      	it	eq
 8000b5c:	2601      	moveq	r6, #1
 8000b5e:	e76e      	b.n	8000a3e <PrintHex+0x62>
 8000b60:	9c01      	ldr	r4, [sp, #4]
 8000b62:	ba25      	rev	r5, r4
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000b64:	9501      	str	r5, [sp, #4]
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000b66:	f89d 3004 	ldrb.w	r3, [sp, #4]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000b6a:	091a      	lsrs	r2, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000b6c:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000b70:	d04a      	beq.n	8000c08 <PrintHex+0x22c>
                        if (uHex<10) uHex+='0';
 8000b72:	2a09      	cmp	r2, #9
 8000b74:	f240 80fa 	bls.w	8000d6c <PrintHex+0x390>
                        else         uHex+='A'-10;
 8000b78:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000b7c:	4d54      	ldr	r5, [pc, #336]	; (8000cd0 <PrintHex+0x2f4>)
 8000b7e:	47a8      	blx	r5
 8000b80:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d144      	bne.n	8000c10 <PrintHex+0x234>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	f000 80fb 	beq.w	8000d84 <PrintHex+0x3a8>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000b8e:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000b92:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000b94:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000b98:	d047      	beq.n	8000c2a <PrintHex+0x24e>
                        if (uHex<10) uHex+='0';
 8000b9a:	2909      	cmp	r1, #9
 8000b9c:	f240 80ec 	bls.w	8000d78 <PrintHex+0x39c>
                        else         uHex+='A'-10;
 8000ba0:	f101 0037 	add.w	r0, r1, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000ba4:	47a8      	blx	r5
 8000ba6:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000ba8:	2c00      	cmp	r4, #0
 8000baa:	d144      	bne.n	8000c36 <PrintHex+0x25a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 80e5 	beq.w	8000d7e <PrintHex+0x3a2>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000bb4:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000bb8:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000bba:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000bbe:	d047      	beq.n	8000c50 <PrintHex+0x274>
                        if (uHex<10) uHex+='0';
 8000bc0:	2b09      	cmp	r3, #9
 8000bc2:	f240 80be 	bls.w	8000d42 <PrintHex+0x366>
                        else         uHex+='A'-10;
 8000bc6:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000bca:	47a8      	blx	r5
 8000bcc:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d143      	bne.n	8000c5a <PrintHex+0x27e>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	f000 80b7 	beq.w	8000d48 <PrintHex+0x36c>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000bda:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000bde:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000be0:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000be4:	d045      	beq.n	8000c72 <PrintHex+0x296>
                        if (uHex<10) uHex+='0';
 8000be6:	2909      	cmp	r1, #9
                        else         uHex+='A'-10;
 8000be8:	bf88      	it	hi
 8000bea:	f101 0037 	addhi.w	r0, r1, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000bee:	d942      	bls.n	8000c76 <PrintHex+0x29a>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000bf0:	47a8      	blx	r5
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d07a      	beq.n	8000cec <PrintHex+0x310>
                        if (lHex<10) lHex+='0';
 8000bf6:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 8000bf8:	bf88      	it	hi
 8000bfa:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000bfe:	d975      	bls.n	8000cec <PrintHex+0x310>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000c00:	47a8      	blx	r5
                }
        }
        return;
}
 8000c02:	b007      	add	sp, #28
 8000c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4d31      	ldr	r5, [pc, #196]	; (8000cd0 <PrintHex+0x2f4>)
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000c0c:	2c00      	cmp	r4, #0
 8000c0e:	d0ba      	beq.n	8000b86 <PrintHex+0x1aa>
                        if (lHex<10) lHex+='0';
 8000c10:	2c09      	cmp	r4, #9
 8000c12:	f240 80b7 	bls.w	8000d84 <PrintHex+0x3a8>
                        else         lHex+='A'-10;
 8000c16:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000c1a:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000c1c:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000c20:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c22:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000c24:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c28:	d1b7      	bne.n	8000b9a <PrintHex+0x1be>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	f000 80a4 	beq.w	8000d78 <PrintHex+0x39c>
 8000c30:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d0ba      	beq.n	8000bac <PrintHex+0x1d0>
                        if (lHex<10) lHex+='0';
 8000c36:	2c09      	cmp	r4, #9
 8000c38:	f240 80a1 	bls.w	8000d7e <PrintHex+0x3a2>
                        else         lHex+='A'-10;
 8000c3c:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000c40:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000c42:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000c46:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c48:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000c4a:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c4e:	d1b7      	bne.n	8000bc0 <PrintHex+0x1e4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	d076      	beq.n	8000d42 <PrintHex+0x366>
 8000c54:	2101      	movs	r1, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000c56:	2c00      	cmp	r4, #0
 8000c58:	d0bb      	beq.n	8000bd2 <PrintHex+0x1f6>
                        if (lHex<10) lHex+='0';
 8000c5a:	2c09      	cmp	r4, #9
 8000c5c:	d974      	bls.n	8000d48 <PrintHex+0x36c>
                        else         lHex+='A'-10;
 8000c5e:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000c62:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000c64:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000c68:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c6a:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000c6c:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c70:	d1b9      	bne.n	8000be6 <PrintHex+0x20a>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d1bd      	bne.n	8000bf2 <PrintHex+0x216>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000c76:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000c7a:	e7b9      	b.n	8000bf0 <PrintHex+0x214>
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8000c7c:	43d8      	mvns	r0, r3
 8000c7e:	3008      	adds	r0, #8
 8000c80:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8000c84:	aa06      	add	r2, sp, #24
 8000c86:	eb02 0163 	add.w	r1, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 8000c8a:	f811 0c14 	ldrb.w	r0, [r1, #-20]
                        if (lHex!=0) leading_zero=false;
 8000c8e:	f010 030f 	ands.w	r3, r0, #15
 8000c92:	d045      	beq.n	8000d20 <PrintHex+0x344>
                        if (lHex<10) lHex+='0';
 8000c94:	2b09      	cmp	r3, #9
 8000c96:	d951      	bls.n	8000d3c <PrintHex+0x360>
                        else         lHex+='A'-10;
 8000c98:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <PrintHex+0x2f4>)
 8000c9e:	4798      	blx	r3
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	e042      	b.n	8000d2a <PrintHex+0x34e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	d05b      	beq.n	8000d60 <PrintHex+0x384>
                                if (flag0) print_byte_out('0');
 8000ca8:	b1e6      	cbz	r6, 8000ce4 <PrintHex+0x308>
 8000caa:	2030      	movs	r0, #48	; 0x30
 8000cac:	47a8      	blx	r5
 8000cae:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000cb0:	2f00      	cmp	r7, #0
 8000cb2:	f47f af2e 	bne.w	8000b12 <PrintHex+0x136>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d055      	beq.n	8000d66 <PrintHex+0x38a>
                                if (flag0) print_byte_out('0');
 8000cba:	b17e      	cbz	r6, 8000cdc <PrintHex+0x300>
 8000cbc:	2030      	movs	r0, #48	; 0x30
 8000cbe:	47a8      	blx	r5
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	e6fc      	b.n	8000abe <PrintHex+0xe2>
 8000cc4:	2030      	movs	r0, #48	; 0x30
 8000cc6:	47a8      	blx	r5
 8000cc8:	2101      	movs	r1, #1
 8000cca:	e70d      	b.n	8000ae8 <PrintHex+0x10c>
 8000ccc:	080005d5 	.word	0x080005d5
 8000cd0:	0800057d 	.word	0x0800057d
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000cd4:	2030      	movs	r0, #48	; 0x30
 8000cd6:	47a8      	blx	r5
 8000cd8:	2201      	movs	r2, #1
 8000cda:	e6fd      	b.n	8000ad8 <PrintHex+0xfc>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000cdc:	2020      	movs	r0, #32
 8000cde:	47a8      	blx	r5
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	e6ec      	b.n	8000abe <PrintHex+0xe2>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000ce4:	2020      	movs	r0, #32
 8000ce6:	47a8      	blx	r5
 8000ce8:	2101      	movs	r1, #1
 8000cea:	e70f      	b.n	8000b0c <PrintHex+0x130>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000cec:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000cf0:	e786      	b.n	8000c00 <PrintHex+0x224>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	d03d      	beq.n	8000d72 <PrintHex+0x396>
                                if (flag0) print_byte_out('0');
 8000cf6:	b17e      	cbz	r6, 8000d18 <PrintHex+0x33c>
 8000cf8:	2030      	movs	r0, #48	; 0x30
 8000cfa:	47a8      	blx	r5
 8000cfc:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000cfe:	2f00      	cmp	r7, #0
 8000d00:	f47f aed0 	bne.w	8000aa4 <PrintHex+0xc8>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000d04:	b319      	cbz	r1, 8000d4e <PrintHex+0x372>
                                if (flag0) print_byte_out('0');
 8000d06:	b11e      	cbz	r6, 8000d10 <PrintHex+0x334>
 8000d08:	2030      	movs	r0, #48	; 0x30
 8000d0a:	47a8      	blx	r5
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	e6d0      	b.n	8000ab2 <PrintHex+0xd6>
                                else       print_byte_out(' ');
 8000d10:	2020      	movs	r0, #32
 8000d12:	47a8      	blx	r5
 8000d14:	2101      	movs	r1, #1
 8000d16:	e6cc      	b.n	8000ab2 <PrintHex+0xd6>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000d18:	2020      	movs	r0, #32
 8000d1a:	47a8      	blx	r5
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	e6be      	b.n	8000a9e <PrintHex+0xc2>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000d20:	b13e      	cbz	r6, 8000d32 <PrintHex+0x356>
 8000d22:	491a      	ldr	r1, [pc, #104]	; (8000d8c <PrintHex+0x3b0>)
 8000d24:	2030      	movs	r0, #48	; 0x30
 8000d26:	4788      	blx	r1
 8000d28:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 8000d2a:	9802      	ldr	r0, [sp, #8]
 8000d2c:	1e43      	subs	r3, r0, #1
 8000d2e:	9302      	str	r3, [sp, #8]
 8000d30:	e696      	b.n	8000a60 <PrintHex+0x84>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000d32:	2020      	movs	r0, #32
 8000d34:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <PrintHex+0x3b0>)
 8000d36:	4790      	blx	r2
 8000d38:	2101      	movs	r1, #1
 8000d3a:	e7f6      	b.n	8000d2a <PrintHex+0x34e>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8000d3c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000d40:	e7ac      	b.n	8000c9c <PrintHex+0x2c0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000d42:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000d46:	e740      	b.n	8000bca <PrintHex+0x1ee>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000d48:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000d4c:	e789      	b.n	8000c62 <PrintHex+0x286>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000d4e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d52:	e6ac      	b.n	8000aae <PrintHex+0xd2>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000d54:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000d58:	e6bc      	b.n	8000ad4 <PrintHex+0xf8>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000d5a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d5e:	e6c1      	b.n	8000ae4 <PrintHex+0x108>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000d60:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8000d64:	e6d0      	b.n	8000b08 <PrintHex+0x12c>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000d66:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d6a:	e6d8      	b.n	8000b1e <PrintHex+0x142>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000d6c:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8000d70:	e704      	b.n	8000b7c <PrintHex+0x1a0>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000d72:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000d76:	e690      	b.n	8000a9a <PrintHex+0xbe>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000d78:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000d7c:	e712      	b.n	8000ba4 <PrintHex+0x1c8>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000d7e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000d82:	e75d      	b.n	8000c40 <PrintHex+0x264>
 8000d84:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000d88:	e747      	b.n	8000c1a <PrintHex+0x23e>
 8000d8a:	bf00      	nop
 8000d8c:	0800057d 	.word	0x0800057d

08000d90 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 8000d90:	b40f      	push	{r0, r1, r2, r3}
 8000d92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d96:	b085      	sub	sp, #20
	int		i;
	va_list args;
	char	*s=fmt;
 8000d98:	f10d 0930 	add.w	r9, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000d9c:	4bac      	ldr	r3, [pc, #688]	; (8001050 <Lb_printf+0x2c0>)
 8000d9e:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 8000da0:	f859 4b04 	ldr.w	r4, [r9], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000da4:	4dab      	ldr	r5, [pc, #684]	; (8001054 <Lb_printf+0x2c4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000da6:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8001060 <Lb_printf+0x2d0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000daa:	4fab      	ldr	r7, [pc, #684]	; (8001058 <Lb_printf+0x2c8>)
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000dac:	4eab      	ldr	r6, [pc, #684]	; (800105c <Lb_printf+0x2cc>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000dae:	701a      	strb	r2, [r3, #0]
	
	while (*s)
 8000db0:	7820      	ldrb	r0, [r4, #0]
 8000db2:	2800      	cmp	r0, #0
 8000db4:	f000 80be 	beq.w	8000f34 <Lb_printf+0x1a4>
	{
		if (*s=='%')
 8000db8:	2825      	cmp	r0, #37	; 0x25
 8000dba:	f040 80c0 	bne.w	8000f3e <Lb_printf+0x1ae>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000dbe:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8000dc0:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000dc2:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8000dc6:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8000dc8:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000dcc:	f240 80d6 	bls.w	8000f7c <Lb_printf+0x1ec>
 8000dd0:	2a78      	cmp	r2, #120	; 0x78
 8000dd2:	f000 80dd 	beq.w	8000f90 <Lb_printf+0x200>
 8000dd6:	2a73      	cmp	r2, #115	; 0x73
 8000dd8:	f000 80dd 	beq.w	8000f96 <Lb_printf+0x206>
 8000ddc:	2a25      	cmp	r2, #37	; 0x25
 8000dde:	f000 80dd 	beq.w	8000f9c <Lb_printf+0x20c>
 8000de2:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000de4:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000de8:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000dec:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000dee:	2a01      	cmp	r2, #1
 8000df0:	f240 80d6 	bls.w	8000fa0 <Lb_printf+0x210>
 8000df4:	2978      	cmp	r1, #120	; 0x78
 8000df6:	f000 80d6 	beq.w	8000fa6 <Lb_printf+0x216>
 8000dfa:	2973      	cmp	r1, #115	; 0x73
 8000dfc:	f000 80d6 	beq.w	8000fac <Lb_printf+0x21c>
 8000e00:	2925      	cmp	r1, #37	; 0x25
 8000e02:	f000 80d6 	beq.w	8000fb2 <Lb_printf+0x222>
 8000e06:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e08:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e0c:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e10:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e12:	2901      	cmp	r1, #1
 8000e14:	f240 80cf 	bls.w	8000fb6 <Lb_printf+0x226>
 8000e18:	2a78      	cmp	r2, #120	; 0x78
 8000e1a:	f000 80cf 	beq.w	8000fbc <Lb_printf+0x22c>
 8000e1e:	2a73      	cmp	r2, #115	; 0x73
 8000e20:	f000 80cf 	beq.w	8000fc2 <Lb_printf+0x232>
 8000e24:	2a25      	cmp	r2, #37	; 0x25
 8000e26:	f000 80cf 	beq.w	8000fc8 <Lb_printf+0x238>
 8000e2a:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e2c:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e30:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e34:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e36:	2a01      	cmp	r2, #1
 8000e38:	f240 80c8 	bls.w	8000fcc <Lb_printf+0x23c>
 8000e3c:	2978      	cmp	r1, #120	; 0x78
 8000e3e:	f000 80c8 	beq.w	8000fd2 <Lb_printf+0x242>
 8000e42:	2973      	cmp	r1, #115	; 0x73
 8000e44:	f000 80c8 	beq.w	8000fd8 <Lb_printf+0x248>
 8000e48:	2925      	cmp	r1, #37	; 0x25
 8000e4a:	f000 80c8 	beq.w	8000fde <Lb_printf+0x24e>
 8000e4e:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e50:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e54:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e58:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e5a:	2901      	cmp	r1, #1
 8000e5c:	f240 80c1 	bls.w	8000fe2 <Lb_printf+0x252>
 8000e60:	2a78      	cmp	r2, #120	; 0x78
 8000e62:	f000 80c1 	beq.w	8000fe8 <Lb_printf+0x258>
 8000e66:	2a73      	cmp	r2, #115	; 0x73
 8000e68:	f000 80c1 	beq.w	8000fee <Lb_printf+0x25e>
 8000e6c:	2a25      	cmp	r2, #37	; 0x25
 8000e6e:	f000 80c1 	beq.w	8000ff4 <Lb_printf+0x264>
 8000e72:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e74:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e78:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e7c:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e7e:	2a01      	cmp	r2, #1
 8000e80:	f240 80ba 	bls.w	8000ff8 <Lb_printf+0x268>
 8000e84:	2978      	cmp	r1, #120	; 0x78
 8000e86:	f000 80ba 	beq.w	8000ffe <Lb_printf+0x26e>
 8000e8a:	2973      	cmp	r1, #115	; 0x73
 8000e8c:	f000 80ba 	beq.w	8001004 <Lb_printf+0x274>
 8000e90:	2925      	cmp	r1, #37	; 0x25
 8000e92:	f000 80ba 	beq.w	800100a <Lb_printf+0x27a>
 8000e96:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e98:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e9c:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ea0:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ea2:	2901      	cmp	r1, #1
 8000ea4:	f240 80b3 	bls.w	800100e <Lb_printf+0x27e>
 8000ea8:	2a78      	cmp	r2, #120	; 0x78
 8000eaa:	f000 80b3 	beq.w	8001014 <Lb_printf+0x284>
 8000eae:	2a73      	cmp	r2, #115	; 0x73
 8000eb0:	f000 80b3 	beq.w	800101a <Lb_printf+0x28a>
 8000eb4:	2a25      	cmp	r2, #37	; 0x25
 8000eb6:	f000 80b3 	beq.w	8001020 <Lb_printf+0x290>
 8000eba:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ebc:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ec0:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 8000ec4:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ec6:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000eca:	f240 80ab 	bls.w	8001024 <Lb_printf+0x294>
 8000ece:	2978      	cmp	r1, #120	; 0x78
 8000ed0:	f000 80ab 	beq.w	800102a <Lb_printf+0x29a>
 8000ed4:	2973      	cmp	r1, #115	; 0x73
 8000ed6:	f000 80ab 	beq.w	8001030 <Lb_printf+0x2a0>
 8000eda:	2925      	cmp	r1, #37	; 0x25
 8000edc:	f000 80ab 	beq.w	8001036 <Lb_printf+0x2a6>
 8000ee0:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ee2:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ee6:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8000eea:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000eec:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ef0:	f240 80a3 	bls.w	800103a <Lb_printf+0x2aa>
 8000ef4:	2a78      	cmp	r2, #120	; 0x78
 8000ef6:	f000 80a3 	beq.w	8001040 <Lb_printf+0x2b0>
 8000efa:	2a73      	cmp	r2, #115	; 0x73
 8000efc:	f000 80a3 	beq.w	8001046 <Lb_printf+0x2b6>
 8000f00:	2a25      	cmp	r2, #37	; 0x25
 8000f02:	f000 80a3 	beq.w	800104c <Lb_printf+0x2bc>
 8000f06:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f08:	f88d 200d 	strb.w	r2, [sp, #13]
 8000f0c:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000f10:	1c5c      	adds	r4, r3, #1
 8000f12:	2864      	cmp	r0, #100	; 0x64
 8000f14:	d02b      	beq.n	8000f6e <Lb_printf+0x1de>
 8000f16:	d815      	bhi.n	8000f44 <Lb_printf+0x1b4>
 8000f18:	2825      	cmp	r0, #37	; 0x25
 8000f1a:	d01f      	beq.n	8000f5c <Lb_printf+0x1cc>
 8000f1c:	2863      	cmp	r0, #99	; 0x63
 8000f1e:	f47f af47 	bne.w	8000db0 <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000f22:	f899 0000 	ldrb.w	r0, [r9]
 8000f26:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000f28:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000f2a:	f109 0904 	add.w	r9, r9, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	f47f af42 	bne.w	8000db8 <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 8000f34:	b005      	add	sp, #20
 8000f36:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000f3e:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8000f40:	3401      	adds	r4, #1
 8000f42:	e735      	b.n	8000db0 <Lb_printf+0x20>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000f44:	2873      	cmp	r0, #115	; 0x73
 8000f46:	d00b      	beq.n	8000f60 <Lb_printf+0x1d0>
 8000f48:	2878      	cmp	r0, #120	; 0x78
 8000f4a:	f47f af31 	bne.w	8000db0 <Lb_printf+0x20>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000f4e:	f8d9 1000 	ldr.w	r1, [r9]
 8000f52:	a801      	add	r0, sp, #4
 8000f54:	f109 0904 	add.w	r9, r9, #4
 8000f58:	47b0      	blx	r6
					break;
 8000f5a:	e729      	b.n	8000db0 <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000f5c:	47a8      	blx	r5
 8000f5e:	e727      	b.n	8000db0 <Lb_printf+0x20>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000f60:	f8d9 1000 	ldr.w	r1, [r9]
 8000f64:	a801      	add	r0, sp, #4
 8000f66:	f109 0904 	add.w	r9, r9, #4
 8000f6a:	47b8      	blx	r7
 					break;
 8000f6c:	e720      	b.n	8000db0 <Lb_printf+0x20>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000f6e:	f8d9 1000 	ldr.w	r1, [r9]
 8000f72:	a801      	add	r0, sp, #4
 8000f74:	f109 0904 	add.w	r9, r9, #4
 8000f78:	47c0      	blx	r8
					break;
 8000f7a:	e719      	b.n	8000db0 <Lb_printf+0x20>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f7c:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000f7e:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000f80:	aa04      	add	r2, sp, #16
 8000f82:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 8000f84:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000f86:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 8000f8a:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8000f8e:	e7bf      	b.n	8000f10 <Lb_printf+0x180>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000f90:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f92:	2078      	movs	r0, #120	; 0x78
 8000f94:	e7f4      	b.n	8000f80 <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000f96:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f98:	2073      	movs	r0, #115	; 0x73
 8000f9a:	e7f1      	b.n	8000f80 <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000f9c:	2401      	movs	r4, #1
 8000f9e:	e7ef      	b.n	8000f80 <Lb_printf+0x1f0>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000fa0:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000fa2:	2402      	movs	r4, #2
 8000fa4:	e7ec      	b.n	8000f80 <Lb_printf+0x1f0>
 8000fa6:	2402      	movs	r4, #2
 8000fa8:	2078      	movs	r0, #120	; 0x78
 8000faa:	e7e9      	b.n	8000f80 <Lb_printf+0x1f0>
 8000fac:	2402      	movs	r4, #2
 8000fae:	2073      	movs	r0, #115	; 0x73
 8000fb0:	e7e6      	b.n	8000f80 <Lb_printf+0x1f0>
 8000fb2:	2402      	movs	r4, #2
 8000fb4:	e7e4      	b.n	8000f80 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000fb6:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000fb8:	2403      	movs	r4, #3
 8000fba:	e7e1      	b.n	8000f80 <Lb_printf+0x1f0>
 8000fbc:	2403      	movs	r4, #3
 8000fbe:	2078      	movs	r0, #120	; 0x78
 8000fc0:	e7de      	b.n	8000f80 <Lb_printf+0x1f0>
 8000fc2:	2403      	movs	r4, #3
 8000fc4:	2073      	movs	r0, #115	; 0x73
 8000fc6:	e7db      	b.n	8000f80 <Lb_printf+0x1f0>
 8000fc8:	2403      	movs	r4, #3
 8000fca:	e7d9      	b.n	8000f80 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000fcc:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000fce:	2404      	movs	r4, #4
 8000fd0:	e7d6      	b.n	8000f80 <Lb_printf+0x1f0>
 8000fd2:	2404      	movs	r4, #4
 8000fd4:	2078      	movs	r0, #120	; 0x78
 8000fd6:	e7d3      	b.n	8000f80 <Lb_printf+0x1f0>
 8000fd8:	2404      	movs	r4, #4
 8000fda:	2073      	movs	r0, #115	; 0x73
 8000fdc:	e7d0      	b.n	8000f80 <Lb_printf+0x1f0>
 8000fde:	2404      	movs	r4, #4
 8000fe0:	e7ce      	b.n	8000f80 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000fe2:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000fe4:	2405      	movs	r4, #5
 8000fe6:	e7cb      	b.n	8000f80 <Lb_printf+0x1f0>
 8000fe8:	2405      	movs	r4, #5
 8000fea:	2078      	movs	r0, #120	; 0x78
 8000fec:	e7c8      	b.n	8000f80 <Lb_printf+0x1f0>
 8000fee:	2405      	movs	r4, #5
 8000ff0:	2073      	movs	r0, #115	; 0x73
 8000ff2:	e7c5      	b.n	8000f80 <Lb_printf+0x1f0>
 8000ff4:	2405      	movs	r4, #5
 8000ff6:	e7c3      	b.n	8000f80 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ff8:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ffa:	2406      	movs	r4, #6
 8000ffc:	e7c0      	b.n	8000f80 <Lb_printf+0x1f0>
 8000ffe:	2406      	movs	r4, #6
 8001000:	2078      	movs	r0, #120	; 0x78
 8001002:	e7bd      	b.n	8000f80 <Lb_printf+0x1f0>
 8001004:	2406      	movs	r4, #6
 8001006:	2073      	movs	r0, #115	; 0x73
 8001008:	e7ba      	b.n	8000f80 <Lb_printf+0x1f0>
 800100a:	2406      	movs	r4, #6
 800100c:	e7b8      	b.n	8000f80 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800100e:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001010:	2407      	movs	r4, #7
 8001012:	e7b5      	b.n	8000f80 <Lb_printf+0x1f0>
 8001014:	2407      	movs	r4, #7
 8001016:	2078      	movs	r0, #120	; 0x78
 8001018:	e7b2      	b.n	8000f80 <Lb_printf+0x1f0>
 800101a:	2407      	movs	r4, #7
 800101c:	2073      	movs	r0, #115	; 0x73
 800101e:	e7af      	b.n	8000f80 <Lb_printf+0x1f0>
 8001020:	2407      	movs	r4, #7
 8001022:	e7ad      	b.n	8000f80 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001024:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001026:	2408      	movs	r4, #8
 8001028:	e7aa      	b.n	8000f80 <Lb_printf+0x1f0>
 800102a:	2408      	movs	r4, #8
 800102c:	2078      	movs	r0, #120	; 0x78
 800102e:	e7a7      	b.n	8000f80 <Lb_printf+0x1f0>
 8001030:	2408      	movs	r4, #8
 8001032:	2073      	movs	r0, #115	; 0x73
 8001034:	e7a4      	b.n	8000f80 <Lb_printf+0x1f0>
 8001036:	2408      	movs	r4, #8
 8001038:	e7a2      	b.n	8000f80 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800103a:	4610      	mov	r0, r2
 800103c:	2409      	movs	r4, #9
 800103e:	e79f      	b.n	8000f80 <Lb_printf+0x1f0>
 8001040:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001042:	2078      	movs	r0, #120	; 0x78
 8001044:	e79c      	b.n	8000f80 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001046:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001048:	2073      	movs	r0, #115	; 0x73
 800104a:	e799      	b.n	8000f80 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800104c:	2409      	movs	r4, #9
 800104e:	e797      	b.n	8000f80 <Lb_printf+0x1f0>
 8001050:	2000040c 	.word	0x2000040c
 8001054:	0800057d 	.word	0x0800057d
 8001058:	080005b5 	.word	0x080005b5
 800105c:	080009dd 	.word	0x080009dd
 8001060:	08000619 	.word	0x08000619

08001064 <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8001064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8001068:	4cab      	ldr	r4, [pc, #684]	; (8001318 <Lb_vsprintf+0x2b4>)
	StrPrintBufIndex = 0;
 800106a:	4eac      	ldr	r6, [pc, #688]	; (800131c <Lb_vsprintf+0x2b8>)
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 800106c:	6020      	str	r0, [r4, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 800106e:	4bac      	ldr	r3, [pc, #688]	; (8001320 <Lb_vsprintf+0x2bc>)
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8001070:	2000      	movs	r0, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8001072:	4615      	mov	r5, r2
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8001074:	6030      	str	r0, [r6, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8001076:	2201      	movs	r2, #1



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8001078:	4eaa      	ldr	r6, [pc, #680]	; (8001324 <Lb_vsprintf+0x2c0>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800107a:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800132c <Lb_vsprintf+0x2c8>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 800107e:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 8001330 <Lb_vsprintf+0x2cc>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8001082:	4fa9      	ldr	r7, [pc, #676]	; (8001328 <Lb_vsprintf+0x2c4>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8001084:	b085      	sub	sp, #20
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8001086:	701a      	strb	r2, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
	int		i;
	char	*s=fmt;
 8001088:	460c      	mov	r4, r1
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 800108a:	7820      	ldrb	r0, [r4, #0]
 800108c:	2800      	cmp	r0, #0
 800108e:	f000 80bc 	beq.w	800120a <Lb_vsprintf+0x1a6>
	{
		if (*s=='%')
 8001092:	2825      	cmp	r0, #37	; 0x25
 8001094:	f040 80bc 	bne.w	8001210 <Lb_vsprintf+0x1ac>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001098:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 800109a:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800109c:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 80010a0:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 80010a2:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80010a6:	f240 80cc 	bls.w	8001242 <Lb_vsprintf+0x1de>
 80010aa:	2a78      	cmp	r2, #120	; 0x78
 80010ac:	f000 80d3 	beq.w	8001256 <Lb_vsprintf+0x1f2>
 80010b0:	2a73      	cmp	r2, #115	; 0x73
 80010b2:	f000 80d3 	beq.w	800125c <Lb_vsprintf+0x1f8>
 80010b6:	2a25      	cmp	r2, #37	; 0x25
 80010b8:	f000 80d3 	beq.w	8001262 <Lb_vsprintf+0x1fe>
 80010bc:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80010be:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80010c2:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80010c6:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80010c8:	2a01      	cmp	r2, #1
 80010ca:	f240 80cc 	bls.w	8001266 <Lb_vsprintf+0x202>
 80010ce:	2978      	cmp	r1, #120	; 0x78
 80010d0:	f000 80cc 	beq.w	800126c <Lb_vsprintf+0x208>
 80010d4:	2973      	cmp	r1, #115	; 0x73
 80010d6:	f000 80cc 	beq.w	8001272 <Lb_vsprintf+0x20e>
 80010da:	2925      	cmp	r1, #37	; 0x25
 80010dc:	f000 80cc 	beq.w	8001278 <Lb_vsprintf+0x214>
 80010e0:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80010e2:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80010e6:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80010ea:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80010ec:	2901      	cmp	r1, #1
 80010ee:	f240 80c5 	bls.w	800127c <Lb_vsprintf+0x218>
 80010f2:	2a78      	cmp	r2, #120	; 0x78
 80010f4:	f000 80c5 	beq.w	8001282 <Lb_vsprintf+0x21e>
 80010f8:	2a73      	cmp	r2, #115	; 0x73
 80010fa:	f000 80c5 	beq.w	8001288 <Lb_vsprintf+0x224>
 80010fe:	2a25      	cmp	r2, #37	; 0x25
 8001100:	f000 80c5 	beq.w	800128e <Lb_vsprintf+0x22a>
 8001104:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001106:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800110a:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800110e:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001110:	2a01      	cmp	r2, #1
 8001112:	f240 80be 	bls.w	8001292 <Lb_vsprintf+0x22e>
 8001116:	2978      	cmp	r1, #120	; 0x78
 8001118:	f000 80be 	beq.w	8001298 <Lb_vsprintf+0x234>
 800111c:	2973      	cmp	r1, #115	; 0x73
 800111e:	f000 80be 	beq.w	800129e <Lb_vsprintf+0x23a>
 8001122:	2925      	cmp	r1, #37	; 0x25
 8001124:	f000 80be 	beq.w	80012a4 <Lb_vsprintf+0x240>
 8001128:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800112a:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800112e:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001132:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001134:	2901      	cmp	r1, #1
 8001136:	f240 80b7 	bls.w	80012a8 <Lb_vsprintf+0x244>
 800113a:	2a78      	cmp	r2, #120	; 0x78
 800113c:	f000 80b7 	beq.w	80012ae <Lb_vsprintf+0x24a>
 8001140:	2a73      	cmp	r2, #115	; 0x73
 8001142:	f000 80b7 	beq.w	80012b4 <Lb_vsprintf+0x250>
 8001146:	2a25      	cmp	r2, #37	; 0x25
 8001148:	f000 80b7 	beq.w	80012ba <Lb_vsprintf+0x256>
 800114c:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800114e:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001152:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001156:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001158:	2a01      	cmp	r2, #1
 800115a:	f240 80b0 	bls.w	80012be <Lb_vsprintf+0x25a>
 800115e:	2978      	cmp	r1, #120	; 0x78
 8001160:	f000 80b0 	beq.w	80012c4 <Lb_vsprintf+0x260>
 8001164:	2973      	cmp	r1, #115	; 0x73
 8001166:	f000 80b0 	beq.w	80012ca <Lb_vsprintf+0x266>
 800116a:	2925      	cmp	r1, #37	; 0x25
 800116c:	f000 80b0 	beq.w	80012d0 <Lb_vsprintf+0x26c>
 8001170:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001172:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001176:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800117a:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800117c:	2901      	cmp	r1, #1
 800117e:	f240 80a9 	bls.w	80012d4 <Lb_vsprintf+0x270>
 8001182:	2a78      	cmp	r2, #120	; 0x78
 8001184:	f000 80a9 	beq.w	80012da <Lb_vsprintf+0x276>
 8001188:	2a73      	cmp	r2, #115	; 0x73
 800118a:	f000 80a9 	beq.w	80012e0 <Lb_vsprintf+0x27c>
 800118e:	2a25      	cmp	r2, #37	; 0x25
 8001190:	f000 80a9 	beq.w	80012e6 <Lb_vsprintf+0x282>
 8001194:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001196:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800119a:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 800119e:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80011a0:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80011a4:	f240 80a1 	bls.w	80012ea <Lb_vsprintf+0x286>
 80011a8:	2978      	cmp	r1, #120	; 0x78
 80011aa:	f000 80a1 	beq.w	80012f0 <Lb_vsprintf+0x28c>
 80011ae:	2973      	cmp	r1, #115	; 0x73
 80011b0:	f000 80a1 	beq.w	80012f6 <Lb_vsprintf+0x292>
 80011b4:	2925      	cmp	r1, #37	; 0x25
 80011b6:	f000 80a1 	beq.w	80012fc <Lb_vsprintf+0x298>
 80011ba:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80011bc:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80011c0:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 80011c4:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80011c6:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80011ca:	f240 8099 	bls.w	8001300 <Lb_vsprintf+0x29c>
 80011ce:	2a78      	cmp	r2, #120	; 0x78
 80011d0:	f000 8099 	beq.w	8001306 <Lb_vsprintf+0x2a2>
 80011d4:	2a73      	cmp	r2, #115	; 0x73
 80011d6:	f000 8099 	beq.w	800130c <Lb_vsprintf+0x2a8>
 80011da:	2a25      	cmp	r2, #37	; 0x25
 80011dc:	f000 8099 	beq.w	8001312 <Lb_vsprintf+0x2ae>
 80011e0:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80011e2:	f88d 200d 	strb.w	r2, [sp, #13]
 80011e6:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80011ea:	1c5c      	adds	r4, r3, #1
 80011ec:	2864      	cmp	r0, #100	; 0x64
 80011ee:	d023      	beq.n	8001238 <Lb_vsprintf+0x1d4>
 80011f0:	d811      	bhi.n	8001216 <Lb_vsprintf+0x1b2>
 80011f2:	2825      	cmp	r0, #37	; 0x25
 80011f4:	d019      	beq.n	800122a <Lb_vsprintf+0x1c6>
 80011f6:	2863      	cmp	r0, #99	; 0x63
 80011f8:	f47f af47 	bne.w	800108a <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80011fc:	7828      	ldrb	r0, [r5, #0]
 80011fe:	47b0      	blx	r6
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8001200:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8001202:	3504      	adds	r5, #4
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8001204:	2800      	cmp	r0, #0
 8001206:	f47f af44 	bne.w	8001092 <Lb_vsprintf+0x2e>
			s++;
		}
	}
	
	return;
}
 800120a:	b005      	add	sp, #20
 800120c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8001210:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8001212:	3401      	adds	r4, #1
 8001214:	e739      	b.n	800108a <Lb_vsprintf+0x26>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8001216:	2873      	cmp	r0, #115	; 0x73
 8001218:	d009      	beq.n	800122e <Lb_vsprintf+0x1ca>
 800121a:	2878      	cmp	r0, #120	; 0x78
 800121c:	f47f af35 	bne.w	800108a <Lb_vsprintf+0x26>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8001220:	6829      	ldr	r1, [r5, #0]
 8001222:	a801      	add	r0, sp, #4
 8001224:	3504      	adds	r5, #4
 8001226:	47b8      	blx	r7
					break;
 8001228:	e72f      	b.n	800108a <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800122a:	47b0      	blx	r6
 800122c:	e72d      	b.n	800108a <Lb_vsprintf+0x26>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 800122e:	6829      	ldr	r1, [r5, #0]
 8001230:	a801      	add	r0, sp, #4
 8001232:	3504      	adds	r5, #4
 8001234:	47c0      	blx	r8
 					break;
 8001236:	e728      	b.n	800108a <Lb_vsprintf+0x26>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8001238:	6829      	ldr	r1, [r5, #0]
 800123a:	a801      	add	r0, sp, #4
 800123c:	3504      	adds	r5, #4
 800123e:	47c8      	blx	r9
					break;
 8001240:	e723      	b.n	800108a <Lb_vsprintf+0x26>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001242:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001244:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8001246:	aa04      	add	r2, sp, #16
 8001248:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 800124a:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800124c:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 8001250:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8001254:	e7c9      	b.n	80011ea <Lb_vsprintf+0x186>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001256:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001258:	2078      	movs	r0, #120	; 0x78
 800125a:	e7f4      	b.n	8001246 <Lb_vsprintf+0x1e2>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800125c:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800125e:	2073      	movs	r0, #115	; 0x73
 8001260:	e7f1      	b.n	8001246 <Lb_vsprintf+0x1e2>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001262:	2401      	movs	r4, #1
 8001264:	e7ef      	b.n	8001246 <Lb_vsprintf+0x1e2>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001266:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001268:	2402      	movs	r4, #2
 800126a:	e7ec      	b.n	8001246 <Lb_vsprintf+0x1e2>
 800126c:	2402      	movs	r4, #2
 800126e:	2078      	movs	r0, #120	; 0x78
 8001270:	e7e9      	b.n	8001246 <Lb_vsprintf+0x1e2>
 8001272:	2402      	movs	r4, #2
 8001274:	2073      	movs	r0, #115	; 0x73
 8001276:	e7e6      	b.n	8001246 <Lb_vsprintf+0x1e2>
 8001278:	2402      	movs	r4, #2
 800127a:	e7e4      	b.n	8001246 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800127c:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800127e:	2403      	movs	r4, #3
 8001280:	e7e1      	b.n	8001246 <Lb_vsprintf+0x1e2>
 8001282:	2403      	movs	r4, #3
 8001284:	2078      	movs	r0, #120	; 0x78
 8001286:	e7de      	b.n	8001246 <Lb_vsprintf+0x1e2>
 8001288:	2403      	movs	r4, #3
 800128a:	2073      	movs	r0, #115	; 0x73
 800128c:	e7db      	b.n	8001246 <Lb_vsprintf+0x1e2>
 800128e:	2403      	movs	r4, #3
 8001290:	e7d9      	b.n	8001246 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001292:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001294:	2404      	movs	r4, #4
 8001296:	e7d6      	b.n	8001246 <Lb_vsprintf+0x1e2>
 8001298:	2404      	movs	r4, #4
 800129a:	2078      	movs	r0, #120	; 0x78
 800129c:	e7d3      	b.n	8001246 <Lb_vsprintf+0x1e2>
 800129e:	2404      	movs	r4, #4
 80012a0:	2073      	movs	r0, #115	; 0x73
 80012a2:	e7d0      	b.n	8001246 <Lb_vsprintf+0x1e2>
 80012a4:	2404      	movs	r4, #4
 80012a6:	e7ce      	b.n	8001246 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80012a8:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80012aa:	2405      	movs	r4, #5
 80012ac:	e7cb      	b.n	8001246 <Lb_vsprintf+0x1e2>
 80012ae:	2405      	movs	r4, #5
 80012b0:	2078      	movs	r0, #120	; 0x78
 80012b2:	e7c8      	b.n	8001246 <Lb_vsprintf+0x1e2>
 80012b4:	2405      	movs	r4, #5
 80012b6:	2073      	movs	r0, #115	; 0x73
 80012b8:	e7c5      	b.n	8001246 <Lb_vsprintf+0x1e2>
 80012ba:	2405      	movs	r4, #5
 80012bc:	e7c3      	b.n	8001246 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80012be:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80012c0:	2406      	movs	r4, #6
 80012c2:	e7c0      	b.n	8001246 <Lb_vsprintf+0x1e2>
 80012c4:	2406      	movs	r4, #6
 80012c6:	2078      	movs	r0, #120	; 0x78
 80012c8:	e7bd      	b.n	8001246 <Lb_vsprintf+0x1e2>
 80012ca:	2406      	movs	r4, #6
 80012cc:	2073      	movs	r0, #115	; 0x73
 80012ce:	e7ba      	b.n	8001246 <Lb_vsprintf+0x1e2>
 80012d0:	2406      	movs	r4, #6
 80012d2:	e7b8      	b.n	8001246 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80012d4:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80012d6:	2407      	movs	r4, #7
 80012d8:	e7b5      	b.n	8001246 <Lb_vsprintf+0x1e2>
 80012da:	2407      	movs	r4, #7
 80012dc:	2078      	movs	r0, #120	; 0x78
 80012de:	e7b2      	b.n	8001246 <Lb_vsprintf+0x1e2>
 80012e0:	2407      	movs	r4, #7
 80012e2:	2073      	movs	r0, #115	; 0x73
 80012e4:	e7af      	b.n	8001246 <Lb_vsprintf+0x1e2>
 80012e6:	2407      	movs	r4, #7
 80012e8:	e7ad      	b.n	8001246 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80012ea:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80012ec:	2408      	movs	r4, #8
 80012ee:	e7aa      	b.n	8001246 <Lb_vsprintf+0x1e2>
 80012f0:	2408      	movs	r4, #8
 80012f2:	2078      	movs	r0, #120	; 0x78
 80012f4:	e7a7      	b.n	8001246 <Lb_vsprintf+0x1e2>
 80012f6:	2408      	movs	r4, #8
 80012f8:	2073      	movs	r0, #115	; 0x73
 80012fa:	e7a4      	b.n	8001246 <Lb_vsprintf+0x1e2>
 80012fc:	2408      	movs	r4, #8
 80012fe:	e7a2      	b.n	8001246 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001300:	4610      	mov	r0, r2
 8001302:	2409      	movs	r4, #9
 8001304:	e79f      	b.n	8001246 <Lb_vsprintf+0x1e2>
 8001306:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001308:	2078      	movs	r0, #120	; 0x78
 800130a:	e79c      	b.n	8001246 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800130c:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800130e:	2073      	movs	r0, #115	; 0x73
 8001310:	e799      	b.n	8001246 <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001312:	2409      	movs	r4, #9
 8001314:	e797      	b.n	8001246 <Lb_vsprintf+0x1e2>
 8001316:	bf00      	nop
 8001318:	200004d4 	.word	0x200004d4
 800131c:	20000408 	.word	0x20000408
 8001320:	2000040c 	.word	0x2000040c
 8001324:	0800057d 	.word	0x0800057d
 8001328:	080009dd 	.word	0x080009dd
 800132c:	08000619 	.word	0x08000619
 8001330:	080005b5 	.word	0x080005b5

08001334 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8001334:	4668      	mov	r0, sp
 8001336:	f020 0107 	bic.w	r1, r0, #7
 800133a:	468d      	mov	sp, r1
 800133c:	b579      	push	{r0, r3, r4, r5, r6, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800133e:	492a      	ldr	r1, [pc, #168]	; (80013e8 <zero_loop+0x62>)
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <zero_loop+0x66>)
 8001342:	4299      	cmp	r1, r3
 8001344:	d21b      	bcs.n	800137e <Hw_StartUp_Init+0x4a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 8001346:	1cda      	adds	r2, r3, #3
 8001348:	1d0c      	adds	r4, r1, #4
 800134a:	1b15      	subs	r5, r2, r4
 800134c:	4828      	ldr	r0, [pc, #160]	; (80013f0 <zero_loop+0x6a>)
 800134e:	f025 0203 	bic.w	r2, r5, #3
 8001352:	1d16      	adds	r6, r2, #4
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 8001354:	6805      	ldr	r5, [r0, #0]
 8001356:	2304      	movs	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001358:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 800135a:	600d      	str	r5, [r1, #0]
 800135c:	f3c2 0280 	ubfx	r2, r2, #2, #1
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001360:	d00d      	beq.n	800137e <Hw_StartUp_Init+0x4a>
 8001362:	b122      	cbz	r2, 800136e <Hw_StartUp_Init+0x3a>
	{
		*(pulDest++) = *(pulSrc++);
 8001364:	6842      	ldr	r2, [r0, #4]
 8001366:	2308      	movs	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001368:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 800136a:	6022      	str	r2, [r4, #0]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800136c:	d007      	beq.n	800137e <Hw_StartUp_Init+0x4a>
	{
		*(pulDest++) = *(pulSrc++);
 800136e:	581d      	ldr	r5, [r3, r0]
 8001370:	1d1a      	adds	r2, r3, #4
 8001372:	505d      	str	r5, [r3, r1]
 8001374:	5884      	ldr	r4, [r0, r2]
 8001376:	3308      	adds	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001378:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 800137a:	508c      	str	r4, [r1, r2]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800137c:	d1f7      	bne.n	800136e <Hw_StartUp_Init+0x3a>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 800137e:	481e      	ldr	r0, [pc, #120]	; (80013f8 <zero_loop+0x72>)
 8001380:	491e      	ldr	r1, [pc, #120]	; (80013fc <zero_loop+0x76>)
 8001382:	f04f 0200 	mov.w	r2, #0

08001386 <zero_loop>:
 8001386:	4288      	cmp	r0, r1
 8001388:	bfb8      	it	lt
 800138a:	f840 2b04 	strlt.w	r2, [r0], #4
 800138e:	f6ff affa 	blt.w	8001386 <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8001392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001396:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800139a:	6811      	ldr	r1, [r2, #0]
 800139c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80013a0:	f441 3080 	orr.w	r0, r1, #65536	; 0x10000
 80013a4:	6010      	str	r0, [r2, #0]
 80013a6:	e004      	b.n	80013b2 <zero_loop+0x2c>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80013a8:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80013aa:	0381      	lsls	r1, r0, #14
 80013ac:	d405      	bmi.n	80013ba <zero_loop+0x34>
 80013ae:	3b01      	subs	r3, #1
 80013b0:	d003      	beq.n	80013ba <zero_loop+0x34>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80013b2:	6811      	ldr	r1, [r2, #0]
 80013b4:	3b01      	subs	r3, #1
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80013b6:	0388      	lsls	r0, r1, #14
 80013b8:	d5f6      	bpl.n	80013a8 <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 80013ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013be:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80013c2:	680a      	ldr	r2, [r1, #0]
 80013c4:	f042 0010 	orr.w	r0, r2, #16
 80013c8:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 80013ca:	680b      	ldr	r3, [r1, #0]
 80013cc:	f023 0203 	bic.w	r2, r3, #3
 80013d0:	600a      	str	r2, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 80013d2:	6808      	ldr	r0, [r1, #0]
 80013d4:	f040 0302 	orr.w	r3, r0, #2
 80013d8:	600b      	str	r3, [r1, #0]


    main();
 80013da:	4906      	ldr	r1, [pc, #24]	; (80013f4 <zero_loop+0x6e>)
 80013dc:	4788      	blx	r1

}
 80013de:	e8bd 4079 	ldmia.w	sp!, {r0, r3, r4, r5, r6, lr}
 80013e2:	4685      	mov	sp, r0
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000310 	.word	0x20000310
 80013f0:	08004f94 	.word	0x08004f94
 80013f4:	08000019 	.word	0x08000019
 80013f8:	20000400 	.word	0x20000400
 80013fc:	2000163c 	.word	0x2000163c

08001400 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 8001402:	f241 6355 	movw	r3, #5717	; 0x1655
 8001406:	f6c0 0300 	movt	r3, #2048	; 0x800
 800140a:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 800140c:	f641 0091 	movw	r0, #6289	; 0x1891
 8001410:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001414:	4780      	blx	r0
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8001416:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800141a:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800141e:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8001422:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8001426:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800142a:	f241 0104 	movw	r1, #4100	; 0x1004
 800142e:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8001432:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 8001436:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800143a:	f2c3 3044 	movt	r0, #13124	; 0x3344
 800143e:	f2c4 0101 	movt	r1, #16385	; 0x4001
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8001442:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8001446:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800144a:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800144e:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 8001452:	f642 7385 	movw	r3, #12165	; 0x2f85
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8001456:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 800145a:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800145e:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8001460:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8001462:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8001464:	6008      	str	r0, [r1, #0]
	
	Hw_DMA_Init();
 8001466:	4798      	blx	r3
	Hw_Uart_Init();
 8001468:	f241 519d 	movw	r1, #5533	; 0x159d
 800146c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001470:	4788      	blx	r1
	Hw_Led_Init();
 8001472:	f241 60e9 	movw	r0, #5865	; 0x16e9
 8001476:	f6c0 0000 	movt	r0, #2048	; 0x800
 800147a:	4780      	blx	r0
	Hw_Timer_Init();
 800147c:	f641 02e1 	movw	r2, #6369	; 0x18e1
 8001480:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001484:	4790      	blx	r2
	Hw_Si47xx_Init();
 8001486:	f242 23e9 	movw	r3, #8937	; 0x22e9
 800148a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800148e:	4798      	blx	r3
	Hw_N5110G_Init();
 8001490:	f642 0199 	movw	r1, #10393	; 0x2899
 8001494:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001498:	4788      	blx	r1
	
	Hw_VCom_Init();
 800149a:	f641 30b1 	movw	r0, #7089	; 0x1bb1
 800149e:	f6c0 0000 	movt	r0, #2048	; 0x800
 80014a2:	4780      	blx	r0
 80014a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014a6:	bf00      	nop

080014a8 <Hw_Wait>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
 80014a8:	b082      	sub	sp, #8
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80014aa:	2300      	movs	r3, #0
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	9901      	ldr	r1, [sp, #4]
 80014b0:	4288      	cmp	r0, r1
 80014b2:	d905      	bls.n	80014c0 <Hw_Wait+0x18>
 80014b4:	9a01      	ldr	r2, [sp, #4]
 80014b6:	1c53      	adds	r3, r2, #1
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	9901      	ldr	r1, [sp, #4]
 80014bc:	4281      	cmp	r1, r0
 80014be:	d3f9      	bcc.n	80014b4 <Hw_Wait+0xc>
}
 80014c0:	b002      	add	sp, #8
 80014c2:	4770      	bx	lr

080014c4 <Hw_Wait_Usec>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
 80014c4:	b082      	sub	sp, #8
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80014c6:	2300      	movs	r3, #0
 80014c8:	9301      	str	r3, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 80014ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80014ce:	9901      	ldr	r1, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 80014d0:	0042      	lsls	r2, r0, #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80014d2:	428a      	cmp	r2, r1
 80014d4:	d905      	bls.n	80014e2 <Hw_Wait_Usec+0x1e>
 80014d6:	9b01      	ldr	r3, [sp, #4]
 80014d8:	1c58      	adds	r0, r3, #1
 80014da:	9001      	str	r0, [sp, #4]
 80014dc:	9901      	ldr	r1, [sp, #4]
 80014de:	428a      	cmp	r2, r1
 80014e0:	d8f9      	bhi.n	80014d6 <Hw_Wait_Usec+0x12>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
}
 80014e2:	b002      	add	sp, #8
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop

080014e8 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80014e8:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80014ea:	f643 0304 	movw	r3, #14340	; 0x3804
 80014ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80014f2:	6818      	ldr	r0, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80014f4:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80014f6:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 80014f8:	f241 72a1 	movw	r2, #6049	; 0x17a1
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80014fc:	f801 0d01 	strb.w	r0, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 8001500:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001504:	2000      	movs	r0, #0
 8001506:	4790      	blx	r2
}
 8001508:	b003      	add	sp, #12
 800150a:	bd00      	pop	{pc}

0800150c <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 800150c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8001510:	f241 0618 	movw	r6, #4120	; 0x1018
 8001514:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8001518:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 800151a:	f240 43d8 	movw	r3, #1240	; 0x4d8
 800151e:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8001522:	f643 040c 	movw	r4, #14348	; 0x380c
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8001526:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 800152a:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800152e:	f643 0708 	movw	r7, #14344	; 0x3808
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8001532:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 8001534:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8001536:	f2c4 0401 	movt	r4, #16385	; 0x4001
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800153a:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800153c:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8001540:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 8001544:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8001548:	200c      	movs	r0, #12
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800154a:	f240 2171 	movw	r1, #625	; 0x271
 800154e:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8001552:	f24e 1504 	movw	r5, #57604	; 0xe104
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8001556:	f8c6 8000 	str.w	r8, [r6]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800155a:	f2ce 0500 	movt	r5, #57344	; 0xe000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800155e:	6020      	str	r0, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8001560:	f8cc 2000 	str.w	r2, [ip]
	REG_USART1_CR3  = 0;
 8001564:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8001568:	6039      	str	r1, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800156a:	682b      	ldr	r3, [r5, #0]
 800156c:	f043 0020 	orr.w	r0, r3, #32
 8001570:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8001572:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8001574:	f641 03a5 	movw	r3, #6309	; 0x18a5
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8001578:	f041 0020 	orr.w	r0, r1, #32
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800157c:	f241 41e9 	movw	r1, #5353	; 0x14e9
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8001580:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8001582:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001586:	2025      	movs	r0, #37	; 0x25
 8001588:	f6c0 0300 	movt	r3, #2048	; 0x800
 800158c:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 800158e:	6822      	ldr	r2, [r4, #0]
 8001590:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 8001594:	6021      	str	r1, [r4, #0]
 8001596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800159a:	bf00      	nop

0800159c <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 800159c:	f241 7341 	movw	r3, #5953	; 0x1741
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 80015a0:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 80015a2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80015a6:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80015a8:	f240 43d8 	movw	r3, #1240	; 0x4d8
 80015ac:	2200      	movs	r2, #0
 80015ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 80015b2:	f241 540d 	movw	r4, #5389	; 0x150d
 80015b6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80015ba:	4611      	mov	r1, r2
 80015bc:	f6c0 0400 	movt	r4, #2048	; 0x800
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80015c0:	605a      	str	r2, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80015c2:	609a      	str	r2, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80015c4:	611a      	str	r2, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80015c6:	615a      	str	r2, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80015c8:	61da      	str	r2, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80015ca:	621a      	str	r2, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80015d0:	635a      	str	r2, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80015d2:	639a      	str	r2, [r3, #56]	; 0x38
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 80015d4:	47a0      	blx	r4
 80015d6:	bd10      	pop	{r4, pc}

080015d8 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 80015d8:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 80015da:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 80015dc:	b083      	sub	sp, #12
 80015de:	4d08      	ldr	r5, [pc, #32]	; (8001600 <Hw_Uart_Getch+0x28>)
 80015e0:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 80015e2:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 80015e6:	4620      	mov	r0, r4
 80015e8:	47a8      	blx	r5
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d0fb      	beq.n	80015e6 <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 80015ee:	4620      	mov	r0, r4
 80015f0:	f10d 0107 	add.w	r1, sp, #7
 80015f4:	4a03      	ldr	r2, [pc, #12]	; (8001604 <Hw_Uart_Getch+0x2c>)
 80015f6:	4790      	blx	r2

	return Uart_GetData;
}
 80015f8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80015fc:	b003      	add	sp, #12
 80015fe:	bd30      	pop	{r4, r5, pc}
 8001600:	08001771 	.word	0x08001771
 8001604:	08001819 	.word	0x08001819

08001608 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 8001608:	280a      	cmp	r0, #10
 800160a:	d00d      	beq.n	8001628 <print_byte+0x20>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 800160c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001610:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001614:	6813      	ldr	r3, [r2, #0]
 8001616:	0619      	lsls	r1, r3, #24
 8001618:	d5fc      	bpl.n	8001614 <print_byte+0xc>
    
    REG_USART1_DR = Uart_PutData;
 800161a:	f643 0104 	movw	r1, #14340	; 0x3804
 800161e:	b2c0      	uxtb	r0, r0
 8001620:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8001624:	6008      	str	r0, [r1, #0]
 8001626:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8001628:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800162c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001630:	6813      	ldr	r3, [r2, #0]
 8001632:	061b      	lsls	r3, r3, #24
 8001634:	d5fc      	bpl.n	8001630 <print_byte+0x28>
    
    REG_USART1_DR = Uart_PutData;
 8001636:	f643 0104 	movw	r1, #14340	; 0x3804
 800163a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800163e:	220d      	movs	r2, #13
 8001640:	600a      	str	r2, [r1, #0]
 8001642:	e7e3      	b.n	800160c <print_byte+0x4>

08001644 <get_byte>:
#endif    
}


char get_byte(void)
{
 8001644:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 8001646:	f241 53d9 	movw	r3, #5593	; 0x15d9
 800164a:	2000      	movs	r0, #0
 800164c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001650:	4798      	blx	r3
#endif
	
	return Ch;
}
 8001652:	bd08      	pop	{r3, pc}

08001654 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8001654:	f241 0304 	movw	r3, #4100	; 0x1004
 8001658:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800165c:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800165e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8001662:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 8001666:	f020 02f0 	bic.w	r2, r0, #240	; 0xf0
 800166a:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 800166c:	6818      	ldr	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800166e:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8001672:	f440 12e8 	orr.w	r2, r0, #1900544	; 0x1d0000
 8001676:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8001678:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800167a:	4608      	mov	r0, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800167c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001680:	600a      	str	r2, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8001682:	6801      	ldr	r1, [r0, #0]
 8001684:	018b      	lsls	r3, r1, #6
 8001686:	d5fc      	bpl.n	8001682 <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8001688:	f241 0304 	movw	r3, #4100	; 0x1004
 800168c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001690:	6818      	ldr	r0, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8001692:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8001694:	f020 0103 	bic.w	r1, r0, #3
 8001698:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	f040 0102 	orr.w	r1, r0, #2
 80016a0:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 80016a8:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 80016b0:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 80016b8:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 80016c0:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	6018      	str	r0, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 80016c6:	6813      	ldr	r3, [r2, #0]
 80016c8:	f003 010c 	and.w	r1, r3, #12
 80016cc:	2908      	cmp	r1, #8
 80016ce:	d1fa      	bne.n	80016c6 <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 80016d0:	f241 0018 	movw	r0, #4120	; 0x1018
 80016d4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80016d8:	6802      	ldr	r2, [r0, #0]
 80016da:	f442 4380 	orr.w	r3, r2, #16384	; 0x4000
 80016de:	f043 011d 	orr.w	r1, r3, #29
 80016e2:	6001      	str	r1, [r0, #0]
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop

080016e8 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80016e8:	2204      	movs	r2, #4
 80016ea:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80016ee:	6811      	ldr	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80016f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80016f4:	f021 60e0 	bic.w	r0, r1, #117440512	; 0x7000000
 80016f8:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 80016fa:	6811      	ldr	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80016fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
 8001700:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 8001704:	6010      	str	r0, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8001706:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8001708:	f640 420c 	movw	r2, #3084	; 0xc0c
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 800170c:	f421 4070 	bic.w	r0, r1, #61440	; 0xf000
 8001710:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8001712:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8001714:	f2c4 0201 	movt	r2, #16385	; 0x4001
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8001718:	f441 5040 	orr.w	r0, r1, #12288	; 0x3000
 800171c:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 800171e:	6819      	ldr	r1, [r3, #0]
 8001720:	6019      	str	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8001722:	6813      	ldr	r3, [r2, #0]
 8001724:	f043 0008 	orr.w	r0, r3, #8
 8001728:	6010      	str	r0, [r2, #0]
 800172a:	4770      	bx	lr

0800172c <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 800172c:	b938      	cbnz	r0, 800173e <Hw_Led_Toggle+0x12>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 800172e:	f640 430c 	movw	r3, #3084	; 0xc0c
 8001732:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	f082 0008 	eor.w	r0, r2, #8
 800173c:	6018      	str	r0, [r3, #0]
 800173e:	4770      	bx	lr

08001740 <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8001740:	f240 610c 	movw	r1, #1548	; 0x60c
 8001744:	f240 621c 	movw	r2, #1564	; 0x61c
 8001748:	2300      	movs	r3, #0
 800174a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800174e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001752:	800b      	strh	r3, [r1, #0]
 8001754:	8013      	strh	r3, [r2, #0]
 8001756:	804b      	strh	r3, [r1, #2]
 8001758:	8053      	strh	r3, [r2, #2]
 800175a:	808b      	strh	r3, [r1, #4]
 800175c:	8093      	strh	r3, [r2, #4]
 800175e:	80cb      	strh	r3, [r1, #6]
 8001760:	80d3      	strh	r3, [r2, #6]
 8001762:	810b      	strh	r3, [r1, #8]
 8001764:	8113      	strh	r3, [r2, #8]
 8001766:	814b      	strh	r3, [r1, #10]
 8001768:	8153      	strh	r3, [r2, #10]
 800176a:	818b      	strh	r3, [r1, #12]
 800176c:	8193      	strh	r3, [r2, #12]
 800176e:	4770      	bx	lr

08001770 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HW_UART_Q_VAILD+0x28>)
 8001772:	490a      	ldr	r1, [pc, #40]	; (800179c <HW_UART_Q_VAILD+0x2c>)
 8001774:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8001778:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
 800177c:	201f      	movs	r0, #31
 800177e:	1ad2      	subs	r2, r2, r3
 8001780:	3220      	adds	r2, #32
 8001782:	f2c8 0000 	movt	r0, #32768	; 0x8000
 8001786:	4010      	ands	r0, r2
 8001788:	2800      	cmp	r0, #0
 800178a:	db00      	blt.n	800178e <HW_UART_Q_VAILD+0x1e>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 800178c:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800178e:	3801      	subs	r0, #1
 8001790:	f060 011f 	orn	r1, r0, #31
 8001794:	1c48      	adds	r0, r1, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8001796:	4770      	bx	lr
 8001798:	2000061c 	.word	0x2000061c
 800179c:	2000060c 	.word	0x2000060c

080017a0 <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80017a0:	4a1a      	ldr	r2, [pc, #104]	; (800180c <Hw_Uart_Q_Push+0x6c>)
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <Hw_Uart_Q_Push+0x70>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 80017a4:	b4f0      	push	{r4, r5, r6, r7}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80017a6:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 80017aa:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 80017ae:	b22c      	sxth	r4, r5
 80017b0:	231f      	movs	r3, #31
 80017b2:	1ba6      	subs	r6, r4, r6
 80017b4:	3620      	adds	r6, #32
 80017b6:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80017ba:	4033      	ands	r3, r6
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db18      	blt.n	80017f2 <Hw_Uart_Q_Push+0x52>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 80017c0:	2b1f      	cmp	r3, #31
 80017c2:	d01c      	beq.n	80017fe <Hw_Uart_Q_Push+0x5e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80017c4:	3501      	adds	r5, #1
 80017c6:	b2ad      	uxth	r5, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80017c8:	231f      	movs	r3, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80017ca:	780e      	ldrb	r6, [r1, #0]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80017cc:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80017d0:	b229      	sxth	r1, r5
 80017d2:	400b      	ands	r3, r1
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80017d4:	eb00 1740 	add.w	r7, r0, r0, lsl #5
 80017d8:	490e      	ldr	r1, [pc, #56]	; (8001814 <Hw_Uart_Q_Push+0x74>)
 80017da:	193c      	adds	r4, r7, r4
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80017dc:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80017de:	550e      	strb	r6, [r1, r4]
 80017e0:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80017e4:	db0d      	blt.n	8001802 <Hw_Uart_Q_Push+0x62>
 80017e6:	4909      	ldr	r1, [pc, #36]	; (800180c <Hw_Uart_Q_Push+0x6c>)
 80017e8:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

	return TRUE;
 80017ec:	2001      	movs	r0, #1
}
 80017ee:	bcf0      	pop	{r4, r5, r6, r7}
 80017f0:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f063 031f 	orn	r3, r3, #31
 80017f8:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 80017fa:	2b1f      	cmp	r3, #31
 80017fc:	d1e2      	bne.n	80017c4 <Hw_Uart_Q_Push+0x24>
 80017fe:	2000      	movs	r0, #0
 8001800:	e7f5      	b.n	80017ee <Hw_Uart_Q_Push+0x4e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8001802:	1e5a      	subs	r2, r3, #1
 8001804:	f062 031f 	orn	r3, r2, #31
 8001808:	3301      	adds	r3, #1
 800180a:	e7ec      	b.n	80017e6 <Hw_Uart_Q_Push+0x46>
 800180c:	2000061c 	.word	0x2000061c
 8001810:	2000060c 	.word	0x2000060c
 8001814:	20000514 	.word	0x20000514

08001818 <Hw_Uart_Q_Pop>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001818:	4a1a      	ldr	r2, [pc, #104]	; (8001884 <Hw_Uart_Q_Pop+0x6c>)
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <Hw_Uart_Q_Pop+0x70>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 800181c:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800181e:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 8001822:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 8001826:	b22c      	sxth	r4, r5
 8001828:	231f      	movs	r3, #31
 800182a:	1b36      	subs	r6, r6, r4
 800182c:	3620      	adds	r6, #32
 800182e:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8001832:	4033      	ands	r3, r6
 8001834:	2b00      	cmp	r3, #0
 8001836:	db17      	blt.n	8001868 <Hw_Uart_Q_Pop+0x50>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8001838:	b1e3      	cbz	r3, 8001874 <Hw_Uart_Q_Pop+0x5c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 800183a:	eb00 1640 	add.w	r6, r0, r0, lsl #5
 800183e:	3501      	adds	r5, #1
 8001840:	1934      	adds	r4, r6, r4
 8001842:	4e12      	ldr	r6, [pc, #72]	; (800188c <Hw_Uart_Q_Pop+0x74>)
 8001844:	b2ad      	uxth	r5, r5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8001846:	231f      	movs	r3, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8001848:	5d34      	ldrb	r4, [r6, r4]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800184a:	f2c8 0300 	movt	r3, #32768	; 0x8000
 800184e:	b22e      	sxth	r6, r5
 8001850:	4033      	ands	r3, r6
 8001852:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8001854:	700c      	strb	r4, [r1, #0]
 8001856:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800185a:	db0d      	blt.n	8001878 <Hw_Uart_Q_Pop+0x60>
 800185c:	4909      	ldr	r1, [pc, #36]	; (8001884 <Hw_Uart_Q_Pop+0x6c>)
 800185e:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

    return TRUE;
 8001862:	2001      	movs	r0, #1
}
 8001864:	bc70      	pop	{r4, r5, r6}
 8001866:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001868:	3b01      	subs	r3, #1
 800186a:	f063 031f 	orn	r3, r3, #31
 800186e:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e2      	bne.n	800183a <Hw_Uart_Q_Pop+0x22>
 8001874:	4618      	mov	r0, r3
 8001876:	e7f5      	b.n	8001864 <Hw_Uart_Q_Pop+0x4c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8001878:	1e59      	subs	r1, r3, #1
 800187a:	f061 021f 	orn	r2, r1, #31
 800187e:	1c53      	adds	r3, r2, #1
 8001880:	e7ec      	b.n	800185c <Hw_Uart_Q_Pop+0x44>
 8001882:	bf00      	nop
 8001884:	2000060c 	.word	0x2000060c
 8001888:	2000061c 	.word	0x2000061c
 800188c:	20000514 	.word	0x20000514

08001890 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8001890:	f640 0300 	movw	r3, #2048	; 0x800
 8001894:	f64e 5208 	movw	r2, #60680	; 0xed08
 8001898:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800189c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4770      	bx	lr

080018a4 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 80018a4:	f640 0300 	movw	r3, #2048	; 0x800
 80018a8:	3010      	adds	r0, #16
 80018aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018ae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80018b2:	4770      	bx	lr

080018b4 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 80018b4:	f640 0300 	movw	r3, #2048	; 0x800
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 80018b8:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 80018ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018be:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80018c2:	4770      	bx	lr

080018c4 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 80018c4:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 80018c6:	f641 3139 	movw	r1, #6969	; 0x1b39
 80018ca:	f641 03b5 	movw	r3, #6325	; 0x18b5
 80018ce:	203c      	movs	r0, #60	; 0x3c
 80018d0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80018d4:	2200      	movs	r2, #0
 80018d6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80018da:	4798      	blx	r3
 80018dc:	bd08      	pop	{r3, pc}
 80018de:	bf00      	nop

080018e0 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 80018e0:	b538      	push	{r3, r4, r5, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 80018e2:	4d28      	ldr	r5, [pc, #160]	; (8001984 <Hw_Timer_Init+0xa4>)
 80018e4:	782b      	ldrb	r3, [r5, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d04a      	beq.n	8001980 <Hw_Timer_Init+0xa0>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80018ea:	4827      	ldr	r0, [pc, #156]	; (8001988 <Hw_Timer_Init+0xa8>)
 80018ec:	2400      	movs	r4, #0
 80018ee:	7004      	strb	r4, [r0, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80018f0:	8044      	strh	r4, [r0, #2]
		Timer_Tbl[i].Timer_Init = 0;
 80018f2:	8084      	strh	r4, [r0, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 80018f4:	6084      	str	r4, [r0, #8]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80018f6:	7404      	strb	r4, [r0, #16]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80018f8:	8244      	strh	r4, [r0, #18]
		Timer_Tbl[i].Timer_Init = 0;
 80018fa:	8284      	strh	r4, [r0, #20]
		Timer_Tbl[i].TmrFnct    = NULL;
 80018fc:	6184      	str	r4, [r0, #24]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80018fe:	f880 4020 	strb.w	r4, [r0, #32]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001902:	8444      	strh	r4, [r0, #34]	; 0x22
		Timer_Tbl[i].Timer_Init = 0;
 8001904:	8484      	strh	r4, [r0, #36]	; 0x24
		Timer_Tbl[i].TmrFnct    = NULL;
 8001906:	6284      	str	r4, [r0, #40]	; 0x28
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001908:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
		Timer_Tbl[i].Timer_Ctn  = 0;
 800190c:	8644      	strh	r4, [r0, #50]	; 0x32
		Timer_Tbl[i].Timer_Init = 0;
 800190e:	8684      	strh	r4, [r0, #52]	; 0x34
		Timer_Tbl[i].TmrFnct    = NULL;
 8001910:	6384      	str	r4, [r0, #56]	; 0x38
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001912:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001916:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
		Timer_Tbl[i].Timer_Init = 0;
 800191a:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
		Timer_Tbl[i].TmrFnct    = NULL;
 800191e:	6484      	str	r4, [r0, #72]	; 0x48
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001920:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001924:	f8a0 4052 	strh.w	r4, [r0, #82]	; 0x52
		Timer_Tbl[i].Timer_Init = 0;
 8001928:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
		Timer_Tbl[i].TmrFnct    = NULL;
 800192c:	6584      	str	r4, [r0, #88]	; 0x58
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800192e:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001932:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
		Timer_Tbl[i].Timer_Init = 0;
 8001936:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		Timer_Tbl[i].TmrFnct    = NULL;
 800193a:	6684      	str	r4, [r0, #104]	; 0x68
	}	                   
	
	
	Hw_Timer_SetupISR();
 800193c:	4913      	ldr	r1, [pc, #76]	; (800198c <Hw_Timer_Init+0xac>)
 800193e:	4788      	blx	r1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8001940:	f24e 0114 	movw	r1, #57364	; 0xe014
 8001944:	f641 103f 	movw	r0, #6463	; 0x193f
	
	REG_STK_VAL  = 0;	
 8001948:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800194c:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8001950:	f2c0 0001 	movt	r0, #1
	
	REG_STK_VAL  = 0;	
 8001954:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8001958:	f24e 0310 	movw	r3, #57360	; 0xe010
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800195c:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800195e:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8001962:	6014      	str	r4, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8001964:	6819      	ldr	r1, [r3, #0]
 8001966:	f041 0004 	orr.w	r0, r1, #4
 800196a:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f042 0102 	orr.w	r1, r2, #2
 8001972:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	f040 0201 	orr.w	r2, r0, #1
 800197a:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 800197c:	2301      	movs	r3, #1
 800197e:	702b      	strb	r3, [r5, #0]
 8001980:	bd38      	pop	{r3, r4, r5, pc}
 8001982:	bf00      	nop
 8001984:	2000040d 	.word	0x2000040d
 8001988:	20000410 	.word	0x20000410
 800198c:	080018c5 	.word	0x080018c5

08001990 <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8001990:	4b66      	ldr	r3, [pc, #408]	; (8001b2c <Hw_Timer_Tick+0x19c>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 8001992:	4a67      	ldr	r2, [pc, #412]	; (8001b30 <Hw_Timer_Tick+0x1a0>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8001994:	6819      	ldr	r1, [r3, #0]
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8001996:	b510      	push	{r4, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8001998:	1c48      	adds	r0, r1, #1
 800199a:	6018      	str	r0, [r3, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 800199c:	8814      	ldrh	r4, [r2, #0]
 800199e:	b2a3      	uxth	r3, r4
 80019a0:	b11b      	cbz	r3, 80019aa <Hw_Timer_Tick+0x1a>
 80019a2:	8811      	ldrh	r1, [r2, #0]
 80019a4:	1e48      	subs	r0, r1, #1
 80019a6:	b284      	uxth	r4, r0
 80019a8:	8014      	strh	r4, [r2, #0]
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80019aa:	4c62      	ldr	r4, [pc, #392]	; (8001b34 <Hw_Timer_Tick+0x1a4>)
 80019ac:	7822      	ldrb	r2, [r4, #0]
 80019ae:	2a01      	cmp	r2, #1
 80019b0:	d01d      	beq.n	80019ee <Hw_Timer_Tick+0x5e>
 80019b2:	7c20      	ldrb	r0, [r4, #16]
 80019b4:	4a5f      	ldr	r2, [pc, #380]	; (8001b34 <Hw_Timer_Tick+0x1a4>)
 80019b6:	2801      	cmp	r0, #1
 80019b8:	d02b      	beq.n	8001a12 <Hw_Timer_Tick+0x82>
 80019ba:	f894 0020 	ldrb.w	r0, [r4, #32]
 80019be:	4a5d      	ldr	r2, [pc, #372]	; (8001b34 <Hw_Timer_Tick+0x1a4>)
 80019c0:	2801      	cmp	r0, #1
 80019c2:	d038      	beq.n	8001a36 <Hw_Timer_Tick+0xa6>
 80019c4:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 80019c8:	4a5a      	ldr	r2, [pc, #360]	; (8001b34 <Hw_Timer_Tick+0x1a4>)
 80019ca:	2801      	cmp	r0, #1
 80019cc:	d046      	beq.n	8001a5c <Hw_Timer_Tick+0xcc>
 80019ce:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80019d2:	4a58      	ldr	r2, [pc, #352]	; (8001b34 <Hw_Timer_Tick+0x1a4>)
 80019d4:	2801      	cmp	r0, #1
 80019d6:	d054      	beq.n	8001a82 <Hw_Timer_Tick+0xf2>
 80019d8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 80019dc:	4a55      	ldr	r2, [pc, #340]	; (8001b34 <Hw_Timer_Tick+0x1a4>)
 80019de:	2801      	cmp	r0, #1
 80019e0:	d066      	beq.n	8001ab0 <Hw_Timer_Tick+0x120>
 80019e2:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 80019e6:	4a53      	ldr	r2, [pc, #332]	; (8001b34 <Hw_Timer_Tick+0x1a4>)
 80019e8:	2801      	cmp	r0, #1
 80019ea:	d078      	beq.n	8001ade <Hw_Timer_Tick+0x14e>
 80019ec:	bd10      	pop	{r4, pc}
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80019ee:	8863      	ldrh	r3, [r4, #2]
 80019f0:	1e59      	subs	r1, r3, #1
 80019f2:	b288      	uxth	r0, r1
 80019f4:	8060      	strh	r0, [r4, #2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80019f6:	2800      	cmp	r0, #0
 80019f8:	d1db      	bne.n	80019b2 <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80019fa:	7862      	ldrb	r2, [r4, #1]
 80019fc:	2a01      	cmp	r2, #1
 80019fe:	f000 8086 	beq.w	8001b0e <Hw_Timer_Tick+0x17e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001a02:	88a1      	ldrh	r1, [r4, #4]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001a04:	68a3      	ldr	r3, [r4, #8]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001a06:	8061      	strh	r1, [r4, #2]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001a08:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001a0a:	7c20      	ldrb	r0, [r4, #16]
 8001a0c:	4a49      	ldr	r2, [pc, #292]	; (8001b34 <Hw_Timer_Tick+0x1a4>)
 8001a0e:	2801      	cmp	r0, #1
 8001a10:	d1d3      	bne.n	80019ba <Hw_Timer_Tick+0x2a>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001a12:	8a51      	ldrh	r1, [r2, #18]
 8001a14:	1e4b      	subs	r3, r1, #1
 8001a16:	b298      	uxth	r0, r3
 8001a18:	8250      	strh	r0, [r2, #18]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	d1cd      	bne.n	80019ba <Hw_Timer_Tick+0x2a>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001a1e:	7c51      	ldrb	r1, [r2, #17]
 8001a20:	2901      	cmp	r1, #1
 8001a22:	d072      	beq.n	8001b0a <Hw_Timer_Tick+0x17a>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001a24:	8aa2      	ldrh	r2, [r4, #20]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001a26:	69a3      	ldr	r3, [r4, #24]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001a28:	8262      	strh	r2, [r4, #18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001a2a:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001a2c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8001a30:	4a40      	ldr	r2, [pc, #256]	; (8001b34 <Hw_Timer_Tick+0x1a4>)
 8001a32:	2801      	cmp	r0, #1
 8001a34:	d1c6      	bne.n	80019c4 <Hw_Timer_Tick+0x34>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001a36:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8001a38:	1e4b      	subs	r3, r1, #1
 8001a3a:	b298      	uxth	r0, r3
 8001a3c:	8450      	strh	r0, [r2, #34]	; 0x22

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	d1c0      	bne.n	80019c4 <Hw_Timer_Tick+0x34>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001a42:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8001a46:	2901      	cmp	r1, #1
 8001a48:	d06c      	beq.n	8001b24 <Hw_Timer_Tick+0x194>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001a4a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001a4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001a4e:	8462      	strh	r2, [r4, #34]	; 0x22

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001a50:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001a52:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8001a56:	4a37      	ldr	r2, [pc, #220]	; (8001b34 <Hw_Timer_Tick+0x1a4>)
 8001a58:	2801      	cmp	r0, #1
 8001a5a:	d1b8      	bne.n	80019ce <Hw_Timer_Tick+0x3e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001a5c:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 8001a5e:	1e4b      	subs	r3, r1, #1
 8001a60:	b298      	uxth	r0, r3
 8001a62:	8650      	strh	r0, [r2, #50]	; 0x32

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001a64:	2800      	cmp	r0, #0
 8001a66:	d1b2      	bne.n	80019ce <Hw_Timer_Tick+0x3e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001a68:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8001a6c:	2901      	cmp	r1, #1
 8001a6e:	d056      	beq.n	8001b1e <Hw_Timer_Tick+0x18e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001a70:	8ea2      	ldrh	r2, [r4, #52]	; 0x34

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001a72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001a74:	8662      	strh	r2, [r4, #50]	; 0x32

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001a76:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001a78:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8001a7c:	4a2d      	ldr	r2, [pc, #180]	; (8001b34 <Hw_Timer_Tick+0x1a4>)
 8001a7e:	2801      	cmp	r0, #1
 8001a80:	d1aa      	bne.n	80019d8 <Hw_Timer_Tick+0x48>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001a82:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
 8001a86:	1e4b      	subs	r3, r1, #1
 8001a88:	b298      	uxth	r0, r3
 8001a8a:	f8a2 0042 	strh.w	r0, [r2, #66]	; 0x42

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	d1a2      	bne.n	80019d8 <Hw_Timer_Tick+0x48>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001a92:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
 8001a96:	2901      	cmp	r1, #1
 8001a98:	d03e      	beq.n	8001b18 <Hw_Timer_Tick+0x188>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001a9a:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001a9e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001aa0:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001aa4:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001aa6:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8001aaa:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <Hw_Timer_Tick+0x1a4>)
 8001aac:	2801      	cmp	r0, #1
 8001aae:	d198      	bne.n	80019e2 <Hw_Timer_Tick+0x52>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001ab0:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
 8001ab4:	1e4b      	subs	r3, r1, #1
 8001ab6:	b298      	uxth	r0, r3
 8001ab8:	f8a2 0052 	strh.w	r0, [r2, #82]	; 0x52

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d190      	bne.n	80019e2 <Hw_Timer_Tick+0x52>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001ac0:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
 8001ac4:	2901      	cmp	r1, #1
 8001ac6:	d024      	beq.n	8001b12 <Hw_Timer_Tick+0x182>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001ac8:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001acc:	6da3      	ldr	r3, [r4, #88]	; 0x58
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001ace:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001ad2:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001ad4:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <Hw_Timer_Tick+0x1a4>)
 8001ada:	2801      	cmp	r0, #1
 8001adc:	d186      	bne.n	80019ec <Hw_Timer_Tick+0x5c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001ade:	f8b2 1062 	ldrh.w	r1, [r2, #98]	; 0x62
 8001ae2:	1e4b      	subs	r3, r1, #1
 8001ae4:	b298      	uxth	r0, r3
 8001ae6:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001aea:	2800      	cmp	r0, #0
 8001aec:	f47f af7e 	bne.w	80019ec <Hw_Timer_Tick+0x5c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001af0:	f892 1061 	ldrb.w	r1, [r2, #97]	; 0x61

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001af4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001af6:	2901      	cmp	r1, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8001af8:	bf08      	it	eq
 8001afa:	f882 0060 	strbeq.w	r0, [r2, #96]	; 0x60

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001afe:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 8001b02:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001b06:	4798      	blx	r3
 8001b08:	bd10      	pop	{r4, pc}

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8001b0a:	7410      	strb	r0, [r2, #16]
 8001b0c:	e78a      	b.n	8001a24 <Hw_Timer_Tick+0x94>
 8001b0e:	7020      	strb	r0, [r4, #0]
 8001b10:	e777      	b.n	8001a02 <Hw_Timer_Tick+0x72>
 8001b12:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 8001b16:	e7d7      	b.n	8001ac8 <Hw_Timer_Tick+0x138>
 8001b18:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
 8001b1c:	e7bd      	b.n	8001a9a <Hw_Timer_Tick+0x10a>
 8001b1e:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
 8001b22:	e7a5      	b.n	8001a70 <Hw_Timer_Tick+0xe0>
 8001b24:	f882 0020 	strb.w	r0, [r2, #32]
 8001b28:	e78f      	b.n	8001a4a <Hw_Timer_Tick+0xba>
 8001b2a:	bf00      	nop
 8001b2c:	20000480 	.word	0x20000480
 8001b30:	20000484 	.word	0x20000484
 8001b34:	20000410 	.word	0x20000410

08001b38 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 8001b38:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 8001b3a:	f641 1391 	movw	r3, #6545	; 0x1991
 8001b3e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001b42:	4798      	blx	r3
 8001b44:	bd08      	pop	{r3, pc}
 8001b46:	bf00      	nop

08001b48 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8001b48:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8001b4a:	f240 4410 	movw	r4, #1040	; 0x410
 8001b4e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001b52:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8001b56:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8001b58:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8001b5a:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8001b5c:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 8001b5e:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 8001b60:	8081      	strh	r1, [r0, #4]
}
 8001b62:	bc10      	pop	{r4}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop

08001b68 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8001b68:	2806      	cmp	r0, #6
 8001b6a:	d803      	bhi.n	8001b74 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8001b6c:	4b02      	ldr	r3, [pc, #8]	; (8001b78 <Hw_Timer_Start+0x10>)
 8001b6e:	0100      	lsls	r0, r0, #4
 8001b70:	2201      	movs	r2, #1
 8001b72:	541a      	strb	r2, [r3, r0]
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000410 	.word	0x20000410

08001b7c <Hw_Timer_Stop>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Stop(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8001b7c:	2806      	cmp	r0, #6
 8001b7e:	d803      	bhi.n	8001b88 <Hw_Timer_Stop+0xc>
		Timer_Tbl[TmrNum].Timer_En = OFF;
 8001b80:	4b02      	ldr	r3, [pc, #8]	; (8001b8c <Hw_Timer_Stop+0x10>)
 8001b82:	0100      	lsls	r0, r0, #4
 8001b84:	2200      	movs	r2, #0
 8001b86:	541a      	strb	r2, [r3, r0]
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000410 	.word	0x20000410

08001b90 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8001b90:	4a03      	ldr	r2, [pc, #12]	; (8001ba0 <Hw_Timer_Delay_ms+0x10>)
 8001b92:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 8001b94:	8813      	ldrh	r3, [r2, #0]
 8001b96:	b298      	uxth	r0, r3
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	d1fb      	bne.n	8001b94 <Hw_Timer_Delay_ms+0x4>
}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000484 	.word	0x20000484

08001ba4 <Hw_Timer_Get_CountValue>:
     ARG
     RET
---------------------------------------------------------------------------*/
u32 Hw_Timer_Get_CountValue( void )
{
	return Hw_Timer_Counter;
 8001ba4:	f240 4380 	movw	r3, #1152	; 0x480
 8001ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bac:	6818      	ldr	r0, [r3, #0]
}
 8001bae:	4770      	bx	lr

08001bb0 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8001bb0:	b508      	push	{r3, lr}
	Set_System();
 8001bb2:	f643 13a1 	movw	r3, #14753	; 0x39a1
 8001bb6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001bba:	4798      	blx	r3
	Set_USBClock();
 8001bbc:	f643 10c1 	movw	r0, #14785	; 0x39c1
 8001bc0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bc4:	4780      	blx	r0
	USB_Interrupts_Config();
 8001bc6:	f643 2105 	movw	r1, #14853	; 0x3a05
 8001bca:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001bce:	4788      	blx	r1
	USB_Init();	
 8001bd0:	f244 52ed 	movw	r2, #17901	; 0x45ed
 8001bd4:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001bd8:	4790      	blx	r2
 8001bda:	bd08      	pop	{r3, pc}

08001bdc <Hw_I2C_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_Init( void )
{
 8001bdc:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	Hw_I2C_SW_Init();	
 8001bde:	f641 43c5 	movw	r3, #7365	; 0x1cc5
 8001be2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001be6:	4798      	blx	r3
 8001be8:	bd08      	pop	{r3, pc}
 8001bea:	bf00      	nop

08001bec <Hw_I2C_Write>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_Write( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8001bec:	b510      	push	{r4, lr}
	u16 Ret;
	
	#if HW_I2C_USE_SW_I2C == 1
	
	Ret = Hw_I2C_SW_Write( Ch, i2c_addr, pdata, len );
 8001bee:	f242 2415 	movw	r4, #8725	; 0x2215
 8001bf2:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001bf6:	47a0      	blx	r4
	#else
	
	#endif

    return Ret;
}
 8001bf8:	bd10      	pop	{r4, pc}
 8001bfa:	bf00      	nop

08001bfc <Hw_I2C_Read>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_Read( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8001bfc:	b510      	push	{r4, lr}
	u16 Ret;

	#if HW_I2C_USE_SW_I2C == 1
	
	Ret = Hw_I2C_SW_Read( Ch, i2c_addr, pdata, len );	
 8001bfe:	f242 1411 	movw	r4, #8465	; 0x2111
 8001c02:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001c06:	47a0      	blx	r4
	#else
	
	#endif
	
    return Ret;
}
 8001c08:	bd10      	pop	{r4, pc}
 8001c0a:	bf00      	nop

08001c0c <Hw_I2C_SW_SCL_HIGH>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SCL_HIGH( u8 Ch )
{
 8001c0c:	b538      	push	{r3, r4, r5, lr}
 8001c0e:	4605      	mov	r5, r0
	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001c10:	4c07      	ldr	r4, [pc, #28]	; (8001c30 <Hw_I2C_SW_SCL_HIGH+0x24>)
 8001c12:	200a      	movs	r0, #10
 8001c14:	47a0      	blx	r4

	if( Ch == 0 )  
 8001c16:	b93d      	cbnz	r5, 8001c28 <Hw_I2C_SW_SCL_HIGH+0x1c>
	{
		SET_BIT( REG_GPIOB_ODR, 6 );
 8001c18:	f640 430c 	movw	r3, #3084	; 0xc0c
 8001c1c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f042 0040 	orr.w	r0, r2, #64	; 0x40
 8001c26:	6018      	str	r0, [r3, #0]
	}
	else           
	{
	}

	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001c28:	200a      	movs	r0, #10
 8001c2a:	47a0      	blx	r4
 8001c2c:	bd38      	pop	{r3, r4, r5, pc}
 8001c2e:	bf00      	nop
 8001c30:	080014c5 	.word	0x080014c5

08001c34 <Hw_I2C_SW_SCL_LOW>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SCL_LOW( u8 Ch )
{
 8001c34:	b538      	push	{r3, r4, r5, lr}
 8001c36:	4605      	mov	r5, r0
	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001c38:	4c07      	ldr	r4, [pc, #28]	; (8001c58 <Hw_I2C_SW_SCL_LOW+0x24>)
 8001c3a:	200a      	movs	r0, #10
 8001c3c:	47a0      	blx	r4

	if( Ch == 0 )  
 8001c3e:	b93d      	cbnz	r5, 8001c50 <Hw_I2C_SW_SCL_LOW+0x1c>
	{
		CLR_BIT( REG_GPIOB_ODR, 6 );	
 8001c40:	f640 430c 	movw	r3, #3084	; 0xc0c
 8001c44:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	f022 0040 	bic.w	r0, r2, #64	; 0x40
 8001c4e:	6018      	str	r0, [r3, #0]
	}
	else           
	{
	}

	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001c50:	200a      	movs	r0, #10
 8001c52:	47a0      	blx	r4
 8001c54:	bd38      	pop	{r3, r4, r5, pc}
 8001c56:	bf00      	nop
 8001c58:	080014c5 	.word	0x080014c5

08001c5c <Hw_I2C_SW_SDA_HIGH>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8001c5c:	b938      	cbnz	r0, 8001c6e <Hw_I2C_SW_SDA_HIGH+0x12>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001c5e:	f640 430c 	movw	r3, #3084	; 0xc0c
 8001c62:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	f042 0080 	orr.w	r0, r2, #128	; 0x80
 8001c6c:	6018      	str	r0, [r3, #0]
 8001c6e:	4770      	bx	lr

08001c70 <Hw_I2C_SW_IO_Setup>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_IO_Setup( void )
{
 8001c70:	b538      	push	{r3, r4, r5, lr}
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 8001c72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c76:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c7a:	681a      	ldr	r2, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001c7c:	f641 450d 	movw	r5, #7181	; 0x1c0d
{
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 8001c80:	f022 6070 	bic.w	r0, r2, #251658240	; 0xf000000
 8001c84:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (24));	// MODE, PB.6 Output mode, max speed 50Mhz
 8001c86:	6819      	ldr	r1, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001c88:	2000      	movs	r0, #0
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (24));	// MODE, PB.6 Output mode, max speed 50Mhz
 8001c8a:	f041 7440 	orr.w	r4, r1, #50331648	; 0x3000000
 8001c8e:	601c      	str	r4, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (26));	// CNF,  PB.6 General purpose output push-pul	
 8001c90:	681a      	ldr	r2, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001c92:	f6c0 0500 	movt	r5, #2048	; 0x800

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (24));	// MODE, PB.6 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (26));	// CNF,  PB.6 General purpose output push-pul	
 8001c96:	601a      	str	r2, [r3, #0]


	//-- SDA PB.7
	//
	REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001c98:	6819      	ldr	r1, [r3, #0]

	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
		Hw_I2C_SW_SDA_HIGH( i );
 8001c9a:	f641 445d 	movw	r4, #7261	; 0x1c5d
	REG_GPIOB_CRL |=  (0x00 << (26));	// CNF,  PB.6 General purpose output push-pul	


	//-- SDA PB.7
	//
	REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001c9e:	f021 4270 	bic.w	r2, r1, #4026531840	; 0xf0000000
 8001ca2:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8001ca4:	6819      	ldr	r1, [r3, #0]

	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
		Hw_I2C_SW_SDA_HIGH( i );
 8001ca6:	f6c0 0400 	movt	r4, #2048	; 0x800


	//-- SDA PB.7
	//
	REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8001caa:	f041 5240 	orr.w	r2, r1, #805306368	; 0x30000000
 8001cae:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	6019      	str	r1, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001cb4:	47a8      	blx	r5
		Hw_I2C_SW_SDA_HIGH( i );
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	47a0      	blx	r4


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001cba:	2001      	movs	r0, #1
 8001cbc:	47a8      	blx	r5
		Hw_I2C_SW_SDA_HIGH( i );
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	47a0      	blx	r4
 8001cc2:	bd38      	pop	{r3, r4, r5, pc}

08001cc4 <Hw_I2C_SW_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_Init( void )
{
 8001cc4:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	Hw_I2C_SW_IO_Setup();	
 8001cc6:	f641 4371 	movw	r3, #7281	; 0x1c71
 8001cca:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001cce:	4798      	blx	r3
 8001cd0:	bd08      	pop	{r3, pc}
 8001cd2:	bf00      	nop

08001cd4 <Hw_I2C_SW_SDA_LOW>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001cd4:	b938      	cbnz	r0, 8001ce6 <Hw_I2C_SW_SDA_LOW+0x12>
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001cd6:	f640 430c 	movw	r3, #3084	; 0xc0c
 8001cda:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8001ce4:	6018      	str	r0, [r3, #0]
 8001ce6:	4770      	bx	lr

08001ce8 <Hw_I2C_SW_EndTransmit>:
     ARG     : 
     			u8 Ch : I2C 채널
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_EndTransmit( u8 Ch )
{
 8001ce8:	b538      	push	{r3, r4, r5, lr}
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
 8001cea:	f641 43d5 	movw	r3, #7381	; 0x1cd5
 8001cee:	f6c0 0300 	movt	r3, #2048	; 0x800
     ARG     : 
     			u8 Ch : I2C 채널
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_EndTransmit( u8 Ch )
{
 8001cf2:	4604      	mov	r4, r0
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
 8001cf4:	4798      	blx	r3
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001cf6:	f641 4135 	movw	r1, #7221	; 0x1c35
 8001cfa:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001cfe:	4620      	mov	r0, r4
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
 8001d00:	f641 450d 	movw	r5, #7181	; 0x1c0d
{
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001d04:	4788      	blx	r1
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
 8001d06:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	47a8      	blx	r5
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
 8001d0e:	f641 425d 	movw	r2, #7261	; 0x1c5d
 8001d12:	4620      	mov	r0, r4
 8001d14:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001d18:	4790      	blx	r2
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	47a8      	blx	r5
 8001d1e:	bd38      	pop	{r3, r4, r5, pc}

08001d20 <Hw_I2C_SW_StartTransmit>:
     ARG     : 
     			u8 Ch : I2C 채널
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_StartTransmit( u8 Ch )
{
 8001d20:	b538      	push	{r3, r4, r5, lr}
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
 8001d22:	f641 450d 	movw	r5, #7181	; 0x1c0d
 8001d26:	f6c0 0500 	movt	r5, #2048	; 0x800
     ARG     : 
     			u8 Ch : I2C 채널
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_StartTransmit( u8 Ch )
{
 8001d2a:	4604      	mov	r4, r0
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
 8001d2c:	47a8      	blx	r5
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
 8001d2e:	f641 435d 	movw	r3, #7261	; 0x1c5d
 8001d32:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001d36:	4620      	mov	r0, r4
 8001d38:	4798      	blx	r3
	Hw_I2C_SW_SCL_HIGH( Ch );	//	1    1
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	47a8      	blx	r5
	Hw_I2C_SW_SDA_LOW ( Ch );	//  1    0
 8001d3e:	f641 41d5 	movw	r1, #7381	; 0x1cd5
 8001d42:	4620      	mov	r0, r4
 8001d44:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001d48:	4788      	blx	r1
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001d4a:	f641 4235 	movw	r2, #7221	; 0x1c35
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001d54:	4790      	blx	r2
 8001d56:	bd38      	pop	{r3, r4, r5, pc}

08001d58 <Hw_I2C_SW_SDA>:
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_SDA( u8 Ch )
{
	u8 Data = 0;

	if( Ch == 0 )
 8001d58:	b938      	cbnz	r0, 8001d6a <Hw_I2C_SW_SDA+0x12>
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001d5a:	f640 4308 	movw	r3, #3080	; 0xc08
 8001d5e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8001d68:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_SDA( u8 Ch )
{
	u8 Data = 0;
 8001d6a:	2000      	movs	r0, #0
	else
	{
	}

	return Data;	
}	
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop

08001d70 <Hw_I2C_SW_SetDir_SDA_Input>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Input( u8 Ch )
{
	if( Ch == 0 )
 8001d70:	b9a8      	cbnz	r0, 8001d9e <Hw_I2C_SW_SetDir_SDA_Input+0x2e>
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001d72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d76:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001d7a:	6819      	ldr	r1, [r3, #0]
		REG_GPIOB_CRL |=  (0x00 << (28));	// MODE, PB.7 Input Mode
		//REG_GPIOB_CRL |=  (0x01 << (30));	// CNF,  PB.7 Floating input	
		REG_GPIOB_CRL |=  (0x02 << (30));	// CNF,  PB.7 input	pull-up/pull-down
		
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001d7c:	f640 420c 	movw	r2, #3084	; 0xc0c
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Input( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001d80:	f021 4070 	bic.w	r0, r1, #4026531840	; 0xf0000000
 8001d84:	6018      	str	r0, [r3, #0]
		REG_GPIOB_CRL |=  (0x00 << (28));	// MODE, PB.7 Input Mode
 8001d86:	6819      	ldr	r1, [r3, #0]
		//REG_GPIOB_CRL |=  (0x01 << (30));	// CNF,  PB.7 Floating input	
		REG_GPIOB_CRL |=  (0x02 << (30));	// CNF,  PB.7 input	pull-up/pull-down
		
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001d88:	f2c4 0201 	movt	r2, #16385	; 0x4001
void Hw_I2C_SW_SetDir_SDA_Input( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
		REG_GPIOB_CRL |=  (0x00 << (28));	// MODE, PB.7 Input Mode
 8001d8c:	6019      	str	r1, [r3, #0]
		//REG_GPIOB_CRL |=  (0x01 << (30));	// CNF,  PB.7 Floating input	
		REG_GPIOB_CRL |=  (0x02 << (30));	// CNF,  PB.7 input	pull-up/pull-down
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	f040 4100 	orr.w	r1, r0, #2147483648	; 0x80000000
 8001d94:	6019      	str	r1, [r3, #0]
		
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001d96:	6813      	ldr	r3, [r2, #0]
 8001d98:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8001d9c:	6010      	str	r0, [r2, #0]
 8001d9e:	4770      	bx	lr

08001da0 <Hw_I2C_SW_SetDir_SDA_Output>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
 8001da0:	b968      	cbnz	r0, 8001dbe <Hw_I2C_SW_SetDir_SDA_Output+0x1e>
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001da2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001da6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	f022 4070 	bic.w	r0, r2, #4026531840	; 0xf0000000
 8001db0:	6018      	str	r0, [r3, #0]
		REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8001db2:	6819      	ldr	r1, [r3, #0]
 8001db4:	f041 5240 	orr.w	r2, r1, #805306368	; 0x30000000
 8001db8:	601a      	str	r2, [r3, #0]
		REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	6018      	str	r0, [r3, #0]
 8001dbe:	4770      	bx	lr

08001dc0 <Hw_I2C_SW_ReadByte_Ack>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_Ack( u8 Ch, u8 *pData )
{
 8001dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dc4:	4604      	mov	r4, r0
	u8 i;
	u8 Data = 0;
	u8 Ack = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001dc6:	4b42      	ldr	r3, [pc, #264]	; (8001ed0 <Hw_I2C_SW_ReadByte_Ack+0x110>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_Ack( u8 Ch, u8 *pData )
{
 8001dc8:	4689      	mov	r9, r1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001dca:	4e42      	ldr	r6, [pc, #264]	; (8001ed4 <Hw_I2C_SW_ReadByte_Ack+0x114>)
	u8 i;
	u8 Data = 0;
	u8 Ack = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001dcc:	4798      	blx	r3

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001dce:	4620      	mov	r0, r4
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001dd0:	4f41      	ldr	r7, [pc, #260]	; (8001ed8 <Hw_I2C_SW_ReadByte_Ack+0x118>)

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001dd2:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	47b8      	blx	r7

		Hw_I2C_SW_SCL_LOW( Ch );
 8001dd8:	4d40      	ldr	r5, [pc, #256]	; (8001edc <Hw_I2C_SW_ReadByte_Ack+0x11c>)
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001dda:	4680      	mov	r8, r0

		Hw_I2C_SW_SCL_LOW( Ch );
 8001ddc:	4620      	mov	r0, r4
 8001dde:	47a8      	blx	r5

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001de0:	4620      	mov	r0, r4
 8001de2:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001de4:	4620      	mov	r0, r4
 8001de6:	47b8      	blx	r7

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001de8:	f1b8 0f01 	cmp.w	r8, #1
 8001dec:	bf0c      	ite	eq
 8001dee:	f04f 0802 	moveq.w	r8, #2
 8001df2:	f04f 0800 	movne.w	r8, #0

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001df6:	2801      	cmp	r0, #1
 8001df8:	bf08      	it	eq
 8001dfa:	f048 0801 	orreq.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001dfe:	4620      	mov	r0, r4
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001e00:	bf08      	it	eq
 8001e02:	fa5f f888 	uxtbeq.w	r8, r8

		Hw_I2C_SW_SCL_LOW( Ch );
 8001e06:	47a8      	blx	r5

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e08:	4620      	mov	r0, r4
 8001e0a:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	47b8      	blx	r7

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e10:	ea4f 0848 	mov.w	r8, r8, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001e14:	2801      	cmp	r0, #1
 8001e16:	bf04      	itt	eq
 8001e18:	f048 0801 	orreq.w	r8, r8, #1
 8001e1c:	fa5f f888 	uxtbeq.w	r8, r8

		Hw_I2C_SW_SCL_LOW( Ch );
 8001e20:	4620      	mov	r0, r4
 8001e22:	47a8      	blx	r5

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e24:	ea4f 0148 	mov.w	r1, r8, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e28:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e2a:	fa5f f881 	uxtb.w	r8, r1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e2e:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001e30:	4620      	mov	r0, r4
 8001e32:	47b8      	blx	r7
 8001e34:	2801      	cmp	r0, #1
 8001e36:	bf08      	it	eq
 8001e38:	f048 0801 	orreq.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	47a8      	blx	r5

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e40:	ea4f 0248 	mov.w	r2, r8, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e44:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e46:	fa5f f882 	uxtb.w	r8, r2

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e4a:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	47b8      	blx	r7
 8001e50:	2801      	cmp	r0, #1
 8001e52:	bf08      	it	eq
 8001e54:	f048 0801 	orreq.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001e58:	4620      	mov	r0, r4
 8001e5a:	47a8      	blx	r5

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e5c:	ea4f 0348 	mov.w	r3, r8, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e60:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e62:	fa5f f883 	uxtb.w	r8, r3

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e66:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001e68:	4620      	mov	r0, r4
 8001e6a:	47b8      	blx	r7
 8001e6c:	2801      	cmp	r0, #1
 8001e6e:	bf08      	it	eq
 8001e70:	f048 0801 	orreq.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001e74:	4620      	mov	r0, r4
 8001e76:	47a8      	blx	r5

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e78:	ea4f 0148 	mov.w	r1, r8, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e7c:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e7e:	fa5f f881 	uxtb.w	r8, r1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e82:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001e84:	4620      	mov	r0, r4
 8001e86:	47b8      	blx	r7
 8001e88:	2801      	cmp	r0, #1
 8001e8a:	bf08      	it	eq
 8001e8c:	f048 0801 	orreq.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001e90:	4620      	mov	r0, r4
 8001e92:	47a8      	blx	r5

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e94:	ea4f 0248 	mov.w	r2, r8, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e98:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001e9a:	fa5f f882 	uxtb.w	r8, r2

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e9e:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	47b8      	blx	r7
 8001ea4:	2801      	cmp	r0, #1
 8001ea6:	bf08      	it	eq
 8001ea8:	f048 0801 	orreq.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001eac:	4620      	mov	r0, r4
 8001eae:	47a8      	blx	r5
	}

	*pData = Data;


	Hw_I2C_SW_SetDir_SDA_Output( Ch );
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <Hw_I2C_SW_ReadByte_Ack+0x120>)
 8001eb2:	4620      	mov	r0, r4
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
	}

	*pData = Data;
 8001eb4:	f889 8000 	strb.w	r8, [r9]


	Hw_I2C_SW_SetDir_SDA_Output( Ch );
 8001eb8:	4798      	blx	r3

	// Ack 발생 
	//
	Hw_I2C_SW_SDA_LOW( Ch );
 8001eba:	490a      	ldr	r1, [pc, #40]	; (8001ee4 <Hw_I2C_SW_ReadByte_Ack+0x124>)
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4788      	blx	r1

	Hw_I2C_SW_SCL_HIGH( Ch );
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	47b0      	blx	r6
	Hw_I2C_SW_SCL_LOW( Ch );
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	47a8      	blx	r5


	return Ack;
}
 8001ec8:	2000      	movs	r0, #0
 8001eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ece:	bf00      	nop
 8001ed0:	08001d71 	.word	0x08001d71
 8001ed4:	08001c0d 	.word	0x08001c0d
 8001ed8:	08001d59 	.word	0x08001d59
 8001edc:	08001c35 	.word	0x08001c35
 8001ee0:	08001da1 	.word	0x08001da1
 8001ee4:	08001cd5 	.word	0x08001cd5

08001ee8 <Hw_I2C_SW_ReadByte_NoAck>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_NoAck( u8 Ch, u8 *pData )
{
 8001ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001eec:	4604      	mov	r4, r0
	u8 i;
	u8 Data = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001eee:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <Hw_I2C_SW_ReadByte_NoAck+0x110>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_NoAck( u8 Ch, u8 *pData )
{
 8001ef0:	4689      	mov	r9, r1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ef2:	4e42      	ldr	r6, [pc, #264]	; (8001ffc <Hw_I2C_SW_ReadByte_NoAck+0x114>)
{
	u8 i;
	u8 Data = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001ef4:	4798      	blx	r3

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ef6:	4620      	mov	r0, r4
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001ef8:	4f41      	ldr	r7, [pc, #260]	; (8002000 <Hw_I2C_SW_ReadByte_NoAck+0x118>)

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001efa:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001efc:	4620      	mov	r0, r4
 8001efe:	47b8      	blx	r7

		Hw_I2C_SW_SCL_LOW( Ch );
 8001f00:	4d40      	ldr	r5, [pc, #256]	; (8002004 <Hw_I2C_SW_ReadByte_NoAck+0x11c>)
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001f02:	4680      	mov	r8, r0

		Hw_I2C_SW_SCL_LOW( Ch );
 8001f04:	4620      	mov	r0, r4
 8001f06:	47a8      	blx	r5

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f08:	4620      	mov	r0, r4
 8001f0a:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	47b8      	blx	r7

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001f10:	f1b8 0f01 	cmp.w	r8, #1
 8001f14:	bf0c      	ite	eq
 8001f16:	f04f 0802 	moveq.w	r8, #2
 8001f1a:	f04f 0800 	movne.w	r8, #0

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001f1e:	2801      	cmp	r0, #1
 8001f20:	bf08      	it	eq
 8001f22:	f048 0801 	orreq.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001f26:	4620      	mov	r0, r4
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001f28:	bf08      	it	eq
 8001f2a:	fa5f f888 	uxtbeq.w	r8, r8

		Hw_I2C_SW_SCL_LOW( Ch );
 8001f2e:	47a8      	blx	r5

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f30:	4620      	mov	r0, r4
 8001f32:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001f34:	4620      	mov	r0, r4
 8001f36:	47b8      	blx	r7

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001f38:	ea4f 0848 	mov.w	r8, r8, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001f3c:	2801      	cmp	r0, #1
 8001f3e:	bf04      	itt	eq
 8001f40:	f048 0801 	orreq.w	r8, r8, #1
 8001f44:	fa5f f888 	uxtbeq.w	r8, r8

		Hw_I2C_SW_SCL_LOW( Ch );
 8001f48:	4620      	mov	r0, r4
 8001f4a:	47a8      	blx	r5

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001f4c:	ea4f 0148 	mov.w	r1, r8, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f50:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001f52:	fa5f f881 	uxtb.w	r8, r1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f56:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001f58:	4620      	mov	r0, r4
 8001f5a:	47b8      	blx	r7
 8001f5c:	2801      	cmp	r0, #1
 8001f5e:	bf08      	it	eq
 8001f60:	f048 0801 	orreq.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001f64:	4620      	mov	r0, r4
 8001f66:	47a8      	blx	r5

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001f68:	ea4f 0248 	mov.w	r2, r8, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f6c:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001f6e:	fa5f f882 	uxtb.w	r8, r2

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f72:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001f74:	4620      	mov	r0, r4
 8001f76:	47b8      	blx	r7
 8001f78:	2801      	cmp	r0, #1
 8001f7a:	bf08      	it	eq
 8001f7c:	f048 0801 	orreq.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001f80:	4620      	mov	r0, r4
 8001f82:	47a8      	blx	r5

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001f84:	ea4f 0348 	mov.w	r3, r8, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f88:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001f8a:	fa5f f883 	uxtb.w	r8, r3

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f8e:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001f90:	4620      	mov	r0, r4
 8001f92:	47b8      	blx	r7
 8001f94:	2801      	cmp	r0, #1
 8001f96:	bf08      	it	eq
 8001f98:	f048 0801 	orreq.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	47a8      	blx	r5

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001fa0:	ea4f 0148 	mov.w	r1, r8, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001fa4:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001fa6:	fa5f f881 	uxtb.w	r8, r1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001faa:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001fac:	4620      	mov	r0, r4
 8001fae:	47b8      	blx	r7
 8001fb0:	2801      	cmp	r0, #1
 8001fb2:	bf08      	it	eq
 8001fb4:	f048 0801 	orreq.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001fb8:	4620      	mov	r0, r4
 8001fba:	47a8      	blx	r5

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001fbc:	ea4f 0248 	mov.w	r2, r8, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001fc0:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001fc2:	fa5f f882 	uxtb.w	r8, r2

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001fc6:	47b0      	blx	r6
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001fc8:	4620      	mov	r0, r4
 8001fca:	47b8      	blx	r7
 8001fcc:	2801      	cmp	r0, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001fce:	4620      	mov	r0, r4
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001fd0:	bf08      	it	eq
 8001fd2:	f048 0801 	orreq.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001fd6:	47a8      	blx	r5
	}


	Hw_I2C_SW_SDA_HIGH( Ch );
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <Hw_I2C_SW_ReadByte_NoAck+0x120>)
 8001fda:	4620      	mov	r0, r4
 8001fdc:	4798      	blx	r3

	Hw_I2C_SW_SetDir_SDA_Output( Ch );
 8001fde:	490b      	ldr	r1, [pc, #44]	; (800200c <Hw_I2C_SW_ReadByte_NoAck+0x124>)
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	4788      	blx	r1

	Hw_I2C_SW_SCL_HIGH( Ch );
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	47b0      	blx	r6
	Hw_I2C_SW_SCL_LOW( Ch );
 8001fe8:	4620      	mov	r0, r4
 8001fea:	47a8      	blx	r5

	*pData = Data;
 8001fec:	f889 8000 	strb.w	r8, [r9]

	return 0;
}
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08001d71 	.word	0x08001d71
 8001ffc:	08001c0d 	.word	0x08001c0d
 8002000:	08001d59 	.word	0x08001d59
 8002004:	08001c35 	.word	0x08001c35
 8002008:	08001c5d 	.word	0x08001c5d
 800200c:	08001da1 	.word	0x08001da1

08002010 <Hw_I2C_SW_WriteByte_Ack>:
     			u8 Data : 전송할 바이트
     RET     : 
     			u8 : 0 -> Ack
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_WriteByte_Ack( u8 Ch, u8 Data )
{
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002012:	060d      	lsls	r5, r1, #24
     			u8 Data : 전송할 바이트
     RET     : 
     			u8 : 0 -> Ack
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_WriteByte_Ack( u8 Ch, u8 Data )
{
 8002014:	4604      	mov	r4, r0
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );
 8002016:	bf54      	ite	pl
 8002018:	4b36      	ldrpl	r3, [pc, #216]	; (80020f4 <Hw_I2C_SW_WriteByte_Ack+0xe4>)
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 800201a:	4b37      	ldrmi	r3, [pc, #220]	; (80020f8 <Hw_I2C_SW_WriteByte_Ack+0xe8>)
     			u8 Data : 전송할 바이트
     RET     : 
     			u8 : 0 -> Ack
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_WriteByte_Ack( u8 Ch, u8 Data )
{
 800201c:	460f      	mov	r7, r1
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 800201e:	4e37      	ldr	r6, [pc, #220]	; (80020fc <Hw_I2C_SW_WriteByte_Ack+0xec>)
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002020:	4798      	blx	r3
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002022:	0079      	lsls	r1, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002024:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002026:	b2cf      	uxtb	r7, r1

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8002028:	4d35      	ldr	r5, [pc, #212]	; (8002100 <Hw_I2C_SW_WriteByte_Ack+0xf0>)
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 800202a:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 800202c:	4620      	mov	r0, r4
 800202e:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002030:	0639      	lsls	r1, r7, #24
		else                 Hw_I2C_SW_SDA_LOW ( Ch );
 8002032:	bf54      	ite	pl
 8002034:	4b2f      	ldrpl	r3, [pc, #188]	; (80020f4 <Hw_I2C_SW_WriteByte_Ack+0xe4>)
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002036:	4b30      	ldrmi	r3, [pc, #192]	; (80020f8 <Hw_I2C_SW_WriteByte_Ack+0xe8>)
 8002038:	4620      	mov	r0, r4
 800203a:	4798      	blx	r3
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 800203c:	007a      	lsls	r2, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 800203e:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002040:	b2d7      	uxtb	r7, r2

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002042:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8002044:	4620      	mov	r0, r4
 8002046:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002048:	063a      	lsls	r2, r7, #24
		else                 Hw_I2C_SW_SDA_LOW ( Ch );
 800204a:	bf54      	ite	pl
 800204c:	4929      	ldrpl	r1, [pc, #164]	; (80020f4 <Hw_I2C_SW_WriteByte_Ack+0xe4>)
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 800204e:	492a      	ldrmi	r1, [pc, #168]	; (80020f8 <Hw_I2C_SW_WriteByte_Ack+0xe8>)
 8002050:	4620      	mov	r0, r4
 8002052:	4788      	blx	r1
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002054:	007b      	lsls	r3, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002056:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002058:	b2df      	uxtb	r7, r3

		Hw_I2C_SW_SCL_HIGH( Ch );
 800205a:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 800205c:	4620      	mov	r0, r4
 800205e:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002060:	063a      	lsls	r2, r7, #24
		else                 Hw_I2C_SW_SDA_LOW ( Ch );
 8002062:	bf54      	ite	pl
 8002064:	4a23      	ldrpl	r2, [pc, #140]	; (80020f4 <Hw_I2C_SW_WriteByte_Ack+0xe4>)
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002066:	4a24      	ldrmi	r2, [pc, #144]	; (80020f8 <Hw_I2C_SW_WriteByte_Ack+0xe8>)
 8002068:	4620      	mov	r0, r4
 800206a:	4790      	blx	r2
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 800206c:	0079      	lsls	r1, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 800206e:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002070:	b2cf      	uxtb	r7, r1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002072:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8002074:	4620      	mov	r0, r4
 8002076:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002078:	0639      	lsls	r1, r7, #24
		else                 Hw_I2C_SW_SDA_LOW ( Ch );
 800207a:	bf54      	ite	pl
 800207c:	4b1d      	ldrpl	r3, [pc, #116]	; (80020f4 <Hw_I2C_SW_WriteByte_Ack+0xe4>)
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 800207e:	4b1e      	ldrmi	r3, [pc, #120]	; (80020f8 <Hw_I2C_SW_WriteByte_Ack+0xe8>)
 8002080:	4620      	mov	r0, r4
 8002082:	4798      	blx	r3
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002084:	007a      	lsls	r2, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002086:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002088:	b2d7      	uxtb	r7, r2

		Hw_I2C_SW_SCL_HIGH( Ch );
 800208a:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 800208c:	4620      	mov	r0, r4
 800208e:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002090:	063a      	lsls	r2, r7, #24
		else                 Hw_I2C_SW_SDA_LOW ( Ch );
 8002092:	bf54      	ite	pl
 8002094:	4917      	ldrpl	r1, [pc, #92]	; (80020f4 <Hw_I2C_SW_WriteByte_Ack+0xe4>)
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002096:	4918      	ldrmi	r1, [pc, #96]	; (80020f8 <Hw_I2C_SW_WriteByte_Ack+0xe8>)
 8002098:	4620      	mov	r0, r4
 800209a:	4788      	blx	r1
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 800209c:	007b      	lsls	r3, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 800209e:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 80020a0:	b2df      	uxtb	r7, r3

		Hw_I2C_SW_SCL_HIGH( Ch );
 80020a2:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 80020a4:	4620      	mov	r0, r4
 80020a6:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 80020a8:	063a      	lsls	r2, r7, #24
		else                 Hw_I2C_SW_SDA_LOW ( Ch );
 80020aa:	bf54      	ite	pl
 80020ac:	4a11      	ldrpl	r2, [pc, #68]	; (80020f4 <Hw_I2C_SW_WriteByte_Ack+0xe4>)
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 80020ae:	4a12      	ldrmi	r2, [pc, #72]	; (80020f8 <Hw_I2C_SW_WriteByte_Ack+0xe8>)
 80020b0:	4620      	mov	r0, r4
 80020b2:	4790      	blx	r2
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80020b4:	4620      	mov	r0, r4
 80020b6:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 80020b8:	4620      	mov	r0, r4
 80020ba:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 80020bc:	0679      	lsls	r1, r7, #25
 80020be:	bf4c      	ite	mi
 80020c0:	490d      	ldrmi	r1, [pc, #52]	; (80020f8 <Hw_I2C_SW_WriteByte_Ack+0xe8>)
		else                 Hw_I2C_SW_SDA_LOW ( Ch );
 80020c2:	490c      	ldrpl	r1, [pc, #48]	; (80020f4 <Hw_I2C_SW_WriteByte_Ack+0xe4>)
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 80020c4:	4620      	mov	r0, r4
		else                 Hw_I2C_SW_SDA_LOW ( Ch );
 80020c6:	4788      	blx	r1

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80020c8:	4620      	mov	r0, r4
 80020ca:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 80020cc:	4620      	mov	r0, r4
 80020ce:	47a8      	blx	r5
	}


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <Hw_I2C_SW_WriteByte_Ack+0xf4>)
 80020d2:	4620      	mov	r0, r4
 80020d4:	4798      	blx	r3



	// Ack 검사 
	//
	Hw_I2C_SW_SCL_HIGH( Ch );
 80020d6:	4620      	mov	r0, r4
 80020d8:	47b0      	blx	r6

	if( Hw_I2C_SW_SDA( Ch ) == 0 ) Ack = 0;
 80020da:	4620      	mov	r0, r4
 80020dc:	4e0a      	ldr	r6, [pc, #40]	; (8002108 <Hw_I2C_SW_WriteByte_Ack+0xf8>)
 80020de:	47b0      	blx	r6
 80020e0:	4606      	mov	r6, r0

	Hw_I2C_SW_SCL_LOW( Ch );
 80020e2:	4620      	mov	r0, r4
 80020e4:	47a8      	blx	r5


	Hw_I2C_SW_SetDir_SDA_Output( Ch );
 80020e6:	4620      	mov	r0, r4
 80020e8:	4a08      	ldr	r2, [pc, #32]	; (800210c <Hw_I2C_SW_WriteByte_Ack+0xfc>)
 80020ea:	4790      	blx	r2

	return Ack;
}
 80020ec:	1c30      	adds	r0, r6, #0
 80020ee:	bf18      	it	ne
 80020f0:	2001      	movne	r0, #1
 80020f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020f4:	08001cd5 	.word	0x08001cd5
 80020f8:	08001c5d 	.word	0x08001c5d
 80020fc:	08001c0d 	.word	0x08001c0d
 8002100:	08001c35 	.word	0x08001c35
 8002104:	08001d71 	.word	0x08001d71
 8002108:	08001d59 	.word	0x08001d59
 800210c:	08001da1 	.word	0x08001da1

08002110 <Hw_I2C_SW_Read>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Read( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8002110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u16 Ret = 0;
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;
 8002114:	4698      	mov	r8, r3
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Read( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8002116:	b083      	sub	sp, #12
 8002118:	4605      	mov	r5, r0
 800211a:	460c      	mov	r4, r1
 800211c:	4616      	mov	r6, r2
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;

	Hw_I2C_SW_StartTransmit(Ch);
 800211e:	4b38      	ldr	r3, [pc, #224]	; (8002200 <Hw_I2C_SW_Read+0xf0>)
{
	u16 Ret = 0;
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;
 8002120:	f1b8 0f00 	cmp.w	r8, #0
 8002124:	d055      	beq.n	80021d2 <Hw_I2C_SW_Read+0xc2>

	Hw_I2C_SW_StartTransmit(Ch);
 8002126:	4798      	blx	r3

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address
 8002128:	0060      	lsls	r0, r4, #1
 800212a:	f040 0401 	orr.w	r4, r0, #1
 800212e:	b2e1      	uxtb	r1, r4
 8002130:	4628      	mov	r0, r5
 8002132:	4a34      	ldr	r2, [pc, #208]	; (8002204 <Hw_I2C_SW_Read+0xf4>)
 8002134:	4790      	blx	r2
{
	u16 Ret = 0;
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;
 8002136:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
 800213a:	f00b 0101 	and.w	r1, fp, #1
 800213e:	fa5f f78b 	uxtb.w	r7, fp

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address
 8002142:	4604      	mov	r4, r0
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002144:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800220c <Hw_I2C_SW_Read+0xfc>

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 8002148:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002210 <Hw_I2C_SW_Read+0x100>
 800214c:	9101      	str	r1, [sp, #4]

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 800214e:	2f00      	cmp	r7, #0
 8002150:	d14f      	bne.n	80021f2 <Hw_I2C_SW_Read+0xe2>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002152:	4628      	mov	r0, r5
 8002154:	4631      	mov	r1, r6
 8002156:	47c8      	blx	r9
 8002158:	4320      	orrs	r0, r4
 800215a:	fa1f fb80 	uxth.w	fp, r0

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 800215e:	2401      	movs	r4, #1
 8002160:	45a0      	cmp	r8, r4
 8002162:	d93f      	bls.n	80021e4 <Hw_I2C_SW_Read+0xd4>
 8002164:	9b01      	ldr	r3, [sp, #4]
 8002166:	b16b      	cbz	r3, 8002184 <Hw_I2C_SW_Read+0x74>
	{
		if( i < LastIndex )
 8002168:	42a7      	cmp	r7, r4
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 800216a:	4628      	mov	r0, r5
 800216c:	eb06 0104 	add.w	r1, r6, r4

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 8002170:	d81b      	bhi.n	80021aa <Hw_I2C_SW_Read+0x9a>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002172:	47c8      	blx	r9
 8002174:	ea40 020b 	orr.w	r2, r0, fp
 8002178:	fa1f fb82 	uxth.w	fp, r2

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 800217c:	1c62      	adds	r2, r4, #1
 800217e:	b2d4      	uxtb	r4, r2
 8002180:	45a0      	cmp	r8, r4
 8002182:	d92f      	bls.n	80021e4 <Hw_I2C_SW_Read+0xd4>
	{
		if( i < LastIndex )
 8002184:	42a7      	cmp	r7, r4
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002186:	eb06 0104 	add.w	r1, r6, r4
 800218a:	4628      	mov	r0, r5

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 800218c:	d91b      	bls.n	80021c6 <Hw_I2C_SW_Read+0xb6>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 800218e:	47d0      	blx	sl
 8002190:	ea40 000b 	orr.w	r0, r0, fp
 8002194:	fa1f fb80 	uxth.w	fp, r0

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8002198:	3401      	adds	r4, #1
 800219a:	b2e4      	uxtb	r4, r4
	{
		if( i < LastIndex )
 800219c:	42a7      	cmp	r7, r4
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 800219e:	4628      	mov	r0, r5
 80021a0:	eb06 0104 	add.w	r1, r6, r4

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 80021a4:	d9e5      	bls.n	8002172 <Hw_I2C_SW_Read+0x62>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 80021a6:	4628      	mov	r0, r5
 80021a8:	1931      	adds	r1, r6, r4
 80021aa:	47d0      	blx	sl

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 80021ac:	1c62      	adds	r2, r4, #1
 80021ae:	b2d4      	uxtb	r4, r2
	{
		if( i < LastIndex )
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 80021b0:	ea40 000b 	orr.w	r0, r0, fp

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 80021b4:	45a0      	cmp	r8, r4
	{
		if( i < LastIndex )
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 80021b6:	fa1f fb80 	uxth.w	fp, r0

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 80021ba:	d913      	bls.n	80021e4 <Hw_I2C_SW_Read+0xd4>
	{
		if( i < LastIndex )
 80021bc:	42a7      	cmp	r7, r4
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 80021be:	eb06 0104 	add.w	r1, r6, r4
 80021c2:	4628      	mov	r0, r5

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 80021c4:	d8e3      	bhi.n	800218e <Hw_I2C_SW_Read+0x7e>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 80021c6:	47c8      	blx	r9
 80021c8:	ea40 030b 	orr.w	r3, r0, fp
 80021cc:	fa1f fb83 	uxth.w	fp, r3
 80021d0:	e7e2      	b.n	8002198 <Hw_I2C_SW_Read+0x88>
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;

	Hw_I2C_SW_StartTransmit(Ch);
 80021d2:	4798      	blx	r3

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address
 80021d4:	0061      	lsls	r1, r4, #1
 80021d6:	f041 0201 	orr.w	r2, r1, #1
 80021da:	4628      	mov	r0, r5
 80021dc:	b2d1      	uxtb	r1, r2
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <Hw_I2C_SW_Read+0xf4>)
 80021e0:	4798      	blx	r3
 80021e2:	4683      	mov	fp, r0
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
		}
	}
	
	Hw_I2C_SW_EndTransmit(Ch);
 80021e4:	4628      	mov	r0, r5
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <Hw_I2C_SW_Read+0xf8>)
 80021e8:	4788      	blx	r1
	

    return Ret;
}
 80021ea:	4658      	mov	r0, fp
 80021ec:	b003      	add	sp, #12
 80021ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 80021f2:	4628      	mov	r0, r5
 80021f4:	4631      	mov	r1, r6
 80021f6:	47d0      	blx	sl
 80021f8:	4320      	orrs	r0, r4
 80021fa:	fa1f fb80 	uxth.w	fp, r0
 80021fe:	e7ae      	b.n	800215e <Hw_I2C_SW_Read+0x4e>
 8002200:	08001d21 	.word	0x08001d21
 8002204:	08002011 	.word	0x08002011
 8002208:	08001ce9 	.word	0x08001ce9
 800220c:	08001ee9 	.word	0x08001ee9
 8002210:	08001dc1 	.word	0x08001dc1

08002214 <Hw_I2C_SW_Write>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Write( u8 Ch, u16 i2c_addr, u8* pdata, u16 len )
{
 8002214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002218:	460c      	mov	r4, r1
 800221a:	4699      	mov	r9, r3
    u16 Ret = 0;;
	u8  i;

	Hw_I2C_SW_StartTransmit(Ch);
 800221c:	4b1f      	ldr	r3, [pc, #124]	; (800229c <Hw_I2C_SW_Write+0x88>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Write( u8 Ch, u16 i2c_addr, u8* pdata, u16 len )
{
 800221e:	4606      	mov	r6, r0
 8002220:	4690      	mov	r8, r2
    u16 Ret = 0;;
	u8  i;

	Hw_I2C_SW_StartTransmit(Ch);
 8002222:	4798      	blx	r3

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address
 8002224:	0061      	lsls	r1, r4, #1
 8002226:	4630      	mov	r0, r6
 8002228:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800222c:	4f1c      	ldr	r7, [pc, #112]	; (80022a0 <Hw_I2C_SW_Write+0x8c>)
 800222e:	47b8      	blx	r7
 8002230:	4605      	mov	r5, r0


	for( i=0; i<len; i++ )
 8002232:	f1b9 0f00 	cmp.w	r9, #0
 8002236:	d02b      	beq.n	8002290 <Hw_I2C_SW_Write+0x7c>
 8002238:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 800223c:	4630      	mov	r0, r6
 800223e:	f898 1000 	ldrb.w	r1, [r8]
 8002242:	f002 0a01 	and.w	sl, r2, #1
 8002246:	47b8      	blx	r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002248:	2401      	movs	r4, #1
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 800224a:	4328      	orrs	r0, r5
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 800224c:	454c      	cmp	r4, r9
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 800224e:	b285      	uxth	r5, r0
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002250:	d21e      	bcs.n	8002290 <Hw_I2C_SW_Write+0x7c>
 8002252:	f1ba 0f00 	cmp.w	sl, #0
 8002256:	d008      	beq.n	800226a <Hw_I2C_SW_Write+0x56>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 8002258:	4630      	mov	r0, r6
 800225a:	f898 1001 	ldrb.w	r1, [r8, #1]
 800225e:	47b8      	blx	r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002260:	2402      	movs	r4, #2
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 8002262:	4305      	orrs	r5, r0
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002264:	454c      	cmp	r4, r9
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 8002266:	b2ad      	uxth	r5, r5
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002268:	d212      	bcs.n	8002290 <Hw_I2C_SW_Write+0x7c>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 800226a:	f818 1004 	ldrb.w	r1, [r8, r4]
 800226e:	4630      	mov	r0, r6
 8002270:	47b8      	blx	r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002272:	3401      	adds	r4, #1
 8002274:	b2e4      	uxtb	r4, r4
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 8002276:	f818 1004 	ldrb.w	r1, [r8, r4]
 800227a:	4305      	orrs	r5, r0
 800227c:	4630      	mov	r0, r6
 800227e:	47b8      	blx	r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002280:	1c63      	adds	r3, r4, #1
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 8002282:	b2ad      	uxth	r5, r5
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002284:	b2dc      	uxtb	r4, r3
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 8002286:	ea45 0100 	orr.w	r1, r5, r0
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 800228a:	454c      	cmp	r4, r9
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 800228c:	b28d      	uxth	r5, r1
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 800228e:	d3ec      	bcc.n	800226a <Hw_I2C_SW_Write+0x56>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
	}
	
	Hw_I2C_SW_EndTransmit(Ch);
 8002290:	4630      	mov	r0, r6
 8002292:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <Hw_I2C_SW_Write+0x90>)
 8002294:	4790      	blx	r2

    return Ret;
}
 8002296:	4628      	mov	r0, r5
 8002298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800229c:	08001d21 	.word	0x08001d21
 80022a0:	08002011 	.word	0x08002011
 80022a4:	08001ce9 	.word	0x08001ce9

080022a8 <Hw_Si47xx_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
 80022a8:	b538      	push	{r3, r4, r5, lr}
	Hw_Wait(100);
 80022aa:	f241 45a9 	movw	r5, #5289	; 0x14a9
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 80022ae:	f640 440c 	movw	r4, #3084	; 0xc0c
 80022b2:	f2c4 0401 	movt	r4, #16385	; 0x4001
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
 80022b6:	f6c0 0500 	movt	r5, #2048	; 0x800
 80022ba:	2064      	movs	r0, #100	; 0x64
 80022bc:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 80022be:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(100);
 80022c0:	2064      	movs	r0, #100	; 0x64
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 80022c2:	f043 0120 	orr.w	r1, r3, #32
 80022c6:	6021      	str	r1, [r4, #0]
	Hw_Wait(100);
 80022c8:	47a8      	blx	r5
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 80022ca:	6822      	ldr	r2, [r4, #0]
	Hw_Wait(500);	
 80022cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 80022d0:	f022 0320 	bic.w	r3, r2, #32
 80022d4:	6023      	str	r3, [r4, #0]
	Hw_Wait(500);	
 80022d6:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 80022d8:	6821      	ldr	r1, [r4, #0]
	Hw_Wait(100);
 80022da:	2064      	movs	r0, #100	; 0x64
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
	Hw_Wait(500);	
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 80022dc:	f041 0220 	orr.w	r2, r1, #32
 80022e0:	6022      	str	r2, [r4, #0]
	Hw_Wait(100);
 80022e2:	47a8      	blx	r5
 80022e4:	bd38      	pop	{r3, r4, r5, pc}
 80022e6:	bf00      	nop

080022e8 <Hw_Si47xx_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Init( void )
{
 80022e8:	b508      	push	{r3, lr}
	Hw_I2C_Init();
 80022ea:	f641 33dd 	movw	r3, #7133	; 0x1bdd
 80022ee:	f6c0 0300 	movt	r3, #2048	; 0x800
 80022f2:	4798      	blx	r3

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 80022f4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80022f8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80022fc:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 80022fe:	f242 22a9 	movw	r2, #8873	; 0x22a9

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 8002302:	f421 0370 	bic.w	r3, r1, #15728640	; 0xf00000
 8002306:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8002308:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 800230a:	f6c0 0200 	movt	r2, #2048	; 0x800
	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 800230e:	f441 1340 	orr.w	r3, r1, #3145728	; 0x300000
 8002312:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 8002314:	6801      	ldr	r1, [r0, #0]
 8002316:	6001      	str	r1, [r0, #0]
	

	Hw_Si47xx_Reset();
 8002318:	4790      	blx	r2
 800231a:	bd08      	pop	{r3, pc}

0800231c <Hw_Si47xx_SendCommand>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_SendCommand( u8 *pCmd, u16 Length )
{
 800231c:	b510      	push	{r4, lr}
	u16 Ret;
	
	Ret = Hw_I2C_Write( 0, HW_SI47XX_ADDR, pCmd, Length );
 800231e:	f641 34ed 	movw	r4, #7149	; 0x1bed
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_SendCommand( u8 *pCmd, u16 Length )
{
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
	u16 Ret;
	
	Ret = Hw_I2C_Write( 0, HW_SI47XX_ADDR, pCmd, Length );
 8002326:	2000      	movs	r0, #0
 8002328:	2163      	movs	r1, #99	; 0x63
 800232a:	f6c0 0400 	movt	r4, #2048	; 0x800
 800232e:	47a0      	blx	r4
	
	return Ret;	
}
 8002330:	bd10      	pop	{r4, pc}
 8002332:	bf00      	nop

08002334 <Hw_Si47xx_ReceiveResponse>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_ReceiveResponse( u8 *pResp, u16 Length, u32 TimeOut )
{
 8002334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u32 i;
	
	TimeStart = Hw_Timer_Get_CountValue();
 8002338:	4c1c      	ldr	r4, [pc, #112]	; (80023ac <Hw_Si47xx_ReceiveResponse+0x78>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_ReceiveResponse( u8 *pResp, u16 Length, u32 TimeOut )
{
 800233a:	4605      	mov	r5, r0
 800233c:	460e      	mov	r6, r1
 800233e:	4691      	mov	r9, r2
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u32 i;
	
	TimeStart = Hw_Timer_Get_CountValue();
 8002340:	47a0      	blx	r4
 8002342:	4f1b      	ldr	r7, [pc, #108]	; (80023b0 <Hw_Si47xx_ReceiveResponse+0x7c>)
 8002344:	4680      	mov	r8, r0
	
	while(1)
	{	
		Ret = Hw_I2C_Read( 0, HW_SI47XX_ADDR, pResp, Length );
 8002346:	2163      	movs	r1, #99	; 0x63
 8002348:	462a      	mov	r2, r5
 800234a:	4633      	mov	r3, r6
 800234c:	2000      	movs	r0, #0
 800234e:	47b8      	blx	r7
		
		if( Ret == ERR_NONE )
 8002350:	b918      	cbnz	r0, 800235a <Hw_Si47xx_ReceiveResponse+0x26>
		{
			if( pResp[0] & (1<<7) )
 8002352:	f995 3000 	ldrsb.w	r3, [r5]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db07      	blt.n	800236a <Hw_Si47xx_ReceiveResponse+0x36>
			}
		}
	
		//-- 타임 아웃 처리
		//
		TimeEnd = Hw_Timer_Get_CountValue();
 800235a:	47a0      	blx	r4
		
		if( (TimeEnd - TimeStart) > TimeOut )
 800235c:	ebc8 0000 	rsb	r0, r8, r0
 8002360:	4548      	cmp	r0, r9
 8002362:	d9f0      	bls.n	8002346 <Hw_Si47xx_ReceiveResponse+0x12>
		{
			Ret = HW_SI47XX_ERR_TIME_OUT;
 8002364:	2002      	movs	r0, #2
 8002366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 800236a:	b1c6      	cbz	r6, 800239e <Hw_Si47xx_ReceiveResponse+0x6a>
 800236c:	2401      	movs	r4, #1
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <Hw_Si47xx_ReceiveResponse+0x80>)
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 8002370:	7829      	ldrb	r1, [r5, #0]
 8002372:	1e72      	subs	r2, r6, #1
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002374:	42b4      	cmp	r4, r6
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 8002376:	7019      	strb	r1, [r3, #0]
 8002378:	ea02 0204 	and.w	r2, r2, r4
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 800237c:	d213      	bcs.n	80023a6 <Hw_Si47xx_ReceiveResponse+0x72>
 800237e:	b122      	cbz	r2, 800238a <Hw_Si47xx_ReceiveResponse+0x56>
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 8002380:	7869      	ldrb	r1, [r5, #1]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002382:	2402      	movs	r4, #2
 8002384:	42b4      	cmp	r4, r6
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 8002386:	7059      	strb	r1, [r3, #1]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002388:	d20b      	bcs.n	80023a2 <Hw_Si47xx_ReceiveResponse+0x6e>
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 800238a:	5d29      	ldrb	r1, [r5, r4]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 800238c:	1c62      	adds	r2, r4, #1
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 800238e:	54e1      	strb	r1, [r4, r3]
 8002390:	5ca9      	ldrb	r1, [r5, r2]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002392:	3402      	adds	r4, #2
 8002394:	42b4      	cmp	r4, r6
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 8002396:	5499      	strb	r1, [r3, r2]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002398:	d3f7      	bcc.n	800238a <Hw_Si47xx_ReceiveResponse+0x56>
 800239a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			Hw_Si47xx_LastResp[i] = pResp[i];
		}
	}
	
	return Ret;	
}
 800239e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023aa:	bf00      	nop
 80023ac:	08001ba5 	.word	0x08001ba5
 80023b0:	08001bfd 	.word	0x08001bfd
 80023b4:	20000990 	.word	0x20000990

080023b8 <Hw_Si47xx_POWER_UP>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_POWER_UP( u8 Mode )
{
 80023b8:	b510      	push	{r4, lr}
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];
	u16 i;

	//-- 보드 리셋
	//
	Hw_Si47xx_Reset();
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <Hw_Si47xx_POWER_UP+0x40>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_POWER_UP( u8 Mode )
{
 80023bc:	b086      	sub	sp, #24
 80023be:	4604      	mov	r4, r0
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];
	u16 i;

	//-- 보드 리셋
	//
	Hw_Si47xx_Reset();
 80023c0:	4798      	blx	r3


	Cmd[0] = 0x01;		// POWER_UP 명령
 80023c2:	2001      	movs	r0, #1
 80023c4:	f88d 0000 	strb.w	r0, [sp]
	
	if( Mode == HW_SI47XX_BAND_MODE_FM )
 80023c8:	b994      	cbnz	r4, 80023f0 <Hw_Si47xx_POWER_UP+0x38>
	{
		Cmd[1] = 0			// FM
 80023ca:	2210      	movs	r2, #16
 80023cc:	f88d 2001 	strb.w	r2, [sp, #1]
				| (0<<7)	// CTS interrupt enabled 
				| (1<<4);	// Crystal Oscillator Enable
	}

	
	Cmd[2] = 0xB5;		// Analog Output
 80023d0:	23b5      	movs	r3, #181	; 0xb5



	
	Ret = Hw_Si47xx_SendCommand( Cmd, 3 );
 80023d2:	4668      	mov	r0, sp
 80023d4:	2103      	movs	r1, #3
 80023d6:	4a09      	ldr	r2, [pc, #36]	; (80023fc <Hw_Si47xx_POWER_UP+0x44>)
				| (0<<7)	// CTS interrupt enabled 
				| (1<<4);	// Crystal Oscillator Enable
	}

	
	Cmd[2] = 0xB5;		// Analog Output
 80023d8:	f88d 3002 	strb.w	r3, [sp, #2]



	
	Ret = Hw_Si47xx_SendCommand( Cmd, 3 );
 80023dc:	4790      	blx	r2
		
	if( Ret == ERR_NONE )
 80023de:	b928      	cbnz	r0, 80023ec <Hw_Si47xx_POWER_UP+0x34>
	{
		Ret = Hw_Si47xx_ReceiveResponse( Resp, 0+1, 1000 );
 80023e0:	a802      	add	r0, sp, #8
 80023e2:	2101      	movs	r1, #1
 80023e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <Hw_Si47xx_POWER_UP+0x48>)
 80023ea:	4798      	blx	r3
	#if HW_SI47XX_DEBUG_SHOW == 1
	Lb_printf("Ret : %x , St : %x \n", Ret, Resp[0] );
	#endif
	
	return Ret;	
}
 80023ec:	b006      	add	sp, #24
 80023ee:	bd10      	pop	{r4, pc}
				| (1<<4);	// Crystal Oscillator Enable
				
	}
	else
	{
		Cmd[1] = 1			// AM
 80023f0:	2111      	movs	r1, #17
 80023f2:	f88d 1001 	strb.w	r1, [sp, #1]
 80023f6:	e7eb      	b.n	80023d0 <Hw_Si47xx_POWER_UP+0x18>
 80023f8:	080022a9 	.word	0x080022a9
 80023fc:	0800231d 	.word	0x0800231d
 8002400:	08002335 	.word	0x08002335

08002404 <Hw_Si47xx_WaitForCTS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_WaitForCTS( void  )
{
 8002404:	b500      	push	{lr}
	u16 Ret;
	u8  Resp[1];

	Ret = Hw_Si47xx_ReceiveResponse( Resp, 1, 1000 );	
 8002406:	f242 3335 	movw	r3, #9013	; 0x2335
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_WaitForCTS( void  )
{
 800240a:	b083      	sub	sp, #12
	u16 Ret;
	u8  Resp[1];

	Ret = Hw_Si47xx_ReceiveResponse( Resp, 1, 1000 );	
 800240c:	a801      	add	r0, sp, #4
 800240e:	2101      	movs	r1, #1
 8002410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002414:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002418:	4798      	blx	r3
	
	return Ret;	
 800241a:	b003      	add	sp, #12
 800241c:	bd00      	pop	{pc}
 800241e:	bf00      	nop

08002420 <Hw_Si47xx_CommandResp>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_CommandResp( u8 *pCmd, u16 CmdLength, u8 *pResp, u16 RespLength, u32 TimeOut )
{
 8002420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16 Ret;
	#if HW_SI47XX_DEBUG_SHOW_RESP == 1
	u32 i;
	#endif
	
	Ret = Hw_Si47xx_WaitForCTS();
 8002424:	4c0f      	ldr	r4, [pc, #60]	; (8002464 <Hw_Si47xx_CommandResp+0x44>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_CommandResp( u8 *pCmd, u16 CmdLength, u8 *pResp, u16 RespLength, u32 TimeOut )
{
 8002426:	4606      	mov	r6, r0
 8002428:	460d      	mov	r5, r1
 800242a:	4617      	mov	r7, r2
 800242c:	4698      	mov	r8, r3
	u16 Ret;
	#if HW_SI47XX_DEBUG_SHOW_RESP == 1
	u32 i;
	#endif
	
	Ret = Hw_Si47xx_WaitForCTS();
 800242e:	47a0      	blx	r4

	if( Ret == ERR_NONE )
 8002430:	b108      	cbz	r0, 8002436 <Hw_Si47xx_CommandResp+0x16>
	}
	#endif
	
	
	return Ret;	
}
 8002432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	
	Ret = Hw_Si47xx_WaitForCTS();

	if( Ret == ERR_NONE )
	{
		Ret = Hw_Si47xx_SendCommand( pCmd, CmdLength );
 8002436:	4630      	mov	r0, r6
 8002438:	4629      	mov	r1, r5
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <Hw_Si47xx_CommandResp+0x48>)
 800243c:	4798      	blx	r3
		
		if( Ret == ERR_NONE )
 800243e:	2800      	cmp	r0, #0
 8002440:	d1f7      	bne.n	8002432 <Hw_Si47xx_CommandResp+0x12>
		{
			Ret = Hw_Si47xx_ReceiveResponse( pResp, RespLength+1, TimeOut );			
 8002442:	f108 0101 	add.w	r1, r8, #1
 8002446:	4638      	mov	r0, r7
 8002448:	b289      	uxth	r1, r1
 800244a:	9a06      	ldr	r2, [sp, #24]
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <Hw_Si47xx_CommandResp+0x4c>)
 800244e:	4798      	blx	r3
			
			if( Ret == ERR_NONE )
 8002450:	2800      	cmp	r0, #0
 8002452:	d1ee      	bne.n	8002432 <Hw_Si47xx_CommandResp+0x12>
			{
				if( pResp[0] & (1<<6) )
 8002454:	783a      	ldrb	r2, [r7, #0]
 8002456:	f002 0140 	and.w	r1, r2, #64	; 0x40
 800245a:	b2cb      	uxtb	r3, r1
				{
					Ret = HW_SI47XX_ERR_RESP;
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf18      	it	ne
 8002460:	2003      	movne	r0, #3
 8002462:	e7e6      	b.n	8002432 <Hw_Si47xx_CommandResp+0x12>
 8002464:	08002405 	.word	0x08002405
 8002468:	0800231d 	.word	0x0800231d
 800246c:	08002335 	.word	0x08002335

08002470 <Hw_Si47xx_AM_TUNE_STATUS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_STATUS( u8 Option )
{
 8002470:	b530      	push	{r4, r5, lr}

	Index = 0;
	
	Cmd[Index++] = 0x42;	
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 8002472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_STATUS( u8 Option )
{
 8002476:	b089      	sub	sp, #36	; 0x24

	Index = 0;
	
	Cmd[Index++] = 0x42;	
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 8002478:	f242 4421 	movw	r4, #9249	; 0x2421
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x42;	
	Cmd[Index++] = Option;	
 800247c:	f88d 0009 	strb.w	r0, [sp, #9]
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 8002480:	9300      	str	r3, [sp, #0]
	HW_SI47XX_PRINTF("AM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x42;	
 8002482:	2542      	movs	r5, #66	; 0x42
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 8002484:	a802      	add	r0, sp, #8
 8002486:	2102      	movs	r1, #2
 8002488:	aa04      	add	r2, sp, #16
 800248a:	2307      	movs	r3, #7
 800248c:	f6c0 0400 	movt	r4, #2048	; 0x800
	HW_SI47XX_PRINTF("AM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x42;	
 8002490:	f88d 5008 	strb.w	r5, [sp, #8]
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 8002494:	47a0      	blx	r4
		
	return Ret;	
}
 8002496:	b009      	add	sp, #36	; 0x24
 8002498:	bd30      	pop	{r4, r5, pc}
 800249a:	bf00      	nop

0800249c <Hw_Si47xx_FM_TUNE_STATUS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_STATUS( u8 Option )
{
 800249c:	b530      	push	{r4, r5, lr}

	Index = 0;
	
	Cmd[Index++] = 0x22;	
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 800249e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_STATUS( u8 Option )
{
 80024a2:	b089      	sub	sp, #36	; 0x24

	Index = 0;
	
	Cmd[Index++] = 0x22;	
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 80024a4:	f242 4421 	movw	r4, #9249	; 0x2421
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x22;	
	Cmd[Index++] = Option;	
 80024a8:	f88d 0009 	strb.w	r0, [sp, #9]
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 80024ac:	9300      	str	r3, [sp, #0]
	HW_SI47XX_PRINTF("FM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x22;	
 80024ae:	2522      	movs	r5, #34	; 0x22
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 80024b0:	a802      	add	r0, sp, #8
 80024b2:	2102      	movs	r1, #2
 80024b4:	aa04      	add	r2, sp, #16
 80024b6:	2307      	movs	r3, #7
 80024b8:	f6c0 0400 	movt	r4, #2048	; 0x800
	HW_SI47XX_PRINTF("FM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x22;	
 80024bc:	f88d 5008 	strb.w	r5, [sp, #8]
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 80024c0:	47a0      	blx	r4
		
	return Ret;	
}
 80024c2:	b009      	add	sp, #36	; 0x24
 80024c4:	bd30      	pop	{r4, r5, pc}
 80024c6:	bf00      	nop

080024c8 <Hw_Si47xx_GET_INT_STATUS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_GET_INT_STATUS( u8 *pStatus )
{
 80024c8:	b530      	push	{r4, r5, lr}
 80024ca:	b089      	sub	sp, #36	; 0x24
	HW_SI47XX_PRINTF("GET_INT_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x14;	
 80024cc:	ab08      	add	r3, sp, #32
 80024ce:	2214      	movs	r2, #20
 80024d0:	f803 2d18 	strb.w	r2, [r3, #-24]!
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_GET_INT_STATUS( u8 *pStatus )
{
 80024d4:	4605      	mov	r5, r0
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x14;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80024d6:	f242 4421 	movw	r4, #9249	; 0x2421
 80024da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024de:	9000      	str	r0, [sp, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	4618      	mov	r0, r3
 80024e4:	aa04      	add	r2, sp, #16
 80024e6:	2300      	movs	r3, #0
 80024e8:	f6c0 0400 	movt	r4, #2048	; 0x800
 80024ec:	47a0      	blx	r4
	
	*pStatus = Resp[0];
 80024ee:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80024f2:	7029      	strb	r1, [r5, #0]
		
	return Ret;	
}
 80024f4:	b009      	add	sp, #36	; 0x24
 80024f6:	bd30      	pop	{r4, r5, pc}

080024f8 <Hw_Si47xx_WaitForSTC>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_WaitForSTC( u32 TimeOut )
{
 80024f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u8  Status;
	
	TimeStart = Hw_Timer_Get_CountValue();
 80024fa:	4c0a      	ldr	r4, [pc, #40]	; (8002524 <Hw_Si47xx_WaitForSTC+0x2c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_WaitForSTC( u32 TimeOut )
{
 80024fc:	b083      	sub	sp, #12
 80024fe:	4607      	mov	r7, r0
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u8  Status;
	
	TimeStart = Hw_Timer_Get_CountValue();
 8002500:	47a0      	blx	r4
 8002502:	4d09      	ldr	r5, [pc, #36]	; (8002528 <Hw_Si47xx_WaitForSTC+0x30>)
 8002504:	4606      	mov	r6, r0
	
	while(1)
	{	
		Ret = Hw_Si47xx_GET_INT_STATUS( &Status );
 8002506:	f10d 0007 	add.w	r0, sp, #7
 800250a:	47a8      	blx	r5
		
		if( Ret == ERR_NONE )
 800250c:	b918      	cbnz	r0, 8002516 <Hw_Si47xx_WaitForSTC+0x1e>
		{
			if( Status & (1<<0) )
 800250e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002512:	07db      	lsls	r3, r3, #31
 8002514:	d404      	bmi.n	8002520 <Hw_Si47xx_WaitForSTC+0x28>
			}
		}
	
		//-- 타임 아웃 처리
		//
		TimeEnd = Hw_Timer_Get_CountValue();
 8002516:	47a0      	blx	r4
		
		if( (TimeEnd - TimeStart) > TimeOut )
 8002518:	1b80      	subs	r0, r0, r6
 800251a:	42b8      	cmp	r0, r7
 800251c:	d9f3      	bls.n	8002506 <Hw_Si47xx_WaitForSTC+0xe>
		{
			Ret = HW_SI47XX_ERR_TIME_OUT;
 800251e:	2002      	movs	r0, #2
			break;
		}
	}
	
	return Ret;		
}
 8002520:	b003      	add	sp, #12
 8002522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002524:	08001ba5 	.word	0x08001ba5
 8002528:	080024c9 	.word	0x080024c9

0800252c <Hw_Si47xx_AM_TUNE_FREQ>:
     			520khz -> 1710khz
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_FREQ( u16 Frequency )
{
 800252c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 800252e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     			520khz -> 1710khz
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_FREQ( u16 Frequency )
{
 8002532:	b089      	sub	sp, #36	; 0x24
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x40;
	Cmd[Index++] = 0x00;
 8002534:	2400      	movs	r4, #0
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002536:	f242 4521 	movw	r5, #9249	; 0x2421
     			520khz -> 1710khz
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_FREQ( u16 Frequency )
{
 800253a:	4606      	mov	r6, r0

	Index = 0;
	
	Cmd[Index++] = 0x40;
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 800253c:	0a07      	lsrs	r7, r0, #8
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 800253e:	9300      	str	r3, [sp, #0]
	HW_SI47XX_PRINTF("AM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x40;
 8002540:	f04f 0e40 	mov.w	lr, #64	; 0x40
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002544:	a802      	add	r0, sp, #8
 8002546:	2106      	movs	r1, #6
 8002548:	aa04      	add	r2, sp, #16
 800254a:	4623      	mov	r3, r4
 800254c:	f6c0 0500 	movt	r5, #2048	; 0x800
	HW_SI47XX_PRINTF("AM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x40;
 8002550:	f88d e008 	strb.w	lr, [sp, #8]
	Cmd[Index++] = 0x00;
 8002554:	f88d 4009 	strb.w	r4, [sp, #9]
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 8002558:	f88d 700a 	strb.w	r7, [sp, #10]
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
 800255c:	f88d 600b 	strb.w	r6, [sp, #11]
	Cmd[Index++] = 0x00; 								// ANTCAP
 8002560:	f88d 400c 	strb.w	r4, [sp, #12]
	Cmd[Index++] = 0x00; 								// ANTCAP
 8002564:	f88d 400d 	strb.w	r4, [sp, #13]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002568:	47a8      	blx	r5
		
	return Ret;	
}
 800256a:	b009      	add	sp, #36	; 0x24
 800256c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800256e:	bf00      	nop

08002570 <Hw_Si47xx_FM_TUNE_FREQ>:
     			107.7Mhz -> 10770
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_FREQ( u16 Frequency )
{
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     			107.7Mhz -> 10770
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_FREQ( u16 Frequency )
{
 8002576:	b089      	sub	sp, #36	; 0x24
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x20;
	Cmd[Index++] = 0x00;
 8002578:	2500      	movs	r5, #0
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 800257a:	f242 4421 	movw	r4, #9249	; 0x2421
     			107.7Mhz -> 10770
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_FREQ( u16 Frequency )
{
 800257e:	4606      	mov	r6, r0

	Index = 0;
	
	Cmd[Index++] = 0x20;
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 8002580:	0a07      	lsrs	r7, r0, #8
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002582:	9300      	str	r3, [sp, #0]
	HW_SI47XX_PRINTF("FM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x20;
 8002584:	f04f 0e20 	mov.w	lr, #32
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002588:	a802      	add	r0, sp, #8
 800258a:	2105      	movs	r1, #5
 800258c:	aa04      	add	r2, sp, #16
 800258e:	462b      	mov	r3, r5
 8002590:	f6c0 0400 	movt	r4, #2048	; 0x800
	HW_SI47XX_PRINTF("FM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x20;
 8002594:	f88d e008 	strb.w	lr, [sp, #8]
	Cmd[Index++] = 0x00;
 8002598:	f88d 5009 	strb.w	r5, [sp, #9]
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 800259c:	f88d 700a 	strb.w	r7, [sp, #10]
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
 80025a0:	f88d 600b 	strb.w	r6, [sp, #11]
	Cmd[Index++] = 0x00; 								// ANTCAP
 80025a4:	f88d 500c 	strb.w	r5, [sp, #12]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80025a8:	47a0      	blx	r4
		
	return Ret;	
}
 80025aa:	b009      	add	sp, #36	; 0x24
 80025ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ae:	bf00      	nop

080025b0 <Hw_Si47xx_SET_PROPERTY>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_SET_PROPERTY( u16 PropertyName, u16 PropertyValue )
{
 80025b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 0 ) & 0xFF;
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80025b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_SET_PROPERTY( u16 PropertyName, u16 PropertyValue )
{
 80025b8:	b088      	sub	sp, #32
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x12;
	Cmd[Index++] = 0x00;
 80025ba:	2700      	movs	r7, #0
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 0 ) & 0xFF;
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80025bc:	f242 4421 	movw	r4, #9249	; 0x2421
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_SET_PROPERTY( u16 PropertyName, u16 PropertyValue )
{
 80025c0:	4606      	mov	r6, r0
 80025c2:	460d      	mov	r5, r1

	Index = 0;
	
	Cmd[Index++] = 0x12;
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
 80025c4:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
 80025c8:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	Cmd[Index++] = ( PropertyValue >> 0 ) & 0xFF;
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80025cc:	9300      	str	r3, [sp, #0]
	HW_SI47XX_PRINTF("SET_PROPERTY : %x, %x\n", PropertyName, PropertyValue );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x12;
 80025ce:	f04f 0812 	mov.w	r8, #18
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 0 ) & 0xFF;
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80025d2:	a802      	add	r0, sp, #8
 80025d4:	2106      	movs	r1, #6
 80025d6:	aa04      	add	r2, sp, #16
 80025d8:	463b      	mov	r3, r7
 80025da:	f6c0 0400 	movt	r4, #2048	; 0x800
	HW_SI47XX_PRINTF("SET_PROPERTY : %x, %x\n", PropertyName, PropertyValue );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x12;
 80025de:	f88d 8008 	strb.w	r8, [sp, #8]
	Cmd[Index++] = 0x00;
 80025e2:	f88d 7009 	strb.w	r7, [sp, #9]
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
 80025e6:	f88d c00a 	strb.w	ip, [sp, #10]
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
 80025ea:	f88d 600b 	strb.w	r6, [sp, #11]
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
 80025ee:	f88d e00c 	strb.w	lr, [sp, #12]
	Cmd[Index++] = ( PropertyValue >> 0 ) & 0xFF;
 80025f2:	f88d 500d 	strb.w	r5, [sp, #13]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80025f6:	47a0      	blx	r4
	
	return Ret;	
}
 80025f8:	b008      	add	sp, #32
 80025fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025fe:	bf00      	nop

08002600 <Hw_Si47xx_FM_Config>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_Config( void )
{
 8002600:	b530      	push	{r4, r5, lr}
	u8  Cmd [HW_SI47XX_MAX_LENGTH_CMD];
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];	

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_FM)) != ERR_NONE )	return Ret;
 8002602:	2000      	movs	r0, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_Config( void )
{
 8002604:	b089      	sub	sp, #36	; 0x24
	u8  Cmd [HW_SI47XX_MAX_LENGTH_CMD];
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];	

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_FM)) != ERR_NONE )	return Ret;
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <Hw_Si47xx_FM_Config+0x94>)
 8002608:	4798      	blx	r3
 800260a:	4604      	mov	r4, r0
 800260c:	b110      	cbz	r0, 8002614 <Hw_Si47xx_FM_Config+0x14>
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4001, 0  );
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4000, 63 );				

	
	return Ret;
}
 800260e:	4620      	mov	r0, r4
 8002610:	b009      	add	sp, #36	; 0x24
 8002612:	bd30      	pop	{r4, r5, pc}

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_FM)) != ERR_NONE )	return Ret;
		
	Hw_Timer_Delay_ms(120);
 8002614:	2078      	movs	r0, #120	; 0x78
 8002616:	4920      	ldr	r1, [pc, #128]	; (8002698 <Hw_Si47xx_FM_Config+0x98>)
 8002618:	4788      	blx	r1
	#if HW_SI47XX_DEBUG_SHOW == 1
	HW_SI47XX_PRINTF("GET_REV\n");
	#endif

	Cmd[0] = 0x10;
	if( (Ret = Hw_Si47xx_CommandResp( Cmd, 1, Resp, 8, 1000 )) != ERR_NONE ) return Ret;
 800261a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	//
	#if HW_SI47XX_DEBUG_SHOW == 1
	HW_SI47XX_PRINTF("GET_REV\n");
	#endif

	Cmd[0] = 0x10;
 800261e:	a808      	add	r0, sp, #32
 8002620:	2210      	movs	r2, #16
 8002622:	f800 2d18 	strb.w	r2, [r0, #-24]!
	if( (Ret = Hw_Si47xx_CommandResp( Cmd, 1, Resp, 8, 1000 )) != ERR_NONE ) return Ret;
 8002626:	2101      	movs	r1, #1
 8002628:	9400      	str	r4, [sp, #0]
 800262a:	aa04      	add	r2, sp, #16
 800262c:	4c1b      	ldr	r4, [pc, #108]	; (800269c <Hw_Si47xx_FM_Config+0x9c>)
 800262e:	2308      	movs	r3, #8
 8002630:	47a0      	blx	r4
 8002632:	4604      	mov	r4, r0
 8002634:	2800      	cmp	r0, #0
 8002636:	d1ea      	bne.n	800260e <Hw_Si47xx_FM_Config+0xe>
	
	
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0001, 0x0005 );		// Seek/Tune Complete Interrupt Enable
 8002638:	4d19      	ldr	r5, [pc, #100]	; (80026a0 <Hw_Si47xx_FM_Config+0xa0>)
 800263a:	2105      	movs	r1, #5
 800263c:	2001      	movs	r0, #1
 800263e:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0201, 32768 );		// REFCLK_FREQ
 8002640:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002644:	f240 2001 	movw	r0, #513	; 0x201
 8002648:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0202, 1     );		// PRESCALE
 800264a:	2101      	movs	r1, #1
 800264c:	f240 2002 	movw	r0, #514	; 0x202
 8002650:	47a8      	blx	r5

		
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1502, 0     );		// FM_RDS_CONFIG
 8002652:	4621      	mov	r1, r4
 8002654:	f241 5002 	movw	r0, #5378	; 0x1502
 8002658:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1100, 1     );		// FM_DEEMPHASIS
 800265a:	2101      	movs	r1, #1
 800265c:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8002660:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1400, 7600 );		// FM_SEEK_BAND_BOTTOM
 8002662:	f641 51b0 	movw	r1, #7600	; 0x1db0
 8002666:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800266a:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1401, 10790 );		// FM_SEEK_BAND_TOP
 800266c:	f642 2126 	movw	r1, #10790	; 0x2a26
 8002670:	f241 4001 	movw	r0, #5121	; 0x1401
 8002674:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1402, 10    );		// FM_SEEK_FREQ_SPACING
 8002676:	210a      	movs	r1, #10
 8002678:	f241 4002 	movw	r0, #5122	; 0x1402
 800267c:	47a8      	blx	r5
	//Ret = Hw_Si47xx_SET_PROPERTY( 0x1403, 3     );		// FM_SEEK_TUNE_SNR_THRESHOLD   3
	//Ret = Hw_Si47xx_SET_PROPERTY( 0x1404, 20    );		// FM_SEEK_TUNE_RSSI_THRESHOLD


	Ret = Hw_Si47xx_SET_PROPERTY( 0x4001, 0  );
 800267e:	4621      	mov	r1, r4
 8002680:	f244 0001 	movw	r0, #16385	; 0x4001
 8002684:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4000, 63 );				
 8002686:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800268a:	213f      	movs	r1, #63	; 0x3f
 800268c:	47a8      	blx	r5
 800268e:	4604      	mov	r4, r0
 8002690:	e7bd      	b.n	800260e <Hw_Si47xx_FM_Config+0xe>
 8002692:	bf00      	nop
 8002694:	080023b9 	.word	0x080023b9
 8002698:	08001b91 	.word	0x08001b91
 800269c:	08002421 	.word	0x08002421
 80026a0:	080025b1 	.word	0x080025b1

080026a4 <Hw_SPI_Ch2_Init>:

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 80026a4:	f640 4304 	movw	r3, #3076	; 0xc04
 80026a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80026ac:	6819      	ldr	r1, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 80026ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 80026b2:	f421 2070 	bic.w	r0, r1, #983040	; 0xf0000
 80026b6:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 80026b8:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 80026ba:	f643 0104 	movw	r1, #14340	; 0x3804
	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 80026be:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 80026c2:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 80026c4:	6818      	ldr	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 80026c6:	f2c4 0200 	movt	r2, #16384	; 0x4000
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 80026ca:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 80026ce:	6018      	str	r0, [r3, #0]
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 80026d0:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 80026d2:	f2c4 0100 	movt	r1, #16384	; 0x4000
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 80026d6:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 80026da:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (20));	// MODE   - Output mode, max speed 50Mhz
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 80026e2:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (22));	// CNF    - Alternate function output Push-pull
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80026ea:	6018      	str	r0, [r3, #0]

	// PB15 - SPI2_MOSI
	REG_GPIOB_CRH &= ~(0x0F << (28));	// Clear
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80026f2:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (28));	// MODE   - Output mode, max speed 50Mhz
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
 80026fa:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (30));	// CNF    - Alternate function output Push-pull
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002702:	6018      	str	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8002704:	f244 031c 	movw	r3, #16412	; 0x401c
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8002708:	2004      	movs	r0, #4



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 800270a:	6013      	str	r3, [r2, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 800270c:	6008      	str	r0, [r1, #0]
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR1, 6 );
 800270e:	6811      	ldr	r1, [r2, #0]
 8002710:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4770      	bx	lr

08002718 <Hw_SPI_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Init(void)
{
 8002718:	b510      	push	{r4, lr}
	static u8 Called = 0;


	if( Called == 1 ) return;
 800271a:	4c08      	ldr	r4, [pc, #32]	; (800273c <Hw_SPI_Init+0x24>)
 800271c:	7823      	ldrb	r3, [r4, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d00b      	beq.n	800273a <Hw_SPI_Init+0x22>


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 8002722:	f241 001c 	movw	r0, #4124	; 0x101c
 8002726:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800272a:	6802      	ldr	r2, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <Hw_SPI_Init+0x28>)
	if( Called == 1 ) return;


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 800272e:	f442 4180 	orr.w	r1, r2, #16384	; 0x4000
 8002732:	6001      	str	r1, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 8002734:	4798      	blx	r3

	Called = 1;	
 8002736:	2001      	movs	r0, #1
 8002738:	7020      	strb	r0, [r4, #0]
 800273a:	bd10      	pop	{r4, pc}
 800273c:	20000486 	.word	0x20000486
 8002740:	080026a5 	.word	0x080026a5

08002744 <Hw_SPI_StartDMA>:
              
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_StartDMA( u8 Ch )
{
	switch( Ch )
 8002744:	2801      	cmp	r0, #1
 8002746:	d10b      	bne.n	8002760 <Hw_SPI_StartDMA+0x1c>
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR2, 1 );	// TX DMA Enable
 8002748:	f643 0304 	movw	r3, #14340	; 0x3804
 800274c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f042 0002 	orr.w	r0, r2, #2
 8002756:	6018      	str	r0, [r3, #0]
			SET_BIT( REG_SPI2_CR2, 0 );	// RX DMA Enable
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	f041 0201 	orr.w	r2, r1, #1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop

08002764 <Hw_SPI_Write8Bit>:
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8002764:	2801      	cmp	r0, #1
 8002766:	d001      	beq.n	800276c <Hw_SPI_Write8Bit+0x8>
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8002768:	2000      	movs	r0, #0
}
 800276a:	4770      	bx	lr
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 800276c:	f643 0208 	movw	r2, #14344	; 0x3808
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8002770:	f242 730f 	movw	r3, #9999	; 0x270f
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8002774:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002778:	e006      	b.n	8002788 <Hw_SPI_Write8Bit+0x24>
 800277a:	6810      	ldr	r0, [r2, #0]
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 800277c:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 800277e:	0780      	lsls	r0, r0, #30
 8002780:	d405      	bmi.n	800278e <Hw_SPI_Write8Bit+0x2a>
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 8002782:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002786:	d305      	bcc.n	8002794 <Hw_SPI_Write8Bit+0x30>
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8002788:	6810      	ldr	r0, [r2, #0]
 800278a:	0780      	lsls	r0, r0, #30
 800278c:	d5f5      	bpl.n	800277a <Hw_SPI_Write8Bit+0x16>
			}
			if( TimeOut == 0 ) return 1;
 800278e:	b90b      	cbnz	r3, 8002794 <Hw_SPI_Write8Bit+0x30>
 8002790:	2001      	movs	r0, #1
 8002792:	4770      	bx	lr
			REG_SPI2_DR = WriteData;
 8002794:	f643 000c 	movw	r0, #14348	; 0x380c
 8002798:	f2c4 0000 	movt	r0, #16384	; 0x4000

			
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 800279c:	f643 0208 	movw	r2, #14344	; 0x3808
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
			}
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;
 80027a0:	6001      	str	r1, [r0, #0]

			
			TimeOut = 10000;	
			while( TimeOut-- )
 80027a2:	f242 730f 	movw	r3, #9999	; 0x270f
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 80027a6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80027aa:	e006      	b.n	80027ba <Hw_SPI_Write8Bit+0x56>
 80027ac:	6810      	ldr	r0, [r2, #0]
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 80027ae:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 80027b0:	07c1      	lsls	r1, r0, #31
 80027b2:	d405      	bmi.n	80027c0 <Hw_SPI_Write8Bit+0x5c>
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 80027b4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80027b8:	d304      	bcc.n	80027c4 <Hw_SPI_Write8Bit+0x60>
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 80027ba:	6811      	ldr	r1, [r2, #0]
 80027bc:	07c8      	lsls	r0, r1, #31
 80027be:	d5f5      	bpl.n	80027ac <Hw_SPI_Write8Bit+0x48>
			}
			if( TimeOut == 0 ) return 1;
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0e5      	beq.n	8002790 <Hw_SPI_Write8Bit+0x2c>
		
			ReadData = REG_SPI2_DR;
 80027c4:	f643 020c 	movw	r2, #14348	; 0x380c
 80027c8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80027cc:	6813      	ldr	r3, [r2, #0]
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 80027ce:	2000      	movs	r0, #0
			}
			if( TimeOut == 0 ) return 1;
		
			ReadData = REG_SPI2_DR;
			
			break;
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop

080027d4 <Hw_N5100G_FrameTick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5100G_FrameTick( void )
{
 80027d4:	b508      	push	{r3, lr}
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
 80027d6:	4b0d      	ldr	r3, [pc, #52]	; (800280c <Hw_N5100G_FrameTick+0x38>)
 80027d8:	4798      	blx	r3
 80027da:	2801      	cmp	r0, #1
 80027dc:	d00d      	beq.n	80027fa <Hw_N5100G_FrameTick+0x26>
 80027de:	480c      	ldr	r0, [pc, #48]	; (8002810 <Hw_N5100G_FrameTick+0x3c>)
 80027e0:	6803      	ldr	r3, [r0, #0]
		{
			Hw_N5110G_Frame_DrawReq--;
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 80027e2:	b903      	cbnz	r3, 80027e6 <Hw_N5100G_FrameTick+0x12>
 80027e4:	bd08      	pop	{r3, pc}
	{
		Hw_DMA_SPI2_Setup( (u32)Hw_N5110G_TxFrameBuf, (u32)Hw_N5110G_RxFrameBuf, HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT );				
 80027e6:	480b      	ldr	r0, [pc, #44]	; (8002814 <Hw_N5100G_FrameTick+0x40>)
 80027e8:	490b      	ldr	r1, [pc, #44]	; (8002818 <Hw_N5100G_FrameTick+0x44>)
 80027ea:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <Hw_N5100G_FrameTick+0x48>)
 80027f0:	4798      	blx	r3
		Hw_SPI_StartDMA( HW_SPI_CH2 );			
 80027f2:	2001      	movs	r0, #1
 80027f4:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <Hw_N5100G_FrameTick+0x4c>)
 80027f6:	4790      	blx	r2
 80027f8:	bd08      	pop	{r3, pc}
{
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
	{
		if( Hw_N5110G_Frame_DrawReq > 0 )
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <Hw_N5100G_FrameTick+0x3c>)
 80027fc:	6811      	ldr	r1, [r2, #0]
 80027fe:	2900      	cmp	r1, #0
 8002800:	d0f0      	beq.n	80027e4 <Hw_N5100G_FrameTick+0x10>
		{
			Hw_N5110G_Frame_DrawReq--;
 8002802:	1e4b      	subs	r3, r1, #1
 8002804:	6013      	str	r3, [r2, #0]
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0ec      	beq.n	80027e4 <Hw_N5100G_FrameTick+0x10>
 800280a:	e7ec      	b.n	80027e6 <Hw_N5100G_FrameTick+0x12>
 800280c:	08003021 	.word	0x08003021
 8002810:	20000b9c 	.word	0x20000b9c
 8002814:	200009a0 	.word	0x200009a0
 8002818:	20000ba0 	.word	0x20000ba0
 800281c:	08002fa9 	.word	0x08002fa9
 8002820:	08002745 	.word	0x08002745

08002824 <Hw_N5110G_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
 8002824:	b510      	push	{r4, lr}
	HW_N5110G_RESET_ON();
 8002826:	f640 440c 	movw	r4, #3084	; 0xc0c
 800282a:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800282e:	6822      	ldr	r2, [r4, #0]
	Hw_Timer_Delay_ms(10);
 8002830:	f641 3391 	movw	r3, #7057	; 0x1b91
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
	HW_N5110G_RESET_ON();
 8002834:	f422 6080 	bic.w	r0, r2, #1024	; 0x400
 8002838:	6020      	str	r0, [r4, #0]
	Hw_Timer_Delay_ms(10);
 800283a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800283e:	200a      	movs	r0, #10
 8002840:	4798      	blx	r3
	HW_N5110G_RESET_OFF();
 8002842:	6821      	ldr	r1, [r4, #0]
 8002844:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 8002848:	6022      	str	r2, [r4, #0]
 800284a:	bd10      	pop	{r4, pc}

0800284c <Hw_N5110G_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 800284c:	b510      	push	{r4, lr}
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 800284e:	f640 440c 	movw	r4, #3084	; 0xc0c
 8002852:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8002856:	6823      	ldr	r3, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 8002858:	4601      	mov	r1, r0
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 800285a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 800285e:	f242 7365 	movw	r3, #10085	; 0x2765
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8002862:	6022      	str	r2, [r4, #0]
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 8002864:	2001      	movs	r0, #1
 8002866:	f6c0 0300 	movt	r3, #2048	; 0x800
 800286a:	4798      	blx	r3
	HW_N5110G_SEL_DATA();
 800286c:	6821      	ldr	r1, [r4, #0]
 800286e:	f441 6200 	orr.w	r2, r1, #2048	; 0x800
 8002872:	6022      	str	r2, [r4, #0]
	
	return Ret;
}
 8002874:	bd10      	pop	{r4, pc}
 8002876:	bf00      	nop

08002878 <Hw_N5110G_Goto>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 8002878:	b570      	push	{r4, r5, r6, lr}
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 800287a:	f642 044d 	movw	r4, #10317	; 0x284d
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 800287e:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 8002880:	f6c0 0400 	movt	r4, #2048	; 0x800
 8002884:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 8002888:	47a0      	blx	r4
 800288a:	4606      	mov	r6, r0
	Ret |= Hw_N5110G_WriteCmd( 0x80|x );
 800288c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 8002890:	47a0      	blx	r4
 8002892:	4330      	orrs	r0, r6

	return Ret;
}
 8002894:	b280      	uxth	r0, r0
 8002896:	bd70      	pop	{r4, r5, r6, pc}

08002898 <Hw_N5110G_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8002898:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 800289a:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <Hw_N5110G_Init+0xbc>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 800289c:	b083      	sub	sp, #12
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 800289e:	4798      	blx	r3
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 80028a0:	f640 4004 	movw	r0, #3076	; 0xc04
 80028a4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80028a8:	6802      	ldr	r2, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 80028aa:	f640 440c 	movw	r4, #3084	; 0xc0c
	
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 80028ae:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 80028b2:	6001      	str	r1, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 80028b4:	6805      	ldr	r5, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 80028b6:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 80028ba:	f445 7640 	orr.w	r6, r5, #768	; 0x300
 80028be:	6006      	str	r6, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 80028c0:	6807      	ldr	r7, [r0, #0]
	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
	
	Hw_N5110G_Reset();
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 80028c2:	4d25      	ldr	r5, [pc, #148]	; (8002958 <Hw_N5110G_Init+0xc0>)
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 80028c4:	6007      	str	r7, [r0, #0]

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 80028c6:	6803      	ldr	r3, [r0, #0]
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 80028c8:	2600      	movs	r6, #0
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 80028ca:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80028ce:	6002      	str	r2, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
 80028d0:	6801      	ldr	r1, [r0, #0]
 80028d2:	f441 5740 	orr.w	r7, r1, #12288	; 0x3000
 80028d6:	6007      	str	r7, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 80028d8:	6803      	ldr	r3, [r0, #0]
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
 80028da:	4f20      	ldr	r7, [pc, #128]	; (800295c <Hw_N5110G_Init+0xc4>)

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 80028dc:	6003      	str	r3, [r0, #0]


	HW_N5110G_RESET_OFF();
 80028de:	6820      	ldr	r0, [r4, #0]
 80028e0:	f440 6280 	orr.w	r2, r0, #1024	; 0x400
 80028e4:	6022      	str	r2, [r4, #0]
	HW_N5110G_SEL_CMD();
 80028e6:	6821      	ldr	r1, [r4, #0]
	
	Hw_N5110G_Reset();
 80028e8:	481d      	ldr	r0, [pc, #116]	; (8002960 <Hw_N5110G_Init+0xc8>)
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
 80028ea:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 80028ee:	6023      	str	r3, [r4, #0]
	
	Hw_N5110G_Reset();
 80028f0:	4780      	blx	r0
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 80028f2:	2021      	movs	r0, #33	; 0x21
 80028f4:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0xC6);	// Write Vop
 80028f6:	20c6      	movs	r0, #198	; 0xc6
 80028f8:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x06);	// Set Temperature Coefficient
 80028fa:	2006      	movs	r0, #6
 80028fc:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x13);	// Set Bias System
 80028fe:	2013      	movs	r0, #19
 8002900:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x20);	// H = 0
 8002902:	2020      	movs	r0, #32
 8002904:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
 8002906:	200c      	movs	r0, #12
 8002908:	47a8      	blx	r5
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
 800290a:	4631      	mov	r1, r6
 800290c:	4a15      	ldr	r2, [pc, #84]	; (8002964 <Hw_N5110G_Init+0xcc>)
 800290e:	4630      	mov	r0, r6
 8002910:	4790      	blx	r2
	
	
	HW_N5110G_SEL_DATA();
 8002912:	6821      	ldr	r1, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8002914:	2003      	movs	r0, #3
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
 8002916:	f441 6300 	orr.w	r3, r1, #2048	; 0x800
 800291a:	6023      	str	r3, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
 800291c:	4c12      	ldr	r4, [pc, #72]	; (8002968 <Hw_N5110G_Init+0xd0>)
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 800291e:	2121      	movs	r1, #33	; 0x21
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <Hw_N5110G_Init+0xd4>)
 8002922:	9600      	str	r6, [sp, #0]
 8002924:	2202      	movs	r2, #2
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8002926:	8026      	strh	r6, [r4, #0]
	Hw_N5110G_Frame_DrawReq	= 0;						
 8002928:	603e      	str	r6, [r7, #0]
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 800292a:	4c11      	ldr	r4, [pc, #68]	; (8002970 <Hw_N5110G_Init+0xd8>)
 800292c:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
 800292e:	2003      	movs	r0, #3
 8002930:	4a10      	ldr	r2, [pc, #64]	; (8002974 <Hw_N5110G_Init+0xdc>)
 8002932:	4790      	blx	r2
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <Hw_N5110G_Init+0xe0>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8002936:	4631      	mov	r1, r6
     TITLE   : Hw_5110G_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
 8002938:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 800293c:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 800293e:	7059      	strb	r1, [r3, #1]
 8002940:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8002942:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8002944:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8002946:	d1f9      	bne.n	800293c <Hw_N5110G_Init+0xa4>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002948:	6839      	ldr	r1, [r7, #0]
 800294a:	1c88      	adds	r0, r1, #2
 800294c:	6038      	str	r0, [r7, #0]
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
	
	
	Hw_N5110G_Clear();	
	Hw_N5110G_DrawRequest();
}
 800294e:	b003      	add	sp, #12
 8002950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002952:	bf00      	nop
 8002954:	08002719 	.word	0x08002719
 8002958:	0800284d 	.word	0x0800284d
 800295c:	20000b9c 	.word	0x20000b9c
 8002960:	08002825 	.word	0x08002825
 8002964:	08002879 	.word	0x08002879
 8002968:	20000b98 	.word	0x20000b98
 800296c:	080027d5 	.word	0x080027d5
 8002970:	08001b49 	.word	0x08001b49
 8002974:	08001b69 	.word	0x08001b69
 8002978:	2000099f 	.word	0x2000099f

0800297c <Hw_N5110G_Clear>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
{
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <Hw_N5110G_Clear+0x20>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 800297e:	2100      	movs	r1, #0
     TITLE   : Hw_N5110G_Clear
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
 8002980:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8002984:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8002986:	7059      	strb	r1, [r3, #1]
 8002988:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 800298a:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 800298c:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 800298e:	d1f9      	bne.n	8002984 <Hw_N5110G_Clear+0x8>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002990:	4903      	ldr	r1, [pc, #12]	; (80029a0 <Hw_N5110G_Clear+0x24>)
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 8002992:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002994:	680a      	ldr	r2, [r1, #0]
 8002996:	1c53      	adds	r3, r2, #1
 8002998:	600b      	str	r3, [r1, #0]
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 800299a:	4770      	bx	lr
 800299c:	2000099f 	.word	0x2000099f
 80029a0:	20000b9c 	.word	0x20000b9c

080029a4 <Hw_N5110G_WriteStr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 80029a4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 80029a8:	7807      	ldrb	r7, [r0, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 80029aa:	b086      	sub	sp, #24
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 80029ac:	2f00      	cmp	r7, #0
 80029ae:	f000 8085 	beq.w	8002abc <Hw_N5110G_WriteStr+0x118>
 80029b2:	f640 3198 	movw	r1, #2968	; 0xb98
 80029b6:	f2c2 0100 	movt	r1, #8192	; 0x2000
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80029ba:	f640 0c21 	movw	ip, #2081	; 0x821
 80029be:	f8b1 9000 	ldrh.w	r9, [r1]
 80029c2:	f8df a104 	ldr.w	sl, [pc, #260]	; 8002ac8 <Hw_N5110G_WriteStr+0x124>
 80029c6:	f2c2 0c82 	movt	ip, #8322	; 0x2082
 80029ca:	9001      	str	r0, [sp, #4]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80029cc:	f109 0301 	add.w	r3, r9, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80029d0:	b298      	uxth	r0, r3
 80029d2:	08c2      	lsrs	r2, r0, #3
 80029d4:	fbac 2402 	umull	r2, r4, ip, r2
 80029d8:	08e5      	lsrs	r5, r4, #3
 80029da:	ebc5 1685 	rsb	r6, r5, r5, lsl #6
 80029de:	eba0 01c6 	sub.w	r1, r0, r6, lsl #3
 80029e2:	b289      	uxth	r1, r1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80029e4:	1c4b      	adds	r3, r1, #1
 80029e6:	b298      	uxth	r0, r3
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80029e8:	08c2      	lsrs	r2, r0, #3
 80029ea:	fbac 4502 	umull	r4, r5, ip, r2
 80029ee:	08ec      	lsrs	r4, r5, #3
 80029f0:	ebc4 1684 	rsb	r6, r4, r4, lsl #6
 80029f4:	eba0 03c6 	sub.w	r3, r0, r6, lsl #3
 80029f8:	b29a      	uxth	r2, r3
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80029fa:	1c50      	adds	r0, r2, #1
 80029fc:	b284      	uxth	r4, r0
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80029fe:	08e5      	lsrs	r5, r4, #3
 8002a00:	fbac 5605 	umull	r5, r6, ip, r5
 8002a04:	08f3      	lsrs	r3, r6, #3
 8002a06:	ebc3 1083 	rsb	r0, r3, r3, lsl #6
 8002a0a:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
 8002a0e:	fa1f f884 	uxth.w	r8, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002a12:	f108 0501 	add.w	r5, r8, #1
 8002a16:	b2ae      	uxth	r6, r5
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002a18:	08f3      	lsrs	r3, r6, #3
 8002a1a:	fbac 4003 	umull	r4, r0, ip, r3
 8002a1e:	08c4      	lsrs	r4, r0, #3
 8002a20:	ebc4 1584 	rsb	r5, r4, r4, lsl #6
 8002a24:	eba6 06c5 	sub.w	r6, r6, r5, lsl #3
 8002a28:	b2b6      	uxth	r6, r6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002a2a:	1c73      	adds	r3, r6, #1
 8002a2c:	b29c      	uxth	r4, r3
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002a2e:	08e0      	lsrs	r0, r4, #3
 8002a30:	fbac 5300 	umull	r5, r3, ip, r0
 8002a34:	08dd      	lsrs	r5, r3, #3
 8002a36:	ebc5 1085 	rsb	r0, r5, r5, lsl #6
 8002a3a:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
 8002a3e:	b2a5      	uxth	r5, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002a40:	1c6b      	adds	r3, r5, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002a42:	b298      	uxth	r0, r3
 8002a44:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
 8002a48:	fbac 340b 	umull	r3, r4, ip, fp
 8002a4c:	3f20      	subs	r7, #32
 8002a4e:	ea4f 0bd4 	mov.w	fp, r4, lsr #3
	u16 i;
	u8  Ch;
	
	for( i=0; i<6; i++ )
	{
		Ch = Hw_N5110G_Font6_8[CharData-32][i];
 8002a52:	f240 0404 	movw	r4, #4
 8002a56:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002a5a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8002a5e:	eb04 0347 	add.w	r3, r4, r7, lsl #1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002a62:	f814 7017 	ldrb.w	r7, [r4, r7, lsl #1]
 8002a66:	789c      	ldrb	r4, [r3, #2]
 8002a68:	9702      	str	r7, [sp, #8]
 8002a6a:	9403      	str	r4, [sp, #12]
 8002a6c:	78dc      	ldrb	r4, [r3, #3]
 8002a6e:	785f      	ldrb	r7, [r3, #1]
 8002a70:	9404      	str	r4, [sp, #16]
 8002a72:	791c      	ldrb	r4, [r3, #4]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002a74:	ebcb 1b8b 	rsb	fp, fp, fp, lsl #6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002a78:	9405      	str	r4, [sp, #20]
 8002a7a:	9c02      	ldr	r4, [sp, #8]
 8002a7c:	795b      	ldrb	r3, [r3, #5]
 8002a7e:	f80a 4009 	strb.w	r4, [sl, r9]
 8002a82:	f80a 7001 	strb.w	r7, [sl, r1]
 8002a86:	9f03      	ldr	r7, [sp, #12]
 8002a88:	9c05      	ldr	r4, [sp, #20]
 8002a8a:	f80a 7002 	strb.w	r7, [sl, r2]
 8002a8e:	9a04      	ldr	r2, [sp, #16]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002a90:	eba0 00cb 	sub.w	r0, r0, fp, lsl #3
 8002a94:	f640 3198 	movw	r1, #2968	; 0xb98
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002a98:	f80a 2008 	strb.w	r2, [sl, r8]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8002a9c:	fa1f f980 	uxth.w	r9, r0
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8002aa0:	f80a 4006 	strb.w	r4, [sl, r6]
 8002aa4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002aa8:	f80a 3005 	strb.w	r3, [sl, r5]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8002aac:	9d01      	ldr	r5, [sp, #4]
 8002aae:	f8a1 9000 	strh.w	r9, [r1]
 8002ab2:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 8002ab6:	9501      	str	r5, [sp, #4]
 8002ab8:	2f00      	cmp	r7, #0
 8002aba:	d187      	bne.n	80029cc <Hw_N5110G_WriteStr+0x28>
		Ret |= Hw_N5110G_WriteChar( *pStr );
		pStr++;
	}
		
	return Ret;
}
 8002abc:	2000      	movs	r0, #0
 8002abe:	b006      	add	sp, #24
 8002ac0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	200009a0 	.word	0x200009a0

08002acc <Hw_N5110G_DrawRequest>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8002acc:	f640 339c 	movw	r3, #2972	; 0xb9c
 8002ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	1c50      	adds	r0, r2, #1
 8002ad8:	6018      	str	r0, [r3, #0]
 8002ada:	4770      	bx	lr

08002adc <Hw_N5110G_DrawClearRect>:
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawClearRect( u16 s_x, u16 s_y, u16 e_x, u16 e_y )
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
 8002adc:	4290      	cmp	r0, r2
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawClearRect( u16 s_x, u16 s_y, u16 e_x, u16 e_y )
{
 8002ade:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
 8002ae2:	d84f      	bhi.n	8002b84 <Hw_N5110G_DrawClearRect+0xa8>
 8002ae4:	4d29      	ldr	r5, [pc, #164]	; (8002b8c <Hw_N5110G_DrawClearRect+0xb0>)
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ae6:	f04f 0854 	mov.w	r8, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002aea:	f04f 0c01 	mov.w	ip, #1
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002aee:	4299      	cmp	r1, r3
 8002af0:	d844      	bhi.n	8002b7c <Hw_N5110G_DrawClearRect+0xa0>
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002af2:	f001 0907 	and.w	r9, r1, #7
 8002af6:	fa0c f909 	lsl.w	r9, ip, r9
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002afa:	08ce      	lsrs	r6, r1, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002afc:	fb08 0606 	mla	r6, r8, r6, r0
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b00:	1c4c      	adds	r4, r1, #1
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b02:	f815 a006 	ldrb.w	sl, [r5, r6]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b06:	b2a4      	uxth	r4, r4
 8002b08:	1a5f      	subs	r7, r3, r1
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b0a:	ea2a 0909 	bic.w	r9, sl, r9
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b0e:	42a3      	cmp	r3, r4
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002b10:	f805 9006 	strb.w	r9, [r5, r6]
 8002b14:	f007 0701 	and.w	r7, r7, #1
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b18:	d330      	bcc.n	8002b7c <Hw_N5110G_DrawClearRect+0xa0>
 8002b1a:	b17f      	cbz	r7, 8002b3c <Hw_N5110G_DrawClearRect+0x60>
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b1c:	f004 0607 	and.w	r6, r4, #7
 8002b20:	fa0c f706 	lsl.w	r7, ip, r6
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002b24:	08e6      	lsrs	r6, r4, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002b26:	fb08 0606 	mla	r6, r8, r6, r0
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b2a:	3401      	adds	r4, #1
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b2c:	f815 9006 	ldrb.w	r9, [r5, r6]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b30:	b2a4      	uxth	r4, r4
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b32:	ea29 0707 	bic.w	r7, r9, r7
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b36:	42a3      	cmp	r3, r4
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002b38:	55af      	strb	r7, [r5, r6]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b3a:	d31f      	bcc.n	8002b7c <Hw_N5110G_DrawClearRect+0xa0>
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b3c:	f004 0a07 	and.w	sl, r4, #7
 8002b40:	fa0c fa0a 	lsl.w	sl, ip, sl
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b44:	1c67      	adds	r7, r4, #1
 8002b46:	b2be      	uxth	r6, r7
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b48:	f006 0b07 	and.w	fp, r6, #7
 8002b4c:	fa0c f90b 	lsl.w	r9, ip, fp
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002b50:	08e4      	lsrs	r4, r4, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002b52:	fb08 0404 	mla	r4, r8, r4, r0
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002b56:	08f7      	lsrs	r7, r6, #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b58:	f815 b004 	ldrb.w	fp, [r5, r4]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002b5c:	fb08 0707 	mla	r7, r8, r7, r0
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b60:	ea2b 0a0a 	bic.w	sl, fp, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002b64:	f805 a004 	strb.w	sl, [r5, r4]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b68:	f815 a007 	ldrb.w	sl, [r5, r7]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b6c:	1c74      	adds	r4, r6, #1
 8002b6e:	b2a4      	uxth	r4, r4
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002b70:	ea2a 0909 	bic.w	r9, sl, r9
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b74:	42a3      	cmp	r3, r4
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002b76:	f805 9007 	strb.w	r9, [r5, r7]
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
	{
		for( j=s_y; j<=e_y; j++ )
 8002b7a:	d2df      	bcs.n	8002b3c <Hw_N5110G_DrawClearRect+0x60>
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawClearRect( u16 s_x, u16 s_y, u16 e_x, u16 e_y )
{
	u16 i,j;
	
	for( i=s_x; i<=e_x; i++ )
 8002b7c:	3001      	adds	r0, #1
 8002b7e:	b280      	uxth	r0, r0
 8002b80:	4282      	cmp	r2, r0
 8002b82:	d2b4      	bcs.n	8002aee <Hw_N5110G_DrawClearRect+0x12>
		for( j=s_y; j<=e_y; j++ )
		{
			Hw_N5110G_ClrPixel( i, j );
		}
	}
}
 8002b84:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	200009a0 	.word	0x200009a0

08002b90 <Hw_N5110G_DrawPrint>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_DrawPrint( u8 x_str, u8 y_str,  char *format, ... )
{
 8002b90:	b40c      	push	{r2, r3}
 8002b92:	b530      	push	{r4, r5, lr}
 8002b94:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8002b96:	aa36      	add	r2, sp, #216	; 0xd8
 8002b98:	f241 0365 	movw	r3, #4197	; 0x1065
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_DrawPrint( u8 x_str, u8 y_str,  char *format, ... )
{
 8002b9c:	460d      	mov	r5, r1
 8002b9e:	4604      	mov	r4, r0
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8002ba0:	f852 1b04 	ldr.w	r1, [r2], #4
 8002ba4:	4668      	mov	r0, sp
 8002ba6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002baa:	4798      	blx	r3

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8002bac:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8002bb0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8002bb4:	004c      	lsls	r4, r1, #1
 8002bb6:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 8002bba:	f640 3298 	movw	r2, #2968	; 0xb98

	Hw_N5110G_WriteStr( Str );		
 8002bbe:	f642 13a5 	movw	r3, #10661	; 0x29a5

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8002bc2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002bc6:	eb04 0585 	add.w	r5, r4, r5, lsl #2

	Hw_N5110G_WriteStr( Str );		
 8002bca:	4668      	mov	r0, sp
 8002bcc:	f6c0 0300 	movt	r3, #2048	; 0x800

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8002bd0:	8015      	strh	r5, [r2, #0]

	Hw_N5110G_WriteStr( Str );		
 8002bd2:	4798      	blx	r3
		
	Lb_va_end(ap);		
	
	return Ret;
}
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	b033      	add	sp, #204	; 0xcc
 8002bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002bdc:	b002      	add	sp, #8
 8002bde:	4770      	bx	lr

08002be0 <Hw_N5110G_DrawCircle>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8002be0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002be4:	b088      	sub	sp, #32
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8002be6:	0054      	lsls	r4, r2, #1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8002be8:	9005      	str	r0, [sp, #20]
 8002bea:	9106      	str	r1, [sp, #24]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8002bec:	f1c4 0003 	rsb	r0, r4, #3
 8002bf0:	9d05      	ldr	r5, [sp, #20]
 8002bf2:	9c06      	ldr	r4, [sp, #24]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8002bf4:	9304      	str	r3, [sp, #16]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8002bf6:	b283      	uxth	r3, r0
 8002bf8:	9303      	str	r3, [sp, #12]
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];
 8002bfa:	49a0      	ldr	r1, [pc, #640]	; (8002e7c <Hw_N5110G_DrawCircle+0x29c>)
{
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	9501      	str	r5, [sp, #4]
 8002c00:	9502      	str	r5, [sp, #8]
	CurX = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e0a5      	b.n	8002d52 <Hw_N5110G_DrawCircle+0x172>
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8002c06:	f8dd b018 	ldr.w	fp, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002c0a:	f04f 0901 	mov.w	r9, #1
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
 8002c0e:	ebc2 060b 	rsb	r6, r2, fp
 8002c12:	b2b6      	uxth	r6, r6
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002c14:	f006 0807 	and.w	r8, r6, #7
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8002c18:	eb02 050b 	add.w	r5, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002c1c:	fa09 fb08 	lsl.w	fp, r9, r8
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8002c20:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002c22:	f007 0a07 	and.w	sl, r7, #7
 8002c26:	f000 0507 	and.w	r5, r0, #7
 8002c2a:	fa09 fc0a 	lsl.w	ip, r9, sl
 8002c2e:	f04f 0801 	mov.w	r8, #1
 8002c32:	fa09 fa05 	lsl.w	sl, r9, r5
 8002c36:	f004 0907 	and.w	r9, r4, #7
 8002c3a:	f8cd b01c 	str.w	fp, [sp, #28]
 8002c3e:	fa08 fb09 	lsl.w	fp, r8, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002c42:	2554      	movs	r5, #84	; 0x54
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002c44:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002c46:	fb05 f707 	mul.w	r7, r5, r7
 8002c4a:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002c4e:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002c50:	eb07 0809 	add.w	r8, r7, r9
 8002c54:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002c58:	f8cd b000 	str.w	fp, [sp]
 8002c5c:	f811 b008 	ldrb.w	fp, [r1, r8]
 8002c60:	fa5f fc8c 	uxtb.w	ip, ip
 8002c64:	ea4b 050c 	orr.w	r5, fp, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002c68:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002c6c:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002c70:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8002c74:	f811 b008 	ldrb.w	fp, [r1, r8]
 8002c78:	fa5f f589 	uxtb.w	r5, r9
 8002c7c:	ea4b 0b05 	orr.w	fp, fp, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002c80:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002c84:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002c88:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002c8c:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002c8e:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002c92:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002c96:	ea49 0c0c 	orr.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002c9a:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002c9e:	2754      	movs	r7, #84	; 0x54
 8002ca0:	4446      	add	r6, r8
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 8002ca2:	f8dd 9014 	ldr.w	r9, [sp, #20]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ca6:	fb07 f80b 	mul.w	r8, r7, fp
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002caa:	f811 b006 	ldrb.w	fp, [r1, r6]
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 8002cae:	eb02 0709 	add.w	r7, r2, r9
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002cb2:	ea4b 0505 	orr.w	r5, fp, r5
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002cb6:	b2bf      	uxth	r7, r7
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002cb8:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002cbc:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002cc0:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002cc2:	eb08 0607 	add.w	r6, r8, r7
 8002cc6:	fb0b f50c 	mul.w	r5, fp, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002cca:	f811 9006 	ldrb.w	r9, [r1, r6]
 8002cce:	fa5f fa8a 	uxtb.w	sl, sl
 8002cd2:	f8dd b000 	ldr.w	fp, [sp]
 8002cd6:	ea49 0c0a 	orr.w	ip, r9, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002cda:	f801 c006 	strb.w	ip, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002cde:	19ef      	adds	r7, r5, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002ce0:	fa5f f98b 	uxtb.w	r9, fp
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 8002ce4:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002ce8:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 8002cea:	ebc2 0c0b 	rsb	ip, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002cee:	ea46 0609 	orr.w	r6, r6, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002cf2:	fa1f fc8c 	uxth.w	ip, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002cf6:	55ce      	strb	r6, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002cf8:	44e0      	add	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002cfa:	f811 7008 	ldrb.w	r7, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002cfe:	4465      	add	r5, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d00:	ea47 0a0a 	orr.w	sl, r7, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002d04:	f801 a008 	strb.w	sl, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8002d08:	5d4e      	ldrb	r6, [r1, r5]
 8002d0a:	ea46 0909 	orr.w	r9, r6, r9
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002d0e:	f801 9005 	strb.w	r9, [r1, r5]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002d12:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002d16:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 8002d1a:	f040 80a8 	bne.w	8002e6e <Hw_N5110G_DrawCircle+0x28e>
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8002d1e:	9f03      	ldr	r7, [sp, #12]
 8002d20:	1a9d      	subs	r5, r3, r2
 8002d22:	370a      	adds	r7, #10
 8002d24:	eb07 0685 	add.w	r6, r7, r5, lsl #2
			CurY--;
 8002d28:	3a01      	subs	r2, #1
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8002d2a:	b2b7      	uxth	r7, r6
 8002d2c:	9703      	str	r7, [sp, #12]
			CurY--;
 8002d2e:	b292      	uxth	r2, r2
 8002d30:	9d02      	ldr	r5, [sp, #8]
 8002d32:	9f01      	ldr	r7, [sp, #4]
		}
		CurX++;
 8002d34:	3301      	adds	r3, #1
 8002d36:	1c6e      	adds	r6, r5, #1
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	1e7d      	subs	r5, r7, #1
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	3c01      	subs	r4, #1
 8002d40:	b2b6      	uxth	r6, r6
 8002d42:	b2ad      	uxth	r5, r5
  
	D    = 3 - (Radius << 1);
	CurX = 0;
	CurY = Radius;
	
	while (CurX <= CurY)
 8002d44:	429a      	cmp	r2, r3
 8002d46:	9602      	str	r6, [sp, #8]
 8002d48:	9501      	str	r5, [sp, #4]
 8002d4a:	b280      	uxth	r0, r0
 8002d4c:	b2a4      	uxth	r4, r4
 8002d4e:	f0c0 8115 	bcc.w	8002f7c <Hw_N5110G_DrawCircle+0x39c>
	{
		if( Mode == 0 )
 8002d52:	9e04      	ldr	r6, [sp, #16]
 8002d54:	2e00      	cmp	r6, #0
 8002d56:	f43f af56 	beq.w	8002c06 <Hw_N5110G_DrawCircle+0x26>
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
 8002d5a:	9d04      	ldr	r5, [sp, #16]
 8002d5c:	2d01      	cmp	r5, #1
 8002d5e:	f000 808f 	beq.w	8002e80 <Hw_N5110G_DrawCircle+0x2a0>
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
 8002d62:	9f04      	ldr	r7, [sp, #16]
 8002d64:	2f02      	cmp	r7, #2
 8002d66:	d1d4      	bne.n	8002d12 <Hw_N5110G_DrawCircle+0x132>
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8002d68:	9e06      	ldr	r6, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002d6a:	f04f 0901 	mov.w	r9, #1
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8002d6e:	1995      	adds	r5, r2, r6
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
 8002d70:	1ab6      	subs	r6, r6, r2
 8002d72:	b2b6      	uxth	r6, r6
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8002d74:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002d76:	f006 0507 	and.w	r5, r6, #7
 8002d7a:	fa09 fa05 	lsl.w	sl, r9, r5
 8002d7e:	f007 0c07 	and.w	ip, r7, #7
 8002d82:	f04f 0801 	mov.w	r8, #1
 8002d86:	fa08 fb0c 	lsl.w	fp, r8, ip
 8002d8a:	f004 0c07 	and.w	ip, r4, #7
 8002d8e:	fa09 f80c 	lsl.w	r8, r9, ip
 8002d92:	f000 0507 	and.w	r5, r0, #7
 8002d96:	f8cd a01c 	str.w	sl, [sp, #28]
 8002d9a:	fa09 fa05 	lsl.w	sl, r9, r5
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002d9e:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002da0:	2554      	movs	r5, #84	; 0x54
 8002da2:	fb05 f707 	mul.w	r7, r5, r7
 8002da6:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002daa:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002dac:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002db0:	f8cd 8000 	str.w	r8, [sp]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002db4:	eb07 0809 	add.w	r8, r7, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002db8:	f811 5008 	ldrb.w	r5, [r1, r8]
 8002dbc:	fa5f fc8b 	uxtb.w	ip, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002dc0:	f8dd 9008 	ldr.w	r9, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002dc4:	ea85 0b0c 	eor.w	fp, r5, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002dc8:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002dcc:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002dd0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8002dd4:	f811 9008 	ldrb.w	r9, [r1, r8]
 8002dd8:	fa5f f58b 	uxtb.w	r5, fp
 8002ddc:	ea89 0905 	eor.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002de0:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002de4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002de8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002dec:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002dee:	f811 b007 	ldrb.w	fp, [r1, r7]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002df2:	ea4f 08d0 	mov.w	r8, r0, lsr #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002df6:	ea8b 0c0c 	eor.w	ip, fp, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002dfa:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002dfe:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e02:	444e      	add	r6, r9
 8002e04:	fb0b f808 	mul.w	r8, fp, r8
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 8002e08:	f8dd c014 	ldr.w	ip, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e0c:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 8002e0e:	eb02 090c 	add.w	r9, r2, ip
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e12:	407d      	eors	r5, r7
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e14:	fa1f f989 	uxth.w	r9, r9
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002e18:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002e1c:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e1e:	fb0b fc07 	mul.w	ip, fp, r7
 8002e22:	eb08 0509 	add.w	r5, r8, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e26:	5d4f      	ldrb	r7, [r1, r5]
 8002e28:	fa5f f68a 	uxtb.w	r6, sl
 8002e2c:	4077      	eors	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002e2e:	554f      	strb	r7, [r1, r5]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e30:	44e1      	add	r9, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e32:	9d00      	ldr	r5, [sp, #0]
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 8002e34:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e38:	f811 a009 	ldrb.w	sl, [r1, r9]
 8002e3c:	b2ed      	uxtb	r5, r5
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 8002e3e:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e42:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e44:	ea8a 0a05 	eor.w	sl, sl, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002e48:	f801 a009 	strb.w	sl, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e4c:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e4e:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002e52:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e54:	ea89 0606 	eor.w	r6, r9, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002e58:	f801 6008 	strb.w	r6, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e5c:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002e5e:	f8dd c00c 	ldr.w	ip, [sp, #12]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8002e62:	4075      	eors	r5, r6
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002e64:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002e68:	55cd      	strb	r5, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8002e6a:	f43f af58 	beq.w	8002d1e <Hw_N5110G_DrawCircle+0x13e>
		{ 
			D += (CurX << 2) + 6;
 8002e6e:	eb0c 0583 	add.w	r5, ip, r3, lsl #2
 8002e72:	1dae      	adds	r6, r5, #6
 8002e74:	b2b7      	uxth	r7, r6
 8002e76:	9703      	str	r7, [sp, #12]
 8002e78:	e75a      	b.n	8002d30 <Hw_N5110G_DrawCircle+0x150>
 8002e7a:	bf00      	nop
 8002e7c:	200009a0 	.word	0x200009a0
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 8002e80:	9e06      	ldr	r6, [sp, #24]
 8002e82:	1997      	adds	r7, r2, r6
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 8002e84:	ebc2 0806 	rsb	r8, r2, r6
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 8002e88:	b2bf      	uxth	r7, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 8002e8a:	fa1f f988 	uxth.w	r9, r8
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002e8e:	f007 0b07 	and.w	fp, r7, #7
 8002e92:	9e04      	ldr	r6, [sp, #16]
 8002e94:	fa05 fc0b 	lsl.w	ip, r5, fp
 8002e98:	f009 0507 	and.w	r5, r9, #7
 8002e9c:	fa06 fa05 	lsl.w	sl, r6, r5
 8002ea0:	9d04      	ldr	r5, [sp, #16]
 8002ea2:	f000 0607 	and.w	r6, r0, #7
 8002ea6:	fa05 fb06 	lsl.w	fp, r5, r6
 8002eaa:	f004 0607 	and.w	r6, r4, #7
 8002eae:	40b5      	lsls	r5, r6
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002eb0:	08ff      	lsrs	r7, r7, #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002eb2:	9507      	str	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002eb4:	2554      	movs	r5, #84	; 0x54
 8002eb6:	fb05 f707 	mul.w	r7, r5, r7
 8002eba:	f8dd 8008 	ldr.w	r8, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002ebe:	ea4f 06d9 	mov.w	r6, r9, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ec2:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002ec4:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ec8:	2554      	movs	r5, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002eca:	ea6f 0c0c 	mvn.w	ip, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ece:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002ed2:	fa5f fc8c 	uxtb.w	ip, ip
 8002ed6:	ea09 050c 	and.w	r5, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002eda:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ede:	f8dd 8008 	ldr.w	r8, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002ee2:	ea6f 050a 	mvn.w	r5, sl
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ee6:	44b0      	add	r8, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002ee8:	f811 9008 	ldrb.w	r9, [r1, r8]
 8002eec:	b2ed      	uxtb	r5, r5
 8002eee:	ea09 0a05 	and.w	sl, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002ef2:	f801 a008 	strb.w	sl, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002ef6:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002efa:	ea4f 0ad0 	mov.w	sl, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002efe:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f00:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f04:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f08:	ea09 0c0c 	and.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f0c:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f10:	f04f 0754 	mov.w	r7, #84	; 0x54
 8002f14:	4446      	add	r6, r8
 8002f16:	fb07 fa0a 	mul.w	sl, r7, sl
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 8002f1a:	f8dd 9014 	ldr.w	r9, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f1e:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 8002f20:	eb02 0c09 	add.w	ip, r2, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f24:	fa1f f88c 	uxth.w	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f28:	403d      	ands	r5, r7
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f2a:	558d      	strb	r5, [r1, r6]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8002f2c:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f30:	eb0a 0508 	add.w	r5, sl, r8
 8002f34:	2654      	movs	r6, #84	; 0x54
 8002f36:	fb06 fc07 	mul.w	ip, r6, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f3a:	5d4f      	ldrb	r7, [r1, r5]
 8002f3c:	ea6f 060b 	mvn.w	r6, fp
 8002f40:	b2f6      	uxtb	r6, r6
 8002f42:	4037      	ands	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f44:	554f      	strb	r7, [r1, r5]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f46:	9d07      	ldr	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f48:	44e0      	add	r8, ip
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 8002f4a:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f4e:	f811 9008 	ldrb.w	r9, [r1, r8]
 8002f52:	43ef      	mvns	r7, r5
 8002f54:	b2fd      	uxtb	r5, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 8002f56:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f5a:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f5c:	ea09 0905 	and.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f60:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f64:	44ba      	add	sl, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f66:	f811 800a 	ldrb.w	r8, [r1, sl]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8002f6a:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f6c:	ea08 0606 	and.w	r6, r8, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f70:	f801 600a 	strb.w	r6, [r1, sl]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8002f74:	5dce      	ldrb	r6, [r1, r7]
 8002f76:	4035      	ands	r5, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8002f78:	55cd      	strb	r5, [r1, r7]
 8002f7a:	e6ca      	b.n	8002d12 <Hw_N5110G_DrawCircle+0x132>
			D += ((CurX - CurY) << 2) + 10;
			CurY--;
		}
		CurX++;
	}
}
 8002f7c:	b008      	add	sp, #32
 8002f7e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f82:	4770      	bx	lr

08002f84 <Hw_DMA_Init>:
void Hw_DMA_Init(void)
{
	static u8 Called = 0;


	if( Called == 1 ) return;
 8002f84:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <Hw_DMA_Init+0x20>)
 8002f86:	7813      	ldrb	r3, [r2, #0]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d009      	beq.n	8002fa0 <Hw_DMA_Init+0x1c>


	// 1. Clock Enable
	//
	REG_RCC_AHBENR |= (1<<0);		// DMA1 Clock enable
 8002f8c:	f241 0014 	movw	r0, #4116	; 0x1014
 8002f90:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002f94:	6801      	ldr	r1, [r0, #0]
 8002f96:	f041 0301 	orr.w	r3, r1, #1
 8002f9a:	6003      	str	r3, [r0, #0]
	

	Called = 1;	
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	7010      	strb	r0, [r2, #0]
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000487 	.word	0x20000487

08002fa8 <Hw_DMA_SPI2_Setup>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
 8002fa8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8002fac:	2344      	movs	r3, #68	; 0x44
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8002fae:	274c      	movs	r7, #76	; 0x4c
 8002fb0:	f643 040c 	movw	r4, #14348	; 0x380c
	REG_DMA1_CMAR(4)  = ReadAddress;
 8002fb4:	2650      	movs	r6, #80	; 0x50
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8002fb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002fba:	f04f 0c00 	mov.w	ip, #0
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8002fbe:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002fc2:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(4)  = ReadAddress;
 8002fc6:	f2c4 0602 	movt	r6, #16386	; 0x4002
	REG_DMA1_CNDTR(4) = BufSize;
 8002fca:	2548      	movs	r5, #72	; 0x48
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8002fcc:	f8c3 c000 	str.w	ip, [r3]
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 8002fd0:	f2c4 0502 	movt	r5, #16386	; 0x4002
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8002fd4:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(4)  = ReadAddress;
 8002fd6:	6031      	str	r1, [r6, #0]
	REG_DMA1_CNDTR(4) = BufSize;
	
	
	
	REG_DMA1_CCR(4) = 0
 8002fd8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 8002fdc:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(4) = 0
 8002fde:	6019      	str	r1, [r3, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8002fe0:	f8d3 8000 	ldr.w	r8, [r3]
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 8002fe4:	2158      	movs	r1, #88	; 0x58
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 8002fe6:	2760      	movs	r7, #96	; 0x60
	REG_DMA1_CMAR(5)  = WriteAddress;
 8002fe8:	2664      	movs	r6, #100	; 0x64
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 8002fea:	f2c4 0102 	movt	r1, #16386	; 0x4002
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 8002fee:	255c      	movs	r5, #92	; 0x5c
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8002ff0:	f048 0801 	orr.w	r8, r8, #1
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 8002ff4:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(5)  = WriteAddress;
 8002ff8:	f2c4 0602 	movt	r6, #16386	; 0x4002
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8002ffc:	f8c3 8000 	str.w	r8, [r3]
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 8003000:	f2c4 0502 	movt	r5, #16386	; 0x4002
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 8003004:	f8c1 c000 	str.w	ip, [r1]
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 8003008:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(5)  = WriteAddress;
 800300a:	6030      	str	r0, [r6, #0]
	REG_DMA1_CNDTR(5) = BufSize;
	
	
	
	REG_DMA1_CCR(5) = 0
 800300c:	2090      	movs	r0, #144	; 0x90
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 800300e:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(5) = 0
 8003010:	6008      	str	r0, [r1, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(5) |= (1<<0);	// Channel enable
 8003012:	680a      	ldr	r2, [r1, #0]
 8003014:	f042 0301 	orr.w	r3, r2, #1
 8003018:	600b      	str	r3, [r1, #0]
}
 800301a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800301e:	4770      	bx	lr

08003020 <Hw_DMA_SPI2_IsTransFinished>:
---------------------------------------------------------------------------*/
u8 Hw_DMA_SPI2_IsTransFinished( void )
{
	u8 Ret = 0;
	
	if( REG_DMA1_ISR & (1<<13) )
 8003020:	2300      	movs	r3, #0
 8003022:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 800302c:	d00a      	beq.n	8003044 <Hw_DMA_SPI2_IsTransFinished+0x24>
	{
		if( REG_DMA1_ISR & (1<<17) )
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	f411 3000 	ands.w	r0, r1, #131072	; 0x20000
 8003034:	d006      	beq.n	8003044 <Hw_DMA_SPI2_IsTransFinished+0x24>
		{
			REG_DMA1_IFCR = (1<<17) | (1<<13);
 8003036:	2304      	movs	r3, #4
 8003038:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800303c:	f44f 3208 	mov.w	r2, #139264	; 0x22000
 8003040:	601a      	str	r2, [r3, #0]
			Ret = 1;
 8003042:	2001      	movs	r0, #1
		}
	}
	return Ret;
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop

08003048 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8003048:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <EP1_IN_Callback+0x58>)
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	2a01      	cmp	r2, #1
 8003050:	d000      	beq.n	8003054 <EP1_IN_Callback+0xc>
 8003052:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 8003054:	4c13      	ldr	r4, [pc, #76]	; (80030a4 <EP1_IN_Callback+0x5c>)
 8003056:	6820      	ldr	r0, [r4, #0]
 8003058:	b300      	cbz	r0, 800309c <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800305a:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 800305c:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800305e:	d814      	bhi.n	800308a <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8003060:	6811      	ldr	r1, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 8003062:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 8003064:	1808      	adds	r0, r1, r0
 8003066:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 8003068:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 800306a:	b28b      	uxth	r3, r1
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 800306c:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800306e:	480f      	ldr	r0, [pc, #60]	; (80030ac <EP1_IN_Callback+0x64>)
 8003070:	21c0      	movs	r1, #192	; 0xc0
 8003072:	18c0      	adds	r0, r0, r3
 8003074:	462a      	mov	r2, r5
 8003076:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <EP1_IN_Callback+0x68>)
 8003078:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 800307a:	2001      	movs	r0, #1
 800307c:	4629      	mov	r1, r5
 800307e:	4a0d      	ldr	r2, [pc, #52]	; (80030b4 <EP1_IN_Callback+0x6c>)
 8003080:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 8003082:	2001      	movs	r0, #1
 8003084:	490c      	ldr	r1, [pc, #48]	; (80030b8 <EP1_IN_Callback+0x70>)
 8003086:	4788      	blx	r1
 8003088:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 800308a:	6815      	ldr	r5, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 800308c:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800308e:	f105 0140 	add.w	r1, r5, #64	; 0x40
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8003092:	b2ab      	uxth	r3, r5
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8003094:	6020      	str	r0, [r4, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8003096:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8003098:	2540      	movs	r5, #64	; 0x40
 800309a:	e7e8      	b.n	800306e <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 800309c:	7018      	strb	r0, [r3, #0]
 800309e:	bd38      	pop	{r3, r4, r5, pc}
 80030a0:	200004a8 	.word	0x200004a8
 80030a4:	200004b4 	.word	0x200004b4
 80030a8:	200004b0 	.word	0x200004b0
 80030ac:	20000e00 	.word	0x20000e00
 80030b0:	08004631 	.word	0x08004631
 80030b4:	080048e1 	.word	0x080048e1
 80030b8:	080047a5 	.word	0x080047a5

080030bc <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 80030bc:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 80030be:	f640 5498 	movw	r4, #3480	; 0xd98
 80030c2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80030c6:	f644 13a1 	movw	r3, #18849	; 0x49a1
 80030ca:	4621      	mov	r1, r4
 80030cc:	f6c0 0300 	movt	r3, #2048	; 0x800
 80030d0:	2003      	movs	r0, #3
 80030d2:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 80030d4:	f643 22d1 	movw	r2, #15057	; 0x3ad1
 80030d8:	b2c1      	uxtb	r1, r0
 80030da:	f6c0 0200 	movt	r2, #2048	; 0x800
 80030de:	4620      	mov	r0, r4
 80030e0:	4790      	blx	r2
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 80030e2:	f244 71c9 	movw	r1, #18377	; 0x47c9
 80030e6:	2003      	movs	r0, #3
 80030e8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80030ec:	4788      	blx	r1
 80030ee:	bd10      	pop	{r4, pc}

080030f0 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 80030f0:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <SOF_Callback+0x24>)
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	2805      	cmp	r0, #5
 80030f8:	d000      	beq.n	80030fc <SOF_Callback+0xc>
 80030fa:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <SOF_Callback+0x28>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	1c51      	adds	r1, r2, #1
 8003102:	2a05      	cmp	r2, #5
 8003104:	6019      	str	r1, [r3, #0]
 8003106:	d1f8      	bne.n	80030fa <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8003108:	2000      	movs	r0, #0
 800310a:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <SOF_Callback+0x2c>)
 800310e:	4798      	blx	r3
 8003110:	e7f3      	b.n	80030fa <SOF_Callback+0xa>
 8003112:	bf00      	nop
 8003114:	2000049c 	.word	0x2000049c
 8003118:	20000488 	.word	0x20000488
 800311c:	08003b41 	.word	0x08003b41

08003120 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8003120:	f645 4244 	movw	r2, #23620	; 0x5c44
 8003124:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003128:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800312a:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800312c:	4c8f      	ldr	r4, [pc, #572]	; (800336c <USB_Istr+0x24c>)
 800312e:	b298      	uxth	r0, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8003130:	4d8f      	ldr	r5, [pc, #572]	; (8003370 <USB_Istr+0x250>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8003132:	8020      	strh	r0, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8003134:	8821      	ldrh	r1, [r4, #0]
 8003136:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8003138:	b089      	sub	sp, #36	; 0x24
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800313a:	4019      	ands	r1, r3
 800313c:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8003140:	b281      	uxth	r1, r0
 8003142:	2900      	cmp	r1, #0
 8003144:	d168      	bne.n	8003218 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8003146:	8822      	ldrh	r2, [r4, #0]
 8003148:	f402 4100 	and.w	r1, r2, #32768	; 0x8000
 800314c:	420b      	tst	r3, r1
 800314e:	d15f      	bne.n	8003210 <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8003150:	8822      	ldrh	r2, [r4, #0]
 8003152:	f402 6180 	and.w	r1, r2, #1024	; 0x400
 8003156:	420b      	tst	r3, r1
 8003158:	d14e      	bne.n	80031f8 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 800315a:	8820      	ldrh	r0, [r4, #0]
 800315c:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
 8003160:	4213      	tst	r3, r2
 8003162:	d006      	beq.n	8003172 <USB_Istr+0x52>
  {
    _SetISTR((uint16_t)CLR_ERR);
 8003164:	f645 4044 	movw	r0, #23620	; 0x5c44
 8003168:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800316c:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8003170:	6001      	str	r1, [r0, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8003172:	8822      	ldrh	r2, [r4, #0]
 8003174:	f402 5080 	and.w	r0, r2, #4096	; 0x1000
 8003178:	4203      	tst	r3, r0
 800317a:	d131      	bne.n	80031e0 <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 800317c:	8820      	ldrh	r0, [r4, #0]
 800317e:	f400 6100 	and.w	r1, r0, #2048	; 0x800
 8003182:	420b      	tst	r3, r1
 8003184:	d00e      	beq.n	80031a4 <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 8003186:	4b7b      	ldr	r3, [pc, #492]	; (8003374 <USB_Istr+0x254>)
 8003188:	781a      	ldrb	r2, [r3, #0]
 800318a:	2a00      	cmp	r2, #0
 800318c:	d125      	bne.n	80031da <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 800318e:	2002      	movs	r0, #2
 8003190:	4979      	ldr	r1, [pc, #484]	; (8003378 <USB_Istr+0x258>)
 8003192:	4788      	blx	r1
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8003194:	f645 4244 	movw	r2, #23620	; 0x5c44
 8003198:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800319c:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 80031a0:	882b      	ldrh	r3, [r5, #0]
 80031a2:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 80031a4:	8820      	ldrh	r0, [r4, #0]
 80031a6:	f400 7280 	and.w	r2, r0, #256	; 0x100
 80031aa:	4213      	tst	r3, r2
 80031ac:	d013      	beq.n	80031d6 <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 80031ae:	f645 4344 	movw	r3, #23620	; 0x5c44
 80031b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 80031b6:	f645 4048 	movw	r0, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 80031ba:	f64f 61ff 	movw	r1, #65279	; 0xfeff
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 80031be:	f2c4 0000 	movt	r0, #16384	; 0x4000

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 80031c2:	6019      	str	r1, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 80031c4:	6802      	ldr	r2, [r0, #0]
 80031c6:	0410      	lsls	r0, r2, #16
 80031c8:	d432      	bmi.n	8003230 <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 80031ca:	4b6c      	ldr	r3, [pc, #432]	; (800337c <USB_Istr+0x25c>)
 80031cc:	2000      	movs	r0, #0
 80031ce:	6018      	str	r0, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 80031d0:	2007      	movs	r0, #7
 80031d2:	4b69      	ldr	r3, [pc, #420]	; (8003378 <USB_Istr+0x258>)
 80031d4:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 80031d6:	b009      	add	sp, #36	; 0x24
 80031d8:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 80031da:	4869      	ldr	r0, [pc, #420]	; (8003380 <USB_Istr+0x260>)
 80031dc:	4780      	blx	r0
 80031de:	e7d9      	b.n	8003194 <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 80031e0:	f645 4344 	movw	r3, #23620	; 0x5c44
 80031e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80031e8:	f64e 71ff 	movw	r1, #61439	; 0xefff
 80031ec:	6019      	str	r1, [r3, #0]
    Resume(RESUME_EXTERNAL);
 80031ee:	2000      	movs	r0, #0
 80031f0:	4a61      	ldr	r2, [pc, #388]	; (8003378 <USB_Istr+0x258>)
 80031f2:	4790      	blx	r2
 80031f4:	882b      	ldrh	r3, [r5, #0]
 80031f6:	e7c1      	b.n	800317c <USB_Istr+0x5c>
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
    Device_Property.Reset();
 80031f8:	4a62      	ldr	r2, [pc, #392]	; (8003384 <USB_Istr+0x264>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 80031fa:	f645 4344 	movw	r3, #23620	; 0x5c44
 80031fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003202:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8003206:	6018      	str	r0, [r3, #0]
    Device_Property.Reset();
 8003208:	6851      	ldr	r1, [r2, #4]
 800320a:	4788      	blx	r1
 800320c:	882b      	ldrh	r3, [r5, #0]
 800320e:	e7a4      	b.n	800315a <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8003210:	485d      	ldr	r0, [pc, #372]	; (8003388 <USB_Istr+0x268>)
 8003212:	4780      	blx	r0
 8003214:	882b      	ldrh	r3, [r5, #0]
 8003216:	e79b      	b.n	8003150 <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8003218:	4b5c      	ldr	r3, [pc, #368]	; (800338c <USB_Istr+0x26c>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 800321a:	f64f 50ff 	movw	r0, #65023	; 0xfdff
 800321e:	6010      	str	r0, [r2, #0]
    bIntPackSOF++;
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	1c51      	adds	r1, r2, #1
 8003224:	b2c8      	uxtb	r0, r1
 8003226:	7018      	strb	r0, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8003228:	4b59      	ldr	r3, [pc, #356]	; (8003390 <USB_Istr+0x270>)
 800322a:	4798      	blx	r3
 800322c:	882b      	ldrh	r3, [r5, #0]
 800322e:	e78a      	b.n	8003146 <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8003230:	4852      	ldr	r0, [pc, #328]	; (800337c <USB_Istr+0x25c>)
 8003232:	6801      	ldr	r1, [r0, #0]
 8003234:	1c4a      	adds	r2, r1, #1
 8003236:	6002      	str	r2, [r0, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8003238:	6801      	ldr	r1, [r0, #0]
 800323a:	2903      	cmp	r1, #3
 800323c:	d9c8      	bls.n	80031d0 <USB_Istr+0xb0>
 800323e:	f645 4240 	movw	r2, #23616	; 0x5c40
 8003242:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003246:	6811      	ldr	r1, [r2, #0]
 8003248:	0709      	lsls	r1, r1, #28
 800324a:	d4c1      	bmi.n	80031d0 <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 800324c:	6815      	ldr	r5, [r2, #0]
 800324e:	4951      	ldr	r1, [pc, #324]	; (8003394 <USB_Istr+0x274>)
 8003250:	b2ad      	uxth	r5, r5
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003252:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8003256:	600d      	str	r5, [r1, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003258:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800325c:	6825      	ldr	r5, [r4, #0]
 800325e:	f645 4404 	movw	r4, #23556	; 0x5c04
 8003262:	b2ad      	uxth	r5, r5
 8003264:	9500      	str	r5, [sp, #0]
 8003266:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800326a:	6825      	ldr	r5, [r4, #0]
 800326c:	f645 4408 	movw	r4, #23560	; 0x5c08
 8003270:	b2ad      	uxth	r5, r5
 8003272:	9501      	str	r5, [sp, #4]
 8003274:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003278:	6825      	ldr	r5, [r4, #0]
 800327a:	f645 440c 	movw	r4, #23564	; 0x5c0c
 800327e:	b2ad      	uxth	r5, r5
 8003280:	9502      	str	r5, [sp, #8]
 8003282:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003286:	6825      	ldr	r5, [r4, #0]
 8003288:	f645 4410 	movw	r4, #23568	; 0x5c10
 800328c:	b2ad      	uxth	r5, r5
 800328e:	9503      	str	r5, [sp, #12]
 8003290:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003294:	6825      	ldr	r5, [r4, #0]
 8003296:	f645 4414 	movw	r4, #23572	; 0x5c14
 800329a:	b2ad      	uxth	r5, r5
 800329c:	9504      	str	r5, [sp, #16]
 800329e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80032a2:	6825      	ldr	r5, [r4, #0]
 80032a4:	f645 4418 	movw	r4, #23576	; 0x5c18
 80032a8:	b2ad      	uxth	r5, r5
 80032aa:	9505      	str	r5, [sp, #20]
 80032ac:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80032b0:	6825      	ldr	r5, [r4, #0]
 80032b2:	f645 441c 	movw	r4, #23580	; 0x5c1c
 80032b6:	b2ad      	uxth	r5, r5
 80032b8:	9506      	str	r5, [sp, #24]
 80032ba:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80032be:	6824      	ldr	r4, [r4, #0]
 80032c0:	b2a4      	uxth	r4, r4
 80032c2:	9407      	str	r4, [sp, #28]
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 80032c4:	680c      	ldr	r4, [r1, #0]
 80032c6:	f044 0401 	orr.w	r4, r4, #1
 80032ca:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 80032cc:	680c      	ldr	r4, [r1, #0]
 80032ce:	b2a4      	uxth	r4, r4
 80032d0:	6014      	str	r4, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 80032d2:	680c      	ldr	r4, [r1, #0]
 80032d4:	f024 0401 	bic.w	r4, r4, #1
 80032d8:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 80032da:	6809      	ldr	r1, [r1, #0]
 80032dc:	b289      	uxth	r1, r1
 80032de:	6011      	str	r1, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	f645 4244 	movw	r2, #23620	; 0x5c44
 80032e6:	0549      	lsls	r1, r1, #21
 80032e8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80032ec:	d5f8      	bpl.n	80032e0 <USB_Istr+0x1c0>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 80032ee:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80032f2:	6013      	str	r3, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 80032f4:	9900      	ldr	r1, [sp, #0]
 80032f6:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80032fa:	b28a      	uxth	r2, r1
 80032fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	9901      	ldr	r1, [sp, #4]
 8003304:	f645 4304 	movw	r3, #23556	; 0x5c04
 8003308:	b28a      	uxth	r2, r1
 800330a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	9902      	ldr	r1, [sp, #8]
 8003312:	f645 4308 	movw	r3, #23560	; 0x5c08
 8003316:	b28a      	uxth	r2, r1
 8003318:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	9903      	ldr	r1, [sp, #12]
 8003320:	f645 430c 	movw	r3, #23564	; 0x5c0c
 8003324:	b28a      	uxth	r2, r1
 8003326:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	9904      	ldr	r1, [sp, #16]
 800332e:	f645 4310 	movw	r3, #23568	; 0x5c10
 8003332:	b28a      	uxth	r2, r1
 8003334:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	9905      	ldr	r1, [sp, #20]
 800333c:	f645 4314 	movw	r3, #23572	; 0x5c14
 8003340:	b28a      	uxth	r2, r1
 8003342:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	9906      	ldr	r1, [sp, #24]
 800334a:	f645 4318 	movw	r3, #23576	; 0x5c18
 800334e:	b28a      	uxth	r2, r1
 8003350:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	9907      	ldr	r1, [sp, #28]
 8003358:	f645 431c 	movw	r3, #23580	; 0x5c1c
 800335c:	b28a      	uxth	r2, r1
 800335e:	f2c4 0300 	movt	r3, #16384	; 0x4000
      
        esof_counter = 0;
 8003362:	2100      	movs	r1, #0
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8003364:	601a      	str	r2, [r3, #0]
      
        esof_counter = 0;
 8003366:	6001      	str	r1, [r0, #0]
 8003368:	e732      	b.n	80031d0 <USB_Istr+0xb0>
 800336a:	bf00      	nop
 800336c:	20000dd8 	.word	0x20000dd8
 8003370:	20001634 	.word	0x20001634
 8003374:	200004a0 	.word	0x200004a0
 8003378:	0800384d 	.word	0x0800384d
 800337c:	20000494 	.word	0x20000494
 8003380:	0800367d 	.word	0x0800367d
 8003384:	20000288 	.word	0x20000288
 8003388:	080049d9 	.word	0x080049d9
 800338c:	20000490 	.word	0x20000490
 8003390:	080030f1 	.word	0x080030f1
 8003394:	2000048c 	.word	0x2000048c

08003398 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <Virtual_Com_Port_SetConfiguration+0x10>)
 800339a:	7a98      	ldrb	r0, [r3, #10]
 800339c:	b110      	cbz	r0, 80033a4 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800339e:	4903      	ldr	r1, [pc, #12]	; (80033ac <Virtual_Com_Port_SetConfiguration+0x14>)
 80033a0:	2205      	movs	r2, #5
 80033a2:	600a      	str	r2, [r1, #0]
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20001610 	.word	0x20001610
 80033ac:	2000049c 	.word	0x2000049c

080033b0 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 80033b0:	f240 439c 	movw	r3, #1180	; 0x49c
 80033b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033b8:	2204      	movs	r2, #4
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop

080033c0 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <Virtual_Com_Port_Status_In+0x10>)
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	2a20      	cmp	r2, #32
 80033c6:	d101      	bne.n	80033cc <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 80033c8:	2000      	movs	r0, #0
 80033ca:	7018      	strb	r0, [r3, #0]
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000498 	.word	0x20000498

080033d4 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop

080033d8 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 80033d8:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 80033da:	b510      	push	{r4, lr}
 80033dc:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 80033de:	d003      	beq.n	80033e8 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 80033e0:	2820      	cmp	r0, #32
 80033e2:	d011      	beq.n	8003408 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 80033e4:	2002      	movs	r0, #2
 80033e6:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80033e8:	4a0f      	ldr	r2, [pc, #60]	; (8003428 <Virtual_Com_Port_Data_Setup+0x50>)
 80033ea:	6813      	ldr	r3, [r2, #0]
 80033ec:	7818      	ldrb	r0, [r3, #0]
 80033ee:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80033f2:	2921      	cmp	r1, #33	; 0x21
 80033f4:	d1f6      	bne.n	80033e4 <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 80033f6:	490d      	ldr	r1, [pc, #52]	; (800342c <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80033f8:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 80033fa:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 80033fc:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80033fe:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8003400:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8003402:	4788      	blx	r1
  return USB_SUCCESS;
 8003404:	4620      	mov	r0, r4
 8003406:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8003408:	4a07      	ldr	r2, [pc, #28]	; (8003428 <Virtual_Com_Port_Data_Setup+0x50>)
 800340a:	6811      	ldr	r1, [r2, #0]
 800340c:	7808      	ldrb	r0, [r1, #0]
 800340e:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8003412:	2921      	cmp	r1, #33	; 0x21
 8003414:	d003      	beq.n	800341e <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8003416:	4a06      	ldr	r2, [pc, #24]	; (8003430 <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8003418:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800341a:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 800341c:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800341e:	4c04      	ldr	r4, [pc, #16]	; (8003430 <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8003420:	4904      	ldr	r1, [pc, #16]	; (8003434 <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 8003422:	7023      	strb	r3, [r4, #0]
 8003424:	e7e8      	b.n	80033f8 <Virtual_Com_Port_Data_Setup+0x20>
 8003426:	bf00      	nop
 8003428:	20001630 	.word	0x20001630
 800342c:	0800346d 	.word	0x0800346d
 8003430:	20000498 	.word	0x20000498
 8003434:	08003485 	.word	0x08003485

08003438 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8003438:	4b07      	ldr	r3, [pc, #28]	; (8003458 <Virtual_Com_Port_NoData_Setup+0x20>)
 800343a:	6819      	ldr	r1, [r3, #0]
 800343c:	780a      	ldrb	r2, [r1, #0]
 800343e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8003442:	2b21      	cmp	r3, #33	; 0x21
 8003444:	d001      	beq.n	800344a <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8003446:	2002      	movs	r0, #2
}
 8003448:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 800344a:	2802      	cmp	r0, #2
 800344c:	d001      	beq.n	8003452 <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 800344e:	2822      	cmp	r0, #34	; 0x22
 8003450:	d1f9      	bne.n	8003446 <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 8003452:	2000      	movs	r0, #0
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20001630 	.word	0x20001630

0800345c <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 800345c:	b109      	cbz	r1, 8003462 <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800345e:	2002      	movs	r0, #2
 8003460:	4770      	bx	lr
  }
  else if (Interface > 1)
 8003462:	2801      	cmp	r0, #1
 8003464:	d8fb      	bhi.n	800345e <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8003466:	4608      	mov	r0, r1
}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop

0800346c <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800346c:	b108      	cbz	r0, 8003472 <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800346e:	4803      	ldr	r0, [pc, #12]	; (800347c <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8003470:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8003472:	4b03      	ldr	r3, [pc, #12]	; (8003480 <Virtual_Com_Port_GetLineCoding+0x14>)
 8003474:	2208      	movs	r2, #8
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	820a      	strh	r2, [r1, #16]
    return NULL;
 800347a:	4770      	bx	lr
 800347c:	20000304 	.word	0x20000304
 8003480:	20001630 	.word	0x20001630

08003484 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8003484:	b108      	cbz	r0, 800348a <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8003486:	4803      	ldr	r0, [pc, #12]	; (8003494 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8003488:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800348a:	4b03      	ldr	r3, [pc, #12]	; (8003498 <Virtual_Com_Port_SetLineCoding+0x14>)
 800348c:	2208      	movs	r2, #8
 800348e:	6819      	ldr	r1, [r3, #0]
 8003490:	820a      	strh	r2, [r1, #16]
    return NULL;
 8003492:	4770      	bx	lr
 8003494:	20000304 	.word	0x20000304
 8003498:	20001630 	.word	0x20001630

0800349c <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 800349c:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 80034a0:	6819      	ldr	r1, [r3, #0]
 80034a2:	78ca      	ldrb	r2, [r1, #3]
  if (wValue0 > 4)
 80034a4:	2a04      	cmp	r2, #4
 80034a6:	d805      	bhi.n	80034b4 <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <Virtual_Com_Port_GetStringDescriptor+0x20>)
 80034aa:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80034ae:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 80034b0:	4790      	blx	r2
 80034b2:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 80034b4:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 80034b6:	bd08      	pop	{r3, pc}
 80034b8:	20001630 	.word	0x20001630
 80034bc:	200002e4 	.word	0x200002e4
 80034c0:	08003ff9 	.word	0x08003ff9

080034c4 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 80034c4:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 80034c6:	f240 2180 	movw	r1, #640	; 0x280
 80034ca:	f643 73f9 	movw	r3, #16377	; 0x3ff9
 80034ce:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80034d2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80034d6:	4798      	blx	r3
}
 80034d8:	bd08      	pop	{r3, pc}
 80034da:	bf00      	nop

080034dc <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 80034dc:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 80034de:	f240 21dc 	movw	r1, #732	; 0x2dc
 80034e2:	f643 73f9 	movw	r3, #16377	; 0x3ff9
 80034e6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80034ea:	f6c0 0300 	movt	r3, #2048	; 0x800
 80034ee:	4798      	blx	r3
}
 80034f0:	bd08      	pop	{r3, pc}
 80034f2:	bf00      	nop

080034f4 <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80034f4:	f241 6230 	movw	r2, #5680	; 0x1630

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 80034f8:	f644 7350 	movw	r3, #20304	; 0x4f50
 80034fc:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8003500:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003504:	6810      	ldr	r0, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8003506:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8003508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800350c:	2400      	movs	r4, #0
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 800350e:	f244 65f9 	movw	r5, #18169	; 0x46f9
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8003512:	7241      	strb	r1, [r0, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8003514:	7284      	strb	r4, [r0, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8003516:	72c4      	strb	r4, [r0, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8003518:	f6c0 0500 	movt	r5, #2048	; 0x800
 800351c:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800351e:	f244 760d 	movw	r6, #18189	; 0x470d
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8003522:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8003524:	f6c0 0600 	movt	r6, #2048	; 0x800
 8003528:	4620      	mov	r0, r4
 800352a:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800352e:	f244 7525 	movw	r5, #18213	; 0x4725
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8003532:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8003534:	f6c0 0500 	movt	r5, #2048	; 0x800
 8003538:	2110      	movs	r1, #16
 800353a:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800353c:	f644 0a79 	movw	sl, #18553	; 0x4879

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8003540:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8003542:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8003546:	2140      	movs	r1, #64	; 0x40
 8003548:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800354a:	f644 0855 	movw	r8, #18517	; 0x4855
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800354e:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8003550:	f6c0 0800 	movt	r8, #2048	; 0x800
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	4620      	mov	r0, r4
  Clear_Status_Out(ENDP0);
 8003558:	f244 77ed 	movw	r7, #18413	; 0x47ed

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800355c:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 800355e:	f6c0 0700 	movt	r7, #2048	; 0x800
 8003562:	4620      	mov	r0, r4
 8003564:	47b8      	blx	r7
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8003566:	f240 2288 	movw	r2, #648	; 0x288
 800356a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800356e:	f644 1901 	movw	r9, #18689	; 0x4901
 8003572:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8003576:	f6c0 0900 	movt	r9, #2048	; 0x800
 800357a:	4620      	mov	r0, r4
 800357c:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 800357e:	f244 73c9 	movw	r3, #18377	; 0x47c9
 8003582:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003586:	4620      	mov	r0, r4
 8003588:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 800358a:	2001      	movs	r0, #1
 800358c:	4621      	mov	r1, r4
 800358e:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8003590:	2001      	movs	r0, #1
 8003592:	21c0      	movs	r1, #192	; 0xc0
 8003594:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8003596:	f244 7765 	movw	r7, #18277	; 0x4765
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800359a:	2001      	movs	r0, #1
 800359c:	2120      	movs	r1, #32
 800359e:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80035a0:	f6c0 0700 	movt	r7, #2048	; 0x800
 80035a4:	2001      	movs	r0, #1
 80035a6:	4621      	mov	r1, r4
 80035a8:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 80035aa:	2002      	movs	r0, #2
 80035ac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80035b0:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 80035b2:	2002      	movs	r0, #2
 80035b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035b8:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 80035ba:	2002      	movs	r0, #2
 80035bc:	4621      	mov	r1, r4
 80035be:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 80035c0:	2002      	movs	r0, #2
 80035c2:	2120      	movs	r1, #32
 80035c4:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 80035c6:	2003      	movs	r0, #3
 80035c8:	4621      	mov	r1, r4
 80035ca:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 80035cc:	2003      	movs	r0, #3
 80035ce:	f44f 7188 	mov.w	r1, #272	; 0x110
 80035d2:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 80035d4:	2003      	movs	r0, #3
 80035d6:	2140      	movs	r1, #64	; 0x40
 80035d8:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 80035da:	2003      	movs	r0, #3
 80035dc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80035e0:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 80035e2:	4621      	mov	r1, r4
 80035e4:	2003      	movs	r0, #3
 80035e6:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 80035e8:	f244 41d5 	movw	r1, #17621	; 0x44d5
 80035ec:	4620      	mov	r0, r4
 80035ee:	f6c0 0100 	movt	r1, #2048	; 0x800
 80035f2:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 80035f4:	f240 409c 	movw	r0, #1180	; 0x49c
 80035f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80035fc:	2201      	movs	r2, #1
 80035fe:	6002      	str	r2, [r0, #0]
 8003600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003604 <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8003604:	f643 33e5 	movw	r3, #15333	; 0x3be5
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8003608:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 800360a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800360e:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 8003610:	f241 6030 	movw	r0, #5680	; 0x1630
 8003614:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003618:	6802      	ldr	r2, [r0, #0]
 800361a:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 800361c:	f243 6141 	movw	r1, #13889	; 0x3641

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8003620:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 8003622:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003626:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8003628:	f644 1375 	movw	r3, #18805	; 0x4975
 800362c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003630:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 8003632:	f240 409c 	movw	r0, #1180	; 0x49c
 8003636:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800363a:	6004      	str	r4, [r0, #0]
 800363c:	bd10      	pop	{r4, pc}
 800363e:	bf00      	nop

08003640 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8003640:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8003642:	f643 23b5 	movw	r3, #15029	; 0x3ab5
 8003646:	2001      	movs	r0, #1
 8003648:	f6c0 0300 	movt	r3, #2048	; 0x800
 800364c:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800364e:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8003652:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8003656:	f241 6234 	movw	r2, #5684	; 0x1634
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800365a:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800365e:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8003660:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8003664:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8003666:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800366a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800366e:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8003670:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 8003672:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8003674:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8003676:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 8003678:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 800367a:	bd38      	pop	{r3, r4, r5, pc}

0800367c <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 800367c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 800367e:	2100      	movs	r1, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8003680:	b083      	sub	sp, #12
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8003682:	f645 4340 	movw	r3, #23616	; 0x5c40

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003686:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 800368a:	9101      	str	r1, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800368c:	f2c4 0300 	movt	r3, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003690:	f2c4 0200 	movt	r2, #16384	; 0x4000
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8003694:	6818      	ldr	r0, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003696:	6814      	ldr	r4, [r2, #0]
 8003698:	4960      	ldr	r1, [pc, #384]	; (800381c <Suspend+0x1a0>)
 800369a:	b2a5      	uxth	r5, r4
 800369c:	f645 4604 	movw	r6, #23556	; 0x5c04
 80036a0:	600d      	str	r5, [r1, #0]
 80036a2:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80036a6:	6837      	ldr	r7, [r6, #0]
 80036a8:	f645 4208 	movw	r2, #23560	; 0x5c08
 80036ac:	b2bc      	uxth	r4, r7
 80036ae:	604c      	str	r4, [r1, #4]
 80036b0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80036b4:	6815      	ldr	r5, [r2, #0]
 80036b6:	f645 460c 	movw	r6, #23564	; 0x5c0c
 80036ba:	b2af      	uxth	r7, r5
 80036bc:	608f      	str	r7, [r1, #8]
 80036be:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80036c2:	6834      	ldr	r4, [r6, #0]
 80036c4:	f645 4210 	movw	r2, #23568	; 0x5c10
 80036c8:	b2a5      	uxth	r5, r4
 80036ca:	60cd      	str	r5, [r1, #12]
 80036cc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80036d0:	6816      	ldr	r6, [r2, #0]
 80036d2:	f645 4714 	movw	r7, #23572	; 0x5c14
 80036d6:	b2b4      	uxth	r4, r6
 80036d8:	610c      	str	r4, [r1, #16]
 80036da:	f2c4 0700 	movt	r7, #16384	; 0x4000
 80036de:	683d      	ldr	r5, [r7, #0]
 80036e0:	f645 4218 	movw	r2, #23576	; 0x5c18
 80036e4:	b2ae      	uxth	r6, r5
 80036e6:	614e      	str	r6, [r1, #20]
 80036e8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80036ec:	6817      	ldr	r7, [r2, #0]
 80036ee:	f645 451c 	movw	r5, #23580	; 0x5c1c
 80036f2:	b2bc      	uxth	r4, r7
 80036f4:	618c      	str	r4, [r1, #24]
 80036f6:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80036fa:	682e      	ldr	r6, [r5, #0]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80036fc:	b282      	uxth	r2, r0
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80036fe:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8003702:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8003706:	4004      	ands	r4, r0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003708:	b2b7      	uxth	r7, r6
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800370a:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800370e:	f042 0601 	orr.w	r6, r2, #1
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8003712:	f645 4044 	movw	r0, #23620	; 0x5c44
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003716:	61cf      	str	r7, [r1, #28]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8003718:	f2c4 0000 	movt	r0, #16384	; 0x4000
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800371c:	601a      	str	r2, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800371e:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8003720:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8003722:	6802      	ldr	r2, [r0, #0]
 8003724:	f645 4344 	movw	r3, #23620	; 0x5c44
 8003728:	0552      	lsls	r2, r2, #21
 800372a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800372e:	d5f8      	bpl.n	8003722 <Suspend+0xa6>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8003730:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8003734:	6018      	str	r0, [r3, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8003736:	6808      	ldr	r0, [r1, #0]
 8003738:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800373c:	b280      	uxth	r0, r0
 800373e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003742:	6010      	str	r0, [r2, #0]
 8003744:	6848      	ldr	r0, [r1, #4]
 8003746:	f645 4204 	movw	r2, #23556	; 0x5c04
 800374a:	b280      	uxth	r0, r0
 800374c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003750:	6010      	str	r0, [r2, #0]
 8003752:	6888      	ldr	r0, [r1, #8]
 8003754:	f645 4208 	movw	r2, #23560	; 0x5c08
 8003758:	b280      	uxth	r0, r0
 800375a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800375e:	6010      	str	r0, [r2, #0]
 8003760:	68c8      	ldr	r0, [r1, #12]
 8003762:	f645 420c 	movw	r2, #23564	; 0x5c0c
 8003766:	b280      	uxth	r0, r0
 8003768:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800376c:	6010      	str	r0, [r2, #0]
 800376e:	6908      	ldr	r0, [r1, #16]
 8003770:	f645 4210 	movw	r2, #23568	; 0x5c10
 8003774:	b280      	uxth	r0, r0
 8003776:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800377a:	6010      	str	r0, [r2, #0]
 800377c:	6948      	ldr	r0, [r1, #20]
 800377e:	f645 4214 	movw	r2, #23572	; 0x5c14
 8003782:	b280      	uxth	r0, r0
 8003784:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003788:	6010      	str	r0, [r2, #0]
 800378a:	6988      	ldr	r0, [r1, #24]
 800378c:	f645 4218 	movw	r2, #23576	; 0x5c18
 8003790:	b280      	uxth	r0, r0
 8003792:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003796:	6010      	str	r0, [r2, #0]
 8003798:	69c8      	ldr	r0, [r1, #28]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800379a:	f645 4240 	movw	r2, #23616	; 0x5c40
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 800379e:	f645 411c 	movw	r1, #23580	; 0x5c1c
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 80037a2:	f2c4 0200 	movt	r2, #16384	; 0x4000
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 80037a6:	b280      	uxth	r0, r0
 80037a8:	f2c4 0100 	movt	r1, #16384	; 0x4000
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 80037ac:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 80037b0:	6008      	str	r0, [r1, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 80037b2:	6014      	str	r4, [r2, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 80037b4:	6810      	ldr	r0, [r2, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80037b6:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 80037ba:	b284      	uxth	r4, r0
 80037bc:	f044 0004 	orr.w	r0, r4, #4
 80037c0:	6010      	str	r0, [r2, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80037c2:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80037c6:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80037c8:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80037cc:	9001      	str	r0, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 80037ce:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80037d0:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 80037d4:	f020 0003 	bic.w	r0, r0, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 80037d8:	f040 0001 	orr.w	r0, r0, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 80037dc:	6008      	str	r0, [r1, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	f040 0004 	orr.w	r0, r0, #4
 80037e4:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	04c0      	lsls	r0, r0, #19
 80037ea:	d50f      	bpl.n	800380c <Suspend+0x190>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 80037ec:	f64e 70ff 	movw	r0, #61439	; 0xefff
 80037f0:	6018      	str	r0, [r3, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 80037f2:	6810      	ldr	r0, [r2, #0]
        wCNTR&=~CNTR_FSUSP;
 80037f4:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80037f8:	4003      	ands	r3, r0
        _SetCNTR(wCNTR);
 80037fa:	6013      	str	r3, [r2, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 80037fc:	9a01      	ldr	r2, [sp, #4]
 80037fe:	600a      	str	r2, [r1, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 8003800:	6821      	ldr	r1, [r4, #0]
 8003802:	f021 0004 	bic.w	r0, r1, #4
 8003806:	6020      	str	r0, [r4, #0]
#endif
    }
}
 8003808:	b003      	add	sp, #12
 800380a:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <Suspend+0x1a4>)
 800380e:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 8003810:	6822      	ldr	r2, [r4, #0]
 8003812:	f022 0104 	bic.w	r1, r2, #4
 8003816:	6021      	str	r1, [r4, #0]
 8003818:	e7f6      	b.n	8003808 <Suspend+0x18c>
 800381a:	bf00      	nop
 800381c:	20000de0 	.word	0x20000de0
 8003820:	08003c29 	.word	0x08003c29

08003824 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8003824:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8003826:	f645 4440 	movw	r4, #23616	; 0x5c40
 800382a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800382e:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 8003830:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8003834:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8003836:	f643 10e5 	movw	r0, #14821	; 0x39e5
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 800383a:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800383c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003840:	4780      	blx	r0

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8003842:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 8003846:	6021      	str	r1, [r4, #0]
 8003848:	bd10      	pop	{r4, pc}
 800384a:	bf00      	nop

0800384c <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 800384c:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 800384e:	4c2b      	ldr	r4, [pc, #172]	; (80038fc <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8003850:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 8003852:	bf18      	it	ne
 8003854:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 8003856:	7823      	ldrb	r3, [r4, #0]
 8003858:	2b05      	cmp	r3, #5
 800385a:	d819      	bhi.n	8003890 <Resume+0x44>
 800385c:	e8df f003 	tbb	[pc, r3]
 8003860:	2f2a221b 	.word	0x2f2a221b
 8003864:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8003866:	7860      	ldrb	r0, [r4, #1]
 8003868:	1e41      	subs	r1, r0, #1
 800386a:	b2ca      	uxtb	r2, r1
 800386c:	7062      	strb	r2, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800386e:	7863      	ldrb	r3, [r4, #1]
 8003870:	b983      	cbnz	r3, 8003894 <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 8003872:	f645 4240 	movw	r2, #23616	; 0x5c40
 8003876:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800387a:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 800387c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003880:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 8003882:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 8003884:	4a1d      	ldr	r2, [pc, #116]	; (80038fc <Resume+0xb0>)
        remotewakeupon = 0;
 8003886:	491e      	ldr	r1, [pc, #120]	; (8003900 <Resume+0xb4>)
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 8003888:	2006      	movs	r0, #6
 800388a:	7010      	strb	r0, [r2, #0]
        remotewakeupon = 0;
 800388c:	600b      	str	r3, [r1, #0]
 800388e:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8003890:	2106      	movs	r1, #6
 8003892:	7021      	strb	r1, [r4, #0]
 8003894:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 8003896:	4a1a      	ldr	r2, [pc, #104]	; (8003900 <Resume+0xb4>)
 8003898:	6811      	ldr	r1, [r2, #0]
 800389a:	2900      	cmp	r1, #0
 800389c:	d028      	beq.n	80038f0 <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 800389e:	2005      	movs	r0, #5
 80038a0:	7020      	strb	r0, [r4, #0]
 80038a2:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 80038a4:	4a17      	ldr	r2, [pc, #92]	; (8003904 <Resume+0xb8>)
 80038a6:	4790      	blx	r2
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <Resume+0xb4>)
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 80038aa:	2104      	movs	r1, #4
      remotewakeupon = 1;
 80038ac:	2001      	movs	r0, #1
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 80038ae:	7021      	strb	r1, [r4, #0]
      remotewakeupon = 1;
 80038b0:	6018      	str	r0, [r3, #0]
      break;
 80038b2:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 80038b4:	2302      	movs	r3, #2
      ResumeS.eState = RESUME_WAIT;
 80038b6:	2003      	movs	r0, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 80038b8:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 80038ba:	7020      	strb	r0, [r4, #0]
      break;
 80038bc:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 80038be:	7862      	ldrb	r2, [r4, #1]
 80038c0:	1e51      	subs	r1, r2, #1
 80038c2:	b2cb      	uxtb	r3, r1
 80038c4:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 80038c6:	7860      	ldrb	r0, [r4, #1]
 80038c8:	2800      	cmp	r0, #0
 80038ca:	d1e3      	bne.n	8003894 <Resume+0x48>
        ResumeS.eState = RESUME_START;
 80038cc:	490b      	ldr	r1, [pc, #44]	; (80038fc <Resume+0xb0>)
 80038ce:	2204      	movs	r2, #4
 80038d0:	700a      	strb	r2, [r1, #0]
 80038d2:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 80038d4:	f645 4340 	movw	r3, #23616	; 0x5c40
 80038d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80038dc:	6818      	ldr	r0, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 80038de:	b282      	uxth	r2, r0
 80038e0:	f042 0110 	orr.w	r1, r2, #16
 80038e4:	6019      	str	r1, [r3, #0]
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 80038e6:	200a      	movs	r0, #10
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 80038e8:	2305      	movs	r3, #5
 80038ea:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 80038ec:	7060      	strb	r0, [r4, #1]
      break;
 80038ee:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <Resume+0xb8>)
 80038f2:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 80038f4:	2206      	movs	r2, #6
 80038f6:	7022      	strb	r2, [r4, #0]
 80038f8:	bd10      	pop	{r4, pc}
 80038fa:	bf00      	nop
 80038fc:	20000ddc 	.word	0x20000ddc
 8003900:	200004a4 	.word	0x200004a4
 8003904:	08003825 	.word	0x08003825

08003908 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8003908:	f240 4314 	movw	r3, #1044	; 0x414
 800390c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003910:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	4770      	bx	lr

08003918 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8003918:	b470      	push	{r4, r5, r6}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800391a:	b38a      	cbz	r2, 8003980 <IntToUnicode+0x68>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800391c:	1e56      	subs	r6, r2, #1
 800391e:	b2f2      	uxtb	r2, r6
 8003920:	1c53      	adds	r3, r2, #1
 8003922:	005e      	lsls	r6, r3, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003924:	0f03      	lsrs	r3, r0, #28
 8003926:	1eb2      	subs	r2, r6, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003928:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 800392a:	2b09      	cmp	r3, #9
 800392c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8003930:	d928      	bls.n	8003984 <IntToUnicode+0x6c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8003932:	3337      	adds	r3, #55	; 0x37
 8003934:	700b      	strb	r3, [r1, #0]
 8003936:	2302      	movs	r3, #2
    }
    
    value = value << 4;
 8003938:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800393a:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800393c:	704c      	strb	r4, [r1, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800393e:	d01f      	beq.n	8003980 <IntToUnicode+0x68>
 8003940:	b152      	cbz	r2, 8003958 <IntToUnicode+0x40>
  {
    if( ((value >> 28)) < 0xA )
 8003942:	0f02      	lsrs	r2, r0, #28
 8003944:	2a09      	cmp	r2, #9
 8003946:	d913      	bls.n	8003970 <IntToUnicode+0x58>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8003948:	3237      	adds	r2, #55	; 0x37
 800394a:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800394c:	18ca      	adds	r2, r1, r3
 800394e:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8003950:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003952:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003954:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003956:	d013      	beq.n	8003980 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8003958:	0f05      	lsrs	r5, r0, #28
 800395a:	2d09      	cmp	r5, #9
 800395c:	d815      	bhi.n	800398a <IntToUnicode+0x72>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800395e:	3530      	adds	r5, #48	; 0x30
 8003960:	54cd      	strb	r5, [r1, r3]
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8003962:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003964:	0f02      	lsrs	r2, r0, #28
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8003966:	18cd      	adds	r5, r1, r3
 8003968:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 800396a:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800396c:	706c      	strb	r4, [r5, #1]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 800396e:	d8eb      	bhi.n	8003948 <IntToUnicode+0x30>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8003970:	3230      	adds	r2, #48	; 0x30
 8003972:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8003974:	18ca      	adds	r2, r1, r3
 8003976:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8003978:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800397a:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800397c:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800397e:	d1eb      	bne.n	8003958 <IntToUnicode+0x40>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8003980:	bc70      	pop	{r4, r5, r6}
 8003982:	4770      	bx	lr
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8003984:	3330      	adds	r3, #48	; 0x30
 8003986:	700b      	strb	r3, [r1, #0]
 8003988:	e7d5      	b.n	8003936 <IntToUnicode+0x1e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800398a:	3537      	adds	r5, #55	; 0x37
 800398c:	54cd      	strb	r5, [r1, r3]
 800398e:	e7e8      	b.n	8003962 <IntToUnicode+0x4a>

08003990 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8003990:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 8003992:	f243 1321 	movw	r3, #12577	; 0x3121
 8003996:	f6c0 0300 	movt	r3, #2048	; 0x800
 800399a:	4798      	blx	r3
 800399c:	bd08      	pop	{r3, pc}
 800399e:	bf00      	nop

080039a0 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 80039a0:	f241 0304 	movw	r3, #4100	; 0x1004
 80039a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	f422 0070 	bic.w	r0, r2, #15728640	; 0xf00000
 80039ae:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 80039b0:	6819      	ldr	r1, [r3, #0]
 80039b2:	f441 1200 	orr.w	r2, r1, #2097152	; 0x200000
 80039b6:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	6018      	str	r0, [r3, #0]
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop

080039c0 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 80039c0:	f241 0204 	movw	r2, #4100	; 0x1004
 80039c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80039c8:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 80039ca:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 80039ce:	f421 0080 	bic.w	r0, r1, #4194304	; 0x400000
 80039d2:	6010      	str	r0, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 80039d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	f442 0100 	orr.w	r1, r2, #8388608	; 0x800000
 80039de:	6019      	str	r1, [r3, #0]
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop

080039e4 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <Leave_LowPowerMode+0x18>)
 80039e6:	7a98      	ldrb	r0, [r3, #10]
 80039e8:	b918      	cbnz	r0, 80039f2 <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 80039ea:	4905      	ldr	r1, [pc, #20]	; (8003a00 <Leave_LowPowerMode+0x1c>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	600a      	str	r2, [r1, #0]
 80039f0:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 80039f2:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <Leave_LowPowerMode+0x1c>)
 80039f4:	2005      	movs	r0, #5
 80039f6:	6018      	str	r0, [r3, #0]
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20001610 	.word	0x20001610
 8003a00:	2000049c 	.word	0x2000049c

08003a04 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8003a04:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8003a08:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8003a0a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003a0e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8003a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8003a16:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8003a18:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003a1c:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8003a1e:	f240 4404 	movw	r4, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8003a22:	f420 2580 	bic.w	r5, r0, #262144	; 0x40000
 8003a26:	601d      	str	r5, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8003a28:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003a2c:	6822      	ldr	r2, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8003a2e:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 8003a32:	f422 2080 	bic.w	r0, r2, #262144	; 0x40000
 8003a36:	6020      	str	r0, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8003a38:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8003a3c:	680c      	ldr	r4, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8003a3e:	f240 450c 	movw	r5, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8003a42:	f444 2280 	orr.w	r2, r4, #262144	; 0x40000
 8003a46:	600a      	str	r2, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8003a48:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8003a4c:	6829      	ldr	r1, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003a4e:	f641 04b5 	movw	r4, #6325	; 0x18b5
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8003a52:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 8003a56:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003a58:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003a5a:	f643 1191 	movw	r1, #14737	; 0x3991
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003a5e:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003a62:	2090      	movs	r0, #144	; 0x90
 8003a64:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003a6e:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003a70:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8003a72:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003a76:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003a7a:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8003a7c:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8003a7e:	f442 1180 	orr.w	r1, r2, #1048576	; 0x100000
 8003a82:	6019      	str	r1, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8003a84:	f643 1109 	movw	r1, #14601	; 0x3909
 8003a88:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8003a90:	f24e 1004 	movw	r0, #57604	; 0xe104
 8003a94:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8003a98:	6802      	ldr	r2, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8003a9a:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8003a9e:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 8003aa2:	6001      	str	r1, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8003aa4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f440 2280 	orr.w	r2, r0, #262144	; 0x40000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	bd38      	pop	{r3, r4, r5, pc}
 8003ab2:	bf00      	nop

08003ab4 <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8003ab4:	f241 030c 	movw	r3, #4108	; 0x100c
 8003ab8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003abc:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 8003abe:	b918      	cbnz	r0, 8003ac8 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8003ac0:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 8003ac4:	6018      	str	r0, [r3, #0]
 8003ac6:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8003ac8:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003acc:	6019      	str	r1, [r3, #0]
 8003ace:	4770      	bx	lr

08003ad0 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8003ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003ad4:	460f      	mov	r7, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	4605      	mov	r5, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003ada:	b361      	cbz	r1, 8003b36 <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003adc:	7803      	ldrb	r3, [r0, #0]
 8003ade:	1e4a      	subs	r2, r1, #1
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003ae0:	2005      	movs	r0, #5
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003ae2:	2401      	movs	r4, #1
 8003ae4:	4e15      	ldr	r6, [pc, #84]	; (8003b3c <USB_To_USART_Send_Data+0x6c>)
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003ae6:	f10d 0107 	add.w	r1, sp, #7
 8003aea:	ea02 0804 	and.w	r8, r2, r4
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003aee:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003af2:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003af4:	42bc      	cmp	r4, r7
 8003af6:	d21e      	bcs.n	8003b36 <USB_To_USART_Send_Data+0x66>
 8003af8:	f1b8 0f00 	cmp.w	r8, #0
 8003afc:	d009      	beq.n	8003b12 <USB_To_USART_Send_Data+0x42>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003afe:	786b      	ldrb	r3, [r5, #1]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003b00:	2005      	movs	r0, #5
 8003b02:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003b06:	2402      	movs	r4, #2
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003b08:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003b0c:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003b0e:	42bc      	cmp	r4, r7
 8003b10:	d211      	bcs.n	8003b36 <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003b12:	5d2a      	ldrb	r2, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003b14:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003b18:	3401      	adds	r4, #1
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003b1a:	2005      	movs	r0, #5
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003b1c:	f88d 2007 	strb.w	r2, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003b20:	47b0      	blx	r6
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003b22:	5d2b      	ldrb	r3, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003b24:	2005      	movs	r0, #5
 8003b26:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003b2a:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003b2c:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003b30:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003b32:	42bc      	cmp	r4, r7
 8003b34:	d3ed      	bcc.n	8003b12 <USB_To_USART_Send_Data+0x42>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 8003b36:	b002      	add	sp, #8
 8003b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b3c:	080017a1 	.word	0x080017a1

08003b40 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8003b40:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8003b42:	4c20      	ldr	r4, [pc, #128]	; (8003bc4 <Handle_USBAsynchXfer+0x84>)
 8003b44:	7823      	ldrb	r3, [r4, #0]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d023      	beq.n	8003b92 <Handle_USBAsynchXfer+0x52>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8003b4a:	4d1f      	ldr	r5, [pc, #124]	; (8003bc8 <Handle_USBAsynchXfer+0x88>)
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b52:	d02c      	beq.n	8003bae <Handle_USBAsynchXfer+0x6e>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <Handle_USBAsynchXfer+0x8c>)
 8003b56:	6811      	ldr	r1, [r2, #0]
 8003b58:	428b      	cmp	r3, r1
 8003b5a:	d02f      	beq.n	8003bbc <Handle_USBAsynchXfer+0x7c>
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8003b5c:	d81a      	bhi.n	8003b94 <Handle_USBAsynchXfer+0x54>
 8003b5e:	b298      	uxth	r0, r3
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8003b60:	1ace      	subs	r6, r1, r3
 8003b62:	4a1b      	ldr	r2, [pc, #108]	; (8003bd0 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003b64:	2e40      	cmp	r6, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8003b66:	6016      	str	r6, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003b68:	d91b      	bls.n	8003ba2 <Handle_USBAsynchXfer+0x62>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8003b6a:	3e40      	subs	r6, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8003b6c:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8003b6e:	6016      	str	r6, [r2, #0]
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8003b70:	602b      	str	r3, [r5, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8003b72:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8003b74:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8003b76:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8003b78:	1818      	adds	r0, r3, r0
 8003b7a:	4632      	mov	r2, r6
 8003b7c:	21c0      	movs	r1, #192	; 0xc0
 8003b7e:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8003b80:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8003b82:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 8003b84:	4628      	mov	r0, r5
 8003b86:	4631      	mov	r1, r6
 8003b88:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <Handle_USBAsynchXfer+0x9c>)
 8003b8a:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	4914      	ldr	r1, [pc, #80]	; (8003be0 <Handle_USBAsynchXfer+0xa0>)
 8003b90:	4788      	blx	r1
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8003b94:	f5c3 6600 	rsb	r6, r3, #2048	; 0x800
 8003b98:	4a0d      	ldr	r2, [pc, #52]	; (8003bd0 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003b9a:	2e40      	cmp	r6, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8003b9c:	6016      	str	r6, [r2, #0]
 8003b9e:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003ba0:	d8e3      	bhi.n	8003b6a <Handle_USBAsynchXfer+0x2a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 8003ba2:	18f1      	adds	r1, r6, r3
 8003ba4:	6029      	str	r1, [r5, #0]
      USART_Rx_length = 0;
 8003ba6:	2500      	movs	r5, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 8003ba8:	b2b6      	uxth	r6, r6
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8003baa:	6015      	str	r5, [r2, #0]
 8003bac:	e7e2      	b.n	8003b74 <Handle_USBAsynchXfer+0x34>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8003bae:	4907      	ldr	r1, [pc, #28]	; (8003bcc <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8003bb0:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8003bb2:	6809      	ldr	r1, [r1, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8003bb4:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8003bb6:	b109      	cbz	r1, 8003bbc <Handle_USBAsynchXfer+0x7c>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	e7d1      	b.n	8003b60 <Handle_USBAsynchXfer+0x20>
    {
      USB_Tx_State = 0; 
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	7020      	strb	r0, [r4, #0]
      return;
 8003bc0:	bd70      	pop	{r4, r5, r6, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200004a8 	.word	0x200004a8
 8003bc8:	200004b0 	.word	0x200004b0
 8003bcc:	200004ac 	.word	0x200004ac
 8003bd0:	200004b4 	.word	0x200004b4
 8003bd4:	20000e00 	.word	0x20000e00
 8003bd8:	08004631 	.word	0x08004631
 8003bdc:	080048e1 	.word	0x080048e1
 8003be0:	080047a5 	.word	0x080047a5

08003be4 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 8003be4:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8003be6:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 8003bea:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8003bee:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 8003bf2:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8003bf6:	6810      	ldr	r0, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 8003bf8:	681a      	ldr	r2, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8003bfa:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 8003bfe:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8003c02:	1880      	adds	r0, r0, r2
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8003c04:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8003c06:	d007      	beq.n	8003c18 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8003c08:	4904      	ldr	r1, [pc, #16]	; (8003c1c <Get_SerialNum+0x38>)
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	4d04      	ldr	r5, [pc, #16]	; (8003c20 <Get_SerialNum+0x3c>)
 8003c0e:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8003c10:	4620      	mov	r0, r4
 8003c12:	4904      	ldr	r1, [pc, #16]	; (8003c24 <Get_SerialNum+0x40>)
 8003c14:	2204      	movs	r2, #4
 8003c16:	47a8      	blx	r5
 8003c18:	bd38      	pop	{r3, r4, r5, pc}
 8003c1a:	bf00      	nop
 8003c1c:	2000022e 	.word	0x2000022e
 8003c20:	08003919 	.word	0x08003919
 8003c24:	2000023e 	.word	0x2000023e

08003c28 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8003c28:	bf30      	wfi
 8003c2a:	4770      	bx	lr

08003c2c <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8003c2c:	b508      	push	{r3, lr}
  if (Length == 0)
 8003c2e:	b138      	cbz	r0, 8003c40 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <Standard_GetConfiguration+0x20>)
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	6801      	ldr	r1, [r0, #0]
 8003c36:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_Configuration;
 8003c38:	4a05      	ldr	r2, [pc, #20]	; (8003c50 <Standard_GetConfiguration+0x24>)
 8003c3a:	6810      	ldr	r0, [r2, #0]
 8003c3c:	300a      	adds	r0, #10
}
 8003c3e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <Standard_GetConfiguration+0x24>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	6819      	ldr	r1, [r3, #0]
 8003c46:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8003c48:	bd08      	pop	{r3, pc}
 8003c4a:	bf00      	nop
 8003c4c:	2000162c 	.word	0x2000162c
 8003c50:	20001630 	.word	0x20001630

08003c54 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8003c54:	b508      	push	{r3, lr}
  if (Length == 0)
 8003c56:	b138      	cbz	r0, 8003c68 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <Standard_GetInterface+0x20>)
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	6881      	ldr	r1, [r0, #8]
 8003c5e:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8003c60:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <Standard_GetInterface+0x24>)
 8003c62:	6810      	ldr	r0, [r2, #0]
 8003c64:	300c      	adds	r0, #12
}
 8003c66:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <Standard_GetInterface+0x24>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	6819      	ldr	r1, [r3, #0]
 8003c6e:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8003c70:	bd08      	pop	{r3, pc}
 8003c72:	bf00      	nop
 8003c74:	2000162c 	.word	0x2000162c
 8003c78:	20001630 	.word	0x20001630

08003c7c <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8003c7c:	b508      	push	{r3, lr}
  if (Length == 0)
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d03b      	beq.n	8003cfa <Standard_GetStatus+0x7e>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003c82:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <Standard_GetStatus+0x94>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8003c84:	4823      	ldr	r0, [pc, #140]	; (8003d14 <Standard_GetStatus+0x98>)
 8003c86:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003c88:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8003c8a:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003c8c:	7813      	ldrb	r3, [r2, #0]
 8003c8e:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8003c92:	d112      	bne.n	8003cba <Standard_GetStatus+0x3e>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 8003c94:	7a53      	ldrb	r3, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8003c96:	f003 0220 	and.w	r2, r3, #32
 8003c9a:	b2d1      	uxtb	r1, r2
 8003c9c:	bb59      	cbnz	r1, 8003cf6 <Standard_GetStatus+0x7a>
 8003c9e:	7802      	ldrb	r2, [r0, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	b2d9      	uxtb	r1, r3
 8003ca6:	b311      	cbz	r1, 8003cee <Standard_GetStatus+0x72>
    {
      SetBit(StatusInfo0, 0);
 8003ca8:	f042 0301 	orr.w	r3, r2, #1
 8003cac:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8003cae:	481a      	ldr	r0, [pc, #104]	; (8003d18 <Standard_GetStatus+0x9c>)
 8003cb0:	6801      	ldr	r1, [r0, #0]
 8003cb2:	690a      	ldr	r2, [r1, #16]
 8003cb4:	4790      	blx	r2
  return (uint8_t *)&StatusInfo;
 8003cb6:	4817      	ldr	r0, [pc, #92]	; (8003d14 <Standard_GetStatus+0x98>)
 8003cb8:	bd08      	pop	{r3, pc}
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d016      	beq.n	8003cec <Standard_GetStatus+0x70>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d113      	bne.n	8003cea <Standard_GetStatus+0x6e>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8003cc2:	7951      	ldrb	r1, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8003cc4:	f001 020f 	and.w	r2, r1, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8003cc8:	0093      	lsls	r3, r2, #2
 8003cca:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8003cce:	f502 43b8 	add.w	r3, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8003cd2:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8003cd6:	6819      	ldr	r1, [r3, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8003cd8:	d114      	bne.n	8003d04 <Standard_GetStatus+0x88>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8003cda:	f401 5240 	and.w	r2, r1, #12288	; 0x3000
 8003cde:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003ce2:	d1e4      	bne.n	8003cae <Standard_GetStatus+0x32>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	7001      	strb	r1, [r0, #0]
 8003ce8:	e7e1      	b.n	8003cae <Standard_GetStatus+0x32>
    }

  }
  else
  {
    return NULL;
 8003cea:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 8003cec:	bd08      	pop	{r3, pc}
    {
      SetBit(StatusInfo0, 0);
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	7002      	strb	r2, [r0, #0]
 8003cf4:	e7db      	b.n	8003cae <Standard_GetStatus+0x32>
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	e7d2      	b.n	8003ca0 <Standard_GetStatus+0x24>
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <Standard_GetStatus+0x94>)
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	6819      	ldr	r1, [r3, #0]
 8003d00:	820a      	strh	r2, [r1, #16]
    return 0;
 8003d02:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8003d04:	f001 0330 	and.w	r3, r1, #48	; 0x30
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d1d0      	bne.n	8003cae <Standard_GetStatus+0x32>
 8003d0c:	e7ea      	b.n	8003ce4 <Standard_GetStatus+0x68>
 8003d0e:	bf00      	nop
 8003d10:	20001630 	.word	0x20001630
 8003d14:	20001600 	.word	0x20001600
 8003d18:	2000162c 	.word	0x2000162c

08003d1c <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8003d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8003d20:	4e27      	ldr	r6, [pc, #156]	; (8003dc0 <DataStageIn+0xa4>)
 8003d22:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8003d24:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 8003d26:	7a27      	ldrb	r7, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8003d28:	b923      	cbnz	r3, 8003d34 <DataStageIn+0x18>
 8003d2a:	2f04      	cmp	r7, #4
 8003d2c:	d02a      	beq.n	8003d84 <DataStageIn+0x68>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8003d2e:	8aa5      	ldrh	r5, [r4, #20]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8003d30:	2704      	movs	r7, #4
 8003d32:	e003      	b.n	8003d3c <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8003d34:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8003d36:	42ab      	cmp	r3, r5
 8003d38:	d9fa      	bls.n	8003d30 <DataStageIn+0x14>
 8003d3a:	2702      	movs	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8003d3c:	429d      	cmp	r5, r3
 8003d3e:	bf28      	it	cs
 8003d40:	461d      	movcs	r5, r3
 8003d42:	69a1      	ldr	r1, [r4, #24]
 8003d44:	4628      	mov	r0, r5
 8003d46:	4788      	blx	r1
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8003d48:	4a1e      	ldr	r2, [pc, #120]	; (8003dc4 <DataStageIn+0xa8>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8003d4a:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	4790      	blx	r2
 8003d50:	462a      	mov	r2, r5
 8003d52:	4601      	mov	r1, r0
 8003d54:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <DataStageIn+0xac>)
 8003d56:	4640      	mov	r0, r8
 8003d58:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	4a1b      	ldr	r2, [pc, #108]	; (8003dcc <DataStageIn+0xb0>)
 8003d60:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 8003d62:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8003d64:	8a61      	ldrh	r1, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8003d66:	1b43      	subs	r3, r0, r5
 8003d68:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8003d6a:	186d      	adds	r5, r5, r1
  vSetEPTxStatus(EP_TX_VALID);
 8003d6c:	4818      	ldr	r0, [pc, #96]	; (8003dd0 <DataStageIn+0xb4>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8003d6e:	4b19      	ldr	r3, [pc, #100]	; (8003dd4 <DataStageIn+0xb8>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8003d70:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8003d72:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8003d74:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003d78:	6834      	ldr	r4, [r6, #0]

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8003d7a:	8002      	strh	r2, [r0, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8003d7c:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8003d7e:	7227      	strb	r7, [r4, #8]
 8003d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8003d84:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <DataStageIn+0xbc>)
 8003d86:	7810      	ldrb	r0, [r2, #0]
 8003d88:	2801      	cmp	r0, #1
 8003d8a:	d006      	beq.n	8003d9a <DataStageIn+0x7e>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8003d8c:	4910      	ldr	r1, [pc, #64]	; (8003dd0 <DataStageIn+0xb4>)
 8003d8e:	2710      	movs	r7, #16
 8003d90:	800f      	strh	r7, [r1, #0]
 8003d92:	2707      	movs	r7, #7
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8003d94:	7227      	strb	r7, [r4, #8]
 8003d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8003d9a:	f645 4050 	movw	r0, #23632	; 0x5c50
 8003d9e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003da2:	6800      	ldr	r0, [r0, #0]
 8003da4:	f243 0102 	movw	r1, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8003da8:	b280      	uxth	r0, r0
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8003daa:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003dae:	1841      	adds	r1, r0, r1
 8003db0:	0048      	lsls	r0, r1, #1
 8003db2:	4907      	ldr	r1, [pc, #28]	; (8003dd0 <DataStageIn+0xb4>)
 8003db4:	6003      	str	r3, [r0, #0]
 8003db6:	2030      	movs	r0, #48	; 0x30
 8003db8:	8008      	strh	r0, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8003dba:	7013      	strb	r3, [r2, #0]
 8003dbc:	e7df      	b.n	8003d7e <DataStageIn+0x62>
 8003dbe:	bf00      	nop
 8003dc0:	20001630 	.word	0x20001630
 8003dc4:	080048a1 	.word	0x080048a1
 8003dc8:	08004631 	.word	0x08004631
 8003dcc:	080048e1 	.word	0x080048e1
 8003dd0:	20001638 	.word	0x20001638
 8003dd4:	20001636 	.word	0x20001636
 8003dd8:	200004b8 	.word	0x200004b8

08003ddc <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8003ddc:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8003dde:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <Standard_SetConfiguration+0x30>)
 8003de0:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <Standard_SetConfiguration+0x34>)
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	7851      	ldrb	r1, [r2, #1]
 8003de6:	78c3      	ldrb	r3, [r0, #3]
 8003de8:	4299      	cmp	r1, r3
 8003dea:	d201      	bcs.n	8003df0 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 8003dec:	2002      	movs	r0, #2
  }
}
 8003dee:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8003df0:	7882      	ldrb	r2, [r0, #2]
 8003df2:	2a00      	cmp	r2, #0
 8003df4:	d1fa      	bne.n	8003dec <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8003df6:	8884      	ldrh	r4, [r0, #4]
 8003df8:	2c00      	cmp	r4, #0
 8003dfa:	d1f7      	bne.n	8003dec <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8003dfc:	7283      	strb	r3, [r0, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8003dfe:	4805      	ldr	r0, [pc, #20]	; (8003e14 <Standard_SetConfiguration+0x38>)
 8003e00:	6801      	ldr	r1, [r0, #0]
 8003e02:	684b      	ldr	r3, [r1, #4]
 8003e04:	4798      	blx	r3
    return USB_SUCCESS;
 8003e06:	4620      	mov	r0, r4
 8003e08:	bd10      	pop	{r4, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20001630 	.word	0x20001630
 8003e10:	2000030c 	.word	0x2000030c
 8003e14:	2000162c 	.word	0x2000162c

08003e18 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8003e18:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8003e1a:	4a10      	ldr	r2, [pc, #64]	; (8003e5c <Standard_SetInterface+0x44>)
 8003e1c:	4c10      	ldr	r4, [pc, #64]	; (8003e60 <Standard_SetInterface+0x48>)
 8003e1e:	6811      	ldr	r1, [r2, #0]
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	698a      	ldr	r2, [r1, #24]
 8003e24:	7958      	ldrb	r0, [r3, #5]
 8003e26:	78d9      	ldrb	r1, [r3, #3]
 8003e28:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	7a99      	ldrb	r1, [r3, #10]
 8003e2e:	b909      	cbnz	r1, 8003e34 <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8003e30:	2002      	movs	r0, #2
}
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d1fb      	bne.n	8003e30 <Standard_SetInterface+0x18>
 8003e38:	7918      	ldrb	r0, [r3, #4]
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	d1f8      	bne.n	8003e30 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 8003e3e:	789d      	ldrb	r5, [r3, #2]
 8003e40:	2d00      	cmp	r5, #0
 8003e42:	d1f5      	bne.n	8003e30 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8003e44:	4a07      	ldr	r2, [pc, #28]	; (8003e64 <Standard_SetInterface+0x4c>)
 8003e46:	6813      	ldr	r3, [r2, #0]
 8003e48:	68d9      	ldr	r1, [r3, #12]
 8003e4a:	4788      	blx	r1
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003e4c:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8003e4e:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003e50:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8003e52:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003e54:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8003e56:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8003e58:	bd38      	pop	{r3, r4, r5, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20001608 	.word	0x20001608
 8003e60:	20001630 	.word	0x20001630
 8003e64:	2000162c 	.word	0x2000162c

08003e68 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8003e68:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8003e6a:	4b35      	ldr	r3, [pc, #212]	; (8003f40 <Standard_ClearFeature+0xd8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003e70:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8003e74:	d003      	beq.n	8003e7e <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8003e76:	2802      	cmp	r0, #2
 8003e78:	d006      	beq.n	8003e88 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 8003e7a:	2002      	movs	r0, #2
}
 8003e7c:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8003e7e:	7a59      	ldrb	r1, [r3, #9]
 8003e80:	f021 0220 	bic.w	r2, r1, #32
 8003e84:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8003e86:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8003e88:	885a      	ldrh	r2, [r3, #2]
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	d1f6      	bne.n	8003e7c <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8003e8e:	7919      	ldrb	r1, [r3, #4]
 8003e90:	2900      	cmp	r1, #0
 8003e92:	d1f3      	bne.n	8003e7c <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8003e94:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 8003e96:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8003e9a:	0081      	lsls	r1, r0, #2
 8003e9c:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8003ea0:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8003ea2:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8003ea6:	bf56      	itet	pl
 8003ea8:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8003eaa:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8003eac:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8003eb0:	4c24      	ldr	r4, [pc, #144]	; (8003f44 <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8003eb2:	bf48      	it	mi
 8003eb4:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8003eb8:	7824      	ldrb	r4, [r4, #0]
 8003eba:	42a0      	cmp	r0, r4
 8003ebc:	d2dd      	bcs.n	8003e7a <Standard_ClearFeature+0x12>
 8003ebe:	2d00      	cmp	r5, #0
 8003ec0:	d0db      	beq.n	8003e7a <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8003ec2:	7a9b      	ldrb	r3, [r3, #10]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0d8      	beq.n	8003e7a <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8003ec8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003ecc:	b2d3      	uxtb	r3, r2
 8003ece:	b173      	cbz	r3, 8003eee <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8003ed0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003ed4:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 8003ed8:	6813      	ldr	r3, [r2, #0]
 8003eda:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8003ede:	2910      	cmp	r1, #16
 8003ee0:	d021      	beq.n	8003f26 <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8003ee2:	4819      	ldr	r0, [pc, #100]	; (8003f48 <Standard_ClearFeature+0xe0>)
 8003ee4:	6801      	ldr	r1, [r0, #0]
 8003ee6:	694a      	ldr	r2, [r1, #20]
 8003ee8:	4790      	blx	r2
    return USB_SUCCESS;
 8003eea:	2000      	movs	r0, #0
 8003eec:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8003eee:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003ef2:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 8003ef6:	6822      	ldr	r2, [r4, #0]
 8003ef8:	f402 5340 	and.w	r3, r2, #12288	; 0x3000
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f00:	d1ef      	bne.n	8003ee2 <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 8003f02:	b9c8      	cbnz	r0, 8003f38 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8003f04:	4a11      	ldr	r2, [pc, #68]	; (8003f4c <Standard_ClearFeature+0xe4>)
 8003f06:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <Standard_ClearFeature+0xe8>)
 8003f08:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8003f0c:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8003f0e:	6820      	ldr	r0, [r4, #0]
 8003f10:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 8003f14:	4001      	ands	r1, r0
 8003f16:	f481 5240 	eor.w	r2, r1, #12288	; 0x3000
 8003f1a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003f1e:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8003f22:	6020      	str	r0, [r4, #0]
 8003f24:	e7dd      	b.n	8003ee2 <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 8003f26:	b2c4      	uxtb	r4, r0
 8003f28:	4620      	mov	r0, r4
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <Standard_ClearFeature+0xec>)
 8003f2c:	4790      	blx	r2
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8003f2e:	4620      	mov	r0, r4
 8003f30:	2130      	movs	r1, #48	; 0x30
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <Standard_ClearFeature+0xf0>)
 8003f34:	4798      	blx	r3
 8003f36:	e7d4      	b.n	8003ee2 <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8003f38:	4908      	ldr	r1, [pc, #32]	; (8003f5c <Standard_ClearFeature+0xf4>)
 8003f3a:	4788      	blx	r1
 8003f3c:	e7e7      	b.n	8003f0e <Standard_ClearFeature+0xa6>
 8003f3e:	bf00      	nop
 8003f40:	20001630 	.word	0x20001630
 8003f44:	2000030c 	.word	0x2000030c
 8003f48:	2000162c 	.word	0x2000162c
 8003f4c:	20000288 	.word	0x20000288
 8003f50:	08004901 	.word	0x08004901
 8003f54:	08004831 	.word	0x08004831
 8003f58:	08004725 	.word	0x08004725
 8003f5c:	0800480d 	.word	0x0800480d

08003f60 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8003f60:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 8003f62:	4b22      	ldr	r3, [pc, #136]	; (8003fec <Standard_SetEndPointFeature+0x8c>)
 8003f64:	6819      	ldr	r1, [r3, #0]
 8003f66:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 8003f68:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8003f6c:	0090      	lsls	r0, r2, #2
 8003f6e:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8003f72:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8003f74:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8003f78:	bf56      	itet	pl
 8003f7a:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8003f7c:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8003f7e:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8003f82:	4c1b      	ldr	r4, [pc, #108]	; (8003ff0 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8003f84:	bf48      	it	mi
 8003f86:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8003f8a:	7824      	ldrb	r4, [r4, #0]
 8003f8c:	42a2      	cmp	r2, r4
 8003f8e:	d301      	bcc.n	8003f94 <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8003f90:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 8003f94:	884a      	ldrh	r2, [r1, #2]
 8003f96:	2a00      	cmp	r2, #0
 8003f98:	d1fa      	bne.n	8003f90 <Standard_SetEndPointFeature+0x30>
 8003f9a:	2d00      	cmp	r5, #0
 8003f9c:	d0f8      	beq.n	8003f90 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 8003f9e:	7a89      	ldrb	r1, [r1, #10]
 8003fa0:	2900      	cmp	r1, #0
 8003fa2:	d0f5      	beq.n	8003f90 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8003fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8003fa8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003fac:	f500 42b8 	add.w	r2, r0, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8003fb0:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8003fb2:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8003fb4:	b17b      	cbz	r3, 8003fd6 <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8003fb6:	f648 70bf 	movw	r0, #36799	; 0x8fbf
 8003fba:	4008      	ands	r0, r1
 8003fbc:	f080 0110 	eor.w	r1, r0, #16
 8003fc0:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8003fc4:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8003fc8:	6010      	str	r0, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8003fca:	4a0a      	ldr	r2, [pc, #40]	; (8003ff4 <Standard_SetEndPointFeature+0x94>)
 8003fcc:	6811      	ldr	r1, [r2, #0]
 8003fce:	698b      	ldr	r3, [r1, #24]
 8003fd0:	4798      	blx	r3
  return USB_SUCCESS;
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8003fd6:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8003fda:	400b      	ands	r3, r1
 8003fdc:	f483 5080 	eor.w	r0, r3, #4096	; 0x1000
 8003fe0:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 8003fe4:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e7ee      	b.n	8003fca <Standard_SetEndPointFeature+0x6a>
 8003fec:	20001630 	.word	0x20001630
 8003ff0:	2000030c 	.word	0x2000030c
 8003ff4:	2000162c 	.word	0x2000162c

08003ff8 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <Standard_GetDescriptorData+0x18>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8003ffe:	b110      	cbz	r0, 8004006 <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8004000:	6808      	ldr	r0, [r1, #0]
 8004002:	1880      	adds	r0, r0, r2
}
 8004004:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8004006:	8889      	ldrh	r1, [r1, #4]
 8004008:	1a8a      	subs	r2, r1, r2
 800400a:	821a      	strh	r2, [r3, #16]
    return 0;
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20001630 	.word	0x20001630

08004014 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8004014:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <Post0_Process+0x34>)
 8004018:	2000      	movs	r0, #0
 800401a:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800401e:	4a0b      	ldr	r2, [pc, #44]	; (800404c <Post0_Process+0x38>)
 8004020:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 8004022:	480b      	ldr	r0, [pc, #44]	; (8004050 <Post0_Process+0x3c>)
 8004024:	6801      	ldr	r1, [r0, #0]
 8004026:	7a08      	ldrb	r0, [r1, #8]
 8004028:	2808      	cmp	r0, #8
 800402a:	d106      	bne.n	800403a <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <Post0_Process+0x40>)
 800402e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004032:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8004034:	4a08      	ldr	r2, [pc, #32]	; (8004058 <Post0_Process+0x44>)
 8004036:	2110      	movs	r1, #16
 8004038:	8011      	strh	r1, [r2, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800403a:	f1b0 0c09 	subs.w	ip, r0, #9
 800403e:	f1dc 0000 	rsbs	r0, ip, #0
 8004042:	eb50 000c 	adcs.w	r0, r0, ip
 8004046:	bd08      	pop	{r3, pc}
 8004048:	20000288 	.word	0x20000288
 800404c:	08004901 	.word	0x08004901
 8004050:	20001630 	.word	0x20001630
 8004054:	20001636 	.word	0x20001636
 8004058:	20001638 	.word	0x20001638

0800405c <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800405e:	4d33      	ldr	r5, [pc, #204]	; (800412c <Out0_Process+0xd0>)
 8004060:	682c      	ldr	r4, [r5, #0]
 8004062:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8004064:	2b02      	cmp	r3, #2
 8004066:	d007      	beq.n	8004078 <Out0_Process+0x1c>
 8004068:	2b04      	cmp	r3, #4
 800406a:	d005      	beq.n	8004078 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800406c:	2b03      	cmp	r3, #3
 800406e:	d008      	beq.n	8004082 <Out0_Process+0x26>
 8004070:	2b05      	cmp	r3, #5
 8004072:	d006      	beq.n	8004082 <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8004074:	2b07      	cmp	r3, #7
 8004076:	d00d      	beq.n	8004094 <Out0_Process+0x38>
 8004078:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800407a:	7222      	strb	r2, [r4, #8]

  return Post0_Process();
 800407c:	4b2c      	ldr	r3, [pc, #176]	; (8004130 <Out0_Process+0xd4>)
 800407e:	4798      	blx	r3
 8004080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8004082:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8004084:	8a20      	ldrh	r0, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8004086:	b311      	cbz	r1, 80040ce <Out0_Process+0x72>
 8004088:	b958      	cbnz	r0, 80040a2 <Out0_Process+0x46>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800408a:	8aa4      	ldrh	r4, [r4, #20]
 800408c:	2c00      	cmp	r4, #0
 800408e:	d045      	beq.n	800411c <Out0_Process+0xc0>
 8004090:	4a28      	ldr	r2, [pc, #160]	; (8004134 <Out0_Process+0xd8>)
 8004092:	e02e      	b.n	80040f2 <Out0_Process+0x96>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8004094:	4828      	ldr	r0, [pc, #160]	; (8004138 <Out0_Process+0xdc>)
 8004096:	6801      	ldr	r1, [r0, #0]
 8004098:	68ca      	ldr	r2, [r1, #12]
 800409a:	4790      	blx	r2
 800409c:	682c      	ldr	r4, [r5, #0]
 800409e:	2208      	movs	r2, #8
 80040a0:	e7eb      	b.n	800407a <Out0_Process+0x1e>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 80040a2:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80040a4:	4286      	cmp	r6, r0
 80040a6:	bf28      	it	cs
 80040a8:	4606      	movcs	r6, r0
 80040aa:	4630      	mov	r0, r6
 80040ac:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 80040ae:	8a63      	ldrh	r3, [r4, #18]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80040b0:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 80040b2:	8a20      	ldrh	r0, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80040b4:	18f1      	adds	r1, r6, r3
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 80040b6:	1b82      	subs	r2, r0, r6
 80040b8:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80040ba:	8261      	strh	r1, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80040bc:	4b1f      	ldr	r3, [pc, #124]	; (800413c <Out0_Process+0xe0>)
 80040be:	2000      	movs	r0, #0
 80040c0:	4798      	blx	r3
 80040c2:	4632      	mov	r2, r6
 80040c4:	4601      	mov	r1, r0
 80040c6:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <Out0_Process+0xe4>)
 80040c8:	4638      	mov	r0, r7
 80040ca:	4798      	blx	r3
 80040cc:	8a20      	ldrh	r0, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d0db      	beq.n	800408a <Out0_Process+0x2e>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80040d2:	4b1c      	ldr	r3, [pc, #112]	; (8004144 <Out0_Process+0xe8>)
    SetEPTxCount(ENDP0, 0);
 80040d4:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80040d6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 80040da:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80040dc:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 80040de:	4a1a      	ldr	r2, [pc, #104]	; (8004148 <Out0_Process+0xec>)
 80040e0:	4790      	blx	r2
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80040e2:	8a23      	ldrh	r3, [r4, #16]
 80040e4:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80040e6:	4a13      	ldr	r2, [pc, #76]	; (8004134 <Out0_Process+0xd8>)
 80040e8:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80040ea:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80040ec:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80040ee:	d915      	bls.n	800411c <Out0_Process+0xc0>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 80040f0:	b9c3      	cbnz	r3, 8004124 <Out0_Process+0xc8>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80040f2:	682c      	ldr	r4, [r5, #0]
 80040f4:	2106      	movs	r1, #6
      USB_StatusIn();
 80040f6:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80040fa:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 80040fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004106:	b281      	uxth	r1, r0
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8004108:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800410c:	18c8      	adds	r0, r1, r3
 800410e:	0043      	lsls	r3, r0, #1
 8004110:	2100      	movs	r1, #0
 8004112:	6019      	str	r1, [r3, #0]
 8004114:	2030      	movs	r0, #48	; 0x30
 8004116:	8010      	strh	r0, [r2, #0]
 8004118:	7a22      	ldrb	r2, [r4, #8]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800411a:	e7ae      	b.n	800407a <Out0_Process+0x1e>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 800411c:	682c      	ldr	r4, [r5, #0]
 800411e:	2203      	movs	r2, #3
 8004120:	7222      	strb	r2, [r4, #8]
 8004122:	e7aa      	b.n	800407a <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8004124:	682c      	ldr	r4, [r5, #0]
 8004126:	2205      	movs	r2, #5
 8004128:	7222      	strb	r2, [r4, #8]
 800412a:	e7a6      	b.n	800407a <Out0_Process+0x1e>
 800412c:	20001630 	.word	0x20001630
 8004130:	08004015 	.word	0x08004015
 8004134:	20001638 	.word	0x20001638
 8004138:	20001608 	.word	0x20001608
 800413c:	080048c1 	.word	0x080048c1
 8004140:	080046a9 	.word	0x080046a9
 8004144:	20001636 	.word	0x20001636
 8004148:	080048e1 	.word	0x080048e1

0800414c <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800414c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800414e:	f645 4350 	movw	r3, #23632	; 0x5c50

  if (pInformation->ControlState != PAUSE)
 8004152:	4d9e      	ldr	r5, [pc, #632]	; (80043cc <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004154:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004158:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800415a:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800415c:	f243 0004 	movw	r0, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004160:	b291      	uxth	r1, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004162:	f2c2 0000 	movt	r0, #8192	; 0x2000

  if (pInformation->ControlState != PAUSE)
 8004166:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004168:	180e      	adds	r6, r1, r0
 800416a:	0073      	lsls	r3, r6, #1

  if (pInformation->ControlState != PAUSE)
 800416c:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800416e:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004170:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8004172:	d044      	beq.n	80041fe <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004174:	b2b7      	uxth	r7, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004176:	0078      	lsls	r0, r7, #1
 8004178:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 800417c:	f501 46c0 	add.w	r6, r1, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8004180:	7832      	ldrb	r2, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8004182:	4f93      	ldr	r7, [pc, #588]	; (80043d0 <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8004184:	7022      	strb	r2, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8004186:	7873      	ldrb	r3, [r6, #1]
 8004188:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800418a:	88b0      	ldrh	r0, [r6, #4]
 800418c:	47b8      	blx	r7
 800418e:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8004190:	8930      	ldrh	r0, [r6, #8]
 8004192:	682c      	ldr	r4, [r5, #0]
 8004194:	47b8      	blx	r7
 8004196:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8004198:	89b0      	ldrh	r0, [r6, #12]
 800419a:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 800419c:	2101      	movs	r1, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800419e:	80e0      	strh	r0, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80041a0:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d030      	beq.n	8004208 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 80041a6:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 80041a8:	2906      	cmp	r1, #6
 80041aa:	f000 8087 	beq.w	80042bc <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80041ae:	2900      	cmp	r1, #0
 80041b0:	d15e      	bne.n	8004270 <Setup0_Process+0x124>
 80041b2:	8863      	ldrh	r3, [r4, #2]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8094 	beq.w	80042e2 <Setup0_Process+0x196>
 80041ba:	4e86      	ldr	r6, [pc, #536]	; (80043d4 <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80041bc:	6833      	ldr	r3, [r6, #0]
 80041be:	4608      	mov	r0, r1
 80041c0:	6919      	ldr	r1, [r3, #16]
 80041c2:	4788      	blx	r1
    if (Result == USB_NOT_READY)
 80041c4:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 80041c6:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 80041c8:	d062      	beq.n	8004290 <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80041ca:	8a1a      	ldrh	r2, [r3, #16]
 80041cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041d0:	428a      	cmp	r2, r1
 80041d2:	d05d      	beq.n	8004290 <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80041d4:	2802      	cmp	r0, #2
 80041d6:	d00c      	beq.n	80041f2 <Setup0_Process+0xa6>
 80041d8:	b15a      	cbz	r2, 80041f2 <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 80041da:	f993 1000 	ldrsb.w	r1, [r3]
 80041de:	2900      	cmp	r1, #0
 80041e0:	f2c0 80b5 	blt.w	800434e <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 80041e4:	2203      	movs	r2, #3
 80041e6:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 80041e8:	4b7b      	ldr	r3, [pc, #492]	; (80043d8 <Setup0_Process+0x28c>)
 80041ea:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80041ee:	8018      	strh	r0, [r3, #0]
 80041f0:	e001      	b.n	80041f6 <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80041f2:	2008      	movs	r0, #8
 80041f4:	7218      	strb	r0, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 80041f6:	4b79      	ldr	r3, [pc, #484]	; (80043dc <Setup0_Process+0x290>)
 80041f8:	4798      	blx	r3
}
 80041fa:	b003      	add	sp, #12
 80041fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041fe:	88e0      	ldrh	r0, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8004200:	2101      	movs	r1, #1
 8004202:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 8004204:	2800      	cmp	r0, #0
 8004206:	d1ce      	bne.n	80041a6 <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004208:	7822      	ldrb	r2, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 800420a:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800420c:	f012 037f 	ands.w	r3, r2, #127	; 0x7f
 8004210:	d141      	bne.n	8004296 <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8004212:	2e09      	cmp	r6, #9
 8004214:	f000 8108 	beq.w	8004428 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8004218:	2e05      	cmp	r6, #5
 800421a:	f000 80bf 	beq.w	800439c <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800421e:	2e03      	cmp	r6, #3
 8004220:	f000 80f0 	beq.w	8004404 <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8004224:	2e01      	cmp	r6, #1
 8004226:	d13b      	bne.n	80042a0 <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8004228:	78e1      	ldrb	r1, [r4, #3]
 800422a:	2901      	cmp	r1, #1
 800422c:	d138      	bne.n	80042a0 <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 800422e:	88a2      	ldrh	r2, [r4, #4]
 8004230:	2a00      	cmp	r2, #0
 8004232:	d135      	bne.n	80042a0 <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 8004234:	7a63      	ldrb	r3, [r4, #9]
 8004236:	f003 0420 	and.w	r4, r3, #32
 800423a:	b2e0      	uxtb	r0, r4
 800423c:	2800      	cmp	r0, #0
 800423e:	d02f      	beq.n	80042a0 <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8004240:	4967      	ldr	r1, [pc, #412]	; (80043e0 <Setup0_Process+0x294>)
 8004242:	4788      	blx	r1
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8004244:	bb60      	cbnz	r0, 80042a0 <Setup0_Process+0x154>
 8004246:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8004248:	f645 4050 	movw	r0, #23632	; 0x5c50
 800424c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004250:	6801      	ldr	r1, [r0, #0]
 8004252:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004256:	b28a      	uxth	r2, r1
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8004258:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800425c:	18d0      	adds	r0, r2, r3
 800425e:	0041      	lsls	r1, r0, #1
 8004260:	2300      	movs	r3, #0
 8004262:	4a60      	ldr	r2, [pc, #384]	; (80043e4 <Setup0_Process+0x298>)
 8004264:	600b      	str	r3, [r1, #0]
 8004266:	2030      	movs	r0, #48	; 0x30
 8004268:	2106      	movs	r1, #6
 800426a:	8010      	strh	r0, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800426c:	7221      	strb	r1, [r4, #8]
 800426e:	e7c2      	b.n	80041f6 <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8004270:	2908      	cmp	r1, #8
 8004272:	d148      	bne.n	8004306 <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004274:	7820      	ldrb	r0, [r4, #0]
 8004276:	0643      	lsls	r3, r0, #25
 8004278:	d19f      	bne.n	80041ba <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 800427a:	4a5b      	ldr	r2, [pc, #364]	; (80043e8 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800427c:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800427e:	61a2      	str	r2, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8004280:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8004282:	4790      	blx	r2
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8004284:	682b      	ldr	r3, [r5, #0]
 8004286:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800428a:	8a1a      	ldrh	r2, [r3, #16]
 800428c:	4282      	cmp	r2, r0
 800428e:	d1a3      	bne.n	80041d8 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8004290:	2109      	movs	r1, #9
 8004292:	7219      	strb	r1, [r3, #8]
 8004294:	e7af      	b.n	80041f6 <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8004296:	2b01      	cmp	r3, #1
 8004298:	d071      	beq.n	800437e <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800429a:	2b02      	cmp	r3, #2
 800429c:	f000 808d 	beq.w	80043ba <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 80042a0:	494c      	ldr	r1, [pc, #304]	; (80043d4 <Setup0_Process+0x288>)
 80042a2:	4630      	mov	r0, r6
 80042a4:	680a      	ldr	r2, [r1, #0]
 80042a6:	6953      	ldr	r3, [r2, #20]
 80042a8:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80042aa:	2803      	cmp	r0, #3
 80042ac:	f000 80c5 	beq.w	800443a <Setup0_Process+0x2ee>
 80042b0:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d0c8      	beq.n	8004248 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 80042b6:	2108      	movs	r1, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80042b8:	7221      	strb	r1, [r4, #8]
 80042ba:	e79c      	b.n	80041f6 <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80042bc:	7826      	ldrb	r6, [r4, #0]
 80042be:	0673      	lsls	r3, r6, #25
 80042c0:	f47f af7b 	bne.w	80041ba <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 80042c4:	78a2      	ldrb	r2, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80042c6:	4e43      	ldr	r6, [pc, #268]	; (80043d4 <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 80042c8:	2a01      	cmp	r2, #1
 80042ca:	f000 80b0 	beq.w	800442e <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80042ce:	2a02      	cmp	r2, #2
 80042d0:	d05e      	beq.n	8004390 <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 80042d2:	2a03      	cmp	r2, #3
 80042d4:	f47f af72 	bne.w	80041bc <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 80042d8:	6830      	ldr	r0, [r6, #0]
 80042da:	6a42      	ldr	r2, [r0, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 80042dc:	2a00      	cmp	r2, #0
 80042de:	d1cd      	bne.n	800427c <Setup0_Process+0x130>
 80042e0:	e76c      	b.n	80041bc <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 80042e2:	6860      	ldr	r0, [r4, #4]
 80042e4:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 80042e8:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80042ec:	f47f af65 	bne.w	80041ba <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80042f0:	7823      	ldrb	r3, [r4, #0]
 80042f2:	f013 007f 	ands.w	r0, r3, #127	; 0x7f
 80042f6:	f040 80a4 	bne.w	8004442 <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 80042fa:	88a3      	ldrh	r3, [r4, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f47f af5c 	bne.w	80041ba <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8004302:	4a3a      	ldr	r2, [pc, #232]	; (80043ec <Setup0_Process+0x2a0>)
 8004304:	e7ba      	b.n	800427c <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8004306:	290a      	cmp	r1, #10
 8004308:	f47f af57 	bne.w	80041ba <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800430c:	7826      	ldrb	r6, [r4, #0]
 800430e:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8004312:	2a01      	cmp	r2, #1
 8004314:	f47f af51 	bne.w	80041ba <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8004318:	7aa3      	ldrb	r3, [r4, #10]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f43f af4d 	beq.w	80041ba <Setup0_Process+0x6e>
 8004320:	8863      	ldrh	r3, [r4, #2]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f47f af49 	bne.w	80041ba <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8004328:	6860      	ldr	r0, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800432a:	4e2a      	ldr	r6, [pc, #168]	; (80043d4 <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800432c:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8004330:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004334:	f47f af42 	bne.w	80041bc <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8004338:	6832      	ldr	r2, [r6, #0]
 800433a:	4619      	mov	r1, r3
 800433c:	7960      	ldrb	r0, [r4, #5]
 800433e:	6993      	ldr	r3, [r2, #24]
 8004340:	4798      	blx	r3
 8004342:	2800      	cmp	r0, #0
 8004344:	f040 80b8 	bne.w	80044b8 <Setup0_Process+0x36c>
 8004348:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 800434a:	4a29      	ldr	r2, [pc, #164]	; (80043f0 <Setup0_Process+0x2a4>)
 800434c:	e796      	b.n	800427c <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 800434e:	88d9      	ldrh	r1, [r3, #6]
 8004350:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8004352:	9801      	ldr	r0, [sp, #4]
 8004354:	4282      	cmp	r2, r0
 8004356:	d817      	bhi.n	8004388 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8004358:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800435a:	491e      	ldr	r1, [pc, #120]	; (80043d4 <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800435c:	d208      	bcs.n	8004370 <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800435e:	6808      	ldr	r0, [r1, #0]
 8004360:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004364:	4282      	cmp	r2, r0
 8004366:	f080 808f 	bcs.w	8004488 <Setup0_Process+0x33c>
      {
        Data_Mul_MaxPacketSize = FALSE;
 800436a:	4a22      	ldr	r2, [pc, #136]	; (80043f4 <Setup0_Process+0x2a8>)
 800436c:	2000      	movs	r0, #0
 800436e:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8004370:	6809      	ldr	r1, [r1, #0]
 8004372:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 8004376:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8004378:	4b1f      	ldr	r3, [pc, #124]	; (80043f8 <Setup0_Process+0x2ac>)
 800437a:	4798      	blx	r3
 800437c:	e73b      	b.n	80041f6 <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 800437e:	2e0b      	cmp	r6, #11
 8004380:	d18e      	bne.n	80042a0 <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 8004382:	481e      	ldr	r0, [pc, #120]	; (80043fc <Setup0_Process+0x2b0>)
 8004384:	4780      	blx	r0
 8004386:	e75d      	b.n	8004244 <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8004388:	9801      	ldr	r0, [sp, #4]
 800438a:	4912      	ldr	r1, [pc, #72]	; (80043d4 <Setup0_Process+0x288>)
 800438c:	8218      	strh	r0, [r3, #16]
 800438e:	e7ef      	b.n	8004370 <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8004390:	6833      	ldr	r3, [r6, #0]
 8004392:	6a1a      	ldr	r2, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8004394:	2a00      	cmp	r2, #0
 8004396:	f47f af71 	bne.w	800427c <Setup0_Process+0x130>
 800439a:	e70f      	b.n	80041bc <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800439c:	f994 0003 	ldrsb.w	r0, [r4, #3]
 80043a0:	2800      	cmp	r0, #0
 80043a2:	db88      	blt.n	80042b6 <Setup0_Process+0x16a>
 80043a4:	78a1      	ldrb	r1, [r4, #2]
 80043a6:	2900      	cmp	r1, #0
 80043a8:	d185      	bne.n	80042b6 <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 80043aa:	88a2      	ldrh	r2, [r4, #4]
 80043ac:	2a00      	cmp	r2, #0
 80043ae:	d182      	bne.n	80042b6 <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 80043b0:	7aa3      	ldrb	r3, [r4, #10]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f43f af48 	beq.w	8004248 <Setup0_Process+0xfc>
 80043b8:	e77d      	b.n	80042b6 <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 80043ba:	2e01      	cmp	r6, #1
 80043bc:	f43f af40 	beq.w	8004240 <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 80043c0:	2e03      	cmp	r6, #3
 80043c2:	f47f af6d 	bne.w	80042a0 <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 80043c6:	4c0e      	ldr	r4, [pc, #56]	; (8004400 <Setup0_Process+0x2b4>)
 80043c8:	47a0      	blx	r4
 80043ca:	e73b      	b.n	8004244 <Setup0_Process+0xf8>
 80043cc:	20001630 	.word	0x20001630
 80043d0:	08004969 	.word	0x08004969
 80043d4:	20001608 	.word	0x20001608
 80043d8:	20001636 	.word	0x20001636
 80043dc:	08004015 	.word	0x08004015
 80043e0:	08003e69 	.word	0x08003e69
 80043e4:	20001638 	.word	0x20001638
 80043e8:	08003c2d 	.word	0x08003c2d
 80043ec:	08003c7d 	.word	0x08003c7d
 80043f0:	08003c55 	.word	0x08003c55
 80043f4:	200004b8 	.word	0x200004b8
 80043f8:	08003d1d 	.word	0x08003d1d
 80043fc:	08003e19 	.word	0x08003e19
 8004400:	08003f61 	.word	0x08003f61
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8004404:	78e2      	ldrb	r2, [r4, #3]
 8004406:	2a01      	cmp	r2, #1
 8004408:	f47f af4a 	bne.w	80042a0 <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 800440c:	88a3      	ldrh	r3, [r4, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f47f af46 	bne.w	80042a0 <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8004414:	7a60      	ldrb	r0, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8004416:	4a2a      	ldr	r2, [pc, #168]	; (80044c0 <Setup0_Process+0x374>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8004418:	f040 0120 	orr.w	r1, r0, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 800441c:	6813      	ldr	r3, [r2, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 800441e:	7261      	strb	r1, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8004420:	69dc      	ldr	r4, [r3, #28]
 8004422:	47a0      	blx	r4
 8004424:	682c      	ldr	r4, [r5, #0]
 8004426:	e70f      	b.n	8004248 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8004428:	4c26      	ldr	r4, [pc, #152]	; (80044c4 <Setup0_Process+0x378>)
 800442a:	47a0      	blx	r4
 800442c:	e70a      	b.n	8004244 <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800442e:	6832      	ldr	r2, [r6, #0]
 8004430:	69d2      	ldr	r2, [r2, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8004432:	2a00      	cmp	r2, #0
 8004434:	f47f af22 	bne.w	800427c <Setup0_Process+0x130>
 8004438:	e6c0      	b.n	80041bc <Setup0_Process+0x70>
 800443a:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 800443c:	2109      	movs	r1, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800443e:	7221      	strb	r1, [r4, #8]
 8004440:	e6d9      	b.n	80041f6 <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8004442:	2801      	cmp	r0, #1
 8004444:	d02b      	beq.n	800449e <Setup0_Process+0x352>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8004446:	2802      	cmp	r0, #2
 8004448:	f47f aeb7 	bne.w	80041ba <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800444c:	7963      	ldrb	r3, [r4, #5]
 800444e:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8004452:	0096      	lsls	r6, r2, #2
 8004454:	f106 4080 	add.w	r0, r6, #1073741824	; 0x40000000
 8004458:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 800445c:	061e      	lsls	r6, r3, #24
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800445e:	bf56      	itet	pl
 8004460:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8004462:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8004464:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8004468:	4817      	ldr	r0, [pc, #92]	; (80044c8 <Setup0_Process+0x37c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800446a:	bf48      	it	mi
 800446c:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8004470:	7800      	ldrb	r0, [r0, #0]
 8004472:	4282      	cmp	r2, r0
 8004474:	f4bf aea1 	bcs.w	80041ba <Setup0_Process+0x6e>
 8004478:	f013 0f70 	tst.w	r3, #112	; 0x70
 800447c:	f47f ae9d 	bne.w	80041ba <Setup0_Process+0x6e>
          && (Status != 0))
 8004480:	2e00      	cmp	r6, #0
 8004482:	f47f af3e 	bne.w	8004302 <Setup0_Process+0x1b6>
 8004486:	e698      	b.n	80041ba <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8004488:	fb92 f4f0 	sdiv	r4, r2, r0
 800448c:	fb00 2214 	mls	r2, r0, r4, r2
 8004490:	2a00      	cmp	r2, #0
 8004492:	f47f af6d 	bne.w	8004370 <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8004496:	4a0d      	ldr	r2, [pc, #52]	; (80044cc <Setup0_Process+0x380>)
 8004498:	2001      	movs	r0, #1
 800449a:	7010      	strb	r0, [r2, #0]
 800449c:	e768      	b.n	8004370 <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800449e:	4e0c      	ldr	r6, [pc, #48]	; (80044d0 <Setup0_Process+0x384>)
 80044a0:	7960      	ldrb	r0, [r4, #5]
 80044a2:	6833      	ldr	r3, [r6, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	4790      	blx	r2
 80044a8:	b930      	cbnz	r0, 80044b8 <Setup0_Process+0x36c>
          && (pInformation->Current_Configuration != 0))
 80044aa:	682c      	ldr	r4, [r5, #0]
 80044ac:	7aa0      	ldrb	r0, [r4, #10]
 80044ae:	2800      	cmp	r0, #0
 80044b0:	f47f af27 	bne.w	8004302 <Setup0_Process+0x1b6>
 80044b4:	7861      	ldrb	r1, [r4, #1]
 80044b6:	e681      	b.n	80041bc <Setup0_Process+0x70>
 80044b8:	6829      	ldr	r1, [r5, #0]
 80044ba:	7849      	ldrb	r1, [r1, #1]
 80044bc:	e67e      	b.n	80041bc <Setup0_Process+0x70>
 80044be:	bf00      	nop
 80044c0:	2000162c 	.word	0x2000162c
 80044c4:	08003ddd 	.word	0x08003ddd
 80044c8:	2000030c 	.word	0x2000030c
 80044cc:	200004b8 	.word	0x200004b8
 80044d0:	20001608 	.word	0x20001608

080044d4 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 80044d4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 80044d6:	4b28      	ldr	r3, [pc, #160]	; (8004578 <SetDeviceAddress+0xa4>)
 80044d8:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80044da:	2e00      	cmp	r6, #0
 80044dc:	d043      	beq.n	8004566 <SetDeviceAddress+0x92>
 80044de:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 80044e2:	f2c4 0200 	movt	r2, #16384	; 0x4000
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80044e6:	6814      	ldr	r4, [r2, #0]
 80044e8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80044ec:	4021      	ands	r1, r4
 80044ee:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 80044f2:	f043 0180 	orr.w	r1, r3, #128	; 0x80
 80044f6:	6011      	str	r1, [r2, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80044f8:	2201      	movs	r2, #1
 80044fa:	1e74      	subs	r4, r6, #1
 80044fc:	f645 4304 	movw	r3, #23556	; 0x5c04
 8004500:	4296      	cmp	r6, r2
 8004502:	f004 0401 	and.w	r4, r4, #1
 8004506:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800450a:	d92c      	bls.n	8004566 <SetDeviceAddress+0x92>
 800450c:	b17c      	cbz	r4, 800452e <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004514:	400a      	ands	r2, r1
 8004516:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 800451a:	f041 0281 	orr.w	r2, r1, #129	; 0x81
 800451e:	601a      	str	r2, [r3, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8004520:	2202      	movs	r2, #2
 8004522:	f645 4308 	movw	r3, #23560	; 0x5c08
 8004526:	4296      	cmp	r6, r2
 8004528:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800452c:	d91b      	bls.n	8004566 <SetDeviceAddress+0x92>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800452e:	681f      	ldr	r7, [r3, #0]
 8004530:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8004534:	f640 740f 	movw	r4, #3855	; 0xf0f
 8004538:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800453c:	403c      	ands	r4, r7
 800453e:	ea45 0704 	orr.w	r7, r5, r4
 8004542:	4619      	mov	r1, r3
 8004544:	f841 7b04 	str.w	r7, [r1], #4
 8004548:	685f      	ldr	r7, [r3, #4]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800454a:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800454c:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8004550:	f640 740f 	movw	r4, #3855	; 0xf0f
 8004554:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004558:	403c      	ands	r4, r7
 800455a:	432c      	orrs	r4, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800455c:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800455e:	605c      	str	r4, [r3, #4]
 8004560:	1d0b      	adds	r3, r1, #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8004562:	4296      	cmp	r6, r2
 8004564:	d8e3      	bhi.n	800452e <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8004566:	f645 434c 	movw	r3, #23628	; 0x5c4c
 800456a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800456e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004572:	6018      	str	r0, [r3, #0]
}
 8004574:	bcf0      	pop	{r4, r5, r6, r7}
 8004576:	4770      	bx	lr
 8004578:	2000030c 	.word	0x2000030c

0800457c <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 800457c:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 800457e:	4c14      	ldr	r4, [pc, #80]	; (80045d0 <In0_Process+0x54>)
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8004584:	2a02      	cmp	r2, #2
 8004586:	d012      	beq.n	80045ae <In0_Process+0x32>
 8004588:	2a04      	cmp	r2, #4
 800458a:	d010      	beq.n	80045ae <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 800458c:	2a06      	cmp	r2, #6
 800458e:	d004      	beq.n	800459a <In0_Process+0x1e>
 8004590:	2008      	movs	r0, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8004592:	7218      	strb	r0, [r3, #8]

  return Post0_Process();
 8004594:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <In0_Process+0x58>)
 8004596:	4798      	blx	r3
}
 8004598:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800459a:	7859      	ldrb	r1, [r3, #1]
 800459c:	2905      	cmp	r1, #5
 800459e:	d00b      	beq.n	80045b8 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 80045a0:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <In0_Process+0x5c>)
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	6881      	ldr	r1, [r0, #8]
 80045a6:	4788      	blx	r1
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	2008      	movs	r0, #8
 80045ac:	e7f1      	b.n	8004592 <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 80045ae:	4a0b      	ldr	r2, [pc, #44]	; (80045dc <In0_Process+0x60>)
 80045b0:	4790      	blx	r2
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	7a18      	ldrb	r0, [r3, #8]
 80045b6:	e7ec      	b.n	8004592 <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 80045b8:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80045ba:	0652      	lsls	r2, r2, #25
 80045bc:	d1f0      	bne.n	80045a0 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 80045be:	78d8      	ldrb	r0, [r3, #3]
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <In0_Process+0x64>)
 80045c2:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 80045c4:	4807      	ldr	r0, [pc, #28]	; (80045e4 <In0_Process+0x68>)
 80045c6:	6801      	ldr	r1, [r0, #0]
 80045c8:	6a0a      	ldr	r2, [r1, #32]
 80045ca:	4790      	blx	r2
 80045cc:	e7e8      	b.n	80045a0 <In0_Process+0x24>
 80045ce:	bf00      	nop
 80045d0:	20001630 	.word	0x20001630
 80045d4:	08004015 	.word	0x08004015
 80045d8:	20001608 	.word	0x20001608
 80045dc:	08003d1d 	.word	0x08003d1d
 80045e0:	080044d5 	.word	0x080044d5
 80045e4:	2000162c 	.word	0x2000162c

080045e8 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop

080045ec <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 80045ec:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 80045ee:	f241 6210 	movw	r2, #5648	; 0x1610
 80045f2:	f241 6430 	movw	r4, #5680	; 0x1630
 80045f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80045fa:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80045fe:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 8004600:	2402      	movs	r4, #2
 8004602:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 8004604:	f241 6008 	movw	r0, #5640	; 0x1608
 8004608:	f240 2388 	movw	r3, #648	; 0x288
  pUser_Standard_Requests = &User_Standard_Requests;
 800460c:	f241 612c 	movw	r1, #5676	; 0x162c
 8004610:	f240 22b8 	movw	r2, #696	; 0x2b8
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8004614:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004618:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 800461c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004620:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8004624:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8004626:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	4780      	blx	r0
 800462c:	bd10      	pop	{r4, pc}
 800462e:	bf00      	nop

08004630 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8004630:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8004634:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8004638:	1c53      	adds	r3, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800463a:	004a      	lsls	r2, r1, #1
  for (i = n; i != 0; i--)
 800463c:	1059      	asrs	r1, r3, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800463e:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004640:	d02f      	beq.n	80046a2 <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004642:	7845      	ldrb	r5, [r0, #1]
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8004644:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004646:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 800464a:	3901      	subs	r1, #1
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800464c:	ea44 2305 	orr.w	r3, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8004650:	f822 3b04 	strh.w	r3, [r2], #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004654:	460b      	mov	r3, r1
 8004656:	3204      	adds	r2, #4
 8004658:	f001 0101 	and.w	r1, r1, #1
 800465c:	3002      	adds	r0, #2
 800465e:	b303      	cbz	r3, 80046a2 <UserToPMABufferCopy+0x72>
 8004660:	b159      	cbz	r1, 800467a <UserToPMABufferCopy+0x4a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004662:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004666:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 800466a:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800466c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8004670:	f822 1c04 	strh.w	r1, [r2, #-4]
 8004674:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004676:	3b01      	subs	r3, #1
 8004678:	d013      	beq.n	80046a2 <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800467a:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800467e:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8004682:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8004686:	f822 4c04 	strh.w	r4, [r2, #-4]
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800468a:	7844      	ldrb	r4, [r0, #1]
 800468c:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800468e:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8004692:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004694:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8004698:	f822 1b04 	strh.w	r1, [r2], #4
 800469c:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800469e:	3b02      	subs	r3, #2
 80046a0:	d1eb      	bne.n	800467a <UserToPMABufferCopy+0x4a>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 80046a2:	bc30      	pop	{r4, r5}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop

080046a8 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80046a8:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 80046ac:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 80046b0:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80046b2:	0059      	lsls	r1, r3, #1
  for (i = n; i != 0; i--)
 80046b4:	1052      	asrs	r2, r2, #1
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80046b6:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80046b8:	d01c      	beq.n	80046f4 <PMAToUserBufferCopy+0x4c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80046ba:	680b      	ldr	r3, [r1, #0]
 80046bc:	3a01      	subs	r2, #1
 80046be:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80046c2:	4613      	mov	r3, r2
 80046c4:	3002      	adds	r0, #2
 80046c6:	f002 0201 	and.w	r2, r2, #1
 80046ca:	b19b      	cbz	r3, 80046f4 <PMAToUserBufferCopy+0x4c>
 80046cc:	b132      	cbz	r2, 80046dc <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80046ce:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80046d2:	f820 2c02 	strh.w	r2, [r0, #-2]
 80046d6:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80046d8:	3b01      	subs	r3, #1
 80046da:	d00b      	beq.n	80046f4 <PMAToUserBufferCopy+0x4c>
 80046dc:	1d0c      	adds	r4, r1, #4
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80046de:	684d      	ldr	r5, [r1, #4]
 80046e0:	6889      	ldr	r1, [r1, #8]
 80046e2:	4602      	mov	r2, r0
 80046e4:	f820 5c02 	strh.w	r5, [r0, #-2]
 80046e8:	f822 1b02 	strh.w	r1, [r2], #2
 80046ec:	1c90      	adds	r0, r2, #2
 80046ee:	1d21      	adds	r1, r4, #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80046f0:	3b02      	subs	r3, #2
 80046f2:	d1f3      	bne.n	80046dc <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 80046f4:	bc30      	pop	{r4, r5}
 80046f6:	4770      	bx	lr

080046f8 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 80046f8:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80046fc:	f645 4250 	movw	r2, #23632	; 0x5c50
 8004700:	4003      	ands	r3, r0
 8004702:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop

0800470c <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800470c:	0080      	lsls	r0, r0, #2
 800470e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8004712:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8004716:	6810      	ldr	r0, [r2, #0]
 8004718:	f648 138f 	movw	r3, #35215	; 0x898f
 800471c:	4003      	ands	r3, r0
 800471e:	4319      	orrs	r1, r3
 8004720:	6011      	str	r1, [r2, #0]
 8004722:	4770      	bx	lr

08004724 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8004724:	0080      	lsls	r0, r0, #2
 8004726:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800472a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 800472e:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8004730:	f001 0010 	and.w	r0, r1, #16
 8004734:	6814      	ldr	r4, [r2, #0]
 8004736:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800473a:	b280      	uxth	r0, r0
 800473c:	4023      	ands	r3, r4
 800473e:	b968      	cbnz	r0, 800475c <SetEPTxStatus+0x38>
 8004740:	b29b      	uxth	r3, r3
 8004742:	f001 0120 	and.w	r1, r1, #32
 8004746:	b288      	uxth	r0, r1
 8004748:	b108      	cbz	r0, 800474e <SetEPTxStatus+0x2a>
 800474a:	f083 0320 	eor.w	r3, r3, #32
 800474e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8004752:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8004756:	6010      	str	r0, [r2, #0]
}
 8004758:	bc10      	pop	{r4}
 800475a:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800475c:	f083 0310 	eor.w	r3, r3, #16
 8004760:	e7ef      	b.n	8004742 <SetEPTxStatus+0x1e>
 8004762:	bf00      	nop

08004764 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8004764:	0080      	lsls	r0, r0, #2
 8004766:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800476a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 800476e:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8004770:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 8004774:	6814      	ldr	r4, [r2, #0]
 8004776:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800477a:	b280      	uxth	r0, r0
 800477c:	4023      	ands	r3, r4
 800477e:	b968      	cbnz	r0, 800479c <SetEPRxStatus+0x38>
 8004780:	b29b      	uxth	r3, r3
 8004782:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004786:	b288      	uxth	r0, r1
 8004788:	b108      	cbz	r0, 800478e <SetEPRxStatus+0x2a>
 800478a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800478e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8004792:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8004796:	6010      	str	r0, [r2, #0]
}
 8004798:	bc10      	pop	{r4}
 800479a:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800479c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047a0:	e7ef      	b.n	8004782 <SetEPRxStatus+0x1e>
 80047a2:	bf00      	nop

080047a4 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 80047a4:	0080      	lsls	r0, r0, #2
 80047a6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80047aa:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 80047ae:	6801      	ldr	r1, [r0, #0]
 80047b0:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 80047b4:	400b      	ands	r3, r1
 80047b6:	f083 0230 	eor.w	r2, r3, #48	; 0x30
 80047ba:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 80047be:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 80047c2:	6003      	str	r3, [r0, #0]
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop

080047c8 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 80047c8:	0080      	lsls	r0, r0, #2
 80047ca:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80047ce:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 80047d2:	6801      	ldr	r1, [r0, #0]
 80047d4:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80047d8:	400b      	ands	r3, r1
 80047da:	f483 5240 	eor.w	r2, r3, #12288	; 0x3000
 80047de:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 80047e2:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 80047e6:	6003      	str	r3, [r0, #0]
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop

080047ec <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 80047ec:	0080      	lsls	r0, r0, #2
 80047ee:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80047f2:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 80047f6:	6801      	ldr	r1, [r0, #0]
 80047f8:	f640 630f 	movw	r3, #3599	; 0xe0f
 80047fc:	400b      	ands	r3, r1
 80047fe:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004802:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8004806:	6001      	str	r1, [r0, #0]
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop

0800480c <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 800480c:	0080      	lsls	r0, r0, #2
 800480e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8004812:	f503 40b8 	add.w	r0, r3, #23552	; 0x5c00
 8004816:	6802      	ldr	r2, [r0, #0]
 8004818:	0451      	lsls	r1, r2, #17
 800481a:	d508      	bpl.n	800482e <ClearDTOG_RX+0x22>
 800481c:	6801      	ldr	r1, [r0, #0]
 800481e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004822:	400b      	ands	r3, r1
 8004824:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8004828:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 800482c:	6001      	str	r1, [r0, #0]
 800482e:	4770      	bx	lr

08004830 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8004830:	0080      	lsls	r0, r0, #2
 8004832:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8004836:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	0650      	lsls	r0, r2, #25
 800483e:	d508      	bpl.n	8004852 <ClearDTOG_TX+0x22>
 8004840:	6819      	ldr	r1, [r3, #0]
 8004842:	f640 700f 	movw	r0, #3855	; 0xf0f
 8004846:	4008      	ands	r0, r1
 8004848:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 800484c:	f042 01c0 	orr.w	r1, r2, #192	; 0xc0
 8004850:	6019      	str	r1, [r3, #0]
 8004852:	4770      	bx	lr

08004854 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8004854:	f645 4350 	movw	r3, #23632	; 0x5c50
 8004858:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8004862:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8004864:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8004868:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 800486c:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 8004870:	0042      	lsls	r2, r0, #1
 8004872:	400b      	ands	r3, r1
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	4770      	bx	lr

08004878 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8004878:	f645 4350 	movw	r3, #23632	; 0x5c50
 800487c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8004886:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8004888:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800488c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004890:	18c3      	adds	r3, r0, r3
 8004892:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004896:	0058      	lsls	r0, r3, #1
 8004898:	400a      	ands	r2, r1
 800489a:	6002      	str	r2, [r0, #0]
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop

080048a0 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 80048a0:	f645 4350 	movw	r3, #23632	; 0x5c50
 80048a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048a8:	6819      	ldr	r1, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80048aa:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 80048ac:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80048b0:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 80048b4:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 80048b8:	004a      	lsls	r2, r1, #1
}
 80048ba:	8810      	ldrh	r0, [r2, #0]
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop

080048c0 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 80048c0:	f645 4350 	movw	r3, #23632	; 0x5c50
 80048c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	f243 0104 	movw	r1, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80048ce:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 80048d0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80048d4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80048d8:	1842      	adds	r2, r0, r1
 80048da:	0051      	lsls	r1, r2, #1
}
 80048dc:	8808      	ldrh	r0, [r1, #0]
 80048de:	4770      	bx	lr

080048e0 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80048e0:	f645 4350 	movw	r3, #23632	; 0x5c50
 80048e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80048ee:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80048f0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80048f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048f8:	18c3      	adds	r3, r0, r3
 80048fa:	005a      	lsls	r2, r3, #1
 80048fc:	6011      	str	r1, [r2, #0]
 80048fe:	4770      	bx	lr

08004900 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8004900:	f645 4350 	movw	r3, #23632	; 0x5c50
 8004904:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800490e:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8004910:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8004914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004918:	18c3      	adds	r3, r0, r3
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	293e      	cmp	r1, #62	; 0x3e
 800491e:	d909      	bls.n	8004934 <SetEPRxCount+0x34>
 8004920:	094a      	lsrs	r2, r1, #5
 8004922:	06c9      	lsls	r1, r1, #27
 8004924:	d101      	bne.n	800492a <SetEPRxCount+0x2a>
 8004926:	1e50      	subs	r0, r2, #1
 8004928:	b282      	uxth	r2, r0
 800492a:	0291      	lsls	r1, r2, #10
 800492c:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8004930:	6018      	str	r0, [r3, #0]
 8004932:	4770      	bx	lr
 8004934:	084a      	lsrs	r2, r1, #1
 8004936:	07c8      	lsls	r0, r1, #31
 8004938:	bf48      	it	mi
 800493a:	3201      	addmi	r2, #1
 800493c:	0291      	lsls	r1, r2, #10
 800493e:	6019      	str	r1, [r3, #0]
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop

08004944 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8004944:	f645 4350 	movw	r3, #23632	; 0x5c50
 8004948:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	f243 0106 	movw	r1, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8004952:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8004954:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004958:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800495c:	1842      	adds	r2, r0, r1
 800495e:	0051      	lsls	r1, r2, #1
 8004960:	680b      	ldr	r3, [r1, #0]
}
 8004962:	0598      	lsls	r0, r3, #22
 8004964:	0d80      	lsrs	r0, r0, #22
 8004966:	4770      	bx	lr

08004968 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8004968:	b2c3      	uxtb	r3, r0
 800496a:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800496c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop

08004974 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8004974:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8004976:	f241 6334 	movw	r3, #5684	; 0x1634
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800497a:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800497e:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8004982:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8004986:	2000      	movs	r0, #0
 8004988:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 800498c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8004990:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8004994:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 8004996:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8004998:	6011      	str	r1, [r2, #0]
  return 0;
}
 800499a:	bc10      	pop	{r4}
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop

080049a0 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 80049a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80049a2:	f644 1345 	movw	r3, #18757	; 0x4945
 80049a6:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 80049aa:	f6c0 0300 	movt	r3, #2048	; 0x800
 80049ae:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 80049b0:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80049b2:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 80049b4:	f644 01c1 	movw	r1, #18625	; 0x48c1
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80049b8:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 80049ba:	f6c0 0100 	movt	r1, #2048	; 0x800
 80049be:	4628      	mov	r0, r5
 80049c0:	4788      	blx	r1
 80049c2:	f244 63a9 	movw	r3, #18089	; 0x46a9
 80049c6:	4601      	mov	r1, r0
 80049c8:	4622      	mov	r2, r4
 80049ca:	4630      	mov	r0, r6
 80049cc:	f6c0 0300 	movt	r3, #2048	; 0x800
 80049d0:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 80049d2:	4620      	mov	r0, r4
 80049d4:	bd70      	pop	{r4, r5, r6, pc}
 80049d6:	bf00      	nop

080049d8 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 80049d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049dc:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8004b8c <CTR_LP+0x1b4>
 80049e0:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80049e2:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80049e6:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80049e8:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8004b90 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80049ec:	4d62      	ldr	r5, [pc, #392]	; (8004b78 <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80049ee:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80049f2:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 80049f6:	46d0      	mov	r8, sl
 80049f8:	f8db 0000 	ldr.w	r0, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80049fc:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8004a00:	b282      	uxth	r2, r0
 8004a02:	0403      	lsls	r3, r0, #16
 8004a04:	f8aa 2000 	strh.w	r2, [sl]
 8004a08:	f140 80ab 	bpl.w	8004b62 <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8004a0c:	f8b8 3000 	ldrh.w	r3, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8004a10:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8004a14:	f003 020f 	and.w	r2, r3, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8004a18:	0090      	lsls	r0, r2, #2
 8004a1a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 8004a1e:	4e57      	ldr	r6, [pc, #348]	; (8004b7c <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8004a20:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8004a24:	4f54      	ldr	r7, [pc, #336]	; (8004b78 <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 8004a26:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8004a28:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8004a2c:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 8004a30:	2a00      	cmp	r2, #0
 8004a32:	d133      	bne.n	8004a9c <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8004a34:	6822      	ldr	r2, [r4, #0]
 8004a36:	b290      	uxth	r0, r2
 8004a38:	8028      	strh	r0, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8004a3a:	882b      	ldrh	r3, [r5, #0]
 8004a3c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004a40:	8032      	strh	r2, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 8004a42:	8828      	ldrh	r0, [r5, #0]
 8004a44:	f400 5340 	and.w	r3, r0, #12288	; 0x3000
 8004a48:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8004a4a:	6822      	ldr	r2, [r4, #0]
 8004a4c:	4011      	ands	r1, r2
 8004a4e:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8004a52:	f081 0020 	eor.w	r0, r1, #32
 8004a56:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8004a5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a5e:	6022      	str	r2, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8004a60:	f8b8 1000 	ldrh.w	r1, [r8]
 8004a64:	f001 0010 	and.w	r0, r1, #16
 8004a68:	b283      	uxth	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d049      	beq.n	8004b02 <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	b291      	uxth	r1, r2
 8004a72:	f8ad 1006 	strh.w	r1, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8004a76:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004a7a:	f400 6300 	and.w	r3, r0, #2048	; 0x800
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	2a00      	cmp	r2, #0
 8004a82:	d171      	bne.n	8004b68 <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8004a84:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8004a88:	b208      	sxth	r0, r1
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	dab4      	bge.n	80049f8 <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a94:	4013      	ands	r3, r2
 8004a96:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8004a98:	4939      	ldr	r1, [pc, #228]	; (8004b80 <CTR_LP+0x1a8>)
 8004a9a:	e038      	b.n	8004b0e <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8004a9c:	6804      	ldr	r4, [r0, #0]
 8004a9e:	b2a1      	uxth	r1, r4
 8004aa0:	f8ad 1006 	strh.w	r1, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8004aa4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004aa8:	b214      	sxth	r4, r2
 8004aaa:	2c00      	cmp	r4, #0
 8004aac:	db1b      	blt.n	8004ae6 <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8004aae:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8004ab2:	f001 0280 	and.w	r2, r1, #128	; 0x80
 8004ab6:	b293      	uxth	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d09d      	beq.n	80049f8 <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8004abc:	f899 4000 	ldrb.w	r4, [r9]
 8004ac0:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8004ac4:	00a0      	lsls	r0, r4, #2
 8004ac6:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 8004aca:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 8004ace:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8004ad0:	3c01      	subs	r4, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8004ad2:	4003      	ands	r3, r0
 8004ad4:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8004ad6:	f240 2348 	movw	r3, #584	; 0x248
 8004ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ade:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8004ae2:	4788      	blx	r1
 8004ae4:	e788      	b.n	80049f8 <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8004ae6:	6801      	ldr	r1, [r0, #0]
 8004ae8:	f640 728f 	movw	r2, #3983	; 0xf8f
 8004aec:	400a      	ands	r2, r1
 8004aee:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8004af0:	f240 2064 	movw	r0, #612	; 0x264
 8004af4:	3b01      	subs	r3, #1
 8004af6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004afa:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8004afe:	47a0      	blx	r4
 8004b00:	e7d5      	b.n	8004aae <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8004b02:	6821      	ldr	r1, [r4, #0]
 8004b04:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8004b08:	400b      	ands	r3, r1
        In0_Process();
 8004b0a:	491e      	ldr	r1, [pc, #120]	; (8004b84 <CTR_LP+0x1ac>)
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8004b0c:	6023      	str	r3, [r4, #0]
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 8004b0e:	4788      	blx	r1
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8004b10:	6820      	ldr	r0, [r4, #0]
 8004b12:	883a      	ldrh	r2, [r7, #0]
 8004b14:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8004b18:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 8004b1c:	b28a      	uxth	r2, r1
 8004b1e:	4003      	ands	r3, r0
 8004b20:	b10a      	cbz	r2, 8004b26 <CTR_LP+0x14e>
 8004b22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b26:	8838      	ldrh	r0, [r7, #0]
 8004b28:	f400 5100 	and.w	r1, r0, #8192	; 0x2000
 8004b2c:	b28a      	uxth	r2, r1
 8004b2e:	b10a      	cbz	r2, 8004b34 <CTR_LP+0x15c>
 8004b30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b34:	8830      	ldrh	r0, [r6, #0]
 8004b36:	f000 0110 	and.w	r1, r0, #16
 8004b3a:	b28a      	uxth	r2, r1
 8004b3c:	b10a      	cbz	r2, 8004b42 <CTR_LP+0x16a>
 8004b3e:	f083 0310 	eor.w	r3, r3, #16
 8004b42:	8830      	ldrh	r0, [r6, #0]
 8004b44:	f000 0120 	and.w	r1, r0, #32
 8004b48:	b28a      	uxth	r2, r1
 8004b4a:	b10a      	cbz	r2, 8004b50 <CTR_LP+0x178>
 8004b4c:	f083 0320 	eor.w	r3, r3, #32
 8004b50:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8004b54:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8004b58:	f040 0280 	orr.w	r2, r0, #128	; 0x80
 8004b5c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8004b60:	600a      	str	r2, [r1, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8004b62:	b003      	add	sp, #12
 8004b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8004b68:	6820      	ldr	r0, [r4, #0]
 8004b6a:	f640 728f 	movw	r2, #3983	; 0xf8f
 8004b6e:	4002      	ands	r2, r0
 8004b70:	6022      	str	r2, [r4, #0]
          Setup0_Process();
 8004b72:	4905      	ldr	r1, [pc, #20]	; (8004b88 <CTR_LP+0x1b0>)
 8004b74:	e7cb      	b.n	8004b0e <CTR_LP+0x136>
 8004b76:	bf00      	nop
 8004b78:	20001636 	.word	0x20001636
 8004b7c:	20001638 	.word	0x20001638
 8004b80:	0800405d 	.word	0x0800405d
 8004b84:	0800457d 	.word	0x0800457d
 8004b88:	0800414d 	.word	0x0800414d
 8004b8c:	20000dd8 	.word	0x20000dd8
 8004b90:	2000160c 	.word	0x2000160c
 8004b94:	69646152 	.word	0x69646152
 8004b98:	6e49206f 	.word	0x6e49206f
 8004b9c:	4f207469 	.word	0x4f207469
 8004ba0:	203a204b 	.word	0x203a204b
 8004ba4:	4d204d46 	.word	0x4d204d46
 8004ba8:	0a65646f 	.word	0x0a65646f
 8004bac:	00000000 	.word	0x00000000
 8004bb0:	69646152 	.word	0x69646152
 8004bb4:	6e49206f 	.word	0x6e49206f
 8004bb8:	46207469 	.word	0x46207469
 8004bbc:	0a6c6961 	.word	0x0a6c6961
 8004bc0:	00000000 	.word	0x00000000
 8004bc4:	00000a0a 	.word	0x00000a0a
 8004bc8:	2a2a2a2a 	.word	0x2a2a2a2a
 8004bcc:	2a2a2a2a 	.word	0x2a2a2a2a
 8004bd0:	2a2a2a2a 	.word	0x2a2a2a2a
 8004bd4:	2a2a2a2a 	.word	0x2a2a2a2a
 8004bd8:	2a2a2a2a 	.word	0x2a2a2a2a
 8004bdc:	2a2a2a2a 	.word	0x2a2a2a2a
 8004be0:	2a2a2a2a 	.word	0x2a2a2a2a
 8004be4:	2a2a2a2a 	.word	0x2a2a2a2a
 8004be8:	2a2a2a2a 	.word	0x2a2a2a2a
 8004bec:	2a2a2a2a 	.word	0x2a2a2a2a
 8004bf0:	2a2a2a2a 	.word	0x2a2a2a2a
 8004bf4:	2a2a2a2a 	.word	0x2a2a2a2a
 8004bf8:	2a2a2a2a 	.word	0x2a2a2a2a
 8004bfc:	0a2a2a2a 	.word	0x0a2a2a2a
 8004c00:	00000000 	.word	0x00000000
 8004c04:	20202020 	.word	0x20202020
 8004c08:	20202020 	.word	0x20202020
 8004c0c:	20202020 	.word	0x20202020
 8004c10:	20202020 	.word	0x20202020
 8004c14:	20202020 	.word	0x20202020
 8004c18:	4c472020 	.word	0x4c472020
 8004c1c:	56206463 	.word	0x56206463
 8004c20:	20322e30 	.word	0x20322e30
 8004c24:	20202020 	.word	0x20202020
 8004c28:	20202020 	.word	0x20202020
 8004c2c:	20202020 	.word	0x20202020
 8004c30:	20202020 	.word	0x20202020
 8004c34:	20202020 	.word	0x20202020
 8004c38:	000a2020 	.word	0x000a2020
 8004c3c:	2e31202a 	.word	0x2e31202a
 8004c40:	44434c20 	.word	0x44434c20
 8004c44:	656c4320 	.word	0x656c4320
 8004c48:	20207261 	.word	0x20207261
 8004c4c:	20202020 	.word	0x20202020
 8004c50:	20202020 	.word	0x20202020
 8004c54:	20202020 	.word	0x20202020
 8004c58:	20202020 	.word	0x20202020
 8004c5c:	20202020 	.word	0x20202020
 8004c60:	20202020 	.word	0x20202020
 8004c64:	20202020 	.word	0x20202020
 8004c68:	20202020 	.word	0x20202020
 8004c6c:	20202020 	.word	0x20202020
 8004c70:	0a2a2020 	.word	0x0a2a2020
 8004c74:	00000000 	.word	0x00000000
 8004c78:	2e32202a 	.word	0x2e32202a
 8004c7c:	756f4320 	.word	0x756f4320
 8004c80:	2b20746e 	.word	0x2b20746e
 8004c84:	2020202b 	.word	0x2020202b
 8004c88:	20202020 	.word	0x20202020
 8004c8c:	20202020 	.word	0x20202020
 8004c90:	20202020 	.word	0x20202020
 8004c94:	20202020 	.word	0x20202020
 8004c98:	20202020 	.word	0x20202020
 8004c9c:	20202020 	.word	0x20202020
 8004ca0:	20202020 	.word	0x20202020
 8004ca4:	20202020 	.word	0x20202020
 8004ca8:	20202020 	.word	0x20202020
 8004cac:	0a2a2020 	.word	0x0a2a2020
 8004cb0:	00000000 	.word	0x00000000
 8004cb4:	2e33202a 	.word	0x2e33202a
 8004cb8:	756f4320 	.word	0x756f4320
 8004cbc:	2d20746e 	.word	0x2d20746e
 8004cc0:	2020202d 	.word	0x2020202d
 8004cc4:	20202020 	.word	0x20202020
 8004cc8:	20202020 	.word	0x20202020
 8004ccc:	20202020 	.word	0x20202020
 8004cd0:	20202020 	.word	0x20202020
 8004cd4:	20202020 	.word	0x20202020
 8004cd8:	20202020 	.word	0x20202020
 8004cdc:	20202020 	.word	0x20202020
 8004ce0:	20202020 	.word	0x20202020
 8004ce4:	20202020 	.word	0x20202020
 8004ce8:	0a2a2020 	.word	0x0a2a2020
 8004cec:	00000000 	.word	0x00000000
 8004cf0:	2e34202a 	.word	0x2e34202a
 8004cf4:	766f4d20 	.word	0x766f4d20
 8004cf8:	69432065 	.word	0x69432065
 8004cfc:	656c6372 	.word	0x656c6372
 8004d00:	61745320 	.word	0x61745320
 8004d04:	20207472 	.word	0x20207472
 8004d08:	20202020 	.word	0x20202020
 8004d0c:	20202020 	.word	0x20202020
 8004d10:	20202020 	.word	0x20202020
 8004d14:	20202020 	.word	0x20202020
 8004d18:	20202020 	.word	0x20202020
 8004d1c:	20202020 	.word	0x20202020
 8004d20:	20202020 	.word	0x20202020
 8004d24:	0a2a2020 	.word	0x0a2a2020
 8004d28:	00000000 	.word	0x00000000
 8004d2c:	2e35202a 	.word	0x2e35202a
 8004d30:	766f4d20 	.word	0x766f4d20
 8004d34:	69432065 	.word	0x69432065
 8004d38:	656c6372 	.word	0x656c6372
 8004d3c:	646e4520 	.word	0x646e4520
 8004d40:	20202020 	.word	0x20202020
 8004d44:	20202020 	.word	0x20202020
 8004d48:	20202020 	.word	0x20202020
 8004d4c:	20202020 	.word	0x20202020
 8004d50:	20202020 	.word	0x20202020
 8004d54:	20202020 	.word	0x20202020
 8004d58:	20202020 	.word	0x20202020
 8004d5c:	20202020 	.word	0x20202020
 8004d60:	0a2a2020 	.word	0x0a2a2020
 8004d64:	00000000 	.word	0x00000000
 8004d68:	2e36202a 	.word	0x2e36202a
 8004d6c:	20202020 	.word	0x20202020
 8004d70:	20202020 	.word	0x20202020
 8004d74:	20202020 	.word	0x20202020
 8004d78:	20202020 	.word	0x20202020
 8004d7c:	20202020 	.word	0x20202020
 8004d80:	20202020 	.word	0x20202020
 8004d84:	20202020 	.word	0x20202020
 8004d88:	20202020 	.word	0x20202020
 8004d8c:	20202020 	.word	0x20202020
 8004d90:	20202020 	.word	0x20202020
 8004d94:	20202020 	.word	0x20202020
 8004d98:	20202020 	.word	0x20202020
 8004d9c:	0a2a2020 	.word	0x0a2a2020
 8004da0:	00000000 	.word	0x00000000
 8004da4:	2e37202a 	.word	0x2e37202a
 8004da8:	20202020 	.word	0x20202020
 8004dac:	20202020 	.word	0x20202020
 8004db0:	20202020 	.word	0x20202020
 8004db4:	20202020 	.word	0x20202020
 8004db8:	20202020 	.word	0x20202020
 8004dbc:	20202020 	.word	0x20202020
 8004dc0:	20202020 	.word	0x20202020
 8004dc4:	20202020 	.word	0x20202020
 8004dc8:	20202020 	.word	0x20202020
 8004dcc:	20202020 	.word	0x20202020
 8004dd0:	20202020 	.word	0x20202020
 8004dd4:	20202020 	.word	0x20202020
 8004dd8:	0a2a2020 	.word	0x0a2a2020
 8004ddc:	00000000 	.word	0x00000000
 8004de0:	2e38202a 	.word	0x2e38202a
 8004de4:	20202020 	.word	0x20202020
 8004de8:	20202020 	.word	0x20202020
 8004dec:	20202020 	.word	0x20202020
 8004df0:	20202020 	.word	0x20202020
 8004df4:	20202020 	.word	0x20202020
 8004df8:	20202020 	.word	0x20202020
 8004dfc:	20202020 	.word	0x20202020
 8004e00:	20202020 	.word	0x20202020
 8004e04:	20202020 	.word	0x20202020
 8004e08:	20202020 	.word	0x20202020
 8004e0c:	20202020 	.word	0x20202020
 8004e10:	20202020 	.word	0x20202020
 8004e14:	0a2a2020 	.word	0x0a2a2020
 8004e18:	00000000 	.word	0x00000000
 8004e1c:	2e39202a 	.word	0x2e39202a
 8004e20:	20202020 	.word	0x20202020
 8004e24:	20202020 	.word	0x20202020
 8004e28:	20202020 	.word	0x20202020
 8004e2c:	20202020 	.word	0x20202020
 8004e30:	20202020 	.word	0x20202020
 8004e34:	20202020 	.word	0x20202020
 8004e38:	20202020 	.word	0x20202020
 8004e3c:	20202020 	.word	0x20202020
 8004e40:	20202020 	.word	0x20202020
 8004e44:	20202020 	.word	0x20202020
 8004e48:	20202020 	.word	0x20202020
 8004e4c:	20202020 	.word	0x20202020
 8004e50:	0a2a2020 	.word	0x0a2a2020
 8004e54:	00000000 	.word	0x00000000
 8004e58:	2e6d202a 	.word	0x2e6d202a
 8004e5c:	654d2020 	.word	0x654d2020
 8004e60:	2020756e 	.word	0x2020756e
 8004e64:	20202020 	.word	0x20202020
 8004e68:	20202020 	.word	0x20202020
 8004e6c:	20202020 	.word	0x20202020
 8004e70:	20202020 	.word	0x20202020
 8004e74:	20202020 	.word	0x20202020
 8004e78:	20202020 	.word	0x20202020
 8004e7c:	20202020 	.word	0x20202020
 8004e80:	20202020 	.word	0x20202020
 8004e84:	20202020 	.word	0x20202020
 8004e88:	20202020 	.word	0x20202020
 8004e8c:	0a2a2020 	.word	0x0a2a2020
 8004e90:	00000000 	.word	0x00000000
 8004e94:	0000000a 	.word	0x0000000a
 8004e98:	00203e3e 	.word	0x00203e3e
 8004e9c:	2044434c 	.word	0x2044434c
 8004ea0:	61656c43 	.word	0x61656c43
 8004ea4:	000a2072 	.word	0x000a2072
 8004ea8:	6e756f43 	.word	0x6e756f43
 8004eac:	2b2b2074 	.word	0x2b2b2074
 8004eb0:	00000a20 	.word	0x00000a20
 8004eb4:	72616d53 	.word	0x72616d53
 8004eb8:	626f7274 	.word	0x626f7274
 8004ebc:	4220746f 	.word	0x4220746f
 8004ec0:	00000044 	.word	0x00000044
 8004ec4:	6e756f43 	.word	0x6e756f43
 8004ec8:	203a2074 	.word	0x203a2074
 8004ecc:	00643425 	.word	0x00643425
 8004ed0:	6e756f43 	.word	0x6e756f43
 8004ed4:	2d2d2074 	.word	0x2d2d2074
 8004ed8:	00000a20 	.word	0x00000a20

08004edc <Virtual_Com_Port_StringVendor>:
 8004edc:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8004eec:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8004efc:	00630069 00000073                       i.c.s...

08004f04 <Virtual_Com_Port_DeviceDescriptor>:
 8004f04:	02000112 40000002 57400483 02010200     .......@..@W....
 8004f14:	00000103                                ....

08004f18 <Virtual_Com_Port_StringLangID>:
 8004f18:	04090304                                ....

08004f1c <Virtual_Com_Port_StringProduct>:
 8004f1c:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8004f2c:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8004f3c:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8004f4c:	00000020                                 ...

08004f50 <Virtual_Com_Port_ConfigDescriptor>:
 8004f50:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8004f60:	24050001 05011000 01000124 02022404     ...$....$....$..
 8004f70:	00062405 82050701 ff000803 00010409     .$..............
 8004f80:	00000a02 03050700 00004002 02810507     .........@......
 8004f90:	00000040                                @...
