
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015a0  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000390  20000000  20000000  00010000  2**9
                  ALLOC
  2 ._usrstack    00000100  20000390  20000390  000095a0  2**0
                  CONTENTS
  3 .debug_abbrev 00000b1e  00000000  00000000  000096a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000155d  00000000  00000000  0000a1be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000ad7  00000000  00000000  0000b71b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    00001c60  00000000  00000000  0000c1f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000040f  00000000  00000000  0000de52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubtypes 00000191  00000000  00000000  0000e261  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000260  00000000  00000000  0000e3f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003d8  00000000  00000000  0000e652  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005a0  00000000  00000000  0000ea2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002a  00000000  00000000  0000efca  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000031  00000000  00000000  0000eff4  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000cd0  00000000  00000000  0000f028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 f1 0d 00 08                             .P. ....

08000008 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000008:	b508      	push	{r3, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800000a:	4a05      	ldr	r2, [pc, #20]	; (8000020 <main+0x18>)
 800000c:	4790      	blx	r2
	Ap_Init();
 800000e:	4805      	ldr	r0, [pc, #20]	; (8000024 <main+0x1c>)
 8000010:	4780      	blx	r0
	int key;

	Main_Init();
	

    printf("Radio V0.1\n");
 8000012:	4805      	ldr	r0, [pc, #20]	; (8000028 <main+0x20>)
 8000014:	4905      	ldr	r1, [pc, #20]	; (800002c <main+0x24>)
 8000016:	4788      	blx	r1


	//-- 명령어 처리
	//
	Ap_RadioMenu_ExeCmd();    
 8000018:	4b05      	ldr	r3, [pc, #20]	; (8000030 <main+0x28>)
 800001a:	4798      	blx	r3
 800001c:	e7fe      	b.n	800001c <main+0x14>
 800001e:	bf00      	nop
 8000020:	08000ec9 	.word	0x08000ec9
 8000024:	08000035 	.word	0x08000035
 8000028:	08001250 	.word	0x08001250
 800002c:	080002c9 	.word	0x080002c9
 8000030:	080000e5 	.word	0x080000e5

08000034 <Ap_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
}
 8000034:	4770      	bx	lr
 8000036:	bf00      	nop

08000038 <Ap_RadioMenu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_RadioMenu_ShowMenu(void)
{
 8000038:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	printf("\n\n");
	printf("*******************************************************\n");
 800003a:	4d11      	ldr	r5, [pc, #68]	; (8000080 <Ap_RadioMenu_ShowMenu+0x48>)
---------------------------------------------------------------------------*/
void Ap_RadioMenu_ShowMenu(void)
{
	u8 key;

	printf("\n\n");
 800003c:	4c11      	ldr	r4, [pc, #68]	; (8000084 <Ap_RadioMenu_ShowMenu+0x4c>)
 800003e:	4812      	ldr	r0, [pc, #72]	; (8000088 <Ap_RadioMenu_ShowMenu+0x50>)
 8000040:	47a0      	blx	r4
	printf("*******************************************************\n");
 8000042:	4628      	mov	r0, r5
 8000044:	47a0      	blx	r4
	printf("                      Radio V0.1                       \n");
 8000046:	4811      	ldr	r0, [pc, #68]	; (800008c <Ap_RadioMenu_ShowMenu+0x54>)
 8000048:	47a0      	blx	r4
	printf("*******************************************************\n");
 800004a:	4628      	mov	r0, r5
 800004c:	47a0      	blx	r4
	printf("* 1.  Band Select                                     *\n");
 800004e:	4810      	ldr	r0, [pc, #64]	; (8000090 <Ap_RadioMenu_ShowMenu+0x58>)
 8000050:	47a0      	blx	r4
	printf("* 2.  CH ++                                           *\n");
 8000052:	4810      	ldr	r0, [pc, #64]	; (8000094 <Ap_RadioMenu_ShowMenu+0x5c>)
 8000054:	47a0      	blx	r4
	printf("* 3.  CH --                                           *\n");
 8000056:	4810      	ldr	r0, [pc, #64]	; (8000098 <Ap_RadioMenu_ShowMenu+0x60>)
 8000058:	47a0      	blx	r4
	printf("* 4.  Auto Search +                                   *\n");
 800005a:	4810      	ldr	r0, [pc, #64]	; (800009c <Ap_RadioMenu_ShowMenu+0x64>)
 800005c:	47a0      	blx	r4
	printf("* 5.  Auto Search -                                   *\n");
 800005e:	4810      	ldr	r0, [pc, #64]	; (80000a0 <Ap_RadioMenu_ShowMenu+0x68>)
 8000060:	47a0      	blx	r4
	printf("* 6.  Volume +                                        *\n");
 8000062:	4810      	ldr	r0, [pc, #64]	; (80000a4 <Ap_RadioMenu_ShowMenu+0x6c>)
 8000064:	47a0      	blx	r4
	printf("* 7.  Volume -                                        *\n");
 8000066:	4810      	ldr	r0, [pc, #64]	; (80000a8 <Ap_RadioMenu_ShowMenu+0x70>)
 8000068:	47a0      	blx	r4
	printf("* 8.                                                  *\n");
 800006a:	4810      	ldr	r0, [pc, #64]	; (80000ac <Ap_RadioMenu_ShowMenu+0x74>)
 800006c:	47a0      	blx	r4
	printf("* 9.                                                  *\n");
 800006e:	4810      	ldr	r0, [pc, #64]	; (80000b0 <Ap_RadioMenu_ShowMenu+0x78>)
 8000070:	47a0      	blx	r4
	printf("* m.  Menu                                            *\n");
 8000072:	4810      	ldr	r0, [pc, #64]	; (80000b4 <Ap_RadioMenu_ShowMenu+0x7c>)
 8000074:	47a0      	blx	r4
	printf("*******************************************************\n");
 8000076:	4628      	mov	r0, r5
 8000078:	47a0      	blx	r4
	printf("\n");
 800007a:	480f      	ldr	r0, [pc, #60]	; (80000b8 <Ap_RadioMenu_ShowMenu+0x80>)
 800007c:	47a0      	blx	r4
}
 800007e:	bd38      	pop	{r3, r4, r5, pc}
 8000080:	08001260 	.word	0x08001260
 8000084:	080002c9 	.word	0x080002c9
 8000088:	0800125c 	.word	0x0800125c
 800008c:	0800129c 	.word	0x0800129c
 8000090:	080012d8 	.word	0x080012d8
 8000094:	08001314 	.word	0x08001314
 8000098:	08001350 	.word	0x08001350
 800009c:	0800138c 	.word	0x0800138c
 80000a0:	080013c8 	.word	0x080013c8
 80000a4:	08001404 	.word	0x08001404
 80000a8:	08001440 	.word	0x08001440
 80000ac:	0800147c 	.word	0x0800147c
 80000b0:	080014b8 	.word	0x080014b8
 80000b4:	080014f4 	.word	0x080014f4
 80000b8:	0800159c 	.word	0x0800159c

080000bc <Ap_RadioMenu_GetCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_RadioMenu_GetCmd(void)
{
 80000bc:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	printf("select the command number : ");
 80000be:	4805      	ldr	r0, [pc, #20]	; (80000d4 <Ap_RadioMenu_GetCmd+0x18>)
 80000c0:	4c05      	ldr	r4, [pc, #20]	; (80000d8 <Ap_RadioMenu_GetCmd+0x1c>)
 80000c2:	47a0      	blx	r4

    key=get_byte();
 80000c4:	4b05      	ldr	r3, [pc, #20]	; (80000dc <Ap_RadioMenu_GetCmd+0x20>)
 80000c6:	4798      	blx	r3
 80000c8:	4605      	mov	r5, r0
	
	printf("\n");
 80000ca:	4805      	ldr	r0, [pc, #20]	; (80000e0 <Ap_RadioMenu_GetCmd+0x24>)
 80000cc:	47a0      	blx	r4
	
    return key;
}
 80000ce:	4628      	mov	r0, r5
 80000d0:	bd38      	pop	{r3, r4, r5, pc}
 80000d2:	bf00      	nop
 80000d4:	08001530 	.word	0x08001530
 80000d8:	080002c9 	.word	0x080002c9
 80000dc:	0800104d 	.word	0x0800104d
 80000e0:	0800159c 	.word	0x0800159c

080000e4 <Ap_RadioMenu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_RadioMenu_ExeCmd(void)
{
 80000e4:	b570      	push	{r4, r5, r6, lr}
	u8 key;
	static u8 ExeFirst = TRUE;
	
	if( ExeFirst == TRUE )
	{
		Ap_RadioMenu_ShowMenu();	
 80000e6:	4e58      	ldr	r6, [pc, #352]	; (8000248 <Ap_RadioMenu_ExeCmd+0x164>)
 80000e8:	47b0      	blx	r6
 80000ea:	4c58      	ldr	r4, [pc, #352]	; (800024c <Ap_RadioMenu_ExeCmd+0x168>)
           case '9':
               printf("No.9\n");
               break;

           case '0':
               printf("No.0\n");
 80000ec:	4d58      	ldr	r5, [pc, #352]	; (8000250 <Ap_RadioMenu_ExeCmd+0x16c>)
	if( ExeFirst == TRUE )
	{
		Ap_RadioMenu_ShowMenu();	
	}

    while( (key = Ap_RadioMenu_GetCmd()) != 0 )
 80000ee:	47a0      	blx	r4
 80000f0:	4603      	mov	r3, r0
 80000f2:	2800      	cmp	r0, #0
 80000f4:	f000 8088 	beq.w	8000208 <Ap_RadioMenu_ExeCmd+0x124>
    {
        switch(key)
 80000f8:	3b30      	subs	r3, #48	; 0x30
 80000fa:	2b3d      	cmp	r3, #61	; 0x3d
 80000fc:	d8f7      	bhi.n	80000ee <Ap_RadioMenu_ExeCmd+0xa>
 80000fe:	a201      	add	r2, pc, #4	; (adr r2, 8000104 <Ap_RadioMenu_ExeCmd+0x20>)
 8000100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000104:	08000241 	.word	0x08000241
 8000108:	0800023b 	.word	0x0800023b
 800010c:	08000235 	.word	0x08000235
 8000110:	0800022f 	.word	0x0800022f
 8000114:	08000229 	.word	0x08000229
 8000118:	08000223 	.word	0x08000223
 800011c:	0800021d 	.word	0x0800021d
 8000120:	08000217 	.word	0x08000217
 8000124:	08000211 	.word	0x08000211
 8000128:	0800020b 	.word	0x0800020b
 800012c:	080000ef 	.word	0x080000ef
 8000130:	080000ef 	.word	0x080000ef
 8000134:	080000ef 	.word	0x080000ef
 8000138:	080000ef 	.word	0x080000ef
 800013c:	080000ef 	.word	0x080000ef
 8000140:	080000ef 	.word	0x080000ef
 8000144:	080000ef 	.word	0x080000ef
 8000148:	080000ef 	.word	0x080000ef
 800014c:	080000ef 	.word	0x080000ef
 8000150:	080000ef 	.word	0x080000ef
 8000154:	080000ef 	.word	0x080000ef
 8000158:	080000ef 	.word	0x080000ef
 800015c:	080000ef 	.word	0x080000ef
 8000160:	080000ef 	.word	0x080000ef
 8000164:	080000ef 	.word	0x080000ef
 8000168:	080000ef 	.word	0x080000ef
 800016c:	080000ef 	.word	0x080000ef
 8000170:	080000ef 	.word	0x080000ef
 8000174:	080000ef 	.word	0x080000ef
 8000178:	080001fd 	.word	0x080001fd
 800017c:	080000ef 	.word	0x080000ef
 8000180:	080000ef 	.word	0x080000ef
 8000184:	080000ef 	.word	0x080000ef
 8000188:	080000ef 	.word	0x080000ef
 800018c:	080000ef 	.word	0x080000ef
 8000190:	080000ef 	.word	0x080000ef
 8000194:	080000ef 	.word	0x080000ef
 8000198:	080000ef 	.word	0x080000ef
 800019c:	080000ef 	.word	0x080000ef
 80001a0:	080000ef 	.word	0x080000ef
 80001a4:	080000ef 	.word	0x080000ef
 80001a8:	080000ef 	.word	0x080000ef
 80001ac:	080000ef 	.word	0x080000ef
 80001b0:	080000ef 	.word	0x080000ef
 80001b4:	080000ef 	.word	0x080000ef
 80001b8:	080000ef 	.word	0x080000ef
 80001bc:	080000ef 	.word	0x080000ef
 80001c0:	080000ef 	.word	0x080000ef
 80001c4:	080000ef 	.word	0x080000ef
 80001c8:	080000ef 	.word	0x080000ef
 80001cc:	080000ef 	.word	0x080000ef
 80001d0:	080000ef 	.word	0x080000ef
 80001d4:	080000ef 	.word	0x080000ef
 80001d8:	080000ef 	.word	0x080000ef
 80001dc:	080000ef 	.word	0x080000ef
 80001e0:	080000ef 	.word	0x080000ef
 80001e4:	080000ef 	.word	0x080000ef
 80001e8:	080000ef 	.word	0x080000ef
 80001ec:	080000ef 	.word	0x080000ef
 80001f0:	080000ef 	.word	0x080000ef
 80001f4:	080000ef 	.word	0x080000ef
 80001f8:	080001fd 	.word	0x080001fd
               printf("No.0\n");
               break;

			case 'm':
			case 'M':
				Ap_RadioMenu_ShowMenu();
 80001fc:	47b0      	blx	r6
	if( ExeFirst == TRUE )
	{
		Ap_RadioMenu_ShowMenu();	
	}

    while( (key = Ap_RadioMenu_GetCmd()) != 0 )
 80001fe:	47a0      	blx	r4
 8000200:	4603      	mov	r3, r0
 8000202:	2800      	cmp	r0, #0
 8000204:	f47f af78 	bne.w	80000f8 <Ap_RadioMenu_ExeCmd+0x14>
               break;
        }
    }
    
    return key;
}
 8000208:	bd70      	pop	{r4, r5, r6, pc}
           case '8':
               printf("No.8\n");
               break;

           case '9':
               printf("No.9\n");
 800020a:	4812      	ldr	r0, [pc, #72]	; (8000254 <Ap_RadioMenu_ExeCmd+0x170>)
 800020c:	47a8      	blx	r5
               break;
 800020e:	e76e      	b.n	80000ee <Ap_RadioMenu_ExeCmd+0xa>
           case '7':
               printf("No.7\n");
               break;  

           case '8':
               printf("No.8\n");
 8000210:	4811      	ldr	r0, [pc, #68]	; (8000258 <Ap_RadioMenu_ExeCmd+0x174>)
 8000212:	47a8      	blx	r5
               break;
 8000214:	e76b      	b.n	80000ee <Ap_RadioMenu_ExeCmd+0xa>
           case '6':
               printf("No.6\n");
               break;  

           case '7':
               printf("No.7\n");
 8000216:	4811      	ldr	r0, [pc, #68]	; (800025c <Ap_RadioMenu_ExeCmd+0x178>)
 8000218:	47a8      	blx	r5
               break;  
 800021a:	e768      	b.n	80000ee <Ap_RadioMenu_ExeCmd+0xa>
           case '5':
               printf("No.5\n");
               break;  

           case '6':
               printf("No.6\n");
 800021c:	4810      	ldr	r0, [pc, #64]	; (8000260 <Ap_RadioMenu_ExeCmd+0x17c>)
 800021e:	47a8      	blx	r5
               break;  
 8000220:	e765      	b.n	80000ee <Ap_RadioMenu_ExeCmd+0xa>
           case '4':
               printf("No.4\n");           
               break;  

           case '5':
               printf("No.5\n");
 8000222:	4810      	ldr	r0, [pc, #64]	; (8000264 <Ap_RadioMenu_ExeCmd+0x180>)
 8000224:	47a8      	blx	r5
               break;  
 8000226:	e762      	b.n	80000ee <Ap_RadioMenu_ExeCmd+0xa>
           case '3':
               printf("No.3\n");           
               break; 

           case '4':
               printf("No.4\n");           
 8000228:	480f      	ldr	r0, [pc, #60]	; (8000268 <Ap_RadioMenu_ExeCmd+0x184>)
 800022a:	47a8      	blx	r5
               break;  
 800022c:	e75f      	b.n	80000ee <Ap_RadioMenu_ExeCmd+0xa>
           case '2':
               printf("No.2\n");           
               break;

           case '3':
               printf("No.3\n");           
 800022e:	480f      	ldr	r0, [pc, #60]	; (800026c <Ap_RadioMenu_ExeCmd+0x188>)
 8000230:	47a8      	blx	r5
               break; 
 8000232:	e75c      	b.n	80000ee <Ap_RadioMenu_ExeCmd+0xa>
           case '1':
               printf("No.1\n");           
               break;

           case '2':
               printf("No.2\n");           
 8000234:	480e      	ldr	r0, [pc, #56]	; (8000270 <Ap_RadioMenu_ExeCmd+0x18c>)
 8000236:	47a8      	blx	r5
               break;
 8000238:	e759      	b.n	80000ee <Ap_RadioMenu_ExeCmd+0xa>
    while( (key = Ap_RadioMenu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
               printf("No.1\n");           
 800023a:	480e      	ldr	r0, [pc, #56]	; (8000274 <Ap_RadioMenu_ExeCmd+0x190>)
 800023c:	47a8      	blx	r5
               break;
 800023e:	e756      	b.n	80000ee <Ap_RadioMenu_ExeCmd+0xa>
           case '9':
               printf("No.9\n");
               break;

           case '0':
               printf("No.0\n");
 8000240:	480d      	ldr	r0, [pc, #52]	; (8000278 <Ap_RadioMenu_ExeCmd+0x194>)
 8000242:	47a8      	blx	r5
               break;
 8000244:	e753      	b.n	80000ee <Ap_RadioMenu_ExeCmd+0xa>
 8000246:	bf00      	nop
 8000248:	08000039 	.word	0x08000039
 800024c:	080000bd 	.word	0x080000bd
 8000250:	080002c9 	.word	0x080002c9
 8000254:	08001590 	.word	0x08001590
 8000258:	08001588 	.word	0x08001588
 800025c:	08001580 	.word	0x08001580
 8000260:	08001578 	.word	0x08001578
 8000264:	08001570 	.word	0x08001570
 8000268:	08001568 	.word	0x08001568
 800026c:	08001560 	.word	0x08001560
 8000270:	08001558 	.word	0x08001558
 8000274:	08001550 	.word	0x08001550
 8000278:	08001598 	.word	0x08001598

0800027c <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 800027c:	b410      	push	{r4}
        long remainder;
        if (!s || !s[0]) return false;
 800027e:	b1e0      	cbz	r0, 80002ba <DecToLong+0x3e>
 8000280:	7802      	ldrb	r2, [r0, #0]
 8000282:	b1e2      	cbz	r2, 80002be <DecToLong+0x42>


        for (*retval=0; *s; s++){
 8000284:	2200      	movs	r2, #0
 8000286:	600a      	str	r2, [r1, #0]
 8000288:	7803      	ldrb	r3, [r0, #0]
 800028a:	b1ab      	cbz	r3, 80002b8 <DecToLong+0x3c>
                if (*s < '0' || *s > '9') return false;
 800028c:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8000290:	b2e4      	uxtb	r4, r4
 8000292:	2c09      	cmp	r4, #9
 8000294:	d902      	bls.n	800029c <DecToLong+0x20>
 8000296:	e012      	b.n	80002be <DecToLong+0x42>
 8000298:	2c09      	cmp	r4, #9
 800029a:	d812      	bhi.n	80002c2 <DecToLong+0x46>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 800029c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
                remainder = *s - '0';
 80002a0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
                *retval = *retval * 10 + remainder;
 80002a4:	3a30      	subs	r2, #48	; 0x30
 80002a6:	600a      	str	r2, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80002a8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 80002ac:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80002b0:	fa5f f48c 	uxtb.w	r4, ip
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d1ef      	bne.n	8000298 <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 80002b8:	2001      	movs	r0, #1
}        // DecToLong.
 80002ba:	bc10      	pop	{r4}
 80002bc:	4770      	bx	lr
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 80002be:	4610      	mov	r0, r2
 80002c0:	e7fb      	b.n	80002ba <DecToLong+0x3e>
 80002c2:	2000      	movs	r0, #0
 80002c4:	e7f9      	b.n	80002ba <DecToLong+0x3e>
 80002c6:	bf00      	nop

080002c8 <printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void printf(char *fmt, ...)
{
 80002c8:	b40f      	push	{r0, r1, r2, r3}
 80002ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ce:	b08d      	sub	sp, #52	; 0x34
        int                i;
        va_list args;
        char        *s=fmt;
 80002d0:	f10d 0858 	add.w	r8, sp, #88	; 0x58
 80002d4:	f858 5b04 	ldr.w	r5, [r8], #4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80002d8:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 80005a0 <printf+0x2d8>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 80002dc:	4fae      	ldr	r7, [pc, #696]	; (8000598 <printf+0x2d0>)
        va_list args;
        char        *s=fmt;
        char        format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
        va_start(args, fmt);
        while (*s){
 80002de:	7828      	ldrb	r0, [r5, #0]
 80002e0:	2800      	cmp	r0, #0
 80002e2:	f000 80ca 	beq.w	800047a <printf+0x1b2>
                if (*s=='%'){
 80002e6:	2825      	cmp	r0, #37	; 0x25
 80002e8:	f040 80cc 	bne.w	8000484 <printf+0x1bc>
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
 80002ec:	f88d 001c 	strb.w	r0, [sp, #28]
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 80002f0:	7868      	ldrb	r0, [r5, #1]
        char        format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
        va_start(args, fmt);
        while (*s){
                if (*s=='%'){
                        s++;
 80002f2:	3501      	adds	r5, #1
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 80002f4:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 80002f8:	b2cb      	uxtb	r3, r1
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	f240 82fd 	bls.w	80008fa <printf+0x632>
 8000300:	2873      	cmp	r0, #115	; 0x73
 8000302:	f000 82fa 	beq.w	80008fa <printf+0x632>
 8000306:	2878      	cmp	r0, #120	; 0x78
 8000308:	f000 82f7 	beq.w	80008fa <printf+0x632>
 800030c:	2825      	cmp	r0, #37	; 0x25
 800030e:	f000 82f4 	beq.w	80008fa <printf+0x632>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000312:	f88d 001d 	strb.w	r0, [sp, #29]
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000316:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800031a:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 800031e:	fa5f f28c 	uxtb.w	r2, ip
 8000322:	2a01      	cmp	r2, #1
 8000324:	f240 82f3 	bls.w	800090e <printf+0x646>
 8000328:	2873      	cmp	r0, #115	; 0x73
 800032a:	f000 82f0 	beq.w	800090e <printf+0x646>
 800032e:	2878      	cmp	r0, #120	; 0x78
 8000330:	f000 82ed 	beq.w	800090e <printf+0x646>
 8000334:	2825      	cmp	r0, #37	; 0x25
 8000336:	f000 82ea 	beq.w	800090e <printf+0x646>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 800033a:	f88d 001e 	strb.w	r0, [sp, #30]
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 800033e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000342:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 8000346:	b2cb      	uxtb	r3, r1
 8000348:	2b01      	cmp	r3, #1
 800034a:	f240 82e2 	bls.w	8000912 <printf+0x64a>
 800034e:	2873      	cmp	r0, #115	; 0x73
 8000350:	f000 82df 	beq.w	8000912 <printf+0x64a>
 8000354:	2878      	cmp	r0, #120	; 0x78
 8000356:	f000 82dc 	beq.w	8000912 <printf+0x64a>
 800035a:	2825      	cmp	r0, #37	; 0x25
 800035c:	f000 82d9 	beq.w	8000912 <printf+0x64a>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000360:	f88d 001f 	strb.w	r0, [sp, #31]
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000364:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000368:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 800036c:	fa5f f28c 	uxtb.w	r2, ip
 8000370:	2a01      	cmp	r2, #1
 8000372:	f240 82d0 	bls.w	8000916 <printf+0x64e>
 8000376:	2873      	cmp	r0, #115	; 0x73
 8000378:	f000 82cd 	beq.w	8000916 <printf+0x64e>
 800037c:	2878      	cmp	r0, #120	; 0x78
 800037e:	f000 82ca 	beq.w	8000916 <printf+0x64e>
 8000382:	2825      	cmp	r0, #37	; 0x25
 8000384:	f000 82c7 	beq.w	8000916 <printf+0x64e>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000388:	f88d 0020 	strb.w	r0, [sp, #32]
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 800038c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000390:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 8000394:	b2cb      	uxtb	r3, r1
 8000396:	2b01      	cmp	r3, #1
 8000398:	f240 82bf 	bls.w	800091a <printf+0x652>
 800039c:	2873      	cmp	r0, #115	; 0x73
 800039e:	f000 82bc 	beq.w	800091a <printf+0x652>
 80003a2:	2878      	cmp	r0, #120	; 0x78
 80003a4:	f000 82b9 	beq.w	800091a <printf+0x652>
 80003a8:	2825      	cmp	r0, #37	; 0x25
 80003aa:	f000 82b6 	beq.w	800091a <printf+0x652>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 80003ae:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 80003b2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80003b6:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 80003ba:	fa5f f28c 	uxtb.w	r2, ip
 80003be:	2a01      	cmp	r2, #1
 80003c0:	f240 82ad 	bls.w	800091e <printf+0x656>
 80003c4:	2873      	cmp	r0, #115	; 0x73
 80003c6:	f000 82aa 	beq.w	800091e <printf+0x656>
 80003ca:	2878      	cmp	r0, #120	; 0x78
 80003cc:	f000 82a7 	beq.w	800091e <printf+0x656>
 80003d0:	2825      	cmp	r0, #37	; 0x25
 80003d2:	f000 82a4 	beq.w	800091e <printf+0x656>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 80003d6:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 80003da:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80003de:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 80003e2:	b2cb      	uxtb	r3, r1
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	f240 829c 	bls.w	8000922 <printf+0x65a>
 80003ea:	2873      	cmp	r0, #115	; 0x73
 80003ec:	f000 8299 	beq.w	8000922 <printf+0x65a>
 80003f0:	2878      	cmp	r0, #120	; 0x78
 80003f2:	f000 8296 	beq.w	8000922 <printf+0x65a>
 80003f6:	2825      	cmp	r0, #37	; 0x25
 80003f8:	f000 8293 	beq.w	8000922 <printf+0x65a>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 80003fc:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000400:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000404:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000408:	fa5f f28c 	uxtb.w	r2, ip
 800040c:	2a01      	cmp	r2, #1
 800040e:	f240 828a 	bls.w	8000926 <printf+0x65e>
 8000412:	2873      	cmp	r0, #115	; 0x73
 8000414:	f000 8287 	beq.w	8000926 <printf+0x65e>
 8000418:	2878      	cmp	r0, #120	; 0x78
 800041a:	f000 8284 	beq.w	8000926 <printf+0x65e>
 800041e:	2825      	cmp	r0, #37	; 0x25
 8000420:	f000 8281 	beq.w	8000926 <printf+0x65e>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000424:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000428:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800042c:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 8000430:	b2cb      	uxtb	r3, r1
 8000432:	2b01      	cmp	r3, #1
 8000434:	f240 844a 	bls.w	8000ccc <printf+0xa04>
 8000438:	2873      	cmp	r0, #115	; 0x73
 800043a:	f000 8447 	beq.w	8000ccc <printf+0xa04>
 800043e:	2878      	cmp	r0, #120	; 0x78
 8000440:	f000 8444 	beq.w	8000ccc <printf+0xa04>
 8000444:	2825      	cmp	r0, #37	; 0x25
 8000446:	f000 8441 	beq.w	8000ccc <printf+0xa04>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 800044a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800044e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
                                }
                        }
                        // "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
                        switch (*s++){
 8000452:	3501      	adds	r5, #1
 8000454:	2864      	cmp	r0, #100	; 0x64
 8000456:	f000 80a5 	beq.w	80005a4 <printf+0x2dc>
 800045a:	d817      	bhi.n	800048c <printf+0x1c4>
 800045c:	2825      	cmp	r0, #37	; 0x25
 800045e:	f000 8088 	beq.w	8000572 <printf+0x2aa>
 8000462:	2863      	cmp	r0, #99	; 0x63
 8000464:	f47f af3b 	bne.w	80002de <printf+0x16>
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
 8000468:	f858 0b04 	ldr.w	r0, [r8], #4
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 800046c:	4b4b      	ldr	r3, [pc, #300]	; (800059c <printf+0x2d4>)
 800046e:	b2c0      	uxtb	r0, r0
 8000470:	4798      	blx	r3
        va_list args;
        char        *s=fmt;
        char        format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
        va_start(args, fmt);
        while (*s){
 8000472:	7828      	ldrb	r0, [r5, #0]
 8000474:	2800      	cmp	r0, #0
 8000476:	f47f af36 	bne.w	80002e6 <printf+0x1e>
                        s++;
                }
        }
        va_end(args);
        return;
}
 800047a:	b00d      	add	sp, #52	; 0x34
 800047c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000480:	b004      	add	sp, #16
 8000482:	4770      	bx	lr

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 8000484:	4945      	ldr	r1, [pc, #276]	; (800059c <printf+0x2d4>)
 8000486:	4788      	blx	r1
                                        break;
                        }
                }
                else {
                        PrintChar("%c", *s);
                        s++;
 8000488:	3501      	adds	r5, #1
 800048a:	e728      	b.n	80002de <printf+0x16>
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
                        switch (*s++){
 800048c:	2873      	cmp	r0, #115	; 0x73
 800048e:	d073      	beq.n	8000578 <printf+0x2b0>
 8000490:	2878      	cmp	r0, #120	; 0x78
 8000492:	f47f af24 	bne.w	80002de <printf+0x16>
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
 8000496:	f858 2b04 	ldr.w	r2, [r8], #4
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800049a:	f89d 301c 	ldrb.w	r3, [sp, #28]

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800049e:	2400      	movs	r4, #0
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
 80004a0:	920b      	str	r2, [sp, #44]	; 0x2c

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80004a2:	940a      	str	r4, [sp, #40]	; 0x28
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	f000 8471 	beq.w	8000d8c <printf+0xac4>
                if (c=='x') break;
 80004aa:	2b78      	cmp	r3, #120	; 0x78
 80004ac:	d033      	beq.n	8000516 <printf+0x24e>
 80004ae:	4626      	mov	r6, r4
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80004b0:	46a2      	mov	sl, r4


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 80004b2:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80004b6:	fa5f fc81 	uxtb.w	ip, r1
 80004ba:	f1bc 0f08 	cmp.w	ip, #8
 80004be:	d854      	bhi.n	800056a <printf+0x2a2>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80004c0:	aa0c      	add	r2, sp, #48	; 0x30
 80004c2:	eb02 0e06 	add.w	lr, r2, r6
 80004c6:	f81e 2c14 	ldrb.w	r2, [lr, #-20]
 80004ca:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 80004ce:	b2c3      	uxtb	r3, r0
 80004d0:	2b09      	cmp	r3, #9
 80004d2:	f200 820f 	bhi.w	80008f4 <printf+0x62c>
 80004d6:	2300      	movs	r3, #0
 80004d8:	a804      	add	r0, sp, #16
 80004da:	f10d 0e1c 	add.w	lr, sp, #28
                                tol[j] = s[i++];
 80004de:	3601      	adds	r6, #1
 80004e0:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80004e2:	f81e 2006 	ldrb.w	r2, [lr, r6]
 80004e6:	3301      	adds	r3, #1
 80004e8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80004ec:	fa5f fc81 	uxtb.w	ip, r1
 80004f0:	f1bc 0f09 	cmp.w	ip, #9
 80004f4:	d9f3      	bls.n	80004de <printf+0x216>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80004f6:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 80004fa:	4473      	add	r3, lr
                        i--;
                        DecToLong(tol, &flagcnt);
 80004fc:	a90a      	add	r1, sp, #40	; 0x28
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80004fe:	f803 ac20 	strb.w	sl, [r3, #-32]
                        i--;
 8000502:	3e01      	subs	r6, #1
                        DecToLong(tol, &flagcnt);
 8000504:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000506:	3601      	adds	r6, #1
 8000508:	aa0c      	add	r2, sp, #48	; 0x30
 800050a:	1990      	adds	r0, r2, r6
 800050c:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8000510:	b10b      	cbz	r3, 8000516 <printf+0x24e>
                if (c=='x') break;
 8000512:	2b78      	cmp	r3, #120	; 0x78
 8000514:	d1cd      	bne.n	80004b2 <printf+0x1ea>
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 800051a:	f403 007f 	and.w	r0, r3, #16711680	; 0xff0000
 800051e:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8000522:	1201      	asrs	r1, r0, #8
 8000524:	ea41 200c 	orr.w	r0, r1, ip, lsl #8
 8000528:	ea40 6c03 	orr.w	ip, r0, r3, lsl #24
 800052c:	ea4c 6113 	orr.w	r1, ip, r3, lsr #24
 8000530:	910b      	str	r1, [sp, #44]	; 0x2c
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000532:	2a00      	cmp	r2, #0
 8000534:	f000 80df 	beq.w	80006f6 <printf+0x42e>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8000538:	f012 0f01 	tst.w	r2, #1
 800053c:	f000 8297 	beq.w	8000a6e <printf+0x7a6>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8000540:	43d0      	mvns	r0, r2
 8000542:	3008      	adds	r0, #8
 8000544:	eb00 71d0 	add.w	r1, r0, r0, lsr #31
 8000548:	104a      	asrs	r2, r1, #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 800054a:	ab0b      	add	r3, sp, #44	; 0x2c
 800054c:	f813 e002 	ldrb.w	lr, [r3, r2]
                        if (lHex!=0) leading_zero=false;
 8000550:	f01e 030f 	ands.w	r3, lr, #15
 8000554:	f000 83d3 	beq.w	8000cfe <printf+0xa36>
                        if (lHex<10) lHex+='0';
 8000558:	2b09      	cmp	r3, #9
 800055a:	f240 8438 	bls.w	8000dce <printf+0xb06>
                        else         lHex+='A'-10;
 800055e:	3337      	adds	r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000560:	490e      	ldr	r1, [pc, #56]	; (800059c <printf+0x2d4>)
 8000562:	4618      	mov	r0, r3
 8000564:	4788      	blx	r1
 8000566:	2100      	movs	r1, #0
 8000568:	e3cf      	b.n	8000d0a <printf+0xa42>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 800056a:	2b30      	cmp	r3, #48	; 0x30
 800056c:	bf08      	it	eq
 800056e:	2401      	moveq	r4, #1
 8000570:	e7c9      	b.n	8000506 <printf+0x23e>
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <printf+0x2d4>)
 8000574:	4798      	blx	r3
                                case 's' :
                                        PrintString(format, va_arg(args, char *));
                                        break;
                                case '%' :
                                        PrintChar("%c", '%');
                                        break;
 8000576:	e6b2      	b.n	80002de <printf+0x16>
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
                                        break;
                                case 's' :
                                        PrintString(format, va_arg(args, char *));
 8000578:	f858 4b04 	ldr.w	r4, [r8], #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 800057c:	2c00      	cmp	r4, #0
 800057e:	f43f aeae 	beq.w	80002de <printf+0x16>
        while (*s) print_byte(*s++);
 8000582:	7820      	ldrb	r0, [r4, #0]
 8000584:	2800      	cmp	r0, #0
 8000586:	f43f aeaa 	beq.w	80002de <printf+0x16>
 800058a:	4e04      	ldr	r6, [pc, #16]	; (800059c <printf+0x2d4>)
 800058c:	47b0      	blx	r6
 800058e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000592:	2800      	cmp	r0, #0
 8000594:	d1fa      	bne.n	800058c <printf+0x2c4>
 8000596:	e6a2      	b.n	80002de <printf+0x16>
 8000598:	0800027d 	.word	0x0800027d
 800059c:	0800101d 	.word	0x0800101d
 80005a0:	66666667 	.word	0x66666667
        bool        leading_zero=true;                        // long형의 data를 출력하기 위한 변수.
        long        divisor, result, remainder;


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80005a4:	f89d 301c 	ldrb.w	r3, [sp, #28]
void PrintDec(char *fmt, int l)
{
        int        i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
        long        flagcnt=0;                                        // "%08lx"에서 "8"을 찾아서 long형으로.
 80005a8:	2600      	movs	r6, #0
                        switch (*s++){
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
 80005aa:	f858 bb04 	ldr.w	fp, [r8], #4
void PrintDec(char *fmt, int l)
{
        int        i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
        long        flagcnt=0;                                        // "%08lx"에서 "8"을 찾아서 long형으로.
 80005ae:	960a      	str	r6, [sp, #40]	; 0x28
        bool        leading_zero=true;                        // long형의 data를 출력하기 위한 변수.
        long        divisor, result, remainder;


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	f000 80f3 	beq.w	800079c <printf+0x4d4>
                if (c=='d') break;
 80005b6:	2b64      	cmp	r3, #100	; 0x64
 80005b8:	f000 80f0 	beq.w	800079c <printf+0x4d4>
 80005bc:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80005be:	46b2      	mov	sl, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
 80005c0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80005c4:	fa5f fe82 	uxtb.w	lr, r2
 80005c8:	f1be 0f08 	cmp.w	lr, #8
 80005cc:	f200 808f 	bhi.w	80006ee <printf+0x426>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80005d0:	a80c      	add	r0, sp, #48	; 0x30
 80005d2:	1903      	adds	r3, r0, r4
 80005d4:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80005d8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80005dc:	fa5f fc81 	uxtb.w	ip, r1
 80005e0:	f1bc 0f09 	cmp.w	ip, #9
 80005e4:	f200 8183 	bhi.w	80008ee <printf+0x626>
 80005e8:	2300      	movs	r3, #0
 80005ea:	a804      	add	r0, sp, #16
 80005ec:	f10d 0e1c 	add.w	lr, sp, #28
                                tol[j] = s[i++];
 80005f0:	3401      	adds	r4, #1
 80005f2:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80005f4:	f81e 2004 	ldrb.w	r2, [lr, r4]
 80005f8:	3301      	adds	r3, #1
 80005fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80005fe:	fa5f fc81 	uxtb.w	ip, r1
 8000602:	f1bc 0f09 	cmp.w	ip, #9
 8000606:	d9f3      	bls.n	80005f0 <printf+0x328>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000608:	aa0c      	add	r2, sp, #48	; 0x30
 800060a:	eb02 0e03 	add.w	lr, r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 800060e:	a90a      	add	r1, sp, #40	; 0x28
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000610:	f80e ac20 	strb.w	sl, [lr, #-32]
                        i--;
 8000614:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 8000616:	47b8      	blx	r7
        bool        leading_zero=true;                        // long형의 data를 출력하기 위한 변수.
        long        divisor, result, remainder;


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000618:	3401      	adds	r4, #1
 800061a:	a80c      	add	r0, sp, #48	; 0x30
 800061c:	1903      	adds	r3, r0, r4
 800061e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000622:	b10b      	cbz	r3, 8000628 <printf+0x360>
                if (c=='d') break;
 8000624:	2b64      	cmp	r3, #100	; 0x64
 8000626:	d1cb      	bne.n	80005c0 <printf+0x2f8>
                else continue;
        }


        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000628:	990a      	ldr	r1, [sp, #40]	; 0x28
 800062a:	2900      	cmp	r1, #0
 800062c:	f000 80b6 	beq.w	800079c <printf+0x4d4>
                if (flagcnt>9) flagcnt=9;
 8000630:	2909      	cmp	r1, #9
 8000632:	f340 82dd 	ble.w	8000bf0 <printf+0x928>
 8000636:	2009      	movs	r0, #9
 8000638:	2407      	movs	r4, #7
 800063a:	900a      	str	r0, [sp, #40]	; 0x28
 800063c:	2106      	movs	r1, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 800063e:	4620      	mov	r0, r4
 8000640:	f000 0e01 	and.w	lr, r0, #1
                retval *= num;
 8000644:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000646:	1e42      	subs	r2, r0, #1
 8000648:	b190      	cbz	r0, 8000670 <printf+0x3a8>
 800064a:	f1be 0f00 	cmp.w	lr, #0
 800064e:	d005      	beq.n	800065c <printf+0x394>
 8000650:	3a01      	subs	r2, #1
 8000652:	f1b2 3fff 	cmp.w	r2, #4294967295
                retval *= num;
 8000656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 800065a:	d009      	beq.n	8000670 <printf+0x3a8>
                retval *= num;
 800065c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000660:	00d8      	lsls	r0, r3, #3
 8000662:	eb00 0343 	add.w	r3, r0, r3, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000666:	3a02      	subs	r2, #2
                retval *= num;
 8000668:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800066a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800066e:	d1f5      	bne.n	800065c <printf+0x394>


        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000670:	fb9b faf3 	sdiv	sl, fp, r3
 8000674:	fb03 bb1a 	mls	fp, r3, sl, fp
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000678:	2c00      	cmp	r4, #0
 800067a:	f000 8385 	beq.w	8000d88 <printf+0xac0>
 800067e:	f001 0201 	and.w	r2, r1, #1
                retval *= num;
 8000682:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000684:	1e4b      	subs	r3, r1, #1
 8000686:	b181      	cbz	r1, 80006aa <printf+0x3e2>
 8000688:	b12a      	cbz	r2, 8000696 <printf+0x3ce>
 800068a:	3b01      	subs	r3, #1
 800068c:	f1b3 3fff 	cmp.w	r3, #4294967295
                retval *= num;
 8000690:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000694:	d009      	beq.n	80006aa <printf+0x3e2>
                retval *= num;
 8000696:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800069a:	00ca      	lsls	r2, r1, #3
 800069c:	eb02 0441 	add.w	r4, r2, r1, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006a0:	3b02      	subs	r3, #2
                retval *= num;
 80006a2:	0064      	lsls	r4, r4, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80006a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a8:	d1f5      	bne.n	8000696 <printf+0x3ce>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80006aa:	2301      	movs	r3, #1
 80006ac:	f8df a27c 	ldr.w	sl, [pc, #636]	; 800092c <printf+0x664>
 80006b0:	9503      	str	r5, [sp, #12]
 80006b2:	4635      	mov	r5, r6
 80006b4:	461e      	mov	r6, r3
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006b6:	fb9b f1f4 	sdiv	r1, fp, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 80006ba:	b2c8      	uxtb	r0, r1
 80006bc:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80006be:	fb04 bb11 	mls	fp, r4, r1, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 80006c2:	2900      	cmp	r1, #0
 80006c4:	f040 8110 	bne.w	80008e8 <printf+0x620>
 80006c8:	2c01      	cmp	r4, #1
 80006ca:	f000 810d 	beq.w	80008e8 <printf+0x620>


                        if (leading_zero==true){
 80006ce:	2e00      	cmp	r6, #0
 80006d0:	f000 810a 	beq.w	80008e8 <printf+0x620>
                                if (flag0)        print_byte('0');
 80006d4:	2030      	movs	r0, #48	; 0x30
 80006d6:	b905      	cbnz	r5, 80006da <printf+0x412>
                                else                print_byte(' ');
 80006d8:	2020      	movs	r0, #32
 80006da:	47d0      	blx	sl
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80006dc:	fb89 0e04 	smull	r0, lr, r9, r4
 80006e0:	17e0      	asrs	r0, r4, #31
 80006e2:	ebc0 04ae 	rsb	r4, r0, lr, asr #2
 80006e6:	2c00      	cmp	r4, #0
 80006e8:	dce5      	bgt.n	80006b6 <printf+0x3ee>
 80006ea:	9d03      	ldr	r5, [sp, #12]
 80006ec:	e5f7      	b.n	80002de <printf+0x16>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 80006ee:	2b30      	cmp	r3, #48	; 0x30
 80006f0:	bf08      	it	eq
 80006f2:	2601      	moveq	r6, #1
 80006f4:	e790      	b.n	8000618 <printf+0x350>
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80006f6:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80006fa:	0913      	lsrs	r3, r2, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80006fc:	f002 040f 	and.w	r4, r2, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000700:	f040 82dc 	bne.w	8000cbc <printf+0x9f4>
 8000704:	4e89      	ldr	r6, [pc, #548]	; (800092c <printf+0x664>)
 8000706:	2301      	movs	r3, #1
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000708:	2c00      	cmp	r4, #0
 800070a:	f040 8291 	bne.w	8000c30 <printf+0x968>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 800070e:	2b00      	cmp	r3, #0
 8000710:	f000 8345 	beq.w	8000d9e <printf+0xad6>
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000714:	f89d c02d 	ldrb.w	ip, [sp, #45]	; 0x2d
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000718:	2201      	movs	r2, #1
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800071a:	ea5f 131c 	movs.w	r3, ip, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800071e:	f00c 040f 	and.w	r4, ip, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000722:	f000 8294 	beq.w	8000c4e <printf+0x986>
                        if (uHex<10) uHex+='0';
 8000726:	2b09      	cmp	r3, #9
 8000728:	f240 835c 	bls.w	8000de4 <printf+0xb1c>
                        else         uHex+='A'-10;
 800072c:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte(uHex);
 8000730:	47b0      	blx	r6
 8000732:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000734:	2c00      	cmp	r4, #0
 8000736:	f040 8291 	bne.w	8000c5c <printf+0x994>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 800073a:	2b00      	cmp	r3, #0
 800073c:	f000 8332 	beq.w	8000da4 <printf+0xadc>
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000740:	f89d e02e 	ldrb.w	lr, [sp, #46]	; 0x2e
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000744:	2201      	movs	r2, #1
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000746:	ea5f 131e 	movs.w	r3, lr, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800074a:	f00e 040f 	and.w	r4, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800074e:	f000 8294 	beq.w	8000c7a <printf+0x9b2>
                        if (uHex<10) uHex+='0';
 8000752:	2b09      	cmp	r3, #9
 8000754:	f240 8329 	bls.w	8000daa <printf+0xae2>
                        else         uHex+='A'-10;
 8000758:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte(uHex);
 800075c:	47b0      	blx	r6
 800075e:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000760:	2c00      	cmp	r4, #0
 8000762:	f040 8291 	bne.w	8000c88 <printf+0x9c0>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000766:	2b00      	cmp	r3, #0
 8000768:	f000 8322 	beq.w	8000db0 <printf+0xae8>
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 800076c:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000770:	2201      	movs	r2, #1
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000772:	0903      	lsrs	r3, r0, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000774:	f000 040f 	and.w	r4, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000778:	f000 8294 	beq.w	8000ca4 <printf+0x9dc>
                        if (uHex<10) uHex+='0';
 800077c:	2b09      	cmp	r3, #9
 800077e:	f240 8294 	bls.w	8000caa <printf+0x9e2>
                        else         uHex+='A'-10;
 8000782:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte(uHex);
 8000786:	47b0      	blx	r6
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000788:	2c00      	cmp	r4, #0
 800078a:	f000 8292 	beq.w	8000cb2 <printf+0x9ea>
                        if (lHex<10) lHex+='0';
 800078e:	2c09      	cmp	r4, #9
 8000790:	f240 828f 	bls.w	8000cb2 <printf+0x9ea>
                        else         lHex+='A'-10;
 8000794:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte(lHex);
 8000798:	47b0      	blx	r6
 800079a:	e5a0      	b.n	80002de <printf+0x16>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800079c:	4964      	ldr	r1, [pc, #400]	; (8000930 <printf+0x668>)
 800079e:	ea4f 76eb 	mov.w	r6, fp, asr #31
 80007a2:	fb81 3c0b 	smull	r3, ip, r1, fp
                        remainder %= divisor;
 80007a6:	4c63      	ldr	r4, [pc, #396]	; (8000934 <printf+0x66c>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007a8:	ebc6 732c 	rsb	r3, r6, ip, asr #28
                        remainder %= divisor;
 80007ac:	fb04 bb13 	mls	fp, r4, r3, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	f000 80d7 	beq.w	8000964 <printf+0x69c>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80007b6:	fa5f fe83 	uxtb.w	lr, r3
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007ba:	4e5f      	ldr	r6, [pc, #380]	; (8000938 <printf+0x670>)
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80007bc:	f10e 0030 	add.w	r0, lr, #48	; 0x30
 80007c0:	4c5a      	ldr	r4, [pc, #360]	; (800092c <printf+0x664>)
 80007c2:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007c4:	fb86 600b 	smull	r6, r0, r6, fp
 80007c8:	ea4f 73eb 	mov.w	r3, fp, asr #31
                        remainder %= divisor;
 80007cc:	4a5b      	ldr	r2, [pc, #364]	; (800093c <printf+0x674>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007ce:	ebc3 6360 	rsb	r3, r3, r0, asr #25
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80007d2:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80007d4:	fb02 b613 	mls	r6, r2, r3, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f000 80d2 	beq.w	8000982 <printf+0x6ba>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80007de:	fa5f fc83 	uxtb.w	ip, r3
 80007e2:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 80007e6:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007e8:	4855      	ldr	r0, [pc, #340]	; (8000940 <printf+0x678>)
 80007ea:	17f3      	asrs	r3, r6, #31
 80007ec:	fb80 0e06 	smull	r0, lr, r0, r6
                        remainder %= divisor;
 80007f0:	4a54      	ldr	r2, [pc, #336]	; (8000944 <printf+0x67c>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80007f2:	ebc3 53ae 	rsb	r3, r3, lr, asr #22
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80007f6:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80007f8:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	f000 80d0 	beq.w	80009a2 <printf+0x6da>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000802:	b2d9      	uxtb	r1, r3
 8000804:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000808:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800080a:	484f      	ldr	r0, [pc, #316]	; (8000948 <printf+0x680>)
 800080c:	17f3      	asrs	r3, r6, #31
 800080e:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8000812:	4a4e      	ldr	r2, [pc, #312]	; (800094c <printf+0x684>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000814:	ebc3 43ac 	rsb	r3, r3, ip, asr #18
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000818:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800081a:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 800081e:	2b00      	cmp	r3, #0
 8000820:	f000 80cf 	beq.w	80009c2 <printf+0x6fa>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000824:	fa5f fe83 	uxtb.w	lr, r3
 8000828:	f10e 0030 	add.w	r0, lr, #48	; 0x30
 800082c:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800082e:	4848      	ldr	r0, [pc, #288]	; (8000950 <printf+0x688>)
 8000830:	17f3      	asrs	r3, r6, #31
 8000832:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8000836:	4a47      	ldr	r2, [pc, #284]	; (8000954 <printf+0x68c>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000838:	ebc3 336c 	rsb	r3, r3, ip, asr #13
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 800083c:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800083e:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000842:	2b00      	cmp	r3, #0
 8000844:	f000 80cd 	beq.w	80009e2 <printf+0x71a>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000848:	b2d9      	uxtb	r1, r3
 800084a:	f101 0030 	add.w	r0, r1, #48	; 0x30
 800084e:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000850:	4841      	ldr	r0, [pc, #260]	; (8000958 <printf+0x690>)
 8000852:	17f3      	asrs	r3, r6, #31
 8000854:	fb80 0206 	smull	r0, r2, r0, r6
                        remainder %= divisor;
 8000858:	f242 7e10 	movw	lr, #10000	; 0x2710
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800085c:	ebc3 3322 	rsb	r3, r3, r2, asr #12
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000860:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000862:	fb0e 6613 	mls	r6, lr, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000866:	2b00      	cmp	r3, #0
 8000868:	f000 80cc 	beq.w	8000a04 <printf+0x73c>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 800086c:	fa5f fc83 	uxtb.w	ip, r3
 8000870:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 8000874:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000876:	4839      	ldr	r0, [pc, #228]	; (800095c <printf+0x694>)
 8000878:	17f3      	asrs	r3, r6, #31
 800087a:	fb80 0206 	smull	r0, r2, r0, r6
                        remainder %= divisor;
 800087e:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000882:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000886:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000888:	fb0e 6613 	mls	r6, lr, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 800088c:	2b00      	cmp	r3, #0
 800088e:	f000 80ca 	beq.w	8000a26 <printf+0x75e>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000892:	b2d9      	uxtb	r1, r3
 8000894:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000898:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800089a:	4831      	ldr	r0, [pc, #196]	; (8000960 <printf+0x698>)
 800089c:	17f3      	asrs	r3, r6, #31
 800089e:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 80008a2:	2264      	movs	r2, #100	; 0x64
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80008a4:	ebc3 136c 	rsb	r3, r3, ip, asr #5
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80008a8:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80008aa:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	f000 80c9 	beq.w	8000a46 <printf+0x77e>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80008b4:	fa5f fe83 	uxtb.w	lr, r3
 80008b8:	f10e 0030 	add.w	r0, lr, #48	; 0x30
 80008bc:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80008be:	fb89 3c06 	smull	r3, ip, r9, r6
 80008c2:	17f3      	asrs	r3, r6, #31
 80008c4:	ebc3 03ac 	rsb	r3, r3, ip, asr #2
                        remainder %= divisor;
 80008c8:	eb03 0283 	add.w	r2, r3, r3, lsl #2


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80008cc:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80008ce:	eba6 0642 	sub.w	r6, r6, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f000 80c7 	beq.w	8000a66 <printf+0x79e>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80008d8:	b2d9      	uxtb	r1, r3
 80008da:	f101 0030 	add.w	r0, r1, #48	; 0x30
 80008de:	47a0      	blx	r4
 80008e0:	b2f0      	uxtb	r0, r6
 80008e2:	3030      	adds	r0, #48	; 0x30
 80008e4:	47a0      	blx	r4
 80008e6:	e4fa      	b.n	80002de <printf+0x16>

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 80008e8:	47d0      	blx	sl
 80008ea:	2600      	movs	r6, #0
 80008ec:	e6f6      	b.n	80006dc <printf+0x414>

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80008ee:	2300      	movs	r3, #0
 80008f0:	a804      	add	r0, sp, #16
 80008f2:	e689      	b.n	8000608 <printf+0x340>

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80008f4:	2300      	movs	r3, #0
 80008f6:	a804      	add	r0, sp, #16
 80008f8:	e5fd      	b.n	80004f6 <printf+0x22e>
        while (*s){
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
 80008fa:	2301      	movs	r3, #1
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
 80008fc:	a90c      	add	r1, sp, #48	; 0x30
 80008fe:	eb01 0c03 	add.w	ip, r1, r3
                                        format[i] = '\0';
 8000902:	2200      	movs	r2, #0
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
 8000904:	f80c 0c14 	strb.w	r0, [ip, #-20]
                                        format[i] = '\0';
 8000908:	f80c 2c13 	strb.w	r2, [ip, #-19]
                                        break;
 800090c:	e5a1      	b.n	8000452 <printf+0x18a>
                                }
                                else {
                                        format[i++] = *s++;
 800090e:	2302      	movs	r3, #2
 8000910:	e7f4      	b.n	80008fc <printf+0x634>
 8000912:	2303      	movs	r3, #3
 8000914:	e7f2      	b.n	80008fc <printf+0x634>
 8000916:	2304      	movs	r3, #4
 8000918:	e7f0      	b.n	80008fc <printf+0x634>
 800091a:	2305      	movs	r3, #5
 800091c:	e7ee      	b.n	80008fc <printf+0x634>
 800091e:	2306      	movs	r3, #6
 8000920:	e7ec      	b.n	80008fc <printf+0x634>
 8000922:	2307      	movs	r3, #7
 8000924:	e7ea      	b.n	80008fc <printf+0x634>
 8000926:	2308      	movs	r3, #8
 8000928:	e7e8      	b.n	80008fc <printf+0x634>
 800092a:	bf00      	nop
 800092c:	0800101d 	.word	0x0800101d
 8000930:	44b82fa1 	.word	0x44b82fa1
 8000934:	3b9aca00 	.word	0x3b9aca00
 8000938:	55e63b89 	.word	0x55e63b89
 800093c:	05f5e100 	.word	0x05f5e100
 8000940:	6b5fca6b 	.word	0x6b5fca6b
 8000944:	00989680 	.word	0x00989680
 8000948:	431bde83 	.word	0x431bde83
 800094c:	000f4240 	.word	0x000f4240
 8000950:	14f8b589 	.word	0x14f8b589
 8000954:	000186a0 	.word	0x000186a0
 8000958:	68db8bad 	.word	0x68db8bad
 800095c:	10624dd3 	.word	0x10624dd3
 8000960:	51eb851f 	.word	0x51eb851f
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000964:	4ea6      	ldr	r6, [pc, #664]	; (8000c00 <printf+0x938>)
 8000966:	ea4f 73eb 	mov.w	r3, fp, asr #31
 800096a:	fb86 600b 	smull	r6, r0, r6, fp
                        remainder %= divisor;
 800096e:	4aa5      	ldr	r2, [pc, #660]	; (8000c04 <printf+0x93c>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000970:	ebc3 6360 	rsb	r3, r3, r0, asr #25
 8000974:	4ca4      	ldr	r4, [pc, #656]	; (8000c08 <printf+0x940>)
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 8000976:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000978:	fb02 b613 	mls	r6, r2, r3, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 800097c:	2b00      	cmp	r3, #0
 800097e:	f47f af2e 	bne.w	80007de <printf+0x516>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000982:	2900      	cmp	r1, #0
 8000984:	f43f af2b 	beq.w	80007de <printf+0x516>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000988:	48a0      	ldr	r0, [pc, #640]	; (8000c0c <printf+0x944>)
 800098a:	17f3      	asrs	r3, r6, #31
 800098c:	fb80 0e06 	smull	r0, lr, r0, r6
                        remainder %= divisor;
 8000990:	4a9f      	ldr	r2, [pc, #636]	; (8000c10 <printf+0x948>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000992:	ebc3 53ae 	rsb	r3, r3, lr, asr #22
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000996:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000998:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 800099c:	2b00      	cmp	r3, #0
 800099e:	f47f af30 	bne.w	8000802 <printf+0x53a>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80009a2:	2900      	cmp	r1, #0
 80009a4:	f43f af2d 	beq.w	8000802 <printf+0x53a>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80009a8:	489a      	ldr	r0, [pc, #616]	; (8000c14 <printf+0x94c>)
 80009aa:	17f3      	asrs	r3, r6, #31
 80009ac:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 80009b0:	4a99      	ldr	r2, [pc, #612]	; (8000c18 <printf+0x950>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80009b2:	ebc3 43ac 	rsb	r3, r3, ip, asr #18
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80009b6:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80009b8:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 80009bc:	2b00      	cmp	r3, #0
 80009be:	f47f af31 	bne.w	8000824 <printf+0x55c>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80009c2:	2900      	cmp	r1, #0
 80009c4:	f43f af2e 	beq.w	8000824 <printf+0x55c>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80009c8:	4894      	ldr	r0, [pc, #592]	; (8000c1c <printf+0x954>)
 80009ca:	17f3      	asrs	r3, r6, #31
 80009cc:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 80009d0:	4a93      	ldr	r2, [pc, #588]	; (8000c20 <printf+0x958>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80009d2:	ebc3 336c 	rsb	r3, r3, ip, asr #13
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80009d6:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80009d8:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f47f af33 	bne.w	8000848 <printf+0x580>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80009e2:	2900      	cmp	r1, #0
 80009e4:	f43f af30 	beq.w	8000848 <printf+0x580>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80009e8:	488e      	ldr	r0, [pc, #568]	; (8000c24 <printf+0x95c>)
 80009ea:	17f3      	asrs	r3, r6, #31
 80009ec:	fb80 0206 	smull	r0, r2, r0, r6
                        remainder %= divisor;
 80009f0:	f242 7e10 	movw	lr, #10000	; 0x2710
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80009f4:	ebc3 3322 	rsb	r3, r3, r2, asr #12
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80009f8:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80009fa:	fb0e 6613 	mls	r6, lr, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f47f af34 	bne.w	800086c <printf+0x5a4>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000a04:	2900      	cmp	r1, #0
 8000a06:	f43f af31 	beq.w	800086c <printf+0x5a4>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000a0a:	4887      	ldr	r0, [pc, #540]	; (8000c28 <printf+0x960>)
 8000a0c:	17f3      	asrs	r3, r6, #31
 8000a0e:	fb80 0206 	smull	r0, r2, r0, r6
                        remainder %= divisor;
 8000a12:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000a16:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000a1a:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000a1c:	fb0e 6613 	mls	r6, lr, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f47f af36 	bne.w	8000892 <printf+0x5ca>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000a26:	2900      	cmp	r1, #0
 8000a28:	f43f af33 	beq.w	8000892 <printf+0x5ca>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000a2c:	487f      	ldr	r0, [pc, #508]	; (8000c2c <printf+0x964>)
 8000a2e:	17f3      	asrs	r3, r6, #31
 8000a30:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8000a34:	2264      	movs	r2, #100	; 0x64
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000a36:	ebc3 136c 	rsb	r3, r3, ip, asr #5
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000a3a:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000a3c:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f47f af37 	bne.w	80008b4 <printf+0x5ec>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000a46:	2900      	cmp	r1, #0
 8000a48:	f43f af34 	beq.w	80008b4 <printf+0x5ec>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000a4c:	fb89 3c06 	smull	r3, ip, r9, r6
 8000a50:	17f3      	asrs	r3, r6, #31
 8000a52:	ebc3 03ac 	rsb	r3, r3, ip, asr #2
                        remainder %= divisor;
 8000a56:	eb03 0283 	add.w	r2, r3, r3, lsl #2


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000a5a:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000a5c:	eba6 0642 	sub.w	r6, r6, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f47f af39 	bne.w	80008d8 <printf+0x610>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000a66:	2900      	cmp	r1, #0
 8000a68:	f47f af3a 	bne.w	80008e0 <printf+0x618>
 8000a6c:	e734      	b.n	80008d8 <printf+0x610>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000a6e:	2101      	movs	r1, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000a70:	f1c2 0c08 	rsb	ip, r2, #8
 8000a74:	eb0c 72dc 	add.w	r2, ip, ip, lsr #31
 8000a78:	1052      	asrs	r2, r2, #1
 8000a7a:	2a03      	cmp	r2, #3
 8000a7c:	f73f ac2f 	bgt.w	80002de <printf+0x16>
// 역할 : printf() 중 일부를 간단하게 구현.
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void printf(char *fmt, ...)
 8000a80:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
 8000a84:	eb0b 0302 	add.w	r3, fp, r2
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000a88:	f81b e002 	ldrb.w	lr, [fp, r2]
 8000a8c:	43d8      	mvns	r0, r3
 8000a8e:	f000 0601 	and.w	r6, r0, #1
 8000a92:	9603      	str	r6, [sp, #12]
 8000a94:	1c5e      	adds	r6, r3, #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000a96:	ea5f 101e 	movs.w	r0, lr, lsr #4
// 역할 : printf() 중 일부를 간단하게 구현.
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void printf(char *fmt, ...)
 8000a9a:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8000a9e:	f8df a168 	ldr.w	sl, [pc, #360]	; 8000c08 <printf+0x940>
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000aa2:	f00e 020f 	and.w	r2, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000aa6:	f040 8113 	bne.w	8000cd0 <printf+0xa08>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	f000 8198 	beq.w	8000de0 <printf+0xb18>
                                if (flag0) print_byte('0');
 8000ab0:	2c00      	cmp	r4, #0
 8000ab2:	f040 8154 	bne.w	8000d5e <printf+0xa96>
                                else       print_byte(' ');
 8000ab6:	2020      	movs	r0, #32
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000ab8:	9202      	str	r2, [sp, #8]
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	47d0      	blx	sl
 8000abe:	9a02      	ldr	r2, [sp, #8]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	9b01      	ldr	r3, [sp, #4]
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f000 8110 	beq.w	8000cea <printf+0xa22>
                        if (lHex<10) lHex+='0';
 8000aca:	2a09      	cmp	r2, #9
 8000acc:	f240 8185 	bls.w	8000dda <printf+0xb12>
                        else         lHex+='A'-10;
 8000ad0:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000ad4:	9301      	str	r3, [sp, #4]
 8000ad6:	47d0      	blx	sl
 8000ad8:	9b01      	ldr	r3, [sp, #4]
 8000ada:	2200      	movs	r2, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000adc:	455e      	cmp	r6, fp
 8000ade:	f43f abfe 	beq.w	80002de <printf+0x16>
 8000ae2:	9803      	ldr	r0, [sp, #12]
 8000ae4:	b1f0      	cbz	r0, 8000b24 <printf+0x85c>
                        c = s[i];
 8000ae6:	f893 c001 	ldrb.w	ip, [r3, #1]
 8000aea:	3601      	adds	r6, #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000aec:	ea5f 111c 	movs.w	r1, ip, lsr #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000af0:	f00c 030f 	and.w	r3, ip, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000af4:	f000 8124 	beq.w	8000d40 <printf+0xa78>
                        if (uHex<10) uHex+='0';
 8000af8:	2909      	cmp	r1, #9
 8000afa:	f240 816b 	bls.w	8000dd4 <printf+0xb0c>
                        else         uHex+='A'-10;
 8000afe:	f101 0037 	add.w	r0, r1, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	47d0      	blx	sl
 8000b06:	9b01      	ldr	r3, [sp, #4]
 8000b08:	2200      	movs	r2, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 8111 	beq.w	8000d32 <printf+0xa6a>
                        if (lHex<10) lHex+='0';
 8000b10:	2b09      	cmp	r3, #9
 8000b12:	f240 8159 	bls.w	8000dc8 <printf+0xb00>
                        else         lHex+='A'-10;
 8000b16:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000b1a:	47d0      	blx	sl
 8000b1c:	2200      	movs	r2, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000b1e:	455e      	cmp	r6, fp
 8000b20:	f43f abdd 	beq.w	80002de <printf+0x16>
 8000b24:	9503      	str	r5, [sp, #12]
                        c = s[i];
 8000b26:	f816 3b01 	ldrb.w	r3, [r6], #1
 8000b2a:	4625      	mov	r5, r4
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000b2c:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000b30:	091b      	lsrs	r3, r3, #4
 8000b32:	d02e      	beq.n	8000b92 <printf+0x8ca>
                        if (uHex<10) uHex+='0';
 8000b34:	2b09      	cmp	r3, #9
 8000b36:	f240 8144 	bls.w	8000dc2 <printf+0xafa>
                        else         uHex+='A'-10;
 8000b3a:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 8000b3e:	47d0      	blx	sl
 8000b40:	2300      	movs	r3, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000b42:	2c00      	cmp	r4, #0
 8000b44:	d030      	beq.n	8000ba8 <printf+0x8e0>
                        if (lHex<10) lHex+='0';
 8000b46:	2c09      	cmp	r4, #9
 8000b48:	f240 8138 	bls.w	8000dbc <printf+0xaf4>
                        else         lHex+='A'-10;
 8000b4c:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000b50:	47d0      	blx	sl
 8000b52:	2200      	movs	r2, #0
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000b54:	f816 1b01 	ldrb.w	r1, [r6], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000b58:	090b      	lsrs	r3, r1, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000b5a:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000b5e:	d032      	beq.n	8000bc6 <printf+0x8fe>
                        if (uHex<10) uHex+='0';
 8000b60:	2b09      	cmp	r3, #9
 8000b62:	f240 8119 	bls.w	8000d98 <printf+0xad0>
                        else         uHex+='A'-10;
 8000b66:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 8000b6a:	47d0      	blx	sl
 8000b6c:	2300      	movs	r3, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000b6e:	2c00      	cmp	r4, #0
 8000b70:	d034      	beq.n	8000bdc <printf+0x914>
                        if (lHex<10) lHex+='0';
 8000b72:	2c09      	cmp	r4, #9
 8000b74:	f240 810d 	bls.w	8000d92 <printf+0xaca>
                        else         lHex+='A'-10;
 8000b78:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000b7c:	47d0      	blx	sl
 8000b7e:	2200      	movs	r2, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000b80:	455e      	cmp	r6, fp
 8000b82:	f43f adb2 	beq.w	80006ea <printf+0x422>
                        c = s[i];
 8000b86:	f816 3b01 	ldrb.w	r3, [r6], #1
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000b8a:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000b8e:	091b      	lsrs	r3, r3, #4
 8000b90:	d1d0      	bne.n	8000b34 <printf+0x86c>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	f000 8115 	beq.w	8000dc2 <printf+0xafa>
                                if (flag0) print_byte('0');
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	f000 80c6 	beq.w	8000d2a <printf+0xa62>
 8000b9e:	2030      	movs	r0, #48	; 0x30
 8000ba0:	47d0      	blx	sl
 8000ba2:	2301      	movs	r3, #1
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d1ce      	bne.n	8000b46 <printf+0x87e>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f000 8107 	beq.w	8000dbc <printf+0xaf4>
                                if (flag0) print_byte('0');
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	f000 80b7 	beq.w	8000d22 <printf+0xa5a>
 8000bb4:	2030      	movs	r0, #48	; 0x30
 8000bb6:	47d0      	blx	sl
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000bb8:	f816 1b01 	ldrb.w	r1, [r6], #1
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000bbc:	2201      	movs	r2, #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000bbe:	090b      	lsrs	r3, r1, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000bc0:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000bc4:	d1cc      	bne.n	8000b60 <printf+0x898>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000bc6:	2a00      	cmp	r2, #0
 8000bc8:	f000 80e6 	beq.w	8000d98 <printf+0xad0>
                                if (flag0) print_byte('0');
 8000bcc:	2d00      	cmp	r5, #0
 8000bce:	f040 80a0 	bne.w	8000d12 <printf+0xa4a>
                                else       print_byte(' ');
 8000bd2:	2020      	movs	r0, #32
 8000bd4:	47d0      	blx	sl
 8000bd6:	2301      	movs	r3, #1
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000bd8:	2c00      	cmp	r4, #0
 8000bda:	d1ca      	bne.n	8000b72 <printf+0x8aa>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f000 80d8 	beq.w	8000d92 <printf+0xaca>
                                if (flag0) print_byte('0');
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	f040 8099 	bne.w	8000d1a <printf+0xa52>
                                else       print_byte(' ');
 8000be8:	2020      	movs	r0, #32
 8000bea:	47d0      	blx	sl
 8000bec:	2201      	movs	r2, #1
 8000bee:	e7c7      	b.n	8000b80 <printf+0x8b8>
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000bf0:	1e48      	subs	r0, r1, #1
 8000bf2:	f000 80c5 	beq.w	8000d80 <printf+0xab8>
 8000bf6:	1e8c      	subs	r4, r1, #2
 8000bf8:	3801      	subs	r0, #1
 8000bfa:	3903      	subs	r1, #3
 8000bfc:	e520      	b.n	8000640 <printf+0x378>
 8000bfe:	bf00      	nop
 8000c00:	55e63b89 	.word	0x55e63b89
 8000c04:	05f5e100 	.word	0x05f5e100
 8000c08:	0800101d 	.word	0x0800101d
 8000c0c:	6b5fca6b 	.word	0x6b5fca6b
 8000c10:	00989680 	.word	0x00989680
 8000c14:	431bde83 	.word	0x431bde83
 8000c18:	000f4240 	.word	0x000f4240
 8000c1c:	14f8b589 	.word	0x14f8b589
 8000c20:	000186a0 	.word	0x000186a0
 8000c24:	68db8bad 	.word	0x68db8bad
 8000c28:	10624dd3 	.word	0x10624dd3
 8000c2c:	51eb851f 	.word	0x51eb851f
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000c30:	2c09      	cmp	r4, #9
 8000c32:	f240 80b4 	bls.w	8000d9e <printf+0xad6>
                        else         lHex+='A'-10;
 8000c36:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte(lHex);
 8000c3a:	47b0      	blx	r6
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000c3c:	f89d c02d 	ldrb.w	ip, [sp, #45]	; 0x2d
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000c40:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c42:	ea5f 131c 	movs.w	r3, ip, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000c46:	f00c 040f 	and.w	r4, ip, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c4a:	f47f ad6c 	bne.w	8000726 <printf+0x45e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f000 80c8 	beq.w	8000de4 <printf+0xb1c>
 8000c54:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000c56:	2c00      	cmp	r4, #0
 8000c58:	f43f ad6f 	beq.w	800073a <printf+0x472>
                        if (lHex<10) lHex+='0';
 8000c5c:	2c09      	cmp	r4, #9
 8000c5e:	f240 80a1 	bls.w	8000da4 <printf+0xadc>
                        else         lHex+='A'-10;
 8000c62:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte(lHex);
 8000c66:	47b0      	blx	r6
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000c68:	f89d e02e 	ldrb.w	lr, [sp, #46]	; 0x2e
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000c6c:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c6e:	ea5f 131e 	movs.w	r3, lr, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000c72:	f00e 040f 	and.w	r4, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c76:	f47f ad6c 	bne.w	8000752 <printf+0x48a>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f000 8095 	beq.w	8000daa <printf+0xae2>
 8000c80:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000c82:	2c00      	cmp	r4, #0
 8000c84:	f43f ad6f 	beq.w	8000766 <printf+0x49e>
                        if (lHex<10) lHex+='0';
 8000c88:	2c09      	cmp	r4, #9
 8000c8a:	f240 8091 	bls.w	8000db0 <printf+0xae8>
                        else         lHex+='A'-10;
 8000c8e:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte(lHex);
 8000c92:	47b0      	blx	r6
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000c94:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000c98:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c9a:	0903      	lsrs	r3, r0, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000c9c:	f000 040f 	and.w	r4, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000ca0:	f47f ad6c 	bne.w	800077c <printf+0x4b4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	f47f ad6f 	bne.w	8000788 <printf+0x4c0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000caa:	f103 0030 	add.w	r0, r3, #48	; 0x30
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8000cae:	47b0      	blx	r6
 8000cb0:	e56a      	b.n	8000788 <printf+0x4c0>
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000cb2:	f104 0030 	add.w	r0, r4, #48	; 0x30
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000cb6:	47b0      	blx	r6
 8000cb8:	f7ff bb11 	b.w	80002de <printf+0x16>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000cbc:	2b09      	cmp	r3, #9
 8000cbe:	d97a      	bls.n	8000db6 <printf+0xaee>
                        else         uHex+='A'-10;
 8000cc0:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte(uHex);
 8000cc4:	4e49      	ldr	r6, [pc, #292]	; (8000dec <printf+0xb24>)
 8000cc6:	47b0      	blx	r6
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e51d      	b.n	8000708 <printf+0x440>
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000ccc:	2309      	movs	r3, #9
 8000cce:	e615      	b.n	80008fc <printf+0x634>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000cd0:	2809      	cmp	r0, #9
 8000cd2:	f240 8085 	bls.w	8000de0 <printf+0xb18>
                        else         uHex+='A'-10;
 8000cd6:	3037      	adds	r0, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 8000cd8:	9202      	str	r2, [sp, #8]
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	47d0      	blx	sl
 8000cde:	9a02      	ldr	r2, [sp, #8]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	9b01      	ldr	r3, [sp, #4]
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f47f aef0 	bne.w	8000aca <printf+0x802>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000cea:	2900      	cmp	r1, #0
 8000cec:	d075      	beq.n	8000dda <printf+0xb12>
                                if (flag0) print_byte('0');
 8000cee:	2c00      	cmp	r4, #0
 8000cf0:	d12f      	bne.n	8000d52 <printf+0xa8a>
                                else       print_byte(' ');
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	2020      	movs	r0, #32
 8000cf6:	47d0      	blx	sl
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	9b01      	ldr	r3, [sp, #4]
 8000cfc:	e6ee      	b.n	8000adc <printf+0x814>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000cfe:	2c00      	cmp	r4, #0
 8000d00:	d039      	beq.n	8000d76 <printf+0xaae>
 8000d02:	2030      	movs	r0, #48	; 0x30
 8000d04:	4a39      	ldr	r2, [pc, #228]	; (8000dec <printf+0xb24>)
 8000d06:	4790      	blx	r2
 8000d08:	2101      	movs	r1, #1
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
                        
                        flagcnt--;
 8000d0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000d0c:	1e42      	subs	r2, r0, #1
 8000d0e:	920a      	str	r2, [sp, #40]	; 0x28
 8000d10:	e6ae      	b.n	8000a70 <printf+0x7a8>
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000d12:	2030      	movs	r0, #48	; 0x30
 8000d14:	47d0      	blx	sl
 8000d16:	2301      	movs	r3, #1
 8000d18:	e729      	b.n	8000b6e <printf+0x8a6>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000d1a:	2030      	movs	r0, #48	; 0x30
 8000d1c:	47d0      	blx	sl
 8000d1e:	2201      	movs	r2, #1
 8000d20:	e72e      	b.n	8000b80 <printf+0x8b8>
                                else       print_byte(' ');
 8000d22:	2020      	movs	r0, #32
 8000d24:	47d0      	blx	sl
 8000d26:	2201      	movs	r2, #1
 8000d28:	e714      	b.n	8000b54 <printf+0x88c>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 8000d2a:	2020      	movs	r0, #32
 8000d2c:	47d0      	blx	sl
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e707      	b.n	8000b42 <printf+0x87a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	d048      	beq.n	8000dc8 <printf+0xb00>
                                if (flag0) print_byte('0');
 8000d36:	b9d4      	cbnz	r4, 8000d6e <printf+0xaa6>
                                else       print_byte(' ');
 8000d38:	2020      	movs	r0, #32
 8000d3a:	47d0      	blx	sl
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	e6ee      	b.n	8000b1e <printf+0x856>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000d40:	2a00      	cmp	r2, #0
 8000d42:	d047      	beq.n	8000dd4 <printf+0xb0c>
                                if (flag0) print_byte('0');
 8000d44:	b96c      	cbnz	r4, 8000d62 <printf+0xa9a>
                                else       print_byte(' ');
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	2020      	movs	r0, #32
 8000d4a:	47d0      	blx	sl
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	9b01      	ldr	r3, [sp, #4]
 8000d50:	e6db      	b.n	8000b0a <printf+0x842>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	2030      	movs	r0, #48	; 0x30
 8000d56:	47d0      	blx	sl
 8000d58:	2201      	movs	r2, #1
 8000d5a:	9b01      	ldr	r3, [sp, #4]
 8000d5c:	e6be      	b.n	8000adc <printf+0x814>
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000d5e:	2030      	movs	r0, #48	; 0x30
 8000d60:	e6aa      	b.n	8000ab8 <printf+0x7f0>
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	2030      	movs	r0, #48	; 0x30
 8000d66:	47d0      	blx	sl
 8000d68:	2201      	movs	r2, #1
 8000d6a:	9b01      	ldr	r3, [sp, #4]
 8000d6c:	e6cd      	b.n	8000b0a <printf+0x842>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000d6e:	2030      	movs	r0, #48	; 0x30
 8000d70:	47d0      	blx	sl
 8000d72:	2201      	movs	r2, #1
 8000d74:	e6d3      	b.n	8000b1e <printf+0x856>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 8000d76:	2020      	movs	r0, #32
 8000d78:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <printf+0xb24>)
 8000d7a:	4798      	blx	r3
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	e7c4      	b.n	8000d0a <printf+0xa42>
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000d80:	1e8c      	subs	r4, r1, #2
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 8000d82:	230a      	movs	r3, #10
        cnt--;


        while (cnt--){
 8000d84:	3903      	subs	r1, #3
 8000d86:	e473      	b.n	8000670 <printf+0x3a8>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 8000d88:	240a      	movs	r4, #10
 8000d8a:	e48e      	b.n	80006aa <printf+0x3e2>
}

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
 8000d8c:	461c      	mov	r4, r3
 8000d8e:	f7ff bbc2 	b.w	8000516 <printf+0x24e>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000d92:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000d96:	e6f1      	b.n	8000b7c <printf+0x8b4>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000d98:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000d9c:	e6e5      	b.n	8000b6a <printf+0x8a2>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000d9e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000da2:	e74a      	b.n	8000c3a <printf+0x972>
 8000da4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000da8:	e75d      	b.n	8000c66 <printf+0x99e>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000daa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000dae:	e4d5      	b.n	800075c <printf+0x494>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000db0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000db4:	e76d      	b.n	8000c92 <printf+0x9ca>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000db6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000dba:	e783      	b.n	8000cc4 <printf+0x9fc>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000dbc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000dc0:	e6c6      	b.n	8000b50 <printf+0x888>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000dc2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000dc6:	e6ba      	b.n	8000b3e <printf+0x876>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000dc8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000dcc:	e6a5      	b.n	8000b1a <printf+0x852>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8000dce:	3330      	adds	r3, #48	; 0x30
 8000dd0:	f7ff bbc6 	b.w	8000560 <printf+0x298>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000dd4:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000dd8:	e693      	b.n	8000b02 <printf+0x83a>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000dda:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8000dde:	e679      	b.n	8000ad4 <printf+0x80c>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000de0:	3030      	adds	r0, #48	; 0x30
 8000de2:	e779      	b.n	8000cd8 <printf+0xa10>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000de4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000de8:	e4a2      	b.n	8000730 <printf+0x468>
 8000dea:	bf00      	nop
 8000dec:	0800101d 	.word	0x0800101d

08000df0 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8000df0:	4668      	mov	r0, sp
 8000df2:	f020 0107 	bic.w	r1, r0, #7
 8000df6:	468d      	mov	sp, r1
 8000df8:	b579      	push	{r0, r3, r4, r5, r6, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000dfa:	492b      	ldr	r1, [pc, #172]	; (8000ea8 <zero_loop+0x5a>)
 8000dfc:	4c2b      	ldr	r4, [pc, #172]	; (8000eac <zero_loop+0x5e>)
 8000dfe:	42a1      	cmp	r1, r4
 8000e00:	d221      	bcs.n	8000e46 <Hw_StartUp_Init+0x56>
 8000e02:	482b      	ldr	r0, [pc, #172]	; (8000eb0 <zero_loop+0x62>)
	{
		*(pulDest++) = *(pulSrc++);
 8000e04:	460b      	mov	r3, r1
 8000e06:	4602      	mov	r2, r0
 8000e08:	f852 6b04 	ldr.w	r6, [r2], #4
 8000e0c:	43cd      	mvns	r5, r1
 8000e0e:	f843 6b04 	str.w	r6, [r3], #4
 8000e12:	1965      	adds	r5, r4, r5
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000e14:	42a3      	cmp	r3, r4
 8000e16:	f3c5 0580 	ubfx	r5, r5, #2, #1
 8000e1a:	d214      	bcs.n	8000e46 <Hw_StartUp_Init+0x56>
 8000e1c:	b13d      	cbz	r5, 8000e2e <Hw_StartUp_Init+0x3e>
	{
		*(pulDest++) = *(pulSrc++);
 8000e1e:	6815      	ldr	r5, [r2, #0]
 8000e20:	f100 0208 	add.w	r2, r0, #8
 8000e24:	601d      	str	r5, [r3, #0]
 8000e26:	f101 0308 	add.w	r3, r1, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000e2a:	42a3      	cmp	r3, r4
 8000e2c:	d20b      	bcs.n	8000e46 <Hw_StartUp_Init+0x56>
	{
		*(pulDest++) = *(pulSrc++);
 8000e2e:	4610      	mov	r0, r2
 8000e30:	f850 5b04 	ldr.w	r5, [r0], #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	f841 5b04 	str.w	r5, [r1], #4
 8000e3a:	6855      	ldr	r5, [r2, #4]
 8000e3c:	1d02      	adds	r2, r0, #4
 8000e3e:	605d      	str	r5, [r3, #4]
 8000e40:	1d0b      	adds	r3, r1, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d3f3      	bcc.n	8000e2e <Hw_StartUp_Init+0x3e>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 8000e46:	481e      	ldr	r0, [pc, #120]	; (8000ec0 <zero_loop+0x72>)
 8000e48:	491e      	ldr	r1, [pc, #120]	; (8000ec4 <zero_loop+0x76>)
 8000e4a:	f04f 0200 	mov.w	r2, #0

08000e4e <zero_loop>:
 8000e4e:	4288      	cmp	r0, r1
 8000e50:	bfb8      	it	lt
 8000e52:	f840 2b04 	strlt.w	r2, [r0], #4
 8000e56:	dbfa      	blt.n	8000e4e <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8000e58:	4916      	ldr	r1, [pc, #88]	; (8000eb4 <zero_loop+0x66>)
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
	
	u32 TimeOutCnt  = 0;
 8000e5a:	2300      	movs	r3, #0
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8000e5c:	6808      	ldr	r0, [r1, #0]
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8000e5e:	460a      	mov	r2, r1
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8000e60:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8000e64:	6008      	str	r0, [r1, #0]
 8000e66:	e006      	b.n	8000e76 <zero_loop+0x28>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8000e68:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8000e6a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8000e6e:	d107      	bne.n	8000e80 <zero_loop+0x32>
 8000e70:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e74:	d004      	beq.n	8000e80 <zero_loop+0x32>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8000e76:	6811      	ldr	r1, [r2, #0]
		TimeOutCnt++;		
 8000e78:	3302      	adds	r3, #2
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8000e7a:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8000e7e:	d0f3      	beq.n	8000e68 <zero_loop+0x1a>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8000e80:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <zero_loop+0x6a>)
 8000e82:	680b      	ldr	r3, [r1, #0]
 8000e84:	f043 0010 	orr.w	r0, r3, #16
 8000e88:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 8000e8a:	680a      	ldr	r2, [r1, #0]
 8000e8c:	f022 0303 	bic.w	r3, r2, #3
 8000e90:	600b      	str	r3, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 8000e92:	6808      	ldr	r0, [r1, #0]


    main();
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <zero_loop+0x6e>)

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 8000e96:	f040 0202 	orr.w	r2, r0, #2
 8000e9a:	600a      	str	r2, [r1, #0]


    main();
 8000e9c:	4798      	blx	r3

}
 8000e9e:	e8bd 4079 	ldmia.w	sp!, {r0, r3, r4, r5, r6, lr}
 8000ea2:	4685      	mov	sp, r0
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	080015a0 	.word	0x080015a0
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40022000 	.word	0x40022000
 8000ebc:	08000009 	.word	0x08000009
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000390 	.word	0x20000390

08000ec8 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8000ec8:	b508      	push	{r3, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 8000eca:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <Hw_Init+0x30>)
 8000ecc:	4780      	blx	r0
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 8000ece:	490b      	ldr	r1, [pc, #44]	; (8000efc <Hw_Init+0x34>)
 8000ed0:	4788      	blx	r1
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <Hw_Init+0x38>)
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <Hw_Init+0x3c>)
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000ed6:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 8000eda:	6003      	str	r3, [r0, #0]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000edc:	490a      	ldr	r1, [pc, #40]	; (8000f08 <Hw_Init+0x40>)
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000ede:	6042      	str	r2, [r0, #4]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <Hw_Init+0x44>)
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8000ee2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8000ee6:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000eea:	600a      	str	r2, [r1, #0]
		
	Hw_Uart_Init();
 8000eec:	4808      	ldr	r0, [pc, #32]	; (8000f10 <Hw_Init+0x48>)
 8000eee:	4780      	blx	r0
	Hw_Led_Init();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <Hw_Init+0x4c>)
 8000ef2:	4798      	blx	r3
}
 8000ef4:	bd08      	pop	{r3, pc}
 8000ef6:	bf00      	nop
 8000ef8:	0800105d 	.word	0x0800105d
 8000efc:	08001231 	.word	0x08001231
 8000f00:	40010800 	.word	0x40010800
 8000f04:	333334b3 	.word	0x333334b3
 8000f08:	40011004 	.word	0x40011004
 8000f0c:	33444444 	.word	0x33444444
 8000f10:	08000fb5 	.word	0x08000fb5
 8000f14:	080010c1 	.word	0x080010c1

08000f18 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8000f18:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <Hw_ISR_UART1_Handler+0x18>)


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8000f1c:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8000f1e:	6802      	ldr	r2, [r0, #0]
 8000f20:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 8000f22:	2000      	movs	r0, #0
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8000f24:	f801 2d01 	strb.w	r2, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 8000f28:	4b02      	ldr	r3, [pc, #8]	; (8000f34 <Hw_ISR_UART1_Handler+0x1c>)
 8000f2a:	4798      	blx	r3
}
 8000f2c:	b003      	add	sp, #12
 8000f2e:	bd00      	pop	{pc}
 8000f30:	40013804 	.word	0x40013804
 8000f34:	0800114d 	.word	0x0800114d

08000f38 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8000f38:	b570      	push	{r4, r5, r6, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000f3a:	4d12      	ldr	r5, [pc, #72]	; (8000f84 <Hw_Uart_Open_COM1+0x4c>)
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000f3c:	4c12      	ldr	r4, [pc, #72]	; (8000f88 <Hw_Uart_Open_COM1+0x50>)
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000f3e:	682b      	ldr	r3, [r5, #0]
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000f40:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000f42:	f443 4680 	orr.w	r6, r3, #16384	; 0x4000
 8000f46:	602e      	str	r6, [r5, #0]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000f48:	250c      	movs	r5, #12
 8000f4a:	6025      	str	r5, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000f4c:	4d0f      	ldr	r5, [pc, #60]	; (8000f8c <Hw_Uart_Open_COM1+0x54>)
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37-32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <Hw_Uart_Open_COM1+0x58>)
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000f50:	f240 2671 	movw	r6, #625	; 0x271
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000f54:	602a      	str	r2, [r5, #0]
	REG_USART1_CR3  = 0;
 8000f56:	606a      	str	r2, [r5, #4]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000f58:	f845 6c08 	str.w	r6, [r5, #-8]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37-32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000f5c:	681e      	ldr	r6, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000f5e:	4d0d      	ldr	r5, [pc, #52]	; (8000f94 <Hw_Uart_Open_COM1+0x5c>)
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37-32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000f60:	f046 0620 	orr.w	r6, r6, #32
 8000f64:	601e      	str	r6, [r3, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8000f66:	6823      	ldr	r3, [r4, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000f68:	6068      	str	r0, [r5, #4]
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37-32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8000f6a:	f043 0320 	orr.w	r3, r3, #32
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 8000f6e:	60a9      	str	r1, [r5, #8]
	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37-32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000f70:	2025      	movs	r0, #37	; 0x25
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37-32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8000f72:	6023      	str	r3, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000f74:	4908      	ldr	r1, [pc, #32]	; (8000f98 <Hw_Uart_Open_COM1+0x60>)
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <Hw_Uart_Open_COM1+0x64>)
 8000f78:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8000f7a:	6820      	ldr	r0, [r4, #0]
 8000f7c:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
 8000f80:	6023      	str	r3, [r4, #0]
}
 8000f82:	bd70      	pop	{r4, r5, r6, pc}
 8000f84:	40021018 	.word	0x40021018
 8000f88:	4001380c 	.word	0x4001380c
 8000f8c:	40013810 	.word	0x40013810
 8000f90:	e000e104 	.word	0xe000e104
 8000f94:	20000000 	.word	0x20000000
 8000f98:	08000f19 	.word	0x08000f19
 8000f9c:	08001241 	.word	0x08001241

08000fa0 <Hw_Uart_Open>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8000fa0:	b508      	push	{r3, lr}
	switch( Ch )
 8000fa2:	b918      	cbnz	r0, 8000fac <Hw_Uart_Open+0xc>
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <Hw_Uart_Open+0x10>)
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4798      	blx	r3
 8000fac:	bd08      	pop	{r3, pc}
 8000fae:	bf00      	nop
 8000fb0:	08000f39 	.word	0x08000f39

08000fb4 <Hw_Uart_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8000fb4:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 8000fb6:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <Hw_Uart_Init+0x2c>)
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	; (8000fe4 <Hw_Uart_Init+0x30>)
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 8000fba:	4780      	blx	r0
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000fbc:	2300      	movs	r3, #0
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
	}	
	
	
	Hw_Uart_Open( HW_UART_COM1, 115200, NULL );
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	461a      	mov	r2, r3
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000fc2:	6063      	str	r3, [r4, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000fc4:	60a3      	str	r3, [r4, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000fc6:	6123      	str	r3, [r4, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000fc8:	6163      	str	r3, [r4, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000fca:	61e3      	str	r3, [r4, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000fcc:	6223      	str	r3, [r4, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000fce:	62a3      	str	r3, [r4, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000fd2:	6363      	str	r3, [r4, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000fd4:	63a3      	str	r3, [r4, #56]	; 0x38
	}	
	
	
	Hw_Uart_Open( HW_UART_COM1, 115200, NULL );
 8000fd6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000fda:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <Hw_Uart_Init+0x34>)
 8000fdc:	4798      	blx	r3
}
 8000fde:	bd10      	pop	{r4, pc}
 8000fe0:	08001101 	.word	0x08001101
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	08000fa1 	.word	0x08000fa1

08000fec <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000fec:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 8000fee:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	4d08      	ldr	r5, [pc, #32]	; (8001014 <Hw_Uart_Getch+0x28>)
 8000ff4:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 8000ff6:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	47a8      	blx	r5
 8000ffe:	2800      	cmp	r0, #0
 8001000:	d0fb      	beq.n	8000ffa <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 8001002:	4620      	mov	r0, r4
 8001004:	f10d 0107 	add.w	r1, sp, #7
 8001008:	4a03      	ldr	r2, [pc, #12]	; (8001018 <Hw_Uart_Getch+0x2c>)
 800100a:	4790      	blx	r2

	return Uart_GetData;
}
 800100c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001010:	b003      	add	sp, #12
 8001012:	bd30      	pop	{r4, r5, pc}
 8001014:	08001119 	.word	0x08001119
 8001018:	080011c1 	.word	0x080011c1

0800101c <print_byte>:

//------------------------------- printf 포팅용 --------------------------------
//
void print_byte(unsigned int c)
{
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 800101c:	280a      	cmp	r0, #10
 800101e:	d008      	beq.n	8001032 <print_byte+0x16>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <print_byte+0x28>)
//
void print_byte(unsigned int c)
{
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
    
    Hw_Uart_Putch(HW_UART_COM1, c);
 8001022:	b2c0      	uxtb	r0, r0
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8001024:	6813      	ldr	r3, [r2, #0]
 8001026:	f013 0f80 	tst.w	r3, #128	; 0x80
 800102a:	d0fb      	beq.n	8001024 <print_byte+0x8>
    
    REG_USART1_DR = Uart_PutData;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <print_byte+0x2c>)
 800102e:	6010      	str	r0, [r2, #0]
void print_byte(unsigned int c)
{
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
    
    Hw_Uart_Putch(HW_UART_COM1, c);
}
 8001030:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <print_byte+0x28>)
 8001034:	6813      	ldr	r3, [r2, #0]
 8001036:	f013 0f80 	tst.w	r3, #128	; 0x80
 800103a:	d0fb      	beq.n	8001034 <print_byte+0x18>
    
    REG_USART1_DR = Uart_PutData;
 800103c:	4902      	ldr	r1, [pc, #8]	; (8001048 <print_byte+0x2c>)
 800103e:	220d      	movs	r2, #13
 8001040:	600a      	str	r2, [r1, #0]
 8001042:	e7ed      	b.n	8001020 <print_byte+0x4>
 8001044:	40013800 	.word	0x40013800
 8001048:	40013804 	.word	0x40013804

0800104c <get_byte>:
    Hw_Uart_Putch(HW_UART_COM1, c);
}


char get_byte(void)
{
 800104c:	b508      	push	{r3, lr}
	char Ch;
	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 800104e:	2000      	movs	r0, #0
 8001050:	4b01      	ldr	r3, [pc, #4]	; (8001058 <get_byte+0xc>)
 8001052:	4798      	blx	r3
	
	return Ch;
}
 8001054:	bd08      	pop	{r3, pc}
 8001056:	bf00      	nop
 8001058:	08000fed 	.word	0x08000fed

0800105c <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16);
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <Hw_PLL_Init+0x58>)
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800105e:	4916      	ldr	r1, [pc, #88]	; (80010b8 <Hw_PLL_Init+0x5c>)
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16);
 8001060:	6818      	ldr	r0, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8001062:	460a      	mov	r2, r1
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16);
 8001064:	f420 107c 	bic.w	r0, r0, #4128768	; 0x3f0000
 8001068:	6018      	str	r0, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	f440 10e8 	orr.w	r0, r0, #1900544	; 0x1d0000
 8001070:	6018      	str	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8001072:	6808      	ldr	r0, [r1, #0]
 8001074:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
 8001078:	600b      	str	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800107a:	6811      	ldr	r1, [r2, #0]
 800107c:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001080:	d0fb      	beq.n	800107a <Hw_PLL_Init+0x1e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <Hw_PLL_Init+0x58>)
 8001084:	6819      	ldr	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8001086:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8001088:	f021 0003 	bic.w	r0, r1, #3
 800108c:	6018      	str	r0, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 800108e:	6819      	ldr	r1, [r3, #0]
 8001090:	f041 0002 	orr.w	r0, r1, #2
 8001094:	6018      	str	r0, [r3, #0]
    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8001096:	6813      	ldr	r3, [r2, #0]
 8001098:	f003 0c0c 	and.w	ip, r3, #12
 800109c:	f1bc 0f08 	cmp.w	ip, #8
 80010a0:	d1f9      	bne.n	8001096 <Hw_PLL_Init+0x3a>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0x1 << 14 | 0x1 << 4  | 0x1 << 3  | 0x1 << 2 | 0x1 << 0;         // UART/ IOPC EN / IOPB EN / IOPA EN / AFIO EN	
 80010a2:	4a06      	ldr	r2, [pc, #24]	; (80010bc <Hw_PLL_Init+0x60>)
 80010a4:	6813      	ldr	r3, [r2, #0]
 80010a6:	f443 4180 	orr.w	r1, r3, #16384	; 0x4000
 80010aa:	f041 001d 	orr.w	r0, r1, #29
 80010ae:	6010      	str	r0, [r2, #0]
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40021004 	.word	0x40021004
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021018 	.word	0x40021018

080010c0 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80010c0:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <Hw_Led_Init+0x34>)
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <Hw_Led_Init+0x38>)
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80010c4:	6810      	ldr	r0, [r2, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80010c6:	490d      	ldr	r1, [pc, #52]	; (80010fc <Hw_Led_Init+0x3c>)
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80010c8:	f020 60e0 	bic.w	r0, r0, #117440512	; 0x7000000
 80010cc:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 80010ce:	6810      	ldr	r0, [r2, #0]
 80010d0:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 80010d4:	6010      	str	r0, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	f422 4070 	bic.w	r0, r2, #61440	; 0xf000
 80010dc:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	f442 5040 	orr.w	r0, r2, #12288	; 0x3000
 80010e4:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	601a      	str	r2, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80010ea:	6808      	ldr	r0, [r1, #0]
 80010ec:	f040 0308 	orr.w	r3, r0, #8
 80010f0:	600b      	str	r3, [r1, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
	
		
	Hw_Led_Off(0);
}
 80010f2:	4770      	bx	lr
 80010f4:	40010004 	.word	0x40010004
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	40010c0c 	.word	0x40010c0c

08001100 <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8001100:	4903      	ldr	r1, [pc, #12]	; (8001110 <Hw_Uart_Q_Init+0x10>)
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <Hw_Uart_Q_Init+0x14>)
 8001104:	2300      	movs	r3, #0
 8001106:	800b      	strh	r3, [r1, #0]
 8001108:	8013      	strh	r3, [r2, #0]
 800110a:	804b      	strh	r3, [r1, #2]
 800110c:	8053      	strh	r3, [r2, #2]
	}
}
 800110e:	4770      	bx	lr
 8001110:	20000058 	.word	0x20000058
 8001114:	2000005c 	.word	0x2000005c

08001118 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HW_UART_Q_VAILD+0x28>)
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HW_UART_Q_VAILD+0x2c>)
 800111c:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8001120:	f932 1010 	ldrsh.w	r1, [r2, r0, lsl #1]
 8001124:	330a      	adds	r3, #10
 8001126:	4808      	ldr	r0, [pc, #32]	; (8001148 <HW_UART_Q_VAILD+0x30>)
 8001128:	1a5b      	subs	r3, r3, r1
 800112a:	fb80 2c03 	smull	r2, ip, r0, r3
 800112e:	17da      	asrs	r2, r3, #31
 8001130:	ebc2 01ac 	rsb	r1, r2, ip, asr #2
 8001134:	eb01 0081 	add.w	r0, r1, r1, lsl #2
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8001138:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2000005c 	.word	0x2000005c
 8001144:	20000058 	.word	0x20000058
 8001148:	66666667 	.word	0x66666667

0800114c <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <Hw_Uart_Q_Push+0x64>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 800114e:	b4f0      	push	{r4, r5, r6, r7}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001150:	4e18      	ldr	r6, [pc, #96]	; (80011b4 <Hw_Uart_Q_Push+0x68>)
 8001152:	f833 7010 	ldrh.w	r7, [r3, r0, lsl #1]
 8001156:	f936 2010 	ldrsh.w	r2, [r6, r0, lsl #1]
 800115a:	b23d      	sxth	r5, r7
 800115c:	f105 040a 	add.w	r4, r5, #10
 8001160:	4e15      	ldr	r6, [pc, #84]	; (80011b8 <Hw_Uart_Q_Push+0x6c>)
 8001162:	1aa2      	subs	r2, r4, r2
 8001164:	fb86 4c02 	smull	r4, ip, r6, r2
 8001168:	17d4      	asrs	r4, r2, #31
 800116a:	ebc4 04ac 	rsb	r4, r4, ip, asr #2
 800116e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001172:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8001176:	2a09      	cmp	r2, #9
 8001178:	d017      	beq.n	80011aa <Hw_Uart_Q_Push+0x5e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800117a:	1c7c      	adds	r4, r7, #1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800117c:	b227      	sxth	r7, r4
 800117e:	fb86 2c07 	smull	r2, ip, r6, r7
 8001182:	17fc      	asrs	r4, r7, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8001184:	eb00 0280 	add.w	r2, r0, r0, lsl #2
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8001188:	ebc4 06ac 	rsb	r6, r4, ip, asr #2
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800118c:	7809      	ldrb	r1, [r1, #0]
 800118e:	eb00 0c42 	add.w	ip, r0, r2, lsl #1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8001192:	eb06 0686 	add.w	r6, r6, r6, lsl #2
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <Hw_Uart_Q_Push+0x70>)
 8001198:	4465      	add	r5, ip
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800119a:	eba7 0746 	sub.w	r7, r7, r6, lsl #1
 800119e:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80011a2:	5551      	strb	r1, [r2, r5]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
 80011a4:	2001      	movs	r0, #1
}
 80011a6:	bcf0      	pop	{r4, r5, r6, r7}
 80011a8:	4770      	bx	lr
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 80011aa:	2000      	movs	r0, #0
 80011ac:	e7fb      	b.n	80011a6 <Hw_Uart_Q_Push+0x5a>
 80011ae:	bf00      	nop
 80011b0:	2000005c 	.word	0x2000005c
 80011b4:	20000058 	.word	0x20000058
 80011b8:	66666667 	.word	0x66666667
 80011bc:	2000003c 	.word	0x2000003c

080011c0 <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 80011c0:	b4f0      	push	{r4, r5, r6, r7}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <Hw_Uart_Q_Pop+0x60>)
 80011c4:	4d17      	ldr	r5, [pc, #92]	; (8001224 <Hw_Uart_Q_Pop+0x64>)
 80011c6:	f833 7010 	ldrh.w	r7, [r3, r0, lsl #1]
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 80011ca:	4602      	mov	r2, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80011cc:	f935 0010 	ldrsh.w	r0, [r5, r0, lsl #1]
 80011d0:	4e15      	ldr	r6, [pc, #84]	; (8001228 <Hw_Uart_Q_Pop+0x68>)
 80011d2:	300a      	adds	r0, #10
 80011d4:	b23d      	sxth	r5, r7
 80011d6:	1b40      	subs	r0, r0, r5
 80011d8:	fb86 4c00 	smull	r4, ip, r6, r0
 80011dc:	17c4      	asrs	r4, r0, #31
 80011de:	ebc4 04ac 	rsb	r4, r4, ip, asr #2
 80011e2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 80011e6:	ebb0 0044 	subs.w	r0, r0, r4, lsl #1
 80011ea:	d017      	beq.n	800121c <Hw_Uart_Q_Pop+0x5c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80011ec:	3701      	adds	r7, #1

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80011ee:	b23f      	sxth	r7, r7
 80011f0:	fb86 0c07 	smull	r0, ip, r6, r7
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80011f4:	eb02 0482 	add.w	r4, r2, r2, lsl #2

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80011f8:	17fe      	asrs	r6, r7, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80011fa:	480c      	ldr	r0, [pc, #48]	; (800122c <Hw_Uart_Q_Pop+0x6c>)
 80011fc:	eb02 0444 	add.w	r4, r2, r4, lsl #1

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8001200:	ebc6 06ac 	rsb	r6, r6, ip, asr #2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8001204:	1965      	adds	r5, r4, r5
 8001206:	f810 c005 	ldrb.w	ip, [r0, r5]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800120a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800120e:	eba7 0746 	sub.w	r7, r7, r6, lsl #1
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8001212:	f881 c000 	strb.w	ip, [r1]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;

    return TRUE;
 8001216:	2001      	movs	r0, #1
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8001218:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]

    return TRUE;
}
 800121c:	bcf0      	pop	{r4, r5, r6, r7}
 800121e:	4770      	bx	lr
 8001220:	20000058 	.word	0x20000058
 8001224:	2000005c 	.word	0x2000005c
 8001228:	66666667 	.word	0x66666667
 800122c:	2000003c 	.word	0x2000003c

08001230 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8001230:	4b01      	ldr	r3, [pc, #4]	; (8001238 <Hw_ISR_Init+0x8>)
 8001232:	4a02      	ldr	r2, [pc, #8]	; (800123c <Hw_ISR_Init+0xc>)
 8001234:	601a      	str	r2, [r3, #0]
}
 8001236:	4770      	bx	lr
 8001238:	e000ed08 	.word	0xe000ed08
 800123c:	20000200 	.word	0x20000200

08001240 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8001240:	4b02      	ldr	r3, [pc, #8]	; (800124c <Hw_ISR_SetIRQFunc+0xc>)
 8001242:	3010      	adds	r0, #16
 8001244:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000200 	.word	0x20000200
 8001250:	69646152 	.word	0x69646152
 8001254:	3056206f 	.word	0x3056206f
 8001258:	000a312e 	.word	0x000a312e
 800125c:	00000a0a 	.word	0x00000a0a
 8001260:	2a2a2a2a 	.word	0x2a2a2a2a
 8001264:	2a2a2a2a 	.word	0x2a2a2a2a
 8001268:	2a2a2a2a 	.word	0x2a2a2a2a
 800126c:	2a2a2a2a 	.word	0x2a2a2a2a
 8001270:	2a2a2a2a 	.word	0x2a2a2a2a
 8001274:	2a2a2a2a 	.word	0x2a2a2a2a
 8001278:	2a2a2a2a 	.word	0x2a2a2a2a
 800127c:	2a2a2a2a 	.word	0x2a2a2a2a
 8001280:	2a2a2a2a 	.word	0x2a2a2a2a
 8001284:	2a2a2a2a 	.word	0x2a2a2a2a
 8001288:	2a2a2a2a 	.word	0x2a2a2a2a
 800128c:	2a2a2a2a 	.word	0x2a2a2a2a
 8001290:	2a2a2a2a 	.word	0x2a2a2a2a
 8001294:	0a2a2a2a 	.word	0x0a2a2a2a
 8001298:	00000000 	.word	0x00000000
 800129c:	20202020 	.word	0x20202020
 80012a0:	20202020 	.word	0x20202020
 80012a4:	20202020 	.word	0x20202020
 80012a8:	20202020 	.word	0x20202020
 80012ac:	20202020 	.word	0x20202020
 80012b0:	61522020 	.word	0x61522020
 80012b4:	206f6964 	.word	0x206f6964
 80012b8:	312e3056 	.word	0x312e3056
 80012bc:	20202020 	.word	0x20202020
 80012c0:	20202020 	.word	0x20202020
 80012c4:	20202020 	.word	0x20202020
 80012c8:	20202020 	.word	0x20202020
 80012cc:	20202020 	.word	0x20202020
 80012d0:	0a202020 	.word	0x0a202020
 80012d4:	00000000 	.word	0x00000000
 80012d8:	2e31202a 	.word	0x2e31202a
 80012dc:	61422020 	.word	0x61422020
 80012e0:	5320646e 	.word	0x5320646e
 80012e4:	63656c65 	.word	0x63656c65
 80012e8:	20202074 	.word	0x20202074
 80012ec:	20202020 	.word	0x20202020
 80012f0:	20202020 	.word	0x20202020
 80012f4:	20202020 	.word	0x20202020
 80012f8:	20202020 	.word	0x20202020
 80012fc:	20202020 	.word	0x20202020
 8001300:	20202020 	.word	0x20202020
 8001304:	20202020 	.word	0x20202020
 8001308:	20202020 	.word	0x20202020
 800130c:	0a2a2020 	.word	0x0a2a2020
 8001310:	00000000 	.word	0x00000000
 8001314:	2e32202a 	.word	0x2e32202a
 8001318:	48432020 	.word	0x48432020
 800131c:	202b2b20 	.word	0x202b2b20
 8001320:	20202020 	.word	0x20202020
 8001324:	20202020 	.word	0x20202020
 8001328:	20202020 	.word	0x20202020
 800132c:	20202020 	.word	0x20202020
 8001330:	20202020 	.word	0x20202020
 8001334:	20202020 	.word	0x20202020
 8001338:	20202020 	.word	0x20202020
 800133c:	20202020 	.word	0x20202020
 8001340:	20202020 	.word	0x20202020
 8001344:	20202020 	.word	0x20202020
 8001348:	0a2a2020 	.word	0x0a2a2020
 800134c:	00000000 	.word	0x00000000
 8001350:	2e33202a 	.word	0x2e33202a
 8001354:	48432020 	.word	0x48432020
 8001358:	202d2d20 	.word	0x202d2d20
 800135c:	20202020 	.word	0x20202020
 8001360:	20202020 	.word	0x20202020
 8001364:	20202020 	.word	0x20202020
 8001368:	20202020 	.word	0x20202020
 800136c:	20202020 	.word	0x20202020
 8001370:	20202020 	.word	0x20202020
 8001374:	20202020 	.word	0x20202020
 8001378:	20202020 	.word	0x20202020
 800137c:	20202020 	.word	0x20202020
 8001380:	20202020 	.word	0x20202020
 8001384:	0a2a2020 	.word	0x0a2a2020
 8001388:	00000000 	.word	0x00000000
 800138c:	2e34202a 	.word	0x2e34202a
 8001390:	75412020 	.word	0x75412020
 8001394:	53206f74 	.word	0x53206f74
 8001398:	63726165 	.word	0x63726165
 800139c:	202b2068 	.word	0x202b2068
 80013a0:	20202020 	.word	0x20202020
 80013a4:	20202020 	.word	0x20202020
 80013a8:	20202020 	.word	0x20202020
 80013ac:	20202020 	.word	0x20202020
 80013b0:	20202020 	.word	0x20202020
 80013b4:	20202020 	.word	0x20202020
 80013b8:	20202020 	.word	0x20202020
 80013bc:	20202020 	.word	0x20202020
 80013c0:	0a2a2020 	.word	0x0a2a2020
 80013c4:	00000000 	.word	0x00000000
 80013c8:	2e35202a 	.word	0x2e35202a
 80013cc:	75412020 	.word	0x75412020
 80013d0:	53206f74 	.word	0x53206f74
 80013d4:	63726165 	.word	0x63726165
 80013d8:	202d2068 	.word	0x202d2068
 80013dc:	20202020 	.word	0x20202020
 80013e0:	20202020 	.word	0x20202020
 80013e4:	20202020 	.word	0x20202020
 80013e8:	20202020 	.word	0x20202020
 80013ec:	20202020 	.word	0x20202020
 80013f0:	20202020 	.word	0x20202020
 80013f4:	20202020 	.word	0x20202020
 80013f8:	20202020 	.word	0x20202020
 80013fc:	0a2a2020 	.word	0x0a2a2020
 8001400:	00000000 	.word	0x00000000
 8001404:	2e36202a 	.word	0x2e36202a
 8001408:	6f562020 	.word	0x6f562020
 800140c:	656d756c 	.word	0x656d756c
 8001410:	20202b20 	.word	0x20202b20
 8001414:	20202020 	.word	0x20202020
 8001418:	20202020 	.word	0x20202020
 800141c:	20202020 	.word	0x20202020
 8001420:	20202020 	.word	0x20202020
 8001424:	20202020 	.word	0x20202020
 8001428:	20202020 	.word	0x20202020
 800142c:	20202020 	.word	0x20202020
 8001430:	20202020 	.word	0x20202020
 8001434:	20202020 	.word	0x20202020
 8001438:	0a2a2020 	.word	0x0a2a2020
 800143c:	00000000 	.word	0x00000000
 8001440:	2e37202a 	.word	0x2e37202a
 8001444:	6f562020 	.word	0x6f562020
 8001448:	656d756c 	.word	0x656d756c
 800144c:	20202d20 	.word	0x20202d20
 8001450:	20202020 	.word	0x20202020
 8001454:	20202020 	.word	0x20202020
 8001458:	20202020 	.word	0x20202020
 800145c:	20202020 	.word	0x20202020
 8001460:	20202020 	.word	0x20202020
 8001464:	20202020 	.word	0x20202020
 8001468:	20202020 	.word	0x20202020
 800146c:	20202020 	.word	0x20202020
 8001470:	20202020 	.word	0x20202020
 8001474:	0a2a2020 	.word	0x0a2a2020
 8001478:	00000000 	.word	0x00000000
 800147c:	2e38202a 	.word	0x2e38202a
 8001480:	20202020 	.word	0x20202020
 8001484:	20202020 	.word	0x20202020
 8001488:	20202020 	.word	0x20202020
 800148c:	20202020 	.word	0x20202020
 8001490:	20202020 	.word	0x20202020
 8001494:	20202020 	.word	0x20202020
 8001498:	20202020 	.word	0x20202020
 800149c:	20202020 	.word	0x20202020
 80014a0:	20202020 	.word	0x20202020
 80014a4:	20202020 	.word	0x20202020
 80014a8:	20202020 	.word	0x20202020
 80014ac:	20202020 	.word	0x20202020
 80014b0:	0a2a2020 	.word	0x0a2a2020
 80014b4:	00000000 	.word	0x00000000
 80014b8:	2e39202a 	.word	0x2e39202a
 80014bc:	20202020 	.word	0x20202020
 80014c0:	20202020 	.word	0x20202020
 80014c4:	20202020 	.word	0x20202020
 80014c8:	20202020 	.word	0x20202020
 80014cc:	20202020 	.word	0x20202020
 80014d0:	20202020 	.word	0x20202020
 80014d4:	20202020 	.word	0x20202020
 80014d8:	20202020 	.word	0x20202020
 80014dc:	20202020 	.word	0x20202020
 80014e0:	20202020 	.word	0x20202020
 80014e4:	20202020 	.word	0x20202020
 80014e8:	20202020 	.word	0x20202020
 80014ec:	0a2a2020 	.word	0x0a2a2020
 80014f0:	00000000 	.word	0x00000000
 80014f4:	2e6d202a 	.word	0x2e6d202a
 80014f8:	654d2020 	.word	0x654d2020
 80014fc:	2020756e 	.word	0x2020756e
 8001500:	20202020 	.word	0x20202020
 8001504:	20202020 	.word	0x20202020
 8001508:	20202020 	.word	0x20202020
 800150c:	20202020 	.word	0x20202020
 8001510:	20202020 	.word	0x20202020
 8001514:	20202020 	.word	0x20202020
 8001518:	20202020 	.word	0x20202020
 800151c:	20202020 	.word	0x20202020
 8001520:	20202020 	.word	0x20202020
 8001524:	20202020 	.word	0x20202020
 8001528:	0a2a2020 	.word	0x0a2a2020
 800152c:	00000000 	.word	0x00000000
 8001530:	656c6573 	.word	0x656c6573
 8001534:	74207463 	.word	0x74207463
 8001538:	63206568 	.word	0x63206568
 800153c:	616d6d6f 	.word	0x616d6d6f
 8001540:	6e20646e 	.word	0x6e20646e
 8001544:	65626d75 	.word	0x65626d75
 8001548:	203a2072 	.word	0x203a2072
 800154c:	00000000 	.word	0x00000000
 8001550:	312e6f4e 	.word	0x312e6f4e
 8001554:	0000000a 	.word	0x0000000a
 8001558:	322e6f4e 	.word	0x322e6f4e
 800155c:	0000000a 	.word	0x0000000a
 8001560:	332e6f4e 	.word	0x332e6f4e
 8001564:	0000000a 	.word	0x0000000a
 8001568:	342e6f4e 	.word	0x342e6f4e
 800156c:	0000000a 	.word	0x0000000a
 8001570:	352e6f4e 	.word	0x352e6f4e
 8001574:	0000000a 	.word	0x0000000a
 8001578:	362e6f4e 	.word	0x362e6f4e
 800157c:	0000000a 	.word	0x0000000a
 8001580:	372e6f4e 	.word	0x372e6f4e
 8001584:	0000000a 	.word	0x0000000a
 8001588:	382e6f4e 	.word	0x382e6f4e
 800158c:	0000000a 	.word	0x0000000a
 8001590:	392e6f4e 	.word	0x392e6f4e
 8001594:	0000000a 	.word	0x0000000a
 8001598:	302e6f4e 	.word	0x302e6f4e
 800159c:	0000000a 	.word	0x0000000a
