
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001640  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ._usrstack    00000100  20000000  20000000  00009640  2**0
                  CONTENTS
  2 .debug_abbrev 000006ce  00000000  00000000  00009740  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000d00  00000000  00000000  00009e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_line   00000878  00000000  00000000  0000ab0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_loc    00001a53  00000000  00000000  0000b386  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020c  00000000  00000000  0000cdd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubtypes 000000f4  00000000  00000000  0000cfe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001a8  00000000  00000000  0000d0d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000002e0  00000000  00000000  0000d281  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030c  00000000  00000000  0000d561  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000002a  00000000  00000000  0000d86d  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000031  00000000  00000000  0000d897  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000002c8  00000000  00000000  0000d8c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 21 11 00 08                             .P. !...

08000008 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000008:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800000a:	4906      	ldr	r1, [pc, #24]	; (8000024 <main+0x1c>)
 800000c:	4788      	blx	r1
	Ap_Init();
 800000e:	4806      	ldr	r0, [pc, #24]	; (8000028 <main+0x20>)
 8000010:	4780      	blx	r0
	int key;

	Main_Init();
	

    printf("enter any key.......\n");
 8000012:	4c06      	ldr	r4, [pc, #24]	; (800002c <main+0x24>)
 8000014:	4806      	ldr	r0, [pc, #24]	; (8000030 <main+0x28>)
 8000016:	47a0      	blx	r4

	//-- 명령어 처리
	//
	Menu_ExeCmd();    
 8000018:	4b06      	ldr	r3, [pc, #24]	; (8000034 <main+0x2c>)
 800001a:	4798      	blx	r3

    printf("The End\n");
 800001c:	4806      	ldr	r0, [pc, #24]	; (8000038 <main+0x30>)
 800001e:	47a0      	blx	r4
 8000020:	e7fe      	b.n	8000020 <main+0x18>
 8000022:	bf00      	nop
 8000024:	08001185 	.word	0x08001185
 8000028:	0800003d 	.word	0x0800003d
 800002c:	080005f9 	.word	0x080005f9
 8000030:	080012fc 	.word	0x080012fc
 8000034:	080000ed 	.word	0x080000ed
 8000038:	08001314 	.word	0x08001314

0800003c <Ap_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
}
 800003c:	4770      	bx	lr
 800003e:	bf00      	nop

08000040 <main_menu>:




int main_menu(void)
{
 8000040:	b570      	push	{r4, r5, r6, lr}
    int key;

    printf("\n\n");
 8000042:	4e18      	ldr	r6, [pc, #96]	; (80000a4 <main_menu+0x64>)
    printf("-------------------------------------------------\n");
 8000044:	4d18      	ldr	r5, [pc, #96]	; (80000a8 <main_menu+0x68>)

int main_menu(void)
{
    int key;

    printf("\n\n");
 8000046:	4c19      	ldr	r4, [pc, #100]	; (80000ac <main_menu+0x6c>)
 8000048:	4630      	mov	r0, r6
 800004a:	47a0      	blx	r4
    printf("-------------------------------------------------\n");
 800004c:	4628      	mov	r0, r5
 800004e:	47a0      	blx	r4
    printf("                    MAIN MENU                    \n");
 8000050:	4817      	ldr	r0, [pc, #92]	; (80000b0 <main_menu+0x70>)
 8000052:	47a0      	blx	r4
    printf("-------------------------------------------------\n");
 8000054:	4628      	mov	r0, r5
 8000056:	47a0      	blx	r4
    printf(" 0. Smart Robot B'D DIO 00                       \n");
 8000058:	4816      	ldr	r0, [pc, #88]	; (80000b4 <main_menu+0x74>)
 800005a:	47a0      	blx	r4
    printf(" 1. Smart Robot B'D DIO 01                       \n");
 800005c:	4816      	ldr	r0, [pc, #88]	; (80000b8 <main_menu+0x78>)
 800005e:	47a0      	blx	r4
    printf(" 2. Smart Robot B'D DIO 02                       \n");
 8000060:	4816      	ldr	r0, [pc, #88]	; (80000bc <main_menu+0x7c>)
 8000062:	47a0      	blx	r4
    printf(" 3. Smart Robot B'D DIO 03                       \n");
 8000064:	4816      	ldr	r0, [pc, #88]	; (80000c0 <main_menu+0x80>)
 8000066:	47a0      	blx	r4
    printf(" 4. Smart Robot B'D DIO 04                       \n");
 8000068:	4816      	ldr	r0, [pc, #88]	; (80000c4 <main_menu+0x84>)
 800006a:	47a0      	blx	r4
    printf(" 5. Smart Robot B'D DIO 05                       \n");
 800006c:	4816      	ldr	r0, [pc, #88]	; (80000c8 <main_menu+0x88>)
 800006e:	47a0      	blx	r4
    printf(" 6. Smart Robot B'D DIO 06                       \n");
 8000070:	4816      	ldr	r0, [pc, #88]	; (80000cc <main_menu+0x8c>)
 8000072:	47a0      	blx	r4
    printf(" 7. Smart Robot B'D DIO 07                       \n");
 8000074:	4816      	ldr	r0, [pc, #88]	; (80000d0 <main_menu+0x90>)
 8000076:	47a0      	blx	r4
    printf(" 8. Smart Robot B'D DIO 08                       \n");
 8000078:	4816      	ldr	r0, [pc, #88]	; (80000d4 <main_menu+0x94>)
 800007a:	47a0      	blx	r4
    printf(" 9. Smart Robot B'D DIO 09                       \n");
 800007c:	4816      	ldr	r0, [pc, #88]	; (80000d8 <main_menu+0x98>)
 800007e:	47a0      	blx	r4

    printf("-------------------------------------------------\n");
 8000080:	4628      	mov	r0, r5
 8000082:	47a0      	blx	r4
    printf(" q. Smart Robot B'D FirmwareQUIT                 \n");
 8000084:	4815      	ldr	r0, [pc, #84]	; (80000dc <main_menu+0x9c>)
 8000086:	47a0      	blx	r4
    printf("-------------------------------------------------\n");
 8000088:	4628      	mov	r0, r5
 800008a:	47a0      	blx	r4
    printf("\n\n");
 800008c:	4630      	mov	r0, r6
 800008e:	47a0      	blx	r4
 
    printf("SELECT THE COMMAND NUMBER_ : ");
 8000090:	4813      	ldr	r0, [pc, #76]	; (80000e0 <main_menu+0xa0>)
 8000092:	47a0      	blx	r4

    key=get_byte();
 8000094:	4813      	ldr	r0, [pc, #76]	; (80000e4 <main_menu+0xa4>)
 8000096:	4780      	blx	r0

	Hw_Led_Toggle(0);
 8000098:	4b13      	ldr	r3, [pc, #76]	; (80000e8 <main_menu+0xa8>)
    printf("-------------------------------------------------\n");
    printf("\n\n");
 
    printf("SELECT THE COMMAND NUMBER_ : ");

    key=get_byte();
 800009a:	4604      	mov	r4, r0

	Hw_Led_Toggle(0);
 800009c:	2000      	movs	r0, #0
 800009e:	4798      	blx	r3
	
    return key;
}
 80000a0:	4620      	mov	r0, r4
 80000a2:	bd70      	pop	{r4, r5, r6, pc}
 80000a4:	08001320 	.word	0x08001320
 80000a8:	08001324 	.word	0x08001324
 80000ac:	080005f9 	.word	0x080005f9
 80000b0:	08001358 	.word	0x08001358
 80000b4:	0800138c 	.word	0x0800138c
 80000b8:	080013c0 	.word	0x080013c0
 80000bc:	080013f4 	.word	0x080013f4
 80000c0:	08001428 	.word	0x08001428
 80000c4:	0800145c 	.word	0x0800145c
 80000c8:	08001490 	.word	0x08001490
 80000cc:	080014c4 	.word	0x080014c4
 80000d0:	080014f8 	.word	0x080014f8
 80000d4:	0800152c 	.word	0x0800152c
 80000d8:	08001560 	.word	0x08001560
 80000dc:	08001594 	.word	0x08001594
 80000e0:	080015c8 	.word	0x080015c8
 80000e4:	08001229 	.word	0x08001229
 80000e8:	080012e9 	.word	0x080012e9

080000ec <Menu_ExeCmd>:



int Menu_ExeCmd(void)
{
 80000ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80000ee:	4caa      	ldr	r4, [pc, #680]	; (8000398 <Menu_ExeCmd+0x2ac>)




           case 'q':
               printf("exit\n");
 80000f0:	4daa      	ldr	r5, [pc, #680]	; (800039c <Menu_ExeCmd+0x2b0>)
               *(volatile unsigned long *) 0x40011014 |= 0x01 << 14;            // Off
               break;

           case 't':
               printf("No.0\n");
               *(volatile unsigned long *) 0x40011010 |= 0x01 << 15;            // On
 80000f2:	4fab      	ldr	r7, [pc, #684]	; (80003a0 <Menu_ExeCmd+0x2b4>)
               delay_second();               
 80000f4:	4eab      	ldr	r6, [pc, #684]	; (80003a4 <Menu_ExeCmd+0x2b8>)

int Menu_ExeCmd(void)
{
	int key;

    while((key=main_menu()) != 0)
 80000f6:	47a0      	blx	r4
 80000f8:	4603      	mov	r3, r0
 80000fa:	2800      	cmp	r0, #0
 80000fc:	f000 80a1 	beq.w	8000242 <Menu_ExeCmd+0x156>
    {
        switch(key)
 8000100:	3b30      	subs	r3, #48	; 0x30
 8000102:	2b44      	cmp	r3, #68	; 0x44
 8000104:	d8f7      	bhi.n	80000f6 <Menu_ExeCmd+0xa>
 8000106:	a201      	add	r2, pc, #4	; (adr r2, 800010c <Menu_ExeCmd+0x20>)
 8000108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800010c:	08000549 	.word	0x08000549
 8000110:	08000545 	.word	0x08000545
 8000114:	08000529 	.word	0x08000529
 8000118:	0800050d 	.word	0x0800050d
 800011c:	080004f1 	.word	0x080004f1
 8000120:	080004d5 	.word	0x080004d5
 8000124:	080004b9 	.word	0x080004b9
 8000128:	0800049d 	.word	0x0800049d
 800012c:	08000481 	.word	0x08000481
 8000130:	08000465 	.word	0x08000465
 8000134:	080000f7 	.word	0x080000f7
 8000138:	080000f7 	.word	0x080000f7
 800013c:	080000f7 	.word	0x080000f7
 8000140:	080000f7 	.word	0x080000f7
 8000144:	080000f7 	.word	0x080000f7
 8000148:	080000f7 	.word	0x080000f7
 800014c:	080000f7 	.word	0x080000f7
 8000150:	080000f7 	.word	0x080000f7
 8000154:	080000f7 	.word	0x080000f7
 8000158:	080000f7 	.word	0x080000f7
 800015c:	080000f7 	.word	0x080000f7
 8000160:	080000f7 	.word	0x080000f7
 8000164:	080000f7 	.word	0x080000f7
 8000168:	080000f7 	.word	0x080000f7
 800016c:	080000f7 	.word	0x080000f7
 8000170:	080000f7 	.word	0x080000f7
 8000174:	080000f7 	.word	0x080000f7
 8000178:	080000f7 	.word	0x080000f7
 800017c:	080000f7 	.word	0x080000f7
 8000180:	080000f7 	.word	0x080000f7
 8000184:	080000f7 	.word	0x080000f7
 8000188:	080000f7 	.word	0x080000f7
 800018c:	080000f7 	.word	0x080000f7
 8000190:	080000f7 	.word	0x080000f7
 8000194:	080000f7 	.word	0x080000f7
 8000198:	080000f7 	.word	0x080000f7
 800019c:	080000f7 	.word	0x080000f7
 80001a0:	080000f7 	.word	0x080000f7
 80001a4:	080000f7 	.word	0x080000f7
 80001a8:	080000f7 	.word	0x080000f7
 80001ac:	080000f7 	.word	0x080000f7
 80001b0:	080000f7 	.word	0x080000f7
 80001b4:	080000f7 	.word	0x080000f7
 80001b8:	080000f7 	.word	0x080000f7
 80001bc:	080000f7 	.word	0x080000f7
 80001c0:	080000f7 	.word	0x080000f7
 80001c4:	080000f7 	.word	0x080000f7
 80001c8:	080000f7 	.word	0x080000f7
 80001cc:	080000f7 	.word	0x080000f7
 80001d0:	08000449 	.word	0x08000449
 80001d4:	0800042d 	.word	0x0800042d
 80001d8:	08000411 	.word	0x08000411
 80001dc:	080003f5 	.word	0x080003f5
 80001e0:	080003d9 	.word	0x080003d9
 80001e4:	080003bd 	.word	0x080003bd
 80001e8:	0800037d 	.word	0x0800037d
 80001ec:	08000361 	.word	0x08000361
 80001f0:	08000345 	.word	0x08000345
 80001f4:	08000329 	.word	0x08000329
 80001f8:	0800030d 	.word	0x0800030d
 80001fc:	080002f1 	.word	0x080002f1
 8000200:	080002d5 	.word	0x080002d5
 8000204:	080002b9 	.word	0x080002b9
 8000208:	0800029d 	.word	0x0800029d
 800020c:	08000281 	.word	0x08000281
 8000210:	0800027b 	.word	0x0800027b
 8000214:	0800025f 	.word	0x0800025f
 8000218:	08000245 	.word	0x08000245
 800021c:	08000221 	.word	0x08000221
               delay_second();               
               *(volatile unsigned long *) 0x40011014 |= 0x01 << 14;            // Off
               break;

           case 't':
               printf("No.0\n");
 8000220:	4861      	ldr	r0, [pc, #388]	; (80003a8 <Menu_ExeCmd+0x2bc>)
 8000222:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40011010 |= 0x01 << 15;            // On
 8000224:	6838      	ldr	r0, [r7, #0]
 8000226:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 800022a:	603a      	str	r2, [r7, #0]
               delay_second();               
 800022c:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40011014 |= 0x01 << 15;            // Off
 800022e:	4b5f      	ldr	r3, [pc, #380]	; (80003ac <Menu_ExeCmd+0x2c0>)
 8000230:	6819      	ldr	r1, [r3, #0]
 8000232:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8000236:	6018      	str	r0, [r3, #0]

int Menu_ExeCmd(void)
{
	int key;

    while((key=main_menu()) != 0)
 8000238:	47a0      	blx	r4
 800023a:	4603      	mov	r3, r0
 800023c:	2800      	cmp	r0, #0
 800023e:	f47f af5f 	bne.w	8000100 <Menu_ExeCmd+0x14>
               break;
        }
    }
    
    return key;
}
 8000242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 15;            // Off
               break;

           case 's':
               printf("No.0\n");
 8000244:	4858      	ldr	r0, [pc, #352]	; (80003a8 <Menu_ExeCmd+0x2bc>)
 8000246:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40011010 |= 0x01 << 14;            // On
 8000248:	683a      	ldr	r2, [r7, #0]
 800024a:	f442 4180 	orr.w	r1, r2, #16384	; 0x4000
 800024e:	6039      	str	r1, [r7, #0]
               delay_second();               
 8000250:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40011014 |= 0x01 << 14;            // Off
 8000252:	4b56      	ldr	r3, [pc, #344]	; (80003ac <Menu_ExeCmd+0x2c0>)
 8000254:	6818      	ldr	r0, [r3, #0]
 8000256:	f440 4280 	orr.w	r2, r0, #16384	; 0x4000
 800025a:	601a      	str	r2, [r3, #0]
               break;
 800025c:	e74b      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 14;            // Off
               break;

           case 'r':
               printf("No.0\n");
 800025e:	4852      	ldr	r0, [pc, #328]	; (80003a8 <Menu_ExeCmd+0x2bc>)
 8000260:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 15;            // On
 8000262:	4853      	ldr	r0, [pc, #332]	; (80003b0 <Menu_ExeCmd+0x2c4>)
 8000264:	6801      	ldr	r1, [r0, #0]
 8000266:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
 800026a:	6002      	str	r2, [r0, #0]
               delay_second();               
 800026c:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 15;            // Off
 800026e:	4951      	ldr	r1, [pc, #324]	; (80003b4 <Menu_ExeCmd+0x2c8>)
 8000270:	680b      	ldr	r3, [r1, #0]
 8000272:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8000276:	6008      	str	r0, [r1, #0]
               break;
 8000278:	e73d      	b.n	80000f6 <Menu_ExeCmd+0xa>




           case 'q':
               printf("exit\n");
 800027a:	484f      	ldr	r0, [pc, #316]	; (80003b8 <Menu_ExeCmd+0x2cc>)
 800027c:	47a8      	blx	r5
 800027e:	e73a      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 13;            // Off
               break;

           case 'p':
               printf("No.0\n");
 8000280:	4849      	ldr	r0, [pc, #292]	; (80003a8 <Menu_ExeCmd+0x2bc>)
 8000282:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 14;            // On
 8000284:	4b4a      	ldr	r3, [pc, #296]	; (80003b0 <Menu_ExeCmd+0x2c4>)
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	f442 4180 	orr.w	r1, r2, #16384	; 0x4000
 800028c:	6019      	str	r1, [r3, #0]
               delay_second();               
 800028e:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 14;            // Off
 8000290:	4b48      	ldr	r3, [pc, #288]	; (80003b4 <Menu_ExeCmd+0x2c8>)
 8000292:	6818      	ldr	r0, [r3, #0]
 8000294:	f440 4280 	orr.w	r2, r0, #16384	; 0x4000
 8000298:	601a      	str	r2, [r3, #0]
               break;
 800029a:	e72c      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 12;            // Off
               break;

           case 'o':
               printf("No.0\n");
 800029c:	4842      	ldr	r0, [pc, #264]	; (80003a8 <Menu_ExeCmd+0x2bc>)
 800029e:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 13;            // On
 80002a0:	4843      	ldr	r0, [pc, #268]	; (80003b0 <Menu_ExeCmd+0x2c4>)
 80002a2:	6801      	ldr	r1, [r0, #0]
 80002a4:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 80002a8:	6002      	str	r2, [r0, #0]
               delay_second();               
 80002aa:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 13;            // Off
 80002ac:	4941      	ldr	r1, [pc, #260]	; (80003b4 <Menu_ExeCmd+0x2c8>)
 80002ae:	680b      	ldr	r3, [r1, #0]
 80002b0:	f443 5000 	orr.w	r0, r3, #8192	; 0x2000
 80002b4:	6008      	str	r0, [r1, #0]
               break;
 80002b6:	e71e      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 10;            // Off
               break;

           case 'n':
               printf("No.0\n");
 80002b8:	483b      	ldr	r0, [pc, #236]	; (80003a8 <Menu_ExeCmd+0x2bc>)
 80002ba:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 11;            // On
 80002bc:	4b3c      	ldr	r3, [pc, #240]	; (80003b0 <Menu_ExeCmd+0x2c4>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	f442 6100 	orr.w	r1, r2, #2048	; 0x800
 80002c4:	6019      	str	r1, [r3, #0]
               delay_second();               
 80002c6:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 12;            // Off
 80002c8:	4b3a      	ldr	r3, [pc, #232]	; (80003b4 <Menu_ExeCmd+0x2c8>)
 80002ca:	6818      	ldr	r0, [r3, #0]
 80002cc:	f440 5280 	orr.w	r2, r0, #4096	; 0x1000
 80002d0:	601a      	str	r2, [r3, #0]
               break;
 80002d2:	e710      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 9;            // Off
               break;

           case 'm':
               printf("No.0\n");
 80002d4:	4834      	ldr	r0, [pc, #208]	; (80003a8 <Menu_ExeCmd+0x2bc>)
 80002d6:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 10;            // On
 80002d8:	4835      	ldr	r0, [pc, #212]	; (80003b0 <Menu_ExeCmd+0x2c4>)
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 80002e0:	6002      	str	r2, [r0, #0]
               delay_second();               
 80002e2:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 10;            // Off
 80002e4:	4933      	ldr	r1, [pc, #204]	; (80003b4 <Menu_ExeCmd+0x2c8>)
 80002e6:	680b      	ldr	r3, [r1, #0]
 80002e8:	f443 6080 	orr.w	r0, r3, #1024	; 0x400
 80002ec:	6008      	str	r0, [r1, #0]
               break;
 80002ee:	e702      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 8;            // Off
               break;

           case 'l':
               printf("No.0\n");
 80002f0:	482d      	ldr	r0, [pc, #180]	; (80003a8 <Menu_ExeCmd+0x2bc>)
 80002f2:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 9;            // On
 80002f4:	4b2e      	ldr	r3, [pc, #184]	; (80003b0 <Menu_ExeCmd+0x2c4>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	f442 7100 	orr.w	r1, r2, #512	; 0x200
 80002fc:	6019      	str	r1, [r3, #0]
               delay_second();               
 80002fe:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 9;            // Off
 8000300:	4b2c      	ldr	r3, [pc, #176]	; (80003b4 <Menu_ExeCmd+0x2c8>)
 8000302:	6818      	ldr	r0, [r3, #0]
 8000304:	f440 7200 	orr.w	r2, r0, #512	; 0x200
 8000308:	601a      	str	r2, [r3, #0]
               break;
 800030a:	e6f4      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 7;            // Off
               break;

           case 'k':
               printf("No.0\n");
 800030c:	4826      	ldr	r0, [pc, #152]	; (80003a8 <Menu_ExeCmd+0x2bc>)
 800030e:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 8;            // On
 8000310:	4827      	ldr	r0, [pc, #156]	; (80003b0 <Menu_ExeCmd+0x2c4>)
 8000312:	6801      	ldr	r1, [r0, #0]
 8000314:	f441 7280 	orr.w	r2, r1, #256	; 0x100
 8000318:	6002      	str	r2, [r0, #0]
               delay_second();               
 800031a:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 8;            // Off
 800031c:	4925      	ldr	r1, [pc, #148]	; (80003b4 <Menu_ExeCmd+0x2c8>)
 800031e:	680b      	ldr	r3, [r1, #0]
 8000320:	f443 7080 	orr.w	r0, r3, #256	; 0x100
 8000324:	6008      	str	r0, [r1, #0]
               break;
 8000326:	e6e6      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 6;            // Off
               break;

           case 'j':
               printf("No.0\n");
 8000328:	481f      	ldr	r0, [pc, #124]	; (80003a8 <Menu_ExeCmd+0x2bc>)
 800032a:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 7;            // On
 800032c:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <Menu_ExeCmd+0x2c4>)
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8000334:	6019      	str	r1, [r3, #0]
               delay_second();               
 8000336:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 7;            // Off
 8000338:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <Menu_ExeCmd+0x2c8>)
 800033a:	6818      	ldr	r0, [r3, #0]
 800033c:	f040 0280 	orr.w	r2, r0, #128	; 0x80
 8000340:	601a      	str	r2, [r3, #0]
               break;
 8000342:	e6d8      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 5;            // Off
               break;

           case 'i':
               printf("No.0\n");
 8000344:	4818      	ldr	r0, [pc, #96]	; (80003a8 <Menu_ExeCmd+0x2bc>)
 8000346:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 6;            // On
 8000348:	4819      	ldr	r0, [pc, #100]	; (80003b0 <Menu_ExeCmd+0x2c4>)
 800034a:	6801      	ldr	r1, [r0, #0]
 800034c:	f041 0240 	orr.w	r2, r1, #64	; 0x40
 8000350:	6002      	str	r2, [r0, #0]
               delay_second();               
 8000352:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 6;            // Off
 8000354:	4917      	ldr	r1, [pc, #92]	; (80003b4 <Menu_ExeCmd+0x2c8>)
 8000356:	680b      	ldr	r3, [r1, #0]
 8000358:	f043 0040 	orr.w	r0, r3, #64	; 0x40
 800035c:	6008      	str	r0, [r1, #0]
               break;
 800035e:	e6ca      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 4;            // Off
               break;

           case 'h':
               printf("No.0\n");
 8000360:	4811      	ldr	r0, [pc, #68]	; (80003a8 <Menu_ExeCmd+0x2bc>)
 8000362:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 5;            // On
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <Menu_ExeCmd+0x2c4>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	f042 0120 	orr.w	r1, r2, #32
 800036c:	6019      	str	r1, [r3, #0]
               delay_second();               
 800036e:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 5;            // Off
 8000370:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <Menu_ExeCmd+0x2c8>)
 8000372:	6818      	ldr	r0, [r3, #0]
 8000374:	f040 0220 	orr.w	r2, r0, #32
 8000378:	601a      	str	r2, [r3, #0]
               break;
 800037a:	e6bc      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 3;            // Off
               break;

           case 'g':
               printf("No.0\n");
 800037c:	480a      	ldr	r0, [pc, #40]	; (80003a8 <Menu_ExeCmd+0x2bc>)
 800037e:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 4;            // On
 8000380:	480b      	ldr	r0, [pc, #44]	; (80003b0 <Menu_ExeCmd+0x2c4>)
 8000382:	6801      	ldr	r1, [r0, #0]
 8000384:	f041 0210 	orr.w	r2, r1, #16
 8000388:	6002      	str	r2, [r0, #0]
               delay_second();               
 800038a:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 4;            // Off
 800038c:	4909      	ldr	r1, [pc, #36]	; (80003b4 <Menu_ExeCmd+0x2c8>)
 800038e:	680b      	ldr	r3, [r1, #0]
 8000390:	f043 0010 	orr.w	r0, r3, #16
 8000394:	6008      	str	r0, [r1, #0]
               break;
 8000396:	e6ae      	b.n	80000f6 <Menu_ExeCmd+0xa>
 8000398:	08000041 	.word	0x08000041
 800039c:	080005f9 	.word	0x080005f9
 80003a0:	40011010 	.word	0x40011010
 80003a4:	0800059d 	.word	0x0800059d
 80003a8:	08001630 	.word	0x08001630
 80003ac:	40011014 	.word	0x40011014
 80003b0:	40010c10 	.word	0x40010c10
 80003b4:	40010c14 	.word	0x40010c14
 80003b8:	08001638 	.word	0x08001638
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 2;            // Off
               break;

           case 'f':
               printf("No.0\n");
 80003bc:	4869      	ldr	r0, [pc, #420]	; (8000564 <Menu_ExeCmd+0x478>)
 80003be:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 3;            // On
 80003c0:	4b69      	ldr	r3, [pc, #420]	; (8000568 <Menu_ExeCmd+0x47c>)
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	f042 0108 	orr.w	r1, r2, #8
 80003c8:	6019      	str	r1, [r3, #0]
               delay_second();               
 80003ca:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 3;            // Off
 80003cc:	4b67      	ldr	r3, [pc, #412]	; (800056c <Menu_ExeCmd+0x480>)
 80003ce:	6818      	ldr	r0, [r3, #0]
 80003d0:	f040 0208 	orr.w	r2, r0, #8
 80003d4:	601a      	str	r2, [r3, #0]
               break;
 80003d6:	e68e      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 1;            // Off
               break;

           case 'e':
               printf("No.0\n");
 80003d8:	4862      	ldr	r0, [pc, #392]	; (8000564 <Menu_ExeCmd+0x478>)
 80003da:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 2;            // On
 80003dc:	4862      	ldr	r0, [pc, #392]	; (8000568 <Menu_ExeCmd+0x47c>)
 80003de:	6801      	ldr	r1, [r0, #0]
 80003e0:	f041 0204 	orr.w	r2, r1, #4
 80003e4:	6002      	str	r2, [r0, #0]
               delay_second();               
 80003e6:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 2;            // Off
 80003e8:	4960      	ldr	r1, [pc, #384]	; (800056c <Menu_ExeCmd+0x480>)
 80003ea:	680b      	ldr	r3, [r1, #0]
 80003ec:	f043 0004 	orr.w	r0, r3, #4
 80003f0:	6008      	str	r0, [r1, #0]
               break;
 80003f2:	e680      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 0;            // Off
               break;

           case 'd':
               printf("No.0\n");
 80003f4:	485b      	ldr	r0, [pc, #364]	; (8000564 <Menu_ExeCmd+0x478>)
 80003f6:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 1;            // On
 80003f8:	4b5b      	ldr	r3, [pc, #364]	; (8000568 <Menu_ExeCmd+0x47c>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	f042 0102 	orr.w	r1, r2, #2
 8000400:	6019      	str	r1, [r3, #0]
               delay_second();               
 8000402:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 1;            // Off
 8000404:	4b59      	ldr	r3, [pc, #356]	; (800056c <Menu_ExeCmd+0x480>)
 8000406:	6818      	ldr	r0, [r3, #0]
 8000408:	f040 0202 	orr.w	r2, r0, #2
 800040c:	601a      	str	r2, [r3, #0]
               break;
 800040e:	e672      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 15;            // Off
               break;

           case 'c':
               printf("No.0\n");
 8000410:	4854      	ldr	r0, [pc, #336]	; (8000564 <Menu_ExeCmd+0x478>)
 8000412:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010C10 |= 0x01 << 0;            // On
 8000414:	4854      	ldr	r0, [pc, #336]	; (8000568 <Menu_ExeCmd+0x47c>)
 8000416:	6801      	ldr	r1, [r0, #0]
 8000418:	f041 0201 	orr.w	r2, r1, #1
 800041c:	6002      	str	r2, [r0, #0]
               delay_second();               
 800041e:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 0;            // Off
 8000420:	4952      	ldr	r1, [pc, #328]	; (800056c <Menu_ExeCmd+0x480>)
 8000422:	680b      	ldr	r3, [r1, #0]
 8000424:	f043 0001 	orr.w	r0, r3, #1
 8000428:	6008      	str	r0, [r1, #0]
               break;
 800042a:	e664      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 14;            // Off
               break;

           case 'b':
               printf("No.0\n");
 800042c:	484d      	ldr	r0, [pc, #308]	; (8000564 <Menu_ExeCmd+0x478>)
 800042e:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010810 |= 0x01 << 15;            // On
 8000430:	4b4f      	ldr	r3, [pc, #316]	; (8000570 <Menu_ExeCmd+0x484>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8000438:	6019      	str	r1, [r3, #0]
               delay_second();               
 800043a:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 15;            // Off
 800043c:	4b4d      	ldr	r3, [pc, #308]	; (8000574 <Menu_ExeCmd+0x488>)
 800043e:	6818      	ldr	r0, [r3, #0]
 8000440:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 8000444:	601a      	str	r2, [r3, #0]
               break;
 8000446:	e656      	b.n	80000f6 <Menu_ExeCmd+0xa>




           case 'a':
               printf("No.0\n");
 8000448:	4846      	ldr	r0, [pc, #280]	; (8000564 <Menu_ExeCmd+0x478>)
 800044a:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010810 |= 0x01 << 14;            // On
 800044c:	4848      	ldr	r0, [pc, #288]	; (8000570 <Menu_ExeCmd+0x484>)
 800044e:	6801      	ldr	r1, [r0, #0]
 8000450:	f441 4280 	orr.w	r2, r1, #16384	; 0x4000
 8000454:	6002      	str	r2, [r0, #0]
               delay_second();               
 8000456:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 14;            // Off
 8000458:	4946      	ldr	r1, [pc, #280]	; (8000574 <Menu_ExeCmd+0x488>)
 800045a:	680b      	ldr	r3, [r1, #0]
 800045c:	f443 4080 	orr.w	r0, r3, #16384	; 0x4000
 8000460:	6008      	str	r0, [r1, #0]
               break;
 8000462:	e648      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 7;            // Off
               break;

           case '9':
               printf("No.9\n");
 8000464:	4844      	ldr	r0, [pc, #272]	; (8000578 <Menu_ExeCmd+0x48c>)
 8000466:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010810 |= 0x01 << 8;            // On
 8000468:	4841      	ldr	r0, [pc, #260]	; (8000570 <Menu_ExeCmd+0x484>)
 800046a:	6801      	ldr	r1, [r0, #0]
 800046c:	f441 7280 	orr.w	r2, r1, #256	; 0x100
 8000470:	6002      	str	r2, [r0, #0]
               delay_second();               
 8000472:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 8;            // Off
 8000474:	493f      	ldr	r1, [pc, #252]	; (8000574 <Menu_ExeCmd+0x488>)
 8000476:	680b      	ldr	r3, [r1, #0]
 8000478:	f443 7080 	orr.w	r0, r3, #256	; 0x100
 800047c:	6008      	str	r0, [r1, #0]
               break;
 800047e:	e63a      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 6;            // Off
               break;  

           case '8':
               printf("No.8\n");
 8000480:	483e      	ldr	r0, [pc, #248]	; (800057c <Menu_ExeCmd+0x490>)
 8000482:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010810 |= 0x01 << 7;            // On
 8000484:	4b3a      	ldr	r3, [pc, #232]	; (8000570 <Menu_ExeCmd+0x484>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 800048c:	6019      	str	r1, [r3, #0]
               delay_second();               
 800048e:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 7;            // Off
 8000490:	4b38      	ldr	r3, [pc, #224]	; (8000574 <Menu_ExeCmd+0x488>)
 8000492:	6818      	ldr	r0, [r3, #0]
 8000494:	f040 0280 	orr.w	r2, r0, #128	; 0x80
 8000498:	601a      	str	r2, [r3, #0]
               break;
 800049a:	e62c      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 5;            // Off
               break;  

           case '7':
               printf("No.7\n");
 800049c:	4838      	ldr	r0, [pc, #224]	; (8000580 <Menu_ExeCmd+0x494>)
 800049e:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010810 |= 0x01 << 6;            // On
 80004a0:	4833      	ldr	r0, [pc, #204]	; (8000570 <Menu_ExeCmd+0x484>)
 80004a2:	6801      	ldr	r1, [r0, #0]
 80004a4:	f041 0240 	orr.w	r2, r1, #64	; 0x40
 80004a8:	6002      	str	r2, [r0, #0]
               delay_second();               
 80004aa:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 6;            // Off
 80004ac:	4931      	ldr	r1, [pc, #196]	; (8000574 <Menu_ExeCmd+0x488>)
 80004ae:	680b      	ldr	r3, [r1, #0]
 80004b0:	f043 0040 	orr.w	r0, r3, #64	; 0x40
 80004b4:	6008      	str	r0, [r1, #0]
               break;  
 80004b6:	e61e      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 4;            // Off
               break;  

           case '6':
               printf("No.6\n");
 80004b8:	4832      	ldr	r0, [pc, #200]	; (8000584 <Menu_ExeCmd+0x498>)
 80004ba:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010810 |= 0x01 << 5;            // On
 80004bc:	4b2c      	ldr	r3, [pc, #176]	; (8000570 <Menu_ExeCmd+0x484>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	f042 0120 	orr.w	r1, r2, #32
 80004c4:	6019      	str	r1, [r3, #0]
               delay_second();               
 80004c6:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 5;            // Off
 80004c8:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <Menu_ExeCmd+0x488>)
 80004ca:	6818      	ldr	r0, [r3, #0]
 80004cc:	f040 0220 	orr.w	r2, r0, #32
 80004d0:	601a      	str	r2, [r3, #0]
               break;  
 80004d2:	e610      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 3;            // Off
               break;  

           case '5':
               printf("No.5\n");
 80004d4:	482c      	ldr	r0, [pc, #176]	; (8000588 <Menu_ExeCmd+0x49c>)
 80004d6:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010810 |= 0x01 << 4;            // On
 80004d8:	4825      	ldr	r0, [pc, #148]	; (8000570 <Menu_ExeCmd+0x484>)
 80004da:	6801      	ldr	r1, [r0, #0]
 80004dc:	f041 0210 	orr.w	r2, r1, #16
 80004e0:	6002      	str	r2, [r0, #0]
               delay_second();               
 80004e2:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 4;            // Off
 80004e4:	4923      	ldr	r1, [pc, #140]	; (8000574 <Menu_ExeCmd+0x488>)
 80004e6:	680b      	ldr	r3, [r1, #0]
 80004e8:	f043 0010 	orr.w	r0, r3, #16
 80004ec:	6008      	str	r0, [r1, #0]
               break;  
 80004ee:	e602      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 2;            // Off
               break; 

           case '4':
               printf("No.4\n");
 80004f0:	4826      	ldr	r0, [pc, #152]	; (800058c <Menu_ExeCmd+0x4a0>)
 80004f2:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010810 |= 0x01 << 3;            // On
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <Menu_ExeCmd+0x484>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	f042 0108 	orr.w	r1, r2, #8
 80004fc:	6019      	str	r1, [r3, #0]
               delay_second();               
 80004fe:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 3;            // Off
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <Menu_ExeCmd+0x488>)
 8000502:	6818      	ldr	r0, [r3, #0]
 8000504:	f040 0208 	orr.w	r2, r0, #8
 8000508:	601a      	str	r2, [r3, #0]
               break;  
 800050a:	e5f4      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 1;            // Off
               break;

           case '3':
               printf("No.3\n");
 800050c:	4820      	ldr	r0, [pc, #128]	; (8000590 <Menu_ExeCmd+0x4a4>)
 800050e:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010810 |= 0x01 << 2;            // On
 8000510:	4817      	ldr	r0, [pc, #92]	; (8000570 <Menu_ExeCmd+0x484>)
 8000512:	6801      	ldr	r1, [r0, #0]
 8000514:	f041 0204 	orr.w	r2, r1, #4
 8000518:	6002      	str	r2, [r0, #0]
               delay_second();               
 800051a:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 2;            // Off
 800051c:	4915      	ldr	r1, [pc, #84]	; (8000574 <Menu_ExeCmd+0x488>)
 800051e:	680b      	ldr	r3, [r1, #0]
 8000520:	f043 0004 	orr.w	r0, r3, #4
 8000524:	6008      	str	r0, [r1, #0]
               break; 
 8000526:	e5e6      	b.n	80000f6 <Menu_ExeCmd+0xa>
               delay_second();               
               *(volatile unsigned long *) 0x40010C14 |= 0x01 << 3;            // Off   reset
               break;

           case '2':
               printf("No.2\n");
 8000528:	481a      	ldr	r0, [pc, #104]	; (8000594 <Menu_ExeCmd+0x4a8>)
 800052a:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010810 |= 0x01 << 1;            // On
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <Menu_ExeCmd+0x484>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	f042 0102 	orr.w	r1, r2, #2
 8000534:	6019      	str	r1, [r3, #0]
               delay_second();               
 8000536:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 1;            // Off
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <Menu_ExeCmd+0x488>)
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	f040 0202 	orr.w	r2, r0, #2
 8000540:	601a      	str	r2, [r3, #0]
               break;
 8000542:	e5d8      	b.n	80000f6 <Menu_ExeCmd+0xa>
    while((key=main_menu()) != 0)
    {
        switch(key)
        {
           case '1':
               printf("No.1\n");
 8000544:	4814      	ldr	r0, [pc, #80]	; (8000598 <Menu_ExeCmd+0x4ac>)
 8000546:	e73a      	b.n	80003be <Menu_ExeCmd+0x2d2>
               delay_second();               
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 8;            // Off
               break;

           case '0':
               printf("No.0\n");
 8000548:	4806      	ldr	r0, [pc, #24]	; (8000564 <Menu_ExeCmd+0x478>)
 800054a:	47a8      	blx	r5
               *(volatile unsigned long *) 0x40010810 |= 0x01 << 13;            // On
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <Menu_ExeCmd+0x484>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 8000554:	6019      	str	r1, [r3, #0]
               delay_second();               
 8000556:	47b0      	blx	r6
               *(volatile unsigned long *) 0x40010814 |= 0x01 << 13;            // Off
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <Menu_ExeCmd+0x488>)
 800055a:	6818      	ldr	r0, [r3, #0]
 800055c:	f440 5200 	orr.w	r2, r0, #8192	; 0x2000
 8000560:	601a      	str	r2, [r3, #0]
               break;
 8000562:	e5c8      	b.n	80000f6 <Menu_ExeCmd+0xa>
 8000564:	08001630 	.word	0x08001630
 8000568:	40010c10 	.word	0x40010c10
 800056c:	40010c14 	.word	0x40010c14
 8000570:	40010810 	.word	0x40010810
 8000574:	40010814 	.word	0x40010814
 8000578:	08001628 	.word	0x08001628
 800057c:	08001620 	.word	0x08001620
 8000580:	08001618 	.word	0x08001618
 8000584:	08001610 	.word	0x08001610
 8000588:	08001608 	.word	0x08001608
 800058c:	08001600 	.word	0x08001600
 8000590:	080015f8 	.word	0x080015f8
 8000594:	080015f0 	.word	0x080015f0
 8000598:	080015e8 	.word	0x080015e8

0800059c <delay_second>:



void delay(volatile unsigned int timeCount)
{
    while(timeCount --);
 800059c:	4a02      	ldr	r2, [pc, #8]	; (80005a8 <delay_second+0xc>)
 800059e:	1e53      	subs	r3, r2, #1
 80005a0:	3a02      	subs	r2, #2
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1fb      	bne.n	800059e <delay_second+0x2>
}

void delay_second(void)
{
    delay(806596);
}
 80005a6:	4770      	bx	lr
 80005a8:	000c4ec3 	.word	0x000c4ec3

080005ac <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 80005ac:	b410      	push	{r4}
        long remainder;
        if (!s || !s[0]) return false;
 80005ae:	b1e0      	cbz	r0, 80005ea <DecToLong+0x3e>
 80005b0:	7802      	ldrb	r2, [r0, #0]
 80005b2:	b1e2      	cbz	r2, 80005ee <DecToLong+0x42>


        for (*retval=0; *s; s++){
 80005b4:	2200      	movs	r2, #0
 80005b6:	600a      	str	r2, [r1, #0]
 80005b8:	7803      	ldrb	r3, [r0, #0]
 80005ba:	b1ab      	cbz	r3, 80005e8 <DecToLong+0x3c>
                if (*s < '0' || *s > '9') return false;
 80005bc:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80005c0:	b2e4      	uxtb	r4, r4
 80005c2:	2c09      	cmp	r4, #9
 80005c4:	d902      	bls.n	80005cc <DecToLong+0x20>
 80005c6:	e012      	b.n	80005ee <DecToLong+0x42>
 80005c8:	2c09      	cmp	r4, #9
 80005ca:	d812      	bhi.n	80005f2 <DecToLong+0x46>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 80005cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
                remainder = *s - '0';
 80005d0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
                *retval = *retval * 10 + remainder;
 80005d4:	3a30      	subs	r2, #48	; 0x30
 80005d6:	600a      	str	r2, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80005d8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 80005dc:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80005e0:	fa5f f48c 	uxtb.w	r4, ip
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1ef      	bne.n	80005c8 <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 80005e8:	2001      	movs	r0, #1
}        // DecToLong.
 80005ea:	bc10      	pop	{r4}
 80005ec:	4770      	bx	lr
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 80005ee:	4610      	mov	r0, r2
 80005f0:	e7fb      	b.n	80005ea <DecToLong+0x3e>
 80005f2:	2000      	movs	r0, #0
 80005f4:	e7f9      	b.n	80005ea <DecToLong+0x3e>
 80005f6:	bf00      	nop

080005f8 <printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void printf(char *fmt, ...)
{
 80005f8:	b40f      	push	{r0, r1, r2, r3}
 80005fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005fe:	b08d      	sub	sp, #52	; 0x34
        int                i;
        va_list args;
        char        *s=fmt;
 8000600:	f10d 0858 	add.w	r8, sp, #88	; 0x58
 8000604:	f858 5b04 	ldr.w	r5, [r8], #4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000608:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 80008d0 <printf+0x2d8>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 800060c:	4fae      	ldr	r7, [pc, #696]	; (80008c8 <printf+0x2d0>)
        va_list args;
        char        *s=fmt;
        char        format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
        va_start(args, fmt);
        while (*s){
 800060e:	7828      	ldrb	r0, [r5, #0]
 8000610:	2800      	cmp	r0, #0
 8000612:	f000 80ca 	beq.w	80007aa <printf+0x1b2>
                if (*s=='%'){
 8000616:	2825      	cmp	r0, #37	; 0x25
 8000618:	f040 80cc 	bne.w	80007b4 <printf+0x1bc>
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
 800061c:	f88d 001c 	strb.w	r0, [sp, #28]
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000620:	7868      	ldrb	r0, [r5, #1]
        char        format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
        va_start(args, fmt);
        while (*s){
                if (*s=='%'){
                        s++;
 8000622:	3501      	adds	r5, #1
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000624:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 8000628:	b2cb      	uxtb	r3, r1
 800062a:	2b01      	cmp	r3, #1
 800062c:	f240 82fd 	bls.w	8000c2a <printf+0x632>
 8000630:	2873      	cmp	r0, #115	; 0x73
 8000632:	f000 82fa 	beq.w	8000c2a <printf+0x632>
 8000636:	2878      	cmp	r0, #120	; 0x78
 8000638:	f000 82f7 	beq.w	8000c2a <printf+0x632>
 800063c:	2825      	cmp	r0, #37	; 0x25
 800063e:	f000 82f4 	beq.w	8000c2a <printf+0x632>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000642:	f88d 001d 	strb.w	r0, [sp, #29]
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000646:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800064a:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 800064e:	fa5f f28c 	uxtb.w	r2, ip
 8000652:	2a01      	cmp	r2, #1
 8000654:	f240 82f3 	bls.w	8000c3e <printf+0x646>
 8000658:	2873      	cmp	r0, #115	; 0x73
 800065a:	f000 82f0 	beq.w	8000c3e <printf+0x646>
 800065e:	2878      	cmp	r0, #120	; 0x78
 8000660:	f000 82ed 	beq.w	8000c3e <printf+0x646>
 8000664:	2825      	cmp	r0, #37	; 0x25
 8000666:	f000 82ea 	beq.w	8000c3e <printf+0x646>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 800066a:	f88d 001e 	strb.w	r0, [sp, #30]
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 800066e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000672:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 8000676:	b2cb      	uxtb	r3, r1
 8000678:	2b01      	cmp	r3, #1
 800067a:	f240 82e2 	bls.w	8000c42 <printf+0x64a>
 800067e:	2873      	cmp	r0, #115	; 0x73
 8000680:	f000 82df 	beq.w	8000c42 <printf+0x64a>
 8000684:	2878      	cmp	r0, #120	; 0x78
 8000686:	f000 82dc 	beq.w	8000c42 <printf+0x64a>
 800068a:	2825      	cmp	r0, #37	; 0x25
 800068c:	f000 82d9 	beq.w	8000c42 <printf+0x64a>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000690:	f88d 001f 	strb.w	r0, [sp, #31]
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000694:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000698:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 800069c:	fa5f f28c 	uxtb.w	r2, ip
 80006a0:	2a01      	cmp	r2, #1
 80006a2:	f240 82d0 	bls.w	8000c46 <printf+0x64e>
 80006a6:	2873      	cmp	r0, #115	; 0x73
 80006a8:	f000 82cd 	beq.w	8000c46 <printf+0x64e>
 80006ac:	2878      	cmp	r0, #120	; 0x78
 80006ae:	f000 82ca 	beq.w	8000c46 <printf+0x64e>
 80006b2:	2825      	cmp	r0, #37	; 0x25
 80006b4:	f000 82c7 	beq.w	8000c46 <printf+0x64e>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 80006b8:	f88d 0020 	strb.w	r0, [sp, #32]
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 80006bc:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80006c0:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 80006c4:	b2cb      	uxtb	r3, r1
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	f240 82bf 	bls.w	8000c4a <printf+0x652>
 80006cc:	2873      	cmp	r0, #115	; 0x73
 80006ce:	f000 82bc 	beq.w	8000c4a <printf+0x652>
 80006d2:	2878      	cmp	r0, #120	; 0x78
 80006d4:	f000 82b9 	beq.w	8000c4a <printf+0x652>
 80006d8:	2825      	cmp	r0, #37	; 0x25
 80006da:	f000 82b6 	beq.w	8000c4a <printf+0x652>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 80006de:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 80006e2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80006e6:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 80006ea:	fa5f f28c 	uxtb.w	r2, ip
 80006ee:	2a01      	cmp	r2, #1
 80006f0:	f240 82ad 	bls.w	8000c4e <printf+0x656>
 80006f4:	2873      	cmp	r0, #115	; 0x73
 80006f6:	f000 82aa 	beq.w	8000c4e <printf+0x656>
 80006fa:	2878      	cmp	r0, #120	; 0x78
 80006fc:	f000 82a7 	beq.w	8000c4e <printf+0x656>
 8000700:	2825      	cmp	r0, #37	; 0x25
 8000702:	f000 82a4 	beq.w	8000c4e <printf+0x656>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000706:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 800070a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800070e:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 8000712:	b2cb      	uxtb	r3, r1
 8000714:	2b01      	cmp	r3, #1
 8000716:	f240 829c 	bls.w	8000c52 <printf+0x65a>
 800071a:	2873      	cmp	r0, #115	; 0x73
 800071c:	f000 8299 	beq.w	8000c52 <printf+0x65a>
 8000720:	2878      	cmp	r0, #120	; 0x78
 8000722:	f000 8296 	beq.w	8000c52 <printf+0x65a>
 8000726:	2825      	cmp	r0, #37	; 0x25
 8000728:	f000 8293 	beq.w	8000c52 <printf+0x65a>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 800072c:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000730:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000734:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000738:	fa5f f28c 	uxtb.w	r2, ip
 800073c:	2a01      	cmp	r2, #1
 800073e:	f240 828a 	bls.w	8000c56 <printf+0x65e>
 8000742:	2873      	cmp	r0, #115	; 0x73
 8000744:	f000 8287 	beq.w	8000c56 <printf+0x65e>
 8000748:	2878      	cmp	r0, #120	; 0x78
 800074a:	f000 8284 	beq.w	8000c56 <printf+0x65e>
 800074e:	2825      	cmp	r0, #37	; 0x25
 8000750:	f000 8281 	beq.w	8000c56 <printf+0x65e>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000754:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000758:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800075c:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 8000760:	b2cb      	uxtb	r3, r1
 8000762:	2b01      	cmp	r3, #1
 8000764:	f240 844a 	bls.w	8000ffc <printf+0xa04>
 8000768:	2873      	cmp	r0, #115	; 0x73
 800076a:	f000 8447 	beq.w	8000ffc <printf+0xa04>
 800076e:	2878      	cmp	r0, #120	; 0x78
 8000770:	f000 8444 	beq.w	8000ffc <printf+0xa04>
 8000774:	2825      	cmp	r0, #37	; 0x25
 8000776:	f000 8441 	beq.w	8000ffc <printf+0xa04>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 800077a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800077e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
                                }
                        }
                        // "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
                        switch (*s++){
 8000782:	3501      	adds	r5, #1
 8000784:	2864      	cmp	r0, #100	; 0x64
 8000786:	f000 80a5 	beq.w	80008d4 <printf+0x2dc>
 800078a:	d817      	bhi.n	80007bc <printf+0x1c4>
 800078c:	2825      	cmp	r0, #37	; 0x25
 800078e:	f000 8088 	beq.w	80008a2 <printf+0x2aa>
 8000792:	2863      	cmp	r0, #99	; 0x63
 8000794:	f47f af3b 	bne.w	800060e <printf+0x16>
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
 8000798:	f858 0b04 	ldr.w	r0, [r8], #4
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 800079c:	4b4b      	ldr	r3, [pc, #300]	; (80008cc <printf+0x2d4>)
 800079e:	b2c0      	uxtb	r0, r0
 80007a0:	4798      	blx	r3
        va_list args;
        char        *s=fmt;
        char        format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
        va_start(args, fmt);
        while (*s){
 80007a2:	7828      	ldrb	r0, [r5, #0]
 80007a4:	2800      	cmp	r0, #0
 80007a6:	f47f af36 	bne.w	8000616 <printf+0x1e>
                        s++;
                }
        }
        va_end(args);
        return;
}
 80007aa:	b00d      	add	sp, #52	; 0x34
 80007ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007b0:	b004      	add	sp, #16
 80007b2:	4770      	bx	lr

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 80007b4:	4945      	ldr	r1, [pc, #276]	; (80008cc <printf+0x2d4>)
 80007b6:	4788      	blx	r1
                                        break;
                        }
                }
                else {
                        PrintChar("%c", *s);
                        s++;
 80007b8:	3501      	adds	r5, #1
 80007ba:	e728      	b.n	800060e <printf+0x16>
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
                        switch (*s++){
 80007bc:	2873      	cmp	r0, #115	; 0x73
 80007be:	d073      	beq.n	80008a8 <printf+0x2b0>
 80007c0:	2878      	cmp	r0, #120	; 0x78
 80007c2:	f47f af24 	bne.w	800060e <printf+0x16>
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
 80007c6:	f858 2b04 	ldr.w	r2, [r8], #4
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80007ca:	f89d 301c 	ldrb.w	r3, [sp, #28]

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80007ce:	2400      	movs	r4, #0
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
 80007d0:	920b      	str	r2, [sp, #44]	; 0x2c

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80007d2:	940a      	str	r4, [sp, #40]	; 0x28
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	f000 8471 	beq.w	80010bc <printf+0xac4>
                if (c=='x') break;
 80007da:	2b78      	cmp	r3, #120	; 0x78
 80007dc:	d033      	beq.n	8000846 <printf+0x24e>
 80007de:	4626      	mov	r6, r4
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80007e0:	46a2      	mov	sl, r4


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 80007e2:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80007e6:	fa5f fc81 	uxtb.w	ip, r1
 80007ea:	f1bc 0f08 	cmp.w	ip, #8
 80007ee:	d854      	bhi.n	800089a <printf+0x2a2>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80007f0:	aa0c      	add	r2, sp, #48	; 0x30
 80007f2:	eb02 0e06 	add.w	lr, r2, r6
 80007f6:	f81e 2c14 	ldrb.w	r2, [lr, #-20]
 80007fa:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 80007fe:	b2c3      	uxtb	r3, r0
 8000800:	2b09      	cmp	r3, #9
 8000802:	f200 820f 	bhi.w	8000c24 <printf+0x62c>
 8000806:	2300      	movs	r3, #0
 8000808:	a804      	add	r0, sp, #16
 800080a:	f10d 0e1c 	add.w	lr, sp, #28
                                tol[j] = s[i++];
 800080e:	3601      	adds	r6, #1
 8000810:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000812:	f81e 2006 	ldrb.w	r2, [lr, r6]
 8000816:	3301      	adds	r3, #1
 8000818:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800081c:	fa5f fc81 	uxtb.w	ip, r1
 8000820:	f1bc 0f09 	cmp.w	ip, #9
 8000824:	d9f3      	bls.n	800080e <printf+0x216>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000826:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 800082a:	4473      	add	r3, lr
                        i--;
                        DecToLong(tol, &flagcnt);
 800082c:	a90a      	add	r1, sp, #40	; 0x28
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800082e:	f803 ac20 	strb.w	sl, [r3, #-32]
                        i--;
 8000832:	3e01      	subs	r6, #1
                        DecToLong(tol, &flagcnt);
 8000834:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000836:	3601      	adds	r6, #1
 8000838:	aa0c      	add	r2, sp, #48	; 0x30
 800083a:	1990      	adds	r0, r2, r6
 800083c:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8000840:	b10b      	cbz	r3, 8000846 <printf+0x24e>
                if (c=='x') break;
 8000842:	2b78      	cmp	r3, #120	; 0x78
 8000844:	d1cd      	bne.n	80007e2 <printf+0x1ea>
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 800084a:	f403 007f 	and.w	r0, r3, #16711680	; 0xff0000
 800084e:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8000852:	1201      	asrs	r1, r0, #8
 8000854:	ea41 200c 	orr.w	r0, r1, ip, lsl #8
 8000858:	ea40 6c03 	orr.w	ip, r0, r3, lsl #24
 800085c:	ea4c 6113 	orr.w	r1, ip, r3, lsr #24
 8000860:	910b      	str	r1, [sp, #44]	; 0x2c
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000862:	2a00      	cmp	r2, #0
 8000864:	f000 80df 	beq.w	8000a26 <printf+0x42e>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8000868:	f012 0f01 	tst.w	r2, #1
 800086c:	f000 8297 	beq.w	8000d9e <printf+0x7a6>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8000870:	43d0      	mvns	r0, r2
 8000872:	3008      	adds	r0, #8
 8000874:	eb00 71d0 	add.w	r1, r0, r0, lsr #31
 8000878:	104a      	asrs	r2, r1, #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 800087a:	ab0b      	add	r3, sp, #44	; 0x2c
 800087c:	f813 e002 	ldrb.w	lr, [r3, r2]
                        if (lHex!=0) leading_zero=false;
 8000880:	f01e 030f 	ands.w	r3, lr, #15
 8000884:	f000 83d3 	beq.w	800102e <printf+0xa36>
                        if (lHex<10) lHex+='0';
 8000888:	2b09      	cmp	r3, #9
 800088a:	f240 8438 	bls.w	80010fe <printf+0xb06>
                        else         lHex+='A'-10;
 800088e:	3337      	adds	r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000890:	490e      	ldr	r1, [pc, #56]	; (80008cc <printf+0x2d4>)
 8000892:	4618      	mov	r0, r3
 8000894:	4788      	blx	r1
 8000896:	2100      	movs	r1, #0
 8000898:	e3cf      	b.n	800103a <printf+0xa42>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 800089a:	2b30      	cmp	r3, #48	; 0x30
 800089c:	bf08      	it	eq
 800089e:	2401      	moveq	r4, #1
 80008a0:	e7c9      	b.n	8000836 <printf+0x23e>
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <printf+0x2d4>)
 80008a4:	4798      	blx	r3
                                case 's' :
                                        PrintString(format, va_arg(args, char *));
                                        break;
                                case '%' :
                                        PrintChar("%c", '%');
                                        break;
 80008a6:	e6b2      	b.n	800060e <printf+0x16>
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
                                        break;
                                case 's' :
                                        PrintString(format, va_arg(args, char *));
 80008a8:	f858 4b04 	ldr.w	r4, [r8], #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 80008ac:	2c00      	cmp	r4, #0
 80008ae:	f43f aeae 	beq.w	800060e <printf+0x16>
        while (*s) print_byte(*s++);
 80008b2:	7820      	ldrb	r0, [r4, #0]
 80008b4:	2800      	cmp	r0, #0
 80008b6:	f43f aeaa 	beq.w	800060e <printf+0x16>
 80008ba:	4e04      	ldr	r6, [pc, #16]	; (80008cc <printf+0x2d4>)
 80008bc:	47b0      	blx	r6
 80008be:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80008c2:	2800      	cmp	r0, #0
 80008c4:	d1fa      	bne.n	80008bc <printf+0x2c4>
 80008c6:	e6a2      	b.n	800060e <printf+0x16>
 80008c8:	080005ad 	.word	0x080005ad
 80008cc:	080011fd 	.word	0x080011fd
 80008d0:	66666667 	.word	0x66666667
        bool        leading_zero=true;                        // long형의 data를 출력하기 위한 변수.
        long        divisor, result, remainder;


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80008d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
void PrintDec(char *fmt, int l)
{
        int        i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
        long        flagcnt=0;                                        // "%08lx"에서 "8"을 찾아서 long형으로.
 80008d8:	2600      	movs	r6, #0
                        switch (*s++){
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
 80008da:	f858 bb04 	ldr.w	fp, [r8], #4
void PrintDec(char *fmt, int l)
{
        int        i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
        long        flagcnt=0;                                        // "%08lx"에서 "8"을 찾아서 long형으로.
 80008de:	960a      	str	r6, [sp, #40]	; 0x28
        bool        leading_zero=true;                        // long형의 data를 출력하기 위한 변수.
        long        divisor, result, remainder;


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	f000 80f3 	beq.w	8000acc <printf+0x4d4>
                if (c=='d') break;
 80008e6:	2b64      	cmp	r3, #100	; 0x64
 80008e8:	f000 80f0 	beq.w	8000acc <printf+0x4d4>
 80008ec:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80008ee:	46b2      	mov	sl, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
 80008f0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80008f4:	fa5f fe82 	uxtb.w	lr, r2
 80008f8:	f1be 0f08 	cmp.w	lr, #8
 80008fc:	f200 808f 	bhi.w	8000a1e <printf+0x426>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000900:	a80c      	add	r0, sp, #48	; 0x30
 8000902:	1903      	adds	r3, r0, r4
 8000904:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000908:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800090c:	fa5f fc81 	uxtb.w	ip, r1
 8000910:	f1bc 0f09 	cmp.w	ip, #9
 8000914:	f200 8183 	bhi.w	8000c1e <printf+0x626>
 8000918:	2300      	movs	r3, #0
 800091a:	a804      	add	r0, sp, #16
 800091c:	f10d 0e1c 	add.w	lr, sp, #28
                                tol[j] = s[i++];
 8000920:	3401      	adds	r4, #1
 8000922:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000924:	f81e 2004 	ldrb.w	r2, [lr, r4]
 8000928:	3301      	adds	r3, #1
 800092a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800092e:	fa5f fc81 	uxtb.w	ip, r1
 8000932:	f1bc 0f09 	cmp.w	ip, #9
 8000936:	d9f3      	bls.n	8000920 <printf+0x328>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000938:	aa0c      	add	r2, sp, #48	; 0x30
 800093a:	eb02 0e03 	add.w	lr, r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 800093e:	a90a      	add	r1, sp, #40	; 0x28
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000940:	f80e ac20 	strb.w	sl, [lr, #-32]
                        i--;
 8000944:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 8000946:	47b8      	blx	r7
        bool        leading_zero=true;                        // long형의 data를 출력하기 위한 변수.
        long        divisor, result, remainder;


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000948:	3401      	adds	r4, #1
 800094a:	a80c      	add	r0, sp, #48	; 0x30
 800094c:	1903      	adds	r3, r0, r4
 800094e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000952:	b10b      	cbz	r3, 8000958 <printf+0x360>
                if (c=='d') break;
 8000954:	2b64      	cmp	r3, #100	; 0x64
 8000956:	d1cb      	bne.n	80008f0 <printf+0x2f8>
                else continue;
        }


        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000958:	990a      	ldr	r1, [sp, #40]	; 0x28
 800095a:	2900      	cmp	r1, #0
 800095c:	f000 80b6 	beq.w	8000acc <printf+0x4d4>
                if (flagcnt>9) flagcnt=9;
 8000960:	2909      	cmp	r1, #9
 8000962:	f340 82dd 	ble.w	8000f20 <printf+0x928>
 8000966:	2009      	movs	r0, #9
 8000968:	2407      	movs	r4, #7
 800096a:	900a      	str	r0, [sp, #40]	; 0x28
 800096c:	2106      	movs	r1, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 800096e:	4620      	mov	r0, r4
 8000970:	f000 0e01 	and.w	lr, r0, #1
                retval *= num;
 8000974:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000976:	1e42      	subs	r2, r0, #1
 8000978:	b190      	cbz	r0, 80009a0 <printf+0x3a8>
 800097a:	f1be 0f00 	cmp.w	lr, #0
 800097e:	d005      	beq.n	800098c <printf+0x394>
 8000980:	3a01      	subs	r2, #1
 8000982:	f1b2 3fff 	cmp.w	r2, #4294967295
                retval *= num;
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 800098a:	d009      	beq.n	80009a0 <printf+0x3a8>
                retval *= num;
 800098c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000990:	00d8      	lsls	r0, r3, #3
 8000992:	eb00 0343 	add.w	r3, r0, r3, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000996:	3a02      	subs	r2, #2
                retval *= num;
 8000998:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800099a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800099e:	d1f5      	bne.n	800098c <printf+0x394>


        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80009a0:	fb9b faf3 	sdiv	sl, fp, r3
 80009a4:	fb03 bb1a 	mls	fp, r3, sl, fp
{
        long retval=num;
        cnt--;


        while (cnt--){
 80009a8:	2c00      	cmp	r4, #0
 80009aa:	f000 8385 	beq.w	80010b8 <printf+0xac0>
 80009ae:	f001 0201 	and.w	r2, r1, #1
                retval *= num;
 80009b2:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 80009b4:	1e4b      	subs	r3, r1, #1
 80009b6:	b181      	cbz	r1, 80009da <printf+0x3e2>
 80009b8:	b12a      	cbz	r2, 80009c6 <printf+0x3ce>
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 3fff 	cmp.w	r3, #4294967295
                retval *= num;
 80009c0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80009c4:	d009      	beq.n	80009da <printf+0x3e2>
                retval *= num;
 80009c6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80009ca:	00ca      	lsls	r2, r1, #3
 80009cc:	eb02 0441 	add.w	r4, r2, r1, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80009d0:	3b02      	subs	r3, #2
                retval *= num;
 80009d2:	0064      	lsls	r4, r4, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d8:	d1f5      	bne.n	80009c6 <printf+0x3ce>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80009da:	2301      	movs	r3, #1
 80009dc:	f8df a27c 	ldr.w	sl, [pc, #636]	; 8000c5c <printf+0x664>
 80009e0:	9503      	str	r5, [sp, #12]
 80009e2:	4635      	mov	r5, r6
 80009e4:	461e      	mov	r6, r3
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
 80009e6:	fb9b f1f4 	sdiv	r1, fp, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 80009ea:	b2c8      	uxtb	r0, r1
 80009ec:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80009ee:	fb04 bb11 	mls	fp, r4, r1, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 80009f2:	2900      	cmp	r1, #0
 80009f4:	f040 8110 	bne.w	8000c18 <printf+0x620>
 80009f8:	2c01      	cmp	r4, #1
 80009fa:	f000 810d 	beq.w	8000c18 <printf+0x620>


                        if (leading_zero==true){
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	f000 810a 	beq.w	8000c18 <printf+0x620>
                                if (flag0)        print_byte('0');
 8000a04:	2030      	movs	r0, #48	; 0x30
 8000a06:	b905      	cbnz	r5, 8000a0a <printf+0x412>
                                else                print_byte(' ');
 8000a08:	2020      	movs	r0, #32
 8000a0a:	47d0      	blx	sl
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000a0c:	fb89 0e04 	smull	r0, lr, r9, r4
 8000a10:	17e0      	asrs	r0, r4, #31
 8000a12:	ebc0 04ae 	rsb	r4, r0, lr, asr #2
 8000a16:	2c00      	cmp	r4, #0
 8000a18:	dce5      	bgt.n	80009e6 <printf+0x3ee>
 8000a1a:	9d03      	ldr	r5, [sp, #12]
 8000a1c:	e5f7      	b.n	800060e <printf+0x16>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8000a1e:	2b30      	cmp	r3, #48	; 0x30
 8000a20:	bf08      	it	eq
 8000a22:	2601      	moveq	r6, #1
 8000a24:	e790      	b.n	8000948 <printf+0x350>
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a26:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a2a:	0913      	lsrs	r3, r2, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a2c:	f002 040f 	and.w	r4, r2, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a30:	f040 82dc 	bne.w	8000fec <printf+0x9f4>
 8000a34:	4e89      	ldr	r6, [pc, #548]	; (8000c5c <printf+0x664>)
 8000a36:	2301      	movs	r3, #1
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a38:	2c00      	cmp	r4, #0
 8000a3a:	f040 8291 	bne.w	8000f60 <printf+0x968>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 8345 	beq.w	80010ce <printf+0xad6>
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a44:	f89d c02d 	ldrb.w	ip, [sp, #45]	; 0x2d
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000a48:	2201      	movs	r2, #1
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a4a:	ea5f 131c 	movs.w	r3, ip, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a4e:	f00c 040f 	and.w	r4, ip, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a52:	f000 8294 	beq.w	8000f7e <printf+0x986>
                        if (uHex<10) uHex+='0';
 8000a56:	2b09      	cmp	r3, #9
 8000a58:	f240 835c 	bls.w	8001114 <printf+0xb1c>
                        else         uHex+='A'-10;
 8000a5c:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte(uHex);
 8000a60:	47b0      	blx	r6
 8000a62:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	f040 8291 	bne.w	8000f8c <printf+0x994>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 8332 	beq.w	80010d4 <printf+0xadc>
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a70:	f89d e02e 	ldrb.w	lr, [sp, #46]	; 0x2e
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000a74:	2201      	movs	r2, #1
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a76:	ea5f 131e 	movs.w	r3, lr, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a7a:	f00e 040f 	and.w	r4, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a7e:	f000 8294 	beq.w	8000faa <printf+0x9b2>
                        if (uHex<10) uHex+='0';
 8000a82:	2b09      	cmp	r3, #9
 8000a84:	f240 8329 	bls.w	80010da <printf+0xae2>
                        else         uHex+='A'-10;
 8000a88:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte(uHex);
 8000a8c:	47b0      	blx	r6
 8000a8e:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a90:	2c00      	cmp	r4, #0
 8000a92:	f040 8291 	bne.w	8000fb8 <printf+0x9c0>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 8322 	beq.w	80010e0 <printf+0xae8>
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a9c:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000aa0:	2201      	movs	r2, #1
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000aa2:	0903      	lsrs	r3, r0, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000aa4:	f000 040f 	and.w	r4, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000aa8:	f000 8294 	beq.w	8000fd4 <printf+0x9dc>
                        if (uHex<10) uHex+='0';
 8000aac:	2b09      	cmp	r3, #9
 8000aae:	f240 8294 	bls.w	8000fda <printf+0x9e2>
                        else         uHex+='A'-10;
 8000ab2:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte(uHex);
 8000ab6:	47b0      	blx	r6
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000ab8:	2c00      	cmp	r4, #0
 8000aba:	f000 8292 	beq.w	8000fe2 <printf+0x9ea>
                        if (lHex<10) lHex+='0';
 8000abe:	2c09      	cmp	r4, #9
 8000ac0:	f240 828f 	bls.w	8000fe2 <printf+0x9ea>
                        else         lHex+='A'-10;
 8000ac4:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte(lHex);
 8000ac8:	47b0      	blx	r6
 8000aca:	e5a0      	b.n	800060e <printf+0x16>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000acc:	4964      	ldr	r1, [pc, #400]	; (8000c60 <printf+0x668>)
 8000ace:	ea4f 76eb 	mov.w	r6, fp, asr #31
 8000ad2:	fb81 3c0b 	smull	r3, ip, r1, fp
                        remainder %= divisor;
 8000ad6:	4c63      	ldr	r4, [pc, #396]	; (8000c64 <printf+0x66c>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000ad8:	ebc6 732c 	rsb	r3, r6, ip, asr #28
                        remainder %= divisor;
 8000adc:	fb04 bb13 	mls	fp, r4, r3, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f000 80d7 	beq.w	8000c94 <printf+0x69c>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000ae6:	fa5f fe83 	uxtb.w	lr, r3
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000aea:	4e5f      	ldr	r6, [pc, #380]	; (8000c68 <printf+0x670>)
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000aec:	f10e 0030 	add.w	r0, lr, #48	; 0x30
 8000af0:	4c5a      	ldr	r4, [pc, #360]	; (8000c5c <printf+0x664>)
 8000af2:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000af4:	fb86 600b 	smull	r6, r0, r6, fp
 8000af8:	ea4f 73eb 	mov.w	r3, fp, asr #31
                        remainder %= divisor;
 8000afc:	4a5b      	ldr	r2, [pc, #364]	; (8000c6c <printf+0x674>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000afe:	ebc3 6360 	rsb	r3, r3, r0, asr #25
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000b02:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000b04:	fb02 b613 	mls	r6, r2, r3, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f000 80d2 	beq.w	8000cb2 <printf+0x6ba>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000b0e:	fa5f fc83 	uxtb.w	ip, r3
 8000b12:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 8000b16:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000b18:	4855      	ldr	r0, [pc, #340]	; (8000c70 <printf+0x678>)
 8000b1a:	17f3      	asrs	r3, r6, #31
 8000b1c:	fb80 0e06 	smull	r0, lr, r0, r6
                        remainder %= divisor;
 8000b20:	4a54      	ldr	r2, [pc, #336]	; (8000c74 <printf+0x67c>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000b22:	ebc3 53ae 	rsb	r3, r3, lr, asr #22
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000b26:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000b28:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	f000 80d0 	beq.w	8000cd2 <printf+0x6da>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000b32:	b2d9      	uxtb	r1, r3
 8000b34:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000b38:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000b3a:	484f      	ldr	r0, [pc, #316]	; (8000c78 <printf+0x680>)
 8000b3c:	17f3      	asrs	r3, r6, #31
 8000b3e:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8000b42:	4a4e      	ldr	r2, [pc, #312]	; (8000c7c <printf+0x684>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000b44:	ebc3 43ac 	rsb	r3, r3, ip, asr #18
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000b48:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000b4a:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 80cf 	beq.w	8000cf2 <printf+0x6fa>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000b54:	fa5f fe83 	uxtb.w	lr, r3
 8000b58:	f10e 0030 	add.w	r0, lr, #48	; 0x30
 8000b5c:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000b5e:	4848      	ldr	r0, [pc, #288]	; (8000c80 <printf+0x688>)
 8000b60:	17f3      	asrs	r3, r6, #31
 8000b62:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8000b66:	4a47      	ldr	r2, [pc, #284]	; (8000c84 <printf+0x68c>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000b68:	ebc3 336c 	rsb	r3, r3, ip, asr #13
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000b6c:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000b6e:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 80cd 	beq.w	8000d12 <printf+0x71a>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000b78:	b2d9      	uxtb	r1, r3
 8000b7a:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000b7e:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000b80:	4841      	ldr	r0, [pc, #260]	; (8000c88 <printf+0x690>)
 8000b82:	17f3      	asrs	r3, r6, #31
 8000b84:	fb80 0206 	smull	r0, r2, r0, r6
                        remainder %= divisor;
 8000b88:	f242 7e10 	movw	lr, #10000	; 0x2710
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000b8c:	ebc3 3322 	rsb	r3, r3, r2, asr #12
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000b90:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000b92:	fb0e 6613 	mls	r6, lr, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 80cc 	beq.w	8000d34 <printf+0x73c>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000b9c:	fa5f fc83 	uxtb.w	ip, r3
 8000ba0:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 8000ba4:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000ba6:	4839      	ldr	r0, [pc, #228]	; (8000c8c <printf+0x694>)
 8000ba8:	17f3      	asrs	r3, r6, #31
 8000baa:	fb80 0206 	smull	r0, r2, r0, r6
                        remainder %= divisor;
 8000bae:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000bb2:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000bb6:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000bb8:	fb0e 6613 	mls	r6, lr, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 80ca 	beq.w	8000d56 <printf+0x75e>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000bc2:	b2d9      	uxtb	r1, r3
 8000bc4:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000bc8:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000bca:	4831      	ldr	r0, [pc, #196]	; (8000c90 <printf+0x698>)
 8000bcc:	17f3      	asrs	r3, r6, #31
 8000bce:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8000bd2:	2264      	movs	r2, #100	; 0x64
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000bd4:	ebc3 136c 	rsb	r3, r3, ip, asr #5
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000bd8:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000bda:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 80c9 	beq.w	8000d76 <printf+0x77e>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000be4:	fa5f fe83 	uxtb.w	lr, r3
 8000be8:	f10e 0030 	add.w	r0, lr, #48	; 0x30
 8000bec:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000bee:	fb89 3c06 	smull	r3, ip, r9, r6
 8000bf2:	17f3      	asrs	r3, r6, #31
 8000bf4:	ebc3 03ac 	rsb	r3, r3, ip, asr #2
                        remainder %= divisor;
 8000bf8:	eb03 0283 	add.w	r2, r3, r3, lsl #2


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000bfc:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000bfe:	eba6 0642 	sub.w	r6, r6, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80c7 	beq.w	8000d96 <printf+0x79e>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000c08:	b2d9      	uxtb	r1, r3
 8000c0a:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000c0e:	47a0      	blx	r4
 8000c10:	b2f0      	uxtb	r0, r6
 8000c12:	3030      	adds	r0, #48	; 0x30
 8000c14:	47a0      	blx	r4
 8000c16:	e4fa      	b.n	800060e <printf+0x16>

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 8000c18:	47d0      	blx	sl
 8000c1a:	2600      	movs	r6, #0
 8000c1c:	e6f6      	b.n	8000a0c <printf+0x414>

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000c1e:	2300      	movs	r3, #0
 8000c20:	a804      	add	r0, sp, #16
 8000c22:	e689      	b.n	8000938 <printf+0x340>

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000c24:	2300      	movs	r3, #0
 8000c26:	a804      	add	r0, sp, #16
 8000c28:	e5fd      	b.n	8000826 <printf+0x22e>
        while (*s){
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
 8000c2a:	2301      	movs	r3, #1
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
 8000c2c:	a90c      	add	r1, sp, #48	; 0x30
 8000c2e:	eb01 0c03 	add.w	ip, r1, r3
                                        format[i] = '\0';
 8000c32:	2200      	movs	r2, #0
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
 8000c34:	f80c 0c14 	strb.w	r0, [ip, #-20]
                                        format[i] = '\0';
 8000c38:	f80c 2c13 	strb.w	r2, [ip, #-19]
                                        break;
 8000c3c:	e5a1      	b.n	8000782 <printf+0x18a>
                                }
                                else {
                                        format[i++] = *s++;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	e7f4      	b.n	8000c2c <printf+0x634>
 8000c42:	2303      	movs	r3, #3
 8000c44:	e7f2      	b.n	8000c2c <printf+0x634>
 8000c46:	2304      	movs	r3, #4
 8000c48:	e7f0      	b.n	8000c2c <printf+0x634>
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	e7ee      	b.n	8000c2c <printf+0x634>
 8000c4e:	2306      	movs	r3, #6
 8000c50:	e7ec      	b.n	8000c2c <printf+0x634>
 8000c52:	2307      	movs	r3, #7
 8000c54:	e7ea      	b.n	8000c2c <printf+0x634>
 8000c56:	2308      	movs	r3, #8
 8000c58:	e7e8      	b.n	8000c2c <printf+0x634>
 8000c5a:	bf00      	nop
 8000c5c:	080011fd 	.word	0x080011fd
 8000c60:	44b82fa1 	.word	0x44b82fa1
 8000c64:	3b9aca00 	.word	0x3b9aca00
 8000c68:	55e63b89 	.word	0x55e63b89
 8000c6c:	05f5e100 	.word	0x05f5e100
 8000c70:	6b5fca6b 	.word	0x6b5fca6b
 8000c74:	00989680 	.word	0x00989680
 8000c78:	431bde83 	.word	0x431bde83
 8000c7c:	000f4240 	.word	0x000f4240
 8000c80:	14f8b589 	.word	0x14f8b589
 8000c84:	000186a0 	.word	0x000186a0
 8000c88:	68db8bad 	.word	0x68db8bad
 8000c8c:	10624dd3 	.word	0x10624dd3
 8000c90:	51eb851f 	.word	0x51eb851f
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000c94:	4ea6      	ldr	r6, [pc, #664]	; (8000f30 <printf+0x938>)
 8000c96:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8000c9a:	fb86 600b 	smull	r6, r0, r6, fp
                        remainder %= divisor;
 8000c9e:	4aa5      	ldr	r2, [pc, #660]	; (8000f34 <printf+0x93c>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000ca0:	ebc3 6360 	rsb	r3, r3, r0, asr #25
 8000ca4:	4ca4      	ldr	r4, [pc, #656]	; (8000f38 <printf+0x940>)
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 8000ca6:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000ca8:	fb02 b613 	mls	r6, r2, r3, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f47f af2e 	bne.w	8000b0e <printf+0x516>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	f43f af2b 	beq.w	8000b0e <printf+0x516>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000cb8:	48a0      	ldr	r0, [pc, #640]	; (8000f3c <printf+0x944>)
 8000cba:	17f3      	asrs	r3, r6, #31
 8000cbc:	fb80 0e06 	smull	r0, lr, r0, r6
                        remainder %= divisor;
 8000cc0:	4a9f      	ldr	r2, [pc, #636]	; (8000f40 <printf+0x948>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000cc2:	ebc3 53ae 	rsb	r3, r3, lr, asr #22
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000cc6:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000cc8:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f47f af30 	bne.w	8000b32 <printf+0x53a>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	f43f af2d 	beq.w	8000b32 <printf+0x53a>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000cd8:	489a      	ldr	r0, [pc, #616]	; (8000f44 <printf+0x94c>)
 8000cda:	17f3      	asrs	r3, r6, #31
 8000cdc:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8000ce0:	4a99      	ldr	r2, [pc, #612]	; (8000f48 <printf+0x950>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000ce2:	ebc3 43ac 	rsb	r3, r3, ip, asr #18
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000ce6:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000ce8:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f47f af31 	bne.w	8000b54 <printf+0x55c>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	f43f af2e 	beq.w	8000b54 <printf+0x55c>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000cf8:	4894      	ldr	r0, [pc, #592]	; (8000f4c <printf+0x954>)
 8000cfa:	17f3      	asrs	r3, r6, #31
 8000cfc:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8000d00:	4a93      	ldr	r2, [pc, #588]	; (8000f50 <printf+0x958>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000d02:	ebc3 336c 	rsb	r3, r3, ip, asr #13
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000d06:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000d08:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f47f af33 	bne.w	8000b78 <printf+0x580>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000d12:	2900      	cmp	r1, #0
 8000d14:	f43f af30 	beq.w	8000b78 <printf+0x580>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000d18:	488e      	ldr	r0, [pc, #568]	; (8000f54 <printf+0x95c>)
 8000d1a:	17f3      	asrs	r3, r6, #31
 8000d1c:	fb80 0206 	smull	r0, r2, r0, r6
                        remainder %= divisor;
 8000d20:	f242 7e10 	movw	lr, #10000	; 0x2710
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000d24:	ebc3 3322 	rsb	r3, r3, r2, asr #12
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000d28:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000d2a:	fb0e 6613 	mls	r6, lr, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f47f af34 	bne.w	8000b9c <printf+0x5a4>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000d34:	2900      	cmp	r1, #0
 8000d36:	f43f af31 	beq.w	8000b9c <printf+0x5a4>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000d3a:	4887      	ldr	r0, [pc, #540]	; (8000f58 <printf+0x960>)
 8000d3c:	17f3      	asrs	r3, r6, #31
 8000d3e:	fb80 0206 	smull	r0, r2, r0, r6
                        remainder %= divisor;
 8000d42:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000d46:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000d4a:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000d4c:	fb0e 6613 	mls	r6, lr, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f47f af36 	bne.w	8000bc2 <printf+0x5ca>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000d56:	2900      	cmp	r1, #0
 8000d58:	f43f af33 	beq.w	8000bc2 <printf+0x5ca>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000d5c:	487f      	ldr	r0, [pc, #508]	; (8000f5c <printf+0x964>)
 8000d5e:	17f3      	asrs	r3, r6, #31
 8000d60:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8000d64:	2264      	movs	r2, #100	; 0x64
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000d66:	ebc3 136c 	rsb	r3, r3, ip, asr #5
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000d6a:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000d6c:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f47f af37 	bne.w	8000be4 <printf+0x5ec>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000d76:	2900      	cmp	r1, #0
 8000d78:	f43f af34 	beq.w	8000be4 <printf+0x5ec>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000d7c:	fb89 3c06 	smull	r3, ip, r9, r6
 8000d80:	17f3      	asrs	r3, r6, #31
 8000d82:	ebc3 03ac 	rsb	r3, r3, ip, asr #2
                        remainder %= divisor;
 8000d86:	eb03 0283 	add.w	r2, r3, r3, lsl #2


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000d8a:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000d8c:	eba6 0642 	sub.w	r6, r6, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f47f af39 	bne.w	8000c08 <printf+0x610>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000d96:	2900      	cmp	r1, #0
 8000d98:	f47f af3a 	bne.w	8000c10 <printf+0x618>
 8000d9c:	e734      	b.n	8000c08 <printf+0x610>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000d9e:	2101      	movs	r1, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000da0:	f1c2 0c08 	rsb	ip, r2, #8
 8000da4:	eb0c 72dc 	add.w	r2, ip, ip, lsr #31
 8000da8:	1052      	asrs	r2, r2, #1
 8000daa:	2a03      	cmp	r2, #3
 8000dac:	f73f ac2f 	bgt.w	800060e <printf+0x16>
// 역할 : printf() 중 일부를 간단하게 구현.
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void printf(char *fmt, ...)
 8000db0:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
 8000db4:	eb0b 0302 	add.w	r3, fp, r2
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000db8:	f81b e002 	ldrb.w	lr, [fp, r2]
 8000dbc:	43d8      	mvns	r0, r3
 8000dbe:	f000 0601 	and.w	r6, r0, #1
 8000dc2:	9603      	str	r6, [sp, #12]
 8000dc4:	1c5e      	adds	r6, r3, #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000dc6:	ea5f 101e 	movs.w	r0, lr, lsr #4
// 역할 : printf() 중 일부를 간단하게 구현.
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void printf(char *fmt, ...)
 8000dca:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8000dce:	f8df a168 	ldr.w	sl, [pc, #360]	; 8000f38 <printf+0x940>
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000dd2:	f00e 020f 	and.w	r2, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000dd6:	f040 8113 	bne.w	8001000 <printf+0xa08>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000dda:	2900      	cmp	r1, #0
 8000ddc:	f000 8198 	beq.w	8001110 <printf+0xb18>
                                if (flag0) print_byte('0');
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	f040 8154 	bne.w	800108e <printf+0xa96>
                                else       print_byte(' ');
 8000de6:	2020      	movs	r0, #32
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000de8:	9202      	str	r2, [sp, #8]
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	47d0      	blx	sl
 8000dee:	9a02      	ldr	r2, [sp, #8]
 8000df0:	2101      	movs	r1, #1
 8000df2:	9b01      	ldr	r3, [sp, #4]
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f000 8110 	beq.w	800101a <printf+0xa22>
                        if (lHex<10) lHex+='0';
 8000dfa:	2a09      	cmp	r2, #9
 8000dfc:	f240 8185 	bls.w	800110a <printf+0xb12>
                        else         lHex+='A'-10;
 8000e00:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	47d0      	blx	sl
 8000e08:	9b01      	ldr	r3, [sp, #4]
 8000e0a:	2200      	movs	r2, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000e0c:	455e      	cmp	r6, fp
 8000e0e:	f43f abfe 	beq.w	800060e <printf+0x16>
 8000e12:	9803      	ldr	r0, [sp, #12]
 8000e14:	b1f0      	cbz	r0, 8000e54 <printf+0x85c>
                        c = s[i];
 8000e16:	f893 c001 	ldrb.w	ip, [r3, #1]
 8000e1a:	3601      	adds	r6, #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000e1c:	ea5f 111c 	movs.w	r1, ip, lsr #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000e20:	f00c 030f 	and.w	r3, ip, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000e24:	f000 8124 	beq.w	8001070 <printf+0xa78>
                        if (uHex<10) uHex+='0';
 8000e28:	2909      	cmp	r1, #9
 8000e2a:	f240 816b 	bls.w	8001104 <printf+0xb0c>
                        else         uHex+='A'-10;
 8000e2e:	f101 0037 	add.w	r0, r1, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	47d0      	blx	sl
 8000e36:	9b01      	ldr	r3, [sp, #4]
 8000e38:	2200      	movs	r2, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 8111 	beq.w	8001062 <printf+0xa6a>
                        if (lHex<10) lHex+='0';
 8000e40:	2b09      	cmp	r3, #9
 8000e42:	f240 8159 	bls.w	80010f8 <printf+0xb00>
                        else         lHex+='A'-10;
 8000e46:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000e4a:	47d0      	blx	sl
 8000e4c:	2200      	movs	r2, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000e4e:	455e      	cmp	r6, fp
 8000e50:	f43f abdd 	beq.w	800060e <printf+0x16>
 8000e54:	9503      	str	r5, [sp, #12]
                        c = s[i];
 8000e56:	f816 3b01 	ldrb.w	r3, [r6], #1
 8000e5a:	4625      	mov	r5, r4
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000e5c:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	d02e      	beq.n	8000ec2 <printf+0x8ca>
                        if (uHex<10) uHex+='0';
 8000e64:	2b09      	cmp	r3, #9
 8000e66:	f240 8144 	bls.w	80010f2 <printf+0xafa>
                        else         uHex+='A'-10;
 8000e6a:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 8000e6e:	47d0      	blx	sl
 8000e70:	2300      	movs	r3, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000e72:	2c00      	cmp	r4, #0
 8000e74:	d030      	beq.n	8000ed8 <printf+0x8e0>
                        if (lHex<10) lHex+='0';
 8000e76:	2c09      	cmp	r4, #9
 8000e78:	f240 8138 	bls.w	80010ec <printf+0xaf4>
                        else         lHex+='A'-10;
 8000e7c:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000e80:	47d0      	blx	sl
 8000e82:	2200      	movs	r2, #0
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000e84:	f816 1b01 	ldrb.w	r1, [r6], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000e88:	090b      	lsrs	r3, r1, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000e8a:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000e8e:	d032      	beq.n	8000ef6 <printf+0x8fe>
                        if (uHex<10) uHex+='0';
 8000e90:	2b09      	cmp	r3, #9
 8000e92:	f240 8119 	bls.w	80010c8 <printf+0xad0>
                        else         uHex+='A'-10;
 8000e96:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 8000e9a:	47d0      	blx	sl
 8000e9c:	2300      	movs	r3, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000e9e:	2c00      	cmp	r4, #0
 8000ea0:	d034      	beq.n	8000f0c <printf+0x914>
                        if (lHex<10) lHex+='0';
 8000ea2:	2c09      	cmp	r4, #9
 8000ea4:	f240 810d 	bls.w	80010c2 <printf+0xaca>
                        else         lHex+='A'-10;
 8000ea8:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000eac:	47d0      	blx	sl
 8000eae:	2200      	movs	r2, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000eb0:	455e      	cmp	r6, fp
 8000eb2:	f43f adb2 	beq.w	8000a1a <printf+0x422>
                        c = s[i];
 8000eb6:	f816 3b01 	ldrb.w	r3, [r6], #1
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000eba:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	d1d0      	bne.n	8000e64 <printf+0x86c>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000ec2:	2a00      	cmp	r2, #0
 8000ec4:	f000 8115 	beq.w	80010f2 <printf+0xafa>
                                if (flag0) print_byte('0');
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	f000 80c6 	beq.w	800105a <printf+0xa62>
 8000ece:	2030      	movs	r0, #48	; 0x30
 8000ed0:	47d0      	blx	sl
 8000ed2:	2301      	movs	r3, #1
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000ed4:	2c00      	cmp	r4, #0
 8000ed6:	d1ce      	bne.n	8000e76 <printf+0x87e>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 8107 	beq.w	80010ec <printf+0xaf4>
                                if (flag0) print_byte('0');
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	f000 80b7 	beq.w	8001052 <printf+0xa5a>
 8000ee4:	2030      	movs	r0, #48	; 0x30
 8000ee6:	47d0      	blx	sl
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000ee8:	f816 1b01 	ldrb.w	r1, [r6], #1
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000eec:	2201      	movs	r2, #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000eee:	090b      	lsrs	r3, r1, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000ef0:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000ef4:	d1cc      	bne.n	8000e90 <printf+0x898>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	f000 80e6 	beq.w	80010c8 <printf+0xad0>
                                if (flag0) print_byte('0');
 8000efc:	2d00      	cmp	r5, #0
 8000efe:	f040 80a0 	bne.w	8001042 <printf+0xa4a>
                                else       print_byte(' ');
 8000f02:	2020      	movs	r0, #32
 8000f04:	47d0      	blx	sl
 8000f06:	2301      	movs	r3, #1
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000f08:	2c00      	cmp	r4, #0
 8000f0a:	d1ca      	bne.n	8000ea2 <printf+0x8aa>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 80d8 	beq.w	80010c2 <printf+0xaca>
                                if (flag0) print_byte('0');
 8000f12:	2d00      	cmp	r5, #0
 8000f14:	f040 8099 	bne.w	800104a <printf+0xa52>
                                else       print_byte(' ');
 8000f18:	2020      	movs	r0, #32
 8000f1a:	47d0      	blx	sl
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	e7c7      	b.n	8000eb0 <printf+0x8b8>
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000f20:	1e48      	subs	r0, r1, #1
 8000f22:	f000 80c5 	beq.w	80010b0 <printf+0xab8>
 8000f26:	1e8c      	subs	r4, r1, #2
 8000f28:	3801      	subs	r0, #1
 8000f2a:	3903      	subs	r1, #3
 8000f2c:	e520      	b.n	8000970 <printf+0x378>
 8000f2e:	bf00      	nop
 8000f30:	55e63b89 	.word	0x55e63b89
 8000f34:	05f5e100 	.word	0x05f5e100
 8000f38:	080011fd 	.word	0x080011fd
 8000f3c:	6b5fca6b 	.word	0x6b5fca6b
 8000f40:	00989680 	.word	0x00989680
 8000f44:	431bde83 	.word	0x431bde83
 8000f48:	000f4240 	.word	0x000f4240
 8000f4c:	14f8b589 	.word	0x14f8b589
 8000f50:	000186a0 	.word	0x000186a0
 8000f54:	68db8bad 	.word	0x68db8bad
 8000f58:	10624dd3 	.word	0x10624dd3
 8000f5c:	51eb851f 	.word	0x51eb851f
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000f60:	2c09      	cmp	r4, #9
 8000f62:	f240 80b4 	bls.w	80010ce <printf+0xad6>
                        else         lHex+='A'-10;
 8000f66:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte(lHex);
 8000f6a:	47b0      	blx	r6
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000f6c:	f89d c02d 	ldrb.w	ip, [sp, #45]	; 0x2d
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000f70:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000f72:	ea5f 131c 	movs.w	r3, ip, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000f76:	f00c 040f 	and.w	r4, ip, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000f7a:	f47f ad6c 	bne.w	8000a56 <printf+0x45e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8000f7e:	2a00      	cmp	r2, #0
 8000f80:	f000 80c8 	beq.w	8001114 <printf+0xb1c>
 8000f84:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000f86:	2c00      	cmp	r4, #0
 8000f88:	f43f ad6f 	beq.w	8000a6a <printf+0x472>
                        if (lHex<10) lHex+='0';
 8000f8c:	2c09      	cmp	r4, #9
 8000f8e:	f240 80a1 	bls.w	80010d4 <printf+0xadc>
                        else         lHex+='A'-10;
 8000f92:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte(lHex);
 8000f96:	47b0      	blx	r6
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000f98:	f89d e02e 	ldrb.w	lr, [sp, #46]	; 0x2e
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000f9c:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000f9e:	ea5f 131e 	movs.w	r3, lr, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000fa2:	f00e 040f 	and.w	r4, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000fa6:	f47f ad6c 	bne.w	8000a82 <printf+0x48a>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8000faa:	2a00      	cmp	r2, #0
 8000fac:	f000 8095 	beq.w	80010da <printf+0xae2>
 8000fb0:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	f43f ad6f 	beq.w	8000a96 <printf+0x49e>
                        if (lHex<10) lHex+='0';
 8000fb8:	2c09      	cmp	r4, #9
 8000fba:	f240 8091 	bls.w	80010e0 <printf+0xae8>
                        else         lHex+='A'-10;
 8000fbe:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte(lHex);
 8000fc2:	47b0      	blx	r6
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000fc4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000fc8:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000fca:	0903      	lsrs	r3, r0, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000fcc:	f000 040f 	and.w	r4, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000fd0:	f47f ad6c 	bne.w	8000aac <printf+0x4b4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	f47f ad6f 	bne.w	8000ab8 <printf+0x4c0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000fda:	f103 0030 	add.w	r0, r3, #48	; 0x30
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8000fde:	47b0      	blx	r6
 8000fe0:	e56a      	b.n	8000ab8 <printf+0x4c0>
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000fe2:	f104 0030 	add.w	r0, r4, #48	; 0x30
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000fe6:	47b0      	blx	r6
 8000fe8:	f7ff bb11 	b.w	800060e <printf+0x16>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000fec:	2b09      	cmp	r3, #9
 8000fee:	d97a      	bls.n	80010e6 <printf+0xaee>
                        else         uHex+='A'-10;
 8000ff0:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte(uHex);
 8000ff4:	4e49      	ldr	r6, [pc, #292]	; (800111c <printf+0xb24>)
 8000ff6:	47b0      	blx	r6
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e51d      	b.n	8000a38 <printf+0x440>
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000ffc:	2309      	movs	r3, #9
 8000ffe:	e615      	b.n	8000c2c <printf+0x634>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001000:	2809      	cmp	r0, #9
 8001002:	f240 8085 	bls.w	8001110 <printf+0xb18>
                        else         uHex+='A'-10;
 8001006:	3037      	adds	r0, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 8001008:	9202      	str	r2, [sp, #8]
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	47d0      	blx	sl
 800100e:	9a02      	ldr	r2, [sp, #8]
 8001010:	2100      	movs	r1, #0
 8001012:	9b01      	ldr	r3, [sp, #4]
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001014:	2a00      	cmp	r2, #0
 8001016:	f47f aef0 	bne.w	8000dfa <printf+0x802>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 800101a:	2900      	cmp	r1, #0
 800101c:	d075      	beq.n	800110a <printf+0xb12>
                                if (flag0) print_byte('0');
 800101e:	2c00      	cmp	r4, #0
 8001020:	d12f      	bne.n	8001082 <printf+0xa8a>
                                else       print_byte(' ');
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	2020      	movs	r0, #32
 8001026:	47d0      	blx	sl
 8001028:	2201      	movs	r2, #1
 800102a:	9b01      	ldr	r3, [sp, #4]
 800102c:	e6ee      	b.n	8000e0c <printf+0x814>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 800102e:	2c00      	cmp	r4, #0
 8001030:	d039      	beq.n	80010a6 <printf+0xaae>
 8001032:	2030      	movs	r0, #48	; 0x30
 8001034:	4a39      	ldr	r2, [pc, #228]	; (800111c <printf+0xb24>)
 8001036:	4790      	blx	r2
 8001038:	2101      	movs	r1, #1
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
                        
                        flagcnt--;
 800103a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800103c:	1e42      	subs	r2, r0, #1
 800103e:	920a      	str	r2, [sp, #40]	; 0x28
 8001040:	e6ae      	b.n	8000da0 <printf+0x7a8>
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8001042:	2030      	movs	r0, #48	; 0x30
 8001044:	47d0      	blx	sl
 8001046:	2301      	movs	r3, #1
 8001048:	e729      	b.n	8000e9e <printf+0x8a6>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 800104a:	2030      	movs	r0, #48	; 0x30
 800104c:	47d0      	blx	sl
 800104e:	2201      	movs	r2, #1
 8001050:	e72e      	b.n	8000eb0 <printf+0x8b8>
                                else       print_byte(' ');
 8001052:	2020      	movs	r0, #32
 8001054:	47d0      	blx	sl
 8001056:	2201      	movs	r2, #1
 8001058:	e714      	b.n	8000e84 <printf+0x88c>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 800105a:	2020      	movs	r0, #32
 800105c:	47d0      	blx	sl
 800105e:	2301      	movs	r3, #1
 8001060:	e707      	b.n	8000e72 <printf+0x87a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8001062:	2a00      	cmp	r2, #0
 8001064:	d048      	beq.n	80010f8 <printf+0xb00>
                                if (flag0) print_byte('0');
 8001066:	b9d4      	cbnz	r4, 800109e <printf+0xaa6>
                                else       print_byte(' ');
 8001068:	2020      	movs	r0, #32
 800106a:	47d0      	blx	sl
 800106c:	2201      	movs	r2, #1
 800106e:	e6ee      	b.n	8000e4e <printf+0x856>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8001070:	2a00      	cmp	r2, #0
 8001072:	d047      	beq.n	8001104 <printf+0xb0c>
                                if (flag0) print_byte('0');
 8001074:	b96c      	cbnz	r4, 8001092 <printf+0xa9a>
                                else       print_byte(' ');
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	2020      	movs	r0, #32
 800107a:	47d0      	blx	sl
 800107c:	2201      	movs	r2, #1
 800107e:	9b01      	ldr	r3, [sp, #4]
 8001080:	e6db      	b.n	8000e3a <printf+0x842>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	2030      	movs	r0, #48	; 0x30
 8001086:	47d0      	blx	sl
 8001088:	2201      	movs	r2, #1
 800108a:	9b01      	ldr	r3, [sp, #4]
 800108c:	e6be      	b.n	8000e0c <printf+0x814>
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 800108e:	2030      	movs	r0, #48	; 0x30
 8001090:	e6aa      	b.n	8000de8 <printf+0x7f0>
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	2030      	movs	r0, #48	; 0x30
 8001096:	47d0      	blx	sl
 8001098:	2201      	movs	r2, #1
 800109a:	9b01      	ldr	r3, [sp, #4]
 800109c:	e6cd      	b.n	8000e3a <printf+0x842>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 800109e:	2030      	movs	r0, #48	; 0x30
 80010a0:	47d0      	blx	sl
 80010a2:	2201      	movs	r2, #1
 80010a4:	e6d3      	b.n	8000e4e <printf+0x856>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 80010a6:	2020      	movs	r0, #32
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <printf+0xb24>)
 80010aa:	4798      	blx	r3
 80010ac:	2101      	movs	r1, #1
 80010ae:	e7c4      	b.n	800103a <printf+0xa42>
{
        long retval=num;
        cnt--;


        while (cnt--){
 80010b0:	1e8c      	subs	r4, r1, #2
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80010b2:	230a      	movs	r3, #10
        cnt--;


        while (cnt--){
 80010b4:	3903      	subs	r1, #3
 80010b6:	e473      	b.n	80009a0 <printf+0x3a8>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80010b8:	240a      	movs	r4, #10
 80010ba:	e48e      	b.n	80009da <printf+0x3e2>
}

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
 80010bc:	461c      	mov	r4, r3
 80010be:	f7ff bbc2 	b.w	8000846 <printf+0x24e>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80010c2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80010c6:	e6f1      	b.n	8000eac <printf+0x8b4>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80010c8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80010cc:	e6e5      	b.n	8000e9a <printf+0x8a2>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80010ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80010d2:	e74a      	b.n	8000f6a <printf+0x972>
 80010d4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80010d8:	e75d      	b.n	8000f96 <printf+0x99e>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80010da:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80010de:	e4d5      	b.n	8000a8c <printf+0x494>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80010e0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80010e4:	e76d      	b.n	8000fc2 <printf+0x9ca>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80010e6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80010ea:	e783      	b.n	8000ff4 <printf+0x9fc>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80010ec:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80010f0:	e6c6      	b.n	8000e80 <printf+0x888>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80010f2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80010f6:	e6ba      	b.n	8000e6e <printf+0x876>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80010f8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80010fc:	e6a5      	b.n	8000e4a <printf+0x852>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 80010fe:	3330      	adds	r3, #48	; 0x30
 8001100:	f7ff bbc6 	b.w	8000890 <printf+0x298>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001104:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8001108:	e693      	b.n	8000e32 <printf+0x83a>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800110a:	f102 0030 	add.w	r0, r2, #48	; 0x30
 800110e:	e679      	b.n	8000e04 <printf+0x80c>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001110:	3030      	adds	r0, #48	; 0x30
 8001112:	e779      	b.n	8001008 <printf+0xa10>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001114:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001118:	e4a2      	b.n	8000a60 <printf+0x468>
 800111a:	bf00      	nop
 800111c:	080011fd 	.word	0x080011fd

08001120 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8001120:	4668      	mov	r0, sp
 8001122:	f020 0207 	bic.w	r2, r0, #7
    // HSI or HSE 선택
    
        
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8001126:	4914      	ldr	r1, [pc, #80]	; (8001178 <Hw_StartUp_Init+0x58>)
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8001128:	4695      	mov	sp, r2
 800112a:	b501      	push	{r0, lr}
    // HSI or HSE 선택
    
        
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 800112c:	6808      	ldr	r0, [r1, #0]
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
	
	u32 TimeOutCnt  = 0;
 800112e:	2300      	movs	r3, #0
    // HSI or HSE 선택
    
        
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8001130:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8001134:	460a      	mov	r2, r1
    // HSI or HSE 선택
    
        
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8001136:	6008      	str	r0, [r1, #0]
 8001138:	e006      	b.n	8001148 <Hw_StartUp_Init+0x28>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 800113a:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800113c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8001140:	d107      	bne.n	8001152 <Hw_StartUp_Init+0x32>
 8001142:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001146:	d004      	beq.n	8001152 <Hw_StartUp_Init+0x32>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8001148:	6811      	ldr	r1, [r2, #0]
		TimeOutCnt++;		
 800114a:	3302      	adds	r3, #2
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800114c:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8001150:	d0f3      	beq.n	800113a <Hw_StartUp_Init+0x1a>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8001152:	490a      	ldr	r1, [pc, #40]	; (800117c <Hw_StartUp_Init+0x5c>)
 8001154:	680b      	ldr	r3, [r1, #0]
 8001156:	f043 0010 	orr.w	r0, r3, #16
 800115a:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 800115c:	680a      	ldr	r2, [r1, #0]
 800115e:	f022 0303 	bic.w	r3, r2, #3
 8001162:	600b      	str	r3, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 8001164:	6808      	ldr	r0, [r1, #0]


    main();
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <Hw_StartUp_Init+0x60>)

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 8001168:	f040 0202 	orr.w	r2, r0, #2
 800116c:	600a      	str	r2, [r1, #0]


    main();
 800116e:	4798      	blx	r3

}
 8001170:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8001174:	4685      	mov	sp, r0
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000
 800117c:	40022000 	.word	0x40022000
 8001180:	08000009 	.word	0x08000009

08001184 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8001184:	b508      	push	{r3, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 8001186:	490a      	ldr	r1, [pc, #40]	; (80011b0 <Hw_Init+0x2c>)
 8001188:	4788      	blx	r1
	
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800118a:	480a      	ldr	r0, [pc, #40]	; (80011b4 <Hw_Init+0x30>)
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <Hw_Init+0x34>)
	//
	Hw_PLL_Init();
	
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800118e:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 8001192:	6003      	str	r3, [r0, #0]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8001194:	4909      	ldr	r1, [pc, #36]	; (80011bc <Hw_Init+0x38>)
	Hw_PLL_Init();
	
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8001196:	6042      	str	r2, [r0, #4]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8001198:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <Hw_Init+0x3c>)
	
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800119a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800119e:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80011a2:	600a      	str	r2, [r1, #0]
		
	Hw_Uart_Init();
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <Hw_Init+0x40>)
 80011a6:	4780      	blx	r0
	Hw_Led_Init();
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <Hw_Init+0x44>)
 80011aa:	4798      	blx	r3
}
 80011ac:	bd08      	pop	{r3, pc}
 80011ae:	bf00      	nop
 80011b0:	08001245 	.word	0x08001245
 80011b4:	40010800 	.word	0x40010800
 80011b8:	333334b3 	.word	0x333334b3
 80011bc:	40011004 	.word	0x40011004
 80011c0:	33444444 	.word	0x33444444
 80011c4:	080011cd 	.word	0x080011cd
 80011c8:	080012a9 	.word	0x080012a9

080011cc <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	//-- USART1 설정
	//
	REG_USART1_CR1  = 0 
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <Hw_Uart_Init+0x24>)
					| ( 1 << 13 )		// USART Enable
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <Hw_Uart_Init+0x28>)
 80011d0:	2200      	movs	r2, #0
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	//-- USART1 설정
	//
	REG_USART1_CR1  = 0 
 80011d2:	f242 010c 	movw	r1, #8204	; 0x200c
 80011d6:	6019      	str	r1, [r3, #0]
					| ( 1 << 13 )		// USART Enable
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80011d8:	6002      	str	r2, [r0, #0]
	REG_USART1_CR3  = 0;
 80011da:	6042      	str	r2, [r0, #4]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <Hw_Uart_Init+0x2c>)
 80011de:	f240 2171 	movw	r1, #625	; 0x271
 80011e2:	6011      	str	r1, [r2, #0]
					| ( 39 << 4 )		// DIV_Mantissa
					| (  1 << 0 );		// DIV Fraction
	
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	f440 5200 	orr.w	r2, r0, #8192	; 0x2000
 80011ea:	601a      	str	r2, [r3, #0]
}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	4001380c 	.word	0x4001380c
 80011f4:	40013810 	.word	0x40013810
 80011f8:	40013808 	.word	0x40013808

080011fc <print_byte>:

//------------------------------- printf 포팅용 --------------------------------
//
void print_byte(unsigned int c)
{
    if (c == '\n') print_byte('\r');
 80011fc:	280a      	cmp	r0, #10


//------------------------------- printf 포팅용 --------------------------------
//
void print_byte(unsigned int c)
{
 80011fe:	b510      	push	{r4, lr}
 8001200:	4604      	mov	r4, r0
    if (c == '\n') print_byte('\r');
 8001202:	d007      	beq.n	8001214 <print_byte+0x18>
    while( !((*(volatile unsigned long *) 0x40013800) & 0x80) );
 8001204:	4a05      	ldr	r2, [pc, #20]	; (800121c <print_byte+0x20>)
 8001206:	6810      	ldr	r0, [r2, #0]
 8001208:	f010 0f80 	tst.w	r0, #128	; 0x80
 800120c:	d0fb      	beq.n	8001206 <print_byte+0xa>
    *(volatile unsigned long *) 0x40013804 = c;
 800120e:	4904      	ldr	r1, [pc, #16]	; (8001220 <print_byte+0x24>)
 8001210:	600c      	str	r4, [r1, #0]
}
 8001212:	bd10      	pop	{r4, pc}

//------------------------------- printf 포팅용 --------------------------------
//
void print_byte(unsigned int c)
{
    if (c == '\n') print_byte('\r');
 8001214:	200d      	movs	r0, #13
 8001216:	4b03      	ldr	r3, [pc, #12]	; (8001224 <print_byte+0x28>)
 8001218:	4798      	blx	r3
 800121a:	e7f3      	b.n	8001204 <print_byte+0x8>
 800121c:	40013800 	.word	0x40013800
 8001220:	40013804 	.word	0x40013804
 8001224:	080011fd 	.word	0x080011fd

08001228 <get_byte>:
}


char get_byte(void)
{
	while( !((*(volatile unsigned long *) 0x40013800) & 0x20) );
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <get_byte+0x14>)
 800122a:	6813      	ldr	r3, [r2, #0]
 800122c:	f013 0f20 	tst.w	r3, #32
 8001230:	d0fb      	beq.n	800122a <get_byte+0x2>

	return (char) *(volatile unsigned long *) 0x40013804;    
 8001232:	4903      	ldr	r1, [pc, #12]	; (8001240 <get_byte+0x18>)
 8001234:	6808      	ldr	r0, [r1, #0]
}
 8001236:	b2c0      	uxtb	r0, r0
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40013800 	.word	0x40013800
 8001240:	40013804 	.word	0x40013804

08001244 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16);
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <Hw_PLL_Init+0x58>)
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8001246:	4916      	ldr	r1, [pc, #88]	; (80012a0 <Hw_PLL_Init+0x5c>)
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16);
 8001248:	6818      	ldr	r0, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800124a:	460a      	mov	r2, r1
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16);
 800124c:	f420 107c 	bic.w	r0, r0, #4128768	; 0x3f0000
 8001250:	6018      	str	r0, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f440 10e8 	orr.w	r0, r0, #1900544	; 0x1d0000
 8001258:	6018      	str	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800125a:	6808      	ldr	r0, [r1, #0]
 800125c:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
 8001260:	600b      	str	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8001262:	6811      	ldr	r1, [r2, #0]
 8001264:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001268:	d0fb      	beq.n	8001262 <Hw_PLL_Init+0x1e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <Hw_PLL_Init+0x58>)
 800126c:	6819      	ldr	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 800126e:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8001270:	f021 0003 	bic.w	r0, r1, #3
 8001274:	6018      	str	r0, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 8001276:	6819      	ldr	r1, [r3, #0]
 8001278:	f041 0002 	orr.w	r0, r1, #2
 800127c:	6018      	str	r0, [r3, #0]
    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 800127e:	6813      	ldr	r3, [r2, #0]
 8001280:	f003 0c0c 	and.w	ip, r3, #12
 8001284:	f1bc 0f08 	cmp.w	ip, #8
 8001288:	d1f9      	bne.n	800127e <Hw_PLL_Init+0x3a>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0x1 << 14 | 0x1 << 4  | 0x1 << 3  | 0x1 << 2 | 0x1 << 0;         // UART/ IOPC EN / IOPB EN / IOPA EN / AFIO EN	
 800128a:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <Hw_PLL_Init+0x60>)
 800128c:	6813      	ldr	r3, [r2, #0]
 800128e:	f443 4180 	orr.w	r1, r3, #16384	; 0x4000
 8001292:	f041 001d 	orr.w	r0, r1, #29
 8001296:	6010      	str	r0, [r2, #0]
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40021004 	.word	0x40021004
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40021018 	.word	0x40021018

080012a8 <Hw_Led_Init>:
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{
	u32 PinNum;

	REG_AFIO_MAPR &= ~(0x07 << 24);
 80012a8:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <Hw_Led_Init+0x34>)
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <Hw_Led_Init+0x38>)
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{
	u32 PinNum;

	REG_AFIO_MAPR &= ~(0x07 << 24);
 80012ac:	6810      	ldr	r0, [r2, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80012ae:	490d      	ldr	r1, [pc, #52]	; (80012e4 <Hw_Led_Init+0x3c>)
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{
	u32 PinNum;

	REG_AFIO_MAPR &= ~(0x07 << 24);
 80012b0:	f020 60e0 	bic.w	r0, r0, #117440512	; 0x7000000
 80012b4:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 80012b6:	6810      	ldr	r0, [r2, #0]
 80012b8:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 80012bc:	6010      	str	r0, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	f422 4070 	bic.w	r0, r2, #61440	; 0xf000
 80012c4:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	f442 5040 	orr.w	r0, r2, #12288	; 0x3000
 80012cc:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	601a      	str	r2, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80012d2:	6808      	ldr	r0, [r1, #0]
 80012d4:	f040 0308 	orr.w	r3, r0, #8
 80012d8:	600b      	str	r3, [r1, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
	
		
	Hw_Led_Off(0);
}
 80012da:	4770      	bx	lr
 80012dc:	40010004 	.word	0x40010004
 80012e0:	40010c00 	.word	0x40010c00
 80012e4:	40010c0c 	.word	0x40010c0c

080012e8 <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 80012e8:	b920      	cbnz	r0, 80012f4 <Hw_Led_Toggle+0xc>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 80012ea:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <Hw_Led_Toggle+0x10>)
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	f080 0208 	eor.w	r2, r0, #8
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40010c0c 	.word	0x40010c0c
 80012fc:	65746e65 	.word	0x65746e65
 8001300:	6e612072 	.word	0x6e612072
 8001304:	656b2079 	.word	0x656b2079
 8001308:	2e2e2e79 	.word	0x2e2e2e79
 800130c:	2e2e2e2e 	.word	0x2e2e2e2e
 8001310:	0000000a 	.word	0x0000000a
 8001314:	20656854 	.word	0x20656854
 8001318:	0a646e45 	.word	0x0a646e45
 800131c:	00000000 	.word	0x00000000
 8001320:	00000a0a 	.word	0x00000a0a
 8001324:	2d2d2d2d 	.word	0x2d2d2d2d
 8001328:	2d2d2d2d 	.word	0x2d2d2d2d
 800132c:	2d2d2d2d 	.word	0x2d2d2d2d
 8001330:	2d2d2d2d 	.word	0x2d2d2d2d
 8001334:	2d2d2d2d 	.word	0x2d2d2d2d
 8001338:	2d2d2d2d 	.word	0x2d2d2d2d
 800133c:	2d2d2d2d 	.word	0x2d2d2d2d
 8001340:	2d2d2d2d 	.word	0x2d2d2d2d
 8001344:	2d2d2d2d 	.word	0x2d2d2d2d
 8001348:	2d2d2d2d 	.word	0x2d2d2d2d
 800134c:	2d2d2d2d 	.word	0x2d2d2d2d
 8001350:	2d2d2d2d 	.word	0x2d2d2d2d
 8001354:	00000a2d 	.word	0x00000a2d
 8001358:	20202020 	.word	0x20202020
 800135c:	20202020 	.word	0x20202020
 8001360:	20202020 	.word	0x20202020
 8001364:	20202020 	.word	0x20202020
 8001368:	20202020 	.word	0x20202020
 800136c:	4e49414d 	.word	0x4e49414d
 8001370:	4e454d20 	.word	0x4e454d20
 8001374:	20202055 	.word	0x20202055
 8001378:	20202020 	.word	0x20202020
 800137c:	20202020 	.word	0x20202020
 8001380:	20202020 	.word	0x20202020
 8001384:	20202020 	.word	0x20202020
 8001388:	00000a20 	.word	0x00000a20
 800138c:	202e3020 	.word	0x202e3020
 8001390:	72616d53 	.word	0x72616d53
 8001394:	6f522074 	.word	0x6f522074
 8001398:	20746f62 	.word	0x20746f62
 800139c:	20442742 	.word	0x20442742
 80013a0:	204f4944 	.word	0x204f4944
 80013a4:	20203030 	.word	0x20203030
 80013a8:	20202020 	.word	0x20202020
 80013ac:	20202020 	.word	0x20202020
 80013b0:	20202020 	.word	0x20202020
 80013b4:	20202020 	.word	0x20202020
 80013b8:	20202020 	.word	0x20202020
 80013bc:	00000a20 	.word	0x00000a20
 80013c0:	202e3120 	.word	0x202e3120
 80013c4:	72616d53 	.word	0x72616d53
 80013c8:	6f522074 	.word	0x6f522074
 80013cc:	20746f62 	.word	0x20746f62
 80013d0:	20442742 	.word	0x20442742
 80013d4:	204f4944 	.word	0x204f4944
 80013d8:	20203130 	.word	0x20203130
 80013dc:	20202020 	.word	0x20202020
 80013e0:	20202020 	.word	0x20202020
 80013e4:	20202020 	.word	0x20202020
 80013e8:	20202020 	.word	0x20202020
 80013ec:	20202020 	.word	0x20202020
 80013f0:	00000a20 	.word	0x00000a20
 80013f4:	202e3220 	.word	0x202e3220
 80013f8:	72616d53 	.word	0x72616d53
 80013fc:	6f522074 	.word	0x6f522074
 8001400:	20746f62 	.word	0x20746f62
 8001404:	20442742 	.word	0x20442742
 8001408:	204f4944 	.word	0x204f4944
 800140c:	20203230 	.word	0x20203230
 8001410:	20202020 	.word	0x20202020
 8001414:	20202020 	.word	0x20202020
 8001418:	20202020 	.word	0x20202020
 800141c:	20202020 	.word	0x20202020
 8001420:	20202020 	.word	0x20202020
 8001424:	00000a20 	.word	0x00000a20
 8001428:	202e3320 	.word	0x202e3320
 800142c:	72616d53 	.word	0x72616d53
 8001430:	6f522074 	.word	0x6f522074
 8001434:	20746f62 	.word	0x20746f62
 8001438:	20442742 	.word	0x20442742
 800143c:	204f4944 	.word	0x204f4944
 8001440:	20203330 	.word	0x20203330
 8001444:	20202020 	.word	0x20202020
 8001448:	20202020 	.word	0x20202020
 800144c:	20202020 	.word	0x20202020
 8001450:	20202020 	.word	0x20202020
 8001454:	20202020 	.word	0x20202020
 8001458:	00000a20 	.word	0x00000a20
 800145c:	202e3420 	.word	0x202e3420
 8001460:	72616d53 	.word	0x72616d53
 8001464:	6f522074 	.word	0x6f522074
 8001468:	20746f62 	.word	0x20746f62
 800146c:	20442742 	.word	0x20442742
 8001470:	204f4944 	.word	0x204f4944
 8001474:	20203430 	.word	0x20203430
 8001478:	20202020 	.word	0x20202020
 800147c:	20202020 	.word	0x20202020
 8001480:	20202020 	.word	0x20202020
 8001484:	20202020 	.word	0x20202020
 8001488:	20202020 	.word	0x20202020
 800148c:	00000a20 	.word	0x00000a20
 8001490:	202e3520 	.word	0x202e3520
 8001494:	72616d53 	.word	0x72616d53
 8001498:	6f522074 	.word	0x6f522074
 800149c:	20746f62 	.word	0x20746f62
 80014a0:	20442742 	.word	0x20442742
 80014a4:	204f4944 	.word	0x204f4944
 80014a8:	20203530 	.word	0x20203530
 80014ac:	20202020 	.word	0x20202020
 80014b0:	20202020 	.word	0x20202020
 80014b4:	20202020 	.word	0x20202020
 80014b8:	20202020 	.word	0x20202020
 80014bc:	20202020 	.word	0x20202020
 80014c0:	00000a20 	.word	0x00000a20
 80014c4:	202e3620 	.word	0x202e3620
 80014c8:	72616d53 	.word	0x72616d53
 80014cc:	6f522074 	.word	0x6f522074
 80014d0:	20746f62 	.word	0x20746f62
 80014d4:	20442742 	.word	0x20442742
 80014d8:	204f4944 	.word	0x204f4944
 80014dc:	20203630 	.word	0x20203630
 80014e0:	20202020 	.word	0x20202020
 80014e4:	20202020 	.word	0x20202020
 80014e8:	20202020 	.word	0x20202020
 80014ec:	20202020 	.word	0x20202020
 80014f0:	20202020 	.word	0x20202020
 80014f4:	00000a20 	.word	0x00000a20
 80014f8:	202e3720 	.word	0x202e3720
 80014fc:	72616d53 	.word	0x72616d53
 8001500:	6f522074 	.word	0x6f522074
 8001504:	20746f62 	.word	0x20746f62
 8001508:	20442742 	.word	0x20442742
 800150c:	204f4944 	.word	0x204f4944
 8001510:	20203730 	.word	0x20203730
 8001514:	20202020 	.word	0x20202020
 8001518:	20202020 	.word	0x20202020
 800151c:	20202020 	.word	0x20202020
 8001520:	20202020 	.word	0x20202020
 8001524:	20202020 	.word	0x20202020
 8001528:	00000a20 	.word	0x00000a20
 800152c:	202e3820 	.word	0x202e3820
 8001530:	72616d53 	.word	0x72616d53
 8001534:	6f522074 	.word	0x6f522074
 8001538:	20746f62 	.word	0x20746f62
 800153c:	20442742 	.word	0x20442742
 8001540:	204f4944 	.word	0x204f4944
 8001544:	20203830 	.word	0x20203830
 8001548:	20202020 	.word	0x20202020
 800154c:	20202020 	.word	0x20202020
 8001550:	20202020 	.word	0x20202020
 8001554:	20202020 	.word	0x20202020
 8001558:	20202020 	.word	0x20202020
 800155c:	00000a20 	.word	0x00000a20
 8001560:	202e3920 	.word	0x202e3920
 8001564:	72616d53 	.word	0x72616d53
 8001568:	6f522074 	.word	0x6f522074
 800156c:	20746f62 	.word	0x20746f62
 8001570:	20442742 	.word	0x20442742
 8001574:	204f4944 	.word	0x204f4944
 8001578:	20203930 	.word	0x20203930
 800157c:	20202020 	.word	0x20202020
 8001580:	20202020 	.word	0x20202020
 8001584:	20202020 	.word	0x20202020
 8001588:	20202020 	.word	0x20202020
 800158c:	20202020 	.word	0x20202020
 8001590:	00000a20 	.word	0x00000a20
 8001594:	202e7120 	.word	0x202e7120
 8001598:	72616d53 	.word	0x72616d53
 800159c:	6f522074 	.word	0x6f522074
 80015a0:	20746f62 	.word	0x20746f62
 80015a4:	20442742 	.word	0x20442742
 80015a8:	6d726946 	.word	0x6d726946
 80015ac:	65726177 	.word	0x65726177
 80015b0:	54495551 	.word	0x54495551
 80015b4:	20202020 	.word	0x20202020
 80015b8:	20202020 	.word	0x20202020
 80015bc:	20202020 	.word	0x20202020
 80015c0:	20202020 	.word	0x20202020
 80015c4:	00000a20 	.word	0x00000a20
 80015c8:	454c4553 	.word	0x454c4553
 80015cc:	54205443 	.word	0x54205443
 80015d0:	43204548 	.word	0x43204548
 80015d4:	414d4d4f 	.word	0x414d4d4f
 80015d8:	4e20444e 	.word	0x4e20444e
 80015dc:	45424d55 	.word	0x45424d55
 80015e0:	3a205f52 	.word	0x3a205f52
 80015e4:	00000020 	.word	0x00000020
 80015e8:	312e6f4e 	.word	0x312e6f4e
 80015ec:	0000000a 	.word	0x0000000a
 80015f0:	322e6f4e 	.word	0x322e6f4e
 80015f4:	0000000a 	.word	0x0000000a
 80015f8:	332e6f4e 	.word	0x332e6f4e
 80015fc:	0000000a 	.word	0x0000000a
 8001600:	342e6f4e 	.word	0x342e6f4e
 8001604:	0000000a 	.word	0x0000000a
 8001608:	352e6f4e 	.word	0x352e6f4e
 800160c:	0000000a 	.word	0x0000000a
 8001610:	362e6f4e 	.word	0x362e6f4e
 8001614:	0000000a 	.word	0x0000000a
 8001618:	372e6f4e 	.word	0x372e6f4e
 800161c:	0000000a 	.word	0x0000000a
 8001620:	382e6f4e 	.word	0x382e6f4e
 8001624:	0000000a 	.word	0x0000000a
 8001628:	392e6f4e 	.word	0x392e6f4e
 800162c:	0000000a 	.word	0x0000000a
 8001630:	302e6f4e 	.word	0x302e6f4e
 8001634:	0000000a 	.word	0x0000000a
 8001638:	74697865 	.word	0x74697865
 800163c:	0000000a 	.word	0x0000000a
