
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000068b0  08000000  08000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000030c  20000000  080068b0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001240  20000400  08006e00  00010400  2**9
                  ALLOC
  3 ._usrstack    00000100  20001640  08008040  00010400  2**0
                  ALLOC
  4 .ARM.attributes 00000033  00000000  00000000  0001030c  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000bea4  00000000  00000000  0001033f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003627  00000000  00000000  0001c1e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000c05f  00000000  00000000  0001f80a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000c78  00000000  00000000  0002b869  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000026e8  00000000  00000000  0002c4e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003f64  00000000  00000000  0002ebc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000029fe  00000000  00000000  00032b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000070  00000000  00000000  0003552b  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001fe0  00000000  00000000  0003559c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 29 23 00 08                             .P. )#..

08000008 <__aeabi_drsub>:
 8000008:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800000c:	e002      	b.n	8000014 <__adddf3>
 800000e:	bf00      	nop

08000010 <__aeabi_dsub>:
 8000010:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000014 <__adddf3>:
 8000014:	b530      	push	{r4, r5, lr}
 8000016:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800001a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800001e:	ea94 0f05 	teq	r4, r5
 8000022:	bf08      	it	eq
 8000024:	ea90 0f02 	teqeq	r0, r2
 8000028:	bf1f      	itttt	ne
 800002a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800002e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000032:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000036:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800003a:	f000 80e2 	beq.w	8000202 <__adddf3+0x1ee>
 800003e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000042:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000046:	bfb8      	it	lt
 8000048:	426d      	neglt	r5, r5
 800004a:	dd0c      	ble.n	8000066 <__adddf3+0x52>
 800004c:	442c      	add	r4, r5
 800004e:	ea80 0202 	eor.w	r2, r0, r2
 8000052:	ea81 0303 	eor.w	r3, r1, r3
 8000056:	ea82 0000 	eor.w	r0, r2, r0
 800005a:	ea83 0101 	eor.w	r1, r3, r1
 800005e:	ea80 0202 	eor.w	r2, r0, r2
 8000062:	ea81 0303 	eor.w	r3, r1, r3
 8000066:	2d36      	cmp	r5, #54	; 0x36
 8000068:	bf88      	it	hi
 800006a:	bd30      	pophi	{r4, r5, pc}
 800006c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000070:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000074:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000078:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800007c:	d002      	beq.n	8000084 <__adddf3+0x70>
 800007e:	4240      	negs	r0, r0
 8000080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000084:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000088:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800008c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000090:	d002      	beq.n	8000098 <__adddf3+0x84>
 8000092:	4252      	negs	r2, r2
 8000094:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000098:	ea94 0f05 	teq	r4, r5
 800009c:	f000 80a7 	beq.w	80001ee <__adddf3+0x1da>
 80000a0:	f1a4 0401 	sub.w	r4, r4, #1
 80000a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80000a8:	db0d      	blt.n	80000c6 <__adddf3+0xb2>
 80000aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80000ae:	fa22 f205 	lsr.w	r2, r2, r5
 80000b2:	1880      	adds	r0, r0, r2
 80000b4:	f141 0100 	adc.w	r1, r1, #0
 80000b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80000bc:	1880      	adds	r0, r0, r2
 80000be:	fa43 f305 	asr.w	r3, r3, r5
 80000c2:	4159      	adcs	r1, r3
 80000c4:	e00e      	b.n	80000e4 <__adddf3+0xd0>
 80000c6:	f1a5 0520 	sub.w	r5, r5, #32
 80000ca:	f10e 0e20 	add.w	lr, lr, #32
 80000ce:	2a01      	cmp	r2, #1
 80000d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80000d4:	bf28      	it	cs
 80000d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80000da:	fa43 f305 	asr.w	r3, r3, r5
 80000de:	18c0      	adds	r0, r0, r3
 80000e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80000e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80000e8:	d507      	bpl.n	80000fa <__adddf3+0xe6>
 80000ea:	f04f 0e00 	mov.w	lr, #0
 80000ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80000f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80000f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80000fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80000fe:	d31b      	bcc.n	8000138 <__adddf3+0x124>
 8000100:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000104:	d30c      	bcc.n	8000120 <__adddf3+0x10c>
 8000106:	0849      	lsrs	r1, r1, #1
 8000108:	ea5f 0030 	movs.w	r0, r0, rrx
 800010c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000110:	f104 0401 	add.w	r4, r4, #1
 8000114:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000118:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800011c:	f080 809a 	bcs.w	8000254 <__adddf3+0x240>
 8000120:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000124:	bf08      	it	eq
 8000126:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800012a:	f150 0000 	adcs.w	r0, r0, #0
 800012e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000132:	ea41 0105 	orr.w	r1, r1, r5
 8000136:	bd30      	pop	{r4, r5, pc}
 8000138:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800013c:	4140      	adcs	r0, r0
 800013e:	eb41 0101 	adc.w	r1, r1, r1
 8000142:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000146:	f1a4 0401 	sub.w	r4, r4, #1
 800014a:	d1e9      	bne.n	8000120 <__adddf3+0x10c>
 800014c:	f091 0f00 	teq	r1, #0
 8000150:	bf04      	itt	eq
 8000152:	4601      	moveq	r1, r0
 8000154:	2000      	moveq	r0, #0
 8000156:	fab1 f381 	clz	r3, r1
 800015a:	bf08      	it	eq
 800015c:	3320      	addeq	r3, #32
 800015e:	f1a3 030b 	sub.w	r3, r3, #11
 8000162:	f1b3 0220 	subs.w	r2, r3, #32
 8000166:	da0c      	bge.n	8000182 <__adddf3+0x16e>
 8000168:	320c      	adds	r2, #12
 800016a:	dd08      	ble.n	800017e <__adddf3+0x16a>
 800016c:	f102 0c14 	add.w	ip, r2, #20
 8000170:	f1c2 020c 	rsb	r2, r2, #12
 8000174:	fa01 f00c 	lsl.w	r0, r1, ip
 8000178:	fa21 f102 	lsr.w	r1, r1, r2
 800017c:	e00c      	b.n	8000198 <__adddf3+0x184>
 800017e:	f102 0214 	add.w	r2, r2, #20
 8000182:	bfd8      	it	le
 8000184:	f1c2 0c20 	rsble	ip, r2, #32
 8000188:	fa01 f102 	lsl.w	r1, r1, r2
 800018c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000190:	bfdc      	itt	le
 8000192:	ea41 010c 	orrle.w	r1, r1, ip
 8000196:	4090      	lslle	r0, r2
 8000198:	1ae4      	subs	r4, r4, r3
 800019a:	bfa2      	ittt	ge
 800019c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80001a0:	4329      	orrge	r1, r5
 80001a2:	bd30      	popge	{r4, r5, pc}
 80001a4:	ea6f 0404 	mvn.w	r4, r4
 80001a8:	3c1f      	subs	r4, #31
 80001aa:	da1c      	bge.n	80001e6 <__adddf3+0x1d2>
 80001ac:	340c      	adds	r4, #12
 80001ae:	dc0e      	bgt.n	80001ce <__adddf3+0x1ba>
 80001b0:	f104 0414 	add.w	r4, r4, #20
 80001b4:	f1c4 0220 	rsb	r2, r4, #32
 80001b8:	fa20 f004 	lsr.w	r0, r0, r4
 80001bc:	fa01 f302 	lsl.w	r3, r1, r2
 80001c0:	ea40 0003 	orr.w	r0, r0, r3
 80001c4:	fa21 f304 	lsr.w	r3, r1, r4
 80001c8:	ea45 0103 	orr.w	r1, r5, r3
 80001cc:	bd30      	pop	{r4, r5, pc}
 80001ce:	f1c4 040c 	rsb	r4, r4, #12
 80001d2:	f1c4 0220 	rsb	r2, r4, #32
 80001d6:	fa20 f002 	lsr.w	r0, r0, r2
 80001da:	fa01 f304 	lsl.w	r3, r1, r4
 80001de:	ea40 0003 	orr.w	r0, r0, r3
 80001e2:	4629      	mov	r1, r5
 80001e4:	bd30      	pop	{r4, r5, pc}
 80001e6:	fa21 f004 	lsr.w	r0, r1, r4
 80001ea:	4629      	mov	r1, r5
 80001ec:	bd30      	pop	{r4, r5, pc}
 80001ee:	f094 0f00 	teq	r4, #0
 80001f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80001f6:	bf06      	itte	eq
 80001f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80001fc:	3401      	addeq	r4, #1
 80001fe:	3d01      	subne	r5, #1
 8000200:	e74e      	b.n	80000a0 <__adddf3+0x8c>
 8000202:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000206:	bf18      	it	ne
 8000208:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020c:	d029      	beq.n	8000262 <__adddf3+0x24e>
 800020e:	ea94 0f05 	teq	r4, r5
 8000212:	bf08      	it	eq
 8000214:	ea90 0f02 	teqeq	r0, r2
 8000218:	d005      	beq.n	8000226 <__adddf3+0x212>
 800021a:	ea54 0c00 	orrs.w	ip, r4, r0
 800021e:	bf04      	itt	eq
 8000220:	4619      	moveq	r1, r3
 8000222:	4610      	moveq	r0, r2
 8000224:	bd30      	pop	{r4, r5, pc}
 8000226:	ea91 0f03 	teq	r1, r3
 800022a:	bf1e      	ittt	ne
 800022c:	2100      	movne	r1, #0
 800022e:	2000      	movne	r0, #0
 8000230:	bd30      	popne	{r4, r5, pc}
 8000232:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000236:	d105      	bne.n	8000244 <__adddf3+0x230>
 8000238:	0040      	lsls	r0, r0, #1
 800023a:	4149      	adcs	r1, r1
 800023c:	bf28      	it	cs
 800023e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000242:	bd30      	pop	{r4, r5, pc}
 8000244:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000248:	bf3c      	itt	cc
 800024a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800024e:	bd30      	popcc	{r4, r5, pc}
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000258:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800025c:	f04f 0000 	mov.w	r0, #0
 8000260:	bd30      	pop	{r4, r5, pc}
 8000262:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000266:	bf1a      	itte	ne
 8000268:	4619      	movne	r1, r3
 800026a:	4610      	movne	r0, r2
 800026c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000270:	bf1c      	itt	ne
 8000272:	460b      	movne	r3, r1
 8000274:	4602      	movne	r2, r0
 8000276:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800027a:	bf06      	itte	eq
 800027c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000280:	ea91 0f03 	teqeq	r1, r3
 8000284:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000288:	bd30      	pop	{r4, r5, pc}
 800028a:	bf00      	nop

0800028c <__aeabi_ui2d>:
 800028c:	f090 0f00 	teq	r0, #0
 8000290:	bf04      	itt	eq
 8000292:	2100      	moveq	r1, #0
 8000294:	4770      	bxeq	lr
 8000296:	b530      	push	{r4, r5, lr}
 8000298:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800029c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80002a0:	f04f 0500 	mov.w	r5, #0
 80002a4:	f04f 0100 	mov.w	r1, #0
 80002a8:	e750      	b.n	800014c <__adddf3+0x138>
 80002aa:	bf00      	nop

080002ac <__aeabi_i2d>:
 80002ac:	f090 0f00 	teq	r0, #0
 80002b0:	bf04      	itt	eq
 80002b2:	2100      	moveq	r1, #0
 80002b4:	4770      	bxeq	lr
 80002b6:	b530      	push	{r4, r5, lr}
 80002b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80002bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80002c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	f04f 0100 	mov.w	r1, #0
 80002cc:	e73e      	b.n	800014c <__adddf3+0x138>
 80002ce:	bf00      	nop

080002d0 <__aeabi_f2d>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80002d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80002de:	bf1f      	itttt	ne
 80002e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80002e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80002e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80002ec:	4770      	bxne	lr
 80002ee:	f092 0f00 	teq	r2, #0
 80002f2:	bf14      	ite	ne
 80002f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80002f8:	4770      	bxeq	lr
 80002fa:	b530      	push	{r4, r5, lr}
 80002fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000308:	e720      	b.n	800014c <__adddf3+0x138>
 800030a:	bf00      	nop

0800030c <__aeabi_ul2d>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	b530      	push	{r4, r5, lr}
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	e00a      	b.n	8000332 <__aeabi_l2d+0x16>

0800031c <__aeabi_l2d>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	b530      	push	{r4, r5, lr}
 8000326:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800032a:	d502      	bpl.n	8000332 <__aeabi_l2d+0x16>
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000336:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800033a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800033e:	f43f aedc 	beq.w	80000fa <__adddf3+0xe6>
 8000342:	f04f 0203 	mov.w	r2, #3
 8000346:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800034a:	bf18      	it	ne
 800034c:	3203      	addne	r2, #3
 800034e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000352:	bf18      	it	ne
 8000354:	3203      	addne	r2, #3
 8000356:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 fe03 	lsl.w	lr, r1, r3
 800036a:	ea40 000e 	orr.w	r0, r0, lr
 800036e:	fa21 f102 	lsr.w	r1, r1, r2
 8000372:	4414      	add	r4, r2
 8000374:	e6c1      	b.n	80000fa <__adddf3+0xe6>
 8000376:	bf00      	nop

08000378 <__aeabi_dmul>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000382:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000386:	bf1d      	ittte	ne
 8000388:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800038c:	ea94 0f0c 	teqne	r4, ip
 8000390:	ea95 0f0c 	teqne	r5, ip
 8000394:	f000 f8de 	bleq	8000554 <__aeabi_dmul+0x1dc>
 8000398:	442c      	add	r4, r5
 800039a:	ea81 0603 	eor.w	r6, r1, r3
 800039e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80003a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80003a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80003aa:	bf18      	it	ne
 80003ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80003b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003b8:	d038      	beq.n	800042c <__aeabi_dmul+0xb4>
 80003ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80003be:	f04f 0500 	mov.w	r5, #0
 80003c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80003c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80003ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80003ce:	f04f 0600 	mov.w	r6, #0
 80003d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80003d6:	f09c 0f00 	teq	ip, #0
 80003da:	bf18      	it	ne
 80003dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80003e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80003e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80003e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80003ec:	d204      	bcs.n	80003f8 <__aeabi_dmul+0x80>
 80003ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80003f2:	416d      	adcs	r5, r5
 80003f4:	eb46 0606 	adc.w	r6, r6, r6
 80003f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80003fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000400:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000404:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000408:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800040c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000410:	bf88      	it	hi
 8000412:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000416:	d81e      	bhi.n	8000456 <__aeabi_dmul+0xde>
 8000418:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000430:	ea46 0101 	orr.w	r1, r6, r1
 8000434:	ea40 0002 	orr.w	r0, r0, r2
 8000438:	ea81 0103 	eor.w	r1, r1, r3
 800043c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000440:	bfc2      	ittt	gt
 8000442:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000446:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800044a:	bd70      	popgt	{r4, r5, r6, pc}
 800044c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000450:	f04f 0e00 	mov.w	lr, #0
 8000454:	3c01      	subs	r4, #1
 8000456:	f300 80ab 	bgt.w	80005b0 <__aeabi_dmul+0x238>
 800045a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800045e:	bfde      	ittt	le
 8000460:	2000      	movle	r0, #0
 8000462:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000466:	bd70      	pople	{r4, r5, r6, pc}
 8000468:	f1c4 0400 	rsb	r4, r4, #0
 800046c:	3c20      	subs	r4, #32
 800046e:	da35      	bge.n	80004dc <__aeabi_dmul+0x164>
 8000470:	340c      	adds	r4, #12
 8000472:	dc1b      	bgt.n	80004ac <__aeabi_dmul+0x134>
 8000474:	f104 0414 	add.w	r4, r4, #20
 8000478:	f1c4 0520 	rsb	r5, r4, #32
 800047c:	fa00 f305 	lsl.w	r3, r0, r5
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f205 	lsl.w	r2, r1, r5
 8000488:	ea40 0002 	orr.w	r0, r0, r2
 800048c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000490:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000494:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000498:	fa21 f604 	lsr.w	r6, r1, r4
 800049c:	eb42 0106 	adc.w	r1, r2, r6
 80004a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004a4:	bf08      	it	eq
 80004a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	f1c4 040c 	rsb	r4, r4, #12
 80004b0:	f1c4 0520 	rsb	r5, r4, #32
 80004b4:	fa00 f304 	lsl.w	r3, r0, r4
 80004b8:	fa20 f005 	lsr.w	r0, r0, r5
 80004bc:	fa01 f204 	lsl.w	r2, r1, r4
 80004c0:	ea40 0002 	orr.w	r0, r0, r2
 80004c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80004cc:	f141 0100 	adc.w	r1, r1, #0
 80004d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004d4:	bf08      	it	eq
 80004d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	f1c4 0520 	rsb	r5, r4, #32
 80004e0:	fa00 f205 	lsl.w	r2, r0, r5
 80004e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80004e8:	fa20 f304 	lsr.w	r3, r0, r4
 80004ec:	fa01 f205 	lsl.w	r2, r1, r5
 80004f0:	ea43 0302 	orr.w	r3, r3, r2
 80004f4:	fa21 f004 	lsr.w	r0, r1, r4
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000500:	ea20 0002 	bic.w	r0, r0, r2
 8000504:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000508:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800050c:	bf08      	it	eq
 800050e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000512:	bd70      	pop	{r4, r5, r6, pc}
 8000514:	f094 0f00 	teq	r4, #0
 8000518:	d10f      	bne.n	800053a <__aeabi_dmul+0x1c2>
 800051a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800051e:	0040      	lsls	r0, r0, #1
 8000520:	eb41 0101 	adc.w	r1, r1, r1
 8000524:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000528:	bf08      	it	eq
 800052a:	3c01      	subeq	r4, #1
 800052c:	d0f7      	beq.n	800051e <__aeabi_dmul+0x1a6>
 800052e:	ea41 0106 	orr.w	r1, r1, r6
 8000532:	f095 0f00 	teq	r5, #0
 8000536:	bf18      	it	ne
 8000538:	4770      	bxne	lr
 800053a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800053e:	0052      	lsls	r2, r2, #1
 8000540:	eb43 0303 	adc.w	r3, r3, r3
 8000544:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000548:	bf08      	it	eq
 800054a:	3d01      	subeq	r5, #1
 800054c:	d0f7      	beq.n	800053e <__aeabi_dmul+0x1c6>
 800054e:	ea43 0306 	orr.w	r3, r3, r6
 8000552:	4770      	bx	lr
 8000554:	ea94 0f0c 	teq	r4, ip
 8000558:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800055c:	bf18      	it	ne
 800055e:	ea95 0f0c 	teqne	r5, ip
 8000562:	d00c      	beq.n	800057e <__aeabi_dmul+0x206>
 8000564:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000568:	bf18      	it	ne
 800056a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800056e:	d1d1      	bne.n	8000514 <__aeabi_dmul+0x19c>
 8000570:	ea81 0103 	eor.w	r1, r1, r3
 8000574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000582:	bf06      	itte	eq
 8000584:	4610      	moveq	r0, r2
 8000586:	4619      	moveq	r1, r3
 8000588:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800058c:	d019      	beq.n	80005c2 <__aeabi_dmul+0x24a>
 800058e:	ea94 0f0c 	teq	r4, ip
 8000592:	d102      	bne.n	800059a <__aeabi_dmul+0x222>
 8000594:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000598:	d113      	bne.n	80005c2 <__aeabi_dmul+0x24a>
 800059a:	ea95 0f0c 	teq	r5, ip
 800059e:	d105      	bne.n	80005ac <__aeabi_dmul+0x234>
 80005a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80005a4:	bf1c      	itt	ne
 80005a6:	4610      	movne	r0, r2
 80005a8:	4619      	movne	r1, r3
 80005aa:	d10a      	bne.n	80005c2 <__aeabi_dmul+0x24a>
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80005b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005bc:	f04f 0000 	mov.w	r0, #0
 80005c0:	bd70      	pop	{r4, r5, r6, pc}
 80005c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80005c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80005ca:	bd70      	pop	{r4, r5, r6, pc}

080005cc <__aeabi_ddiv>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8a7 	bleq	800073a <__aeabi_ddiv+0x16e>
 80005ec:	eba4 0405 	sub.w	r4, r4, r5
 80005f0:	ea81 0e03 	eor.w	lr, r1, r3
 80005f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80005f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005fc:	f000 8088 	beq.w	8000710 <__aeabi_ddiv+0x144>
 8000600:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000604:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000608:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800060c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000610:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000614:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000618:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800061c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000620:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000624:	429d      	cmp	r5, r3
 8000626:	bf08      	it	eq
 8000628:	4296      	cmpeq	r6, r2
 800062a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800062e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000632:	d202      	bcs.n	800063a <__aeabi_ddiv+0x6e>
 8000634:	085b      	lsrs	r3, r3, #1
 8000636:	ea4f 0232 	mov.w	r2, r2, rrx
 800063a:	1ab6      	subs	r6, r6, r2
 800063c:	eb65 0503 	sbc.w	r5, r5, r3
 8000640:	085b      	lsrs	r3, r3, #1
 8000642:	ea4f 0232 	mov.w	r2, r2, rrx
 8000646:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800064a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800064e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000652:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000656:	bf22      	ittt	cs
 8000658:	1ab6      	subcs	r6, r6, r2
 800065a:	4675      	movcs	r5, lr
 800065c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000660:	085b      	lsrs	r3, r3, #1
 8000662:	ea4f 0232 	mov.w	r2, r2, rrx
 8000666:	ebb6 0e02 	subs.w	lr, r6, r2
 800066a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800066e:	bf22      	ittt	cs
 8000670:	1ab6      	subcs	r6, r6, r2
 8000672:	4675      	movcs	r5, lr
 8000674:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	ea4f 0232 	mov.w	r2, r2, rrx
 800067e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000682:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000686:	bf22      	ittt	cs
 8000688:	1ab6      	subcs	r6, r6, r2
 800068a:	4675      	movcs	r5, lr
 800068c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000690:	085b      	lsrs	r3, r3, #1
 8000692:	ea4f 0232 	mov.w	r2, r2, rrx
 8000696:	ebb6 0e02 	subs.w	lr, r6, r2
 800069a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800069e:	bf22      	ittt	cs
 80006a0:	1ab6      	subcs	r6, r6, r2
 80006a2:	4675      	movcs	r5, lr
 80006a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80006a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80006ac:	d018      	beq.n	80006e0 <__aeabi_ddiv+0x114>
 80006ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80006b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80006b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80006ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80006be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80006c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80006c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80006ca:	d1c0      	bne.n	800064e <__aeabi_ddiv+0x82>
 80006cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006d0:	d10b      	bne.n	80006ea <__aeabi_ddiv+0x11e>
 80006d2:	ea41 0100 	orr.w	r1, r1, r0
 80006d6:	f04f 0000 	mov.w	r0, #0
 80006da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80006de:	e7b6      	b.n	800064e <__aeabi_ddiv+0x82>
 80006e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e4:	bf04      	itt	eq
 80006e6:	4301      	orreq	r1, r0
 80006e8:	2000      	moveq	r0, #0
 80006ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ee:	bf88      	it	hi
 80006f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f4:	f63f aeaf 	bhi.w	8000456 <__aeabi_dmul+0xde>
 80006f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80006fc:	bf04      	itt	eq
 80006fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000702:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000714:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000718:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	e690      	b.n	8000456 <__aeabi_dmul+0xde>
 8000734:	ea45 0e06 	orr.w	lr, r5, r6
 8000738:	e68d      	b.n	8000456 <__aeabi_dmul+0xde>
 800073a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073e:	ea94 0f0c 	teq	r4, ip
 8000742:	bf08      	it	eq
 8000744:	ea95 0f0c 	teqeq	r5, ip
 8000748:	f43f af3b 	beq.w	80005c2 <__aeabi_dmul+0x24a>
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	d10a      	bne.n	8000768 <__aeabi_ddiv+0x19c>
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	f47f af34 	bne.w	80005c2 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	f47f af25 	bne.w	80005ac <__aeabi_dmul+0x234>
 8000762:	4610      	mov	r0, r2
 8000764:	4619      	mov	r1, r3
 8000766:	e72c      	b.n	80005c2 <__aeabi_dmul+0x24a>
 8000768:	ea95 0f0c 	teq	r5, ip
 800076c:	d106      	bne.n	800077c <__aeabi_ddiv+0x1b0>
 800076e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000772:	f43f aefd 	beq.w	8000570 <__aeabi_dmul+0x1f8>
 8000776:	4610      	mov	r0, r2
 8000778:	4619      	mov	r1, r3
 800077a:	e722      	b.n	80005c2 <__aeabi_dmul+0x24a>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	f47f aec5 	bne.w	8000514 <__aeabi_dmul+0x19c>
 800078a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800078e:	f47f af0d 	bne.w	80005ac <__aeabi_dmul+0x234>
 8000792:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000796:	f47f aeeb 	bne.w	8000570 <__aeabi_dmul+0x1f8>
 800079a:	e712      	b.n	80005c2 <__aeabi_dmul+0x24a>

0800079c <__gedf2>:
 800079c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007a0:	e006      	b.n	80007b0 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__ledf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	e002      	b.n	80007b0 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__cmpdf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c0:	bf18      	it	ne
 80007c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007c6:	d01b      	beq.n	8000800 <__cmpdf2+0x54>
 80007c8:	b001      	add	sp, #4
 80007ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ce:	bf0c      	ite	eq
 80007d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007d4:	ea91 0f03 	teqne	r1, r3
 80007d8:	bf02      	ittt	eq
 80007da:	ea90 0f02 	teqeq	r0, r2
 80007de:	2000      	moveq	r0, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	f110 0f00 	cmn.w	r0, #0
 80007e6:	ea91 0f03 	teq	r1, r3
 80007ea:	bf58      	it	pl
 80007ec:	4299      	cmppl	r1, r3
 80007ee:	bf08      	it	eq
 80007f0:	4290      	cmpeq	r0, r2
 80007f2:	bf2c      	ite	cs
 80007f4:	17d8      	asrcs	r0, r3, #31
 80007f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007fa:	f040 0001 	orr.w	r0, r0, #1
 80007fe:	4770      	bx	lr
 8000800:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000804:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000808:	d102      	bne.n	8000810 <__cmpdf2+0x64>
 800080a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800080e:	d107      	bne.n	8000820 <__cmpdf2+0x74>
 8000810:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000818:	d1d6      	bne.n	80007c8 <__cmpdf2+0x1c>
 800081a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800081e:	d0d3      	beq.n	80007c8 <__cmpdf2+0x1c>
 8000820:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <__aeabi_cdrcmple>:
 8000828:	4684      	mov	ip, r0
 800082a:	4610      	mov	r0, r2
 800082c:	4662      	mov	r2, ip
 800082e:	468c      	mov	ip, r1
 8000830:	4619      	mov	r1, r3
 8000832:	4663      	mov	r3, ip
 8000834:	e000      	b.n	8000838 <__aeabi_cdcmpeq>
 8000836:	bf00      	nop

08000838 <__aeabi_cdcmpeq>:
 8000838:	b501      	push	{r0, lr}
 800083a:	f7ff ffb7 	bl	80007ac <__cmpdf2>
 800083e:	2800      	cmp	r0, #0
 8000840:	bf48      	it	mi
 8000842:	f110 0f00 	cmnmi.w	r0, #0
 8000846:	bd01      	pop	{r0, pc}

08000848 <__aeabi_dcmpeq>:
 8000848:	f84d ed08 	str.w	lr, [sp, #-8]!
 800084c:	f7ff fff4 	bl	8000838 <__aeabi_cdcmpeq>
 8000850:	bf0c      	ite	eq
 8000852:	2001      	moveq	r0, #1
 8000854:	2000      	movne	r0, #0
 8000856:	f85d fb08 	ldr.w	pc, [sp], #8
 800085a:	bf00      	nop

0800085c <__aeabi_dcmplt>:
 800085c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000860:	f7ff ffea 	bl	8000838 <__aeabi_cdcmpeq>
 8000864:	bf34      	ite	cc
 8000866:	2001      	movcc	r0, #1
 8000868:	2000      	movcs	r0, #0
 800086a:	f85d fb08 	ldr.w	pc, [sp], #8
 800086e:	bf00      	nop

08000870 <__aeabi_dcmple>:
 8000870:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000874:	f7ff ffe0 	bl	8000838 <__aeabi_cdcmpeq>
 8000878:	bf94      	ite	ls
 800087a:	2001      	movls	r0, #1
 800087c:	2000      	movhi	r0, #0
 800087e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000882:	bf00      	nop

08000884 <__aeabi_dcmpge>:
 8000884:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000888:	f7ff ffce 	bl	8000828 <__aeabi_cdrcmple>
 800088c:	bf94      	ite	ls
 800088e:	2001      	movls	r0, #1
 8000890:	2000      	movhi	r0, #0
 8000892:	f85d fb08 	ldr.w	pc, [sp], #8
 8000896:	bf00      	nop

08000898 <__aeabi_dcmpgt>:
 8000898:	f84d ed08 	str.w	lr, [sp, #-8]!
 800089c:	f7ff ffc4 	bl	8000828 <__aeabi_cdrcmple>
 80008a0:	bf34      	ite	cc
 80008a2:	2001      	movcc	r0, #1
 80008a4:	2000      	movcs	r0, #0
 80008a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008aa:	bf00      	nop

080008ac <__aeabi_d2f>:
 80008ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008b4:	bf24      	itt	cs
 80008b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008be:	d90d      	bls.n	80008dc <__aeabi_d2f+0x30>
 80008c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008d4:	bf08      	it	eq
 80008d6:	f020 0001 	biceq.w	r0, r0, #1
 80008da:	4770      	bx	lr
 80008dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008e0:	d121      	bne.n	8000926 <__aeabi_d2f+0x7a>
 80008e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008e6:	bfbc      	itt	lt
 80008e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ec:	4770      	bxlt	lr
 80008ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008f6:	f1c2 0218 	rsb	r2, r2, #24
 80008fa:	f1c2 0c20 	rsb	ip, r2, #32
 80008fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000902:	fa20 f002 	lsr.w	r0, r0, r2
 8000906:	bf18      	it	ne
 8000908:	f040 0001 	orrne.w	r0, r0, #1
 800090c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000910:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000914:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000918:	ea40 000c 	orr.w	r0, r0, ip
 800091c:	fa23 f302 	lsr.w	r3, r3, r2
 8000920:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000924:	e7cc      	b.n	80008c0 <__aeabi_d2f+0x14>
 8000926:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800092a:	d107      	bne.n	800093c <__aeabi_d2f+0x90>
 800092c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000930:	bf1e      	ittt	ne
 8000932:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000936:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800093a:	4770      	bxne	lr
 800093c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000940:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000944:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_frsub>:
 800094c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000950:	e002      	b.n	8000958 <__addsf3>
 8000952:	bf00      	nop

08000954 <__aeabi_fsub>:
 8000954:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000958 <__addsf3>:
 8000958:	0042      	lsls	r2, r0, #1
 800095a:	bf1f      	itttt	ne
 800095c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000960:	ea92 0f03 	teqne	r2, r3
 8000964:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000968:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800096c:	d06a      	beq.n	8000a44 <__addsf3+0xec>
 800096e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000972:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000976:	bfc1      	itttt	gt
 8000978:	18d2      	addgt	r2, r2, r3
 800097a:	4041      	eorgt	r1, r0
 800097c:	4048      	eorgt	r0, r1
 800097e:	4041      	eorgt	r1, r0
 8000980:	bfb8      	it	lt
 8000982:	425b      	neglt	r3, r3
 8000984:	2b19      	cmp	r3, #25
 8000986:	bf88      	it	hi
 8000988:	4770      	bxhi	lr
 800098a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800098e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000992:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4249      	negne	r1, r1
 80009aa:	ea92 0f03 	teq	r2, r3
 80009ae:	d03f      	beq.n	8000a30 <__addsf3+0xd8>
 80009b0:	f1a2 0201 	sub.w	r2, r2, #1
 80009b4:	fa41 fc03 	asr.w	ip, r1, r3
 80009b8:	eb10 000c 	adds.w	r0, r0, ip
 80009bc:	f1c3 0320 	rsb	r3, r3, #32
 80009c0:	fa01 f103 	lsl.w	r1, r1, r3
 80009c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009c8:	d502      	bpl.n	80009d0 <__addsf3+0x78>
 80009ca:	4249      	negs	r1, r1
 80009cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009d4:	d313      	bcc.n	80009fe <__addsf3+0xa6>
 80009d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009da:	d306      	bcc.n	80009ea <__addsf3+0x92>
 80009dc:	0840      	lsrs	r0, r0, #1
 80009de:	ea4f 0131 	mov.w	r1, r1, rrx
 80009e2:	f102 0201 	add.w	r2, r2, #1
 80009e6:	2afe      	cmp	r2, #254	; 0xfe
 80009e8:	d251      	bcs.n	8000a8e <__addsf3+0x136>
 80009ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f2:	bf08      	it	eq
 80009f4:	f020 0001 	biceq.w	r0, r0, #1
 80009f8:	ea40 0003 	orr.w	r0, r0, r3
 80009fc:	4770      	bx	lr
 80009fe:	0049      	lsls	r1, r1, #1
 8000a00:	eb40 0000 	adc.w	r0, r0, r0
 8000a04:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a08:	f1a2 0201 	sub.w	r2, r2, #1
 8000a0c:	d1ed      	bne.n	80009ea <__addsf3+0x92>
 8000a0e:	fab0 fc80 	clz	ip, r0
 8000a12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a16:	ebb2 020c 	subs.w	r2, r2, ip
 8000a1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a1e:	bfaa      	itet	ge
 8000a20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a24:	4252      	neglt	r2, r2
 8000a26:	4318      	orrge	r0, r3
 8000a28:	bfbc      	itt	lt
 8000a2a:	40d0      	lsrlt	r0, r2
 8000a2c:	4318      	orrlt	r0, r3
 8000a2e:	4770      	bx	lr
 8000a30:	f092 0f00 	teq	r2, #0
 8000a34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a38:	bf06      	itte	eq
 8000a3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a3e:	3201      	addeq	r2, #1
 8000a40:	3b01      	subne	r3, #1
 8000a42:	e7b5      	b.n	80009b0 <__addsf3+0x58>
 8000a44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a4c:	bf18      	it	ne
 8000a4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a52:	d021      	beq.n	8000a98 <__addsf3+0x140>
 8000a54:	ea92 0f03 	teq	r2, r3
 8000a58:	d004      	beq.n	8000a64 <__addsf3+0x10c>
 8000a5a:	f092 0f00 	teq	r2, #0
 8000a5e:	bf08      	it	eq
 8000a60:	4608      	moveq	r0, r1
 8000a62:	4770      	bx	lr
 8000a64:	ea90 0f01 	teq	r0, r1
 8000a68:	bf1c      	itt	ne
 8000a6a:	2000      	movne	r0, #0
 8000a6c:	4770      	bxne	lr
 8000a6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a72:	d104      	bne.n	8000a7e <__addsf3+0x126>
 8000a74:	0040      	lsls	r0, r0, #1
 8000a76:	bf28      	it	cs
 8000a78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a7c:	4770      	bx	lr
 8000a7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a82:	bf3c      	itt	cc
 8000a84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bxcc	lr
 8000a8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	4770      	bx	lr
 8000a98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a9c:	bf16      	itet	ne
 8000a9e:	4608      	movne	r0, r1
 8000aa0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa4:	4601      	movne	r1, r0
 8000aa6:	0242      	lsls	r2, r0, #9
 8000aa8:	bf06      	itte	eq
 8000aaa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aae:	ea90 0f01 	teqeq	r0, r1
 8000ab2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_ui2f>:
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e004      	b.n	8000ac8 <__aeabi_i2f+0x8>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_i2f>:
 8000ac0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ac4:	bf48      	it	mi
 8000ac6:	4240      	negmi	r0, r0
 8000ac8:	ea5f 0c00 	movs.w	ip, r0
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	e01c      	b.n	8000b16 <__aeabi_l2f+0x2a>

08000adc <__aeabi_ul2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	e00a      	b.n	8000b00 <__aeabi_l2f+0x14>
 8000aea:	bf00      	nop

08000aec <__aeabi_l2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000af8:	d502      	bpl.n	8000b00 <__aeabi_l2f+0x14>
 8000afa:	4240      	negs	r0, r0
 8000afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b00:	ea5f 0c01 	movs.w	ip, r1
 8000b04:	bf02      	ittt	eq
 8000b06:	4684      	moveq	ip, r0
 8000b08:	4601      	moveq	r1, r0
 8000b0a:	2000      	moveq	r0, #0
 8000b0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b10:	bf08      	it	eq
 8000b12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b1a:	fabc f28c 	clz	r2, ip
 8000b1e:	3a08      	subs	r2, #8
 8000b20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b24:	db10      	blt.n	8000b48 <__aeabi_l2f+0x5c>
 8000b26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b38:	fa20 f202 	lsr.w	r2, r0, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f102 0220 	add.w	r2, r2, #32
 8000b4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b50:	f1c2 0220 	rsb	r2, r2, #32
 8000b54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b58:	fa21 f202 	lsr.w	r2, r1, r2
 8000b5c:	eb43 0002 	adc.w	r0, r3, r2
 8000b60:	bf08      	it	eq
 8000b62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bba:	2afd      	cmp	r2, #253	; 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	; 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	; 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	; 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <__aeabi_f2iz>:
 8000e08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e10:	d30f      	bcc.n	8000e32 <__aeabi_f2iz+0x2a>
 8000e12:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1a:	d90d      	bls.n	8000e38 <__aeabi_f2iz+0x30>
 8000e1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e24:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e28:	fa23 f002 	lsr.w	r0, r3, r2
 8000e2c:	bf18      	it	ne
 8000e2e:	4240      	negne	r0, r0
 8000e30:	4770      	bx	lr
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	4770      	bx	lr
 8000e38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e3c:	d101      	bne.n	8000e42 <__aeabi_f2iz+0x3a>
 8000e3e:	0242      	lsls	r2, r0, #9
 8000e40:	d105      	bne.n	8000e4e <__aeabi_f2iz+0x46>
 8000e42:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e46:	bf08      	it	eq
 8000e48:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f04f 0000 	mov.w	r0, #0
 8000e52:	4770      	bx	lr

08000e54 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000e54:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 8000e56:	f242 734d 	movw	r3, #10061	; 0x274d
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000e60:	4798      	blx	r3
 8000e62:	bd08      	pop	{r3, pc}

08000e64 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000e64:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <main+0x2c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000e68:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 8000e6a:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000e6c:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000e6e:	4809      	ldr	r0, [pc, #36]	; (8000e94 <main+0x30>)
 8000e70:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000e72:	4d09      	ldr	r5, [pc, #36]	; (8000e98 <main+0x34>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <main+0x38>)
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	9400      	str	r4, [sp, #0]
 8000e80:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );		
 8000e82:	4620      	mov	r0, r4
 8000e84:	4906      	ldr	r1, [pc, #24]	; (8000ea0 <main+0x3c>)
 8000e86:	4788      	blx	r1
	
	Main_Init();

	//-- 명령어 처리
	//  
	Ap_GLcdMenu_ExeCmd();    
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <main+0x40>)
 8000e8a:	4790      	blx	r2
 8000e8c:	e7fe      	b.n	8000e8c <main+0x28>
 8000e8e:	bf00      	nop
 8000e90:	080023f5 	.word	0x080023f5
 8000e94:	08000ea9 	.word	0x08000ea9
 8000e98:	08002bcd 	.word	0x08002bcd
 8000e9c:	08000e55 	.word	0x08000e55
 8000ea0:	08002bed 	.word	0x08002bed
 8000ea4:	08000f81 	.word	0x08000f81

08000ea8 <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <Ap_GLcdMenu_ShowMenu>:
	 WORK    : 
	 ARG     : void
	 RET     : void
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
 8000eac:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
 8000eae:	f246 3060 	movw	r0, #25440	; 0x6360
 8000eb2:	f641 5485 	movw	r4, #7557	; 0x1d85
	Lb_printf("*******************************************************\n");
 8000eb6:	f246 3564 	movw	r5, #25444	; 0x6364
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 8000eba:	f6c0 0400 	movt	r4, #2048	; 0x800
	Lb_printf("*******************************************************\n");
 8000ebe:	f6c0 0500 	movt	r5, #2048	; 0x800
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 8000ec2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ec6:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000ec8:	4628      	mov	r0, r5
 8000eca:	47a0      	blx	r4
	Lb_printf("                      MPU6050                          \n");
 8000ecc:	f246 30a0 	movw	r0, #25504	; 0x63a0
 8000ed0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ed4:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	47a0      	blx	r4
	Lb_printf("* 1. LCD Clear                                        *\n");
 8000eda:	f246 30dc 	movw	r0, #25564	; 0x63dc
 8000ede:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ee2:	47a0      	blx	r4
	Lb_printf("* 2. Show Acc                                         *\n");
 8000ee4:	f246 4018 	movw	r0, #25624	; 0x6418
 8000ee8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000eec:	47a0      	blx	r4
	Lb_printf("* 3. Show MPU6050 Regs                                *\n");
 8000eee:	f246 4054 	movw	r0, #25684	; 0x6454
 8000ef2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ef6:	47a0      	blx	r4
	Lb_printf("* 4. Sonic                                            *\n");
 8000ef8:	f246 4090 	movw	r0, #25744	; 0x6490
 8000efc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f00:	47a0      	blx	r4
	Lb_printf("* 5. Show Compass                                     *\n");
 8000f02:	f246 40cc 	movw	r0, #25804	; 0x64cc
 8000f06:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f0a:	47a0      	blx	r4
	Lb_printf("* 6. Show HMC5883 Regs                                *\n");
 8000f0c:	f246 5008 	movw	r0, #25864	; 0x6508
 8000f10:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f14:	47a0      	blx	r4
	Lb_printf("* 7. Show IMU                                         *\n");
 8000f16:	f246 5044 	movw	r0, #25924	; 0x6544
 8000f1a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f1e:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 8000f20:	f246 5080 	movw	r0, #25984	; 0x6580
 8000f24:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f28:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 8000f2a:	f246 50bc 	movw	r0, #26044	; 0x65bc
 8000f2e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f32:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 8000f34:	f246 50f8 	movw	r0, #26104	; 0x65f8
 8000f38:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f3c:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000f3e:	4628      	mov	r0, r5
 8000f40:	47a0      	blx	r4
	Lb_printf("\n");
 8000f42:	f246 707c 	movw	r0, #26492	; 0x677c
 8000f46:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f4a:	47a0      	blx	r4
 8000f4c:	bd38      	pop	{r3, r4, r5, pc}
 8000f4e:	bf00      	nop

08000f50 <Ap_GLcdMenu_GetCmd>:
	 ARG     : void
	 RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_GetCmd(void)
{
 8000f50:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 8000f52:	f246 6034 	movw	r0, #26164	; 0x6634
 8000f56:	f641 5485 	movw	r4, #7557	; 0x1d85
 8000f5a:	f6c0 0400 	movt	r4, #2048	; 0x800
 8000f5e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f62:	47a0      	blx	r4

	key=get_byte();
 8000f64:	f242 634d 	movw	r3, #9805	; 0x264d
 8000f68:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f6c:	4798      	blx	r3
 8000f6e:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 8000f70:	f246 707c 	movw	r0, #26492	; 0x677c
 8000f74:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f78:	47a0      	blx	r4
	
	return key;
}
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	bd38      	pop	{r3, r4, r5, pc}
 8000f7e:	bf00      	nop

08000f80 <Ap_GLcdMenu_ExeCmd>:
	 ARG     : void
	 RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 8000f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}



	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		
 8000f84:	f640 61ad 	movw	r1, #3757	; 0xead
	 ARG     : void
	 RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 8000f88:	b09b      	sub	sp, #108	; 0x6c



	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		
 8000f8a:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000f8e:	4788      	blx	r1

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
 8000f90:	2000      	movs	r0, #0
 8000f92:	4601      	mov	r1, r0
 8000f94:	4a98      	ldr	r2, [pc, #608]	; (80011f8 <Ap_GLcdMenu_ExeCmd+0x278>)
 8000f96:	4b99      	ldr	r3, [pc, #612]	; (80011fc <Ap_GLcdMenu_ExeCmd+0x27c>)
		Hw_N5110G_DrawRequest();
 8000f98:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8001254 <Ap_GLcdMenu_ExeCmd+0x2d4>

	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
 8000f9c:	4798      	blx	r3
		Hw_N5110G_DrawRequest();
 8000f9e:	47c0      	blx	r8
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8000fa0:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 8001258 <Ap_GLcdMenu_ExeCmd+0x2d8>
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8000fa4:	4c96      	ldr	r4, [pc, #600]	; (8001200 <Ap_GLcdMenu_ExeCmd+0x280>)

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
		Hw_N5110G_DrawRequest();
	}

	while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 8000fa6:	f640 7051 	movw	r0, #3921	; 0xf51
 8000faa:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000fae:	4780      	blx	r0
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	f000 82d0 	beq.w	8001558 <Ap_GLcdMenu_ExeCmd+0x5d8>
	{
		switch(key)
 8000fb8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8000fbc:	293c      	cmp	r1, #60	; 0x3c
 8000fbe:	d8f2      	bhi.n	8000fa6 <Ap_GLcdMenu_ExeCmd+0x26>
 8000fc0:	a301      	add	r3, pc, #4	; (adr r3, 8000fc8 <Ap_GLcdMenu_ExeCmd+0x48>)
 8000fc2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8000fc6:	bf00      	nop
 8000fc8:	080014e3 	.word	0x080014e3
 8000fcc:	08001431 	.word	0x08001431
 8000fd0:	080013ad 	.word	0x080013ad
 8000fd4:	08001389 	.word	0x08001389
 8000fd8:	08001349 	.word	0x08001349
 8000fdc:	0800125d 	.word	0x0800125d
 8000fe0:	08001181 	.word	0x08001181
 8000fe4:	080010bd 	.word	0x080010bd
 8000fe8:	08000fa7 	.word	0x08000fa7
 8000fec:	08000fa7 	.word	0x08000fa7
 8000ff0:	08000fa7 	.word	0x08000fa7
 8000ff4:	08000fa7 	.word	0x08000fa7
 8000ff8:	08000fa7 	.word	0x08000fa7
 8000ffc:	08000fa7 	.word	0x08000fa7
 8001000:	08000fa7 	.word	0x08000fa7
 8001004:	08000fa7 	.word	0x08000fa7
 8001008:	08000fa7 	.word	0x08000fa7
 800100c:	08000fa7 	.word	0x08000fa7
 8001010:	08000fa7 	.word	0x08000fa7
 8001014:	08000fa7 	.word	0x08000fa7
 8001018:	08000fa7 	.word	0x08000fa7
 800101c:	08000fa7 	.word	0x08000fa7
 8001020:	08000fa7 	.word	0x08000fa7
 8001024:	08000fa7 	.word	0x08000fa7
 8001028:	08000fa7 	.word	0x08000fa7
 800102c:	08000fa7 	.word	0x08000fa7
 8001030:	08000fa7 	.word	0x08000fa7
 8001034:	08000fa7 	.word	0x08000fa7
 8001038:	080014ed 	.word	0x080014ed
 800103c:	08000fa7 	.word	0x08000fa7
 8001040:	08000fa7 	.word	0x08000fa7
 8001044:	08000fa7 	.word	0x08000fa7
 8001048:	08000fa7 	.word	0x08000fa7
 800104c:	08000fa7 	.word	0x08000fa7
 8001050:	08000fa7 	.word	0x08000fa7
 8001054:	08000fa7 	.word	0x08000fa7
 8001058:	08000fa7 	.word	0x08000fa7
 800105c:	08000fa7 	.word	0x08000fa7
 8001060:	08000fa7 	.word	0x08000fa7
 8001064:	08000fa7 	.word	0x08000fa7
 8001068:	08000fa7 	.word	0x08000fa7
 800106c:	08000fa7 	.word	0x08000fa7
 8001070:	08000fa7 	.word	0x08000fa7
 8001074:	08000fa7 	.word	0x08000fa7
 8001078:	08000fa7 	.word	0x08000fa7
 800107c:	08000fa7 	.word	0x08000fa7
 8001080:	08000fa7 	.word	0x08000fa7
 8001084:	08000fa7 	.word	0x08000fa7
 8001088:	08000fa7 	.word	0x08000fa7
 800108c:	08000fa7 	.word	0x08000fa7
 8001090:	08000fa7 	.word	0x08000fa7
 8001094:	08000fa7 	.word	0x08000fa7
 8001098:	08000fa7 	.word	0x08000fa7
 800109c:	08000fa7 	.word	0x08000fa7
 80010a0:	08000fa7 	.word	0x08000fa7
 80010a4:	08000fa7 	.word	0x08000fa7
 80010a8:	08000fa7 	.word	0x08000fa7
 80010ac:	08000fa7 	.word	0x08000fa7
 80010b0:	08000fa7 	.word	0x08000fa7
 80010b4:	08000fa7 	.word	0x08000fa7
 80010b8:	080014ed 	.word	0x080014ed
 80010bc:	f8df a168 	ldr.w	sl, [pc, #360]	; 8001228 <Ap_GLcdMenu_ExeCmd+0x2a8>
			   break;  

		   case '8':
				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 80010c0:	4f50      	ldr	r7, [pc, #320]	; (8001204 <Ap_GLcdMenu_ExeCmd+0x284>)
 80010c2:	e016      	b.n	80010f2 <Ap_GLcdMenu_ExeCmd+0x172>

					x = HW_N5110G_WIDTH/2  - (IMU_Data.X_Angle-180);
					y = HW_N5110G_HEIGHT/2 - (IMU_Data.Y_Angle-180);

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
					if( x < 3 )                x = 3;
 80010c4:	2603      	movs	r6, #3
 80010c6:	2a02      	cmp	r2, #2
 80010c8:	f300 8249 	bgt.w	800155e <Ap_GLcdMenu_ExeCmd+0x5de>
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 80010cc:	b201      	sxth	r1, r0
 80010ce:	292c      	cmp	r1, #44	; 0x2c
 80010d0:	dc54      	bgt.n	800117c <Ap_GLcdMenu_ExeCmd+0x1fc>
					if( y < 3 )                 y = 3;
 80010d2:	2503      	movs	r5, #3
 80010d4:	2902      	cmp	r1, #2
 80010d6:	f300 8245 	bgt.w	8001564 <Ap_GLcdMenu_ExeCmd+0x5e4>

					Hw_N5110G_Clear();                                  
 80010da:	484b      	ldr	r0, [pc, #300]	; (8001208 <Ap_GLcdMenu_ExeCmd+0x288>)
 80010dc:	4780      	blx	r0
					Hw_N5110G_DrawCircle(  x , y, 3, 0 );                           
 80010de:	4629      	mov	r1, r5
 80010e0:	2300      	movs	r3, #0
 80010e2:	4630      	mov	r0, r6
 80010e4:	2203      	movs	r2, #3
 80010e6:	4d49      	ldr	r5, [pc, #292]	; (800120c <Ap_GLcdMenu_ExeCmd+0x28c>)
 80010e8:	47a8      	blx	r5
					Hw_N5110G_DrawRequest();
 80010ea:	47c0      	blx	r8

					Hw_Wait_ms(10);
 80010ec:	200a      	movs	r0, #10
 80010ee:	4b48      	ldr	r3, [pc, #288]	; (8001210 <Ap_GLcdMenu_ExeCmd+0x290>)
 80010f0:	4798      	blx	r3
					Hw_Wait_ms(100);
				}		   		
			   break;  

		   case '8':
				while( get_byte_check() == 0 )
 80010f2:	47d0      	blx	sl
 80010f4:	2800      	cmp	r0, #0
 80010f6:	f47f af56 	bne.w	8000fa6 <Ap_GLcdMenu_ExeCmd+0x26>
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 80010fa:	47b8      	blx	r7

					Ret = Hw_IMU_Update( &IMU_Data, 10 );
 80010fc:	f244 1669 	movw	r6, #16745	; 0x4169
 8001100:	210a      	movs	r1, #10
			   break;  

		   case '8':
				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8001102:	4605      	mov	r5, r0

					Ret = Hw_IMU_Update( &IMU_Data, 10 );
 8001104:	f6c0 0600 	movt	r6, #2048	; 0x800
 8001108:	a80b      	add	r0, sp, #44	; 0x2c
 800110a:	47b0      	blx	r6

					Lb_printf("Time %05d ", (u16)(Hw_Timer_Get_u16Count_Usec() - TimeStart) );
 800110c:	47b8      	blx	r7
 800110e:	1b43      	subs	r3, r0, r5
 8001110:	b299      	uxth	r1, r3
 8001112:	4840      	ldr	r0, [pc, #256]	; (8001214 <Ap_GLcdMenu_ExeCmd+0x294>)
 8001114:	47a0      	blx	r4

					Lb_printf("AngX %03d %03d  ", (s16)IMU_Data.X_AccAngle, (s16)IMU_Data.X_Angle );
 8001116:	4d40      	ldr	r5, [pc, #256]	; (8001218 <Ap_GLcdMenu_ExeCmd+0x298>)
 8001118:	9811      	ldr	r0, [sp, #68]	; 0x44
 800111a:	47a8      	blx	r5
 800111c:	b206      	sxth	r6, r0
 800111e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001120:	47a8      	blx	r5
 8001122:	4631      	mov	r1, r6
 8001124:	b202      	sxth	r2, r0
 8001126:	483d      	ldr	r0, [pc, #244]	; (800121c <Ap_GLcdMenu_ExeCmd+0x29c>)
 8001128:	47a0      	blx	r4
					Lb_printf("AngY %03d %03d\n", (s16)IMU_Data.Y_AccAngle, (s16)IMU_Data.Y_Angle );
 800112a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800112c:	47a8      	blx	r5
 800112e:	b206      	sxth	r6, r0
 8001130:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001132:	47a8      	blx	r5
 8001134:	4631      	mov	r1, r6
 8001136:	b202      	sxth	r2, r0
 8001138:	4839      	ldr	r0, [pc, #228]	; (8001220 <Ap_GLcdMenu_ExeCmd+0x2a0>)
 800113a:	47a0      	blx	r4

					x = HW_N5110G_WIDTH/2  - (IMU_Data.X_Angle-180);
 800113c:	2100      	movs	r1, #0
 800113e:	4e39      	ldr	r6, [pc, #228]	; (8001224 <Ap_GLcdMenu_ExeCmd+0x2a4>)
 8001140:	f2c4 3134 	movt	r1, #17204	; 0x4334
 8001144:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001146:	47b0      	blx	r6
 8001148:	4601      	mov	r1, r0
 800114a:	2000      	movs	r0, #0
 800114c:	f2c4 2028 	movt	r0, #16936	; 0x4228
 8001150:	47b0      	blx	r6
 8001152:	47a8      	blx	r5
					y = HW_N5110G_HEIGHT/2 - (IMU_Data.Y_Angle-180);
 8001154:	2100      	movs	r1, #0
					Lb_printf("Time %05d ", (u16)(Hw_Timer_Get_u16Count_Usec() - TimeStart) );

					Lb_printf("AngX %03d %03d  ", (s16)IMU_Data.X_AccAngle, (s16)IMU_Data.X_Angle );
					Lb_printf("AngY %03d %03d\n", (s16)IMU_Data.Y_AccAngle, (s16)IMU_Data.Y_Angle );

					x = HW_N5110G_WIDTH/2  - (IMU_Data.X_Angle-180);
 8001156:	4683      	mov	fp, r0
					y = HW_N5110G_HEIGHT/2 - (IMU_Data.Y_Angle-180);
 8001158:	f2c4 3134 	movt	r1, #17204	; 0x4334
 800115c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800115e:	47b0      	blx	r6
 8001160:	4601      	mov	r1, r0
 8001162:	2000      	movs	r0, #0
 8001164:	f2c4 10c0 	movt	r0, #16832	; 0x41c0
 8001168:	47b0      	blx	r6
 800116a:	47a8      	blx	r5

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 800116c:	fa0f f28b 	sxth.w	r2, fp
 8001170:	2a50      	cmp	r2, #80	; 0x50
 8001172:	dda7      	ble.n	80010c4 <Ap_GLcdMenu_ExeCmd+0x144>
					if( x < 3 )                x = 3;
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 8001174:	b201      	sxth	r1, r0
					Lb_printf("AngY %03d %03d\n", (s16)IMU_Data.Y_AccAngle, (s16)IMU_Data.Y_Angle );

					x = HW_N5110G_WIDTH/2  - (IMU_Data.X_Angle-180);
					y = HW_N5110G_HEIGHT/2 - (IMU_Data.Y_Angle-180);

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 8001176:	2650      	movs	r6, #80	; 0x50
					if( x < 3 )                x = 3;
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 8001178:	292c      	cmp	r1, #44	; 0x2c
 800117a:	ddaa      	ble.n	80010d2 <Ap_GLcdMenu_ExeCmd+0x152>
 800117c:	252c      	movs	r5, #44	; 0x2c
 800117e:	e7ac      	b.n	80010da <Ap_GLcdMenu_ExeCmd+0x15a>
 8001180:	4e29      	ldr	r6, [pc, #164]	; (8001228 <Ap_GLcdMenu_ExeCmd+0x2a8>)

		   case '7':

				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8001182:	4d20      	ldr	r5, [pc, #128]	; (8001204 <Ap_GLcdMenu_ExeCmd+0x284>)

					Ret = Hw_IMU_GetData( &IMU_Data );
 8001184:	4f29      	ldr	r7, [pc, #164]	; (800122c <Ap_GLcdMenu_ExeCmd+0x2ac>)
 8001186:	e033      	b.n	80011f0 <Ap_GLcdMenu_ExeCmd+0x270>

		   case '7':

				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8001188:	47a8      	blx	r5
 800118a:	4682      	mov	sl, r0

					Ret = Hw_IMU_GetData( &IMU_Data );
 800118c:	a80b      	add	r0, sp, #44	; 0x2c
 800118e:	47b8      	blx	r7

					Lb_printf("Time %d ", Hw_Timer_Get_u16Count_Usec() - TimeStart );
 8001190:	47a8      	blx	r5
 8001192:	ebca 0100 	rsb	r1, sl, r0
 8001196:	4826      	ldr	r0, [pc, #152]	; (8001230 <Ap_GLcdMenu_ExeCmd+0x2b0>)
 8001198:	47a0      	blx	r4

					Lb_printf("EN %d ", IMU_Data.Enable_Acc );
 800119a:	4826      	ldr	r0, [pc, #152]	; (8001234 <Ap_GLcdMenu_ExeCmd+0x2b4>)
 800119c:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 80011a0:	47a0      	blx	r4
					Lb_printf("AX %d ", IMU_Data.X_Acc );
 80011a2:	4825      	ldr	r0, [pc, #148]	; (8001238 <Ap_GLcdMenu_ExeCmd+0x2b8>)
 80011a4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80011a8:	47a0      	blx	r4
					Lb_printf("AY %d ", IMU_Data.Y_Acc );
 80011aa:	4824      	ldr	r0, [pc, #144]	; (800123c <Ap_GLcdMenu_ExeCmd+0x2bc>)
 80011ac:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 80011b0:	47a0      	blx	r4
					Lb_printf("AZ %d ", IMU_Data.Z_Acc );
 80011b2:	4823      	ldr	r0, [pc, #140]	; (8001240 <Ap_GLcdMenu_ExeCmd+0x2c0>)
 80011b4:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 80011b8:	47a0      	blx	r4

					Lb_printf("EN %d ", IMU_Data.Enable_Temp );
 80011ba:	481e      	ldr	r0, [pc, #120]	; (8001234 <Ap_GLcdMenu_ExeCmd+0x2b4>)
 80011bc:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 80011c0:	47a0      	blx	r4
					Lb_printf("TE %d ", IMU_Data.Temp );
 80011c2:	4820      	ldr	r0, [pc, #128]	; (8001244 <Ap_GLcdMenu_ExeCmd+0x2c4>)
 80011c4:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 80011c8:	47a0      	blx	r4

					Lb_printf("EN %d ", IMU_Data.Enable_Compass );
 80011ca:	481a      	ldr	r0, [pc, #104]	; (8001234 <Ap_GLcdMenu_ExeCmd+0x2b4>)
 80011cc:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
 80011d0:	47a0      	blx	r4
					Lb_printf("CX %d ", IMU_Data.X_Compass );
 80011d2:	481d      	ldr	r0, [pc, #116]	; (8001248 <Ap_GLcdMenu_ExeCmd+0x2c8>)
 80011d4:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 80011d8:	47a0      	blx	r4
					Lb_printf("CY %d ", IMU_Data.Y_Compass );
 80011da:	481c      	ldr	r0, [pc, #112]	; (800124c <Ap_GLcdMenu_ExeCmd+0x2cc>)
 80011dc:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80011e0:	47a0      	blx	r4
					Lb_printf("CZ %d\n", IMU_Data.Z_Compass );
 80011e2:	481b      	ldr	r0, [pc, #108]	; (8001250 <Ap_GLcdMenu_ExeCmd+0x2d0>)
 80011e4:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80011e8:	47a0      	blx	r4

					Hw_Wait_ms(100);
 80011ea:	2064      	movs	r0, #100	; 0x64
 80011ec:	4a08      	ldr	r2, [pc, #32]	; (8001210 <Ap_GLcdMenu_ExeCmd+0x290>)
 80011ee:	4790      	blx	r2
		   		}
			   break;  

		   case '7':

				while( get_byte_check() == 0 )
 80011f0:	47b0      	blx	r6
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d0c8      	beq.n	8001188 <Ap_GLcdMenu_ExeCmd+0x208>
 80011f6:	e6d6      	b.n	8000fa6 <Ap_GLcdMenu_ExeCmd+0x26>
 80011f8:	08006638 	.word	0x08006638
 80011fc:	080031b9 	.word	0x080031b9
 8001200:	08001d85 	.word	0x08001d85
 8001204:	08002c15 	.word	0x08002c15
 8001208:	08003069 	.word	0x08003069
 800120c:	08003229 	.word	0x08003229
 8001210:	080024cd 	.word	0x080024cd
 8001214:	080066f4 	.word	0x080066f4
 8001218:	08000e09 	.word	0x08000e09
 800121c:	08006700 	.word	0x08006700
 8001220:	08006714 	.word	0x08006714
 8001224:	08000955 	.word	0x08000955
 8001228:	0800265d 	.word	0x0800265d
 800122c:	08004031 	.word	0x08004031
 8001230:	08006654 	.word	0x08006654
 8001234:	080066dc 	.word	0x080066dc
 8001238:	08006660 	.word	0x08006660
 800123c:	08006668 	.word	0x08006668
 8001240:	08006670 	.word	0x08006670
 8001244:	080066e4 	.word	0x080066e4
 8001248:	080066a0 	.word	0x080066a0
 800124c:	080066a8 	.word	0x080066a8
 8001250:	080066ec 	.word	0x080066ec
 8001254:	08003219 	.word	0x08003219
 8001258:	08003a91 	.word	0x08003a91
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800125c:	a906      	add	r1, sp, #24
 800125e:	2000      	movs	r0, #0
 8001260:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001262:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001266:	2200      	movs	r2, #0
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001268:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800126a:	48a5      	ldr	r0, [pc, #660]	; (8001500 <Ap_GLcdMenu_ExeCmd+0x580>)
 800126c:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800126e:	a906      	add	r1, sp, #24
 8001270:	2001      	movs	r0, #1
 8001272:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001274:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001278:	2201      	movs	r2, #1
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800127a:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800127c:	48a0      	ldr	r0, [pc, #640]	; (8001500 <Ap_GLcdMenu_ExeCmd+0x580>)
 800127e:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001280:	a906      	add	r1, sp, #24
 8001282:	2002      	movs	r0, #2
 8001284:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001286:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800128a:	2202      	movs	r2, #2
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800128c:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800128e:	489c      	ldr	r0, [pc, #624]	; (8001500 <Ap_GLcdMenu_ExeCmd+0x580>)
 8001290:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001292:	a906      	add	r1, sp, #24
 8001294:	2003      	movs	r0, #3
 8001296:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001298:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800129c:	2203      	movs	r2, #3
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800129e:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80012a0:	4897      	ldr	r0, [pc, #604]	; (8001500 <Ap_GLcdMenu_ExeCmd+0x580>)
 80012a2:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80012a4:	a906      	add	r1, sp, #24
 80012a6:	2004      	movs	r0, #4
 80012a8:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80012aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80012ae:	2204      	movs	r2, #4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80012b0:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80012b2:	4893      	ldr	r0, [pc, #588]	; (8001500 <Ap_GLcdMenu_ExeCmd+0x580>)
 80012b4:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80012b6:	a906      	add	r1, sp, #24
 80012b8:	2005      	movs	r0, #5
 80012ba:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80012bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80012c0:	2205      	movs	r2, #5
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80012c2:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80012c4:	488e      	ldr	r0, [pc, #568]	; (8001500 <Ap_GLcdMenu_ExeCmd+0x580>)
 80012c6:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80012c8:	a906      	add	r1, sp, #24
 80012ca:	2006      	movs	r0, #6
 80012cc:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80012ce:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80012d2:	2206      	movs	r2, #6
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80012d4:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80012d6:	488a      	ldr	r0, [pc, #552]	; (8001500 <Ap_GLcdMenu_ExeCmd+0x580>)
 80012d8:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80012da:	a906      	add	r1, sp, #24
 80012dc:	2007      	movs	r0, #7
 80012de:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80012e0:	f89d 3018 	ldrb.w	r3, [sp, #24]
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80012e4:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80012e6:	2207      	movs	r2, #7
 80012e8:	4885      	ldr	r0, [pc, #532]	; (8001500 <Ap_GLcdMenu_ExeCmd+0x580>)
 80012ea:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80012ec:	a906      	add	r1, sp, #24
 80012ee:	2008      	movs	r0, #8
 80012f0:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80012f2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80012f6:	2208      	movs	r2, #8
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80012f8:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 80012fa:	4881      	ldr	r0, [pc, #516]	; (8001500 <Ap_GLcdMenu_ExeCmd+0x580>)
 80012fc:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 80012fe:	a906      	add	r1, sp, #24
 8001300:	2009      	movs	r0, #9
 8001302:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001304:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001308:	2209      	movs	r2, #9
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800130a:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800130c:	487c      	ldr	r0, [pc, #496]	; (8001500 <Ap_GLcdMenu_ExeCmd+0x580>)
 800130e:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001310:	a906      	add	r1, sp, #24
 8001312:	200a      	movs	r0, #10
 8001314:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001316:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800131a:	220a      	movs	r2, #10
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800131c:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800131e:	4878      	ldr	r0, [pc, #480]	; (8001500 <Ap_GLcdMenu_ExeCmd+0x580>)
 8001320:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001322:	a906      	add	r1, sp, #24
 8001324:	200b      	movs	r0, #11
 8001326:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001328:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800132c:	220b      	movs	r2, #11
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800132e:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 8001330:	4873      	ldr	r0, [pc, #460]	; (8001500 <Ap_GLcdMenu_ExeCmd+0x580>)
 8001332:	47a0      	blx	r4
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 8001334:	a906      	add	r1, sp, #24
 8001336:	200c      	movs	r0, #12
 8001338:	47c8      	blx	r9
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800133a:	220c      	movs	r2, #12
			   break;  

		   case '6':
		   		for( i=0; i<13; i++ )
		   		{
			   		Ret = Hw_I2C_IMU_HMC5883_ReadReg( i, I2C_Data );
 800133c:	4601      	mov	r1, r0
			   		Lb_printf("Ret:%d Addr 0x%02x Data :0x%02x\n", Ret, i, I2C_Data[0] );
 800133e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001342:	486f      	ldr	r0, [pc, #444]	; (8001500 <Ap_GLcdMenu_ExeCmd+0x580>)
 8001344:	47a0      	blx	r4
 8001346:	e62e      	b.n	8000fa6 <Ap_GLcdMenu_ExeCmd+0x26>
 8001348:	4e6e      	ldr	r6, [pc, #440]	; (8001504 <Ap_GLcdMenu_ExeCmd+0x584>)
			   break;  

		   case '5':
				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 800134a:	4d6f      	ldr	r5, [pc, #444]	; (8001508 <Ap_GLcdMenu_ExeCmd+0x588>)

					Ret = Hw_HMC5883_GetData( &HMC5883_Data );
 800134c:	4f6f      	ldr	r7, [pc, #444]	; (800150c <Ap_GLcdMenu_ExeCmd+0x58c>)
 800134e:	e017      	b.n	8001380 <Ap_GLcdMenu_ExeCmd+0x400>
			   break;  

		   case '5':
				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8001350:	47a8      	blx	r5
 8001352:	4682      	mov	sl, r0

					Ret = Hw_HMC5883_GetData( &HMC5883_Data );
 8001354:	4668      	mov	r0, sp
 8001356:	47b8      	blx	r7

					Lb_printf("Time %d ", Hw_Timer_Get_u16Count_Usec() - TimeStart );
 8001358:	47a8      	blx	r5
 800135a:	ebca 0100 	rsb	r1, sl, r0
 800135e:	486c      	ldr	r0, [pc, #432]	; (8001510 <Ap_GLcdMenu_ExeCmd+0x590>)
 8001360:	47a0      	blx	r4

					Lb_printf("CX %d ", HMC5883_Data.X_Compass );
 8001362:	486c      	ldr	r0, [pc, #432]	; (8001514 <Ap_GLcdMenu_ExeCmd+0x594>)
 8001364:	f9bd 1000 	ldrsh.w	r1, [sp]
 8001368:	47a0      	blx	r4
					Lb_printf("CY %d ", HMC5883_Data.Y_Compass );
 800136a:	486b      	ldr	r0, [pc, #428]	; (8001518 <Ap_GLcdMenu_ExeCmd+0x598>)
 800136c:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8001370:	47a0      	blx	r4
					Lb_printf("CZ %d \n", HMC5883_Data.Z_Compass );
 8001372:	486a      	ldr	r0, [pc, #424]	; (800151c <Ap_GLcdMenu_ExeCmd+0x59c>)
 8001374:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001378:	47a0      	blx	r4

					Hw_Wait_ms(100);
 800137a:	2064      	movs	r0, #100	; 0x64
 800137c:	4968      	ldr	r1, [pc, #416]	; (8001520 <Ap_GLcdMenu_ExeCmd+0x5a0>)
 800137e:	4788      	blx	r1
					Hw_Wait_ms(100);
				}            	
			   break;  

		   case '5':
				while( get_byte_check() == 0 )
 8001380:	47b0      	blx	r6
 8001382:	2800      	cmp	r0, #0
 8001384:	d0e4      	beq.n	8001350 <Ap_GLcdMenu_ExeCmd+0x3d0>
 8001386:	e60e      	b.n	8000fa6 <Ap_GLcdMenu_ExeCmd+0x26>
 8001388:	4e5e      	ldr	r6, [pc, #376]	; (8001504 <Ap_GLcdMenu_ExeCmd+0x584>)
			   break; 

		   case '4':
				while( get_byte_check() == 0 )
				{
					Lb_printf("L %d  R %d\n", Hw_Sonic_GetDistanceMM(0), Hw_Sonic_GetDistanceMM(1) );
 800138a:	4d66      	ldr	r5, [pc, #408]	; (8001524 <Ap_GLcdMenu_ExeCmd+0x5a4>)
					Hw_Wait_ms(100);
 800138c:	4f64      	ldr	r7, [pc, #400]	; (8001520 <Ap_GLcdMenu_ExeCmd+0x5a0>)
 800138e:	e009      	b.n	80013a4 <Ap_GLcdMenu_ExeCmd+0x424>
			   break; 

		   case '4':
				while( get_byte_check() == 0 )
				{
					Lb_printf("L %d  R %d\n", Hw_Sonic_GetDistanceMM(0), Hw_Sonic_GetDistanceMM(1) );
 8001390:	47a8      	blx	r5
 8001392:	4682      	mov	sl, r0
 8001394:	2001      	movs	r0, #1
 8001396:	47a8      	blx	r5
 8001398:	4651      	mov	r1, sl
 800139a:	4602      	mov	r2, r0
 800139c:	4862      	ldr	r0, [pc, #392]	; (8001528 <Ap_GLcdMenu_ExeCmd+0x5a8>)
 800139e:	47a0      	blx	r4
					Hw_Wait_ms(100);
 80013a0:	2064      	movs	r0, #100	; 0x64
 80013a2:	47b8      	blx	r7
					Lb_printf("%02x ", I2C_Data[0]);
				}           						
			   break; 

		   case '4':
				while( get_byte_check() == 0 )
 80013a4:	47b0      	blx	r6
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d0f2      	beq.n	8001390 <Ap_GLcdMenu_ExeCmd+0x410>
 80013aa:	e5fc      	b.n	8000fa6 <Ap_GLcdMenu_ExeCmd+0x26>
		Hw_N5110G_DrawRequest();
	}

	while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
	{
		switch(key)
 80013ac:	f04f 0a00 	mov.w	sl, #0
				break;

		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 80013b0:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 80013b4:	4f5d      	ldr	r7, [pc, #372]	; (800152c <Ap_GLcdMenu_ExeCmd+0x5ac>)
 80013b6:	f6cc 45cc 	movt	r5, #52428	; 0xcccc

					I2C_Data[0] = 0x00;
 80013ba:	4656      	mov	r6, sl
 80013bc:	e026      	b.n	800140c <Ap_GLcdMenu_ExeCmd+0x48c>
					Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 80013be:	a906      	add	r1, sp, #24
 80013c0:	fa5f f08a 	uxtb.w	r0, sl
		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);

					I2C_Data[0] = 0x00;
 80013c4:	f88d 6018 	strb.w	r6, [sp, #24]
					Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 80013c8:	47b8      	blx	r7
					Lb_printf("%02x ", I2C_Data[0]);
 80013ca:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80013ce:	4858      	ldr	r0, [pc, #352]	; (8001530 <Ap_GLcdMenu_ExeCmd+0x5b0>)
 80013d0:	47a0      	blx	r4
				break;

		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 80013d2:	fa1f f08b 	uxth.w	r0, fp
 80013d6:	fba5 1200 	umull	r1, r2, r5, r0
 80013da:	08d1      	lsrs	r1, r2, #3
 80013dc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80013e0:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 80013e4:	b282      	uxth	r2, r0
 80013e6:	2a00      	cmp	r2, #0
 80013e8:	f000 8086 	beq.w	80014f8 <Ap_GLcdMenu_ExeCmd+0x578>

					I2C_Data[0] = 0x00;
					Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 80013ec:	a906      	add	r1, sp, #24
 80013ee:	fa5f f08b 	uxtb.w	r0, fp
		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);

					I2C_Data[0] = 0x00;
 80013f2:	f88d 6018 	strb.w	r6, [sp, #24]
 80013f6:	f10b 0a01 	add.w	sl, fp, #1
					Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 80013fa:	47b8      	blx	r7
					Lb_printf("%02x ", I2C_Data[0]);
 80013fc:	484c      	ldr	r0, [pc, #304]	; (8001530 <Ap_GLcdMenu_ExeCmd+0x5b0>)
 80013fe:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8001402:	47a0      	blx	r4
				}
				
				break;

		   case '3':
				for( i=0; i<=0x75; i++ )
 8001404:	f1ba 0f76 	cmp.w	sl, #118	; 0x76
 8001408:	f43f adcd 	beq.w	8000fa6 <Ap_GLcdMenu_ExeCmd+0x26>
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 800140c:	fa1f f08a 	uxth.w	r0, sl
 8001410:	fba5 1300 	umull	r1, r3, r5, r0
 8001414:	08da      	lsrs	r2, r3, #3
 8001416:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800141a:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 800141e:	b283      	uxth	r3, r0
 8001420:	f10a 0b01 	add.w	fp, sl, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ca      	bne.n	80013be <Ap_GLcdMenu_ExeCmd+0x43e>
 8001428:	4651      	mov	r1, sl
 800142a:	4842      	ldr	r0, [pc, #264]	; (8001534 <Ap_GLcdMenu_ExeCmd+0x5b4>)
 800142c:	47a0      	blx	r4
 800142e:	e7c6      	b.n	80013be <Ap_GLcdMenu_ExeCmd+0x43e>
 8001430:	4f34      	ldr	r7, [pc, #208]	; (8001504 <Ap_GLcdMenu_ExeCmd+0x584>)

		   case '2':
				
				while( get_byte_check() == 0 )
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8001432:	4d35      	ldr	r5, [pc, #212]	; (8001508 <Ap_GLcdMenu_ExeCmd+0x588>)

					Ret = Hw_MPU6050_GetData( &MPU6050_Data );
 8001434:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8001554 <Ap_GLcdMenu_ExeCmd+0x5d4>
 8001438:	e016      	b.n	8001468 <Ap_GLcdMenu_ExeCmd+0x4e8>
					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
					if( x < 3 )                x = 3;
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 800143a:	b208      	sxth	r0, r1

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
					if( x < 3 )                x = 3;
 800143c:	2a02      	cmp	r2, #2
 800143e:	bfd8      	it	le
 8001440:	2603      	movle	r6, #3
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 8001442:	282c      	cmp	r0, #44	; 0x2c
 8001444:	dc4a      	bgt.n	80014dc <Ap_GLcdMenu_ExeCmd+0x55c>
					if( y < 3 )                 y = 3;
 8001446:	2802      	cmp	r0, #2
 8001448:	bfcc      	ite	gt
 800144a:	469b      	movgt	fp, r3
 800144c:	f04f 0b03 	movle.w	fp, #3

					Hw_N5110G_Clear();                                  
 8001450:	4b39      	ldr	r3, [pc, #228]	; (8001538 <Ap_GLcdMenu_ExeCmd+0x5b8>)
 8001452:	4798      	blx	r3
					Hw_N5110G_DrawCircle(  x , y, 3, 0 );                           
 8001454:	4630      	mov	r0, r6
 8001456:	2203      	movs	r2, #3
 8001458:	4659      	mov	r1, fp
 800145a:	2300      	movs	r3, #0
 800145c:	4e37      	ldr	r6, [pc, #220]	; (800153c <Ap_GLcdMenu_ExeCmd+0x5bc>)
 800145e:	47b0      	blx	r6
					Hw_N5110G_DrawRequest();
 8001460:	47c0      	blx	r8
					Hw_Wait_ms(100);
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	4a2e      	ldr	r2, [pc, #184]	; (8001520 <Ap_GLcdMenu_ExeCmd+0x5a0>)
 8001466:	4790      	blx	r2
				Hw_N5110G_Clear();
				break;

		   case '2':
				
				while( get_byte_check() == 0 )
 8001468:	47b8      	blx	r7
 800146a:	2800      	cmp	r0, #0
 800146c:	f47f ad9b 	bne.w	8000fa6 <Ap_GLcdMenu_ExeCmd+0x26>
				{
					TimeStart = Hw_Timer_Get_u16Count_Usec();
 8001470:	47a8      	blx	r5
 8001472:	4606      	mov	r6, r0

					Ret = Hw_MPU6050_GetData( &MPU6050_Data );
 8001474:	a802      	add	r0, sp, #8
 8001476:	47d0      	blx	sl

					Lb_printf("Time %d ", Hw_Timer_Get_u16Count_Usec() - TimeStart );
 8001478:	47a8      	blx	r5
 800147a:	1b81      	subs	r1, r0, r6
 800147c:	4824      	ldr	r0, [pc, #144]	; (8001510 <Ap_GLcdMenu_ExeCmd+0x590>)
 800147e:	47a0      	blx	r4

					Lb_printf("AX %d ", MPU6050_Data.X_Acc );
 8001480:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8001484:	482e      	ldr	r0, [pc, #184]	; (8001540 <Ap_GLcdMenu_ExeCmd+0x5c0>)
 8001486:	47a0      	blx	r4
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
 8001488:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 800148c:	482d      	ldr	r0, [pc, #180]	; (8001544 <Ap_GLcdMenu_ExeCmd+0x5c4>)
 800148e:	47a0      	blx	r4
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
 8001490:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8001494:	482c      	ldr	r0, [pc, #176]	; (8001548 <Ap_GLcdMenu_ExeCmd+0x5c8>)
 8001496:	47a0      	blx	r4
					Lb_printf("T %d \n",  MPU6050_Data.Temp);
 8001498:	482c      	ldr	r0, [pc, #176]	; (800154c <Ap_GLcdMenu_ExeCmd+0x5cc>)
 800149a:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 800149e:	47a0      	blx	r4

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80014a0:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80014a4:	f248 531f 	movw	r3, #34079	; 0x851f
 80014a8:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80014ac:	fb83 6001 	smull	r6, r0, r3, r1
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80014b0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80014b4:	fb83 6302 	smull	r6, r3, r3, r2
					Lb_printf("AX %d ", MPU6050_Data.X_Acc );
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80014b8:	17ce      	asrs	r6, r1, #31
 80014ba:	eba6 11a0 	sub.w	r1, r6, r0, asr #6
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80014be:	17d2      	asrs	r2, r2, #31
					Lb_printf("AX %d ", MPU6050_Data.X_Acc );
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80014c0:	312a      	adds	r1, #42	; 0x2a
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80014c2:	eba2 10a3 	sub.w	r0, r2, r3, asr #6
					Lb_printf("AX %d ", MPU6050_Data.X_Acc );
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80014c6:	b28e      	uxth	r6, r1
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80014c8:	3018      	adds	r0, #24

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80014ca:	b232      	sxth	r2, r6
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80014cc:	b283      	uxth	r3, r0

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80014ce:	2a50      	cmp	r2, #80	; 0x50
					Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
					Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80014d0:	b299      	uxth	r1, r3

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80014d2:	ddb2      	ble.n	800143a <Ap_GLcdMenu_ExeCmd+0x4ba>
					if( x < 3 )                x = 3;
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 80014d4:	b208      	sxth	r0, r1
					Lb_printf("T %d \n",  MPU6050_Data.Temp);

					x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
					y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

					if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80014d6:	2650      	movs	r6, #80	; 0x50
					if( x < 3 )                x = 3;
					if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 80014d8:	282c      	cmp	r0, #44	; 0x2c
 80014da:	ddb4      	ble.n	8001446 <Ap_GLcdMenu_ExeCmd+0x4c6>
 80014dc:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 80014e0:	e7b6      	b.n	8001450 <Ap_GLcdMenu_ExeCmd+0x4d0>
	while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
	{
		switch(key)
		{
		   case '1':
				Lb_printf("LCD Clear \n");
 80014e2:	481b      	ldr	r0, [pc, #108]	; (8001550 <Ap_GLcdMenu_ExeCmd+0x5d0>)
 80014e4:	47a0      	blx	r4
				Hw_N5110G_Clear();
 80014e6:	4914      	ldr	r1, [pc, #80]	; (8001538 <Ap_GLcdMenu_ExeCmd+0x5b8>)
 80014e8:	4788      	blx	r1
				break;
 80014ea:	e55c      	b.n	8000fa6 <Ap_GLcdMenu_ExeCmd+0x26>
		   case '0':
			   break;

			case 'm':
			case 'M':
				Ap_GLcdMenu_ShowMenu();
 80014ec:	f640 66ad 	movw	r6, #3757	; 0xead
 80014f0:	f6c0 0600 	movt	r6, #2048	; 0x800
 80014f4:	47b0      	blx	r6
				break;
 80014f6:	e556      	b.n	8000fa6 <Ap_GLcdMenu_ExeCmd+0x26>
				break;

		   case '3':
				for( i=0; i<=0x75; i++ )
				{
					if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 80014f8:	480e      	ldr	r0, [pc, #56]	; (8001534 <Ap_GLcdMenu_ExeCmd+0x5b4>)
 80014fa:	4659      	mov	r1, fp
 80014fc:	47a0      	blx	r4
 80014fe:	e775      	b.n	80013ec <Ap_GLcdMenu_ExeCmd+0x46c>
 8001500:	080066b8 	.word	0x080066b8
 8001504:	0800265d 	.word	0x0800265d
 8001508:	08002c15 	.word	0x08002c15
 800150c:	08003f8d 	.word	0x08003f8d
 8001510:	08006654 	.word	0x08006654
 8001514:	080066a0 	.word	0x080066a0
 8001518:	080066a8 	.word	0x080066a8
 800151c:	080066b0 	.word	0x080066b0
 8001520:	080024cd 	.word	0x080024cd
 8001524:	08003e8d 	.word	0x08003e8d
 8001528:	08006694 	.word	0x08006694
 800152c:	08003ac5 	.word	0x08003ac5
 8001530:	0800668c 	.word	0x0800668c
 8001534:	08006680 	.word	0x08006680
 8001538:	08003069 	.word	0x08003069
 800153c:	08003229 	.word	0x08003229
 8001540:	08006660 	.word	0x08006660
 8001544:	08006668 	.word	0x08006668
 8001548:	08006670 	.word	0x08006670
 800154c:	08006678 	.word	0x08006678
 8001550:	08006648 	.word	0x08006648
 8001554:	08003ce9 	.word	0x08003ce9
			   break;
		}
	}
	
	return key;
}
 8001558:	b01b      	add	sp, #108	; 0x6c
 800155a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800155e:	fa1f f68b 	uxth.w	r6, fp
 8001562:	e5b3      	b.n	80010cc <Ap_GLcdMenu_ExeCmd+0x14c>
 8001564:	b285      	uxth	r5, r0
 8001566:	e5b8      	b.n	80010da <Ap_GLcdMenu_ExeCmd+0x15a>

08001568 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 8001568:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 800156c:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800156e:	7819      	ldrb	r1, [r3, #0]
 8001570:	b151      	cbz	r1, 8001588 <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <print_byte_out+0x2c>)
 8001574:	4908      	ldr	r1, [pc, #32]	; (8001598 <print_byte_out+0x30>)
 8001576:	6814      	ldr	r4, [r2, #0]
 8001578:	6808      	ldr	r0, [r1, #0]
 800157a:	1c63      	adds	r3, r4, #1
 800157c:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800157e:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8001580:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8001582:	2200      	movs	r2, #0
 8001584:	54ca      	strb	r2, [r1, r3]
 8001586:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <print_byte_out+0x34>)
 800158a:	4798      	blx	r3
 800158c:	bd38      	pop	{r3, r4, r5, pc}
 800158e:	bf00      	nop
 8001590:	20000404 	.word	0x20000404
 8001594:	20000400 	.word	0x20000400
 8001598:	200004c0 	.word	0x200004c0
 800159c:	08002611 	.word	0x08002611

080015a0 <PrintString>:
        }
        return;
}

void PrintString(char *fmt, char *s)
{
 80015a0:	b538      	push	{r3, r4, r5, lr}
        if (!fmt || !s) return;
 80015a2:	b148      	cbz	r0, 80015b8 <PrintString+0x18>
 80015a4:	b141      	cbz	r1, 80015b8 <PrintString+0x18>
        while (*s) print_byte_out(*s++);
 80015a6:	7808      	ldrb	r0, [r1, #0]
 80015a8:	b130      	cbz	r0, 80015b8 <PrintString+0x18>
 80015aa:	4d04      	ldr	r5, [pc, #16]	; (80015bc <PrintString+0x1c>)
 80015ac:	460c      	mov	r4, r1
 80015ae:	47a8      	blx	r5
 80015b0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d1fa      	bne.n	80015ae <PrintString+0xe>
 80015b8:	bd38      	pop	{r3, r4, r5, pc}
 80015ba:	bf00      	nop
 80015bc:	08001569 	.word	0x08001569

080015c0 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 80015c0:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 80015c2:	b1c8      	cbz	r0, 80015f8 <DecToLong+0x38>
 80015c4:	7803      	ldrb	r3, [r0, #0]
 80015c6:	b1cb      	cbz	r3, 80015fc <DecToLong+0x3c>


        for (*retval=0; *s; s++){
 80015c8:	2300      	movs	r3, #0
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	7802      	ldrb	r2, [r0, #0]
 80015ce:	b192      	cbz	r2, 80015f6 <DecToLong+0x36>
                if (*s < '0' || *s > '9') return false;
 80015d0:	3a30      	subs	r2, #48	; 0x30
 80015d2:	b2d4      	uxtb	r4, r2
 80015d4:	2c09      	cmp	r4, #9
 80015d6:	d902      	bls.n	80015de <DecToLong+0x1e>
 80015d8:	e012      	b.n	8001600 <DecToLong+0x40>
 80015da:	2d09      	cmp	r5, #9
 80015dc:	d810      	bhi.n	8001600 <DecToLong+0x40>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 80015de:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80015e2:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 80015e6:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80015e8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 80015ec:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80015f0:	b2d5      	uxtb	r5, r2
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80015f2:	2c00      	cmp	r4, #0
 80015f4:	d1f1      	bne.n	80015da <DecToLong+0x1a>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 80015f6:	2001      	movs	r0, #1
}        // DecToLong.
 80015f8:	bc30      	pop	{r4, r5}
 80015fa:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 80015fc:	4618      	mov	r0, r3
 80015fe:	e7fb      	b.n	80015f8 <DecToLong+0x38>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 8001600:	2000      	movs	r0, #0
 8001602:	e7f9      	b.n	80015f8 <DecToLong+0x38>

08001604 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 8001604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001608:	4682      	mov	sl, r0
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800160a:	7800      	ldrb	r0, [r0, #0]
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 800160c:	2300      	movs	r3, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 800160e:	b084      	sub	sp, #16
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
 8001610:	f1b1 0800 	subs.w	r8, r1, #0
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 8001614:	9300      	str	r3, [sp, #0]
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
		l = -l;	
 8001616:	bfba      	itte	lt
 8001618:	f1c8 0800 	rsblt	r8, r8, #0
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
 800161c:	f04f 0901 	movlt.w	r9, #1
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;
 8001620:	4699      	movge	r9, r3
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8001622:	2800      	cmp	r0, #0
 8001624:	f000 8140 	beq.w	80018a8 <PrintDec+0x2a4>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 8001628:	2500      	movs	r5, #0


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 800162a:	2864      	cmp	r0, #100	; 0x64
 800162c:	d029      	beq.n	8001682 <PrintDec+0x7e>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 800162e:	4ea1      	ldr	r6, [pc, #644]	; (80018b4 <PrintDec+0x2b0>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 8001630:	462c      	mov	r4, r5
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8001632:	462f      	mov	r7, r5

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 8001634:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
 8001638:	2a08      	cmp	r2, #8
 800163a:	f200 808e 	bhi.w	800175a <PrintDec+0x156>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800163e:	f81a 2004 	ldrb.w	r2, [sl, r4]
 8001642:	eb0a 0104 	add.w	r1, sl, r4
 8001646:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800164a:	2809      	cmp	r0, #9
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	a801      	add	r0, sp, #4
 8001652:	d809      	bhi.n	8001668 <PrintDec+0x64>
			{
				tol[j] = s[i++];
 8001654:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8001656:	f811 2f01 	ldrb.w	r2, [r1, #1]!
			{
				tol[j] = s[i++];
 800165a:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800165c:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8001660:	3301      	adds	r3, #1
 8001662:	f1be 0f09 	cmp.w	lr, #9
 8001666:	d9f5      	bls.n	8001654 <PrintDec+0x50>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8001668:	a904      	add	r1, sp, #16
 800166a:	18ca      	adds	r2, r1, r3
			i--;
			DecToLong(tol, &flagcnt);
 800166c:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800166e:	f802 7c0c 	strb.w	r7, [r2, #-12]
			i--;
 8001672:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 8001674:	47b0      	blx	r6
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8001676:	3401      	adds	r4, #1
 8001678:	f81a 0004 	ldrb.w	r0, [sl, r4]
 800167c:	b108      	cbz	r0, 8001682 <PrintDec+0x7e>
	{
		if (c=='d') break;
 800167e:	2864      	cmp	r0, #100	; 0x64
 8001680:	d1d8      	bne.n	8001634 <PrintDec+0x30>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 8001682:	f1b9 0f00 	cmp.w	r9, #0
 8001686:	f040 810b 	bne.w	80018a0 <PrintDec+0x29c>
 800168a:	4e8b      	ldr	r6, [pc, #556]	; (80018b8 <PrintDec+0x2b4>)


	// 위의 flag에 따라 출력.
	if (flagcnt)
 800168c:	9800      	ldr	r0, [sp, #0]
 800168e:	2800      	cmp	r0, #0
 8001690:	d067      	beq.n	8001762 <PrintDec+0x15e>
	{
                if (flagcnt>9) flagcnt=9;
 8001692:	2809      	cmp	r0, #9
 8001694:	f300 80ff 	bgt.w	8001896 <PrintDec+0x292>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 8001698:	1e44      	subs	r4, r0, #1


        while (cnt--){
 800169a:	1e81      	subs	r1, r0, #2
 800169c:	1ec7      	subs	r7, r0, #3
 800169e:	2c00      	cmp	r4, #0
 80016a0:	f000 8104 	beq.w	80018ac <PrintDec+0x2a8>
 80016a4:	f001 0401 	and.w	r4, r1, #1
                retval *= num;
 80016a8:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 80016aa:	1e4a      	subs	r2, r1, #1
 80016ac:	b171      	cbz	r1, 80016cc <PrintDec+0xc8>
 80016ae:	b124      	cbz	r4, 80016ba <PrintDec+0xb6>
 80016b0:	3a01      	subs	r2, #1
 80016b2:	1c51      	adds	r1, r2, #1
                retval *= num;
 80016b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80016b8:	d008      	beq.n	80016cc <PrintDec+0xc8>
                retval *= num;
 80016ba:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80016be:	00e1      	lsls	r1, r4, #3
 80016c0:	eb01 0344 	add.w	r3, r1, r4, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80016c4:	3a02      	subs	r2, #2
                retval *= num;
 80016c6:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80016c8:	1c51      	adds	r1, r2, #1
 80016ca:	d1f6      	bne.n	80016ba <PrintDec+0xb6>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80016cc:	fb98 f2f3 	sdiv	r2, r8, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 80016d0:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80016d2:	fb03 8812 	mls	r8, r3, r2, r8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80016d6:	f000 80eb 	beq.w	80018b0 <PrintDec+0x2ac>
 80016da:	f007 0001 	and.w	r0, r7, #1
                retval *= num;
 80016de:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 80016e0:	1e79      	subs	r1, r7, #1
 80016e2:	b177      	cbz	r7, 8001702 <PrintDec+0xfe>
 80016e4:	b120      	cbz	r0, 80016f0 <PrintDec+0xec>
 80016e6:	3901      	subs	r1, #1
 80016e8:	1c48      	adds	r0, r1, #1
                retval *= num;
 80016ea:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80016ee:	d008      	beq.n	8001702 <PrintDec+0xfe>
                retval *= num;
 80016f0:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 80016f4:	00fc      	lsls	r4, r7, #3
 80016f6:	eb04 0347 	add.w	r3, r4, r7, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80016fa:	3902      	subs	r1, #2
                retval *= num;
 80016fc:	005c      	lsls	r4, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80016fe:	1c4f      	adds	r7, r1, #1
 8001700:	d1f6      	bne.n	80016f0 <PrintDec+0xec>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8001702:	f246 6767 	movw	r7, #26215	; 0x6667
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 8001706:	f04f 0901 	mov.w	r9, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800170a:	f2c6 6766 	movt	r7, #26214	; 0x6666
 800170e:	e00f      	b.n	8001730 <PrintDec+0x12c>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 8001710:	2c01      	cmp	r4, #1
 8001712:	d015      	beq.n	8001740 <PrintDec+0x13c>


                        if (leading_zero==true){
 8001714:	f1b9 0f00 	cmp.w	r9, #0
 8001718:	d012      	beq.n	8001740 <PrintDec+0x13c>
                                if (flag0)        print_byte_out('0');
 800171a:	2030      	movs	r0, #48	; 0x30
 800171c:	b905      	cbnz	r5, 8001720 <PrintDec+0x11c>
                                else                print_byte_out(' ');
 800171e:	2020      	movs	r0, #32
 8001720:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8001722:	fb87 2004 	smull	r2, r0, r7, r4
 8001726:	17e1      	asrs	r1, r4, #31
 8001728:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 800172c:	2c00      	cmp	r4, #0
 800172e:	dd11      	ble.n	8001754 <PrintDec+0x150>
                        result = remainder/divisor;
 8001730:	fb98 f2f4 	sdiv	r2, r8, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8001734:	b2d0      	uxtb	r0, r2
 8001736:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8001738:	fb04 8812 	mls	r8, r4, r2, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 800173c:	2a00      	cmp	r2, #0
 800173e:	d0e7      	beq.n	8001710 <PrintDec+0x10c>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8001740:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8001742:	fb87 2004 	smull	r2, r0, r7, r4
 8001746:	17e1      	asrs	r1, r4, #31
 8001748:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 800174c:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800174e:	f04f 0900 	mov.w	r9, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8001752:	dced      	bgt.n	8001730 <PrintDec+0x12c>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 8001754:	b004      	add	sp, #16
 8001756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 800175a:	2830      	cmp	r0, #48	; 0x30
 800175c:	bf08      	it	eq
 800175e:	2501      	moveq	r5, #1
 8001760:	e789      	b.n	8001676 <PrintDec+0x72>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001762:	f642 73a1 	movw	r3, #12193	; 0x2fa1
 8001766:	f2c4 43b8 	movt	r3, #17592	; 0x44b8
 800176a:	fb83 2408 	smull	r2, r4, r3, r8
 800176e:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 8001772:	f44f 424a 	mov.w	r2, #51712	; 0xca00
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001776:	ebc1 7024 	rsb	r0, r1, r4, asr #28
                        remainder %= divisor;
 800177a:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
 800177e:	fb02 8810 	mls	r8, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 8001782:	2800      	cmp	r0, #0
 8001784:	f000 809a 	beq.w	80018bc <PrintDec+0x2b8>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001788:	b2c0      	uxtb	r0, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800178a:	f643 3489 	movw	r4, #15241	; 0x3b89
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800178e:	3030      	adds	r0, #48	; 0x30
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001790:	f2c5 54e6 	movt	r4, #21990	; 0x55e6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001794:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001796:	fb84 2008 	smull	r2, r0, r4, r8
 800179a:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 800179e:	f44f 4261 	mov.w	r2, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80017a2:	ebc1 6060 	rsb	r0, r1, r0, asr #25
                        remainder %= divisor;
 80017a6:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
 80017aa:	fb02 8410 	mls	r4, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80017ae:	3030      	adds	r0, #48	; 0x30
 80017b0:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80017b2:	f64c 236b 	movw	r3, #51819	; 0xca6b
 80017b6:	f6c6 335f 	movt	r3, #27487	; 0x6b5f
 80017ba:	fb83 2004 	smull	r2, r0, r3, r4
 80017be:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 80017c0:	f249 6280 	movw	r2, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80017c4:	ebc1 50a0 	rsb	r0, r1, r0, asr #22
                        remainder %= divisor;
 80017c8:	f2c0 0298 	movt	r2, #152	; 0x98
 80017cc:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80017d0:	3030      	adds	r0, #48	; 0x30
 80017d2:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80017d4:	f64d 6383 	movw	r3, #56963	; 0xde83
 80017d8:	f2c4 331b 	movt	r3, #17179	; 0x431b
 80017dc:	fb83 2004 	smull	r2, r0, r3, r4
 80017e0:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 80017e2:	f244 2240 	movw	r2, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80017e6:	ebc1 40a0 	rsb	r0, r1, r0, asr #18
                        remainder %= divisor;
 80017ea:	f2c0 020f 	movt	r2, #15
 80017ee:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80017f2:	3030      	adds	r0, #48	; 0x30
 80017f4:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80017f6:	f24b 5389 	movw	r3, #46473	; 0xb589
 80017fa:	f2c1 43f8 	movt	r3, #5368	; 0x14f8
 80017fe:	fb83 2004 	smull	r2, r0, r3, r4
 8001802:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 8001804:	f248 62a0 	movw	r2, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001808:	ebc1 3060 	rsb	r0, r1, r0, asr #13
                        remainder %= divisor;
 800180c:	f2c0 0201 	movt	r2, #1
 8001810:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001814:	3030      	adds	r0, #48	; 0x30
 8001816:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001818:	f648 33ad 	movw	r3, #35757	; 0x8bad
 800181c:	f6c6 03db 	movt	r3, #26843	; 0x68db
 8001820:	fb83 2004 	smull	r2, r0, r3, r4
 8001824:	17e1      	asrs	r1, r4, #31
 8001826:	ebc1 3020 	rsb	r0, r1, r0, asr #12
                        remainder %= divisor;
 800182a:	f242 7210 	movw	r2, #10000	; 0x2710
 800182e:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001832:	3030      	adds	r0, #48	; 0x30
 8001834:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001836:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800183a:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800183e:	fb83 2004 	smull	r2, r0, r3, r4
 8001842:	17e1      	asrs	r1, r4, #31
 8001844:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
                        remainder %= divisor;
 8001848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800184c:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001850:	3030      	adds	r0, #48	; 0x30
 8001852:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001854:	f248 531f 	movw	r3, #34079	; 0x851f
 8001858:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800185c:	fb83 2004 	smull	r2, r0, r3, r4
 8001860:	17e1      	asrs	r1, r4, #31
 8001862:	ebc1 1060 	rsb	r0, r1, r0, asr #5
                        remainder %= divisor;
 8001866:	2264      	movs	r2, #100	; 0x64
 8001868:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800186c:	3030      	adds	r0, #48	; 0x30
 800186e:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001870:	f246 6367 	movw	r3, #26215	; 0x6667
 8001874:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8001878:	fb83 2004 	smull	r2, r0, r3, r4
 800187c:	17e1      	asrs	r1, r4, #31
 800187e:	ebc1 00a0 	rsb	r0, r1, r0, asr #2
                        remainder %= divisor;
 8001882:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8001886:	eba4 0442 	sub.w	r4, r4, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800188a:	3030      	adds	r0, #48	; 0x30
 800188c:	47b0      	blx	r6
 800188e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001892:	47b0      	blx	r6
 8001894:	e75e      	b.n	8001754 <PrintDec+0x150>


	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 8001896:	2009      	movs	r0, #9
 8001898:	9000      	str	r0, [sp, #0]
 800189a:	2706      	movs	r7, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 800189c:	2107      	movs	r1, #7
 800189e:	e701      	b.n	80016a4 <PrintDec+0xa0>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 80018a0:	202d      	movs	r0, #45	; 0x2d
 80018a2:	4e05      	ldr	r6, [pc, #20]	; (80018b8 <PrintDec+0x2b4>)
 80018a4:	47b0      	blx	r6
 80018a6:	e6f1      	b.n	800168c <PrintDec+0x88>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 80018a8:	4605      	mov	r5, r0
 80018aa:	e6ea      	b.n	8001682 <PrintDec+0x7e>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80018ac:	230a      	movs	r3, #10
 80018ae:	e70d      	b.n	80016cc <PrintDec+0xc8>
 80018b0:	240a      	movs	r4, #10
 80018b2:	e726      	b.n	8001702 <PrintDec+0xfe>
 80018b4:	080015c1 	.word	0x080015c1
 80018b8:	08001569 	.word	0x08001569
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80018bc:	f643 3389 	movw	r3, #15241	; 0x3b89
 80018c0:	f2c5 53e6 	movt	r3, #21990	; 0x55e6
 80018c4:	fb83 2108 	smull	r2, r1, r3, r8
                        remainder %= divisor;
 80018c8:	f44f 4461 	mov.w	r4, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80018cc:	ea4f 72e8 	mov.w	r2, r8, asr #31
 80018d0:	ebc2 6061 	rsb	r0, r2, r1, asr #25
                        remainder %= divisor;
 80018d4:	f2c0 54f5 	movt	r4, #1525	; 0x5f5
 80018d8:	fb04 8410 	mls	r4, r4, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 80018dc:	2800      	cmp	r0, #0
 80018de:	f47f af66 	bne.w	80017ae <PrintDec+0x1aa>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80018e2:	f64c 206b 	movw	r0, #51819	; 0xca6b
 80018e6:	f6c6 305f 	movt	r0, #27487	; 0x6b5f
 80018ea:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 80018ee:	f249 6380 	movw	r3, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80018f2:	17e2      	asrs	r2, r4, #31
 80018f4:	ebc2 50a1 	rsb	r0, r2, r1, asr #22
                        remainder %= divisor;
 80018f8:	f2c0 0398 	movt	r3, #152	; 0x98
 80018fc:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001900:	2800      	cmp	r0, #0
 8001902:	f47f af65 	bne.w	80017d0 <PrintDec+0x1cc>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001906:	f64d 6083 	movw	r0, #56963	; 0xde83
 800190a:	f2c4 301b 	movt	r0, #17179	; 0x431b
 800190e:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 8001912:	f244 2340 	movw	r3, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001916:	17e2      	asrs	r2, r4, #31
 8001918:	ebc2 40a1 	rsb	r0, r2, r1, asr #18
                        remainder %= divisor;
 800191c:	f2c0 030f 	movt	r3, #15
 8001920:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001924:	2800      	cmp	r0, #0
 8001926:	f47f af64 	bne.w	80017f2 <PrintDec+0x1ee>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800192a:	f24b 5089 	movw	r0, #46473	; 0xb589
 800192e:	f2c1 40f8 	movt	r0, #5368	; 0x14f8
 8001932:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 8001936:	f248 63a0 	movw	r3, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800193a:	17e2      	asrs	r2, r4, #31
 800193c:	ebc2 3061 	rsb	r0, r2, r1, asr #13
                        remainder %= divisor;
 8001940:	f2c0 0301 	movt	r3, #1
 8001944:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001948:	2800      	cmp	r0, #0
 800194a:	f47f af63 	bne.w	8001814 <PrintDec+0x210>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800194e:	f648 30ad 	movw	r0, #35757	; 0x8bad
 8001952:	f6c6 00db 	movt	r0, #26843	; 0x68db
 8001956:	fb80 2104 	smull	r2, r1, r0, r4
 800195a:	17e2      	asrs	r2, r4, #31
 800195c:	ebc2 3021 	rsb	r0, r2, r1, asr #12
                        remainder %= divisor;
 8001960:	f242 7310 	movw	r3, #10000	; 0x2710
 8001964:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001968:	2800      	cmp	r0, #0
 800196a:	f47f af62 	bne.w	8001832 <PrintDec+0x22e>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800196e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
 8001972:	f2c1 0062 	movt	r0, #4194	; 0x1062
 8001976:	fb80 2104 	smull	r2, r1, r0, r4
 800197a:	17e2      	asrs	r2, r4, #31
 800197c:	ebc2 10a1 	rsb	r0, r2, r1, asr #6
                        remainder %= divisor;
 8001980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001984:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001988:	2800      	cmp	r0, #0
 800198a:	f47f af61 	bne.w	8001850 <PrintDec+0x24c>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800198e:	f248 501f 	movw	r0, #34079	; 0x851f
 8001992:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
 8001996:	fb80 2104 	smull	r2, r1, r0, r4
 800199a:	17e2      	asrs	r2, r4, #31
 800199c:	ebc2 1061 	rsb	r0, r2, r1, asr #5
                        remainder %= divisor;
 80019a0:	2364      	movs	r3, #100	; 0x64
 80019a2:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 80019a6:	2800      	cmp	r0, #0
 80019a8:	f47f af60 	bne.w	800186c <PrintDec+0x268>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80019ac:	f246 6067 	movw	r0, #26215	; 0x6667
 80019b0:	f2c6 6066 	movt	r0, #26214	; 0x6666
 80019b4:	fb80 2104 	smull	r2, r1, r0, r4
 80019b8:	17e2      	asrs	r2, r4, #31
 80019ba:	ebc2 00a1 	rsb	r0, r2, r1, asr #2
                        remainder %= divisor;
 80019be:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80019c2:	eba4 0443 	sub.w	r4, r4, r3, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 80019c6:	2800      	cmp	r0, #0
 80019c8:	f43f af61 	beq.w	800188e <PrintDec+0x28a>
 80019cc:	e75d      	b.n	800188a <PrintDec+0x286>
 80019ce:	bf00      	nop

080019d0 <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80019d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80019d4:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80019d6:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80019d8:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80019da:	4681      	mov	r9, r0
 80019dc:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80019de:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80b7 	beq.w	8001b54 <PrintHex+0x184>
                if (c=='x') break;
 80019e6:	2b78      	cmp	r3, #120	; 0x78
 80019e8:	f000 80b4 	beq.w	8001b54 <PrintHex+0x184>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 80019ec:	4fb4      	ldr	r7, [pc, #720]	; (8001cc0 <PrintHex+0x2f0>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 80019ee:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80019f0:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 80019f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80019f6:	2a08      	cmp	r2, #8
 80019f8:	f200 80a8 	bhi.w	8001b4c <PrintHex+0x17c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80019fc:	f819 2004 	ldrb.w	r2, [r9, r4]
 8001a00:	eb09 0104 	add.w	r1, r9, r4
 8001a04:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001a08:	2b09      	cmp	r3, #9
 8001a0a:	a803      	add	r0, sp, #12
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	d808      	bhi.n	8001a24 <PrintHex+0x54>
                                tol[j] = s[i++];
 8001a12:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8001a14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 8001a18:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8001a1a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2d09      	cmp	r5, #9
 8001a22:	d9f6      	bls.n	8001a12 <PrintHex+0x42>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8001a24:	a906      	add	r1, sp, #24
 8001a26:	18ca      	adds	r2, r1, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 8001a28:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8001a2a:	f802 8c0c 	strb.w	r8, [r2, #-12]
                        i--;
 8001a2e:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 8001a30:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8001a32:	3401      	adds	r4, #1
 8001a34:	f819 3004 	ldrb.w	r3, [r9, r4]
 8001a38:	b10b      	cbz	r3, 8001a3e <PrintHex+0x6e>
                if (c=='x') break;
 8001a3a:	2b78      	cmp	r3, #120	; 0x78
 8001a3c:	d1d9      	bne.n	80019f2 <PrintHex+0x22>
 8001a3e:	9901      	ldr	r1, [sp, #4]
 8001a40:	9b02      	ldr	r3, [sp, #8]
 8001a42:	ba0a      	rev	r2, r1
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8001a44:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8087 	beq.w	8001b5a <PrintHex+0x18a>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8001a4c:	07d8      	lsls	r0, r3, #31
 8001a4e:	f100 810f 	bmi.w	8001c70 <PrintHex+0x2a0>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8001a52:	2101      	movs	r1, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001a54:	f1c3 0208 	rsb	r2, r3, #8
 8001a58:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
 8001a5c:	105a      	asrs	r2, r3, #1
 8001a5e:	2a03      	cmp	r2, #3
 8001a60:	f300 80c9 	bgt.w	8001bf6 <PrintHex+0x226>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001a64:	ac01      	add	r4, sp, #4
 8001a66:	18a5      	adds	r5, r4, r2
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8001a68:	462c      	mov	r4, r5
 8001a6a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001a6e:	43ef      	mvns	r7, r5
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001a70:	0903      	lsrs	r3, r0, #4
 8001a72:	f007 0901 	and.w	r9, r7, #1
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001a76:	f10d 0808 	add.w	r8, sp, #8
 8001a7a:	4d92      	ldr	r5, [pc, #584]	; (8001cc4 <PrintHex+0x2f4>)
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001a7c:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001a80:	f000 8131 	beq.w	8001ce6 <PrintHex+0x316>
                        if (uHex<10) uHex+='0';
 8001a84:	2b09      	cmp	r3, #9
 8001a86:	f240 816e 	bls.w	8001d66 <PrintHex+0x396>
                        else         uHex+='A'-10;
 8001a8a:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8001a8e:	47a8      	blx	r5
 8001a90:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001a92:	2f00      	cmp	r7, #0
 8001a94:	f000 8130 	beq.w	8001cf8 <PrintHex+0x328>
                        if (lHex<10) lHex+='0';
 8001a98:	2f09      	cmp	r7, #9
 8001a9a:	f240 8152 	bls.w	8001d42 <PrintHex+0x372>
                        else         lHex+='A'-10;
 8001a9e:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001aa2:	47a8      	blx	r5
 8001aa4:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001aa6:	4544      	cmp	r4, r8
 8001aa8:	f000 80a5 	beq.w	8001bf6 <PrintHex+0x226>
 8001aac:	f1b9 0f00 	cmp.w	r9, #0
 8001ab0:	d017      	beq.n	8001ae2 <PrintHex+0x112>
                        c = s[i];
 8001ab2:	f814 0b01 	ldrb.w	r0, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001ab6:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001ab8:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001abc:	d031      	beq.n	8001b22 <PrintHex+0x152>
                        if (uHex<10) uHex+='0';
 8001abe:	2b09      	cmp	r3, #9
 8001ac0:	f240 8142 	bls.w	8001d48 <PrintHex+0x378>
                        else         uHex+='A'-10;
 8001ac4:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8001ac8:	47a8      	blx	r5
 8001aca:	2200      	movs	r2, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001acc:	b3a7      	cbz	r7, 8001b38 <PrintHex+0x168>
                        if (lHex<10) lHex+='0';
 8001ace:	2f09      	cmp	r7, #9
 8001ad0:	f240 813d 	bls.w	8001d4e <PrintHex+0x37e>
                        else         lHex+='A'-10;
 8001ad4:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001ad8:	47a8      	blx	r5
 8001ada:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001adc:	4544      	cmp	r4, r8
 8001ade:	f000 808a 	beq.w	8001bf6 <PrintHex+0x226>
                        c = s[i];
 8001ae2:	f814 3b01 	ldrb.w	r3, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001ae6:	091a      	lsrs	r2, r3, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001ae8:	f003 070f 	and.w	r7, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001aec:	f000 80d4 	beq.w	8001c98 <PrintHex+0x2c8>
                        if (uHex<10) uHex+='0';
 8001af0:	2a09      	cmp	r2, #9
                        else         uHex+='A'-10;
 8001af2:	bf88      	it	hi
 8001af4:	f102 0037 	addhi.w	r0, r2, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001af8:	f240 812c 	bls.w	8001d54 <PrintHex+0x384>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8001afc:	47a8      	blx	r5
 8001afe:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001b00:	2f00      	cmp	r7, #0
 8001b02:	f000 80d2 	beq.w	8001caa <PrintHex+0x2da>
                        if (lHex<10) lHex+='0';
 8001b06:	2f09      	cmp	r7, #9
                        else         lHex+='A'-10;
 8001b08:	bf88      	it	hi
 8001b0a:	f107 0037 	addhi.w	r0, r7, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001b0e:	f240 8124 	bls.w	8001d5a <PrintHex+0x38a>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001b12:	47a8      	blx	r5
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8001b14:	f814 0b01 	ldrb.w	r0, [r4], #1
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001b18:	2100      	movs	r1, #0
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001b1a:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001b1c:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001b20:	d1cd      	bne.n	8001abe <PrintHex+0xee>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8001b22:	2900      	cmp	r1, #0
 8001b24:	f000 8110 	beq.w	8001d48 <PrintHex+0x378>
                                if (flag0) print_byte_out('0');
 8001b28:	2e00      	cmp	r6, #0
 8001b2a:	f040 80cd 	bne.w	8001cc8 <PrintHex+0x2f8>
                                else       print_byte_out(' ');
 8001b2e:	2020      	movs	r0, #32
 8001b30:	47a8      	blx	r5
 8001b32:	2201      	movs	r2, #1
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001b34:	2f00      	cmp	r7, #0
 8001b36:	d1ca      	bne.n	8001ace <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8001b38:	2a00      	cmp	r2, #0
 8001b3a:	f000 8108 	beq.w	8001d4e <PrintHex+0x37e>
                                if (flag0) print_byte_out('0');
 8001b3e:	2e00      	cmp	r6, #0
 8001b40:	f040 80ba 	bne.w	8001cb8 <PrintHex+0x2e8>
                                else       print_byte_out(' ');
 8001b44:	2020      	movs	r0, #32
 8001b46:	47a8      	blx	r5
 8001b48:	2101      	movs	r1, #1
 8001b4a:	e7c7      	b.n	8001adc <PrintHex+0x10c>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8001b4c:	2b30      	cmp	r3, #48	; 0x30
 8001b4e:	bf08      	it	eq
 8001b50:	2601      	moveq	r6, #1
 8001b52:	e76e      	b.n	8001a32 <PrintHex+0x62>
 8001b54:	9c01      	ldr	r4, [sp, #4]
 8001b56:	ba25      	rev	r5, r4
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8001b58:	9501      	str	r5, [sp, #4]
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001b5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001b5e:	091a      	lsrs	r2, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001b60:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001b64:	d04a      	beq.n	8001bfc <PrintHex+0x22c>
                        if (uHex<10) uHex+='0';
 8001b66:	2a09      	cmp	r2, #9
 8001b68:	f240 80fa 	bls.w	8001d60 <PrintHex+0x390>
                        else         uHex+='A'-10;
 8001b6c:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8001b70:	4d54      	ldr	r5, [pc, #336]	; (8001cc4 <PrintHex+0x2f4>)
 8001b72:	47a8      	blx	r5
 8001b74:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001b76:	2c00      	cmp	r4, #0
 8001b78:	d144      	bne.n	8001c04 <PrintHex+0x234>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2900      	cmp	r1, #0
 8001b7e:	f000 80fb 	beq.w	8001d78 <PrintHex+0x3a8>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001b82:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001b86:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001b88:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001b8c:	d047      	beq.n	8001c1e <PrintHex+0x24e>
                        if (uHex<10) uHex+='0';
 8001b8e:	2909      	cmp	r1, #9
 8001b90:	f240 80ec 	bls.w	8001d6c <PrintHex+0x39c>
                        else         uHex+='A'-10;
 8001b94:	f101 0037 	add.w	r0, r1, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8001b98:	47a8      	blx	r5
 8001b9a:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001b9c:	2c00      	cmp	r4, #0
 8001b9e:	d144      	bne.n	8001c2a <PrintHex+0x25a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80e5 	beq.w	8001d72 <PrintHex+0x3a2>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001ba8:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001bac:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001bae:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001bb2:	d047      	beq.n	8001c44 <PrintHex+0x274>
                        if (uHex<10) uHex+='0';
 8001bb4:	2b09      	cmp	r3, #9
 8001bb6:	f240 80be 	bls.w	8001d36 <PrintHex+0x366>
                        else         uHex+='A'-10;
 8001bba:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8001bbe:	47a8      	blx	r5
 8001bc0:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001bc2:	2c00      	cmp	r4, #0
 8001bc4:	d143      	bne.n	8001c4e <PrintHex+0x27e>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2900      	cmp	r1, #0
 8001bca:	f000 80b7 	beq.w	8001d3c <PrintHex+0x36c>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001bce:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001bd2:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001bd4:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001bd8:	d045      	beq.n	8001c66 <PrintHex+0x296>
                        if (uHex<10) uHex+='0';
 8001bda:	2909      	cmp	r1, #9
                        else         uHex+='A'-10;
 8001bdc:	bf88      	it	hi
 8001bde:	f101 0037 	addhi.w	r0, r1, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001be2:	d942      	bls.n	8001c6a <PrintHex+0x29a>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8001be4:	47a8      	blx	r5
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001be6:	2c00      	cmp	r4, #0
 8001be8:	d07a      	beq.n	8001ce0 <PrintHex+0x310>
                        if (lHex<10) lHex+='0';
 8001bea:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 8001bec:	bf88      	it	hi
 8001bee:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001bf2:	d975      	bls.n	8001ce0 <PrintHex+0x310>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001bf4:	47a8      	blx	r5
                }
        }
        return;
}
 8001bf6:	b007      	add	sp, #28
 8001bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4d31      	ldr	r5, [pc, #196]	; (8001cc4 <PrintHex+0x2f4>)
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001c00:	2c00      	cmp	r4, #0
 8001c02:	d0ba      	beq.n	8001b7a <PrintHex+0x1aa>
                        if (lHex<10) lHex+='0';
 8001c04:	2c09      	cmp	r4, #9
 8001c06:	f240 80b7 	bls.w	8001d78 <PrintHex+0x3a8>
                        else         lHex+='A'-10;
 8001c0a:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8001c0e:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001c10:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001c14:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001c16:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001c18:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001c1c:	d1b7      	bne.n	8001b8e <PrintHex+0x1be>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8001c1e:	2a00      	cmp	r2, #0
 8001c20:	f000 80a4 	beq.w	8001d6c <PrintHex+0x39c>
 8001c24:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	d0ba      	beq.n	8001ba0 <PrintHex+0x1d0>
                        if (lHex<10) lHex+='0';
 8001c2a:	2c09      	cmp	r4, #9
 8001c2c:	f240 80a1 	bls.w	8001d72 <PrintHex+0x3a2>
                        else         lHex+='A'-10;
 8001c30:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8001c34:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001c36:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001c3a:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001c3c:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001c3e:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001c42:	d1b7      	bne.n	8001bb4 <PrintHex+0x1e4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8001c44:	2a00      	cmp	r2, #0
 8001c46:	d076      	beq.n	8001d36 <PrintHex+0x366>
 8001c48:	2101      	movs	r1, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	d0bb      	beq.n	8001bc6 <PrintHex+0x1f6>
                        if (lHex<10) lHex+='0';
 8001c4e:	2c09      	cmp	r4, #9
 8001c50:	d974      	bls.n	8001d3c <PrintHex+0x36c>
                        else         lHex+='A'-10;
 8001c52:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8001c56:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001c58:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001c5c:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001c5e:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001c60:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001c64:	d1b9      	bne.n	8001bda <PrintHex+0x20a>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d1bd      	bne.n	8001be6 <PrintHex+0x216>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001c6a:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8001c6e:	e7b9      	b.n	8001be4 <PrintHex+0x214>
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8001c70:	43d8      	mvns	r0, r3
 8001c72:	3008      	adds	r0, #8
 8001c74:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8001c78:	aa06      	add	r2, sp, #24
 8001c7a:	eb02 0163 	add.w	r1, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 8001c7e:	f811 0c14 	ldrb.w	r0, [r1, #-20]
                        if (lHex!=0) leading_zero=false;
 8001c82:	f010 030f 	ands.w	r3, r0, #15
 8001c86:	d045      	beq.n	8001d14 <PrintHex+0x344>
                        if (lHex<10) lHex+='0';
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	d951      	bls.n	8001d30 <PrintHex+0x360>
                        else         lHex+='A'-10;
 8001c8c:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <PrintHex+0x2f4>)
 8001c92:	4798      	blx	r3
 8001c94:	2100      	movs	r1, #0
 8001c96:	e042      	b.n	8001d1e <PrintHex+0x34e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8001c98:	2900      	cmp	r1, #0
 8001c9a:	d05b      	beq.n	8001d54 <PrintHex+0x384>
                                if (flag0) print_byte_out('0');
 8001c9c:	b1e6      	cbz	r6, 8001cd8 <PrintHex+0x308>
 8001c9e:	2030      	movs	r0, #48	; 0x30
 8001ca0:	47a8      	blx	r5
 8001ca2:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001ca4:	2f00      	cmp	r7, #0
 8001ca6:	f47f af2e 	bne.w	8001b06 <PrintHex+0x136>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8001caa:	2900      	cmp	r1, #0
 8001cac:	d055      	beq.n	8001d5a <PrintHex+0x38a>
                                if (flag0) print_byte_out('0');
 8001cae:	b17e      	cbz	r6, 8001cd0 <PrintHex+0x300>
 8001cb0:	2030      	movs	r0, #48	; 0x30
 8001cb2:	47a8      	blx	r5
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	e6fc      	b.n	8001ab2 <PrintHex+0xe2>
 8001cb8:	2030      	movs	r0, #48	; 0x30
 8001cba:	47a8      	blx	r5
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	e70d      	b.n	8001adc <PrintHex+0x10c>
 8001cc0:	080015c1 	.word	0x080015c1
 8001cc4:	08001569 	.word	0x08001569
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8001cc8:	2030      	movs	r0, #48	; 0x30
 8001cca:	47a8      	blx	r5
 8001ccc:	2201      	movs	r2, #1
 8001cce:	e6fd      	b.n	8001acc <PrintHex+0xfc>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8001cd0:	2020      	movs	r0, #32
 8001cd2:	47a8      	blx	r5
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	e6ec      	b.n	8001ab2 <PrintHex+0xe2>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8001cd8:	2020      	movs	r0, #32
 8001cda:	47a8      	blx	r5
 8001cdc:	2101      	movs	r1, #1
 8001cde:	e70f      	b.n	8001b00 <PrintHex+0x130>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001ce0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001ce4:	e786      	b.n	8001bf4 <PrintHex+0x224>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8001ce6:	2900      	cmp	r1, #0
 8001ce8:	d03d      	beq.n	8001d66 <PrintHex+0x396>
                                if (flag0) print_byte_out('0');
 8001cea:	b17e      	cbz	r6, 8001d0c <PrintHex+0x33c>
 8001cec:	2030      	movs	r0, #48	; 0x30
 8001cee:	47a8      	blx	r5
 8001cf0:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001cf2:	2f00      	cmp	r7, #0
 8001cf4:	f47f aed0 	bne.w	8001a98 <PrintHex+0xc8>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8001cf8:	b319      	cbz	r1, 8001d42 <PrintHex+0x372>
                                if (flag0) print_byte_out('0');
 8001cfa:	b11e      	cbz	r6, 8001d04 <PrintHex+0x334>
 8001cfc:	2030      	movs	r0, #48	; 0x30
 8001cfe:	47a8      	blx	r5
 8001d00:	2101      	movs	r1, #1
 8001d02:	e6d0      	b.n	8001aa6 <PrintHex+0xd6>
                                else       print_byte_out(' ');
 8001d04:	2020      	movs	r0, #32
 8001d06:	47a8      	blx	r5
 8001d08:	2101      	movs	r1, #1
 8001d0a:	e6cc      	b.n	8001aa6 <PrintHex+0xd6>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8001d0c:	2020      	movs	r0, #32
 8001d0e:	47a8      	blx	r5
 8001d10:	2101      	movs	r1, #1
 8001d12:	e6be      	b.n	8001a92 <PrintHex+0xc2>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8001d14:	b13e      	cbz	r6, 8001d26 <PrintHex+0x356>
 8001d16:	491a      	ldr	r1, [pc, #104]	; (8001d80 <PrintHex+0x3b0>)
 8001d18:	2030      	movs	r0, #48	; 0x30
 8001d1a:	4788      	blx	r1
 8001d1c:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 8001d1e:	9802      	ldr	r0, [sp, #8]
 8001d20:	1e43      	subs	r3, r0, #1
 8001d22:	9302      	str	r3, [sp, #8]
 8001d24:	e696      	b.n	8001a54 <PrintHex+0x84>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8001d26:	2020      	movs	r0, #32
 8001d28:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <PrintHex+0x3b0>)
 8001d2a:	4790      	blx	r2
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	e7f6      	b.n	8001d1e <PrintHex+0x34e>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8001d30:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001d34:	e7ac      	b.n	8001c90 <PrintHex+0x2c0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001d36:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001d3a:	e740      	b.n	8001bbe <PrintHex+0x1ee>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001d3c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001d40:	e789      	b.n	8001c56 <PrintHex+0x286>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001d42:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001d46:	e6ac      	b.n	8001aa2 <PrintHex+0xd2>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001d48:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001d4c:	e6bc      	b.n	8001ac8 <PrintHex+0xf8>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001d4e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001d52:	e6c1      	b.n	8001ad8 <PrintHex+0x108>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001d54:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8001d58:	e6d0      	b.n	8001afc <PrintHex+0x12c>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001d5a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001d5e:	e6d8      	b.n	8001b12 <PrintHex+0x142>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001d60:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8001d64:	e704      	b.n	8001b70 <PrintHex+0x1a0>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001d66:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001d6a:	e690      	b.n	8001a8e <PrintHex+0xbe>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001d6c:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8001d70:	e712      	b.n	8001b98 <PrintHex+0x1c8>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001d72:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001d76:	e75d      	b.n	8001c34 <PrintHex+0x264>
 8001d78:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001d7c:	e747      	b.n	8001c0e <PrintHex+0x23e>
 8001d7e:	bf00      	nop
 8001d80:	08001569 	.word	0x08001569

08001d84 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 8001d84:	b40f      	push	{r0, r1, r2, r3}
 8001d86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d8a:	b085      	sub	sp, #20
	int		i;
	va_list args;
	char	*s=fmt;
 8001d8c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8001d90:	4bac      	ldr	r3, [pc, #688]	; (8002044 <Lb_printf+0x2c0>)
 8001d92:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 8001d94:	f859 4b04 	ldr.w	r4, [r9], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8001d98:	4dab      	ldr	r5, [pc, #684]	; (8002048 <Lb_printf+0x2c4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8001d9a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8002054 <Lb_printf+0x2d0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8001d9e:	4fab      	ldr	r7, [pc, #684]	; (800204c <Lb_printf+0x2c8>)
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8001da0:	4eab      	ldr	r6, [pc, #684]	; (8002050 <Lb_printf+0x2cc>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8001da2:	701a      	strb	r2, [r3, #0]
	
	while (*s)
 8001da4:	7820      	ldrb	r0, [r4, #0]
 8001da6:	2800      	cmp	r0, #0
 8001da8:	f000 80be 	beq.w	8001f28 <Lb_printf+0x1a4>
	{
		if (*s=='%')
 8001dac:	2825      	cmp	r0, #37	; 0x25
 8001dae:	f040 80c0 	bne.w	8001f32 <Lb_printf+0x1ae>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001db2:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8001db4:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001db6:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8001dba:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8001dbc:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001dc0:	f240 80d6 	bls.w	8001f70 <Lb_printf+0x1ec>
 8001dc4:	2a78      	cmp	r2, #120	; 0x78
 8001dc6:	f000 80dd 	beq.w	8001f84 <Lb_printf+0x200>
 8001dca:	2a73      	cmp	r2, #115	; 0x73
 8001dcc:	f000 80dd 	beq.w	8001f8a <Lb_printf+0x206>
 8001dd0:	2a25      	cmp	r2, #37	; 0x25
 8001dd2:	f000 80dd 	beq.w	8001f90 <Lb_printf+0x20c>
 8001dd6:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001dd8:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001ddc:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001de0:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001de2:	2a01      	cmp	r2, #1
 8001de4:	f240 80d6 	bls.w	8001f94 <Lb_printf+0x210>
 8001de8:	2978      	cmp	r1, #120	; 0x78
 8001dea:	f000 80d6 	beq.w	8001f9a <Lb_printf+0x216>
 8001dee:	2973      	cmp	r1, #115	; 0x73
 8001df0:	f000 80d6 	beq.w	8001fa0 <Lb_printf+0x21c>
 8001df4:	2925      	cmp	r1, #37	; 0x25
 8001df6:	f000 80d6 	beq.w	8001fa6 <Lb_printf+0x222>
 8001dfa:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001dfc:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001e00:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001e04:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001e06:	2901      	cmp	r1, #1
 8001e08:	f240 80cf 	bls.w	8001faa <Lb_printf+0x226>
 8001e0c:	2a78      	cmp	r2, #120	; 0x78
 8001e0e:	f000 80cf 	beq.w	8001fb0 <Lb_printf+0x22c>
 8001e12:	2a73      	cmp	r2, #115	; 0x73
 8001e14:	f000 80cf 	beq.w	8001fb6 <Lb_printf+0x232>
 8001e18:	2a25      	cmp	r2, #37	; 0x25
 8001e1a:	f000 80cf 	beq.w	8001fbc <Lb_printf+0x238>
 8001e1e:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001e20:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001e24:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001e28:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001e2a:	2a01      	cmp	r2, #1
 8001e2c:	f240 80c8 	bls.w	8001fc0 <Lb_printf+0x23c>
 8001e30:	2978      	cmp	r1, #120	; 0x78
 8001e32:	f000 80c8 	beq.w	8001fc6 <Lb_printf+0x242>
 8001e36:	2973      	cmp	r1, #115	; 0x73
 8001e38:	f000 80c8 	beq.w	8001fcc <Lb_printf+0x248>
 8001e3c:	2925      	cmp	r1, #37	; 0x25
 8001e3e:	f000 80c8 	beq.w	8001fd2 <Lb_printf+0x24e>
 8001e42:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001e44:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001e48:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001e4c:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001e4e:	2901      	cmp	r1, #1
 8001e50:	f240 80c1 	bls.w	8001fd6 <Lb_printf+0x252>
 8001e54:	2a78      	cmp	r2, #120	; 0x78
 8001e56:	f000 80c1 	beq.w	8001fdc <Lb_printf+0x258>
 8001e5a:	2a73      	cmp	r2, #115	; 0x73
 8001e5c:	f000 80c1 	beq.w	8001fe2 <Lb_printf+0x25e>
 8001e60:	2a25      	cmp	r2, #37	; 0x25
 8001e62:	f000 80c1 	beq.w	8001fe8 <Lb_printf+0x264>
 8001e66:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001e68:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001e6c:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001e70:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001e72:	2a01      	cmp	r2, #1
 8001e74:	f240 80ba 	bls.w	8001fec <Lb_printf+0x268>
 8001e78:	2978      	cmp	r1, #120	; 0x78
 8001e7a:	f000 80ba 	beq.w	8001ff2 <Lb_printf+0x26e>
 8001e7e:	2973      	cmp	r1, #115	; 0x73
 8001e80:	f000 80ba 	beq.w	8001ff8 <Lb_printf+0x274>
 8001e84:	2925      	cmp	r1, #37	; 0x25
 8001e86:	f000 80ba 	beq.w	8001ffe <Lb_printf+0x27a>
 8001e8a:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001e8c:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001e90:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001e94:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001e96:	2901      	cmp	r1, #1
 8001e98:	f240 80b3 	bls.w	8002002 <Lb_printf+0x27e>
 8001e9c:	2a78      	cmp	r2, #120	; 0x78
 8001e9e:	f000 80b3 	beq.w	8002008 <Lb_printf+0x284>
 8001ea2:	2a73      	cmp	r2, #115	; 0x73
 8001ea4:	f000 80b3 	beq.w	800200e <Lb_printf+0x28a>
 8001ea8:	2a25      	cmp	r2, #37	; 0x25
 8001eaa:	f000 80b3 	beq.w	8002014 <Lb_printf+0x290>
 8001eae:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001eb0:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001eb4:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 8001eb8:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001eba:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001ebe:	f240 80ab 	bls.w	8002018 <Lb_printf+0x294>
 8001ec2:	2978      	cmp	r1, #120	; 0x78
 8001ec4:	f000 80ab 	beq.w	800201e <Lb_printf+0x29a>
 8001ec8:	2973      	cmp	r1, #115	; 0x73
 8001eca:	f000 80ab 	beq.w	8002024 <Lb_printf+0x2a0>
 8001ece:	2925      	cmp	r1, #37	; 0x25
 8001ed0:	f000 80ab 	beq.w	800202a <Lb_printf+0x2a6>
 8001ed4:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001ed6:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001eda:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8001ede:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001ee0:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001ee4:	f240 80a3 	bls.w	800202e <Lb_printf+0x2aa>
 8001ee8:	2a78      	cmp	r2, #120	; 0x78
 8001eea:	f000 80a3 	beq.w	8002034 <Lb_printf+0x2b0>
 8001eee:	2a73      	cmp	r2, #115	; 0x73
 8001ef0:	f000 80a3 	beq.w	800203a <Lb_printf+0x2b6>
 8001ef4:	2a25      	cmp	r2, #37	; 0x25
 8001ef6:	f000 80a3 	beq.w	8002040 <Lb_printf+0x2bc>
 8001efa:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001efc:	f88d 200d 	strb.w	r2, [sp, #13]
 8001f00:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8001f04:	1c5c      	adds	r4, r3, #1
 8001f06:	2864      	cmp	r0, #100	; 0x64
 8001f08:	d02b      	beq.n	8001f62 <Lb_printf+0x1de>
 8001f0a:	d815      	bhi.n	8001f38 <Lb_printf+0x1b4>
 8001f0c:	2825      	cmp	r0, #37	; 0x25
 8001f0e:	d01f      	beq.n	8001f50 <Lb_printf+0x1cc>
 8001f10:	2863      	cmp	r0, #99	; 0x63
 8001f12:	f47f af47 	bne.w	8001da4 <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8001f16:	f899 0000 	ldrb.w	r0, [r9]
 8001f1a:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8001f1c:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8001f1e:	f109 0904 	add.w	r9, r9, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8001f22:	2800      	cmp	r0, #0
 8001f24:	f47f af42 	bne.w	8001dac <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 8001f28:	b005      	add	sp, #20
 8001f2a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f2e:	b004      	add	sp, #16
 8001f30:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8001f32:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8001f34:	3401      	adds	r4, #1
 8001f36:	e735      	b.n	8001da4 <Lb_printf+0x20>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8001f38:	2873      	cmp	r0, #115	; 0x73
 8001f3a:	d00b      	beq.n	8001f54 <Lb_printf+0x1d0>
 8001f3c:	2878      	cmp	r0, #120	; 0x78
 8001f3e:	f47f af31 	bne.w	8001da4 <Lb_printf+0x20>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8001f42:	f8d9 1000 	ldr.w	r1, [r9]
 8001f46:	a801      	add	r0, sp, #4
 8001f48:	f109 0904 	add.w	r9, r9, #4
 8001f4c:	47b0      	blx	r6
					break;
 8001f4e:	e729      	b.n	8001da4 <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8001f50:	47a8      	blx	r5
 8001f52:	e727      	b.n	8001da4 <Lb_printf+0x20>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8001f54:	f8d9 1000 	ldr.w	r1, [r9]
 8001f58:	a801      	add	r0, sp, #4
 8001f5a:	f109 0904 	add.w	r9, r9, #4
 8001f5e:	47b8      	blx	r7
 					break;
 8001f60:	e720      	b.n	8001da4 <Lb_printf+0x20>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8001f62:	f8d9 1000 	ldr.w	r1, [r9]
 8001f66:	a801      	add	r0, sp, #4
 8001f68:	f109 0904 	add.w	r9, r9, #4
 8001f6c:	47c0      	blx	r8
					break;
 8001f6e:	e719      	b.n	8001da4 <Lb_printf+0x20>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001f70:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001f72:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8001f74:	aa04      	add	r2, sp, #16
 8001f76:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 8001f78:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8001f7a:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 8001f7e:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8001f82:	e7bf      	b.n	8001f04 <Lb_printf+0x180>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001f84:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001f86:	2078      	movs	r0, #120	; 0x78
 8001f88:	e7f4      	b.n	8001f74 <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001f8a:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001f8c:	2073      	movs	r0, #115	; 0x73
 8001f8e:	e7f1      	b.n	8001f74 <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8001f90:	2401      	movs	r4, #1
 8001f92:	e7ef      	b.n	8001f74 <Lb_printf+0x1f0>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001f94:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001f96:	2402      	movs	r4, #2
 8001f98:	e7ec      	b.n	8001f74 <Lb_printf+0x1f0>
 8001f9a:	2402      	movs	r4, #2
 8001f9c:	2078      	movs	r0, #120	; 0x78
 8001f9e:	e7e9      	b.n	8001f74 <Lb_printf+0x1f0>
 8001fa0:	2402      	movs	r4, #2
 8001fa2:	2073      	movs	r0, #115	; 0x73
 8001fa4:	e7e6      	b.n	8001f74 <Lb_printf+0x1f0>
 8001fa6:	2402      	movs	r4, #2
 8001fa8:	e7e4      	b.n	8001f74 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001faa:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001fac:	2403      	movs	r4, #3
 8001fae:	e7e1      	b.n	8001f74 <Lb_printf+0x1f0>
 8001fb0:	2403      	movs	r4, #3
 8001fb2:	2078      	movs	r0, #120	; 0x78
 8001fb4:	e7de      	b.n	8001f74 <Lb_printf+0x1f0>
 8001fb6:	2403      	movs	r4, #3
 8001fb8:	2073      	movs	r0, #115	; 0x73
 8001fba:	e7db      	b.n	8001f74 <Lb_printf+0x1f0>
 8001fbc:	2403      	movs	r4, #3
 8001fbe:	e7d9      	b.n	8001f74 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001fc0:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001fc2:	2404      	movs	r4, #4
 8001fc4:	e7d6      	b.n	8001f74 <Lb_printf+0x1f0>
 8001fc6:	2404      	movs	r4, #4
 8001fc8:	2078      	movs	r0, #120	; 0x78
 8001fca:	e7d3      	b.n	8001f74 <Lb_printf+0x1f0>
 8001fcc:	2404      	movs	r4, #4
 8001fce:	2073      	movs	r0, #115	; 0x73
 8001fd0:	e7d0      	b.n	8001f74 <Lb_printf+0x1f0>
 8001fd2:	2404      	movs	r4, #4
 8001fd4:	e7ce      	b.n	8001f74 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001fd6:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001fd8:	2405      	movs	r4, #5
 8001fda:	e7cb      	b.n	8001f74 <Lb_printf+0x1f0>
 8001fdc:	2405      	movs	r4, #5
 8001fde:	2078      	movs	r0, #120	; 0x78
 8001fe0:	e7c8      	b.n	8001f74 <Lb_printf+0x1f0>
 8001fe2:	2405      	movs	r4, #5
 8001fe4:	2073      	movs	r0, #115	; 0x73
 8001fe6:	e7c5      	b.n	8001f74 <Lb_printf+0x1f0>
 8001fe8:	2405      	movs	r4, #5
 8001fea:	e7c3      	b.n	8001f74 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8001fec:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8001fee:	2406      	movs	r4, #6
 8001ff0:	e7c0      	b.n	8001f74 <Lb_printf+0x1f0>
 8001ff2:	2406      	movs	r4, #6
 8001ff4:	2078      	movs	r0, #120	; 0x78
 8001ff6:	e7bd      	b.n	8001f74 <Lb_printf+0x1f0>
 8001ff8:	2406      	movs	r4, #6
 8001ffa:	2073      	movs	r0, #115	; 0x73
 8001ffc:	e7ba      	b.n	8001f74 <Lb_printf+0x1f0>
 8001ffe:	2406      	movs	r4, #6
 8002000:	e7b8      	b.n	8001f74 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002002:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002004:	2407      	movs	r4, #7
 8002006:	e7b5      	b.n	8001f74 <Lb_printf+0x1f0>
 8002008:	2407      	movs	r4, #7
 800200a:	2078      	movs	r0, #120	; 0x78
 800200c:	e7b2      	b.n	8001f74 <Lb_printf+0x1f0>
 800200e:	2407      	movs	r4, #7
 8002010:	2073      	movs	r0, #115	; 0x73
 8002012:	e7af      	b.n	8001f74 <Lb_printf+0x1f0>
 8002014:	2407      	movs	r4, #7
 8002016:	e7ad      	b.n	8001f74 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002018:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800201a:	2408      	movs	r4, #8
 800201c:	e7aa      	b.n	8001f74 <Lb_printf+0x1f0>
 800201e:	2408      	movs	r4, #8
 8002020:	2078      	movs	r0, #120	; 0x78
 8002022:	e7a7      	b.n	8001f74 <Lb_printf+0x1f0>
 8002024:	2408      	movs	r4, #8
 8002026:	2073      	movs	r0, #115	; 0x73
 8002028:	e7a4      	b.n	8001f74 <Lb_printf+0x1f0>
 800202a:	2408      	movs	r4, #8
 800202c:	e7a2      	b.n	8001f74 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800202e:	4610      	mov	r0, r2
 8002030:	2409      	movs	r4, #9
 8002032:	e79f      	b.n	8001f74 <Lb_printf+0x1f0>
 8002034:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002036:	2078      	movs	r0, #120	; 0x78
 8002038:	e79c      	b.n	8001f74 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800203a:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800203c:	2073      	movs	r0, #115	; 0x73
 800203e:	e799      	b.n	8001f74 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002040:	2409      	movs	r4, #9
 8002042:	e797      	b.n	8001f74 <Lb_printf+0x1f0>
 8002044:	20000404 	.word	0x20000404
 8002048:	08001569 	.word	0x08001569
 800204c:	080015a1 	.word	0x080015a1
 8002050:	080019d1 	.word	0x080019d1
 8002054:	08001605 	.word	0x08001605

08002058 <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8002058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 800205c:	4cab      	ldr	r4, [pc, #684]	; (800230c <Lb_vsprintf+0x2b4>)
	StrPrintBufIndex = 0;
 800205e:	4eac      	ldr	r6, [pc, #688]	; (8002310 <Lb_vsprintf+0x2b8>)
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8002060:	6020      	str	r0, [r4, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8002062:	4bac      	ldr	r3, [pc, #688]	; (8002314 <Lb_vsprintf+0x2bc>)
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8002064:	2000      	movs	r0, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8002066:	4615      	mov	r5, r2
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8002068:	6030      	str	r0, [r6, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 800206a:	2201      	movs	r2, #1



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800206c:	4eaa      	ldr	r6, [pc, #680]	; (8002318 <Lb_vsprintf+0x2c0>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800206e:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 8002320 <Lb_vsprintf+0x2c8>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8002072:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 8002324 <Lb_vsprintf+0x2cc>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8002076:	4fa9      	ldr	r7, [pc, #676]	; (800231c <Lb_vsprintf+0x2c4>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8002078:	b085      	sub	sp, #20
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 800207a:	701a      	strb	r2, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
	int		i;
	char	*s=fmt;
 800207c:	460c      	mov	r4, r1
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 800207e:	7820      	ldrb	r0, [r4, #0]
 8002080:	2800      	cmp	r0, #0
 8002082:	f000 80bc 	beq.w	80021fe <Lb_vsprintf+0x1a6>
	{
		if (*s=='%')
 8002086:	2825      	cmp	r0, #37	; 0x25
 8002088:	f040 80bc 	bne.w	8002204 <Lb_vsprintf+0x1ac>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800208c:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 800208e:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002090:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8002094:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8002096:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800209a:	f240 80cc 	bls.w	8002236 <Lb_vsprintf+0x1de>
 800209e:	2a78      	cmp	r2, #120	; 0x78
 80020a0:	f000 80d3 	beq.w	800224a <Lb_vsprintf+0x1f2>
 80020a4:	2a73      	cmp	r2, #115	; 0x73
 80020a6:	f000 80d3 	beq.w	8002250 <Lb_vsprintf+0x1f8>
 80020aa:	2a25      	cmp	r2, #37	; 0x25
 80020ac:	f000 80d3 	beq.w	8002256 <Lb_vsprintf+0x1fe>
 80020b0:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80020b2:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80020b6:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80020ba:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80020bc:	2a01      	cmp	r2, #1
 80020be:	f240 80cc 	bls.w	800225a <Lb_vsprintf+0x202>
 80020c2:	2978      	cmp	r1, #120	; 0x78
 80020c4:	f000 80cc 	beq.w	8002260 <Lb_vsprintf+0x208>
 80020c8:	2973      	cmp	r1, #115	; 0x73
 80020ca:	f000 80cc 	beq.w	8002266 <Lb_vsprintf+0x20e>
 80020ce:	2925      	cmp	r1, #37	; 0x25
 80020d0:	f000 80cc 	beq.w	800226c <Lb_vsprintf+0x214>
 80020d4:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80020d6:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80020da:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80020de:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80020e0:	2901      	cmp	r1, #1
 80020e2:	f240 80c5 	bls.w	8002270 <Lb_vsprintf+0x218>
 80020e6:	2a78      	cmp	r2, #120	; 0x78
 80020e8:	f000 80c5 	beq.w	8002276 <Lb_vsprintf+0x21e>
 80020ec:	2a73      	cmp	r2, #115	; 0x73
 80020ee:	f000 80c5 	beq.w	800227c <Lb_vsprintf+0x224>
 80020f2:	2a25      	cmp	r2, #37	; 0x25
 80020f4:	f000 80c5 	beq.w	8002282 <Lb_vsprintf+0x22a>
 80020f8:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80020fa:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80020fe:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002102:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002104:	2a01      	cmp	r2, #1
 8002106:	f240 80be 	bls.w	8002286 <Lb_vsprintf+0x22e>
 800210a:	2978      	cmp	r1, #120	; 0x78
 800210c:	f000 80be 	beq.w	800228c <Lb_vsprintf+0x234>
 8002110:	2973      	cmp	r1, #115	; 0x73
 8002112:	f000 80be 	beq.w	8002292 <Lb_vsprintf+0x23a>
 8002116:	2925      	cmp	r1, #37	; 0x25
 8002118:	f000 80be 	beq.w	8002298 <Lb_vsprintf+0x240>
 800211c:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800211e:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002122:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002126:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002128:	2901      	cmp	r1, #1
 800212a:	f240 80b7 	bls.w	800229c <Lb_vsprintf+0x244>
 800212e:	2a78      	cmp	r2, #120	; 0x78
 8002130:	f000 80b7 	beq.w	80022a2 <Lb_vsprintf+0x24a>
 8002134:	2a73      	cmp	r2, #115	; 0x73
 8002136:	f000 80b7 	beq.w	80022a8 <Lb_vsprintf+0x250>
 800213a:	2a25      	cmp	r2, #37	; 0x25
 800213c:	f000 80b7 	beq.w	80022ae <Lb_vsprintf+0x256>
 8002140:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002142:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002146:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800214a:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800214c:	2a01      	cmp	r2, #1
 800214e:	f240 80b0 	bls.w	80022b2 <Lb_vsprintf+0x25a>
 8002152:	2978      	cmp	r1, #120	; 0x78
 8002154:	f000 80b0 	beq.w	80022b8 <Lb_vsprintf+0x260>
 8002158:	2973      	cmp	r1, #115	; 0x73
 800215a:	f000 80b0 	beq.w	80022be <Lb_vsprintf+0x266>
 800215e:	2925      	cmp	r1, #37	; 0x25
 8002160:	f000 80b0 	beq.w	80022c4 <Lb_vsprintf+0x26c>
 8002164:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002166:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800216a:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800216e:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002170:	2901      	cmp	r1, #1
 8002172:	f240 80a9 	bls.w	80022c8 <Lb_vsprintf+0x270>
 8002176:	2a78      	cmp	r2, #120	; 0x78
 8002178:	f000 80a9 	beq.w	80022ce <Lb_vsprintf+0x276>
 800217c:	2a73      	cmp	r2, #115	; 0x73
 800217e:	f000 80a9 	beq.w	80022d4 <Lb_vsprintf+0x27c>
 8002182:	2a25      	cmp	r2, #37	; 0x25
 8002184:	f000 80a9 	beq.w	80022da <Lb_vsprintf+0x282>
 8002188:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800218a:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800218e:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 8002192:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002194:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002198:	f240 80a1 	bls.w	80022de <Lb_vsprintf+0x286>
 800219c:	2978      	cmp	r1, #120	; 0x78
 800219e:	f000 80a1 	beq.w	80022e4 <Lb_vsprintf+0x28c>
 80021a2:	2973      	cmp	r1, #115	; 0x73
 80021a4:	f000 80a1 	beq.w	80022ea <Lb_vsprintf+0x292>
 80021a8:	2925      	cmp	r1, #37	; 0x25
 80021aa:	f000 80a1 	beq.w	80022f0 <Lb_vsprintf+0x298>
 80021ae:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80021b0:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80021b4:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 80021b8:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80021ba:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80021be:	f240 8099 	bls.w	80022f4 <Lb_vsprintf+0x29c>
 80021c2:	2a78      	cmp	r2, #120	; 0x78
 80021c4:	f000 8099 	beq.w	80022fa <Lb_vsprintf+0x2a2>
 80021c8:	2a73      	cmp	r2, #115	; 0x73
 80021ca:	f000 8099 	beq.w	8002300 <Lb_vsprintf+0x2a8>
 80021ce:	2a25      	cmp	r2, #37	; 0x25
 80021d0:	f000 8099 	beq.w	8002306 <Lb_vsprintf+0x2ae>
 80021d4:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80021d6:	f88d 200d 	strb.w	r2, [sp, #13]
 80021da:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80021de:	1c5c      	adds	r4, r3, #1
 80021e0:	2864      	cmp	r0, #100	; 0x64
 80021e2:	d023      	beq.n	800222c <Lb_vsprintf+0x1d4>
 80021e4:	d811      	bhi.n	800220a <Lb_vsprintf+0x1b2>
 80021e6:	2825      	cmp	r0, #37	; 0x25
 80021e8:	d019      	beq.n	800221e <Lb_vsprintf+0x1c6>
 80021ea:	2863      	cmp	r0, #99	; 0x63
 80021ec:	f47f af47 	bne.w	800207e <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80021f0:	7828      	ldrb	r0, [r5, #0]
 80021f2:	47b0      	blx	r6
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 80021f4:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 80021f6:	3504      	adds	r5, #4
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 80021f8:	2800      	cmp	r0, #0
 80021fa:	f47f af44 	bne.w	8002086 <Lb_vsprintf+0x2e>
			s++;
		}
	}
	
	return;
}
 80021fe:	b005      	add	sp, #20
 8002200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8002204:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8002206:	3401      	adds	r4, #1
 8002208:	e739      	b.n	800207e <Lb_vsprintf+0x26>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800220a:	2873      	cmp	r0, #115	; 0x73
 800220c:	d009      	beq.n	8002222 <Lb_vsprintf+0x1ca>
 800220e:	2878      	cmp	r0, #120	; 0x78
 8002210:	f47f af35 	bne.w	800207e <Lb_vsprintf+0x26>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8002214:	6829      	ldr	r1, [r5, #0]
 8002216:	a801      	add	r0, sp, #4
 8002218:	3504      	adds	r5, #4
 800221a:	47b8      	blx	r7
					break;
 800221c:	e72f      	b.n	800207e <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800221e:	47b0      	blx	r6
 8002220:	e72d      	b.n	800207e <Lb_vsprintf+0x26>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8002222:	6829      	ldr	r1, [r5, #0]
 8002224:	a801      	add	r0, sp, #4
 8002226:	3504      	adds	r5, #4
 8002228:	47c0      	blx	r8
 					break;
 800222a:	e728      	b.n	800207e <Lb_vsprintf+0x26>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800222c:	6829      	ldr	r1, [r5, #0]
 800222e:	a801      	add	r0, sp, #4
 8002230:	3504      	adds	r5, #4
 8002232:	47c8      	blx	r9
					break;
 8002234:	e723      	b.n	800207e <Lb_vsprintf+0x26>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002236:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8002238:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800223a:	aa04      	add	r2, sp, #16
 800223c:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 800223e:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8002240:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 8002244:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8002248:	e7c9      	b.n	80021de <Lb_vsprintf+0x186>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800224a:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800224c:	2078      	movs	r0, #120	; 0x78
 800224e:	e7f4      	b.n	800223a <Lb_vsprintf+0x1e2>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8002250:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002252:	2073      	movs	r0, #115	; 0x73
 8002254:	e7f1      	b.n	800223a <Lb_vsprintf+0x1e2>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8002256:	2401      	movs	r4, #1
 8002258:	e7ef      	b.n	800223a <Lb_vsprintf+0x1e2>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800225a:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800225c:	2402      	movs	r4, #2
 800225e:	e7ec      	b.n	800223a <Lb_vsprintf+0x1e2>
 8002260:	2402      	movs	r4, #2
 8002262:	2078      	movs	r0, #120	; 0x78
 8002264:	e7e9      	b.n	800223a <Lb_vsprintf+0x1e2>
 8002266:	2402      	movs	r4, #2
 8002268:	2073      	movs	r0, #115	; 0x73
 800226a:	e7e6      	b.n	800223a <Lb_vsprintf+0x1e2>
 800226c:	2402      	movs	r4, #2
 800226e:	e7e4      	b.n	800223a <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002270:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002272:	2403      	movs	r4, #3
 8002274:	e7e1      	b.n	800223a <Lb_vsprintf+0x1e2>
 8002276:	2403      	movs	r4, #3
 8002278:	2078      	movs	r0, #120	; 0x78
 800227a:	e7de      	b.n	800223a <Lb_vsprintf+0x1e2>
 800227c:	2403      	movs	r4, #3
 800227e:	2073      	movs	r0, #115	; 0x73
 8002280:	e7db      	b.n	800223a <Lb_vsprintf+0x1e2>
 8002282:	2403      	movs	r4, #3
 8002284:	e7d9      	b.n	800223a <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002286:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002288:	2404      	movs	r4, #4
 800228a:	e7d6      	b.n	800223a <Lb_vsprintf+0x1e2>
 800228c:	2404      	movs	r4, #4
 800228e:	2078      	movs	r0, #120	; 0x78
 8002290:	e7d3      	b.n	800223a <Lb_vsprintf+0x1e2>
 8002292:	2404      	movs	r4, #4
 8002294:	2073      	movs	r0, #115	; 0x73
 8002296:	e7d0      	b.n	800223a <Lb_vsprintf+0x1e2>
 8002298:	2404      	movs	r4, #4
 800229a:	e7ce      	b.n	800223a <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800229c:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800229e:	2405      	movs	r4, #5
 80022a0:	e7cb      	b.n	800223a <Lb_vsprintf+0x1e2>
 80022a2:	2405      	movs	r4, #5
 80022a4:	2078      	movs	r0, #120	; 0x78
 80022a6:	e7c8      	b.n	800223a <Lb_vsprintf+0x1e2>
 80022a8:	2405      	movs	r4, #5
 80022aa:	2073      	movs	r0, #115	; 0x73
 80022ac:	e7c5      	b.n	800223a <Lb_vsprintf+0x1e2>
 80022ae:	2405      	movs	r4, #5
 80022b0:	e7c3      	b.n	800223a <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022b2:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022b4:	2406      	movs	r4, #6
 80022b6:	e7c0      	b.n	800223a <Lb_vsprintf+0x1e2>
 80022b8:	2406      	movs	r4, #6
 80022ba:	2078      	movs	r0, #120	; 0x78
 80022bc:	e7bd      	b.n	800223a <Lb_vsprintf+0x1e2>
 80022be:	2406      	movs	r4, #6
 80022c0:	2073      	movs	r0, #115	; 0x73
 80022c2:	e7ba      	b.n	800223a <Lb_vsprintf+0x1e2>
 80022c4:	2406      	movs	r4, #6
 80022c6:	e7b8      	b.n	800223a <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022c8:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022ca:	2407      	movs	r4, #7
 80022cc:	e7b5      	b.n	800223a <Lb_vsprintf+0x1e2>
 80022ce:	2407      	movs	r4, #7
 80022d0:	2078      	movs	r0, #120	; 0x78
 80022d2:	e7b2      	b.n	800223a <Lb_vsprintf+0x1e2>
 80022d4:	2407      	movs	r4, #7
 80022d6:	2073      	movs	r0, #115	; 0x73
 80022d8:	e7af      	b.n	800223a <Lb_vsprintf+0x1e2>
 80022da:	2407      	movs	r4, #7
 80022dc:	e7ad      	b.n	800223a <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022de:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022e0:	2408      	movs	r4, #8
 80022e2:	e7aa      	b.n	800223a <Lb_vsprintf+0x1e2>
 80022e4:	2408      	movs	r4, #8
 80022e6:	2078      	movs	r0, #120	; 0x78
 80022e8:	e7a7      	b.n	800223a <Lb_vsprintf+0x1e2>
 80022ea:	2408      	movs	r4, #8
 80022ec:	2073      	movs	r0, #115	; 0x73
 80022ee:	e7a4      	b.n	800223a <Lb_vsprintf+0x1e2>
 80022f0:	2408      	movs	r4, #8
 80022f2:	e7a2      	b.n	800223a <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022f4:	4610      	mov	r0, r2
 80022f6:	2409      	movs	r4, #9
 80022f8:	e79f      	b.n	800223a <Lb_vsprintf+0x1e2>
 80022fa:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022fc:	2078      	movs	r0, #120	; 0x78
 80022fe:	e79c      	b.n	800223a <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002300:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002302:	2073      	movs	r0, #115	; 0x73
 8002304:	e799      	b.n	800223a <Lb_vsprintf+0x1e2>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002306:	2409      	movs	r4, #9
 8002308:	e797      	b.n	800223a <Lb_vsprintf+0x1e2>
 800230a:	bf00      	nop
 800230c:	200004c0 	.word	0x200004c0
 8002310:	20000400 	.word	0x20000400
 8002314:	20000404 	.word	0x20000404
 8002318:	08001569 	.word	0x08001569
 800231c:	080019d1 	.word	0x080019d1
 8002320:	08001605 	.word	0x08001605
 8002324:	080015a1 	.word	0x080015a1

08002328 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8002328:	4668      	mov	r0, sp
 800232a:	f020 0107 	bic.w	r1, r0, #7
 800232e:	468d      	mov	sp, r1
 8002330:	b579      	push	{r0, r3, r4, r5, r6, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002332:	492a      	ldr	r1, [pc, #168]	; (80023dc <zero_loop+0x62>)
 8002334:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <zero_loop+0x66>)
 8002336:	4299      	cmp	r1, r3
 8002338:	d21b      	bcs.n	8002372 <Hw_StartUp_Init+0x4a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 800233a:	1cda      	adds	r2, r3, #3
 800233c:	1d0c      	adds	r4, r1, #4
 800233e:	1b15      	subs	r5, r2, r4
 8002340:	4828      	ldr	r0, [pc, #160]	; (80023e4 <zero_loop+0x6a>)
 8002342:	f025 0203 	bic.w	r2, r5, #3
 8002346:	1d16      	adds	r6, r2, #4
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 8002348:	6805      	ldr	r5, [r0, #0]
 800234a:	2304      	movs	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800234c:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 800234e:	600d      	str	r5, [r1, #0]
 8002350:	f3c2 0280 	ubfx	r2, r2, #2, #1
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002354:	d00d      	beq.n	8002372 <Hw_StartUp_Init+0x4a>
 8002356:	b122      	cbz	r2, 8002362 <Hw_StartUp_Init+0x3a>
	{
		*(pulDest++) = *(pulSrc++);
 8002358:	6842      	ldr	r2, [r0, #4]
 800235a:	2308      	movs	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800235c:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 800235e:	6022      	str	r2, [r4, #0]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002360:	d007      	beq.n	8002372 <Hw_StartUp_Init+0x4a>
	{
		*(pulDest++) = *(pulSrc++);
 8002362:	581d      	ldr	r5, [r3, r0]
 8002364:	1d1a      	adds	r2, r3, #4
 8002366:	505d      	str	r5, [r3, r1]
 8002368:	5884      	ldr	r4, [r0, r2]
 800236a:	3308      	adds	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800236c:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 800236e:	508c      	str	r4, [r1, r2]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002370:	d1f7      	bne.n	8002362 <Hw_StartUp_Init+0x3a>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 8002372:	481e      	ldr	r0, [pc, #120]	; (80023ec <zero_loop+0x72>)
 8002374:	491e      	ldr	r1, [pc, #120]	; (80023f0 <zero_loop+0x76>)
 8002376:	f04f 0200 	mov.w	r2, #0

0800237a <zero_loop>:
 800237a:	4288      	cmp	r0, r1
 800237c:	bfb8      	it	lt
 800237e:	f840 2b04 	strlt.w	r2, [r0], #4
 8002382:	f6ff affa 	blt.w	800237a <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8002386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800238a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800238e:	6811      	ldr	r1, [r2, #0]
 8002390:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002394:	f441 3080 	orr.w	r0, r1, #65536	; 0x10000
 8002398:	6010      	str	r0, [r2, #0]
 800239a:	e004      	b.n	80023a6 <zero_loop+0x2c>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 800239c:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800239e:	0381      	lsls	r1, r0, #14
 80023a0:	d405      	bmi.n	80023ae <zero_loop+0x34>
 80023a2:	3b01      	subs	r3, #1
 80023a4:	d003      	beq.n	80023ae <zero_loop+0x34>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80023a6:	6811      	ldr	r1, [r2, #0]
 80023a8:	3b01      	subs	r3, #1
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80023aa:	0388      	lsls	r0, r1, #14
 80023ac:	d5f6      	bpl.n	800239c <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 80023ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023b2:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80023b6:	680a      	ldr	r2, [r1, #0]
 80023b8:	f042 0010 	orr.w	r0, r2, #16
 80023bc:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 80023be:	680b      	ldr	r3, [r1, #0]
 80023c0:	f023 0203 	bic.w	r2, r3, #3
 80023c4:	600a      	str	r2, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 80023c6:	6808      	ldr	r0, [r1, #0]
 80023c8:	f040 0302 	orr.w	r3, r0, #2
 80023cc:	600b      	str	r3, [r1, #0]


    main();
 80023ce:	4906      	ldr	r1, [pc, #24]	; (80023e8 <zero_loop+0x6e>)
 80023d0:	4788      	blx	r1

}
 80023d2:	e8bd 4079 	ldmia.w	sp!, {r0, r3, r4, r5, r6, lr}
 80023d6:	4685      	mov	sp, r0
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000000 	.word	0x20000000
 80023e0:	2000030c 	.word	0x2000030c
 80023e4:	080068b0 	.word	0x080068b0
 80023e8:	08000e65 	.word	0x08000e65
 80023ec:	20000400 	.word	0x20000400
 80023f0:	20001640 	.word	0x20001640

080023f4 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 80023f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 80023f6:	f242 6375 	movw	r3, #9845	; 0x2675
 80023fa:	f6c0 0300 	movt	r3, #2048	; 0x800
 80023fe:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 8002400:	f642 00b1 	movw	r0, #10417	; 0x28b1
 8002404:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002408:	4780      	blx	r0
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800240a:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800240e:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8002412:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8002416:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800241a:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800241e:	f241 0104 	movw	r1, #4100	; 0x1004
 8002422:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8002426:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 800242a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800242e:	f2c3 3044 	movt	r0, #13124	; 0x3344
 8002432:	f2c4 0101 	movt	r1, #16385	; 0x4001
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8002436:	f2c4 0601 	movt	r6, #16385	; 0x4001
 800243a:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800243e:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8002442:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 8002446:	f243 53cd 	movw	r3, #13773	; 0x35cd
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800244a:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 800244e:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8002452:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8002454:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8002456:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8002458:	6008      	str	r0, [r1, #0]
	
	Hw_DMA_Init();
 800245a:	4798      	blx	r3
	Hw_Uart_Init();
 800245c:	f242 51a5 	movw	r1, #9637	; 0x25a5
 8002460:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002464:	4788      	blx	r1
	Hw_Led_Init();
 8002466:	f242 7009 	movw	r0, #9993	; 0x2709
 800246a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800246e:	4780      	blx	r0
	Hw_Timer_Init();
 8002470:	f642 1201 	movw	r2, #10497	; 0x2901
 8002474:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002478:	4790      	blx	r2
	Hw_Si47xx_Init();
 800247a:	f642 535d 	movw	r3, #11613	; 0x2d5d
 800247e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002482:	4798      	blx	r3
	Hw_N5110G_Init();
 8002484:	f642 7185 	movw	r1, #12165	; 0x2f85
 8002488:	f6c0 0100 	movt	r1, #2048	; 0x800
 800248c:	4788      	blx	r1
	Hw_I2C_Init();
 800248e:	f642 4051 	movw	r0, #11345	; 0x2c51
 8002492:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002496:	4780      	blx	r0
	
	Hw_VCom_Init();
 8002498:	f642 4225 	movw	r2, #11301	; 0x2c25
 800249c:	f6c0 0200 	movt	r2, #2048	; 0x800
 80024a0:	4790      	blx	r2

	Hw_IMU_Init();
 80024a2:	f643 73e9 	movw	r3, #16361	; 0x3fe9
 80024a6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80024aa:	4798      	blx	r3
 80024ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024ae:	bf00      	nop

080024b0 <Hw_Wait>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
 80024b0:	b082      	sub	sp, #8
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80024b2:	2300      	movs	r3, #0
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	9901      	ldr	r1, [sp, #4]
 80024b8:	4288      	cmp	r0, r1
 80024ba:	d905      	bls.n	80024c8 <Hw_Wait+0x18>
 80024bc:	9a01      	ldr	r2, [sp, #4]
 80024be:	1c53      	adds	r3, r2, #1
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	9901      	ldr	r1, [sp, #4]
 80024c4:	4281      	cmp	r1, r0
 80024c6:	d3f9      	bcc.n	80024bc <Hw_Wait+0xc>
}
 80024c8:	b002      	add	sp, #8
 80024ca:	4770      	bx	lr

080024cc <Hw_Wait_ms>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 80024cc:	f241 7370 	movw	r3, #6000	; 0x1770
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
 80024d0:	b082      	sub	sp, #8
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80024d2:	2100      	movs	r1, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 80024d4:	fb03 f000 	mul.w	r0, r3, r0
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80024d8:	9101      	str	r1, [sp, #4]
 80024da:	9a01      	ldr	r2, [sp, #4]
 80024dc:	4290      	cmp	r0, r2
 80024de:	d905      	bls.n	80024ec <Hw_Wait_ms+0x20>
 80024e0:	9b01      	ldr	r3, [sp, #4]
 80024e2:	1c59      	adds	r1, r3, #1
 80024e4:	9101      	str	r1, [sp, #4]
 80024e6:	9a01      	ldr	r2, [sp, #4]
 80024e8:	4290      	cmp	r0, r2
 80024ea:	d8f9      	bhi.n	80024e0 <Hw_Wait_ms+0x14>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
    Hw_Wait_Usec( msec*1000 );
}
 80024ec:	b002      	add	sp, #8
 80024ee:	4770      	bx	lr

080024f0 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80024f0:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80024f2:	f643 0304 	movw	r3, #14340	; 0x3804
 80024f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80024fa:	6818      	ldr	r0, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80024fc:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80024fe:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 8002500:	f242 72c1 	movw	r2, #10177	; 0x27c1
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8002504:	f801 0d01 	strb.w	r0, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 8002508:	f6c0 0200 	movt	r2, #2048	; 0x800
 800250c:	2000      	movs	r0, #0
 800250e:	4790      	blx	r2
}
 8002510:	b003      	add	sp, #12
 8002512:	bd00      	pop	{pc}

08002514 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8002514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8002518:	f241 0618 	movw	r6, #4120	; 0x1018
 800251c:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8002520:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8002522:	f240 43c4 	movw	r3, #1220	; 0x4c4
 8002526:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800252a:	f643 040c 	movw	r4, #14348	; 0x380c
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800252e:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 8002532:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8002536:	f643 0708 	movw	r7, #14344	; 0x3808
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 800253a:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 800253c:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800253e:	f2c4 0401 	movt	r4, #16385	; 0x4001
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002542:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8002544:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002548:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 800254c:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8002550:	200c      	movs	r0, #12
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8002552:	f240 2171 	movw	r1, #625	; 0x271
 8002556:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800255a:	f24e 1504 	movw	r5, #57604	; 0xe104
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800255e:	f8c6 8000 	str.w	r8, [r6]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8002562:	f2ce 0500 	movt	r5, #57344	; 0xe000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8002566:	6020      	str	r0, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002568:	f8cc 2000 	str.w	r2, [ip]
	REG_USART1_CR3  = 0;
 800256c:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8002570:	6039      	str	r1, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8002572:	682b      	ldr	r3, [r5, #0]
 8002574:	f043 0020 	orr.w	r0, r3, #32
 8002578:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800257a:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800257c:	f642 03c5 	movw	r3, #10437	; 0x28c5
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8002580:	f041 0020 	orr.w	r0, r1, #32
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8002584:	f242 41f1 	movw	r1, #9457	; 0x24f1
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8002588:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800258a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800258e:	2025      	movs	r0, #37	; 0x25
 8002590:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002594:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8002596:	6822      	ldr	r2, [r4, #0]
 8002598:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 800259c:	6021      	str	r1, [r4, #0]
 800259e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025a2:	bf00      	nop

080025a4 <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 80025a4:	f242 7361 	movw	r3, #10081	; 0x2761
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 80025a8:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 80025aa:	f6c0 0300 	movt	r3, #2048	; 0x800
 80025ae:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80025b0:	f240 43c4 	movw	r3, #1220	; 0x4c4
 80025b4:	2200      	movs	r2, #0
 80025b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 80025ba:	f242 5415 	movw	r4, #9493	; 0x2515
 80025be:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80025c2:	4611      	mov	r1, r2
 80025c4:	f6c0 0400 	movt	r4, #2048	; 0x800
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80025c8:	605a      	str	r2, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80025ca:	609a      	str	r2, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80025cc:	611a      	str	r2, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80025ce:	615a      	str	r2, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80025d0:	61da      	str	r2, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80025d2:	621a      	str	r2, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80025d8:	635a      	str	r2, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80025da:	639a      	str	r2, [r3, #56]	; 0x38
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 80025dc:	47a0      	blx	r4
 80025de:	bd10      	pop	{r4, pc}

080025e0 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 80025e0:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 80025e2:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 80025e4:	b083      	sub	sp, #12
 80025e6:	4d08      	ldr	r5, [pc, #32]	; (8002608 <Hw_Uart_Getch+0x28>)
 80025e8:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 80025ea:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 80025ee:	4620      	mov	r0, r4
 80025f0:	47a8      	blx	r5
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d0fb      	beq.n	80025ee <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 80025f6:	4620      	mov	r0, r4
 80025f8:	f10d 0107 	add.w	r1, sp, #7
 80025fc:	4a03      	ldr	r2, [pc, #12]	; (800260c <Hw_Uart_Getch+0x2c>)
 80025fe:	4790      	blx	r2

	return Uart_GetData;
}
 8002600:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002604:	b003      	add	sp, #12
 8002606:	bd30      	pop	{r4, r5, pc}
 8002608:	08002791 	.word	0x08002791
 800260c:	08002839 	.word	0x08002839

08002610 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 8002610:	280a      	cmp	r0, #10
 8002612:	d00d      	beq.n	8002630 <print_byte+0x20>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8002614:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002618:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800261c:	6813      	ldr	r3, [r2, #0]
 800261e:	0619      	lsls	r1, r3, #24
 8002620:	d5fc      	bpl.n	800261c <print_byte+0xc>
    
    REG_USART1_DR = Uart_PutData;
 8002622:	f643 0104 	movw	r1, #14340	; 0x3804
 8002626:	b2c0      	uxtb	r0, r0
 8002628:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800262c:	6008      	str	r0, [r1, #0]
 800262e:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8002630:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002634:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002638:	6813      	ldr	r3, [r2, #0]
 800263a:	061b      	lsls	r3, r3, #24
 800263c:	d5fc      	bpl.n	8002638 <print_byte+0x28>
    
    REG_USART1_DR = Uart_PutData;
 800263e:	f643 0104 	movw	r1, #14340	; 0x3804
 8002642:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8002646:	220d      	movs	r2, #13
 8002648:	600a      	str	r2, [r1, #0]
 800264a:	e7e3      	b.n	8002614 <print_byte+0x4>

0800264c <get_byte>:
#endif    
}


char get_byte(void)
{
 800264c:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 800264e:	f242 53e1 	movw	r3, #9697	; 0x25e1
 8002652:	2000      	movs	r0, #0
 8002654:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002658:	4798      	blx	r3
#endif
	
	return Ch;
}
 800265a:	bd08      	pop	{r3, pc}

0800265c <get_byte_check>:


char get_byte_check(void)
{
 800265c:	b508      	push	{r3, lr}
	char Ch = FALSE;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 ) Ch = TRUE;	
 800265e:	f242 7391 	movw	r3, #10129	; 0x2791
 8002662:	2000      	movs	r0, #0
 8002664:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002668:	4798      	blx	r3
#endif
	
	return Ch;
}
 800266a:	3000      	adds	r0, #0
 800266c:	bf18      	it	ne
 800266e:	2001      	movne	r0, #1
 8002670:	bd08      	pop	{r3, pc}
 8002672:	bf00      	nop

08002674 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8002674:	f241 0304 	movw	r3, #4100	; 0x1004
 8002678:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800267c:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800267e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8002682:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 8002686:	f020 02f0 	bic.w	r2, r0, #240	; 0xf0
 800268a:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 800268c:	6818      	ldr	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800268e:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8002692:	f440 12e8 	orr.w	r2, r0, #1900544	; 0x1d0000
 8002696:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8002698:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800269a:	4608      	mov	r0, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800269c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80026a0:	600a      	str	r2, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 80026a2:	6801      	ldr	r1, [r0, #0]
 80026a4:	018b      	lsls	r3, r1, #6
 80026a6:	d5fc      	bpl.n	80026a2 <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 80026a8:	f241 0304 	movw	r3, #4100	; 0x1004
 80026ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026b0:	6818      	ldr	r0, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 80026b2:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 80026b4:	f020 0103 	bic.w	r1, r0, #3
 80026b8:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	f040 0102 	orr.w	r1, r0, #2
 80026c0:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 80026c8:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 80026d0:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 80026d8:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 80026e0:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	6018      	str	r0, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 80026e6:	6813      	ldr	r3, [r2, #0]
 80026e8:	f003 010c 	and.w	r1, r3, #12
 80026ec:	2908      	cmp	r1, #8
 80026ee:	d1fa      	bne.n	80026e6 <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 80026f0:	f241 0018 	movw	r0, #4120	; 0x1018
 80026f4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80026f8:	6802      	ldr	r2, [r0, #0]
 80026fa:	f442 4380 	orr.w	r3, r2, #16384	; 0x4000
 80026fe:	f043 011d 	orr.w	r1, r3, #29
 8002702:	6001      	str	r1, [r0, #0]
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop

08002708 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8002708:	2204      	movs	r2, #4
 800270a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800270e:	6811      	ldr	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8002710:	f44f 6340 	mov.w	r3, #3072	; 0xc00
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8002714:	f021 60e0 	bic.w	r0, r1, #117440512	; 0x7000000
 8002718:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 800271a:	6811      	ldr	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 800271c:	f2c4 0301 	movt	r3, #16385	; 0x4001
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
 8002720:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 8002724:	6010      	str	r0, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8002726:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8002728:	f640 420c 	movw	r2, #3084	; 0xc0c
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 800272c:	f421 4070 	bic.w	r0, r1, #61440	; 0xf000
 8002730:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8002732:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8002734:	f2c4 0201 	movt	r2, #16385	; 0x4001
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8002738:	f441 5040 	orr.w	r0, r1, #12288	; 0x3000
 800273c:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	6019      	str	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8002742:	6813      	ldr	r3, [r2, #0]
 8002744:	f043 0008 	orr.w	r0, r3, #8
 8002748:	6010      	str	r0, [r2, #0]
 800274a:	4770      	bx	lr

0800274c <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 800274c:	b938      	cbnz	r0, 800275e <Hw_Led_Toggle+0x12>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 800274e:	f640 430c 	movw	r3, #3084	; 0xc0c
 8002752:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	f082 0008 	eor.w	r0, r2, #8
 800275c:	6018      	str	r0, [r3, #0]
 800275e:	4770      	bx	lr

08002760 <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8002760:	f240 51f8 	movw	r1, #1528	; 0x5f8
 8002764:	f240 6208 	movw	r2, #1544	; 0x608
 8002768:	2300      	movs	r3, #0
 800276a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800276e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002772:	800b      	strh	r3, [r1, #0]
 8002774:	8013      	strh	r3, [r2, #0]
 8002776:	804b      	strh	r3, [r1, #2]
 8002778:	8053      	strh	r3, [r2, #2]
 800277a:	808b      	strh	r3, [r1, #4]
 800277c:	8093      	strh	r3, [r2, #4]
 800277e:	80cb      	strh	r3, [r1, #6]
 8002780:	80d3      	strh	r3, [r2, #6]
 8002782:	810b      	strh	r3, [r1, #8]
 8002784:	8113      	strh	r3, [r2, #8]
 8002786:	814b      	strh	r3, [r1, #10]
 8002788:	8153      	strh	r3, [r2, #10]
 800278a:	818b      	strh	r3, [r1, #12]
 800278c:	8193      	strh	r3, [r2, #12]
 800278e:	4770      	bx	lr

08002790 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HW_UART_Q_VAILD+0x28>)
 8002792:	490a      	ldr	r1, [pc, #40]	; (80027bc <HW_UART_Q_VAILD+0x2c>)
 8002794:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8002798:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
 800279c:	201f      	movs	r0, #31
 800279e:	1ad2      	subs	r2, r2, r3
 80027a0:	3220      	adds	r2, #32
 80027a2:	f2c8 0000 	movt	r0, #32768	; 0x8000
 80027a6:	4010      	ands	r0, r2
 80027a8:	2800      	cmp	r0, #0
 80027aa:	db00      	blt.n	80027ae <HW_UART_Q_VAILD+0x1e>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 80027ac:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80027ae:	3801      	subs	r0, #1
 80027b0:	f060 011f 	orn	r1, r0, #31
 80027b4:	1c48      	adds	r0, r1, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 80027b6:	4770      	bx	lr
 80027b8:	20000608 	.word	0x20000608
 80027bc:	200005f8 	.word	0x200005f8

080027c0 <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80027c0:	4a1a      	ldr	r2, [pc, #104]	; (800282c <Hw_Uart_Q_Push+0x6c>)
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <Hw_Uart_Q_Push+0x70>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 80027c4:	b4f0      	push	{r4, r5, r6, r7}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80027c6:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 80027ca:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 80027ce:	b22c      	sxth	r4, r5
 80027d0:	231f      	movs	r3, #31
 80027d2:	1ba6      	subs	r6, r4, r6
 80027d4:	3620      	adds	r6, #32
 80027d6:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80027da:	4033      	ands	r3, r6
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db18      	blt.n	8002812 <Hw_Uart_Q_Push+0x52>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 80027e0:	2b1f      	cmp	r3, #31
 80027e2:	d01c      	beq.n	800281e <Hw_Uart_Q_Push+0x5e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80027e4:	3501      	adds	r5, #1
 80027e6:	b2ad      	uxth	r5, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80027e8:	231f      	movs	r3, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80027ea:	780e      	ldrb	r6, [r1, #0]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80027ec:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80027f0:	b229      	sxth	r1, r5
 80027f2:	400b      	ands	r3, r1
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80027f4:	eb00 1740 	add.w	r7, r0, r0, lsl #5
 80027f8:	490e      	ldr	r1, [pc, #56]	; (8002834 <Hw_Uart_Q_Push+0x74>)
 80027fa:	193c      	adds	r4, r7, r4
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80027fc:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80027fe:	550e      	strb	r6, [r1, r4]
 8002800:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8002804:	db0d      	blt.n	8002822 <Hw_Uart_Q_Push+0x62>
 8002806:	4909      	ldr	r1, [pc, #36]	; (800282c <Hw_Uart_Q_Push+0x6c>)
 8002808:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

	return TRUE;
 800280c:	2001      	movs	r0, #1
}
 800280e:	bcf0      	pop	{r4, r5, r6, r7}
 8002810:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002812:	3b01      	subs	r3, #1
 8002814:	f063 031f 	orn	r3, r3, #31
 8002818:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 800281a:	2b1f      	cmp	r3, #31
 800281c:	d1e2      	bne.n	80027e4 <Hw_Uart_Q_Push+0x24>
 800281e:	2000      	movs	r0, #0
 8002820:	e7f5      	b.n	800280e <Hw_Uart_Q_Push+0x4e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8002822:	1e5a      	subs	r2, r3, #1
 8002824:	f062 031f 	orn	r3, r2, #31
 8002828:	3301      	adds	r3, #1
 800282a:	e7ec      	b.n	8002806 <Hw_Uart_Q_Push+0x46>
 800282c:	20000608 	.word	0x20000608
 8002830:	200005f8 	.word	0x200005f8
 8002834:	20000500 	.word	0x20000500

08002838 <Hw_Uart_Q_Pop>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002838:	4a1a      	ldr	r2, [pc, #104]	; (80028a4 <Hw_Uart_Q_Pop+0x6c>)
 800283a:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <Hw_Uart_Q_Pop+0x70>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 800283c:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800283e:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 8002842:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 8002846:	b22c      	sxth	r4, r5
 8002848:	231f      	movs	r3, #31
 800284a:	1b36      	subs	r6, r6, r4
 800284c:	3620      	adds	r6, #32
 800284e:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8002852:	4033      	ands	r3, r6
 8002854:	2b00      	cmp	r3, #0
 8002856:	db17      	blt.n	8002888 <Hw_Uart_Q_Pop+0x50>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8002858:	b1e3      	cbz	r3, 8002894 <Hw_Uart_Q_Pop+0x5c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 800285a:	eb00 1640 	add.w	r6, r0, r0, lsl #5
 800285e:	3501      	adds	r5, #1
 8002860:	1934      	adds	r4, r6, r4
 8002862:	4e12      	ldr	r6, [pc, #72]	; (80028ac <Hw_Uart_Q_Pop+0x74>)
 8002864:	b2ad      	uxth	r5, r5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8002866:	231f      	movs	r3, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8002868:	5d34      	ldrb	r4, [r6, r4]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800286a:	f2c8 0300 	movt	r3, #32768	; 0x8000
 800286e:	b22e      	sxth	r6, r5
 8002870:	4033      	ands	r3, r6
 8002872:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8002874:	700c      	strb	r4, [r1, #0]
 8002876:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800287a:	db0d      	blt.n	8002898 <Hw_Uart_Q_Pop+0x60>
 800287c:	4909      	ldr	r1, [pc, #36]	; (80028a4 <Hw_Uart_Q_Pop+0x6c>)
 800287e:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

    return TRUE;
 8002882:	2001      	movs	r0, #1
}
 8002884:	bc70      	pop	{r4, r5, r6}
 8002886:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002888:	3b01      	subs	r3, #1
 800288a:	f063 031f 	orn	r3, r3, #31
 800288e:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e2      	bne.n	800285a <Hw_Uart_Q_Pop+0x22>
 8002894:	4618      	mov	r0, r3
 8002896:	e7f5      	b.n	8002884 <Hw_Uart_Q_Pop+0x4c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8002898:	1e59      	subs	r1, r3, #1
 800289a:	f061 021f 	orn	r2, r1, #31
 800289e:	1c53      	adds	r3, r2, #1
 80028a0:	e7ec      	b.n	800287c <Hw_Uart_Q_Pop+0x44>
 80028a2:	bf00      	nop
 80028a4:	200005f8 	.word	0x200005f8
 80028a8:	20000608 	.word	0x20000608
 80028ac:	20000500 	.word	0x20000500

080028b0 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 80028b0:	f640 0300 	movw	r3, #2048	; 0x800
 80028b4:	f64e 5208 	movw	r2, #60680	; 0xed08
 80028b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028bc:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4770      	bx	lr

080028c4 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 80028c4:	f640 0300 	movw	r3, #2048	; 0x800
 80028c8:	3010      	adds	r0, #16
 80028ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ce:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80028d2:	4770      	bx	lr

080028d4 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 80028d4:	f640 0300 	movw	r3, #2048	; 0x800
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 80028d8:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 80028da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028de:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80028e2:	4770      	bx	lr

080028e4 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 80028e4:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 80028e6:	f642 31bd 	movw	r1, #11197	; 0x2bbd
 80028ea:	f642 03d5 	movw	r3, #10453	; 0x28d5
 80028ee:	203c      	movs	r0, #60	; 0x3c
 80028f0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80028f4:	2200      	movs	r2, #0
 80028f6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80028fa:	4798      	blx	r3
 80028fc:	bd08      	pop	{r3, pc}
 80028fe:	bf00      	nop

08002900 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8002900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8002904:	4d40      	ldr	r5, [pc, #256]	; (8002a08 <Hw_Timer_Init+0x108>)
 8002906:	782b      	ldrb	r3, [r5, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d07b      	beq.n	8002a04 <Hw_Timer_Init+0x104>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800290c:	483f      	ldr	r0, [pc, #252]	; (8002a0c <Hw_Timer_Init+0x10c>)
 800290e:	2400      	movs	r4, #0
 8002910:	7004      	strb	r4, [r0, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002912:	8044      	strh	r4, [r0, #2]
		Timer_Tbl[i].Timer_Init = 0;
 8002914:	8084      	strh	r4, [r0, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 8002916:	6084      	str	r4, [r0, #8]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8002918:	7404      	strb	r4, [r0, #16]
		Timer_Tbl[i].Timer_Ctn  = 0;
 800291a:	8244      	strh	r4, [r0, #18]
		Timer_Tbl[i].Timer_Init = 0;
 800291c:	8284      	strh	r4, [r0, #20]
		Timer_Tbl[i].TmrFnct    = NULL;
 800291e:	6184      	str	r4, [r0, #24]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8002920:	f880 4020 	strb.w	r4, [r0, #32]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002924:	8444      	strh	r4, [r0, #34]	; 0x22
		Timer_Tbl[i].Timer_Init = 0;
 8002926:	8484      	strh	r4, [r0, #36]	; 0x24
		Timer_Tbl[i].TmrFnct    = NULL;
 8002928:	6284      	str	r4, [r0, #40]	; 0x28
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800292a:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
		Timer_Tbl[i].Timer_Ctn  = 0;
 800292e:	8644      	strh	r4, [r0, #50]	; 0x32
		Timer_Tbl[i].Timer_Init = 0;
 8002930:	8684      	strh	r4, [r0, #52]	; 0x34
		Timer_Tbl[i].TmrFnct    = NULL;
 8002932:	6384      	str	r4, [r0, #56]	; 0x38
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8002934:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002938:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
		Timer_Tbl[i].Timer_Init = 0;
 800293c:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
		Timer_Tbl[i].TmrFnct    = NULL;
 8002940:	6484      	str	r4, [r0, #72]	; 0x48
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8002942:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002946:	f8a0 4052 	strh.w	r4, [r0, #82]	; 0x52
		Timer_Tbl[i].Timer_Init = 0;
 800294a:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
		Timer_Tbl[i].TmrFnct    = NULL;
 800294e:	6584      	str	r4, [r0, #88]	; 0x58
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8002950:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
		Timer_Tbl[i].Timer_Ctn  = 0;
 8002954:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
		Timer_Tbl[i].Timer_Init = 0;
 8002958:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		Timer_Tbl[i].TmrFnct    = NULL;
 800295c:	6684      	str	r4, [r0, #104]	; 0x68
	}	                   
	
	
	Hw_Timer_SetupISR();
 800295e:	492c      	ldr	r1, [pc, #176]	; (8002a10 <Hw_Timer_Init+0x110>)
 8002960:	4788      	blx	r1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8002962:	f24e 0614 	movw	r6, #57364	; 0xe014
 8002966:	f641 173f 	movw	r7, #6463	; 0x193f
	
	REG_STK_VAL  = 0;	
 800296a:	f24e 0018 	movw	r0, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800296e:	f2ce 0600 	movt	r6, #57344	; 0xe000
 8002972:	f2c0 0701 	movt	r7, #1
	
	REG_STK_VAL  = 0;	
 8002976:	f2ce 0000 	movt	r0, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800297a:	f24e 0310 	movw	r3, #57360	; 0xe010
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800297e:	6037      	str	r7, [r6, #0]
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8002980:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8002984:	6004      	str	r4, [r0, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8002986:	6819      	ldr	r1, [r3, #0]
void Hw_Timer_MeasureSetup( void )
{
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz
 8002988:	f241 0218 	movw	r2, #4120	; 0x1018

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800298c:	f041 0604 	orr.w	r6, r1, #4
 8002990:	601e      	str	r6, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8002992:	681f      	ldr	r7, [r3, #0]
void Hw_Timer_MeasureSetup( void )
{
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz
 8002994:	f2c4 0202 	movt	r2, #16386	; 0x4002
	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8002998:	f047 0002 	orr.w	r0, r7, #2
 800299c:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 800299e:	6819      	ldr	r1, [r3, #0]
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz
 80029a0:	f642 4c28 	movw	ip, #11304	; 0x2c28
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 80029a4:	f041 0601 	orr.w	r6, r1, #1
 80029a8:	601e      	str	r6, [r3, #0]
void Hw_Timer_MeasureSetup( void )
{
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz
 80029aa:	f8d2 8000 	ldr.w	r8, [r2]

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
 80029ae:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
void Hw_Timer_MeasureSetup( void )
{
	
	//-- 측정용 1us 단위의 타이머 설정 
	//
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz
 80029b2:	f448 6800 	orr.w	r8, r8, #2048	; 0x800
 80029b6:	f8c2 8000 	str.w	r8, [r2]

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz
 80029ba:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 80029be:	2247      	movs	r2, #71	; 0x47
 80029c0:	f8cc 2000 	str.w	r2, [ip]


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
 80029c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80029c8:	2280      	movs	r2, #128	; 0x80
	REG_TIM1_CR2   = 0;					
 80029ca:	f642 4704 	movw	r7, #11268	; 0x2c04
	REG_TIM1_CCMR2 = 0; 
 80029ce:	f642 461c 	movw	r6, #11292	; 0x2c1c
	
	REG_TIM1_ARR   = 0xFFFF; 	
 80029d2:	f642 402c 	movw	r0, #11308	; 0x2c2c

	REG_TIM1_CCER  = 0;	
 80029d6:	f642 4120 	movw	r1, #11296	; 0x2c20
	SET_BIT( REG_RCC_APB2ENR, 11 );		// TIM1 Clock Enable APB1*2 = 72Mhz

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
 80029da:	601a      	str	r2, [r3, #0]
	REG_TIM1_CR2   = 0;					
	REG_TIM1_CCMR2 = 0; 
	
	REG_TIM1_ARR   = 0xFFFF; 	
 80029dc:	f2c4 0001 	movt	r0, #16385	; 0x4001

	REG_TIM1_CCER  = 0;	
 80029e0:	f2c4 0101 	movt	r1, #16385	; 0x4001

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
	REG_TIM1_CR2   = 0;					
 80029e4:	f2c4 0701 	movt	r7, #16385	; 0x4001
	REG_TIM1_CCMR2 = 0; 
 80029e8:	f2c4 0601 	movt	r6, #16385	; 0x4001
	
	REG_TIM1_ARR   = 0xFFFF; 	
 80029ec:	f64f 72ff 	movw	r2, #65535	; 0xffff

	REG_TIM1_PSC = (72)-1; 				// 72Mhz/(72) = 1Mhz


	REG_TIM1_CR1   = ( 1<< 7 );			// TIMx_ARR register is buffered 
	REG_TIM1_CR2   = 0;					
 80029f0:	603c      	str	r4, [r7, #0]
	REG_TIM1_CCMR2 = 0; 
 80029f2:	6034      	str	r4, [r6, #0]
	
	REG_TIM1_ARR   = 0xFFFF; 	
 80029f4:	6002      	str	r2, [r0, #0]

	REG_TIM1_CCER  = 0;	
 80029f6:	600c      	str	r4, [r1, #0]


	SET_BIT( REG_TIM1_CR1, 0 );			// Counter Enable 
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	f040 0101 	orr.w	r1, r0, #1
 80029fe:	6019      	str	r1, [r3, #0]
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	
	Hw_Timer_MeasureSetup();	

	Excute = 1;
 8002a00:	2301      	movs	r3, #1
 8002a02:	702b      	strb	r3, [r5, #0]
 8002a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a08:	20000478 	.word	0x20000478
 8002a0c:	20000408 	.word	0x20000408
 8002a10:	080028e5 	.word	0x080028e5

08002a14 <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8002a14:	4b66      	ldr	r3, [pc, #408]	; (8002bb0 <Hw_Timer_Tick+0x19c>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 8002a16:	4a67      	ldr	r2, [pc, #412]	; (8002bb4 <Hw_Timer_Tick+0x1a0>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8002a18:	6819      	ldr	r1, [r3, #0]
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8002a1a:	b510      	push	{r4, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8002a1c:	1c48      	adds	r0, r1, #1
 8002a1e:	6018      	str	r0, [r3, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8002a20:	8814      	ldrh	r4, [r2, #0]
 8002a22:	b2a3      	uxth	r3, r4
 8002a24:	b11b      	cbz	r3, 8002a2e <Hw_Timer_Tick+0x1a>
 8002a26:	8811      	ldrh	r1, [r2, #0]
 8002a28:	1e48      	subs	r0, r1, #1
 8002a2a:	b284      	uxth	r4, r0
 8002a2c:	8014      	strh	r4, [r2, #0]
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002a2e:	4c62      	ldr	r4, [pc, #392]	; (8002bb8 <Hw_Timer_Tick+0x1a4>)
 8002a30:	7822      	ldrb	r2, [r4, #0]
 8002a32:	2a01      	cmp	r2, #1
 8002a34:	d01d      	beq.n	8002a72 <Hw_Timer_Tick+0x5e>
 8002a36:	7c20      	ldrb	r0, [r4, #16]
 8002a38:	4a5f      	ldr	r2, [pc, #380]	; (8002bb8 <Hw_Timer_Tick+0x1a4>)
 8002a3a:	2801      	cmp	r0, #1
 8002a3c:	d02b      	beq.n	8002a96 <Hw_Timer_Tick+0x82>
 8002a3e:	f894 0020 	ldrb.w	r0, [r4, #32]
 8002a42:	4a5d      	ldr	r2, [pc, #372]	; (8002bb8 <Hw_Timer_Tick+0x1a4>)
 8002a44:	2801      	cmp	r0, #1
 8002a46:	d038      	beq.n	8002aba <Hw_Timer_Tick+0xa6>
 8002a48:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002a4c:	4a5a      	ldr	r2, [pc, #360]	; (8002bb8 <Hw_Timer_Tick+0x1a4>)
 8002a4e:	2801      	cmp	r0, #1
 8002a50:	d046      	beq.n	8002ae0 <Hw_Timer_Tick+0xcc>
 8002a52:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8002a56:	4a58      	ldr	r2, [pc, #352]	; (8002bb8 <Hw_Timer_Tick+0x1a4>)
 8002a58:	2801      	cmp	r0, #1
 8002a5a:	d054      	beq.n	8002b06 <Hw_Timer_Tick+0xf2>
 8002a5c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8002a60:	4a55      	ldr	r2, [pc, #340]	; (8002bb8 <Hw_Timer_Tick+0x1a4>)
 8002a62:	2801      	cmp	r0, #1
 8002a64:	d066      	beq.n	8002b34 <Hw_Timer_Tick+0x120>
 8002a66:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8002a6a:	4a53      	ldr	r2, [pc, #332]	; (8002bb8 <Hw_Timer_Tick+0x1a4>)
 8002a6c:	2801      	cmp	r0, #1
 8002a6e:	d078      	beq.n	8002b62 <Hw_Timer_Tick+0x14e>
 8002a70:	bd10      	pop	{r4, pc}
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002a72:	8863      	ldrh	r3, [r4, #2]
 8002a74:	1e59      	subs	r1, r3, #1
 8002a76:	b288      	uxth	r0, r1
 8002a78:	8060      	strh	r0, [r4, #2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d1db      	bne.n	8002a36 <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002a7e:	7862      	ldrb	r2, [r4, #1]
 8002a80:	2a01      	cmp	r2, #1
 8002a82:	f000 8086 	beq.w	8002b92 <Hw_Timer_Tick+0x17e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002a86:	88a1      	ldrh	r1, [r4, #4]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002a88:	68a3      	ldr	r3, [r4, #8]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002a8a:	8061      	strh	r1, [r4, #2]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002a8c:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002a8e:	7c20      	ldrb	r0, [r4, #16]
 8002a90:	4a49      	ldr	r2, [pc, #292]	; (8002bb8 <Hw_Timer_Tick+0x1a4>)
 8002a92:	2801      	cmp	r0, #1
 8002a94:	d1d3      	bne.n	8002a3e <Hw_Timer_Tick+0x2a>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002a96:	8a51      	ldrh	r1, [r2, #18]
 8002a98:	1e4b      	subs	r3, r1, #1
 8002a9a:	b298      	uxth	r0, r3
 8002a9c:	8250      	strh	r0, [r2, #18]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	d1cd      	bne.n	8002a3e <Hw_Timer_Tick+0x2a>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002aa2:	7c51      	ldrb	r1, [r2, #17]
 8002aa4:	2901      	cmp	r1, #1
 8002aa6:	d072      	beq.n	8002b8e <Hw_Timer_Tick+0x17a>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002aa8:	8aa2      	ldrh	r2, [r4, #20]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002aaa:	69a3      	ldr	r3, [r4, #24]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002aac:	8262      	strh	r2, [r4, #18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002aae:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002ab0:	f894 0020 	ldrb.w	r0, [r4, #32]
 8002ab4:	4a40      	ldr	r2, [pc, #256]	; (8002bb8 <Hw_Timer_Tick+0x1a4>)
 8002ab6:	2801      	cmp	r0, #1
 8002ab8:	d1c6      	bne.n	8002a48 <Hw_Timer_Tick+0x34>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002aba:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8002abc:	1e4b      	subs	r3, r1, #1
 8002abe:	b298      	uxth	r0, r3
 8002ac0:	8450      	strh	r0, [r2, #34]	; 0x22

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	d1c0      	bne.n	8002a48 <Hw_Timer_Tick+0x34>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002ac6:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8002aca:	2901      	cmp	r1, #1
 8002acc:	d06c      	beq.n	8002ba8 <Hw_Timer_Tick+0x194>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002ace:	8ca2      	ldrh	r2, [r4, #36]	; 0x24

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002ad0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002ad2:	8462      	strh	r2, [r4, #34]	; 0x22

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002ad4:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002ad6:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002ada:	4a37      	ldr	r2, [pc, #220]	; (8002bb8 <Hw_Timer_Tick+0x1a4>)
 8002adc:	2801      	cmp	r0, #1
 8002ade:	d1b8      	bne.n	8002a52 <Hw_Timer_Tick+0x3e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002ae0:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 8002ae2:	1e4b      	subs	r3, r1, #1
 8002ae4:	b298      	uxth	r0, r3
 8002ae6:	8650      	strh	r0, [r2, #50]	; 0x32

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	d1b2      	bne.n	8002a52 <Hw_Timer_Tick+0x3e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002aec:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8002af0:	2901      	cmp	r1, #1
 8002af2:	d056      	beq.n	8002ba2 <Hw_Timer_Tick+0x18e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002af4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002af6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002af8:	8662      	strh	r2, [r4, #50]	; 0x32

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002afa:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002afc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8002b00:	4a2d      	ldr	r2, [pc, #180]	; (8002bb8 <Hw_Timer_Tick+0x1a4>)
 8002b02:	2801      	cmp	r0, #1
 8002b04:	d1aa      	bne.n	8002a5c <Hw_Timer_Tick+0x48>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002b06:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
 8002b0a:	1e4b      	subs	r3, r1, #1
 8002b0c:	b298      	uxth	r0, r3
 8002b0e:	f8a2 0042 	strh.w	r0, [r2, #66]	; 0x42

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002b12:	2800      	cmp	r0, #0
 8002b14:	d1a2      	bne.n	8002a5c <Hw_Timer_Tick+0x48>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002b16:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
 8002b1a:	2901      	cmp	r1, #1
 8002b1c:	d03e      	beq.n	8002b9c <Hw_Timer_Tick+0x188>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002b1e:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002b22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002b24:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002b28:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002b2a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8002b2e:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <Hw_Timer_Tick+0x1a4>)
 8002b30:	2801      	cmp	r0, #1
 8002b32:	d198      	bne.n	8002a66 <Hw_Timer_Tick+0x52>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002b34:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
 8002b38:	1e4b      	subs	r3, r1, #1
 8002b3a:	b298      	uxth	r0, r3
 8002b3c:	f8a2 0052 	strh.w	r0, [r2, #82]	; 0x52

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002b40:	2800      	cmp	r0, #0
 8002b42:	d190      	bne.n	8002a66 <Hw_Timer_Tick+0x52>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002b44:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
 8002b48:	2901      	cmp	r1, #1
 8002b4a:	d024      	beq.n	8002b96 <Hw_Timer_Tick+0x182>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002b4c:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002b50:	6da3      	ldr	r3, [r4, #88]	; 0x58
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002b52:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002b56:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8002b58:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8002b5c:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <Hw_Timer_Tick+0x1a4>)
 8002b5e:	2801      	cmp	r0, #1
 8002b60:	d186      	bne.n	8002a70 <Hw_Timer_Tick+0x5c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8002b62:	f8b2 1062 	ldrh.w	r1, [r2, #98]	; 0x62
 8002b66:	1e4b      	subs	r3, r1, #1
 8002b68:	b298      	uxth	r0, r3
 8002b6a:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	f47f af7e 	bne.w	8002a70 <Hw_Timer_Tick+0x5c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002b74:	f892 1061 	ldrb.w	r1, [r2, #97]	; 0x61

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002b78:	6ea3      	ldr	r3, [r4, #104]	; 0x68
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8002b7a:	2901      	cmp	r1, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8002b7c:	bf08      	it	eq
 8002b7e:	f882 0060 	strbeq.w	r0, [r2, #96]	; 0x60

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8002b82:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 8002b86:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8002b8a:	4798      	blx	r3
 8002b8c:	bd10      	pop	{r4, pc}

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8002b8e:	7410      	strb	r0, [r2, #16]
 8002b90:	e78a      	b.n	8002aa8 <Hw_Timer_Tick+0x94>
 8002b92:	7020      	strb	r0, [r4, #0]
 8002b94:	e777      	b.n	8002a86 <Hw_Timer_Tick+0x72>
 8002b96:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 8002b9a:	e7d7      	b.n	8002b4c <Hw_Timer_Tick+0x138>
 8002b9c:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
 8002ba0:	e7bd      	b.n	8002b1e <Hw_Timer_Tick+0x10a>
 8002ba2:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
 8002ba6:	e7a5      	b.n	8002af4 <Hw_Timer_Tick+0xe0>
 8002ba8:	f882 0020 	strb.w	r0, [r2, #32]
 8002bac:	e78f      	b.n	8002ace <Hw_Timer_Tick+0xba>
 8002bae:	bf00      	nop
 8002bb0:	2000047c 	.word	0x2000047c
 8002bb4:	20000480 	.word	0x20000480
 8002bb8:	20000408 	.word	0x20000408

08002bbc <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );
void Hw_Timer_MeasureSetup( void );


void Hw_Timer_ISR(void)
{
 8002bbc:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 8002bbe:	f642 2315 	movw	r3, #10773	; 0x2a15
 8002bc2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002bc6:	4798      	blx	r3
 8002bc8:	bd08      	pop	{r3, pc}
 8002bca:	bf00      	nop

08002bcc <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8002bcc:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8002bce:	f240 4408 	movw	r4, #1032	; 0x408
 8002bd2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002bd6:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8002bda:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8002bdc:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8002bde:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8002be0:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 8002be2:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 8002be4:	8081      	strh	r1, [r0, #4]
}
 8002be6:	bc10      	pop	{r4}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop

08002bec <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8002bec:	2806      	cmp	r0, #6
 8002bee:	d803      	bhi.n	8002bf8 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8002bf0:	4b02      	ldr	r3, [pc, #8]	; (8002bfc <Hw_Timer_Start+0x10>)
 8002bf2:	0100      	lsls	r0, r0, #4
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	541a      	strb	r2, [r3, r0]
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20000408 	.word	0x20000408

08002c00 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8002c00:	4a03      	ldr	r2, [pc, #12]	; (8002c10 <Hw_Timer_Delay_ms+0x10>)
 8002c02:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 8002c04:	8813      	ldrh	r3, [r2, #0]
 8002c06:	b298      	uxth	r0, r3
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	d1fb      	bne.n	8002c04 <Hw_Timer_Delay_ms+0x4>
}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000480 	.word	0x20000480

08002c14 <Hw_Timer_Get_u16Count_Usec>:
     ARG
     RET
---------------------------------------------------------------------------*/
u16 Hw_Timer_Get_u16Count_Usec( void )
{
	return REG_TIM1_CNT;
 8002c14:	f642 4324 	movw	r3, #11300	; 0x2c24
 8002c18:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002c1c:	6818      	ldr	r0, [r3, #0]
}
 8002c1e:	b280      	uxth	r0, r0
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop

08002c24 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8002c24:	b508      	push	{r3, lr}
	Set_System();
 8002c26:	f644 33e1 	movw	r3, #19425	; 0x4be1
 8002c2a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002c2e:	4798      	blx	r3
	Set_USBClock();
 8002c30:	f644 4001 	movw	r0, #19457	; 0x4c01
 8002c34:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002c38:	4780      	blx	r0
	USB_Interrupts_Config();
 8002c3a:	f644 4145 	movw	r1, #19525	; 0x4c45
 8002c3e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002c42:	4788      	blx	r1
	USB_Init();	
 8002c44:	f645 022d 	movw	r2, #22573	; 0x582d
 8002c48:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002c4c:	4790      	blx	r2
 8002c4e:	bd08      	pop	{r3, pc}

08002c50 <Hw_I2C_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_Init( void )
{
 8002c50:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	#if HW_I2C_USE_SW_I2C == 1
	Hw_I2C_SW_Init();	
	#else
	Hw_I2C_HW_Init();		
 8002c52:	f642 43a9 	movw	r3, #11433	; 0x2ca9
 8002c56:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002c5a:	4798      	blx	r3
 8002c5c:	bd08      	pop	{r3, pc}
 8002c5e:	bf00      	nop

08002c60 <Hw_I2C_HW_IO_Setup>:
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8002c60:	2204      	movs	r2, #4
 8002c62:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002c66:	6811      	ldr	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8002c68:	f640 4304 	movw	r3, #3076	; 0xc04
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8002c6c:	f041 0002 	orr.w	r0, r1, #2
 8002c70:	6010      	str	r0, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8002c72:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	f022 010f 	bic.w	r1, r2, #15
 8002c7c:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	f040 0203 	orr.w	r2, r0, #3
 8002c84:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	f041 000c 	orr.w	r0, r1, #12
 8002c8c:	6018      	str	r0, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8002c94:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	f040 0230 	orr.w	r2, r0, #48	; 0x30
 8002c9c:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 8002c9e:	6819      	ldr	r1, [r3, #0]
 8002ca0:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 8002ca4:	6018      	str	r0, [r3, #0]
 8002ca6:	4770      	bx	lr

08002ca8 <Hw_I2C_HW_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_HW_Init( void )
{
 8002ca8:	b538      	push	{r3, r4, r5, lr}
	u32 SR;


	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	
 8002caa:	f642 4361 	movw	r3, #11361	; 0x2c61
 8002cae:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002cb2:	4798      	blx	r3


	REG_I2C1_CR1 = 0;
 8002cb4:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8002cb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002cbc:	2500      	movs	r5, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8002cbe:	f245 4404 	movw	r4, #21508	; 0x5404
	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	


	REG_I2C1_CR1 = 0;
 8002cc2:	601d      	str	r5, [r3, #0]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8002cc4:	f2c4 0400 	movt	r4, #16384	; 0x4000
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8002cc8:	f245 401c 	movw	r0, #21532	; 0x541c

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8002ccc:	2524      	movs	r5, #36	; 0x24
 8002cce:	6025      	str	r5, [r4, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8002cd0:	f2c4 0000 	movt	r0, #16384	; 0x4000
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8002cd4:	f245 4120 	movw	r1, #21536	; 0x5420
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8002cd8:	f248 041e 	movw	r4, #32798	; 0x801e
 8002cdc:	6004      	str	r4, [r0, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8002cde:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002ce2:	2004      	movs	r0, #4


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8002ce4:	f241 021c 	movw	r2, #4124	; 0x101c
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8002ce8:	6008      	str	r0, [r1, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8002cea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002cee:	6810      	ldr	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8002cf0:	f245 4114 	movw	r1, #21524	; 0x5414
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8002cf4:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8002cf8:	6010      	str	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8002cfa:	6818      	ldr	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8002cfc:	f245 4218 	movw	r2, #21528	; 0x5418
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8002d00:	f020 0002 	bic.w	r0, r0, #2
 8002d04:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8002d06:	6818      	ldr	r0, [r3, #0]

	SR = REG_I2C1_SR1;
 8002d08:	f2c4 0100 	movt	r1, #16384	; 0x4000
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8002d0c:	f040 0001 	orr.w	r0, r0, #1
 8002d10:	6018      	str	r0, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8002d12:	f2c4 0200 	movt	r2, #16384	; 0x4000


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8002d16:	680b      	ldr	r3, [r1, #0]
	SR = REG_I2C1_SR2;
 8002d18:	6813      	ldr	r3, [r2, #0]
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}

08002d1c <Hw_Si47xx_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
 8002d1c:	b538      	push	{r3, r4, r5, lr}
	Hw_Wait(100);
 8002d1e:	f242 45b1 	movw	r5, #9393	; 0x24b1
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8002d22:	f640 440c 	movw	r4, #3084	; 0xc0c
 8002d26:	f2c4 0401 	movt	r4, #16385	; 0x4001
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
 8002d2a:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002d2e:	2064      	movs	r0, #100	; 0x64
 8002d30:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8002d32:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(100);
 8002d34:	2064      	movs	r0, #100	; 0x64
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8002d36:	f043 0120 	orr.w	r1, r3, #32
 8002d3a:	6021      	str	r1, [r4, #0]
	Hw_Wait(100);
 8002d3c:	47a8      	blx	r5
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8002d3e:	6822      	ldr	r2, [r4, #0]
	Hw_Wait(500);	
 8002d40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8002d44:	f022 0320 	bic.w	r3, r2, #32
 8002d48:	6023      	str	r3, [r4, #0]
	Hw_Wait(500);	
 8002d4a:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8002d4c:	6821      	ldr	r1, [r4, #0]
	Hw_Wait(100);
 8002d4e:	2064      	movs	r0, #100	; 0x64
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
	Hw_Wait(500);	
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8002d50:	f041 0220 	orr.w	r2, r1, #32
 8002d54:	6022      	str	r2, [r4, #0]
	Hw_Wait(100);
 8002d56:	47a8      	blx	r5
 8002d58:	bd38      	pop	{r3, r4, r5, pc}
 8002d5a:	bf00      	nop

08002d5c <Hw_Si47xx_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Init( void )
{
 8002d5c:	b508      	push	{r3, lr}
	Hw_I2C_Init();
 8002d5e:	f642 4351 	movw	r3, #11345	; 0x2c51
 8002d62:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002d66:	4798      	blx	r3

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 8002d68:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002d6c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002d70:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 8002d72:	f642 521d 	movw	r2, #11549	; 0x2d1d

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 8002d76:	f421 0370 	bic.w	r3, r1, #15728640	; 0xf00000
 8002d7a:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8002d7c:	6801      	ldr	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 8002d7e:	f6c0 0200 	movt	r2, #2048	; 0x800
	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8002d82:	f441 1340 	orr.w	r3, r1, #3145728	; 0x300000
 8002d86:	6003      	str	r3, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 8002d88:	6801      	ldr	r1, [r0, #0]
 8002d8a:	6001      	str	r1, [r0, #0]
	

	Hw_Si47xx_Reset();
 8002d8c:	4790      	blx	r2
 8002d8e:	bd08      	pop	{r3, pc}

08002d90 <Hw_SPI_Ch2_Init>:

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8002d90:	f640 4304 	movw	r3, #3076	; 0xc04
 8002d94:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002d98:	6819      	ldr	r1, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8002d9a:	f44f 5260 	mov.w	r2, #14336	; 0x3800

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8002d9e:	f421 2070 	bic.w	r0, r1, #983040	; 0xf0000
 8002da2:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 8002da4:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8002da6:	f643 0104 	movw	r1, #14340	; 0x3804
	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 8002daa:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8002dae:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 8002db0:	6818      	ldr	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8002db2:	f2c4 0200 	movt	r2, #16384	; 0x4000
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 8002db6:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8002dba:	6018      	str	r0, [r3, #0]
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8002dbc:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8002dbe:	f2c4 0100 	movt	r1, #16384	; 0x4000
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8002dc2:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 8002dc6:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (20));	// MODE   - Output mode, max speed 50Mhz
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 8002dce:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (22));	// CNF    - Alternate function output Push-pull
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002dd6:	6018      	str	r0, [r3, #0]

	// PB15 - SPI2_MOSI
	REG_GPIOB_CRH &= ~(0x0F << (28));	// Clear
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8002dde:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (28));	// MODE   - Output mode, max speed 50Mhz
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
 8002de6:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (30));	// CNF    - Alternate function output Push-pull
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002dee:	6018      	str	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8002df0:	f244 031c 	movw	r3, #16412	; 0x401c
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8002df4:	2004      	movs	r0, #4



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8002df6:	6013      	str	r3, [r2, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8002df8:	6008      	str	r0, [r1, #0]
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR1, 6 );
 8002dfa:	6811      	ldr	r1, [r2, #0]
 8002dfc:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4770      	bx	lr

08002e04 <Hw_SPI_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Init(void)
{
 8002e04:	b510      	push	{r4, lr}
	static u8 Called = 0;


	if( Called == 1 ) return;
 8002e06:	4c08      	ldr	r4, [pc, #32]	; (8002e28 <Hw_SPI_Init+0x24>)
 8002e08:	7823      	ldrb	r3, [r4, #0]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d00b      	beq.n	8002e26 <Hw_SPI_Init+0x22>


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 8002e0e:	f241 001c 	movw	r0, #4124	; 0x101c
 8002e12:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002e16:	6802      	ldr	r2, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <Hw_SPI_Init+0x28>)
	if( Called == 1 ) return;


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 8002e1a:	f442 4180 	orr.w	r1, r2, #16384	; 0x4000
 8002e1e:	6001      	str	r1, [r0, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 8002e20:	4798      	blx	r3

	Called = 1;	
 8002e22:	2001      	movs	r0, #1
 8002e24:	7020      	strb	r0, [r4, #0]
 8002e26:	bd10      	pop	{r4, pc}
 8002e28:	20000482 	.word	0x20000482
 8002e2c:	08002d91 	.word	0x08002d91

08002e30 <Hw_SPI_StartDMA>:
              
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_StartDMA( u8 Ch )
{
	switch( Ch )
 8002e30:	2801      	cmp	r0, #1
 8002e32:	d10b      	bne.n	8002e4c <Hw_SPI_StartDMA+0x1c>
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR2, 1 );	// TX DMA Enable
 8002e34:	f643 0304 	movw	r3, #14340	; 0x3804
 8002e38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	f042 0002 	orr.w	r0, r2, #2
 8002e42:	6018      	str	r0, [r3, #0]
			SET_BIT( REG_SPI2_CR2, 0 );	// RX DMA Enable
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	f041 0201 	orr.w	r2, r1, #1
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop

08002e50 <Hw_SPI_Write8Bit>:
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8002e50:	2801      	cmp	r0, #1
 8002e52:	d001      	beq.n	8002e58 <Hw_SPI_Write8Bit+0x8>
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8002e54:	2000      	movs	r0, #0
}
 8002e56:	4770      	bx	lr
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8002e58:	f643 0208 	movw	r2, #14344	; 0x3808
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8002e5c:	f242 730f 	movw	r3, #9999	; 0x270f
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8002e60:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002e64:	e006      	b.n	8002e74 <Hw_SPI_Write8Bit+0x24>
 8002e66:	6810      	ldr	r0, [r2, #0]
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 8002e68:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8002e6a:	0780      	lsls	r0, r0, #30
 8002e6c:	d405      	bmi.n	8002e7a <Hw_SPI_Write8Bit+0x2a>
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 8002e6e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002e72:	d305      	bcc.n	8002e80 <Hw_SPI_Write8Bit+0x30>
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8002e74:	6810      	ldr	r0, [r2, #0]
 8002e76:	0780      	lsls	r0, r0, #30
 8002e78:	d5f5      	bpl.n	8002e66 <Hw_SPI_Write8Bit+0x16>
			}
			if( TimeOut == 0 ) return 1;
 8002e7a:	b90b      	cbnz	r3, 8002e80 <Hw_SPI_Write8Bit+0x30>
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	4770      	bx	lr
			REG_SPI2_DR = WriteData;
 8002e80:	f643 000c 	movw	r0, #14348	; 0x380c
 8002e84:	f2c4 0000 	movt	r0, #16384	; 0x4000

			
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8002e88:	f643 0208 	movw	r2, #14344	; 0x3808
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
			}
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;
 8002e8c:	6001      	str	r1, [r0, #0]

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8002e8e:	f242 730f 	movw	r3, #9999	; 0x270f
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8002e92:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002e96:	e006      	b.n	8002ea6 <Hw_SPI_Write8Bit+0x56>
 8002e98:	6810      	ldr	r0, [r2, #0]
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8002e9a:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8002e9c:	07c1      	lsls	r1, r0, #31
 8002e9e:	d405      	bmi.n	8002eac <Hw_SPI_Write8Bit+0x5c>
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8002ea0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002ea4:	d304      	bcc.n	8002eb0 <Hw_SPI_Write8Bit+0x60>
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8002ea6:	6811      	ldr	r1, [r2, #0]
 8002ea8:	07c8      	lsls	r0, r1, #31
 8002eaa:	d5f5      	bpl.n	8002e98 <Hw_SPI_Write8Bit+0x48>
			}
			if( TimeOut == 0 ) return 1;
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0e5      	beq.n	8002e7c <Hw_SPI_Write8Bit+0x2c>
		
			ReadData = REG_SPI2_DR;
 8002eb0:	f643 020c 	movw	r2, #14348	; 0x380c
 8002eb4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002eb8:	6813      	ldr	r3, [r2, #0]
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8002eba:	2000      	movs	r0, #0
			}
			if( TimeOut == 0 ) return 1;
		
			ReadData = REG_SPI2_DR;
			
			break;
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop

08002ec0 <Hw_N5100G_FrameTick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5100G_FrameTick( void )
{
 8002ec0:	b508      	push	{r3, lr}
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <Hw_N5100G_FrameTick+0x38>)
 8002ec4:	4798      	blx	r3
 8002ec6:	2801      	cmp	r0, #1
 8002ec8:	d00d      	beq.n	8002ee6 <Hw_N5100G_FrameTick+0x26>
 8002eca:	480c      	ldr	r0, [pc, #48]	; (8002efc <Hw_N5100G_FrameTick+0x3c>)
 8002ecc:	6803      	ldr	r3, [r0, #0]
		{
			Hw_N5110G_Frame_DrawReq--;
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 8002ece:	b903      	cbnz	r3, 8002ed2 <Hw_N5100G_FrameTick+0x12>
 8002ed0:	bd08      	pop	{r3, pc}
	{
		Hw_DMA_SPI2_Setup( (u32)Hw_N5110G_TxFrameBuf, (u32)Hw_N5110G_RxFrameBuf, HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT );				
 8002ed2:	480b      	ldr	r0, [pc, #44]	; (8002f00 <Hw_N5100G_FrameTick+0x40>)
 8002ed4:	490b      	ldr	r1, [pc, #44]	; (8002f04 <Hw_N5100G_FrameTick+0x44>)
 8002ed6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <Hw_N5100G_FrameTick+0x48>)
 8002edc:	4798      	blx	r3
		Hw_SPI_StartDMA( HW_SPI_CH2 );			
 8002ede:	2001      	movs	r0, #1
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <Hw_N5100G_FrameTick+0x4c>)
 8002ee2:	4790      	blx	r2
 8002ee4:	bd08      	pop	{r3, pc}
{
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
	{
		if( Hw_N5110G_Frame_DrawReq > 0 )
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <Hw_N5100G_FrameTick+0x3c>)
 8002ee8:	6811      	ldr	r1, [r2, #0]
 8002eea:	2900      	cmp	r1, #0
 8002eec:	d0f0      	beq.n	8002ed0 <Hw_N5100G_FrameTick+0x10>
		{
			Hw_N5110G_Frame_DrawReq--;
 8002eee:	1e4b      	subs	r3, r1, #1
 8002ef0:	6013      	str	r3, [r2, #0]
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0ec      	beq.n	8002ed0 <Hw_N5100G_FrameTick+0x10>
 8002ef6:	e7ec      	b.n	8002ed2 <Hw_N5100G_FrameTick+0x12>
 8002ef8:	08003669 	.word	0x08003669
 8002efc:	20000b8c 	.word	0x20000b8c
 8002f00:	20000990 	.word	0x20000990
 8002f04:	20000b90 	.word	0x20000b90
 8002f08:	080035f1 	.word	0x080035f1
 8002f0c:	08002e31 	.word	0x08002e31

08002f10 <Hw_N5110G_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
 8002f10:	b510      	push	{r4, lr}
	HW_N5110G_RESET_ON();
 8002f12:	f640 440c 	movw	r4, #3084	; 0xc0c
 8002f16:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8002f1a:	6822      	ldr	r2, [r4, #0]
	Hw_Timer_Delay_ms(10);
 8002f1c:	f642 4301 	movw	r3, #11265	; 0x2c01
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
	HW_N5110G_RESET_ON();
 8002f20:	f422 6080 	bic.w	r0, r2, #1024	; 0x400
 8002f24:	6020      	str	r0, [r4, #0]
	Hw_Timer_Delay_ms(10);
 8002f26:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002f2a:	200a      	movs	r0, #10
 8002f2c:	4798      	blx	r3
	HW_N5110G_RESET_OFF();
 8002f2e:	6821      	ldr	r1, [r4, #0]
 8002f30:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 8002f34:	6022      	str	r2, [r4, #0]
 8002f36:	bd10      	pop	{r4, pc}

08002f38 <Hw_N5110G_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 8002f38:	b510      	push	{r4, lr}
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8002f3a:	f640 440c 	movw	r4, #3084	; 0xc0c
 8002f3e:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8002f42:	6823      	ldr	r3, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 8002f44:	4601      	mov	r1, r0
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8002f46:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 8002f4a:	f642 6351 	movw	r3, #11857	; 0x2e51
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8002f4e:	6022      	str	r2, [r4, #0]
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 8002f50:	2001      	movs	r0, #1
 8002f52:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002f56:	4798      	blx	r3
	HW_N5110G_SEL_DATA();
 8002f58:	6821      	ldr	r1, [r4, #0]
 8002f5a:	f441 6200 	orr.w	r2, r1, #2048	; 0x800
 8002f5e:	6022      	str	r2, [r4, #0]
	
	return Ret;
}
 8002f60:	bd10      	pop	{r4, pc}
 8002f62:	bf00      	nop

08002f64 <Hw_N5110G_Goto>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 8002f64:	b570      	push	{r4, r5, r6, lr}
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 8002f66:	f642 7439 	movw	r4, #12089	; 0x2f39
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 8002f6a:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 8002f6c:	f6c0 0400 	movt	r4, #2048	; 0x800
 8002f70:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 8002f74:	47a0      	blx	r4
 8002f76:	4606      	mov	r6, r0
	Ret |= Hw_N5110G_WriteCmd( 0x80|x );
 8002f78:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 8002f7c:	47a0      	blx	r4
 8002f7e:	4330      	orrs	r0, r6

	return Ret;
}
 8002f80:	b280      	uxth	r0, r0
 8002f82:	bd70      	pop	{r4, r5, r6, pc}

08002f84 <Hw_N5110G_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8002f84:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <Hw_N5110G_Init+0xbc>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8002f88:	b083      	sub	sp, #12
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 8002f8a:	4798      	blx	r3
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8002f8c:	f640 4004 	movw	r0, #3076	; 0xc04
 8002f90:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002f94:	6802      	ldr	r2, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 8002f96:	f640 440c 	movw	r4, #3084	; 0xc0c
	
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8002f9a:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 8002f9e:	6001      	str	r1, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 8002fa0:	6805      	ldr	r5, [r0, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 8002fa2:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 8002fa6:	f445 7640 	orr.w	r6, r5, #768	; 0x300
 8002faa:	6006      	str	r6, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8002fac:	6807      	ldr	r7, [r0, #0]
	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
	
	Hw_N5110G_Reset();
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8002fae:	4d25      	ldr	r5, [pc, #148]	; (8003044 <Hw_N5110G_Init+0xc0>)
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8002fb0:	6007      	str	r7, [r0, #0]

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8002fb2:	6803      	ldr	r3, [r0, #0]
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8002fb4:	2600      	movs	r6, #0
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8002fb6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8002fba:	6002      	str	r2, [r0, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
 8002fbc:	6801      	ldr	r1, [r0, #0]
 8002fbe:	f441 5740 	orr.w	r7, r1, #12288	; 0x3000
 8002fc2:	6007      	str	r7, [r0, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 8002fc4:	6803      	ldr	r3, [r0, #0]
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
 8002fc6:	4f20      	ldr	r7, [pc, #128]	; (8003048 <Hw_N5110G_Init+0xc4>)

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 8002fc8:	6003      	str	r3, [r0, #0]


	HW_N5110G_RESET_OFF();
 8002fca:	6820      	ldr	r0, [r4, #0]
 8002fcc:	f440 6280 	orr.w	r2, r0, #1024	; 0x400
 8002fd0:	6022      	str	r2, [r4, #0]
	HW_N5110G_SEL_CMD();
 8002fd2:	6821      	ldr	r1, [r4, #0]
	
	Hw_N5110G_Reset();
 8002fd4:	481d      	ldr	r0, [pc, #116]	; (800304c <Hw_N5110G_Init+0xc8>)
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
 8002fd6:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 8002fda:	6023      	str	r3, [r4, #0]
	
	Hw_N5110G_Reset();
 8002fdc:	4780      	blx	r0
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8002fde:	2021      	movs	r0, #33	; 0x21
 8002fe0:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0xC6);	// Write Vop
 8002fe2:	20c6      	movs	r0, #198	; 0xc6
 8002fe4:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x06);	// Set Temperature Coefficient
 8002fe6:	2006      	movs	r0, #6
 8002fe8:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x13);	// Set Bias System
 8002fea:	2013      	movs	r0, #19
 8002fec:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x20);	// H = 0
 8002fee:	2020      	movs	r0, #32
 8002ff0:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
 8002ff2:	200c      	movs	r0, #12
 8002ff4:	47a8      	blx	r5
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
 8002ff6:	4631      	mov	r1, r6
 8002ff8:	4a15      	ldr	r2, [pc, #84]	; (8003050 <Hw_N5110G_Init+0xcc>)
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	4790      	blx	r2
	
	
	HW_N5110G_SEL_DATA();
 8002ffe:	6821      	ldr	r1, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8003000:	2003      	movs	r0, #3
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
 8003002:	f441 6300 	orr.w	r3, r1, #2048	; 0x800
 8003006:	6023      	str	r3, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
 8003008:	4c12      	ldr	r4, [pc, #72]	; (8003054 <Hw_N5110G_Init+0xd0>)
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 800300a:	2121      	movs	r1, #33	; 0x21
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <Hw_N5110G_Init+0xd4>)
 800300e:	9600      	str	r6, [sp, #0]
 8003010:	2202      	movs	r2, #2
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8003012:	8026      	strh	r6, [r4, #0]
	Hw_N5110G_Frame_DrawReq	= 0;						
 8003014:	603e      	str	r6, [r7, #0]
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8003016:	4c11      	ldr	r4, [pc, #68]	; (800305c <Hw_N5110G_Init+0xd8>)
 8003018:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
 800301a:	2003      	movs	r0, #3
 800301c:	4a10      	ldr	r2, [pc, #64]	; (8003060 <Hw_N5110G_Init+0xdc>)
 800301e:	4790      	blx	r2
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <Hw_N5110G_Init+0xe0>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8003022:	4631      	mov	r1, r6
     TITLE   : Hw_5110G_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
 8003024:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8003028:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 800302a:	7059      	strb	r1, [r3, #1]
 800302c:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 800302e:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8003030:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8003032:	d1f9      	bne.n	8003028 <Hw_N5110G_Init+0xa4>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8003034:	6839      	ldr	r1, [r7, #0]
 8003036:	1c88      	adds	r0, r1, #2
 8003038:	6038      	str	r0, [r7, #0]
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
	
	
	Hw_N5110G_Clear();	
	Hw_N5110G_DrawRequest();
}
 800303a:	b003      	add	sp, #12
 800303c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800303e:	bf00      	nop
 8003040:	08002e05 	.word	0x08002e05
 8003044:	08002f39 	.word	0x08002f39
 8003048:	20000b8c 	.word	0x20000b8c
 800304c:	08002f11 	.word	0x08002f11
 8003050:	08002f65 	.word	0x08002f65
 8003054:	20000b88 	.word	0x20000b88
 8003058:	08002ec1 	.word	0x08002ec1
 800305c:	08002bcd 	.word	0x08002bcd
 8003060:	08002bed 	.word	0x08002bed
 8003064:	2000098f 	.word	0x2000098f

08003068 <Hw_N5110G_Clear>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
{
 8003068:	4b07      	ldr	r3, [pc, #28]	; (8003088 <Hw_N5110G_Clear+0x20>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 800306a:	2100      	movs	r1, #0
     TITLE   : Hw_N5110G_Clear
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
 800306c:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8003070:	1c5a      	adds	r2, r3, #1
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8003072:	7059      	strb	r1, [r3, #1]
 8003074:	3302      	adds	r3, #2
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8003076:	4283      	cmp	r3, r0
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8003078:	7051      	strb	r1, [r2, #1]
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 800307a:	d1f9      	bne.n	8003070 <Hw_N5110G_Clear+0x8>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 800307c:	4903      	ldr	r1, [pc, #12]	; (800308c <Hw_N5110G_Clear+0x24>)
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 800307e:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8003080:	680a      	ldr	r2, [r1, #0]
 8003082:	1c53      	adds	r3, r2, #1
 8003084:	600b      	str	r3, [r1, #0]
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 8003086:	4770      	bx	lr
 8003088:	2000098f 	.word	0x2000098f
 800308c:	20000b8c 	.word	0x20000b8c

08003090 <Hw_N5110G_WriteStr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 8003090:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8003094:	7807      	ldrb	r7, [r0, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 8003096:	b086      	sub	sp, #24
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8003098:	2f00      	cmp	r7, #0
 800309a:	f000 8085 	beq.w	80031a8 <Hw_N5110G_WriteStr+0x118>
 800309e:	f640 3188 	movw	r1, #2952	; 0xb88
 80030a2:	f2c2 0100 	movt	r1, #8192	; 0x2000
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80030a6:	f640 0c21 	movw	ip, #2081	; 0x821
 80030aa:	f8b1 9000 	ldrh.w	r9, [r1]
 80030ae:	f8df a104 	ldr.w	sl, [pc, #260]	; 80031b4 <Hw_N5110G_WriteStr+0x124>
 80030b2:	f2c2 0c82 	movt	ip, #8322	; 0x2082
 80030b6:	9001      	str	r0, [sp, #4]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80030b8:	f109 0301 	add.w	r3, r9, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80030bc:	b298      	uxth	r0, r3
 80030be:	08c2      	lsrs	r2, r0, #3
 80030c0:	fbac 2402 	umull	r2, r4, ip, r2
 80030c4:	08e5      	lsrs	r5, r4, #3
 80030c6:	ebc5 1685 	rsb	r6, r5, r5, lsl #6
 80030ca:	eba0 01c6 	sub.w	r1, r0, r6, lsl #3
 80030ce:	b289      	uxth	r1, r1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80030d0:	1c4b      	adds	r3, r1, #1
 80030d2:	b298      	uxth	r0, r3
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80030d4:	08c2      	lsrs	r2, r0, #3
 80030d6:	fbac 4502 	umull	r4, r5, ip, r2
 80030da:	08ec      	lsrs	r4, r5, #3
 80030dc:	ebc4 1684 	rsb	r6, r4, r4, lsl #6
 80030e0:	eba0 03c6 	sub.w	r3, r0, r6, lsl #3
 80030e4:	b29a      	uxth	r2, r3
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80030e6:	1c50      	adds	r0, r2, #1
 80030e8:	b284      	uxth	r4, r0
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 80030ea:	08e5      	lsrs	r5, r4, #3
 80030ec:	fbac 5605 	umull	r5, r6, ip, r5
 80030f0:	08f3      	lsrs	r3, r6, #3
 80030f2:	ebc3 1083 	rsb	r0, r3, r3, lsl #6
 80030f6:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
 80030fa:	fa1f f884 	uxth.w	r8, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 80030fe:	f108 0501 	add.w	r5, r8, #1
 8003102:	b2ae      	uxth	r6, r5
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8003104:	08f3      	lsrs	r3, r6, #3
 8003106:	fbac 4003 	umull	r4, r0, ip, r3
 800310a:	08c4      	lsrs	r4, r0, #3
 800310c:	ebc4 1584 	rsb	r5, r4, r4, lsl #6
 8003110:	eba6 06c5 	sub.w	r6, r6, r5, lsl #3
 8003114:	b2b6      	uxth	r6, r6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8003116:	1c73      	adds	r3, r6, #1
 8003118:	b29c      	uxth	r4, r3
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 800311a:	08e0      	lsrs	r0, r4, #3
 800311c:	fbac 5300 	umull	r5, r3, ip, r0
 8003120:	08dd      	lsrs	r5, r3, #3
 8003122:	ebc5 1085 	rsb	r0, r5, r5, lsl #6
 8003126:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
 800312a:	b2a5      	uxth	r5, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 800312c:	1c6b      	adds	r3, r5, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 800312e:	b298      	uxth	r0, r3
 8003130:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
 8003134:	fbac 340b 	umull	r3, r4, ip, fp
 8003138:	3f20      	subs	r7, #32
 800313a:	ea4f 0bd4 	mov.w	fp, r4, lsr #3
	u16 i;
	u8  Ch;
	
	for( i=0; i<6; i++ )
	{
		Ch = Hw_N5110G_Font6_8[CharData-32][i];
 800313e:	f240 0400 	movw	r4, #0
 8003142:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003146:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800314a:	eb04 0347 	add.w	r3, r4, r7, lsl #1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 800314e:	f814 7017 	ldrb.w	r7, [r4, r7, lsl #1]
 8003152:	789c      	ldrb	r4, [r3, #2]
 8003154:	9702      	str	r7, [sp, #8]
 8003156:	9403      	str	r4, [sp, #12]
 8003158:	78dc      	ldrb	r4, [r3, #3]
 800315a:	785f      	ldrb	r7, [r3, #1]
 800315c:	9404      	str	r4, [sp, #16]
 800315e:	791c      	ldrb	r4, [r3, #4]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8003160:	ebcb 1b8b 	rsb	fp, fp, fp, lsl #6
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8003164:	9405      	str	r4, [sp, #20]
 8003166:	9c02      	ldr	r4, [sp, #8]
 8003168:	795b      	ldrb	r3, [r3, #5]
 800316a:	f80a 4009 	strb.w	r4, [sl, r9]
 800316e:	f80a 7001 	strb.w	r7, [sl, r1]
 8003172:	9f03      	ldr	r7, [sp, #12]
 8003174:	9c05      	ldr	r4, [sp, #20]
 8003176:	f80a 7002 	strb.w	r7, [sl, r2]
 800317a:	9a04      	ldr	r2, [sp, #16]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 800317c:	eba0 00cb 	sub.w	r0, r0, fp, lsl #3
 8003180:	f640 3188 	movw	r1, #2952	; 0xb88
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8003184:	f80a 2008 	strb.w	r2, [sl, r8]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8003188:	fa1f f980 	uxth.w	r9, r0
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 800318c:	f80a 4006 	strb.w	r4, [sl, r6]
 8003190:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003194:	f80a 3005 	strb.w	r3, [sl, r5]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8003198:	9d01      	ldr	r5, [sp, #4]
 800319a:	f8a1 9000 	strh.w	r9, [r1]
 800319e:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 80031a2:	9501      	str	r5, [sp, #4]
 80031a4:	2f00      	cmp	r7, #0
 80031a6:	d187      	bne.n	80030b8 <Hw_N5110G_WriteStr+0x28>
		Ret |= Hw_N5110G_WriteChar( *pStr );
		pStr++;
	}
		
	return Ret;
}
 80031a8:	2000      	movs	r0, #0
 80031aa:	b006      	add	sp, #24
 80031ac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000990 	.word	0x20000990

080031b8 <Hw_N5110G_Print>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 80031b8:	b40c      	push	{r2, r3}
 80031ba:	b530      	push	{r4, r5, lr}
 80031bc:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 80031be:	aa36      	add	r2, sp, #216	; 0xd8
 80031c0:	f242 0359 	movw	r3, #8281	; 0x2059
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 80031c4:	460d      	mov	r5, r1
 80031c6:	4604      	mov	r4, r0
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 80031c8:	f852 1b04 	ldr.w	r1, [r2], #4
 80031cc:	4668      	mov	r0, sp
 80031ce:	f6c0 0300 	movt	r3, #2048	; 0x800
 80031d2:	4798      	blx	r3

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 80031d4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80031d8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80031dc:	004c      	lsls	r4, r1, #1
 80031de:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 80031e2:	f640 3288 	movw	r2, #2952	; 0xb88

	Hw_N5110G_WriteStr( Str );		
 80031e6:	f243 0391 	movw	r3, #12433	; 0x3091

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 80031ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80031ee:	eb04 0585 	add.w	r5, r4, r5, lsl #2

	Hw_N5110G_WriteStr( Str );		
 80031f2:	4668      	mov	r0, sp
 80031f4:	f6c0 0300 	movt	r3, #2048	; 0x800

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 80031f8:	8015      	strh	r5, [r2, #0]

	Hw_N5110G_WriteStr( Str );		
 80031fa:	4798      	blx	r3
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 80031fc:	f640 318c 	movw	r1, #2956	; 0xb8c
 8003200:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003204:	680a      	ldr	r2, [r1, #0]
	Hw_N5110G_DrawRequest();
	
	Lb_va_end(ap);		
	
	return Ret;
}
 8003206:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8003208:	1c53      	adds	r3, r2, #1
 800320a:	600b      	str	r3, [r1, #0]
	Hw_N5110G_DrawRequest();
	
	Lb_va_end(ap);		
	
	return Ret;
}
 800320c:	b033      	add	sp, #204	; 0xcc
 800320e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003212:	b002      	add	sp, #8
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <Hw_N5110G_DrawRequest>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8003218:	f640 338c 	movw	r3, #2956	; 0xb8c
 800321c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	1c50      	adds	r0, r2, #1
 8003224:	6018      	str	r0, [r3, #0]
 8003226:	4770      	bx	lr

08003228 <Hw_N5110G_DrawCircle>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8003228:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800322c:	b088      	sub	sp, #32
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 800322e:	0054      	lsls	r4, r2, #1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 8003230:	9005      	str	r0, [sp, #20]
 8003232:	9106      	str	r1, [sp, #24]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8003234:	f1c4 0003 	rsb	r0, r4, #3
 8003238:	9d05      	ldr	r5, [sp, #20]
 800323a:	9c06      	ldr	r4, [sp, #24]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 800323c:	9304      	str	r3, [sp, #16]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 800323e:	b283      	uxth	r3, r0
 8003240:	9303      	str	r3, [sp, #12]
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];
 8003242:	49a0      	ldr	r1, [pc, #640]	; (80034c4 <Hw_N5110G_DrawCircle+0x29c>)
{
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 8003244:	4620      	mov	r0, r4
 8003246:	9501      	str	r5, [sp, #4]
 8003248:	9502      	str	r5, [sp, #8]
	CurX = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	e0a5      	b.n	800339a <Hw_N5110G_DrawCircle+0x172>
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 800324e:	f8dd b018 	ldr.w	fp, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003252:	f04f 0901 	mov.w	r9, #1
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
 8003256:	ebc2 060b 	rsb	r6, r2, fp
 800325a:	b2b6      	uxth	r6, r6
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800325c:	f006 0807 	and.w	r8, r6, #7
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8003260:	eb02 050b 	add.w	r5, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003264:	fa09 fb08 	lsl.w	fp, r9, r8
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8003268:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800326a:	f007 0a07 	and.w	sl, r7, #7
 800326e:	f000 0507 	and.w	r5, r0, #7
 8003272:	fa09 fc0a 	lsl.w	ip, r9, sl
 8003276:	f04f 0801 	mov.w	r8, #1
 800327a:	fa09 fa05 	lsl.w	sl, r9, r5
 800327e:	f004 0907 	and.w	r9, r4, #7
 8003282:	f8cd b01c 	str.w	fp, [sp, #28]
 8003286:	fa08 fb09 	lsl.w	fp, r8, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800328a:	2554      	movs	r5, #84	; 0x54
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800328c:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800328e:	fb05 f707 	mul.w	r7, r5, r7
 8003292:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8003296:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003298:	eb07 0809 	add.w	r8, r7, r9
 800329c:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80032a0:	f8cd b000 	str.w	fp, [sp]
 80032a4:	f811 b008 	ldrb.w	fp, [r1, r8]
 80032a8:	fa5f fc8c 	uxtb.w	ip, ip
 80032ac:	ea4b 050c 	orr.w	r5, fp, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80032b0:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80032b4:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80032b8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80032bc:	f811 b008 	ldrb.w	fp, [r1, r8]
 80032c0:	fa5f f589 	uxtb.w	r5, r9
 80032c4:	ea4b 0b05 	orr.w	fp, fp, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80032c8:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80032cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80032d0:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80032d4:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80032d6:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80032da:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80032de:	ea49 0c0c 	orr.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80032e2:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80032e6:	2754      	movs	r7, #84	; 0x54
 80032e8:	4446      	add	r6, r8
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 80032ea:	f8dd 9014 	ldr.w	r9, [sp, #20]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80032ee:	fb07 f80b 	mul.w	r8, r7, fp
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80032f2:	f811 b006 	ldrb.w	fp, [r1, r6]
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 80032f6:	eb02 0709 	add.w	r7, r2, r9
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80032fa:	ea4b 0505 	orr.w	r5, fp, r5
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80032fe:	b2bf      	uxth	r7, r7
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8003300:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003304:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003308:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800330a:	eb08 0607 	add.w	r6, r8, r7
 800330e:	fb0b f50c 	mul.w	r5, fp, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003312:	f811 9006 	ldrb.w	r9, [r1, r6]
 8003316:	fa5f fa8a 	uxtb.w	sl, sl
 800331a:	f8dd b000 	ldr.w	fp, [sp]
 800331e:	ea49 0c0a 	orr.w	ip, r9, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003322:	f801 c006 	strb.w	ip, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003326:	19ef      	adds	r7, r5, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003328:	fa5f f98b 	uxtb.w	r9, fp
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 800332c:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003330:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 8003332:	ebc2 0c0b 	rsb	ip, r2, fp
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003336:	ea46 0609 	orr.w	r6, r6, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800333a:	fa1f fc8c 	uxth.w	ip, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800333e:	55ce      	strb	r6, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003340:	44e0      	add	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003342:	f811 7008 	ldrb.w	r7, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003346:	4465      	add	r5, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003348:	ea47 0a0a 	orr.w	sl, r7, sl
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800334c:	f801 a008 	strb.w	sl, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8003350:	5d4e      	ldrb	r6, [r1, r5]
 8003352:	ea46 0909 	orr.w	r9, r6, r9
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003356:	f801 9005 	strb.w	r9, [r1, r5]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 800335a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800335e:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 8003362:	f040 80a8 	bne.w	80034b6 <Hw_N5110G_DrawCircle+0x28e>
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8003366:	9f03      	ldr	r7, [sp, #12]
 8003368:	1a9d      	subs	r5, r3, r2
 800336a:	370a      	adds	r7, #10
 800336c:	eb07 0685 	add.w	r6, r7, r5, lsl #2
			CurY--;
 8003370:	3a01      	subs	r2, #1
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8003372:	b2b7      	uxth	r7, r6
 8003374:	9703      	str	r7, [sp, #12]
			CurY--;
 8003376:	b292      	uxth	r2, r2
 8003378:	9d02      	ldr	r5, [sp, #8]
 800337a:	9f01      	ldr	r7, [sp, #4]
		}
		CurX++;
 800337c:	3301      	adds	r3, #1
 800337e:	1c6e      	adds	r6, r5, #1
 8003380:	b29b      	uxth	r3, r3
 8003382:	1e7d      	subs	r5, r7, #1
 8003384:	3001      	adds	r0, #1
 8003386:	3c01      	subs	r4, #1
 8003388:	b2b6      	uxth	r6, r6
 800338a:	b2ad      	uxth	r5, r5
  
	D    = 3 - (Radius << 1);
	CurX = 0;
	CurY = Radius;
	
	while (CurX <= CurY)
 800338c:	429a      	cmp	r2, r3
 800338e:	9602      	str	r6, [sp, #8]
 8003390:	9501      	str	r5, [sp, #4]
 8003392:	b280      	uxth	r0, r0
 8003394:	b2a4      	uxth	r4, r4
 8003396:	f0c0 8115 	bcc.w	80035c4 <Hw_N5110G_DrawCircle+0x39c>
	{
		if( Mode == 0 )
 800339a:	9e04      	ldr	r6, [sp, #16]
 800339c:	2e00      	cmp	r6, #0
 800339e:	f43f af56 	beq.w	800324e <Hw_N5110G_DrawCircle+0x26>
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
 80033a2:	9d04      	ldr	r5, [sp, #16]
 80033a4:	2d01      	cmp	r5, #1
 80033a6:	f000 808f 	beq.w	80034c8 <Hw_N5110G_DrawCircle+0x2a0>
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
 80033aa:	9f04      	ldr	r7, [sp, #16]
 80033ac:	2f02      	cmp	r7, #2
 80033ae:	d1d4      	bne.n	800335a <Hw_N5110G_DrawCircle+0x132>
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 80033b0:	9e06      	ldr	r6, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80033b2:	f04f 0901 	mov.w	r9, #1
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 80033b6:	1995      	adds	r5, r2, r6
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
 80033b8:	1ab6      	subs	r6, r6, r2
 80033ba:	b2b6      	uxth	r6, r6
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 80033bc:	b2af      	uxth	r7, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80033be:	f006 0507 	and.w	r5, r6, #7
 80033c2:	fa09 fa05 	lsl.w	sl, r9, r5
 80033c6:	f007 0c07 	and.w	ip, r7, #7
 80033ca:	f04f 0801 	mov.w	r8, #1
 80033ce:	fa08 fb0c 	lsl.w	fp, r8, ip
 80033d2:	f004 0c07 	and.w	ip, r4, #7
 80033d6:	fa09 f80c 	lsl.w	r8, r9, ip
 80033da:	f000 0507 	and.w	r5, r0, #7
 80033de:	f8cd a01c 	str.w	sl, [sp, #28]
 80033e2:	fa09 fa05 	lsl.w	sl, r9, r5
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80033e6:	08ff      	lsrs	r7, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80033e8:	2554      	movs	r5, #84	; 0x54
 80033ea:	fb05 f707 	mul.w	r7, r5, r7
 80033ee:	f8dd 9008 	ldr.w	r9, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80033f2:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80033f4:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80033f8:	f8cd 8000 	str.w	r8, [sp]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80033fc:	eb07 0809 	add.w	r8, r7, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003400:	f811 5008 	ldrb.w	r5, [r1, r8]
 8003404:	fa5f fc8b 	uxtb.w	ip, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003408:	f8dd 9008 	ldr.w	r9, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800340c:	ea85 0b0c 	eor.w	fp, r5, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003410:	f801 b008 	strb.w	fp, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003414:	eb06 0809 	add.w	r8, r6, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003418:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800341c:	f811 9008 	ldrb.w	r9, [r1, r8]
 8003420:	fa5f f58b 	uxtb.w	r5, fp
 8003424:	ea89 0905 	eor.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003428:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800342c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003430:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003434:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003436:	f811 b007 	ldrb.w	fp, [r1, r7]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800343a:	ea4f 08d0 	mov.w	r8, r0, lsr #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800343e:	ea8b 0c0c 	eor.w	ip, fp, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003442:	f04f 0b54 	mov.w	fp, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003446:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800344a:	444e      	add	r6, r9
 800344c:	fb0b f808 	mul.w	r8, fp, r8
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 8003450:	f8dd c014 	ldr.w	ip, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003454:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 8003456:	eb02 090c 	add.w	r9, r2, ip
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800345a:	407d      	eors	r5, r7
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800345c:	fa1f f989 	uxth.w	r9, r9
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8003460:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003464:	558d      	strb	r5, [r1, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003466:	fb0b fc07 	mul.w	ip, fp, r7
 800346a:	eb08 0509 	add.w	r5, r8, r9
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800346e:	5d4f      	ldrb	r7, [r1, r5]
 8003470:	fa5f f68a 	uxtb.w	r6, sl
 8003474:	4077      	eors	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003476:	554f      	strb	r7, [r1, r5]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003478:	44e1      	add	r9, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800347a:	9d00      	ldr	r5, [sp, #0]
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 800347c:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003480:	f811 a009 	ldrb.w	sl, [r1, r9]
 8003484:	b2ed      	uxtb	r5, r5
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 8003486:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800348a:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800348c:	ea8a 0a05 	eor.w	sl, sl, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003490:	f801 a009 	strb.w	sl, [r1, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003494:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8003496:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800349a:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800349c:	ea89 0606 	eor.w	r6, r9, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80034a0:	f801 6008 	strb.w	r6, [r1, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80034a4:	5dce      	ldrb	r6, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 80034a6:	f8dd c00c 	ldr.w	ip, [sp, #12]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80034aa:	4075      	eors	r5, r6
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 80034ac:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80034b0:	55cd      	strb	r5, [r1, r7]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 80034b2:	f43f af58 	beq.w	8003366 <Hw_N5110G_DrawCircle+0x13e>
		{ 
			D += (CurX << 2) + 6;
 80034b6:	eb0c 0583 	add.w	r5, ip, r3, lsl #2
 80034ba:	1dae      	adds	r6, r5, #6
 80034bc:	b2b7      	uxth	r7, r6
 80034be:	9703      	str	r7, [sp, #12]
 80034c0:	e75a      	b.n	8003378 <Hw_N5110G_DrawCircle+0x150>
 80034c2:	bf00      	nop
 80034c4:	20000990 	.word	0x20000990
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 80034c8:	9e06      	ldr	r6, [sp, #24]
 80034ca:	1997      	adds	r7, r2, r6
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 80034cc:	ebc2 0806 	rsb	r8, r2, r6
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 80034d0:	b2bf      	uxth	r7, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 80034d2:	fa1f f988 	uxth.w	r9, r8
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80034d6:	f007 0b07 	and.w	fp, r7, #7
 80034da:	9e04      	ldr	r6, [sp, #16]
 80034dc:	fa05 fc0b 	lsl.w	ip, r5, fp
 80034e0:	f009 0507 	and.w	r5, r9, #7
 80034e4:	fa06 fa05 	lsl.w	sl, r6, r5
 80034e8:	9d04      	ldr	r5, [sp, #16]
 80034ea:	f000 0607 	and.w	r6, r0, #7
 80034ee:	fa05 fb06 	lsl.w	fp, r5, r6
 80034f2:	f004 0607 	and.w	r6, r4, #7
 80034f6:	40b5      	lsls	r5, r6
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80034f8:	08ff      	lsrs	r7, r7, #3
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80034fa:	9507      	str	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80034fc:	2554      	movs	r5, #84	; 0x54
 80034fe:	fb05 f707 	mul.w	r7, r5, r7
 8003502:	f8dd 8008 	ldr.w	r8, [sp, #8]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8003506:	ea4f 06d9 	mov.w	r6, r9, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800350a:	44b8      	add	r8, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800350c:	f811 9008 	ldrb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003510:	2554      	movs	r5, #84	; 0x54
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003512:	ea6f 0c0c 	mvn.w	ip, ip
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003516:	fb05 f606 	mul.w	r6, r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800351a:	fa5f fc8c 	uxtb.w	ip, ip
 800351e:	ea09 050c 	and.w	r5, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003522:	f801 5008 	strb.w	r5, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003526:	f8dd 8008 	ldr.w	r8, [sp, #8]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800352a:	ea6f 050a 	mvn.w	r5, sl
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800352e:	44b0      	add	r8, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003530:	f811 9008 	ldrb.w	r9, [r1, r8]
 8003534:	b2ed      	uxtb	r5, r5
 8003536:	ea09 0a05 	and.w	sl, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800353a:	f801 a008 	strb.w	sl, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800353e:	f8dd 8004 	ldr.w	r8, [sp, #4]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8003542:	ea4f 0ad0 	mov.w	sl, r0, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003546:	4447      	add	r7, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003548:	f811 9007 	ldrb.w	r9, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800354c:	f8dd 8004 	ldr.w	r8, [sp, #4]
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003550:	ea09 0c0c 	and.w	ip, r9, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003554:	f801 c007 	strb.w	ip, [r1, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003558:	f04f 0754 	mov.w	r7, #84	; 0x54
 800355c:	4446      	add	r6, r8
 800355e:	fb07 fa0a 	mul.w	sl, r7, sl
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 8003562:	f8dd 9014 	ldr.w	r9, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003566:	5d8f      	ldrb	r7, [r1, r6]
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 8003568:	eb02 0c09 	add.w	ip, r2, r9
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800356c:	fa1f f88c 	uxth.w	r8, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003570:	403d      	ands	r5, r7
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8003572:	558d      	strb	r5, [r1, r6]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8003574:	ea4f 07d4 	mov.w	r7, r4, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003578:	eb0a 0508 	add.w	r5, sl, r8
 800357c:	2654      	movs	r6, #84	; 0x54
 800357e:	fb06 fc07 	mul.w	ip, r6, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003582:	5d4f      	ldrb	r7, [r1, r5]
 8003584:	ea6f 060b 	mvn.w	r6, fp
 8003588:	b2f6      	uxtb	r6, r6
 800358a:	4037      	ands	r7, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800358c:	554f      	strb	r7, [r1, r5]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800358e:	9d07      	ldr	r5, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8003590:	44e0      	add	r8, ip
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 8003592:	f8dd b014 	ldr.w	fp, [sp, #20]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8003596:	f811 9008 	ldrb.w	r9, [r1, r8]
 800359a:	43ef      	mvns	r7, r5
 800359c:	b2fd      	uxtb	r5, r7
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 800359e:	ebc2 070b 	rsb	r7, r2, fp
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80035a2:	b2bf      	uxth	r7, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80035a4:	ea09 0905 	and.w	r9, r9, r5
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80035a8:	f801 9008 	strb.w	r9, [r1, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80035ac:	44ba      	add	sl, r7
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80035ae:	f811 800a 	ldrb.w	r8, [r1, sl]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80035b2:	4467      	add	r7, ip
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80035b4:	ea08 0606 	and.w	r6, r8, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80035b8:	f801 600a 	strb.w	r6, [r1, sl]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80035bc:	5dce      	ldrb	r6, [r1, r7]
 80035be:	4035      	ands	r5, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80035c0:	55cd      	strb	r5, [r1, r7]
 80035c2:	e6ca      	b.n	800335a <Hw_N5110G_DrawCircle+0x132>
			D += ((CurX - CurY) << 2) + 10;
			CurY--;
		}
		CurX++;
	}
}
 80035c4:	b008      	add	sp, #32
 80035c6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035ca:	4770      	bx	lr

080035cc <Hw_DMA_Init>:
void Hw_DMA_Init(void)
{
	static u8 Called = 0;


	if( Called == 1 ) return;
 80035cc:	4a07      	ldr	r2, [pc, #28]	; (80035ec <Hw_DMA_Init+0x20>)
 80035ce:	7813      	ldrb	r3, [r2, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d009      	beq.n	80035e8 <Hw_DMA_Init+0x1c>


	// 1. Clock Enable
	//
	REG_RCC_AHBENR |= (1<<0);		// DMA1 Clock enable
 80035d4:	f241 0014 	movw	r0, #4116	; 0x1014
 80035d8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80035dc:	6801      	ldr	r1, [r0, #0]
 80035de:	f041 0301 	orr.w	r3, r1, #1
 80035e2:	6003      	str	r3, [r0, #0]
	

	Called = 1;	
 80035e4:	2001      	movs	r0, #1
 80035e6:	7010      	strb	r0, [r2, #0]
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000483 	.word	0x20000483

080035f0 <Hw_DMA_SPI2_Setup>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
 80035f0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 80035f4:	2344      	movs	r3, #68	; 0x44
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 80035f6:	274c      	movs	r7, #76	; 0x4c
 80035f8:	f643 040c 	movw	r4, #14348	; 0x380c
	REG_DMA1_CMAR(4)  = ReadAddress;
 80035fc:	2650      	movs	r6, #80	; 0x50
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 80035fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003602:	f04f 0c00 	mov.w	ip, #0
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8003606:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800360a:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(4)  = ReadAddress;
 800360e:	f2c4 0602 	movt	r6, #16386	; 0x4002
	REG_DMA1_CNDTR(4) = BufSize;
 8003612:	2548      	movs	r5, #72	; 0x48
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8003614:	f8c3 c000 	str.w	ip, [r3]
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 8003618:	f2c4 0502 	movt	r5, #16386	; 0x4002
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 800361c:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(4)  = ReadAddress;
 800361e:	6031      	str	r1, [r6, #0]
	REG_DMA1_CNDTR(4) = BufSize;
	
	
	
	REG_DMA1_CCR(4) = 0
 8003620:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 8003624:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(4) = 0
 8003626:	6019      	str	r1, [r3, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8003628:	f8d3 8000 	ldr.w	r8, [r3]
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 800362c:	2158      	movs	r1, #88	; 0x58
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 800362e:	2760      	movs	r7, #96	; 0x60
	REG_DMA1_CMAR(5)  = WriteAddress;
 8003630:	2664      	movs	r6, #100	; 0x64
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 8003632:	f2c4 0102 	movt	r1, #16386	; 0x4002
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 8003636:	255c      	movs	r5, #92	; 0x5c
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8003638:	f048 0801 	orr.w	r8, r8, #1
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 800363c:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(5)  = WriteAddress;
 8003640:	f2c4 0602 	movt	r6, #16386	; 0x4002
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8003644:	f8c3 8000 	str.w	r8, [r3]
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 8003648:	f2c4 0502 	movt	r5, #16386	; 0x4002
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 800364c:	f8c1 c000 	str.w	ip, [r1]
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 8003650:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(5)  = WriteAddress;
 8003652:	6030      	str	r0, [r6, #0]
	REG_DMA1_CNDTR(5) = BufSize;
	
	
	
	REG_DMA1_CCR(5) = 0
 8003654:	2090      	movs	r0, #144	; 0x90
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 8003656:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(5) = 0
 8003658:	6008      	str	r0, [r1, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(5) |= (1<<0);	// Channel enable
 800365a:	680a      	ldr	r2, [r1, #0]
 800365c:	f042 0301 	orr.w	r3, r2, #1
 8003660:	600b      	str	r3, [r1, #0]
}
 8003662:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8003666:	4770      	bx	lr

08003668 <Hw_DMA_SPI2_IsTransFinished>:
---------------------------------------------------------------------------*/
u8 Hw_DMA_SPI2_IsTransFinished( void )
{
	u8 Ret = 0;
	
	if( REG_DMA1_ISR & (1<<13) )
 8003668:	2300      	movs	r3, #0
 800366a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8003674:	d00a      	beq.n	800368c <Hw_DMA_SPI2_IsTransFinished+0x24>
	{
		if( REG_DMA1_ISR & (1<<17) )
 8003676:	6819      	ldr	r1, [r3, #0]
 8003678:	f411 3000 	ands.w	r0, r1, #131072	; 0x20000
 800367c:	d006      	beq.n	800368c <Hw_DMA_SPI2_IsTransFinished+0x24>
		{
			REG_DMA1_IFCR = (1<<17) | (1<<13);
 800367e:	2304      	movs	r3, #4
 8003680:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003684:	f44f 3208 	mov.w	r2, #139264	; 0x22000
 8003688:	601a      	str	r2, [r3, #0]
			Ret = 1;
 800368a:	2001      	movs	r0, #1
		}
	}
	return Ret;
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop

08003690 <Hw_I2C_IMU_IO_Setup>:
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8003690:	2204      	movs	r2, #4
 8003692:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003696:	6811      	ldr	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8003698:	f640 4304 	movw	r3, #3076	; 0xc04
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 800369c:	f041 0002 	orr.w	r0, r1, #2
 80036a0:	6010      	str	r0, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 80036a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	f022 010f 	bic.w	r1, r2, #15
 80036ac:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	f040 0203 	orr.w	r2, r0, #3
 80036b4:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	f041 000c 	orr.w	r0, r1, #12
 80036bc:	6018      	str	r0, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 80036c4:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	f040 0230 	orr.w	r2, r0, #48	; 0x30
 80036cc:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 80036d4:	6018      	str	r0, [r3, #0]
 80036d6:	4770      	bx	lr

080036d8 <Hw_I2C_IMU_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_IMU_Init( void )
{
 80036d8:	b570      	push	{r4, r5, r6, lr}
	static u8 power_on = FALSE;
	u32 SR;



	if( power_on == TRUE ) return;
 80036da:	4c1e      	ldr	r4, [pc, #120]	; (8003754 <Hw_I2C_IMU_Init+0x7c>)
 80036dc:	7823      	ldrb	r3, [r4, #0]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d036      	beq.n	8003750 <Hw_I2C_IMU_Init+0x78>


	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	
 80036e2:	481d      	ldr	r0, [pc, #116]	; (8003758 <Hw_I2C_IMU_Init+0x80>)
 80036e4:	4780      	blx	r0


	REG_I2C1_CR1 = 0;
 80036e6:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80036ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80036ee:	2600      	movs	r6, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 80036f0:	f245 4504 	movw	r5, #21508	; 0x5404
	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	


	REG_I2C1_CR1 = 0;
 80036f4:	601e      	str	r6, [r3, #0]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 80036f6:	f2c4 0500 	movt	r5, #16384	; 0x4000
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 80036fa:	f245 401c 	movw	r0, #21532	; 0x541c

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 80036fe:	2624      	movs	r6, #36	; 0x24
 8003700:	602e      	str	r6, [r5, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8003702:	f2c4 0000 	movt	r0, #16384	; 0x4000
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 8003706:	f245 4120 	movw	r1, #21536	; 0x5420
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 800370a:	f248 051e 	movw	r5, #32798	; 0x801e
 800370e:	6005      	str	r5, [r0, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 8003710:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8003714:	200b      	movs	r0, #11


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8003716:	f241 021c 	movw	r2, #4124	; 0x101c
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 800371a:	6008      	str	r0, [r1, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 800371c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003720:	6810      	ldr	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8003722:	f245 4114 	movw	r1, #21524	; 0x5414
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8003726:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 800372a:	6010      	str	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 800372c:	6818      	ldr	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 800372e:	f245 4218 	movw	r2, #21528	; 0x5418
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8003732:	f020 0002 	bic.w	r0, r0, #2
 8003736:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8003738:	6818      	ldr	r0, [r3, #0]

	SR = REG_I2C1_SR1;
 800373a:	f2c4 0100 	movt	r1, #16384	; 0x4000
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 800373e:	f040 0001 	orr.w	r0, r0, #1
 8003742:	6018      	str	r0, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8003744:	f2c4 0200 	movt	r2, #16384	; 0x4000


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8003748:	680b      	ldr	r3, [r1, #0]
	SR = REG_I2C1_SR2;
 800374a:	6813      	ldr	r3, [r2, #0]


	power_on = TRUE;
 800374c:	2301      	movs	r3, #1
 800374e:	7023      	strb	r3, [r4, #0]
 8003750:	bd70      	pop	{r4, r5, r6, pc}
 8003752:	bf00      	nop
 8003754:	20000484 	.word	0x20000484
 8003758:	08003691 	.word	0x08003691

0800375c <Hw_I2C_IMU_GetErrStatus>:
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
 800375c:	f245 4314 	movw	r3, #21524	; 0x5414
 8003760:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003764:	681a      	ldr	r2, [r3, #0]
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 8003766:	6819      	ldr	r1, [r3, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
 8003768:	f412 6f00 	tst.w	r2, #2048	; 0x800
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 800376c:	681a      	ldr	r2, [r3, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
 800376e:	bf14      	ite	ne
 8003770:	200b      	movne	r0, #11
 8003772:	2000      	moveq	r0, #0
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 8003774:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8003778:	bf18      	it	ne
 800377a:	200a      	movne	r0, #10
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 800377c:	0592      	lsls	r2, r2, #22
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
 800377e:	b410      	push	{r4}
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 8003780:	681b      	ldr	r3, [r3, #0]
	u16 Err = 0;
	u16 SR;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 8003782:	d505      	bpl.n	8003790 <Hw_I2C_IMU_GetErrStatus+0x34>
 8003784:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003788:	bf14      	ite	ne
 800378a:	2008      	movne	r0, #8
 800378c:	2009      	moveq	r0, #9
 800378e:	e002      	b.n	8003796 <Hw_I2C_IMU_GetErrStatus+0x3a>
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 8003790:	05db      	lsls	r3, r3, #23
 8003792:	d51a      	bpl.n	80037ca <Hw_I2C_IMU_GetErrStatus+0x6e>
 8003794:	2008      	movs	r0, #8

	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
	{
		CLR_BIT( REG_I2C1_CR1, 0 );		// Peripheral disable	
 8003796:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800379a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800379e:	681c      	ldr	r4, [r3, #0]
		SR = REG_I2C1_SR1;
 80037a0:	f245 4114 	movw	r1, #21524	; 0x5414

	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
	{
		CLR_BIT( REG_I2C1_CR1, 0 );		// Peripheral disable	
 80037a4:	f024 0401 	bic.w	r4, r4, #1
		SR = REG_I2C1_SR1;
		SR = REG_I2C1_SR2;
 80037a8:	f245 4218 	movw	r2, #21528	; 0x5418

	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
	{
		CLR_BIT( REG_I2C1_CR1, 0 );		// Peripheral disable	
 80037ac:	601c      	str	r4, [r3, #0]
		SR = REG_I2C1_SR1;
 80037ae:	f2c4 0100 	movt	r1, #16384	; 0x4000
		SR = REG_I2C1_SR2;
 80037b2:	f2c4 0200 	movt	r2, #16384	; 0x4000
	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
	{
		CLR_BIT( REG_I2C1_CR1, 0 );		// Peripheral disable	
		SR = REG_I2C1_SR1;
 80037b6:	680c      	ldr	r4, [r1, #0]
		SR = REG_I2C1_SR2;
 80037b8:	6814      	ldr	r4, [r2, #0]

		SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 80037ba:	681c      	ldr	r4, [r3, #0]
 80037bc:	f044 0401 	orr.w	r4, r4, #1
 80037c0:	601c      	str	r4, [r3, #0]
		SR = REG_I2C1_SR1;
 80037c2:	680b      	ldr	r3, [r1, #0]
		SR = REG_I2C1_SR2;
 80037c4:	6813      	ldr	r3, [r2, #0]
	}

	return Err;
}
 80037c6:	bc10      	pop	{r4}
 80037c8:	4770      	bx	lr
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;


	//-- 에러가 난경우 복구
	//
	if( Err != 0 )
 80037ca:	2800      	cmp	r0, #0
 80037cc:	d0fb      	beq.n	80037c6 <Hw_I2C_IMU_GetErrStatus+0x6a>
 80037ce:	e7e2      	b.n	8003796 <Hw_I2C_IMU_GetErrStatus+0x3a>

080037d0 <Hw_I2C_IMU_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_ReadRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_reg, u16 len )
{
 80037d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d2:	b08d      	sub	sp, #52	; 0x34
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;


	if( len > 0 ) LastIndex = len - 1;
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8117 	beq.w	8003a08 <Hw_I2C_IMU_ReadRegs+0x238>
 80037da:	1e5f      	subs	r7, r3, #1
 80037dc:	b2ff      	uxtb	r7, r7
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 80037de:	f245 4514 	movw	r5, #21524	; 0x5414
 80037e2:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80037e6:	682e      	ldr	r6, [r5, #0]
			SR2 = REG_I2C1_SR2;
 80037e8:	f245 4418 	movw	r4, #21528	; 0x5418
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 80037ec:	9600      	str	r6, [sp, #0]
			SR2 = REG_I2C1_SR2;
 80037ee:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80037f2:	6824      	ldr	r4, [r4, #0]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80037f4:	f44f 46a8 	mov.w	r6, #21504	; 0x5400
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
			SR2 = REG_I2C1_SR2;
 80037f8:	9401      	str	r4, [sp, #4]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80037fa:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80037fe:	f8d6 c000 	ldr.w	ip, [r6]
 8003802:	f242 7410 	movw	r4, #10000	; 0x2710
 8003806:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 800380a:	f8c6 c000 	str.w	ip, [r6]
 800380e:	e008      	b.n	8003822 <Hw_I2C_IMU_ReadRegs+0x52>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003810:	682e      	ldr	r6, [r5, #0]
 8003812:	9602      	str	r6, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003814:	9e02      	ldr	r6, [sp, #8]
 8003816:	f016 0f01 	tst.w	r6, #1
 800381a:	d108      	bne.n	800382e <Hw_I2C_IMU_ReadRegs+0x5e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800381c:	3c01      	subs	r4, #1
 800381e:	f000 80f5 	beq.w	8003a0c <Hw_I2C_IMU_ReadRegs+0x23c>
	{
		Reg = *reg_addr;
 8003822:	682e      	ldr	r6, [r5, #0]
 8003824:	3c01      	subs	r4, #1
 8003826:	9602      	str	r6, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003828:	9e02      	ldr	r6, [sp, #8]
 800382a:	07f6      	lsls	r6, r6, #31
 800382c:	d5f0      	bpl.n	8003810 <Hw_I2C_IMU_ReadRegs+0x40>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800382e:	f245 4518 	movw	r5, #21528	; 0x5418

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003832:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003836:	f2c4 0500 	movt	r5, #16384	; 0x4000
 800383a:	e008      	b.n	800384e <Hw_I2C_IMU_ReadRegs+0x7e>
 800383c:	682e      	ldr	r6, [r5, #0]
 800383e:	9603      	str	r6, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003840:	9e03      	ldr	r6, [sp, #12]
 8003842:	f016 0f01 	tst.w	r6, #1
 8003846:	d108      	bne.n	800385a <Hw_I2C_IMU_ReadRegs+0x8a>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003848:	3c01      	subs	r4, #1
 800384a:	f000 80df 	beq.w	8003a0c <Hw_I2C_IMU_ReadRegs+0x23c>
	{
		Reg = *reg_addr;
 800384e:	682e      	ldr	r6, [r5, #0]
 8003850:	3c01      	subs	r4, #1
 8003852:	9603      	str	r6, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003854:	9e03      	ldr	r6, [sp, #12]
 8003856:	07f6      	lsls	r6, r6, #31
 8003858:	d5f0      	bpl.n	800383c <Hw_I2C_IMU_ReadRegs+0x6c>



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 800385a:	f245 4410 	movw	r4, #21520	; 0x5410
 800385e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003862:	0040      	lsls	r0, r0, #1
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003864:	f245 4514 	movw	r5, #21524	; 0x5414



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8003868:	6020      	str	r0, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800386a:	f2c4 0500 	movt	r5, #16384	; 0x4000



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 800386e:	f242 7410 	movw	r4, #10000	; 0x2710
 8003872:	e008      	b.n	8003886 <Hw_I2C_IMU_ReadRegs+0xb6>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003874:	682e      	ldr	r6, [r5, #0]
 8003876:	9604      	str	r6, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003878:	9e04      	ldr	r6, [sp, #16]
 800387a:	f016 0f02 	tst.w	r6, #2
 800387e:	d108      	bne.n	8003892 <Hw_I2C_IMU_ReadRegs+0xc2>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003880:	3c01      	subs	r4, #1
 8003882:	f000 80df 	beq.w	8003a44 <Hw_I2C_IMU_ReadRegs+0x274>
	{
		Reg = *reg_addr;
 8003886:	682e      	ldr	r6, [r5, #0]
 8003888:	3c01      	subs	r4, #1
 800388a:	9604      	str	r6, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800388c:	9e04      	ldr	r6, [sp, #16]
 800388e:	07b6      	lsls	r6, r6, #30
 8003890:	d5f0      	bpl.n	8003874 <Hw_I2C_IMU_ReadRegs+0xa4>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003892:	f245 4518 	movw	r5, #21528	; 0x5418
 8003896:	f2c4 0500 	movt	r5, #16384	; 0x4000
 800389a:	682c      	ldr	r4, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800389c:	f245 4514 	movw	r5, #21524	; 0x5414
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80038a0:	9401      	str	r4, [sp, #4]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80038a2:	f2c4 0500 	movt	r5, #16384	; 0x4000
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80038a6:	f242 7410 	movw	r4, #10000	; 0x2710
 80038aa:	e008      	b.n	80038be <Hw_I2C_IMU_ReadRegs+0xee>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80038ac:	682e      	ldr	r6, [r5, #0]
 80038ae:	9605      	str	r6, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80038b0:	9e05      	ldr	r6, [sp, #20]
 80038b2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80038b6:	d108      	bne.n	80038ca <Hw_I2C_IMU_ReadRegs+0xfa>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80038b8:	3c01      	subs	r4, #1
 80038ba:	f000 80cb 	beq.w	8003a54 <Hw_I2C_IMU_ReadRegs+0x284>
	{
		Reg = *reg_addr;
 80038be:	682e      	ldr	r6, [r5, #0]
 80038c0:	3c01      	subs	r4, #1
 80038c2:	9605      	str	r6, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80038c4:	9e05      	ldr	r6, [sp, #20]
 80038c6:	0636      	lsls	r6, r6, #24
 80038c8:	d5f0      	bpl.n	80038ac <Hw_I2C_IMU_ReadRegs+0xdc>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80038ca:	f245 4514 	movw	r5, #21524	; 0x5414

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80038ce:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80038d2:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80038d6:	e008      	b.n	80038ea <Hw_I2C_IMU_ReadRegs+0x11a>
 80038d8:	682e      	ldr	r6, [r5, #0]
 80038da:	9606      	str	r6, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80038dc:	9e06      	ldr	r6, [sp, #24]
 80038de:	f016 0f80 	tst.w	r6, #128	; 0x80
 80038e2:	d109      	bne.n	80038f8 <Hw_I2C_IMU_ReadRegs+0x128>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80038e4:	3c01      	subs	r4, #1
 80038e6:	f000 80b5 	beq.w	8003a54 <Hw_I2C_IMU_ReadRegs+0x284>
	{
		Reg = *reg_addr;
 80038ea:	682e      	ldr	r6, [r5, #0]
 80038ec:	3c01      	subs	r4, #1
 80038ee:	9606      	str	r6, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80038f0:	9e06      	ldr	r6, [sp, #24]
 80038f2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80038f6:	d0ef      	beq.n	80038d8 <Hw_I2C_IMU_ReadRegs+0x108>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 80038f8:	f245 4510 	movw	r5, #21520	; 0x5410
 80038fc:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003900:	f245 4414 	movw	r4, #21524	; 0x5414
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 8003904:	6029      	str	r1, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003906:	f2c4 0400 	movt	r4, #16384	; 0x4000
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 800390a:	f242 7110 	movw	r1, #10000	; 0x2710
 800390e:	e008      	b.n	8003922 <Hw_I2C_IMU_ReadRegs+0x152>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003910:	6825      	ldr	r5, [r4, #0]
 8003912:	9507      	str	r5, [sp, #28]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003914:	9d07      	ldr	r5, [sp, #28]
 8003916:	f015 0f04 	tst.w	r5, #4
 800391a:	d108      	bne.n	800392e <Hw_I2C_IMU_ReadRegs+0x15e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800391c:	3901      	subs	r1, #1
 800391e:	f000 80a5 	beq.w	8003a6c <Hw_I2C_IMU_ReadRegs+0x29c>
	{
		Reg = *reg_addr;
 8003922:	6825      	ldr	r5, [r4, #0]
 8003924:	3901      	subs	r1, #1
 8003926:	9507      	str	r5, [sp, #28]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003928:	9d07      	ldr	r5, [sp, #28]
 800392a:	076d      	lsls	r5, r5, #29
 800392c:	d5f0      	bpl.n	8003910 <Hw_I2C_IMU_ReadRegs+0x140>



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 800392e:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8003932:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8003936:	680d      	ldr	r5, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003938:	f245 4414 	movw	r4, #21524	; 0x5414



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 800393c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8003940:	600d      	str	r5, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003942:	f2c4 0400 	movt	r4, #16384	; 0x4000



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8003946:	f242 7110 	movw	r1, #10000	; 0x2710
 800394a:	e007      	b.n	800395c <Hw_I2C_IMU_ReadRegs+0x18c>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800394c:	6825      	ldr	r5, [r4, #0]
 800394e:	9508      	str	r5, [sp, #32]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003950:	9d08      	ldr	r5, [sp, #32]
 8003952:	f015 0f01 	tst.w	r5, #1
 8003956:	d108      	bne.n	800396a <Hw_I2C_IMU_ReadRegs+0x19a>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003958:	3901      	subs	r1, #1
 800395a:	d057      	beq.n	8003a0c <Hw_I2C_IMU_ReadRegs+0x23c>
	{
		Reg = *reg_addr;
 800395c:	6825      	ldr	r5, [r4, #0]
 800395e:	3901      	subs	r1, #1
 8003960:	9508      	str	r5, [sp, #32]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003962:	9d08      	ldr	r5, [sp, #32]
 8003964:	f015 0f01 	tst.w	r5, #1
 8003968:	d0f0      	beq.n	800394c <Hw_I2C_IMU_ReadRegs+0x17c>
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 800396a:	f245 4110 	movw	r1, #21520	; 0x5410
 800396e:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8003972:	f040 0001 	orr.w	r0, r0, #1
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003976:	f245 4414 	movw	r4, #21524	; 0x5414
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 800397a:	6008      	str	r0, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800397c:	f2c4 0400 	movt	r4, #16384	; 0x4000
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 8003980:	f242 7110 	movw	r1, #10000	; 0x2710
 8003984:	e006      	b.n	8003994 <Hw_I2C_IMU_ReadRegs+0x1c4>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003986:	6820      	ldr	r0, [r4, #0]
 8003988:	9009      	str	r0, [sp, #36]	; 0x24

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800398a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800398c:	0780      	lsls	r0, r0, #30
 800398e:	d407      	bmi.n	80039a0 <Hw_I2C_IMU_ReadRegs+0x1d0>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003990:	3901      	subs	r1, #1
 8003992:	d057      	beq.n	8003a44 <Hw_I2C_IMU_ReadRegs+0x274>
	{
		Reg = *reg_addr;
 8003994:	6820      	ldr	r0, [r4, #0]
 8003996:	3901      	subs	r1, #1
 8003998:	9009      	str	r0, [sp, #36]	; 0x24

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800399a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800399c:	0780      	lsls	r0, r0, #30
 800399e:	d5f2      	bpl.n	8003986 <Hw_I2C_IMU_ReadRegs+0x1b6>
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80039a0:	f245 4018 	movw	r0, #21528	; 0x5418
 80039a4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80039a8:	6801      	ldr	r1, [r0, #0]
 80039aa:	9101      	str	r1, [sp, #4]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80039ac:	b353      	cbz	r3, 8003a04 <Hw_I2C_IMU_ReadRegs+0x234>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 80039ae:	f44f 45a8 	mov.w	r5, #21504	; 0x5400
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80039b2:	f245 4014 	movw	r0, #21524	; 0x5414


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, HW_I2C_IMU_TIMEOUT );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 80039b6:	f245 4c10 	movw	ip, #21520	; 0x5410
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80039ba:	2600      	movs	r6, #0
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 80039bc:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80039c0:	f2c4 0000 	movt	r0, #16384	; 0x4000


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, HW_I2C_IMU_TIMEOUT );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 80039c4:	f2c4 0c00 	movt	ip, #16384	; 0x4000

			//-- Read DATA
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
 80039c8:	42b7      	cmp	r7, r6
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 80039ca:	682c      	ldr	r4, [r5, #0]

			//-- Read DATA
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
 80039cc:	d944      	bls.n	8003a58 <Hw_I2C_IMU_ReadRegs+0x288>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 80039ce:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80039d2:	602c      	str	r4, [r5, #0]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80039d4:	f242 7110 	movw	r1, #10000	; 0x2710
 80039d8:	e007      	b.n	80039ea <Hw_I2C_IMU_ReadRegs+0x21a>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80039da:	6804      	ldr	r4, [r0, #0]
 80039dc:	940a      	str	r4, [sp, #40]	; 0x28

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80039de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80039e0:	f014 0f40 	tst.w	r4, #64	; 0x40
 80039e4:	d107      	bne.n	80039f6 <Hw_I2C_IMU_ReadRegs+0x226>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80039e6:	3901      	subs	r1, #1
 80039e8:	d03e      	beq.n	8003a68 <Hw_I2C_IMU_ReadRegs+0x298>
	{
		Reg = *reg_addr;
 80039ea:	6804      	ldr	r4, [r0, #0]
 80039ec:	3901      	subs	r1, #1
 80039ee:	940a      	str	r4, [sp, #40]	; 0x28

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80039f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80039f2:	0664      	lsls	r4, r4, #25
 80039f4:	d5f1      	bpl.n	80039da <Hw_I2C_IMU_ReadRegs+0x20a>


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, HW_I2C_IMU_TIMEOUT );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 80039f6:	f8dc 4000 	ldr.w	r4, [ip]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80039fa:	1c71      	adds	r1, r6, #1


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, HW_I2C_IMU_TIMEOUT );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 80039fc:	5594      	strb	r4, [r2, r6]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80039fe:	b2ce      	uxtb	r6, r1
 8003a00:	42b3      	cmp	r3, r6
 8003a02:	d8e1      	bhi.n	80039c8 <Hw_I2C_IMU_ReadRegs+0x1f8>
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_ReadRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_reg, u16 len )
{
    u16 Ret = 0;
    u16 Err = 0;
 8003a04:	2000      	movs	r0, #0
 8003a06:	e002      	b.n	8003a0e <Hw_I2C_IMU_ReadRegs+0x23e>
	u8  i;
	u32 TimeOut;
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;
 8003a08:	461f      	mov	r7, r3
 8003a0a:	e6e8      	b.n	80037de <Hw_I2C_IMU_ReadRegs+0xe>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 8003a0c:	2002      	movs	r0, #2
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003a0e:	f245 4218 	movw	r2, #21528	; 0x5418
				{
					ptr_reg[i] = REG_I2C1_DR;
				}
				else
				{
					Err = HW_I2C_ERR_RXE;
 8003a12:	f242 7310 	movw	r3, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003a16:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003a1a:	e006      	b.n	8003a2a <Hw_I2C_IMU_ReadRegs+0x25a>
 8003a1c:	6811      	ldr	r1, [r2, #0]
 8003a1e:	910b      	str	r1, [sp, #44]	; 0x2c

		if( IS_CLR_BIT( Reg, reg_bit ) ) break;
 8003a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a22:	0789      	lsls	r1, r1, #30
 8003a24:	d507      	bpl.n	8003a36 <Hw_I2C_IMU_ReadRegs+0x266>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003a26:	3b01      	subs	r3, #1
 8003a28:	d00a      	beq.n	8003a40 <Hw_I2C_IMU_ReadRegs+0x270>
	{
		Reg = *reg_addr;
 8003a2a:	6811      	ldr	r1, [r2, #0]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	910b      	str	r1, [sp, #44]	; 0x2c

		if( IS_CLR_BIT( Reg, reg_bit ) ) break;
 8003a30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a32:	0789      	lsls	r1, r1, #30
 8003a34:	d4f2      	bmi.n	8003a1c <Hw_I2C_IMU_ReadRegs+0x24c>
	Ret = Hw_I2C_IMU_WaitForBitClr( (u32 *)&REG_I2C1_SR2, 1, HW_I2C_IMU_TIMEOUT );

	if( Ret != 0 )	Err = HW_I2C_ERR_END;


	if( Err == 0 )
 8003a36:	b908      	cbnz	r0, 8003a3c <Hw_I2C_IMU_ReadRegs+0x26c>
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 8003a38:	480d      	ldr	r0, [pc, #52]	; (8003a70 <Hw_I2C_IMU_ReadRegs+0x2a0>)
 8003a3a:	4780      	blx	r0
	}
	

    return Err;

}
 8003a3c:	b00d      	add	sp, #52	; 0x34
 8003a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

	//-- I2C가 Idle일때까지 기다린다.
	//
	Ret = Hw_I2C_IMU_WaitForBitClr( (u32 *)&REG_I2C1_SR2, 1, HW_I2C_IMU_TIMEOUT );

	if( Ret != 0 )	Err = HW_I2C_ERR_END;
 8003a40:	2007      	movs	r0, #7
 8003a42:	e7fb      	b.n	8003a3c <Hw_I2C_IMU_ReadRegs+0x26c>
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003a44:	f245 4318 	movw	r3, #21528	; 0x5418
 8003a48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a4c:	681a      	ldr	r2, [r3, #0]

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 8003a4e:	2003      	movs	r0, #3
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003a50:	9201      	str	r2, [sp, #4]
 8003a52:	e7dc      	b.n	8003a0e <Hw_I2C_IMU_ReadRegs+0x23e>

			
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, HW_I2C_IMU_TIMEOUT );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 8003a54:	2004      	movs	r0, #4
 8003a56:	e7da      	b.n	8003a0e <Hw_I2C_IMU_ReadRegs+0x23e>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 8003a58:	f424 6180 	bic.w	r1, r4, #1024	; 0x400
 8003a5c:	6029      	str	r1, [r5, #0]
					SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 8003a5e:	682c      	ldr	r4, [r5, #0]
 8003a60:	f444 7100 	orr.w	r1, r4, #512	; 0x200
 8003a64:	6029      	str	r1, [r5, #0]
 8003a66:	e7b5      	b.n	80039d4 <Hw_I2C_IMU_ReadRegs+0x204>
				{
					ptr_reg[i] = REG_I2C1_DR;
				}
				else
				{
					Err = HW_I2C_ERR_RXE;
 8003a68:	2005      	movs	r0, #5
 8003a6a:	e7d0      	b.n	8003a0e <Hw_I2C_IMU_ReadRegs+0x23e>


			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, HW_I2C_IMU_TIMEOUT );	// BTF
			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_STOP;
 8003a6c:	2006      	movs	r0, #6
 8003a6e:	e7ce      	b.n	8003a0e <Hw_I2C_IMU_ReadRegs+0x23e>
 8003a70:	0800375d 	.word	0x0800375d

08003a74 <Hw_I2C_IMU_HMC5883_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	4606      	mov	r6, r0
 8003a78:	460d      	mov	r5, r1
	}
	

	return Ret;
	*/
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_reg, len );
 8003a7a:	f243 74d1 	movw	r4, #14289	; 0x37d1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8003a7e:	4613      	mov	r3, r2
	}
	

	return Ret;
	*/
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_reg, len );
 8003a80:	201e      	movs	r0, #30
 8003a82:	4631      	mov	r1, r6
 8003a84:	462a      	mov	r2, r5
 8003a86:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003a8a:	47a0      	blx	r4
}
 8003a8c:	bd70      	pop	{r4, r5, r6, pc}
 8003a8e:	bf00      	nop

08003a90 <Hw_I2C_IMU_HMC5883_ReadReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 8003a90:	4603      	mov	r3, r0
 8003a92:	b510      	push	{r4, lr}
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_reg, 1 );
 8003a94:	f243 74d1 	movw	r4, #14289	; 0x37d1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 8003a98:	460a      	mov	r2, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_reg, 1 );
 8003a9a:	201e      	movs	r0, #30
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	47a0      	blx	r4
}
 8003aa6:	bd10      	pop	{r4, pc}

08003aa8 <Hw_I2C_IMU_MPU6050_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	4606      	mov	r6, r0
 8003aac:	460d      	mov	r5, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, len );
 8003aae:	f243 74d1 	movw	r4, #14289	; 0x37d1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8003ab2:	4613      	mov	r3, r2
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, len );
 8003ab4:	2068      	movs	r0, #104	; 0x68
 8003ab6:	4631      	mov	r1, r6
 8003ab8:	462a      	mov	r2, r5
 8003aba:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003abe:	47a0      	blx	r4
}
 8003ac0:	bd70      	pop	{r4, r5, r6, pc}
 8003ac2:	bf00      	nop

08003ac4 <Hw_I2C_IMU_MPU6050_ReadReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	b510      	push	{r4, lr}
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, 1 );
 8003ac8:	f243 74d1 	movw	r4, #14289	; 0x37d1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 8003acc:	460a      	mov	r2, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, 1 );
 8003ace:	2068      	movs	r0, #104	; 0x68
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	47a0      	blx	r4
}
 8003ada:	bd10      	pop	{r4, pc}

08003adc <Hw_I2C_IMU_WriteRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 8003adc:	b570      	push	{r4, r5, r6, lr}

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8003ade:	f44f 44a8 	mov.w	r4, #21504	; 0x5400
 8003ae2:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003ae6:	6826      	ldr	r6, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003ae8:	f245 4514 	movw	r5, #21524	; 0x5414

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8003aec:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 8003af0:	6026      	str	r6, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 8003af2:	b088      	sub	sp, #32

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8003af4:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003af8:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8003afc:	e008      	b.n	8003b10 <Hw_I2C_IMU_WriteRegs+0x34>
 8003afe:	682e      	ldr	r6, [r5, #0]
 8003b00:	9601      	str	r6, [sp, #4]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b02:	9e01      	ldr	r6, [sp, #4]
 8003b04:	f016 0f01 	tst.w	r6, #1
 8003b08:	d109      	bne.n	8003b1e <Hw_I2C_IMU_WriteRegs+0x42>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003b0a:	3c01      	subs	r4, #1
 8003b0c:	f000 8097 	beq.w	8003c3e <Hw_I2C_IMU_WriteRegs+0x162>
	{
		Reg = *reg_addr;
 8003b10:	682e      	ldr	r6, [r5, #0]
 8003b12:	3c01      	subs	r4, #1
 8003b14:	9601      	str	r6, [sp, #4]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b16:	9e01      	ldr	r6, [sp, #4]
 8003b18:	f016 0f01 	tst.w	r6, #1
 8003b1c:	d0ef      	beq.n	8003afe <Hw_I2C_IMU_WriteRegs+0x22>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8003b1e:	f245 4510 	movw	r5, #21520	; 0x5410
 8003b22:	0040      	lsls	r0, r0, #1
 8003b24:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b28:	f245 4414 	movw	r4, #21524	; 0x5414
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8003b2c:	6028      	str	r0, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b2e:	f2c4 0400 	movt	r4, #16384	; 0x4000
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8003b32:	f242 7010 	movw	r0, #10000	; 0x2710
 8003b36:	e007      	b.n	8003b48 <Hw_I2C_IMU_WriteRegs+0x6c>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b38:	6825      	ldr	r5, [r4, #0]
 8003b3a:	9502      	str	r5, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b3c:	9d02      	ldr	r5, [sp, #8]
 8003b3e:	f015 0f02 	tst.w	r5, #2
 8003b42:	d107      	bne.n	8003b54 <Hw_I2C_IMU_WriteRegs+0x78>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003b44:	3801      	subs	r0, #1
 8003b46:	d05b      	beq.n	8003c00 <Hw_I2C_IMU_WriteRegs+0x124>
	{
		Reg = *reg_addr;
 8003b48:	6825      	ldr	r5, [r4, #0]
 8003b4a:	3801      	subs	r0, #1
 8003b4c:	9502      	str	r5, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b4e:	9d02      	ldr	r5, [sp, #8]
 8003b50:	07ad      	lsls	r5, r5, #30
 8003b52:	d5f1      	bpl.n	8003b38 <Hw_I2C_IMU_WriteRegs+0x5c>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003b54:	f245 4518 	movw	r5, #21528	; 0x5418
 8003b58:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b5c:	f245 4414 	movw	r4, #21524	; 0x5414
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003b60:	6828      	ldr	r0, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b62:	f2c4 0400 	movt	r4, #16384	; 0x4000
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003b66:	f242 7010 	movw	r0, #10000	; 0x2710
 8003b6a:	e008      	b.n	8003b7e <Hw_I2C_IMU_WriteRegs+0xa2>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b6c:	6825      	ldr	r5, [r4, #0]
 8003b6e:	9503      	str	r5, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b70:	9d03      	ldr	r5, [sp, #12]
 8003b72:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003b76:	d108      	bne.n	8003b8a <Hw_I2C_IMU_WriteRegs+0xae>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003b78:	3801      	subs	r0, #1
 8003b7a:	f000 8082 	beq.w	8003c82 <Hw_I2C_IMU_WriteRegs+0x1a6>
	{
		Reg = *reg_addr;
 8003b7e:	6825      	ldr	r5, [r4, #0]
 8003b80:	3801      	subs	r0, #1
 8003b82:	9503      	str	r5, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b84:	9d03      	ldr	r5, [sp, #12]
 8003b86:	062d      	lsls	r5, r5, #24
 8003b88:	d5f0      	bpl.n	8003b6c <Hw_I2C_IMU_WriteRegs+0x90>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b8a:	f245 4414 	movw	r4, #21524	; 0x5414

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b8e:	f242 7010 	movw	r0, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003b92:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003b96:	e007      	b.n	8003ba8 <Hw_I2C_IMU_WriteRegs+0xcc>
 8003b98:	6825      	ldr	r5, [r4, #0]
 8003b9a:	9504      	str	r5, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003b9c:	9d04      	ldr	r5, [sp, #16]
 8003b9e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003ba2:	d108      	bne.n	8003bb6 <Hw_I2C_IMU_WriteRegs+0xda>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003ba4:	3801      	subs	r0, #1
 8003ba6:	d06c      	beq.n	8003c82 <Hw_I2C_IMU_WriteRegs+0x1a6>
	{
		Reg = *reg_addr;
 8003ba8:	6825      	ldr	r5, [r4, #0]
 8003baa:	3801      	subs	r0, #1
 8003bac:	9504      	str	r5, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003bae:	9d04      	ldr	r5, [sp, #16]
 8003bb0:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003bb4:	d0f0      	beq.n	8003b98 <Hw_I2C_IMU_WriteRegs+0xbc>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;	
 8003bb6:	f245 4610 	movw	r6, #21520	; 0x5410
 8003bba:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8003bbe:	6031      	str	r1, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
    u16 Ret = 0;
    u16 Err = 0;
 8003bc0:	4618      	mov	r0, r3

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d054      	beq.n	8003c70 <Hw_I2C_IMU_WriteRegs+0x194>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003bc6:	f245 4414 	movw	r4, #21524	; 0x5414

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 8003bca:	2500      	movs	r5, #0
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003bcc:	f2c4 0400 	movt	r4, #16384	; 0x4000

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003bd0:	f242 7110 	movw	r1, #10000	; 0x2710
 8003bd4:	e006      	b.n	8003be4 <Hw_I2C_IMU_WriteRegs+0x108>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003bd6:	6820      	ldr	r0, [r4, #0]
 8003bd8:	9005      	str	r0, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003bda:	9805      	ldr	r0, [sp, #20]
 8003bdc:	0600      	lsls	r0, r0, #24
 8003bde:	d407      	bmi.n	8003bf0 <Hw_I2C_IMU_WriteRegs+0x114>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003be0:	3901      	subs	r1, #1
 8003be2:	d030      	beq.n	8003c46 <Hw_I2C_IMU_WriteRegs+0x16a>
	{
		Reg = *reg_addr;
 8003be4:	6820      	ldr	r0, [r4, #0]
 8003be6:	3901      	subs	r1, #1
 8003be8:	9005      	str	r0, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003bea:	9805      	ldr	r0, [sp, #20]
 8003bec:	0600      	lsls	r0, r0, #24
 8003bee:	d5f2      	bpl.n	8003bd6 <Hw_I2C_IMU_WriteRegs+0xfa>
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 8003bf0:	5d50      	ldrb	r0, [r2, r5]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 8003bf2:	3501      	adds	r5, #1
 8003bf4:	b2ed      	uxtb	r5, r5
 8003bf6:	429d      	cmp	r5, r3
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 8003bf8:	6030      	str	r0, [r6, #0]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 8003bfa:	d3e9      	bcc.n	8003bd0 <Hw_I2C_IMU_WriteRegs+0xf4>
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
    u16 Ret = 0;
    u16 Err = 0;
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	e023      	b.n	8003c48 <Hw_I2C_IMU_WriteRegs+0x16c>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, HW_I2C_IMU_TIMEOUT );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8003c00:	f245 4318 	movw	r3, #21528	; 0x5418
 8003c04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c08:	681b      	ldr	r3, [r3, #0]

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 8003c0a:	2003      	movs	r0, #3
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003c0c:	f245 4218 	movw	r2, #21528	; 0x5418
			if( len > 0 )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, HW_I2C_IMU_TIMEOUT );	// BTF
				if( Ret != 0 ) 
				{
					Err = HW_I2C_ERR_STOP;
 8003c10:	f242 7310 	movw	r3, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003c14:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003c18:	e006      	b.n	8003c28 <Hw_I2C_IMU_WriteRegs+0x14c>
 8003c1a:	6811      	ldr	r1, [r2, #0]
 8003c1c:	9107      	str	r1, [sp, #28]

		if( IS_CLR_BIT( Reg, reg_bit ) ) break;
 8003c1e:	9907      	ldr	r1, [sp, #28]
 8003c20:	0789      	lsls	r1, r1, #30
 8003c22:	d507      	bpl.n	8003c34 <Hw_I2C_IMU_WriteRegs+0x158>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003c24:	3b01      	subs	r3, #1
 8003c26:	d00c      	beq.n	8003c42 <Hw_I2C_IMU_WriteRegs+0x166>
	{
		Reg = *reg_addr;
 8003c28:	6811      	ldr	r1, [r2, #0]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	9107      	str	r1, [sp, #28]

		if( IS_CLR_BIT( Reg, reg_bit ) ) break;
 8003c2e:	9907      	ldr	r1, [sp, #28]
 8003c30:	0789      	lsls	r1, r1, #30
 8003c32:	d4f2      	bmi.n	8003c1a <Hw_I2C_IMU_WriteRegs+0x13e>

	if( Ret != 0 )	Err = HW_I2C_ERR_END;



	if( Err == 0 )
 8003c34:	b908      	cbnz	r0, 8003c3a <Hw_I2C_IMU_WriteRegs+0x15e>
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 8003c36:	4815      	ldr	r0, [pc, #84]	; (8003c8c <Hw_I2C_IMU_WriteRegs+0x1b0>)
 8003c38:	4780      	blx	r0
	}
	

    return Err;
}
 8003c3a:	b008      	add	sp, #32
 8003c3c:	bd70      	pop	{r4, r5, r6, pc}
			SET_BIT( REG_I2C1_CR1, 8 );

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 0, HW_I2C_IMU_TIMEOUT );
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 8003c3e:	2002      	movs	r0, #2
 8003c40:	e7e4      	b.n	8003c0c <Hw_I2C_IMU_WriteRegs+0x130>

	//-- I2C가 Idle일때까지 기다린다.
	//
	Ret = Hw_I2C_IMU_WaitForBitClr( (u32 *)&REG_I2C1_SR2, 1, HW_I2C_IMU_TIMEOUT );

	if( Ret != 0 )	Err = HW_I2C_ERR_END;
 8003c42:	2007      	movs	r0, #7
 8003c44:	e7f9      	b.n	8003c3a <Hw_I2C_IMU_WriteRegs+0x15e>
			for( i=0; i<len; i++ )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, HW_I2C_IMU_TIMEOUT );	// TXE
				if( Ret != 0 )
				{
					Err = HW_I2C_ERR_TXE;
 8003c46:	2004      	movs	r0, #4
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003c48:	f245 4214 	movw	r2, #21524	; 0x5414
			for( i=0; i<len; i++ )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, HW_I2C_IMU_TIMEOUT );	// TXE
				if( Ret != 0 )
				{
					Err = HW_I2C_ERR_TXE;
 8003c4c:	f242 7310 	movw	r3, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8003c50:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003c54:	e006      	b.n	8003c64 <Hw_I2C_IMU_WriteRegs+0x188>
 8003c56:	6811      	ldr	r1, [r2, #0]
 8003c58:	9106      	str	r1, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003c5a:	9906      	ldr	r1, [sp, #24]
 8003c5c:	0749      	lsls	r1, r1, #29
 8003c5e:	d407      	bmi.n	8003c70 <Hw_I2C_IMU_WriteRegs+0x194>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8003c60:	3b01      	subs	r3, #1
 8003c62:	d010      	beq.n	8003c86 <Hw_I2C_IMU_WriteRegs+0x1aa>
	{
		Reg = *reg_addr;
 8003c64:	6811      	ldr	r1, [r2, #0]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	9106      	str	r1, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8003c6a:	9906      	ldr	r1, [sp, #24]
 8003c6c:	0749      	lsls	r1, r1, #29
 8003c6e:	d5f2      	bpl.n	8003c56 <Hw_I2C_IMU_WriteRegs+0x17a>
					Err = HW_I2C_ERR_STOP;
					break;
				}
			}

			SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 8003c70:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8003c74:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8003c78:	680a      	ldr	r2, [r1, #0]
 8003c7a:	f442 7300 	orr.w	r3, r2, #512	; 0x200
 8003c7e:	600b      	str	r3, [r1, #0]
			break;
 8003c80:	e7c4      	b.n	8003c0c <Hw_I2C_IMU_WriteRegs+0x130>
			//Lb_printf("S2 %x\n", REG_I2C1_SR2);
				
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, HW_I2C_IMU_TIMEOUT );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 8003c82:	2004      	movs	r0, #4
 8003c84:	e7c2      	b.n	8003c0c <Hw_I2C_IMU_WriteRegs+0x130>
			if( len > 0 )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, HW_I2C_IMU_TIMEOUT );	// BTF
				if( Ret != 0 ) 
				{
					Err = HW_I2C_ERR_STOP;
 8003c86:	2006      	movs	r0, #6
 8003c88:	e7c0      	b.n	8003c0c <Hw_I2C_IMU_WriteRegs+0x130>
 8003c8a:	bf00      	nop
 8003c8c:	0800375d 	.word	0x0800375d

08003c90 <Hw_I2C_IMU_HMC5883_WriteRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteRegs( u8 reg_addr, u8 *ptr_data, u16 len )
{
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	4606      	mov	r6, r0
 8003c94:	460d      	mov	r5, r1
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_data, len );
 8003c96:	f643 24dd 	movw	r4, #15069	; 0x3add
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteRegs( u8 reg_addr, u8 *ptr_data, u16 len )
{
 8003c9a:	4613      	mov	r3, r2
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, ptr_data, len );
 8003c9c:	201e      	movs	r0, #30
 8003c9e:	4631      	mov	r1, r6
 8003ca0:	462a      	mov	r2, r5
 8003ca2:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003ca6:	47a0      	blx	r4
}
 8003ca8:	bd70      	pop	{r4, r5, r6, pc}
 8003caa:	bf00      	nop

08003cac <Hw_I2C_IMU_HMC5883_WriteAddr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteAddr( u8 reg_addr )
{
 8003cac:	b510      	push	{r4, lr}
	u8 reg_data;

	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, &reg_data, 0 );
 8003cae:	f643 24dd 	movw	r4, #15069	; 0x3add
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_HMC5883_WriteAddr( u8 reg_addr )
{
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	4601      	mov	r1, r0
	u8 reg_data;

	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_HMC5883, reg_addr, &reg_data, 0 );
 8003cb6:	f10d 0207 	add.w	r2, sp, #7
 8003cba:	201e      	movs	r0, #30
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003cc2:	47a0      	blx	r4
}
 8003cc4:	b002      	add	sp, #8
 8003cc6:	bd10      	pop	{r4, pc}

08003cc8 <Hw_I2C_IMU_MPU6050_WriteReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_WriteReg( u8 reg_addr, u8 reg_data )
{
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	4603      	mov	r3, r0
 8003cce:	aa02      	add	r2, sp, #8
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, &reg_data, 1 );
 8003cd0:	f643 24dd 	movw	r4, #15069	; 0x3add
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_WriteReg( u8 reg_addr, u8 reg_data )
{
 8003cd4:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, &reg_data, 1 );
 8003cd8:	2068      	movs	r0, #104	; 0x68
 8003cda:	4619      	mov	r1, r3
 8003cdc:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	47a0      	blx	r4
}
 8003ce4:	b002      	add	sp, #8
 8003ce6:	bd10      	pop	{r4, pc}

08003ce8 <Hw_MPU6050_GetData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_GetData( HW_MPU6050_DATA_OBJ *ptr_data )
{
 8003ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cec:	b089      	sub	sp, #36	; 0x24
 8003cee:	4604      	mov	r4, r0
	s16 Temp;

	HW_MPU6050_RAW_DATA_OBJ raw_data;


	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );
 8003cf0:	a904      	add	r1, sp, #16
 8003cf2:	203b      	movs	r0, #59	; 0x3b
 8003cf4:	220e      	movs	r2, #14
 8003cf6:	4b26      	ldr	r3, [pc, #152]	; (8003d90 <Hw_MPU6050_GetData+0xa8>)
 8003cf8:	4798      	blx	r3

	if( Err == 0 )
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	d145      	bne.n	8003d8a <Hw_MPU6050_GetData+0xa2>

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
 8003cfe:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8003d02:	f89d 1017 	ldrb.w	r1, [sp, #23]
		Temp = Temp/340 + 36;
 8003d06:	f246 0b61 	movw	fp, #24673	; 0x6061

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
 8003d0a:	ea41 2502 	orr.w	r5, r1, r2, lsl #8
		Temp = Temp/340 + 36;
 8003d0e:	b22b      	sxth	r3, r5
 8003d10:	f2c6 0b60 	movt	fp, #24672	; 0x6060
 8003d14:	fb8b 2b03 	smull	r2, fp, fp, r3
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8003d18:	f89d 2019 	ldrb.w	r2, [sp, #25]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8003d1c:	f89d 101a 	ldrb.w	r1, [sp, #26]
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8003d20:	9201      	str	r2, [sp, #4]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8003d22:	f89d 201b 	ldrb.w	r2, [sp, #27]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 8003d26:	f89d a010 	ldrb.w	sl, [sp, #16]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8003d2a:	f89d 8012 	ldrb.w	r8, [sp, #18]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 8003d2e:	f89d 7014 	ldrb.w	r7, [sp, #20]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 8003d32:	f89d 9011 	ldrb.w	r9, [sp, #17]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8003d36:	f89d c013 	ldrb.w	ip, [sp, #19]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 8003d3a:	f89d 6015 	ldrb.w	r6, [sp, #21]

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8003d3e:	9102      	str	r1, [sp, #8]
 8003d40:	9203      	str	r2, [sp, #12]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 8003d42:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8003d46:	ea4c 2e08 	orr.w	lr, ip, r8, lsl #8
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 8003d4a:	ea46 2607 	orr.w	r6, r6, r7, lsl #8

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8003d4e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8003d52:	9f01      	ldr	r7, [sp, #4]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8003d54:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8003d58:	f89d 201d 	ldrb.w	r2, [sp, #29]

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8003d5c:	17db      	asrs	r3, r3, #31
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8003d5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003d62:	f8dd a008 	ldr.w	sl, [sp, #8]
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8003d66:	ebc3 13eb 	rsb	r3, r3, fp, asr #7
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8003d6a:	ea47 2505 	orr.w	r5, r7, r5, lsl #8
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8003d6e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8003d72:	ea48 270a 	orr.w	r7, r8, sl, lsl #8
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8003d76:	3324      	adds	r3, #36	; 0x24

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 8003d78:	f8a4 9000 	strh.w	r9, [r4]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8003d7c:	f8a4 e002 	strh.w	lr, [r4, #2]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 8003d80:	80a6      	strh	r6, [r4, #4]

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8003d82:	8125      	strh	r5, [r4, #8]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8003d84:	8167      	strh	r7, [r4, #10]
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8003d86:	81a1      	strh	r1, [r4, #12]

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
		ptr_data->Temp = Temp;
 8003d88:	80e3      	strh	r3, [r4, #6]
	}

	return Err;
}
 8003d8a:	b009      	add	sp, #36	; 0x24
 8003d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d90:	08003aa9 	.word	0x08003aa9

08003d94 <Hw_MPU6050_I2CAuxMasterDisable>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_I2CAuxMasterDisable( void )
{
 8003d94:	b500      	push	{lr}
 8003d96:	b087      	sub	sp, #28
	u16 Err;
	u8  RegData[20];

	//-- I2C_BYPASS_EN = 1
	//
	Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_INT_PIN_CFG, RegData );
 8003d98:	2037      	movs	r0, #55	; 0x37
 8003d9a:	a901      	add	r1, sp, #4
 8003d9c:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <Hw_MPU6050_I2CAuxMasterDisable+0x28>)
 8003d9e:	4798      	blx	r3
	if( Err ) return Err;
 8003da0:	b948      	cbnz	r0, 8003db6 <Hw_MPU6050_I2CAuxMasterDisable+0x22>

	SET_BIT( RegData[0], 1 );
 8003da2:	f89d 1004 	ldrb.w	r1, [sp, #4]

	Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_INT_PIN_CFG, RegData[0] );
 8003da6:	2037      	movs	r0, #55	; 0x37
	//-- I2C_BYPASS_EN = 1
	//
	Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_INT_PIN_CFG, RegData );
	if( Err ) return Err;

	SET_BIT( RegData[0], 1 );
 8003da8:	f041 0202 	orr.w	r2, r1, #2

	Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_INT_PIN_CFG, RegData[0] );
 8003dac:	4611      	mov	r1, r2
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <Hw_MPU6050_I2CAuxMasterDisable+0x2c>)
	//-- I2C_BYPASS_EN = 1
	//
	Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_INT_PIN_CFG, RegData );
	if( Err ) return Err;

	SET_BIT( RegData[0], 1 );
 8003db0:	f88d 2004 	strb.w	r2, [sp, #4]

	Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_INT_PIN_CFG, RegData[0] );
 8003db4:	4798      	blx	r3

	return Err;
}
 8003db6:	b007      	add	sp, #28
 8003db8:	bd00      	pop	{pc}
 8003dba:	bf00      	nop
 8003dbc:	08003ac5 	.word	0x08003ac5
 8003dc0:	08003cc9 	.word	0x08003cc9

08003dc4 <Hw_MPU6050_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_Init( void )
{
 8003dc4:	b570      	push	{r4, r5, r6, lr}
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_MPU6050_EnableFlag == TRUE ) return TRUE;
 8003dc6:	4e27      	ldr	r6, [pc, #156]	; (8003e64 <Hw_MPU6050_Init+0xa0>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_Init( void )
{
 8003dc8:	b086      	sub	sp, #24
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_MPU6050_EnableFlag == TRUE ) return TRUE;
 8003dca:	7833      	ldrb	r3, [r6, #0]
 8003dcc:	4926      	ldr	r1, [pc, #152]	; (8003e68 <Hw_MPU6050_Init+0xa4>)
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d03e      	beq.n	8003e50 <Hw_MPU6050_Init+0x8c>


	Hw_MPU6050_EnableFlag = FALSE;
 8003dd2:	2200      	movs	r2, #0

	Hw_Wait_ms(36);
 8003dd4:	2024      	movs	r0, #36	; 0x24
 8003dd6:	4c25      	ldr	r4, [pc, #148]	; (8003e6c <Hw_MPU6050_Init+0xa8>)


	if( power_on == TRUE && Hw_MPU6050_EnableFlag == TRUE ) return TRUE;


	Hw_MPU6050_EnableFlag = FALSE;
 8003dd8:	700a      	strb	r2, [r1, #0]

	Hw_Wait_ms(36);
 8003dda:	47a0      	blx	r4


	//-- I2C 초기화
	//
	Hw_I2C_IMU_Init();	
 8003ddc:	4824      	ldr	r0, [pc, #144]	; (8003e70 <Hw_MPU6050_Init+0xac>)
 8003dde:	4780      	blx	r0


	while(1)
	{

		Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_WHO_AM_I, RegData );
 8003de0:	4d24      	ldr	r5, [pc, #144]	; (8003e74 <Hw_MPU6050_Init+0xb0>)
 8003de2:	2075      	movs	r0, #117	; 0x75
 8003de4:	a901      	add	r1, sp, #4
 8003de6:	47a8      	blx	r5
		if( Err != 0 )
 8003de8:	4604      	mov	r4, r0
 8003dea:	2800      	cmp	r0, #0
 8003dec:	d11b      	bne.n	8003e26 <Hw_MPU6050_Init+0x62>
			Lb_printf("Can't find MPU6050 \n");
			break;
		}


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
 8003dee:	4621      	mov	r1, r4
 8003df0:	206b      	movs	r0, #107	; 0x6b
 8003df2:	4d21      	ldr	r5, [pc, #132]	; (8003e78 <Hw_MPU6050_Init+0xb4>)
 8003df4:	47a8      	blx	r5
		if( Err != 0 )
 8003df6:	4604      	mov	r4, r0
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d12d      	bne.n	8003e58 <Hw_MPU6050_Init+0x94>

		break;
	}


	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_SMPLRT_DIV  , 0x07 );	// Set the sample rate to 1000Hz - 8kHz/(7+1) = 1000Hz
 8003dfc:	2107      	movs	r1, #7
 8003dfe:	2019      	movs	r0, #25
 8003e00:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_CONFIG      , 0x00 );	// Disable FSYNC and set 260 Hz Acc filtering, 256 Hz Gyro filtering, 8 KHz sampling
 8003e02:	4621      	mov	r1, r4
 8003e04:	201a      	movs	r0, #26
 8003e06:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_GYRO_CONFIG , 0x00 );	// Set Gyro Full Scale Range to ±250deg/s
 8003e08:	4621      	mov	r1, r4
 8003e0a:	201b      	movs	r0, #27
 8003e0c:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_ACCEL_CONFIG, 0x00 );	// Set Accelerometer Full Scale Range to ±2g	
 8003e0e:	4621      	mov	r1, r4
 8003e10:	201c      	movs	r0, #28
 8003e12:	47a8      	blx	r5


	Hw_MPU6050_I2CAuxMasterDisable();
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <Hw_MPU6050_Init+0xb8>)
 8003e16:	4798      	blx	r3
	power_on = TRUE;


	if( Err == 0 )
	{
		Hw_MPU6050_EnableFlag = TRUE;
 8003e18:	4a13      	ldr	r2, [pc, #76]	; (8003e68 <Hw_MPU6050_Init+0xa4>)

	Hw_MPU6050_I2CAuxMasterDisable();



	power_on = TRUE;
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	7031      	strb	r1, [r6, #0]


	if( Err == 0 )
	{
		Hw_MPU6050_EnableFlag = TRUE;
 8003e1e:	7011      	strb	r1, [r2, #0]
	}


	return Err;
}
 8003e20:	4620      	mov	r0, r4
 8003e22:	b006      	add	sp, #24
 8003e24:	bd70      	pop	{r4, r5, r6, pc}
	{

		Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_WHO_AM_I, RegData );
		if( Err != 0 )
		{
			Lb_printf("Can't find MPU6050 \n");
 8003e26:	4d16      	ldr	r5, [pc, #88]	; (8003e80 <Hw_MPU6050_Init+0xbc>)
 8003e28:	4816      	ldr	r0, [pc, #88]	; (8003e84 <Hw_MPU6050_Init+0xc0>)
 8003e2a:	47a8      	blx	r5
 8003e2c:	4d12      	ldr	r5, [pc, #72]	; (8003e78 <Hw_MPU6050_Init+0xb4>)

		break;
	}


	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_SMPLRT_DIV  , 0x07 );	// Set the sample rate to 1000Hz - 8kHz/(7+1) = 1000Hz
 8003e2e:	2107      	movs	r1, #7
 8003e30:	2019      	movs	r0, #25
 8003e32:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_CONFIG      , 0x00 );	// Disable FSYNC and set 260 Hz Acc filtering, 256 Hz Gyro filtering, 8 KHz sampling
 8003e34:	2100      	movs	r1, #0
 8003e36:	201a      	movs	r0, #26
 8003e38:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_GYRO_CONFIG , 0x00 );	// Set Gyro Full Scale Range to ±250deg/s
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	201b      	movs	r0, #27
 8003e3e:	47a8      	blx	r5
	Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_ACCEL_CONFIG, 0x00 );	// Set Accelerometer Full Scale Range to ±2g	
 8003e40:	2100      	movs	r1, #0
 8003e42:	201c      	movs	r0, #28
 8003e44:	47a8      	blx	r5


	Hw_MPU6050_I2CAuxMasterDisable();
 8003e46:	480d      	ldr	r0, [pc, #52]	; (8003e7c <Hw_MPU6050_Init+0xb8>)
 8003e48:	4780      	blx	r0



	power_on = TRUE;
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	7031      	strb	r1, [r6, #0]
 8003e4e:	e7e7      	b.n	8003e20 <Hw_MPU6050_Init+0x5c>
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_MPU6050_EnableFlag == TRUE ) return TRUE;
 8003e50:	780c      	ldrb	r4, [r1, #0]
 8003e52:	2c01      	cmp	r4, #1
 8003e54:	d1bd      	bne.n	8003dd2 <Hw_MPU6050_Init+0xe>
 8003e56:	e7e3      	b.n	8003e20 <Hw_MPU6050_Init+0x5c>


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
		if( Err != 0 )
		{
			Lb_printf("Err write MPU6050_RA_PWR_MGMT_1 : %d\n", Err);
 8003e58:	480b      	ldr	r0, [pc, #44]	; (8003e88 <Hw_MPU6050_Init+0xc4>)
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <Hw_MPU6050_Init+0xbc>)
 8003e5e:	4798      	blx	r3
			break;
 8003e60:	e7e5      	b.n	8003e2e <Hw_MPU6050_Init+0x6a>
 8003e62:	bf00      	nop
 8003e64:	20000485 	.word	0x20000485
 8003e68:	20000486 	.word	0x20000486
 8003e6c:	080024cd 	.word	0x080024cd
 8003e70:	080036d9 	.word	0x080036d9
 8003e74:	08003ac5 	.word	0x08003ac5
 8003e78:	08003cc9 	.word	0x08003cc9
 8003e7c:	08003d95 	.word	0x08003d95
 8003e80:	08001d85 	.word	0x08001d85
 8003e84:	08006724 	.word	0x08006724
 8003e88:	0800673c 	.word	0x0800673c

08003e8c <Hw_Sonic_GetDistanceMM>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Sonic_GetDistanceMM( u8 Ch )
{
	return Hw_Sonic_Log[Ch].DistanceMM;
 8003e8c:	f640 5388 	movw	r3, #3464	; 0xd88
 8003e90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e98:	eb03 0140 	add.w	r1, r3, r0, lsl #1
}
 8003e9c:	8908      	ldrh	r0, [r1, #8]
 8003e9e:	4770      	bx	lr

08003ea0 <Hw_HMC5883_CheckID>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_HMC5883_CheckID( void )
{
 8003ea0:	b500      	push	{lr}
 8003ea2:	b087      	sub	sp, #28
	u8  Ret = TRUE;
	u16 Err = 0;
	u8  RegData[20];
	u16 i;

	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_ID_A, RegData, 3 );
 8003ea4:	200a      	movs	r0, #10
 8003ea6:	a901      	add	r1, sp, #4
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <Hw_HMC5883_CheckID+0x38>)
 8003eac:	4798      	blx	r3

	//Lb_printf(" %x  %x  %x\n", RegData[0], RegData[1], RegData[2] );
	if( Err == 0 )
 8003eae:	b960      	cbnz	r0, 8003eca <Hw_HMC5883_CheckID+0x2a>
	{
		if( RegData[0] != 0x48 ) Ret = FALSE;
		if( RegData[1] != 0x34 ) Ret = FALSE;
 8003eb0:	f89d 1005 	ldrb.w	r1, [sp, #5]
	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_ID_A, RegData, 3 );

	//Lb_printf(" %x  %x  %x\n", RegData[0], RegData[1], RegData[2] );
	if( Err == 0 )
	{
		if( RegData[0] != 0x48 ) Ret = FALSE;
 8003eb4:	f89d 2004 	ldrb.w	r2, [sp, #4]
		if( RegData[1] != 0x34 ) Ret = FALSE;
 8003eb8:	2934      	cmp	r1, #52	; 0x34
 8003eba:	d008      	beq.n	8003ece <Hw_HMC5883_CheckID+0x2e>
		if( RegData[2] != 0x33 ) Ret = FALSE;				
 8003ebc:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8003ec0:	2933      	cmp	r1, #51	; 0x33
 8003ec2:	bf18      	it	ne
 8003ec4:	2000      	movne	r0, #0
	}

	if( Err != 0 ) Ret = FALSE;

	return Ret;	
}
 8003ec6:	b007      	add	sp, #28
 8003ec8:	bd00      	pop	{pc}
		if( RegData[0] != 0x48 ) Ret = FALSE;
		if( RegData[1] != 0x34 ) Ret = FALSE;
		if( RegData[2] != 0x33 ) Ret = FALSE;				
	}

	if( Err != 0 ) Ret = FALSE;
 8003eca:	2000      	movs	r0, #0
 8003ecc:	e7fb      	b.n	8003ec6 <Hw_HMC5883_CheckID+0x26>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_HMC5883_CheckID( void )
{
	u8  Ret = TRUE;
 8003ece:	f1b2 0348 	subs.w	r3, r2, #72	; 0x48
 8003ed2:	4258      	negs	r0, r3
 8003ed4:	4158      	adcs	r0, r3
 8003ed6:	e7f1      	b.n	8003ebc <Hw_HMC5883_CheckID+0x1c>
 8003ed8:	08003a75 	.word	0x08003a75

08003edc <Hw_HMC5883_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_HMC5883_Init( void )
{
 8003edc:	b530      	push	{r4, r5, lr}
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_HMC5883_EnableFlag == TRUE ) return TRUE;
 8003ede:	4c21      	ldr	r4, [pc, #132]	; (8003f64 <Hw_HMC5883_Init+0x88>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_HMC5883_Init( void )
{
 8003ee0:	b087      	sub	sp, #28
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_HMC5883_EnableFlag == TRUE ) return TRUE;
 8003ee2:	7823      	ldrb	r3, [r4, #0]
 8003ee4:	4a20      	ldr	r2, [pc, #128]	; (8003f68 <Hw_HMC5883_Init+0x8c>)
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d01a      	beq.n	8003f20 <Hw_HMC5883_Init+0x44>


	Hw_HMC5883_EnableFlag = FALSE;

	Hw_Wait_ms(10);
 8003eea:	200a      	movs	r0, #10
 8003eec:	491f      	ldr	r1, [pc, #124]	; (8003f6c <Hw_HMC5883_Init+0x90>)


	if( power_on == TRUE && Hw_HMC5883_EnableFlag == TRUE ) return TRUE;


	Hw_HMC5883_EnableFlag = FALSE;
 8003eee:	2500      	movs	r5, #0
 8003ef0:	7015      	strb	r5, [r2, #0]

	Hw_Wait_ms(10);
 8003ef2:	4788      	blx	r1


	//-- I2C 초기화
	//
	Hw_I2C_IMU_Init();	
 8003ef4:	481e      	ldr	r0, [pc, #120]	; (8003f70 <Hw_HMC5883_Init+0x94>)
 8003ef6:	4780      	blx	r0



	if( Hw_HMC5883_CheckID() == FALSE )
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <Hw_HMC5883_Init+0x98>)
 8003efa:	4798      	blx	r3
 8003efc:	b158      	cbz	r0, 8003f16 <Hw_HMC5883_Init+0x3a>
		Lb_printf("HMC5883 Fail to read ID \n");
		Err = HW_I2C_ERR_CHECK_ID;
	}
	else
	{
		Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );
 8003efe:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <Hw_HMC5883_Init+0x9c>)
 8003f00:	4628      	mov	r0, r5
 8003f02:	a901      	add	r1, sp, #4
 8003f04:	2203      	movs	r2, #3
 8003f06:	4798      	blx	r3

		if( Err == 0 )
 8003f08:	4603      	mov	r3, r0
 8003f0a:	b168      	cbz	r0, 8003f28 <Hw_HMC5883_Init+0x4c>
	}




	power_on = TRUE;
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	7022      	strb	r2, [r4, #0]
		Hw_HMC5883_EnableFlag = TRUE;
	}


	return Err;
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	b007      	add	sp, #28
 8003f14:	bd30      	pop	{r4, r5, pc}



	if( Hw_HMC5883_CheckID() == FALSE )
	{
		Lb_printf("HMC5883 Fail to read ID \n");
 8003f16:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <Hw_HMC5883_Init+0xa0>)
 8003f18:	4819      	ldr	r0, [pc, #100]	; (8003f80 <Hw_HMC5883_Init+0xa4>)
 8003f1a:	4798      	blx	r3
		Err = HW_I2C_ERR_CHECK_ID;
 8003f1c:	2308      	movs	r3, #8
 8003f1e:	e7f5      	b.n	8003f0c <Hw_HMC5883_Init+0x30>
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE && Hw_HMC5883_EnableFlag == TRUE ) return TRUE;
 8003f20:	7813      	ldrb	r3, [r2, #0]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d1e1      	bne.n	8003eea <Hw_HMC5883_Init+0xe>
 8003f26:	e7f3      	b.n	8003f10 <Hw_HMC5883_Init+0x34>
		{
			//-- 75Hz로 출력 설정
			//
			SET_BIT( RegData[0], 4 );	// DO2 = 1
			SET_BIT( RegData[0], 3 );	// DO1 = 1
			CLR_BIT( RegData[0], 2 );	// DO0 = 0
 8003f28:	f89d 5004 	ldrb.w	r5, [sp, #4]


			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0
 8003f2c:	f89d 2006 	ldrb.w	r2, [sp, #6]
		{
			//-- 75Hz로 출력 설정
			//
			SET_BIT( RegData[0], 4 );	// DO2 = 1
			SET_BIT( RegData[0], 3 );	// DO1 = 1
			CLR_BIT( RegData[0], 2 );	// DO0 = 0
 8003f30:	f025 0104 	bic.w	r1, r5, #4


			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0
 8003f34:	f022 0303 	bic.w	r3, r2, #3
		{
			//-- 75Hz로 출력 설정
			//
			SET_BIT( RegData[0], 4 );	// DO2 = 1
			SET_BIT( RegData[0], 3 );	// DO1 = 1
			CLR_BIT( RegData[0], 2 );	// DO0 = 0
 8003f38:	f041 0518 	orr.w	r5, r1, #24
			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0

			Err = Hw_I2C_IMU_HMC5883_WriteRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	a901      	add	r1, sp, #4


			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0
 8003f40:	f88d 3006 	strb.w	r3, [sp, #6]

			Err = Hw_I2C_IMU_HMC5883_WriteRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );
 8003f44:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <Hw_HMC5883_Init+0xa8>)
		{
			//-- 75Hz로 출력 설정
			//
			SET_BIT( RegData[0], 4 );	// DO2 = 1
			SET_BIT( RegData[0], 3 );	// DO1 = 1
			CLR_BIT( RegData[0], 2 );	// DO0 = 0
 8003f46:	f88d 5004 	strb.w	r5, [sp, #4]
			//-- Continuous 모드로 변경
			//
			CLR_BIT( RegData[2], 1 );	// MD1 = 0
			CLR_BIT( RegData[2], 0 );	// MD0 = 0

			Err = Hw_I2C_IMU_HMC5883_WriteRegs( HW_HMC5883_REG_CFG_A, RegData, 3 );
 8003f4a:	4798      	blx	r3


			Err = Hw_I2C_IMU_HMC5883_WriteAddr( HW_HMC5883_REG_DATA_X_MSB );
 8003f4c:	2003      	movs	r0, #3
 8003f4e:	4a0e      	ldr	r2, [pc, #56]	; (8003f88 <Hw_HMC5883_Init+0xac>)
 8003f50:	4790      	blx	r2
	}




	power_on = TRUE;
 8003f52:	2101      	movs	r1, #1


	if( Err == 0 )
 8003f54:	4603      	mov	r3, r0
	}




	power_on = TRUE;
 8003f56:	7021      	strb	r1, [r4, #0]


	if( Err == 0 )
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d1d9      	bne.n	8003f10 <Hw_HMC5883_Init+0x34>
	{
		Hw_HMC5883_EnableFlag = TRUE;
 8003f5c:	4802      	ldr	r0, [pc, #8]	; (8003f68 <Hw_HMC5883_Init+0x8c>)
 8003f5e:	7001      	strb	r1, [r0, #0]
 8003f60:	e7d6      	b.n	8003f10 <Hw_HMC5883_Init+0x34>
 8003f62:	bf00      	nop
 8003f64:	20000487 	.word	0x20000487
 8003f68:	20000488 	.word	0x20000488
 8003f6c:	080024cd 	.word	0x080024cd
 8003f70:	080036d9 	.word	0x080036d9
 8003f74:	08003ea1 	.word	0x08003ea1
 8003f78:	08003a75 	.word	0x08003a75
 8003f7c:	08001d85 	.word	0x08001d85
 8003f80:	08006764 	.word	0x08006764
 8003f84:	08003c91 	.word	0x08003c91
 8003f88:	08003cad 	.word	0x08003cad

08003f8c <Hw_HMC5883_GetData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_HMC5883_GetData( HW_HMC5883_DATA_OBJ *ptr_data )
{
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	4604      	mov	r4, r0
	u16 Err;

	HW_HMC5883_RAW_DATA_OBJ raw_data;


	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_DATA_X_MSB, (u8 *)&raw_data, 6 );
 8003f92:	4669      	mov	r1, sp
 8003f94:	2003      	movs	r0, #3
 8003f96:	2206      	movs	r2, #6
 8003f98:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <Hw_HMC5883_GetData+0x48>)
 8003f9a:	4798      	blx	r3


	if( Err == 0 )
 8003f9c:	b9a0      	cbnz	r0, 8003fc8 <Hw_HMC5883_GetData+0x3c>
	{
		ptr_data->X_Compass = (s16)((raw_data.X_Compass_H<<8) | (raw_data.X_Compass_L<<0));	
 8003f9e:	f89d 6000 	ldrb.w	r6, [sp]
 8003fa2:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ptr_data->Y_Compass = (s16)((raw_data.Y_Compass_H<<8) | (raw_data.Y_Compass_L<<0));	
 8003fa6:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8003faa:	f89d 2005 	ldrb.w	r2, [sp, #5]
		ptr_data->Z_Compass = (s16)((raw_data.Z_Compass_H<<8) | (raw_data.Z_Compass_L<<0));	
 8003fae:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8003fb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_DATA_X_MSB, (u8 *)&raw_data, 6 );


	if( Err == 0 )
	{
		ptr_data->X_Compass = (s16)((raw_data.X_Compass_H<<8) | (raw_data.X_Compass_L<<0));	
 8003fb6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
		ptr_data->Y_Compass = (s16)((raw_data.Y_Compass_H<<8) | (raw_data.Y_Compass_L<<0));	
 8003fba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
		ptr_data->Z_Compass = (s16)((raw_data.Z_Compass_H<<8) | (raw_data.Z_Compass_L<<0));	
 8003fbe:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	Err = Hw_I2C_IMU_HMC5883_ReadRegs( HW_HMC5883_REG_DATA_X_MSB, (u8 *)&raw_data, 6 );


	if( Err == 0 )
	{
		ptr_data->X_Compass = (s16)((raw_data.X_Compass_H<<8) | (raw_data.X_Compass_L<<0));	
 8003fc2:	8021      	strh	r1, [r4, #0]
		ptr_data->Y_Compass = (s16)((raw_data.Y_Compass_H<<8) | (raw_data.Y_Compass_L<<0));	
 8003fc4:	8062      	strh	r2, [r4, #2]
		ptr_data->Z_Compass = (s16)((raw_data.Z_Compass_H<<8) | (raw_data.Z_Compass_L<<0));	
 8003fc6:	80a0      	strh	r0, [r4, #4]
	}
	

	Err = Hw_I2C_IMU_HMC5883_WriteAddr( HW_HMC5883_REG_DATA_X_MSB );
 8003fc8:	2003      	movs	r0, #3
 8003fca:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <Hw_HMC5883_GetData+0x4c>)
 8003fcc:	4798      	blx	r3

	return Err;
}
 8003fce:	b002      	add	sp, #8
 8003fd0:	bd70      	pop	{r4, r5, r6, pc}
 8003fd2:	bf00      	nop
 8003fd4:	08003a75 	.word	0x08003a75
 8003fd8:	08003cad 	.word	0x08003cad

08003fdc <Hw_HMC5883_GetEnable>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_HMC5883_GetEnable( void )
{
	return Hw_HMC5883_EnableFlag;
 8003fdc:	f240 4388 	movw	r3, #1160	; 0x488
 8003fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8003fe4:	7818      	ldrb	r0, [r3, #0]
 8003fe6:	4770      	bx	lr

08003fe8 <Hw_IMU_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_Init( void )
{
 8003fe8:	b510      	push	{r4, lr}
	u16 Ret = 0;


	Ret = Hw_MPU6050_Init();
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <Hw_IMU_Init+0x30>)
 8003fec:	4798      	blx	r3

	if( Ret != 0 )
 8003fee:	4604      	mov	r4, r0
 8003ff0:	b958      	cbnz	r0, 800400a <Hw_IMU_Init+0x22>
		Lb_printf("Hw_MPU6050_Init Ret : 0x%x\n", Ret);
		return Ret;
	} 


	Ret = Hw_HMC5883_Init();
 8003ff2:	480a      	ldr	r0, [pc, #40]	; (800401c <Hw_IMU_Init+0x34>)
 8003ff4:	4780      	blx	r0

	if( Ret != 0 )
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	b908      	cbnz	r0, 8003ffe <Hw_IMU_Init+0x16>
		Lb_printf("Hw_HMC5883_Init Ret : 0x%x\n", Ret);
		return Ret;
	} 

	return Ret;
}
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	bd10      	pop	{r4, pc}

	Ret = Hw_HMC5883_Init();

	if( Ret != 0 )
	{
		Lb_printf("Hw_HMC5883_Init Ret : 0x%x\n", Ret);
 8003ffe:	4808      	ldr	r0, [pc, #32]	; (8004020 <Hw_IMU_Init+0x38>)
 8004000:	4621      	mov	r1, r4
 8004002:	4a08      	ldr	r2, [pc, #32]	; (8004024 <Hw_IMU_Init+0x3c>)
 8004004:	4790      	blx	r2
		return Ret;
	} 

	return Ret;
}
 8004006:	4620      	mov	r0, r4
 8004008:	bd10      	pop	{r4, pc}

	Ret = Hw_MPU6050_Init();

	if( Ret != 0 )
	{
		Lb_printf("Hw_MPU6050_Init Ret : 0x%x\n", Ret);
 800400a:	4807      	ldr	r0, [pc, #28]	; (8004028 <Hw_IMU_Init+0x40>)
 800400c:	4621      	mov	r1, r4
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <Hw_IMU_Init+0x3c>)
 8004010:	4798      	blx	r3
		Lb_printf("Hw_HMC5883_Init Ret : 0x%x\n", Ret);
		return Ret;
	} 

	return Ret;
}
 8004012:	4620      	mov	r0, r4
 8004014:	bd10      	pop	{r4, pc}
 8004016:	bf00      	nop
 8004018:	08003dc5 	.word	0x08003dc5
 800401c:	08003edd 	.word	0x08003edd
 8004020:	0800679c 	.word	0x0800679c
 8004024:	08001d85 	.word	0x08001d85
 8004028:	08006780 	.word	0x08006780
 800402c:	00000000 	.word	0x00000000

08004030 <Hw_IMU_GetData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_GetData( HW_IMU_DATA_OBJ *ptr_data )
{
 8004030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	HW_MPU6050_DATA_OBJ MPU6050_Data;
	HW_HMC5883_DATA_OBJ HMC5883_Data;


	ptr_data->Enable_Acc     = FALSE;
 8004034:	f04f 0800 	mov.w	r8, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_GetData( HW_IMU_DATA_OBJ *ptr_data )
{
 8004038:	b089      	sub	sp, #36	; 0x24

	HW_MPU6050_DATA_OBJ MPU6050_Data;
	HW_HMC5883_DATA_OBJ HMC5883_Data;


	ptr_data->Enable_Acc     = FALSE;
 800403a:	f880 8000 	strb.w	r8, [r0]
	ptr_data->Enable_Temp    = FALSE;
 800403e:	f880 8001 	strb.w	r8, [r0, #1]
	ptr_data->Enable_Gyro    = FALSE;
 8004042:	f880 8002 	strb.w	r8, [r0, #2]
	ptr_data->Enable_Compass = FALSE;
 8004046:	f880 8003 	strb.w	r8, [r0, #3]


	if( Hw_HMC5883_GetEnable() == TRUE )
 800404a:	4f3f      	ldr	r7, [pc, #252]	; (8004148 <Hw_IMU_GetData+0x118>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_GetData( HW_IMU_DATA_OBJ *ptr_data )
{
 800404c:	4606      	mov	r6, r0
	ptr_data->Enable_Temp    = FALSE;
	ptr_data->Enable_Gyro    = FALSE;
	ptr_data->Enable_Compass = FALSE;


	if( Hw_HMC5883_GetEnable() == TRUE )
 800404e:	47b8      	blx	r7
 8004050:	2801      	cmp	r0, #1
 8004052:	4604      	mov	r4, r0
 8004054:	d018      	beq.n	8004088 <Hw_IMU_GetData+0x58>
		}
	}



	if( Hw_HMC5883_GetEnable() == TRUE )
 8004056:	47b8      	blx	r7
 8004058:	2801      	cmp	r0, #1
 800405a:	4604      	mov	r4, r0
 800405c:	d003      	beq.n	8004066 <Hw_IMU_GetData+0x36>
		}
	}


	return Err;
}
 800405e:	4640      	mov	r0, r8
 8004060:	b009      	add	sp, #36	; 0x24
 8004062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}



	if( Hw_HMC5883_GetEnable() == TRUE )
	{
		Err = Hw_HMC5883_GetData( &HMC5883_Data );	
 8004066:	a802      	add	r0, sp, #8
 8004068:	4a38      	ldr	r2, [pc, #224]	; (800414c <Hw_IMU_GetData+0x11c>)
 800406a:	4790      	blx	r2

		if( Err == 0 )
 800406c:	4680      	mov	r8, r0
 800406e:	2800      	cmp	r0, #0
 8004070:	d1f5      	bne.n	800405e <Hw_IMU_GetData+0x2e>
		{
			ptr_data->X_Compass = HMC5883_Data.X_Compass;
 8004072:	f8bd 0008 	ldrh.w	r0, [sp, #8]
			ptr_data->Y_Compass = HMC5883_Data.Y_Compass;
 8004076:	f8bd 300a 	ldrh.w	r3, [sp, #10]
			ptr_data->Z_Compass = HMC5883_Data.Z_Compass;
 800407a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
	{
		Err = Hw_HMC5883_GetData( &HMC5883_Data );	

		if( Err == 0 )
		{
			ptr_data->X_Compass = HMC5883_Data.X_Compass;
 800407e:	8270      	strh	r0, [r6, #18]
			ptr_data->Y_Compass = HMC5883_Data.Y_Compass;
 8004080:	82b3      	strh	r3, [r6, #20]
			ptr_data->Z_Compass = HMC5883_Data.Z_Compass;
 8004082:	82f1      	strh	r1, [r6, #22]

			ptr_data->Enable_Compass = TRUE;			
 8004084:	70f4      	strb	r4, [r6, #3]
 8004086:	e7ea      	b.n	800405e <Hw_IMU_GetData+0x2e>
	ptr_data->Enable_Compass = FALSE;


	if( Hw_HMC5883_GetEnable() == TRUE )
	{
		Err = Hw_MPU6050_GetData( &MPU6050_Data );
 8004088:	a804      	add	r0, sp, #16
 800408a:	4b31      	ldr	r3, [pc, #196]	; (8004150 <Hw_IMU_GetData+0x120>)
 800408c:	4798      	blx	r3

		if( Err == 0 )
 800408e:	4680      	mov	r8, r0
 8004090:	2800      	cmp	r0, #0
 8004092:	d1e0      	bne.n	8004056 <Hw_IMU_GetData+0x26>
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
 8004094:	f8bd 1010 	ldrh.w	r1, [sp, #16]
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
			
			ptr_data->Temp  = MPU6050_Data.Temp;
 8004098:	f8bd 2016 	ldrh.w	r2, [sp, #22]

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
 800409c:	f8bd 301a 	ldrh.w	r3, [sp, #26]

		if( Err == 0 )
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
 80040a0:	f8bd a014 	ldrh.w	sl, [sp, #20]
		Err = Hw_MPU6050_GetData( &MPU6050_Data );

		if( Err == 0 )
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
 80040a4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
			
			ptr_data->Temp  = MPU6050_Data.Temp;

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
 80040a8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	{
		Err = Hw_MPU6050_GetData( &MPU6050_Data );

		if( Err == 0 )
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
 80040ac:	80b1      	strh	r1, [r6, #4]
			
			ptr_data->Temp  = MPU6050_Data.Temp;

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
			ptr_data->Z_Gyro = MPU6050_Data.Z_Gyro;
 80040ae:	f8bd 101c 	ldrh.w	r1, [sp, #28]
			ptr_data->Enable_Acc     = TRUE;
			ptr_data->Enable_Temp    = TRUE;
			ptr_data->Enable_Gyro    = TRUE;	

			// 각도 계산 
			ptr_data->X_AccAngle = (atan2(MPU6050_Data.Y_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 80040b2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800415c <Hw_IMU_GetData+0x12c>
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
			
			ptr_data->Temp  = MPU6050_Data.Temp;
 80040b6:	8172      	strh	r2, [r6, #10]

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
 80040b8:	81f3      	strh	r3, [r6, #14]
		Err = Hw_MPU6050_GetData( &MPU6050_Data );

		if( Err == 0 )
		{
			ptr_data->X_Acc = MPU6050_Data.X_Acc;
			ptr_data->Y_Acc = MPU6050_Data.Y_Acc;
 80040ba:	80f0      	strh	r0, [r6, #6]
			ptr_data->Z_Acc = MPU6050_Data.Z_Acc;
 80040bc:	f8a6 a008 	strh.w	sl, [r6, #8]
			
			ptr_data->Temp  = MPU6050_Data.Temp;

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
 80040c0:	81b5      	strh	r5, [r6, #12]
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
			ptr_data->Z_Gyro = MPU6050_Data.Z_Gyro;

			ptr_data->Enable_Acc     = TRUE;
 80040c2:	7034      	strb	r4, [r6, #0]
			ptr_data->Enable_Temp    = TRUE;
 80040c4:	7074      	strb	r4, [r6, #1]
			ptr_data->Enable_Gyro    = TRUE;	
 80040c6:	70b4      	strb	r4, [r6, #2]
			
			ptr_data->Temp  = MPU6050_Data.Temp;

			ptr_data->X_Gyro = MPU6050_Data.X_Gyro;
			ptr_data->Y_Gyro = MPU6050_Data.Y_Gyro;
			ptr_data->Z_Gyro = MPU6050_Data.Z_Gyro;
 80040c8:	8231      	strh	r1, [r6, #16]
			ptr_data->Enable_Acc     = TRUE;
			ptr_data->Enable_Temp    = TRUE;
			ptr_data->Enable_Gyro    = TRUE;	

			// 각도 계산 
			ptr_data->X_AccAngle = (atan2(MPU6050_Data.Y_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 80040ca:	b200      	sxth	r0, r0
 80040cc:	47c8      	blx	r9
 80040ce:	4604      	mov	r4, r0
 80040d0:	fa0f f08a 	sxth.w	r0, sl
 80040d4:	460d      	mov	r5, r1
 80040d6:	47c8      	blx	r9
 80040d8:	f8df b084 	ldr.w	fp, [pc, #132]	; 8004160 <Hw_IMU_GetData+0x130>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4620      	mov	r0, r4
 80040e2:	4629      	mov	r1, r5
 80040e4:	47d8      	blx	fp
 80040e6:	a314      	add	r3, pc, #80	; (adr r3, 8004138 <Hw_IMU_GetData+0x108>)
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f8df a074 	ldr.w	sl, [pc, #116]	; 8004164 <Hw_IMU_GetData+0x134>
 80040f0:	47d0      	blx	sl
 80040f2:	a313      	add	r3, pc, #76	; (adr r3, 8004140 <Hw_IMU_GetData+0x110>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	4d16      	ldr	r5, [pc, #88]	; (8004154 <Hw_IMU_GetData+0x124>)
 80040fa:	47a8      	blx	r5
 80040fc:	4c16      	ldr	r4, [pc, #88]	; (8004158 <Hw_IMU_GetData+0x128>)
 80040fe:	47a0      	blx	r4
 8004100:	61b0      	str	r0, [r6, #24]
			ptr_data->Y_AccAngle = (atan2(MPU6050_Data.X_Acc, MPU6050_Data.Z_Acc)+M_PI)*RAD_TO_DEG;
 8004102:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8004106:	47c8      	blx	r9
 8004108:	e9cd 0100 	strd	r0, r1, [sp]
 800410c:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8004110:	47c8      	blx	r9
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	e9dd 0100 	ldrd	r0, r1, [sp]
 800411a:	47d8      	blx	fp
 800411c:	a306      	add	r3, pc, #24	; (adr r3, 8004138 <Hw_IMU_GetData+0x108>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	47d0      	blx	sl
 8004124:	a306      	add	r3, pc, #24	; (adr r3, 8004140 <Hw_IMU_GetData+0x110>)
 8004126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412a:	47a8      	blx	r5
 800412c:	47a0      	blx	r4
 800412e:	61f0      	str	r0, [r6, #28]
 8004130:	e791      	b.n	8004056 <Hw_IMU_GetData+0x26>
 8004132:	bf00      	nop
 8004134:	f3af 8000 	nop.w
 8004138:	54442d18 	.word	0x54442d18
 800413c:	400921fb 	.word	0x400921fb
 8004140:	20000000 	.word	0x20000000
 8004144:	404ca5dc 	.word	0x404ca5dc
 8004148:	08003fdd 	.word	0x08003fdd
 800414c:	08003f8d 	.word	0x08003f8d
 8004150:	08003ce9 	.word	0x08003ce9
 8004154:	08000379 	.word	0x08000379
 8004158:	080008ad 	.word	0x080008ad
 800415c:	080002ad 	.word	0x080002ad
 8004160:	08005dd5 	.word	0x08005dd5
 8004164:	08000015 	.word	0x08000015

08004168 <Hw_IMU_Update>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_Update( HW_IMU_DATA_OBJ *ptr_data, u32 dt )
{
 8004168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u16 Err;
	f32 GyroRateX;
	f32 GyroRateY;


	Err = Hw_IMU_GetData( ptr_data );
 800416c:	4b3c      	ldr	r3, [pc, #240]	; (8004260 <Hw_IMU_Update+0xf8>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_IMU_Update( HW_IMU_DATA_OBJ *ptr_data, u32 dt )
{
 800416e:	b085      	sub	sp, #20
 8004170:	4606      	mov	r6, r0
 8004172:	460d      	mov	r5, r1
	u16 Err;
	f32 GyroRateX;
	f32 GyroRateY;


	Err = Hw_IMU_GetData( ptr_data );
 8004174:	4798      	blx	r3

	if( Err == 0 )
 8004176:	4681      	mov	r9, r0
 8004178:	2800      	cmp	r0, #0
 800417a:	d163      	bne.n	8004244 <Hw_IMU_Update+0xdc>
	{
		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;
 800417c:	4f39      	ldr	r7, [pc, #228]	; (8004264 <Hw_IMU_Update+0xfc>)
 800417e:	f9b6 000e 	ldrsh.w	r0, [r6, #14]
 8004182:	47b8      	blx	r7
 8004184:	2100      	movs	r1, #0
 8004186:	4c38      	ldr	r4, [pc, #224]	; (8004268 <Hw_IMU_Update+0x100>)
 8004188:	f2c4 3103 	movt	r1, #17155	; 0x4303
 800418c:	47a0      	blx	r4

		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->X_AccAngle);
 800418e:	4937      	ldr	r1, [pc, #220]	; (800426c <Hw_IMU_Update+0x104>)
	Err = Hw_IMU_GetData( ptr_data );

	if( Err == 0 )
	{
		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;
 8004190:	9001      	str	r0, [sp, #4]

		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->X_AccAngle);
 8004192:	4628      	mov	r0, r5
 8004194:	4788      	blx	r1
 8004196:	4605      	mov	r5, r0

	Err = Hw_IMU_GetData( ptr_data );

	if( Err == 0 )
	{
		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
 8004198:	f9b6 000c 	ldrsh.w	r0, [r6, #12]
 800419c:	47b8      	blx	r7
 800419e:	2100      	movs	r1, #0
 80041a0:	f2c4 3103 	movt	r1, #17155	; 0x4303
 80041a4:	47a0      	blx	r4
		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;

		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->X_AccAngle);
 80041a6:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8004274 <Hw_IMU_Update+0x10c>

	Err = Hw_IMU_GetData( ptr_data );

	if( Err == 0 )
	{
		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
 80041aa:	4601      	mov	r1, r0
		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;

		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->X_AccAngle);
 80041ac:	f8cd c000 	str.w	ip, [sp]
 80041b0:	4628      	mov	r0, r5
 80041b2:	47e0      	blx	ip
 80041b4:	2100      	movs	r1, #0
 80041b6:	f2c4 417a 	movt	r1, #17530	; 0x447a
 80041ba:	47a0      	blx	r4
 80041bc:	f640 1259 	movw	r2, #2393	; 0x959
 80041c0:	6b31      	ldr	r1, [r6, #48]	; 0x30
 80041c2:	f6c0 0200 	movt	r2, #2048	; 0x800
 80041c6:	4790      	blx	r2
 80041c8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8004278 <Hw_IMU_Update+0x110>
 80041cc:	47c0      	blx	r8
 80041ce:	a320      	add	r3, pc, #128	; (adr r3, 8004250 <Hw_IMU_Update+0xe8>)
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	4f26      	ldr	r7, [pc, #152]	; (8004270 <Hw_IMU_Update+0x108>)
 80041d6:	47b8      	blx	r7
 80041d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041dc:	69b0      	ldr	r0, [r6, #24]
 80041de:	47c0      	blx	r8
 80041e0:	a31d      	add	r3, pc, #116	; (adr r3, 8004258 <Hw_IMU_Update+0xf0>)
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	47b8      	blx	r7
 80041e8:	f8df b090 	ldr.w	fp, [pc, #144]	; 800427c <Hw_IMU_Update+0x114>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041f4:	47d8      	blx	fp
 80041f6:	f8df a088 	ldr.w	sl, [pc, #136]	; 8004280 <Hw_IMU_Update+0x118>
 80041fa:	47d0      	blx	sl
  		ptr_data->Y_Angle = (0.93 * (ptr_data->Y_Angle+(GyroRateY*(f32)(dt)/1000)) ) + (0.07 * ptr_data->Y_AccAngle); 
 80041fc:	f8dd c000 	ldr.w	ip, [sp]
 8004200:	4629      	mov	r1, r5
	if( Err == 0 )
	{
		GyroRateX = (f32)ptr_data->X_Gyro/131.0;
		GyroRateY = (f32)ptr_data->Y_Gyro/131.0;

		ptr_data->X_Angle = (0.93 * (ptr_data->X_Angle+(GyroRateX*(f32)(dt)/1000)) ) + (0.07 * ptr_data->X_AccAngle);
 8004202:	6330      	str	r0, [r6, #48]	; 0x30
  		ptr_data->Y_Angle = (0.93 * (ptr_data->Y_Angle+(GyroRateY*(f32)(dt)/1000)) ) + (0.07 * ptr_data->Y_AccAngle); 
 8004204:	9801      	ldr	r0, [sp, #4]
 8004206:	47e0      	blx	ip
 8004208:	2100      	movs	r1, #0
 800420a:	f2c4 417a 	movt	r1, #17530	; 0x447a
 800420e:	47a0      	blx	r4
 8004210:	f640 1359 	movw	r3, #2393	; 0x959
 8004214:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8004216:	f6c0 0300 	movt	r3, #2048	; 0x800
 800421a:	4798      	blx	r3
 800421c:	47c0      	blx	r8
 800421e:	a30c      	add	r3, pc, #48	; (adr r3, 8004250 <Hw_IMU_Update+0xe8>)
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	47b8      	blx	r7
 8004226:	4604      	mov	r4, r0
 8004228:	69f0      	ldr	r0, [r6, #28]
 800422a:	460d      	mov	r5, r1
 800422c:	47c0      	blx	r8
 800422e:	a30a      	add	r3, pc, #40	; (adr r3, 8004258 <Hw_IMU_Update+0xf0>)
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	47b8      	blx	r7
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4620      	mov	r0, r4
 800423c:	4629      	mov	r1, r5
 800423e:	47d8      	blx	fp
 8004240:	47d0      	blx	sl
 8004242:	6370      	str	r0, [r6, #52]	; 0x34
	}


	return Err;
}
 8004244:	4648      	mov	r0, r9
 8004246:	b005      	add	sp, #20
 8004248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424c:	f3af 8000 	nop.w
 8004250:	5c28f5c3 	.word	0x5c28f5c3
 8004254:	3fedc28f 	.word	0x3fedc28f
 8004258:	1eb851ec 	.word	0x1eb851ec
 800425c:	3fb1eb85 	.word	0x3fb1eb85
 8004260:	08004031 	.word	0x08004031
 8004264:	08000ac1 	.word	0x08000ac1
 8004268:	08000cd1 	.word	0x08000cd1
 800426c:	08000ab9 	.word	0x08000ab9
 8004270:	08000379 	.word	0x08000379
 8004274:	08000b69 	.word	0x08000b69
 8004278:	080002d1 	.word	0x080002d1
 800427c:	08000015 	.word	0x08000015
 8004280:	080008ad 	.word	0x080008ad
 8004284:	f3af 8000 	nop.w

08004288 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8004288:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <EP1_IN_Callback+0x58>)
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	2a01      	cmp	r2, #1
 8004290:	d000      	beq.n	8004294 <EP1_IN_Callback+0xc>
 8004292:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 8004294:	4c13      	ldr	r4, [pc, #76]	; (80042e4 <EP1_IN_Callback+0x5c>)
 8004296:	6820      	ldr	r0, [r4, #0]
 8004298:	b300      	cbz	r0, 80042dc <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800429a:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 800429c:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800429e:	d814      	bhi.n	80042ca <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 80042a0:	6811      	ldr	r1, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 80042a2:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 80042a4:	1808      	adds	r0, r1, r0
 80042a6:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 80042a8:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 80042aa:	b28b      	uxth	r3, r1
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 80042ac:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80042ae:	480f      	ldr	r0, [pc, #60]	; (80042ec <EP1_IN_Callback+0x64>)
 80042b0:	21c0      	movs	r1, #192	; 0xc0
 80042b2:	18c0      	adds	r0, r0, r3
 80042b4:	462a      	mov	r2, r5
 80042b6:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <EP1_IN_Callback+0x68>)
 80042b8:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 80042ba:	2001      	movs	r0, #1
 80042bc:	4629      	mov	r1, r5
 80042be:	4a0d      	ldr	r2, [pc, #52]	; (80042f4 <EP1_IN_Callback+0x6c>)
 80042c0:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 80042c2:	2001      	movs	r0, #1
 80042c4:	490c      	ldr	r1, [pc, #48]	; (80042f8 <EP1_IN_Callback+0x70>)
 80042c6:	4788      	blx	r1
 80042c8:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 80042ca:	6815      	ldr	r5, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 80042cc:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 80042ce:	f105 0140 	add.w	r1, r5, #64	; 0x40
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 80042d2:	b2ab      	uxth	r3, r5
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 80042d4:	6020      	str	r0, [r4, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 80042d6:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 80042d8:	2540      	movs	r5, #64	; 0x40
 80042da:	e7e8      	b.n	80042ae <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 80042dc:	7018      	strb	r0, [r3, #0]
 80042de:	bd38      	pop	{r3, r4, r5, pc}
 80042e0:	200004ac 	.word	0x200004ac
 80042e4:	200004b8 	.word	0x200004b8
 80042e8:	200004b4 	.word	0x200004b4
 80042ec:	20000e04 	.word	0x20000e04
 80042f0:	08005871 	.word	0x08005871
 80042f4:	08005b21 	.word	0x08005b21
 80042f8:	080059e5 	.word	0x080059e5

080042fc <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 80042fc:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 80042fe:	f640 549c 	movw	r4, #3484	; 0xd9c
 8004302:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8004306:	f645 33e1 	movw	r3, #23521	; 0x5be1
 800430a:	4621      	mov	r1, r4
 800430c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004310:	2003      	movs	r0, #3
 8004312:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 8004314:	f644 5211 	movw	r2, #19729	; 0x4d11
 8004318:	b2c1      	uxtb	r1, r0
 800431a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800431e:	4620      	mov	r0, r4
 8004320:	4790      	blx	r2
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 8004322:	f645 2109 	movw	r1, #23049	; 0x5a09
 8004326:	2003      	movs	r0, #3
 8004328:	f6c0 0100 	movt	r1, #2048	; 0x800
 800432c:	4788      	blx	r1
 800432e:	bd10      	pop	{r4, pc}

08004330 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 8004330:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <SOF_Callback+0x24>)
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	2805      	cmp	r0, #5
 8004338:	d000      	beq.n	800433c <SOF_Callback+0xc>
 800433a:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <SOF_Callback+0x28>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	1c51      	adds	r1, r2, #1
 8004342:	2a05      	cmp	r2, #5
 8004344:	6019      	str	r1, [r3, #0]
 8004346:	d1f8      	bne.n	800433a <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8004348:	2000      	movs	r0, #0
 800434a:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 800434c:	4b03      	ldr	r3, [pc, #12]	; (800435c <SOF_Callback+0x2c>)
 800434e:	4798      	blx	r3
 8004350:	e7f3      	b.n	800433a <SOF_Callback+0xa>
 8004352:	bf00      	nop
 8004354:	200004a0 	.word	0x200004a0
 8004358:	2000048c 	.word	0x2000048c
 800435c:	08004d81 	.word	0x08004d81

08004360 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8004360:	f645 4244 	movw	r2, #23620	; 0x5c44
 8004364:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004368:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800436a:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800436c:	4c8f      	ldr	r4, [pc, #572]	; (80045ac <USB_Istr+0x24c>)
 800436e:	b298      	uxth	r0, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8004370:	4d8f      	ldr	r5, [pc, #572]	; (80045b0 <USB_Istr+0x250>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8004372:	8020      	strh	r0, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8004374:	8821      	ldrh	r1, [r4, #0]
 8004376:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8004378:	b089      	sub	sp, #36	; 0x24
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800437a:	4019      	ands	r1, r3
 800437c:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8004380:	b281      	uxth	r1, r0
 8004382:	2900      	cmp	r1, #0
 8004384:	d168      	bne.n	8004458 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8004386:	8822      	ldrh	r2, [r4, #0]
 8004388:	f402 4100 	and.w	r1, r2, #32768	; 0x8000
 800438c:	420b      	tst	r3, r1
 800438e:	d15f      	bne.n	8004450 <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8004390:	8822      	ldrh	r2, [r4, #0]
 8004392:	f402 6180 	and.w	r1, r2, #1024	; 0x400
 8004396:	420b      	tst	r3, r1
 8004398:	d14e      	bne.n	8004438 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 800439a:	8820      	ldrh	r0, [r4, #0]
 800439c:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
 80043a0:	4213      	tst	r3, r2
 80043a2:	d006      	beq.n	80043b2 <USB_Istr+0x52>
  {
    _SetISTR((uint16_t)CLR_ERR);
 80043a4:	f645 4044 	movw	r0, #23620	; 0x5c44
 80043a8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80043ac:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 80043b0:	6001      	str	r1, [r0, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 80043b2:	8822      	ldrh	r2, [r4, #0]
 80043b4:	f402 5080 	and.w	r0, r2, #4096	; 0x1000
 80043b8:	4203      	tst	r3, r0
 80043ba:	d131      	bne.n	8004420 <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 80043bc:	8820      	ldrh	r0, [r4, #0]
 80043be:	f400 6100 	and.w	r1, r0, #2048	; 0x800
 80043c2:	420b      	tst	r3, r1
 80043c4:	d00e      	beq.n	80043e4 <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 80043c6:	4b7b      	ldr	r3, [pc, #492]	; (80045b4 <USB_Istr+0x254>)
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	2a00      	cmp	r2, #0
 80043cc:	d125      	bne.n	800441a <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 80043ce:	2002      	movs	r0, #2
 80043d0:	4979      	ldr	r1, [pc, #484]	; (80045b8 <USB_Istr+0x258>)
 80043d2:	4788      	blx	r1
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 80043d4:	f645 4244 	movw	r2, #23620	; 0x5c44
 80043d8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80043dc:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 80043e0:	882b      	ldrh	r3, [r5, #0]
 80043e2:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 80043e4:	8820      	ldrh	r0, [r4, #0]
 80043e6:	f400 7280 	and.w	r2, r0, #256	; 0x100
 80043ea:	4213      	tst	r3, r2
 80043ec:	d013      	beq.n	8004416 <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 80043ee:	f645 4344 	movw	r3, #23620	; 0x5c44
 80043f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 80043f6:	f645 4048 	movw	r0, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 80043fa:	f64f 61ff 	movw	r1, #65279	; 0xfeff
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 80043fe:	f2c4 0000 	movt	r0, #16384	; 0x4000

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8004402:	6019      	str	r1, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8004404:	6802      	ldr	r2, [r0, #0]
 8004406:	0410      	lsls	r0, r2, #16
 8004408:	d432      	bmi.n	8004470 <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 800440a:	4b6c      	ldr	r3, [pc, #432]	; (80045bc <USB_Istr+0x25c>)
 800440c:	2000      	movs	r0, #0
 800440e:	6018      	str	r0, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8004410:	2007      	movs	r0, #7
 8004412:	4b69      	ldr	r3, [pc, #420]	; (80045b8 <USB_Istr+0x258>)
 8004414:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8004416:	b009      	add	sp, #36	; 0x24
 8004418:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 800441a:	4869      	ldr	r0, [pc, #420]	; (80045c0 <USB_Istr+0x260>)
 800441c:	4780      	blx	r0
 800441e:	e7d9      	b.n	80043d4 <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8004420:	f645 4344 	movw	r3, #23620	; 0x5c44
 8004424:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004428:	f64e 71ff 	movw	r1, #61439	; 0xefff
 800442c:	6019      	str	r1, [r3, #0]
    Resume(RESUME_EXTERNAL);
 800442e:	2000      	movs	r0, #0
 8004430:	4a61      	ldr	r2, [pc, #388]	; (80045b8 <USB_Istr+0x258>)
 8004432:	4790      	blx	r2
 8004434:	882b      	ldrh	r3, [r5, #0]
 8004436:	e7c1      	b.n	80043bc <USB_Istr+0x5c>
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
    Device_Property.Reset();
 8004438:	4a62      	ldr	r2, [pc, #392]	; (80045c4 <USB_Istr+0x264>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 800443a:	f645 4344 	movw	r3, #23620	; 0x5c44
 800443e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004442:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8004446:	6018      	str	r0, [r3, #0]
    Device_Property.Reset();
 8004448:	6851      	ldr	r1, [r2, #4]
 800444a:	4788      	blx	r1
 800444c:	882b      	ldrh	r3, [r5, #0]
 800444e:	e7a4      	b.n	800439a <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8004450:	485d      	ldr	r0, [pc, #372]	; (80045c8 <USB_Istr+0x268>)
 8004452:	4780      	blx	r0
 8004454:	882b      	ldrh	r3, [r5, #0]
 8004456:	e79b      	b.n	8004390 <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8004458:	4b5c      	ldr	r3, [pc, #368]	; (80045cc <USB_Istr+0x26c>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 800445a:	f64f 50ff 	movw	r0, #65023	; 0xfdff
 800445e:	6010      	str	r0, [r2, #0]
    bIntPackSOF++;
 8004460:	781a      	ldrb	r2, [r3, #0]
 8004462:	1c51      	adds	r1, r2, #1
 8004464:	b2c8      	uxtb	r0, r1
 8004466:	7018      	strb	r0, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8004468:	4b59      	ldr	r3, [pc, #356]	; (80045d0 <USB_Istr+0x270>)
 800446a:	4798      	blx	r3
 800446c:	882b      	ldrh	r3, [r5, #0]
 800446e:	e78a      	b.n	8004386 <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8004470:	4852      	ldr	r0, [pc, #328]	; (80045bc <USB_Istr+0x25c>)
 8004472:	6801      	ldr	r1, [r0, #0]
 8004474:	1c4a      	adds	r2, r1, #1
 8004476:	6002      	str	r2, [r0, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8004478:	6801      	ldr	r1, [r0, #0]
 800447a:	2903      	cmp	r1, #3
 800447c:	d9c8      	bls.n	8004410 <USB_Istr+0xb0>
 800447e:	f645 4240 	movw	r2, #23616	; 0x5c40
 8004482:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004486:	6811      	ldr	r1, [r2, #0]
 8004488:	0709      	lsls	r1, r1, #28
 800448a:	d4c1      	bmi.n	8004410 <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 800448c:	6815      	ldr	r5, [r2, #0]
 800448e:	4951      	ldr	r1, [pc, #324]	; (80045d4 <USB_Istr+0x274>)
 8004490:	b2ad      	uxth	r5, r5
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004492:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8004496:	600d      	str	r5, [r1, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004498:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800449c:	6825      	ldr	r5, [r4, #0]
 800449e:	f645 4404 	movw	r4, #23556	; 0x5c04
 80044a2:	b2ad      	uxth	r5, r5
 80044a4:	9500      	str	r5, [sp, #0]
 80044a6:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80044aa:	6825      	ldr	r5, [r4, #0]
 80044ac:	f645 4408 	movw	r4, #23560	; 0x5c08
 80044b0:	b2ad      	uxth	r5, r5
 80044b2:	9501      	str	r5, [sp, #4]
 80044b4:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80044b8:	6825      	ldr	r5, [r4, #0]
 80044ba:	f645 440c 	movw	r4, #23564	; 0x5c0c
 80044be:	b2ad      	uxth	r5, r5
 80044c0:	9502      	str	r5, [sp, #8]
 80044c2:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80044c6:	6825      	ldr	r5, [r4, #0]
 80044c8:	f645 4410 	movw	r4, #23568	; 0x5c10
 80044cc:	b2ad      	uxth	r5, r5
 80044ce:	9503      	str	r5, [sp, #12]
 80044d0:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80044d4:	6825      	ldr	r5, [r4, #0]
 80044d6:	f645 4414 	movw	r4, #23572	; 0x5c14
 80044da:	b2ad      	uxth	r5, r5
 80044dc:	9504      	str	r5, [sp, #16]
 80044de:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80044e2:	6825      	ldr	r5, [r4, #0]
 80044e4:	f645 4418 	movw	r4, #23576	; 0x5c18
 80044e8:	b2ad      	uxth	r5, r5
 80044ea:	9505      	str	r5, [sp, #20]
 80044ec:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80044f0:	6825      	ldr	r5, [r4, #0]
 80044f2:	f645 441c 	movw	r4, #23580	; 0x5c1c
 80044f6:	b2ad      	uxth	r5, r5
 80044f8:	9506      	str	r5, [sp, #24]
 80044fa:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80044fe:	6824      	ldr	r4, [r4, #0]
 8004500:	b2a4      	uxth	r4, r4
 8004502:	9407      	str	r4, [sp, #28]
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8004504:	680c      	ldr	r4, [r1, #0]
 8004506:	f044 0401 	orr.w	r4, r4, #1
 800450a:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 800450c:	680c      	ldr	r4, [r1, #0]
 800450e:	b2a4      	uxth	r4, r4
 8004510:	6014      	str	r4, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8004512:	680c      	ldr	r4, [r1, #0]
 8004514:	f024 0401 	bic.w	r4, r4, #1
 8004518:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 800451a:	6809      	ldr	r1, [r1, #0]
 800451c:	b289      	uxth	r1, r1
 800451e:	6011      	str	r1, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8004520:	6819      	ldr	r1, [r3, #0]
 8004522:	f645 4244 	movw	r2, #23620	; 0x5c44
 8004526:	0549      	lsls	r1, r1, #21
 8004528:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800452c:	d5f8      	bpl.n	8004520 <USB_Istr+0x1c0>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 800452e:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8004532:	6013      	str	r3, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8004534:	9900      	ldr	r1, [sp, #0]
 8004536:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800453a:	b28a      	uxth	r2, r1
 800453c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	9901      	ldr	r1, [sp, #4]
 8004544:	f645 4304 	movw	r3, #23556	; 0x5c04
 8004548:	b28a      	uxth	r2, r1
 800454a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	9902      	ldr	r1, [sp, #8]
 8004552:	f645 4308 	movw	r3, #23560	; 0x5c08
 8004556:	b28a      	uxth	r2, r1
 8004558:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	9903      	ldr	r1, [sp, #12]
 8004560:	f645 430c 	movw	r3, #23564	; 0x5c0c
 8004564:	b28a      	uxth	r2, r1
 8004566:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	9904      	ldr	r1, [sp, #16]
 800456e:	f645 4310 	movw	r3, #23568	; 0x5c10
 8004572:	b28a      	uxth	r2, r1
 8004574:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	9905      	ldr	r1, [sp, #20]
 800457c:	f645 4314 	movw	r3, #23572	; 0x5c14
 8004580:	b28a      	uxth	r2, r1
 8004582:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	9906      	ldr	r1, [sp, #24]
 800458a:	f645 4318 	movw	r3, #23576	; 0x5c18
 800458e:	b28a      	uxth	r2, r1
 8004590:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	9907      	ldr	r1, [sp, #28]
 8004598:	f645 431c 	movw	r3, #23580	; 0x5c1c
 800459c:	b28a      	uxth	r2, r1
 800459e:	f2c4 0300 	movt	r3, #16384	; 0x4000
      
        esof_counter = 0;
 80045a2:	2100      	movs	r1, #0
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 80045a4:	601a      	str	r2, [r3, #0]
      
        esof_counter = 0;
 80045a6:	6001      	str	r1, [r0, #0]
 80045a8:	e732      	b.n	8004410 <USB_Istr+0xb0>
 80045aa:	bf00      	nop
 80045ac:	20000ddc 	.word	0x20000ddc
 80045b0:	20001638 	.word	0x20001638
 80045b4:	200004a4 	.word	0x200004a4
 80045b8:	08004a8d 	.word	0x08004a8d
 80045bc:	20000498 	.word	0x20000498
 80045c0:	080048bd 	.word	0x080048bd
 80045c4:	20000284 	.word	0x20000284
 80045c8:	08005c19 	.word	0x08005c19
 80045cc:	20000494 	.word	0x20000494
 80045d0:	08004331 	.word	0x08004331
 80045d4:	20000490 	.word	0x20000490

080045d8 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <Virtual_Com_Port_SetConfiguration+0x10>)
 80045da:	7a98      	ldrb	r0, [r3, #10]
 80045dc:	b110      	cbz	r0, 80045e4 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 80045de:	4903      	ldr	r1, [pc, #12]	; (80045ec <Virtual_Com_Port_SetConfiguration+0x14>)
 80045e0:	2205      	movs	r2, #5
 80045e2:	600a      	str	r2, [r1, #0]
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20001614 	.word	0x20001614
 80045ec:	200004a0 	.word	0x200004a0

080045f0 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 80045f0:	f240 43a0 	movw	r3, #1184	; 0x4a0
 80045f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045f8:	2204      	movs	r2, #4
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop

08004600 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <Virtual_Com_Port_Status_In+0x10>)
 8004602:	781a      	ldrb	r2, [r3, #0]
 8004604:	2a20      	cmp	r2, #32
 8004606:	d101      	bne.n	800460c <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8004608:	2000      	movs	r0, #0
 800460a:	7018      	strb	r0, [r3, #0]
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	2000049c 	.word	0x2000049c

08004614 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop

08004618 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8004618:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 800461a:	b510      	push	{r4, lr}
 800461c:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800461e:	d003      	beq.n	8004628 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8004620:	2820      	cmp	r0, #32
 8004622:	d011      	beq.n	8004648 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8004624:	2002      	movs	r0, #2
 8004626:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8004628:	4a0f      	ldr	r2, [pc, #60]	; (8004668 <Virtual_Com_Port_Data_Setup+0x50>)
 800462a:	6813      	ldr	r3, [r2, #0]
 800462c:	7818      	ldrb	r0, [r3, #0]
 800462e:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8004632:	2921      	cmp	r1, #33	; 0x21
 8004634:	d1f6      	bne.n	8004624 <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8004636:	490d      	ldr	r1, [pc, #52]	; (800466c <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8004638:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800463a:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 800463c:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800463e:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8004640:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8004642:	4788      	blx	r1
  return USB_SUCCESS;
 8004644:	4620      	mov	r0, r4
 8004646:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8004648:	4a07      	ldr	r2, [pc, #28]	; (8004668 <Virtual_Com_Port_Data_Setup+0x50>)
 800464a:	6811      	ldr	r1, [r2, #0]
 800464c:	7808      	ldrb	r0, [r1, #0]
 800464e:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8004652:	2921      	cmp	r1, #33	; 0x21
 8004654:	d003      	beq.n	800465e <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8004656:	4a06      	ldr	r2, [pc, #24]	; (8004670 <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8004658:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800465a:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 800465c:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800465e:	4c04      	ldr	r4, [pc, #16]	; (8004670 <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8004660:	4904      	ldr	r1, [pc, #16]	; (8004674 <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 8004662:	7023      	strb	r3, [r4, #0]
 8004664:	e7e8      	b.n	8004638 <Virtual_Com_Port_Data_Setup+0x20>
 8004666:	bf00      	nop
 8004668:	20001634 	.word	0x20001634
 800466c:	080046ad 	.word	0x080046ad
 8004670:	2000049c 	.word	0x2000049c
 8004674:	080046c5 	.word	0x080046c5

08004678 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <Virtual_Com_Port_NoData_Setup+0x20>)
 800467a:	6819      	ldr	r1, [r3, #0]
 800467c:	780a      	ldrb	r2, [r1, #0]
 800467e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8004682:	2b21      	cmp	r3, #33	; 0x21
 8004684:	d001      	beq.n	800468a <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8004686:	2002      	movs	r0, #2
}
 8004688:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 800468a:	2802      	cmp	r0, #2
 800468c:	d001      	beq.n	8004692 <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 800468e:	2822      	cmp	r0, #34	; 0x22
 8004690:	d1f9      	bne.n	8004686 <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 8004692:	2000      	movs	r0, #0
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20001634 	.word	0x20001634

0800469c <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 800469c:	b109      	cbz	r1, 80046a2 <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800469e:	2002      	movs	r0, #2
 80046a0:	4770      	bx	lr
  }
  else if (Interface > 1)
 80046a2:	2801      	cmp	r0, #1
 80046a4:	d8fb      	bhi.n	800469e <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 80046a6:	4608      	mov	r0, r1
}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop

080046ac <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 80046ac:	b108      	cbz	r0, 80046b2 <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 80046ae:	4803      	ldr	r0, [pc, #12]	; (80046bc <Virtual_Com_Port_GetLineCoding+0x10>)
}
 80046b0:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 80046b2:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <Virtual_Com_Port_GetLineCoding+0x14>)
 80046b4:	2208      	movs	r2, #8
 80046b6:	6819      	ldr	r1, [r3, #0]
 80046b8:	820a      	strh	r2, [r1, #16]
    return NULL;
 80046ba:	4770      	bx	lr
 80046bc:	20000300 	.word	0x20000300
 80046c0:	20001634 	.word	0x20001634

080046c4 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 80046c4:	b108      	cbz	r0, 80046ca <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 80046c6:	4803      	ldr	r0, [pc, #12]	; (80046d4 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 80046c8:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 80046ca:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <Virtual_Com_Port_SetLineCoding+0x14>)
 80046cc:	2208      	movs	r2, #8
 80046ce:	6819      	ldr	r1, [r3, #0]
 80046d0:	820a      	strh	r2, [r1, #16]
    return NULL;
 80046d2:	4770      	bx	lr
 80046d4:	20000300 	.word	0x20000300
 80046d8:	20001634 	.word	0x20001634

080046dc <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 80046dc:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 80046e0:	6819      	ldr	r1, [r3, #0]
 80046e2:	78ca      	ldrb	r2, [r1, #3]
  if (wValue0 > 4)
 80046e4:	2a04      	cmp	r2, #4
 80046e6:	d805      	bhi.n	80046f4 <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 80046e8:	4b04      	ldr	r3, [pc, #16]	; (80046fc <Virtual_Com_Port_GetStringDescriptor+0x20>)
 80046ea:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80046ee:	4a04      	ldr	r2, [pc, #16]	; (8004700 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 80046f0:	4790      	blx	r2
 80046f2:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 80046f4:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 80046f6:	bd08      	pop	{r3, pc}
 80046f8:	20001634 	.word	0x20001634
 80046fc:	200002e0 	.word	0x200002e0
 8004700:	08005239 	.word	0x08005239

08004704 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8004704:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8004706:	f240 217c 	movw	r1, #636	; 0x27c
 800470a:	f245 2339 	movw	r3, #21049	; 0x5239
 800470e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004712:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004716:	4798      	blx	r3
}
 8004718:	bd08      	pop	{r3, pc}
 800471a:	bf00      	nop

0800471c <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 800471c:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800471e:	f240 21d8 	movw	r1, #728	; 0x2d8
 8004722:	f245 2339 	movw	r3, #21049	; 0x5239
 8004726:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800472a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800472e:	4798      	blx	r3
}
 8004730:	bd08      	pop	{r3, pc}
 8004732:	bf00      	nop

08004734 <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8004734:	f241 6234 	movw	r2, #5684	; 0x1634

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8004738:	f646 032c 	movw	r3, #26668	; 0x682c
 800473c:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8004740:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004744:	6810      	ldr	r0, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8004746:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8004748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800474c:	2400      	movs	r4, #0
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 800474e:	f645 1539 	movw	r5, #22841	; 0x5939
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8004752:	7241      	strb	r1, [r0, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8004754:	7284      	strb	r4, [r0, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8004756:	72c4      	strb	r4, [r0, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8004758:	f6c0 0500 	movt	r5, #2048	; 0x800
 800475c:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800475e:	f645 164d 	movw	r6, #22861	; 0x594d
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8004762:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8004764:	f6c0 0600 	movt	r6, #2048	; 0x800
 8004768:	4620      	mov	r0, r4
 800476a:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800476e:	f645 1565 	movw	r5, #22885	; 0x5965
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8004772:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8004774:	f6c0 0500 	movt	r5, #2048	; 0x800
 8004778:	2110      	movs	r1, #16
 800477a:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800477c:	f645 2ab9 	movw	sl, #23225	; 0x5ab9

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8004780:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8004782:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8004786:	2140      	movs	r1, #64	; 0x40
 8004788:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800478a:	f645 2895 	movw	r8, #23189	; 0x5a95
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800478e:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8004790:	f6c0 0800 	movt	r8, #2048	; 0x800
 8004794:	2180      	movs	r1, #128	; 0x80
 8004796:	4620      	mov	r0, r4
  Clear_Status_Out(ENDP0);
 8004798:	f645 272d 	movw	r7, #23085	; 0x5a2d

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800479c:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 800479e:	f6c0 0700 	movt	r7, #2048	; 0x800
 80047a2:	4620      	mov	r0, r4
 80047a4:	47b8      	blx	r7
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80047a6:	f240 2284 	movw	r2, #644	; 0x284
 80047aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80047ae:	f645 3941 	movw	r9, #23361	; 0x5b41
 80047b2:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 80047b6:	f6c0 0900 	movt	r9, #2048	; 0x800
 80047ba:	4620      	mov	r0, r4
 80047bc:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 80047be:	f645 2309 	movw	r3, #23049	; 0x5a09
 80047c2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80047c6:	4620      	mov	r0, r4
 80047c8:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 80047ca:	2001      	movs	r0, #1
 80047cc:	4621      	mov	r1, r4
 80047ce:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 80047d0:	2001      	movs	r0, #1
 80047d2:	21c0      	movs	r1, #192	; 0xc0
 80047d4:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80047d6:	f645 17a5 	movw	r7, #22949	; 0x59a5
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 80047da:	2001      	movs	r0, #1
 80047dc:	2120      	movs	r1, #32
 80047de:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80047e0:	f6c0 0700 	movt	r7, #2048	; 0x800
 80047e4:	2001      	movs	r0, #1
 80047e6:	4621      	mov	r1, r4
 80047e8:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 80047ea:	2002      	movs	r0, #2
 80047ec:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047f0:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 80047f2:	2002      	movs	r0, #2
 80047f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047f8:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 80047fa:	2002      	movs	r0, #2
 80047fc:	4621      	mov	r1, r4
 80047fe:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8004800:	2002      	movs	r0, #2
 8004802:	2120      	movs	r1, #32
 8004804:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8004806:	2003      	movs	r0, #3
 8004808:	4621      	mov	r1, r4
 800480a:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 800480c:	2003      	movs	r0, #3
 800480e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004812:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8004814:	2003      	movs	r0, #3
 8004816:	2140      	movs	r1, #64	; 0x40
 8004818:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 800481a:	2003      	movs	r0, #3
 800481c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004820:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8004822:	4621      	mov	r1, r4
 8004824:	2003      	movs	r0, #3
 8004826:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8004828:	f245 7115 	movw	r1, #22293	; 0x5715
 800482c:	4620      	mov	r0, r4
 800482e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004832:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 8004834:	f240 40a0 	movw	r0, #1184	; 0x4a0
 8004838:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800483c:	2201      	movs	r2, #1
 800483e:	6002      	str	r2, [r0, #0]
 8004840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004844 <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8004844:	f644 6325 	movw	r3, #20005	; 0x4e25
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8004848:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 800484a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800484e:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 8004850:	f241 6034 	movw	r0, #5684	; 0x1634
 8004854:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004858:	6802      	ldr	r2, [r0, #0]
 800485a:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 800485c:	f644 0181 	movw	r1, #18561	; 0x4881

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8004860:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 8004862:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004866:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8004868:	f645 33b5 	movw	r3, #23477	; 0x5bb5
 800486c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004870:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 8004872:	f240 40a0 	movw	r0, #1184	; 0x4a0
 8004876:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800487a:	6004      	str	r4, [r0, #0]
 800487c:	bd10      	pop	{r4, pc}
 800487e:	bf00      	nop

08004880 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8004880:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8004882:	f644 43f5 	movw	r3, #19701	; 0x4cf5
 8004886:	2001      	movs	r0, #1
 8004888:	f6c0 0300 	movt	r3, #2048	; 0x800
 800488c:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800488e:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8004892:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8004896:	f241 6238 	movw	r2, #5688	; 0x1638
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800489a:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800489e:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80048a0:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80048a4:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80048a6:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80048aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80048ae:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 80048b0:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 80048b2:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80048b4:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80048b6:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 80048b8:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 80048ba:	bd38      	pop	{r3, r4, r5, pc}

080048bc <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 80048bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 80048be:	2100      	movs	r1, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 80048c0:	b083      	sub	sp, #12
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 80048c2:	f645 4340 	movw	r3, #23616	; 0x5c40

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80048c6:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 80048ca:	9101      	str	r1, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 80048cc:	f2c4 0300 	movt	r3, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80048d0:	f2c4 0200 	movt	r2, #16384	; 0x4000
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 80048d4:	6818      	ldr	r0, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80048d6:	6814      	ldr	r4, [r2, #0]
 80048d8:	4960      	ldr	r1, [pc, #384]	; (8004a5c <Suspend+0x1a0>)
 80048da:	b2a5      	uxth	r5, r4
 80048dc:	f645 4604 	movw	r6, #23556	; 0x5c04
 80048e0:	600d      	str	r5, [r1, #0]
 80048e2:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80048e6:	6837      	ldr	r7, [r6, #0]
 80048e8:	f645 4208 	movw	r2, #23560	; 0x5c08
 80048ec:	b2bc      	uxth	r4, r7
 80048ee:	604c      	str	r4, [r1, #4]
 80048f0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80048f4:	6815      	ldr	r5, [r2, #0]
 80048f6:	f645 460c 	movw	r6, #23564	; 0x5c0c
 80048fa:	b2af      	uxth	r7, r5
 80048fc:	608f      	str	r7, [r1, #8]
 80048fe:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8004902:	6834      	ldr	r4, [r6, #0]
 8004904:	f645 4210 	movw	r2, #23568	; 0x5c10
 8004908:	b2a5      	uxth	r5, r4
 800490a:	60cd      	str	r5, [r1, #12]
 800490c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004910:	6816      	ldr	r6, [r2, #0]
 8004912:	f645 4714 	movw	r7, #23572	; 0x5c14
 8004916:	b2b4      	uxth	r4, r6
 8004918:	610c      	str	r4, [r1, #16]
 800491a:	f2c4 0700 	movt	r7, #16384	; 0x4000
 800491e:	683d      	ldr	r5, [r7, #0]
 8004920:	f645 4218 	movw	r2, #23576	; 0x5c18
 8004924:	b2ae      	uxth	r6, r5
 8004926:	614e      	str	r6, [r1, #20]
 8004928:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800492c:	6817      	ldr	r7, [r2, #0]
 800492e:	f645 451c 	movw	r5, #23580	; 0x5c1c
 8004932:	b2bc      	uxth	r4, r7
 8004934:	618c      	str	r4, [r1, #24]
 8004936:	f2c4 0500 	movt	r5, #16384	; 0x4000
 800493a:	682e      	ldr	r6, [r5, #0]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800493c:	b282      	uxth	r2, r0
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800493e:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8004942:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8004946:	4004      	ands	r4, r0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004948:	b2b7      	uxth	r7, r6
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800494a:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800494e:	f042 0601 	orr.w	r6, r2, #1
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8004952:	f645 4044 	movw	r0, #23620	; 0x5c44
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004956:	61cf      	str	r7, [r1, #28]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8004958:	f2c4 0000 	movt	r0, #16384	; 0x4000
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800495c:	601a      	str	r2, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800495e:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8004960:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8004962:	6802      	ldr	r2, [r0, #0]
 8004964:	f645 4344 	movw	r3, #23620	; 0x5c44
 8004968:	0552      	lsls	r2, r2, #21
 800496a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800496e:	d5f8      	bpl.n	8004962 <Suspend+0xa6>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8004970:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8004974:	6018      	str	r0, [r3, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8004976:	6808      	ldr	r0, [r1, #0]
 8004978:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800497c:	b280      	uxth	r0, r0
 800497e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004982:	6010      	str	r0, [r2, #0]
 8004984:	6848      	ldr	r0, [r1, #4]
 8004986:	f645 4204 	movw	r2, #23556	; 0x5c04
 800498a:	b280      	uxth	r0, r0
 800498c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004990:	6010      	str	r0, [r2, #0]
 8004992:	6888      	ldr	r0, [r1, #8]
 8004994:	f645 4208 	movw	r2, #23560	; 0x5c08
 8004998:	b280      	uxth	r0, r0
 800499a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800499e:	6010      	str	r0, [r2, #0]
 80049a0:	68c8      	ldr	r0, [r1, #12]
 80049a2:	f645 420c 	movw	r2, #23564	; 0x5c0c
 80049a6:	b280      	uxth	r0, r0
 80049a8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80049ac:	6010      	str	r0, [r2, #0]
 80049ae:	6908      	ldr	r0, [r1, #16]
 80049b0:	f645 4210 	movw	r2, #23568	; 0x5c10
 80049b4:	b280      	uxth	r0, r0
 80049b6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80049ba:	6010      	str	r0, [r2, #0]
 80049bc:	6948      	ldr	r0, [r1, #20]
 80049be:	f645 4214 	movw	r2, #23572	; 0x5c14
 80049c2:	b280      	uxth	r0, r0
 80049c4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80049c8:	6010      	str	r0, [r2, #0]
 80049ca:	6988      	ldr	r0, [r1, #24]
 80049cc:	f645 4218 	movw	r2, #23576	; 0x5c18
 80049d0:	b280      	uxth	r0, r0
 80049d2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80049d6:	6010      	str	r0, [r2, #0]
 80049d8:	69c8      	ldr	r0, [r1, #28]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 80049da:	f645 4240 	movw	r2, #23616	; 0x5c40
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 80049de:	f645 411c 	movw	r1, #23580	; 0x5c1c
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 80049e2:	f2c4 0200 	movt	r2, #16384	; 0x4000
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 80049e6:	b280      	uxth	r0, r0
 80049e8:	f2c4 0100 	movt	r1, #16384	; 0x4000
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 80049ec:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 80049f0:	6008      	str	r0, [r1, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 80049f2:	6014      	str	r4, [r2, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 80049f4:	6810      	ldr	r0, [r2, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80049f6:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 80049fa:	b284      	uxth	r4, r0
 80049fc:	f044 0004 	orr.w	r0, r4, #4
 8004a00:	6010      	str	r0, [r2, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8004a02:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8004a06:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8004a08:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8004a0c:	9001      	str	r0, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 8004a0e:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8004a10:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 8004a14:	f020 0003 	bic.w	r0, r0, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 8004a18:	f040 0001 	orr.w	r0, r0, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 8004a1c:	6008      	str	r0, [r1, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8004a1e:	6820      	ldr	r0, [r4, #0]
 8004a20:	f040 0004 	orr.w	r0, r0, #4
 8004a24:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	04c0      	lsls	r0, r0, #19
 8004a2a:	d50f      	bpl.n	8004a4c <Suspend+0x190>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 8004a2c:	f64e 70ff 	movw	r0, #61439	; 0xefff
 8004a30:	6018      	str	r0, [r3, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 8004a32:	6810      	ldr	r0, [r2, #0]
        wCNTR&=~CNTR_FSUSP;
 8004a34:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8004a38:	4003      	ands	r3, r0
        _SetCNTR(wCNTR);
 8004a3a:	6013      	str	r3, [r2, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 8004a3c:	9a01      	ldr	r2, [sp, #4]
 8004a3e:	600a      	str	r2, [r1, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 8004a40:	6821      	ldr	r1, [r4, #0]
 8004a42:	f021 0004 	bic.w	r0, r1, #4
 8004a46:	6020      	str	r0, [r4, #0]
#endif
    }
}
 8004a48:	b003      	add	sp, #12
 8004a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <Suspend+0x1a4>)
 8004a4e:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 8004a50:	6822      	ldr	r2, [r4, #0]
 8004a52:	f022 0104 	bic.w	r1, r2, #4
 8004a56:	6021      	str	r1, [r4, #0]
 8004a58:	e7f6      	b.n	8004a48 <Suspend+0x18c>
 8004a5a:	bf00      	nop
 8004a5c:	20000de4 	.word	0x20000de4
 8004a60:	08004e69 	.word	0x08004e69

08004a64 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8004a64:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8004a66:	f645 4440 	movw	r4, #23616	; 0x5c40
 8004a6a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004a6e:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 8004a70:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8004a74:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8004a76:	f644 4025 	movw	r0, #19493	; 0x4c25
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8004a7a:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8004a7c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004a80:	4780      	blx	r0

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8004a82:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 8004a86:	6021      	str	r1, [r4, #0]
 8004a88:	bd10      	pop	{r4, pc}
 8004a8a:	bf00      	nop

08004a8c <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8004a8c:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 8004a8e:	4c2b      	ldr	r4, [pc, #172]	; (8004b3c <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8004a90:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 8004a92:	bf18      	it	ne
 8004a94:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 8004a96:	7823      	ldrb	r3, [r4, #0]
 8004a98:	2b05      	cmp	r3, #5
 8004a9a:	d819      	bhi.n	8004ad0 <Resume+0x44>
 8004a9c:	e8df f003 	tbb	[pc, r3]
 8004aa0:	2f2a221b 	.word	0x2f2a221b
 8004aa4:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8004aa6:	7860      	ldrb	r0, [r4, #1]
 8004aa8:	1e41      	subs	r1, r0, #1
 8004aaa:	b2ca      	uxtb	r2, r1
 8004aac:	7062      	strb	r2, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8004aae:	7863      	ldrb	r3, [r4, #1]
 8004ab0:	b983      	cbnz	r3, 8004ad4 <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 8004ab2:	f645 4240 	movw	r2, #23616	; 0x5c40
 8004ab6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004aba:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 8004abc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8004ac0:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 8004ac2:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <Resume+0xb0>)
        remotewakeupon = 0;
 8004ac6:	491e      	ldr	r1, [pc, #120]	; (8004b40 <Resume+0xb4>)
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 8004ac8:	2006      	movs	r0, #6
 8004aca:	7010      	strb	r0, [r2, #0]
        remotewakeupon = 0;
 8004acc:	600b      	str	r3, [r1, #0]
 8004ace:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8004ad0:	2106      	movs	r1, #6
 8004ad2:	7021      	strb	r1, [r4, #0]
 8004ad4:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 8004ad6:	4a1a      	ldr	r2, [pc, #104]	; (8004b40 <Resume+0xb4>)
 8004ad8:	6811      	ldr	r1, [r2, #0]
 8004ada:	2900      	cmp	r1, #0
 8004adc:	d028      	beq.n	8004b30 <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8004ade:	2005      	movs	r0, #5
 8004ae0:	7020      	strb	r0, [r4, #0]
 8004ae2:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 8004ae4:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <Resume+0xb8>)
 8004ae6:	4790      	blx	r2
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 8004ae8:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <Resume+0xb4>)
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8004aea:	2104      	movs	r1, #4
      remotewakeupon = 1;
 8004aec:	2001      	movs	r0, #1
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8004aee:	7021      	strb	r1, [r4, #0]
      remotewakeupon = 1;
 8004af0:	6018      	str	r0, [r3, #0]
      break;
 8004af2:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8004af4:	2302      	movs	r3, #2
      ResumeS.eState = RESUME_WAIT;
 8004af6:	2003      	movs	r0, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8004af8:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8004afa:	7020      	strb	r0, [r4, #0]
      break;
 8004afc:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 8004afe:	7862      	ldrb	r2, [r4, #1]
 8004b00:	1e51      	subs	r1, r2, #1
 8004b02:	b2cb      	uxtb	r3, r1
 8004b04:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8004b06:	7860      	ldrb	r0, [r4, #1]
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d1e3      	bne.n	8004ad4 <Resume+0x48>
        ResumeS.eState = RESUME_START;
 8004b0c:	490b      	ldr	r1, [pc, #44]	; (8004b3c <Resume+0xb0>)
 8004b0e:	2204      	movs	r2, #4
 8004b10:	700a      	strb	r2, [r1, #0]
 8004b12:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8004b14:	f645 4340 	movw	r3, #23616	; 0x5c40
 8004b18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004b1c:	6818      	ldr	r0, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8004b1e:	b282      	uxth	r2, r0
 8004b20:	f042 0110 	orr.w	r1, r2, #16
 8004b24:	6019      	str	r1, [r3, #0]
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 8004b26:	200a      	movs	r0, #10
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 8004b28:	2305      	movs	r3, #5
 8004b2a:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 8004b2c:	7060      	strb	r0, [r4, #1]
      break;
 8004b2e:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <Resume+0xb8>)
 8004b32:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 8004b34:	2206      	movs	r2, #6
 8004b36:	7022      	strb	r2, [r4, #0]
 8004b38:	bd10      	pop	{r4, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000de0 	.word	0x20000de0
 8004b40:	200004a8 	.word	0x200004a8
 8004b44:	08004a65 	.word	0x08004a65

08004b48 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8004b48:	f240 4314 	movw	r3, #1044	; 0x414
 8004b4c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004b50:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	4770      	bx	lr

08004b58 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8004b58:	b470      	push	{r4, r5, r6}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004b5a:	b38a      	cbz	r2, 8004bc0 <IntToUnicode+0x68>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8004b5c:	1e56      	subs	r6, r2, #1
 8004b5e:	b2f2      	uxtb	r2, r6
 8004b60:	1c53      	adds	r3, r2, #1
 8004b62:	005e      	lsls	r6, r3, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004b64:	0f03      	lsrs	r3, r0, #28
 8004b66:	1eb2      	subs	r2, r6, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004b68:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004b6a:	2b09      	cmp	r3, #9
 8004b6c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8004b70:	d928      	bls.n	8004bc4 <IntToUnicode+0x6c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004b72:	3337      	adds	r3, #55	; 0x37
 8004b74:	700b      	strb	r3, [r1, #0]
 8004b76:	2302      	movs	r3, #2
    }
    
    value = value << 4;
 8004b78:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004b7a:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004b7c:	704c      	strb	r4, [r1, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004b7e:	d01f      	beq.n	8004bc0 <IntToUnicode+0x68>
 8004b80:	b152      	cbz	r2, 8004b98 <IntToUnicode+0x40>
  {
    if( ((value >> 28)) < 0xA )
 8004b82:	0f02      	lsrs	r2, r0, #28
 8004b84:	2a09      	cmp	r2, #9
 8004b86:	d913      	bls.n	8004bb0 <IntToUnicode+0x58>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004b88:	3237      	adds	r2, #55	; 0x37
 8004b8a:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8004b8c:	18ca      	adds	r2, r1, r3
 8004b8e:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8004b90:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004b92:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004b94:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004b96:	d013      	beq.n	8004bc0 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8004b98:	0f05      	lsrs	r5, r0, #28
 8004b9a:	2d09      	cmp	r5, #9
 8004b9c:	d815      	bhi.n	8004bca <IntToUnicode+0x72>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004b9e:	3530      	adds	r5, #48	; 0x30
 8004ba0:	54cd      	strb	r5, [r1, r3]
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8004ba2:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004ba4:	0f02      	lsrs	r2, r0, #28
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8004ba6:	18cd      	adds	r5, r1, r3
 8004ba8:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004baa:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004bac:	706c      	strb	r4, [r5, #1]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004bae:	d8eb      	bhi.n	8004b88 <IntToUnicode+0x30>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004bb0:	3230      	adds	r2, #48	; 0x30
 8004bb2:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8004bb4:	18ca      	adds	r2, r1, r3
 8004bb6:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8004bb8:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004bba:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004bbc:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004bbe:	d1eb      	bne.n	8004b98 <IntToUnicode+0x40>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8004bc0:	bc70      	pop	{r4, r5, r6}
 8004bc2:	4770      	bx	lr
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004bc4:	3330      	adds	r3, #48	; 0x30
 8004bc6:	700b      	strb	r3, [r1, #0]
 8004bc8:	e7d5      	b.n	8004b76 <IntToUnicode+0x1e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004bca:	3537      	adds	r5, #55	; 0x37
 8004bcc:	54cd      	strb	r5, [r1, r3]
 8004bce:	e7e8      	b.n	8004ba2 <IntToUnicode+0x4a>

08004bd0 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8004bd0:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 8004bd2:	f244 3361 	movw	r3, #17249	; 0x4361
 8004bd6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004bda:	4798      	blx	r3
 8004bdc:	bd08      	pop	{r3, pc}
 8004bde:	bf00      	nop

08004be0 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8004be0:	f241 0304 	movw	r3, #4100	; 0x1004
 8004be4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	f422 0070 	bic.w	r0, r2, #15728640	; 0xf00000
 8004bee:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 8004bf0:	6819      	ldr	r1, [r3, #0]
 8004bf2:	f441 1200 	orr.w	r2, r1, #2097152	; 0x200000
 8004bf6:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	6018      	str	r0, [r3, #0]
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop

08004c00 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8004c00:	f241 0204 	movw	r2, #4100	; 0x1004
 8004c04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004c08:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8004c0a:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8004c0e:	f421 0080 	bic.w	r0, r1, #4194304	; 0x400000
 8004c12:	6010      	str	r0, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8004c14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	f442 0100 	orr.w	r1, r2, #8388608	; 0x800000
 8004c1e:	6019      	str	r1, [r3, #0]
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop

08004c24 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <Leave_LowPowerMode+0x18>)
 8004c26:	7a98      	ldrb	r0, [r3, #10]
 8004c28:	b918      	cbnz	r0, 8004c32 <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 8004c2a:	4905      	ldr	r1, [pc, #20]	; (8004c40 <Leave_LowPowerMode+0x1c>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	600a      	str	r2, [r1, #0]
 8004c30:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8004c32:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <Leave_LowPowerMode+0x1c>)
 8004c34:	2005      	movs	r0, #5
 8004c36:	6018      	str	r0, [r3, #0]
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20001614 	.word	0x20001614
 8004c40:	200004a0 	.word	0x200004a0

08004c44 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8004c44:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8004c48:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8004c4a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004c4e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8004c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8004c56:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8004c58:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004c5c:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8004c5e:	f240 4404 	movw	r4, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8004c62:	f420 2580 	bic.w	r5, r0, #262144	; 0x40000
 8004c66:	601d      	str	r5, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8004c68:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8004c6c:	6822      	ldr	r2, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8004c6e:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 8004c72:	f422 2080 	bic.w	r0, r2, #262144	; 0x40000
 8004c76:	6020      	str	r0, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8004c78:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004c7c:	680c      	ldr	r4, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8004c7e:	f240 450c 	movw	r5, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8004c82:	f444 2280 	orr.w	r2, r4, #262144	; 0x40000
 8004c86:	600a      	str	r2, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8004c88:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004c8c:	6829      	ldr	r1, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8004c8e:	f642 04d5 	movw	r4, #10453	; 0x28d5
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8004c92:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 8004c96:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8004c98:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8004c9a:	f644 31d1 	movw	r1, #19409	; 0x4bd1
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8004c9e:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8004ca2:	2090      	movs	r0, #144	; 0x90
 8004ca4:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8004cae:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8004cb0:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8004cb2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8004cb6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004cba:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8004cbc:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8004cbe:	f442 1180 	orr.w	r1, r2, #1048576	; 0x100000
 8004cc2:	6019      	str	r1, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8004cc4:	f644 3149 	movw	r1, #19273	; 0x4b49
 8004cc8:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004ccc:	2200      	movs	r2, #0
 8004cce:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8004cd0:	f24e 1004 	movw	r0, #57604	; 0xe104
 8004cd4:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8004cd8:	6802      	ldr	r2, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8004cda:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8004cde:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 8004ce2:	6001      	str	r1, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8004ce4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	f440 2280 	orr.w	r2, r0, #262144	; 0x40000
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	bd38      	pop	{r3, r4, r5, pc}
 8004cf2:	bf00      	nop

08004cf4 <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8004cf4:	f241 030c 	movw	r3, #4108	; 0x100c
 8004cf8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004cfc:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 8004cfe:	b918      	cbnz	r0, 8004d08 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8004d00:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 8004d04:	6018      	str	r0, [r3, #0]
 8004d06:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8004d08:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004d0c:	6019      	str	r1, [r3, #0]
 8004d0e:	4770      	bx	lr

08004d10 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8004d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004d14:	460f      	mov	r7, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8004d16:	b082      	sub	sp, #8
 8004d18:	4605      	mov	r5, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004d1a:	b361      	cbz	r1, 8004d76 <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004d1c:	7803      	ldrb	r3, [r0, #0]
 8004d1e:	1e4a      	subs	r2, r1, #1
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004d20:	2005      	movs	r0, #5
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004d22:	2401      	movs	r4, #1
 8004d24:	4e15      	ldr	r6, [pc, #84]	; (8004d7c <USB_To_USART_Send_Data+0x6c>)
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004d26:	f10d 0107 	add.w	r1, sp, #7
 8004d2a:	ea02 0804 	and.w	r8, r2, r4
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004d2e:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004d32:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004d34:	42bc      	cmp	r4, r7
 8004d36:	d21e      	bcs.n	8004d76 <USB_To_USART_Send_Data+0x66>
 8004d38:	f1b8 0f00 	cmp.w	r8, #0
 8004d3c:	d009      	beq.n	8004d52 <USB_To_USART_Send_Data+0x42>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004d3e:	786b      	ldrb	r3, [r5, #1]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004d40:	2005      	movs	r0, #5
 8004d42:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004d46:	2402      	movs	r4, #2
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004d48:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004d4c:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004d4e:	42bc      	cmp	r4, r7
 8004d50:	d211      	bcs.n	8004d76 <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004d52:	5d2a      	ldrb	r2, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004d54:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004d58:	3401      	adds	r4, #1
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004d5a:	2005      	movs	r0, #5
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004d5c:	f88d 2007 	strb.w	r2, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004d60:	47b0      	blx	r6
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004d62:	5d2b      	ldrb	r3, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004d64:	2005      	movs	r0, #5
 8004d66:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004d6a:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004d6c:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004d70:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004d72:	42bc      	cmp	r4, r7
 8004d74:	d3ed      	bcc.n	8004d52 <USB_To_USART_Send_Data+0x42>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 8004d76:	b002      	add	sp, #8
 8004d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d7c:	080027c1 	.word	0x080027c1

08004d80 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8004d80:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8004d82:	4c20      	ldr	r4, [pc, #128]	; (8004e04 <Handle_USBAsynchXfer+0x84>)
 8004d84:	7823      	ldrb	r3, [r4, #0]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d023      	beq.n	8004dd2 <Handle_USBAsynchXfer+0x52>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8004d8a:	4d1f      	ldr	r5, [pc, #124]	; (8004e08 <Handle_USBAsynchXfer+0x88>)
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d92:	d02c      	beq.n	8004dee <Handle_USBAsynchXfer+0x6e>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8004d94:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <Handle_USBAsynchXfer+0x8c>)
 8004d96:	6811      	ldr	r1, [r2, #0]
 8004d98:	428b      	cmp	r3, r1
 8004d9a:	d02f      	beq.n	8004dfc <Handle_USBAsynchXfer+0x7c>
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8004d9c:	d81a      	bhi.n	8004dd4 <Handle_USBAsynchXfer+0x54>
 8004d9e:	b298      	uxth	r0, r3
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8004da0:	1ace      	subs	r6, r1, r3
 8004da2:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8004da4:	2e40      	cmp	r6, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8004da6:	6016      	str	r6, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8004da8:	d91b      	bls.n	8004de2 <Handle_USBAsynchXfer+0x62>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8004daa:	3e40      	subs	r6, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8004dac:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8004dae:	6016      	str	r6, [r2, #0]
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8004db0:	602b      	str	r3, [r5, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8004db2:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8004db4:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8004db6:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8004db8:	1818      	adds	r0, r3, r0
 8004dba:	4632      	mov	r2, r6
 8004dbc:	21c0      	movs	r1, #192	; 0xc0
 8004dbe:	4b16      	ldr	r3, [pc, #88]	; (8004e18 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8004dc0:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8004dc2:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4a14      	ldr	r2, [pc, #80]	; (8004e1c <Handle_USBAsynchXfer+0x9c>)
 8004dca:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 8004dcc:	4628      	mov	r0, r5
 8004dce:	4914      	ldr	r1, [pc, #80]	; (8004e20 <Handle_USBAsynchXfer+0xa0>)
 8004dd0:	4788      	blx	r1
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8004dd4:	f5c3 6600 	rsb	r6, r3, #2048	; 0x800
 8004dd8:	4a0d      	ldr	r2, [pc, #52]	; (8004e10 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8004dda:	2e40      	cmp	r6, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8004ddc:	6016      	str	r6, [r2, #0]
 8004dde:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8004de0:	d8e3      	bhi.n	8004daa <Handle_USBAsynchXfer+0x2a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 8004de2:	18f1      	adds	r1, r6, r3
 8004de4:	6029      	str	r1, [r5, #0]
      USART_Rx_length = 0;
 8004de6:	2500      	movs	r5, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 8004de8:	b2b6      	uxth	r6, r6
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8004dea:	6015      	str	r5, [r2, #0]
 8004dec:	e7e2      	b.n	8004db4 <Handle_USBAsynchXfer+0x34>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8004dee:	4907      	ldr	r1, [pc, #28]	; (8004e0c <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8004df0:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8004df2:	6809      	ldr	r1, [r1, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8004df4:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8004df6:	b109      	cbz	r1, 8004dfc <Handle_USBAsynchXfer+0x7c>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	e7d1      	b.n	8004da0 <Handle_USBAsynchXfer+0x20>
    {
      USB_Tx_State = 0; 
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	7020      	strb	r0, [r4, #0]
      return;
 8004e00:	bd70      	pop	{r4, r5, r6, pc}
 8004e02:	bf00      	nop
 8004e04:	200004ac 	.word	0x200004ac
 8004e08:	200004b4 	.word	0x200004b4
 8004e0c:	200004b0 	.word	0x200004b0
 8004e10:	200004b8 	.word	0x200004b8
 8004e14:	20000e04 	.word	0x20000e04
 8004e18:	08005871 	.word	0x08005871
 8004e1c:	08005b21 	.word	0x08005b21
 8004e20:	080059e5 	.word	0x080059e5

08004e24 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 8004e24:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8004e26:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 8004e2a:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8004e2e:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 8004e32:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8004e36:	6810      	ldr	r0, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 8004e38:	681a      	ldr	r2, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8004e3a:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 8004e3e:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8004e42:	1880      	adds	r0, r0, r2
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8004e44:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8004e46:	d007      	beq.n	8004e58 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8004e48:	4904      	ldr	r1, [pc, #16]	; (8004e5c <Get_SerialNum+0x38>)
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	4d04      	ldr	r5, [pc, #16]	; (8004e60 <Get_SerialNum+0x3c>)
 8004e4e:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8004e50:	4620      	mov	r0, r4
 8004e52:	4904      	ldr	r1, [pc, #16]	; (8004e64 <Get_SerialNum+0x40>)
 8004e54:	2204      	movs	r2, #4
 8004e56:	47a8      	blx	r5
 8004e58:	bd38      	pop	{r3, r4, r5, pc}
 8004e5a:	bf00      	nop
 8004e5c:	2000022a 	.word	0x2000022a
 8004e60:	08004b59 	.word	0x08004b59
 8004e64:	2000023a 	.word	0x2000023a

08004e68 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8004e68:	bf30      	wfi
 8004e6a:	4770      	bx	lr

08004e6c <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8004e6c:	b508      	push	{r3, lr}
  if (Length == 0)
 8004e6e:	b138      	cbz	r0, 8004e80 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <Standard_GetConfiguration+0x20>)
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	6801      	ldr	r1, [r0, #0]
 8004e76:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_Configuration;
 8004e78:	4a05      	ldr	r2, [pc, #20]	; (8004e90 <Standard_GetConfiguration+0x24>)
 8004e7a:	6810      	ldr	r0, [r2, #0]
 8004e7c:	300a      	adds	r0, #10
}
 8004e7e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8004e80:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <Standard_GetConfiguration+0x24>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	6819      	ldr	r1, [r3, #0]
 8004e86:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8004e88:	bd08      	pop	{r3, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20001630 	.word	0x20001630
 8004e90:	20001634 	.word	0x20001634

08004e94 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8004e94:	b508      	push	{r3, lr}
  if (Length == 0)
 8004e96:	b138      	cbz	r0, 8004ea8 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8004e98:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <Standard_GetInterface+0x20>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	6881      	ldr	r1, [r0, #8]
 8004e9e:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8004ea0:	4a05      	ldr	r2, [pc, #20]	; (8004eb8 <Standard_GetInterface+0x24>)
 8004ea2:	6810      	ldr	r0, [r2, #0]
 8004ea4:	300c      	adds	r0, #12
}
 8004ea6:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8004ea8:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <Standard_GetInterface+0x24>)
 8004eaa:	2201      	movs	r2, #1
 8004eac:	6819      	ldr	r1, [r3, #0]
 8004eae:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8004eb0:	bd08      	pop	{r3, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20001630 	.word	0x20001630
 8004eb8:	20001634 	.word	0x20001634

08004ebc <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8004ebc:	b508      	push	{r3, lr}
  if (Length == 0)
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d03b      	beq.n	8004f3a <Standard_GetStatus+0x7e>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004ec2:	4b23      	ldr	r3, [pc, #140]	; (8004f50 <Standard_GetStatus+0x94>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8004ec4:	4823      	ldr	r0, [pc, #140]	; (8004f54 <Standard_GetStatus+0x98>)
 8004ec6:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004ec8:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8004eca:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004ecc:	7813      	ldrb	r3, [r2, #0]
 8004ece:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8004ed2:	d112      	bne.n	8004efa <Standard_GetStatus+0x3e>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 8004ed4:	7a53      	ldrb	r3, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8004ed6:	f003 0220 	and.w	r2, r3, #32
 8004eda:	b2d1      	uxtb	r1, r2
 8004edc:	bb59      	cbnz	r1, 8004f36 <Standard_GetStatus+0x7a>
 8004ede:	7802      	ldrb	r2, [r0, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	b2d9      	uxtb	r1, r3
 8004ee6:	b311      	cbz	r1, 8004f2e <Standard_GetStatus+0x72>
    {
      SetBit(StatusInfo0, 0);
 8004ee8:	f042 0301 	orr.w	r3, r2, #1
 8004eec:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8004eee:	481a      	ldr	r0, [pc, #104]	; (8004f58 <Standard_GetStatus+0x9c>)
 8004ef0:	6801      	ldr	r1, [r0, #0]
 8004ef2:	690a      	ldr	r2, [r1, #16]
 8004ef4:	4790      	blx	r2
  return (uint8_t *)&StatusInfo;
 8004ef6:	4817      	ldr	r0, [pc, #92]	; (8004f54 <Standard_GetStatus+0x98>)
 8004ef8:	bd08      	pop	{r3, pc}
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d016      	beq.n	8004f2c <Standard_GetStatus+0x70>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d113      	bne.n	8004f2a <Standard_GetStatus+0x6e>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8004f02:	7951      	ldrb	r1, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8004f04:	f001 020f 	and.w	r2, r1, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8004f08:	0093      	lsls	r3, r2, #2
 8004f0a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004f0e:	f502 43b8 	add.w	r3, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8004f12:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8004f16:	6819      	ldr	r1, [r3, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8004f18:	d114      	bne.n	8004f44 <Standard_GetStatus+0x88>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8004f1a:	f401 5240 	and.w	r2, r1, #12288	; 0x3000
 8004f1e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004f22:	d1e4      	bne.n	8004eee <Standard_GetStatus+0x32>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 8004f24:	2101      	movs	r1, #1
 8004f26:	7001      	strb	r1, [r0, #0]
 8004f28:	e7e1      	b.n	8004eee <Standard_GetStatus+0x32>
    }

  }
  else
  {
    return NULL;
 8004f2a:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 8004f2c:	bd08      	pop	{r3, pc}
    {
      SetBit(StatusInfo0, 0);
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 8004f2e:	f022 0201 	bic.w	r2, r2, #1
 8004f32:	7002      	strb	r2, [r0, #0]
 8004f34:	e7db      	b.n	8004eee <Standard_GetStatus+0x32>
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 8004f36:	2202      	movs	r2, #2
 8004f38:	e7d2      	b.n	8004ee0 <Standard_GetStatus+0x24>
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8004f3a:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <Standard_GetStatus+0x94>)
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	820a      	strh	r2, [r1, #16]
    return 0;
 8004f42:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8004f44:	f001 0330 	and.w	r3, r1, #48	; 0x30
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d1d0      	bne.n	8004eee <Standard_GetStatus+0x32>
 8004f4c:	e7ea      	b.n	8004f24 <Standard_GetStatus+0x68>
 8004f4e:	bf00      	nop
 8004f50:	20001634 	.word	0x20001634
 8004f54:	20001604 	.word	0x20001604
 8004f58:	20001630 	.word	0x20001630

08004f5c <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8004f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8004f60:	4e27      	ldr	r6, [pc, #156]	; (8005000 <DataStageIn+0xa4>)
 8004f62:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8004f64:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 8004f66:	7a27      	ldrb	r7, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8004f68:	b923      	cbnz	r3, 8004f74 <DataStageIn+0x18>
 8004f6a:	2f04      	cmp	r7, #4
 8004f6c:	d02a      	beq.n	8004fc4 <DataStageIn+0x68>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8004f6e:	8aa5      	ldrh	r5, [r4, #20]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8004f70:	2704      	movs	r7, #4
 8004f72:	e003      	b.n	8004f7c <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8004f74:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8004f76:	42ab      	cmp	r3, r5
 8004f78:	d9fa      	bls.n	8004f70 <DataStageIn+0x14>
 8004f7a:	2702      	movs	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8004f7c:	429d      	cmp	r5, r3
 8004f7e:	bf28      	it	cs
 8004f80:	461d      	movcs	r5, r3
 8004f82:	69a1      	ldr	r1, [r4, #24]
 8004f84:	4628      	mov	r0, r5
 8004f86:	4788      	blx	r1
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8004f88:	4a1e      	ldr	r2, [pc, #120]	; (8005004 <DataStageIn+0xa8>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8004f8a:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	4790      	blx	r2
 8004f90:	462a      	mov	r2, r5
 8004f92:	4601      	mov	r1, r0
 8004f94:	4b1c      	ldr	r3, [pc, #112]	; (8005008 <DataStageIn+0xac>)
 8004f96:	4640      	mov	r0, r8
 8004f98:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	4a1b      	ldr	r2, [pc, #108]	; (800500c <DataStageIn+0xb0>)
 8004fa0:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 8004fa2:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8004fa4:	8a61      	ldrh	r1, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8004fa6:	1b43      	subs	r3, r0, r5
 8004fa8:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8004faa:	186d      	adds	r5, r5, r1
  vSetEPTxStatus(EP_TX_VALID);
 8004fac:	4818      	ldr	r0, [pc, #96]	; (8005010 <DataStageIn+0xb4>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8004fae:	4b19      	ldr	r3, [pc, #100]	; (8005014 <DataStageIn+0xb8>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8004fb0:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8004fb2:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8004fb4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004fb8:	6834      	ldr	r4, [r6, #0]

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8004fba:	8002      	strh	r2, [r0, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8004fbc:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8004fbe:	7227      	strb	r7, [r4, #8]
 8004fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8004fc4:	4a14      	ldr	r2, [pc, #80]	; (8005018 <DataStageIn+0xbc>)
 8004fc6:	7810      	ldrb	r0, [r2, #0]
 8004fc8:	2801      	cmp	r0, #1
 8004fca:	d006      	beq.n	8004fda <DataStageIn+0x7e>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8004fcc:	4910      	ldr	r1, [pc, #64]	; (8005010 <DataStageIn+0xb4>)
 8004fce:	2710      	movs	r7, #16
 8004fd0:	800f      	strh	r7, [r1, #0]
 8004fd2:	2707      	movs	r7, #7
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8004fd4:	7227      	strb	r7, [r4, #8]
 8004fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8004fda:	f645 4050 	movw	r0, #23632	; 0x5c50
 8004fde:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004fe2:	6800      	ldr	r0, [r0, #0]
 8004fe4:	f243 0102 	movw	r1, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004fe8:	b280      	uxth	r0, r0
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8004fea:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004fee:	1841      	adds	r1, r0, r1
 8004ff0:	0048      	lsls	r0, r1, #1
 8004ff2:	4907      	ldr	r1, [pc, #28]	; (8005010 <DataStageIn+0xb4>)
 8004ff4:	6003      	str	r3, [r0, #0]
 8004ff6:	2030      	movs	r0, #48	; 0x30
 8004ff8:	8008      	strh	r0, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8004ffa:	7013      	strb	r3, [r2, #0]
 8004ffc:	e7df      	b.n	8004fbe <DataStageIn+0x62>
 8004ffe:	bf00      	nop
 8005000:	20001634 	.word	0x20001634
 8005004:	08005ae1 	.word	0x08005ae1
 8005008:	08005871 	.word	0x08005871
 800500c:	08005b21 	.word	0x08005b21
 8005010:	2000163c 	.word	0x2000163c
 8005014:	2000163a 	.word	0x2000163a
 8005018:	200004bc 	.word	0x200004bc

0800501c <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 800501c:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <Standard_SetConfiguration+0x30>)
 8005020:	4a0b      	ldr	r2, [pc, #44]	; (8005050 <Standard_SetConfiguration+0x34>)
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	7851      	ldrb	r1, [r2, #1]
 8005026:	78c3      	ldrb	r3, [r0, #3]
 8005028:	4299      	cmp	r1, r3
 800502a:	d201      	bcs.n	8005030 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 800502c:	2002      	movs	r0, #2
  }
}
 800502e:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8005030:	7882      	ldrb	r2, [r0, #2]
 8005032:	2a00      	cmp	r2, #0
 8005034:	d1fa      	bne.n	800502c <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8005036:	8884      	ldrh	r4, [r0, #4]
 8005038:	2c00      	cmp	r4, #0
 800503a:	d1f7      	bne.n	800502c <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800503c:	7283      	strb	r3, [r0, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800503e:	4805      	ldr	r0, [pc, #20]	; (8005054 <Standard_SetConfiguration+0x38>)
 8005040:	6801      	ldr	r1, [r0, #0]
 8005042:	684b      	ldr	r3, [r1, #4]
 8005044:	4798      	blx	r3
    return USB_SUCCESS;
 8005046:	4620      	mov	r0, r4
 8005048:	bd10      	pop	{r4, pc}
 800504a:	bf00      	nop
 800504c:	20001634 	.word	0x20001634
 8005050:	20000308 	.word	0x20000308
 8005054:	20001630 	.word	0x20001630

08005058 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8005058:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800505a:	4a10      	ldr	r2, [pc, #64]	; (800509c <Standard_SetInterface+0x44>)
 800505c:	4c10      	ldr	r4, [pc, #64]	; (80050a0 <Standard_SetInterface+0x48>)
 800505e:	6811      	ldr	r1, [r2, #0]
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	698a      	ldr	r2, [r1, #24]
 8005064:	7958      	ldrb	r0, [r3, #5]
 8005066:	78d9      	ldrb	r1, [r3, #3]
 8005068:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	7a99      	ldrb	r1, [r3, #10]
 800506e:	b909      	cbnz	r1, 8005074 <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8005070:	2002      	movs	r0, #2
}
 8005072:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8005074:	2800      	cmp	r0, #0
 8005076:	d1fb      	bne.n	8005070 <Standard_SetInterface+0x18>
 8005078:	7918      	ldrb	r0, [r3, #4]
 800507a:	2800      	cmp	r0, #0
 800507c:	d1f8      	bne.n	8005070 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 800507e:	789d      	ldrb	r5, [r3, #2]
 8005080:	2d00      	cmp	r5, #0
 8005082:	d1f5      	bne.n	8005070 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8005084:	4a07      	ldr	r2, [pc, #28]	; (80050a4 <Standard_SetInterface+0x4c>)
 8005086:	6813      	ldr	r3, [r2, #0]
 8005088:	68d9      	ldr	r1, [r3, #12]
 800508a:	4788      	blx	r1
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800508c:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 800508e:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8005090:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8005092:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8005094:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8005096:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8005098:	bd38      	pop	{r3, r4, r5, pc}
 800509a:	bf00      	nop
 800509c:	2000160c 	.word	0x2000160c
 80050a0:	20001634 	.word	0x20001634
 80050a4:	20001630 	.word	0x20001630

080050a8 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 80050a8:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 80050aa:	4b35      	ldr	r3, [pc, #212]	; (8005180 <Standard_ClearFeature+0xd8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80050b0:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80050b4:	d003      	beq.n	80050be <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80050b6:	2802      	cmp	r0, #2
 80050b8:	d006      	beq.n	80050c8 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 80050ba:	2002      	movs	r0, #2
}
 80050bc:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 80050be:	7a59      	ldrb	r1, [r3, #9]
 80050c0:	f021 0220 	bic.w	r2, r1, #32
 80050c4:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80050c8:	885a      	ldrh	r2, [r3, #2]
 80050ca:	2a00      	cmp	r2, #0
 80050cc:	d1f6      	bne.n	80050bc <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 80050ce:	7919      	ldrb	r1, [r3, #4]
 80050d0:	2900      	cmp	r1, #0
 80050d2:	d1f3      	bne.n	80050bc <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 80050d4:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 80050d6:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80050da:	0081      	lsls	r1, r0, #2
 80050dc:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80050e0:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80050e2:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80050e6:	bf56      	itet	pl
 80050e8:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80050ea:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80050ec:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80050f0:	4c24      	ldr	r4, [pc, #144]	; (8005184 <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80050f2:	bf48      	it	mi
 80050f4:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80050f8:	7824      	ldrb	r4, [r4, #0]
 80050fa:	42a0      	cmp	r0, r4
 80050fc:	d2dd      	bcs.n	80050ba <Standard_ClearFeature+0x12>
 80050fe:	2d00      	cmp	r5, #0
 8005100:	d0db      	beq.n	80050ba <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8005102:	7a9b      	ldrb	r3, [r3, #10]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0d8      	beq.n	80050ba <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8005108:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800510c:	b2d3      	uxtb	r3, r2
 800510e:	b173      	cbz	r3, 800512e <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8005110:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005114:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 8005118:	6813      	ldr	r3, [r2, #0]
 800511a:	f003 0130 	and.w	r1, r3, #48	; 0x30
 800511e:	2910      	cmp	r1, #16
 8005120:	d021      	beq.n	8005166 <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8005122:	4819      	ldr	r0, [pc, #100]	; (8005188 <Standard_ClearFeature+0xe0>)
 8005124:	6801      	ldr	r1, [r0, #0]
 8005126:	694a      	ldr	r2, [r1, #20]
 8005128:	4790      	blx	r2
    return USB_SUCCESS;
 800512a:	2000      	movs	r0, #0
 800512c:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800512e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005132:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 8005136:	6822      	ldr	r2, [r4, #0]
 8005138:	f402 5340 	and.w	r3, r2, #12288	; 0x3000
 800513c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005140:	d1ef      	bne.n	8005122 <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 8005142:	b9c8      	cbnz	r0, 8005178 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8005144:	4a11      	ldr	r2, [pc, #68]	; (800518c <Standard_ClearFeature+0xe4>)
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <Standard_ClearFeature+0xe8>)
 8005148:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800514c:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800514e:	6820      	ldr	r0, [r4, #0]
 8005150:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 8005154:	4001      	ands	r1, r0
 8005156:	f481 5240 	eor.w	r2, r1, #12288	; 0x3000
 800515a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800515e:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8005162:	6020      	str	r0, [r4, #0]
 8005164:	e7dd      	b.n	8005122 <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 8005166:	b2c4      	uxtb	r4, r0
 8005168:	4620      	mov	r0, r4
 800516a:	4a0a      	ldr	r2, [pc, #40]	; (8005194 <Standard_ClearFeature+0xec>)
 800516c:	4790      	blx	r2
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800516e:	4620      	mov	r0, r4
 8005170:	2130      	movs	r1, #48	; 0x30
 8005172:	4b09      	ldr	r3, [pc, #36]	; (8005198 <Standard_ClearFeature+0xf0>)
 8005174:	4798      	blx	r3
 8005176:	e7d4      	b.n	8005122 <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8005178:	4908      	ldr	r1, [pc, #32]	; (800519c <Standard_ClearFeature+0xf4>)
 800517a:	4788      	blx	r1
 800517c:	e7e7      	b.n	800514e <Standard_ClearFeature+0xa6>
 800517e:	bf00      	nop
 8005180:	20001634 	.word	0x20001634
 8005184:	20000308 	.word	0x20000308
 8005188:	20001630 	.word	0x20001630
 800518c:	20000284 	.word	0x20000284
 8005190:	08005b41 	.word	0x08005b41
 8005194:	08005a71 	.word	0x08005a71
 8005198:	08005965 	.word	0x08005965
 800519c:	08005a4d 	.word	0x08005a4d

080051a0 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 80051a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 80051a2:	4b22      	ldr	r3, [pc, #136]	; (800522c <Standard_SetEndPointFeature+0x8c>)
 80051a4:	6819      	ldr	r1, [r3, #0]
 80051a6:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 80051a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80051ac:	0090      	lsls	r0, r2, #2
 80051ae:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80051b2:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80051b4:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80051b8:	bf56      	itet	pl
 80051ba:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80051bc:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80051be:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80051c2:	4c1b      	ldr	r4, [pc, #108]	; (8005230 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80051c4:	bf48      	it	mi
 80051c6:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80051ca:	7824      	ldrb	r4, [r4, #0]
 80051cc:	42a2      	cmp	r2, r4
 80051ce:	d301      	bcc.n	80051d4 <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 80051d0:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 80051d4:	884a      	ldrh	r2, [r1, #2]
 80051d6:	2a00      	cmp	r2, #0
 80051d8:	d1fa      	bne.n	80051d0 <Standard_SetEndPointFeature+0x30>
 80051da:	2d00      	cmp	r5, #0
 80051dc:	d0f8      	beq.n	80051d0 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 80051de:	7a89      	ldrb	r1, [r1, #10]
 80051e0:	2900      	cmp	r1, #0
 80051e2:	d0f5      	beq.n	80051d0 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80051e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80051e8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80051ec:	f500 42b8 	add.w	r2, r0, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80051f0:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80051f2:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80051f4:	b17b      	cbz	r3, 8005216 <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80051f6:	f648 70bf 	movw	r0, #36799	; 0x8fbf
 80051fa:	4008      	ands	r0, r1
 80051fc:	f080 0110 	eor.w	r1, r0, #16
 8005200:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8005204:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8005208:	6010      	str	r0, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 800520a:	4a0a      	ldr	r2, [pc, #40]	; (8005234 <Standard_SetEndPointFeature+0x94>)
 800520c:	6811      	ldr	r1, [r2, #0]
 800520e:	698b      	ldr	r3, [r1, #24]
 8005210:	4798      	blx	r3
  return USB_SUCCESS;
 8005212:	2000      	movs	r0, #0
 8005214:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8005216:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800521a:	400b      	ands	r3, r1
 800521c:	f483 5080 	eor.w	r0, r3, #4096	; 0x1000
 8005220:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 8005224:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	e7ee      	b.n	800520a <Standard_SetEndPointFeature+0x6a>
 800522c:	20001634 	.word	0x20001634
 8005230:	20000308 	.word	0x20000308
 8005234:	20001630 	.word	0x20001630

08005238 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <Standard_GetDescriptorData+0x18>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 800523e:	b110      	cbz	r0, 8005246 <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8005240:	6808      	ldr	r0, [r1, #0]
 8005242:	1880      	adds	r0, r0, r2
}
 8005244:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8005246:	8889      	ldrh	r1, [r1, #4]
 8005248:	1a8a      	subs	r2, r1, r2
 800524a:	821a      	strh	r2, [r3, #16]
    return 0;
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20001634 	.word	0x20001634

08005254 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8005254:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8005256:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <Post0_Process+0x34>)
 8005258:	2000      	movs	r0, #0
 800525a:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800525e:	4a0b      	ldr	r2, [pc, #44]	; (800528c <Post0_Process+0x38>)
 8005260:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 8005262:	480b      	ldr	r0, [pc, #44]	; (8005290 <Post0_Process+0x3c>)
 8005264:	6801      	ldr	r1, [r0, #0]
 8005266:	7a08      	ldrb	r0, [r1, #8]
 8005268:	2808      	cmp	r0, #8
 800526a:	d106      	bne.n	800527a <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <Post0_Process+0x40>)
 800526e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005272:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8005274:	4a08      	ldr	r2, [pc, #32]	; (8005298 <Post0_Process+0x44>)
 8005276:	2110      	movs	r1, #16
 8005278:	8011      	strh	r1, [r2, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800527a:	f1b0 0c09 	subs.w	ip, r0, #9
 800527e:	f1dc 0000 	rsbs	r0, ip, #0
 8005282:	eb50 000c 	adcs.w	r0, r0, ip
 8005286:	bd08      	pop	{r3, pc}
 8005288:	20000284 	.word	0x20000284
 800528c:	08005b41 	.word	0x08005b41
 8005290:	20001634 	.word	0x20001634
 8005294:	2000163a 	.word	0x2000163a
 8005298:	2000163c 	.word	0x2000163c

0800529c <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800529e:	4d33      	ldr	r5, [pc, #204]	; (800536c <Out0_Process+0xd0>)
 80052a0:	682c      	ldr	r4, [r5, #0]
 80052a2:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d007      	beq.n	80052b8 <Out0_Process+0x1c>
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d005      	beq.n	80052b8 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d008      	beq.n	80052c2 <Out0_Process+0x26>
 80052b0:	2b05      	cmp	r3, #5
 80052b2:	d006      	beq.n	80052c2 <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 80052b4:	2b07      	cmp	r3, #7
 80052b6:	d00d      	beq.n	80052d4 <Out0_Process+0x38>
 80052b8:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80052ba:	7222      	strb	r2, [r4, #8]

  return Post0_Process();
 80052bc:	4b2c      	ldr	r3, [pc, #176]	; (8005370 <Out0_Process+0xd4>)
 80052be:	4798      	blx	r3
 80052c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 80052c2:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 80052c4:	8a20      	ldrh	r0, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 80052c6:	b311      	cbz	r1, 800530e <Out0_Process+0x72>
 80052c8:	b958      	cbnz	r0, 80052e2 <Out0_Process+0x46>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80052ca:	8aa4      	ldrh	r4, [r4, #20]
 80052cc:	2c00      	cmp	r4, #0
 80052ce:	d045      	beq.n	800535c <Out0_Process+0xc0>
 80052d0:	4a28      	ldr	r2, [pc, #160]	; (8005374 <Out0_Process+0xd8>)
 80052d2:	e02e      	b.n	8005332 <Out0_Process+0x96>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 80052d4:	4828      	ldr	r0, [pc, #160]	; (8005378 <Out0_Process+0xdc>)
 80052d6:	6801      	ldr	r1, [r0, #0]
 80052d8:	68ca      	ldr	r2, [r1, #12]
 80052da:	4790      	blx	r2
 80052dc:	682c      	ldr	r4, [r5, #0]
 80052de:	2208      	movs	r2, #8
 80052e0:	e7eb      	b.n	80052ba <Out0_Process+0x1e>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 80052e2:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80052e4:	4286      	cmp	r6, r0
 80052e6:	bf28      	it	cs
 80052e8:	4606      	movcs	r6, r0
 80052ea:	4630      	mov	r0, r6
 80052ec:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 80052ee:	8a63      	ldrh	r3, [r4, #18]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80052f0:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 80052f2:	8a20      	ldrh	r0, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80052f4:	18f1      	adds	r1, r6, r3
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 80052f6:	1b82      	subs	r2, r0, r6
 80052f8:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80052fa:	8261      	strh	r1, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80052fc:	4b1f      	ldr	r3, [pc, #124]	; (800537c <Out0_Process+0xe0>)
 80052fe:	2000      	movs	r0, #0
 8005300:	4798      	blx	r3
 8005302:	4632      	mov	r2, r6
 8005304:	4601      	mov	r1, r0
 8005306:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <Out0_Process+0xe4>)
 8005308:	4638      	mov	r0, r7
 800530a:	4798      	blx	r3
 800530c:	8a20      	ldrh	r0, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 800530e:	2800      	cmp	r0, #0
 8005310:	d0db      	beq.n	80052ca <Out0_Process+0x2e>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8005312:	4b1c      	ldr	r3, [pc, #112]	; (8005384 <Out0_Process+0xe8>)
    SetEPTxCount(ENDP0, 0);
 8005314:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8005316:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 800531a:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800531c:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800531e:	4a1a      	ldr	r2, [pc, #104]	; (8005388 <Out0_Process+0xec>)
 8005320:	4790      	blx	r2
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8005322:	8a23      	ldrh	r3, [r4, #16]
 8005324:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8005326:	4a13      	ldr	r2, [pc, #76]	; (8005374 <Out0_Process+0xd8>)
 8005328:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800532a:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800532c:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800532e:	d915      	bls.n	800535c <Out0_Process+0xc0>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8005330:	b9c3      	cbnz	r3, 8005364 <Out0_Process+0xc8>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8005332:	682c      	ldr	r4, [r5, #0]
 8005334:	2106      	movs	r1, #6
      USB_StatusIn();
 8005336:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800533a:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 800533c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8005346:	b281      	uxth	r1, r0
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8005348:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800534c:	18c8      	adds	r0, r1, r3
 800534e:	0043      	lsls	r3, r0, #1
 8005350:	2100      	movs	r1, #0
 8005352:	6019      	str	r1, [r3, #0]
 8005354:	2030      	movs	r0, #48	; 0x30
 8005356:	8010      	strh	r0, [r2, #0]
 8005358:	7a22      	ldrb	r2, [r4, #8]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800535a:	e7ae      	b.n	80052ba <Out0_Process+0x1e>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 800535c:	682c      	ldr	r4, [r5, #0]
 800535e:	2203      	movs	r2, #3
 8005360:	7222      	strb	r2, [r4, #8]
 8005362:	e7aa      	b.n	80052ba <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8005364:	682c      	ldr	r4, [r5, #0]
 8005366:	2205      	movs	r2, #5
 8005368:	7222      	strb	r2, [r4, #8]
 800536a:	e7a6      	b.n	80052ba <Out0_Process+0x1e>
 800536c:	20001634 	.word	0x20001634
 8005370:	08005255 	.word	0x08005255
 8005374:	2000163c 	.word	0x2000163c
 8005378:	2000160c 	.word	0x2000160c
 800537c:	08005b01 	.word	0x08005b01
 8005380:	080058e9 	.word	0x080058e9
 8005384:	2000163a 	.word	0x2000163a
 8005388:	08005b21 	.word	0x08005b21

0800538c <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800538c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800538e:	f645 4350 	movw	r3, #23632	; 0x5c50

  if (pInformation->ControlState != PAUSE)
 8005392:	4d9e      	ldr	r5, [pc, #632]	; (800560c <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8005394:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005398:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800539a:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800539c:	f243 0004 	movw	r0, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80053a0:	b291      	uxth	r1, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80053a2:	f2c2 0000 	movt	r0, #8192	; 0x2000

  if (pInformation->ControlState != PAUSE)
 80053a6:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80053a8:	180e      	adds	r6, r1, r0
 80053aa:	0073      	lsls	r3, r6, #1

  if (pInformation->ControlState != PAUSE)
 80053ac:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 80053ae:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80053b0:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 80053b2:	d044      	beq.n	800543e <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80053b4:	b2b7      	uxth	r7, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80053b6:	0078      	lsls	r0, r7, #1
 80053b8:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 80053bc:	f501 46c0 	add.w	r6, r1, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80053c0:	7832      	ldrb	r2, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80053c2:	4f93      	ldr	r7, [pc, #588]	; (8005610 <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80053c4:	7022      	strb	r2, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80053c6:	7873      	ldrb	r3, [r6, #1]
 80053c8:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80053ca:	88b0      	ldrh	r0, [r6, #4]
 80053cc:	47b8      	blx	r7
 80053ce:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 80053d0:	8930      	ldrh	r0, [r6, #8]
 80053d2:	682c      	ldr	r4, [r5, #0]
 80053d4:	47b8      	blx	r7
 80053d6:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80053d8:	89b0      	ldrh	r0, [r6, #12]
 80053da:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 80053dc:	2101      	movs	r1, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80053de:	80e0      	strh	r0, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80053e0:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d030      	beq.n	8005448 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 80053e6:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 80053e8:	2906      	cmp	r1, #6
 80053ea:	f000 8087 	beq.w	80054fc <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80053ee:	2900      	cmp	r1, #0
 80053f0:	d15e      	bne.n	80054b0 <Setup0_Process+0x124>
 80053f2:	8863      	ldrh	r3, [r4, #2]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8094 	beq.w	8005522 <Setup0_Process+0x196>
 80053fa:	4e86      	ldr	r6, [pc, #536]	; (8005614 <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80053fc:	6833      	ldr	r3, [r6, #0]
 80053fe:	4608      	mov	r0, r1
 8005400:	6919      	ldr	r1, [r3, #16]
 8005402:	4788      	blx	r1
    if (Result == USB_NOT_READY)
 8005404:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 8005406:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 8005408:	d062      	beq.n	80054d0 <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800540a:	8a1a      	ldrh	r2, [r3, #16]
 800540c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005410:	428a      	cmp	r2, r1
 8005412:	d05d      	beq.n	80054d0 <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8005414:	2802      	cmp	r0, #2
 8005416:	d00c      	beq.n	8005432 <Setup0_Process+0xa6>
 8005418:	b15a      	cbz	r2, 8005432 <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 800541a:	f993 1000 	ldrsb.w	r1, [r3]
 800541e:	2900      	cmp	r1, #0
 8005420:	f2c0 80b5 	blt.w	800558e <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8005424:	2203      	movs	r2, #3
 8005426:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8005428:	4b7b      	ldr	r3, [pc, #492]	; (8005618 <Setup0_Process+0x28c>)
 800542a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800542e:	8018      	strh	r0, [r3, #0]
 8005430:	e001      	b.n	8005436 <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8005432:	2008      	movs	r0, #8
 8005434:	7218      	strb	r0, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8005436:	4b79      	ldr	r3, [pc, #484]	; (800561c <Setup0_Process+0x290>)
 8005438:	4798      	blx	r3
}
 800543a:	b003      	add	sp, #12
 800543c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800543e:	88e0      	ldrh	r0, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8005440:	2101      	movs	r1, #1
 8005442:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 8005444:	2800      	cmp	r0, #0
 8005446:	d1ce      	bne.n	80053e6 <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005448:	7822      	ldrb	r2, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 800544a:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800544c:	f012 037f 	ands.w	r3, r2, #127	; 0x7f
 8005450:	d141      	bne.n	80054d6 <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8005452:	2e09      	cmp	r6, #9
 8005454:	f000 8108 	beq.w	8005668 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8005458:	2e05      	cmp	r6, #5
 800545a:	f000 80bf 	beq.w	80055dc <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800545e:	2e03      	cmp	r6, #3
 8005460:	f000 80f0 	beq.w	8005644 <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8005464:	2e01      	cmp	r6, #1
 8005466:	d13b      	bne.n	80054e0 <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8005468:	78e1      	ldrb	r1, [r4, #3]
 800546a:	2901      	cmp	r1, #1
 800546c:	d138      	bne.n	80054e0 <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 800546e:	88a2      	ldrh	r2, [r4, #4]
 8005470:	2a00      	cmp	r2, #0
 8005472:	d135      	bne.n	80054e0 <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 8005474:	7a63      	ldrb	r3, [r4, #9]
 8005476:	f003 0420 	and.w	r4, r3, #32
 800547a:	b2e0      	uxtb	r0, r4
 800547c:	2800      	cmp	r0, #0
 800547e:	d02f      	beq.n	80054e0 <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8005480:	4967      	ldr	r1, [pc, #412]	; (8005620 <Setup0_Process+0x294>)
 8005482:	4788      	blx	r1
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8005484:	bb60      	cbnz	r0, 80054e0 <Setup0_Process+0x154>
 8005486:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8005488:	f645 4050 	movw	r0, #23632	; 0x5c50
 800548c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005490:	6801      	ldr	r1, [r0, #0]
 8005492:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8005496:	b28a      	uxth	r2, r1
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8005498:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800549c:	18d0      	adds	r0, r2, r3
 800549e:	0041      	lsls	r1, r0, #1
 80054a0:	2300      	movs	r3, #0
 80054a2:	4a60      	ldr	r2, [pc, #384]	; (8005624 <Setup0_Process+0x298>)
 80054a4:	600b      	str	r3, [r1, #0]
 80054a6:	2030      	movs	r0, #48	; 0x30
 80054a8:	2106      	movs	r1, #6
 80054aa:	8010      	strh	r0, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80054ac:	7221      	strb	r1, [r4, #8]
 80054ae:	e7c2      	b.n	8005436 <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 80054b0:	2908      	cmp	r1, #8
 80054b2:	d148      	bne.n	8005546 <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80054b4:	7820      	ldrb	r0, [r4, #0]
 80054b6:	0643      	lsls	r3, r0, #25
 80054b8:	d19f      	bne.n	80053fa <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 80054ba:	4a5b      	ldr	r2, [pc, #364]	; (8005628 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80054bc:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80054be:	61a2      	str	r2, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80054c0:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 80054c2:	4790      	blx	r2
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80054ca:	8a1a      	ldrh	r2, [r3, #16]
 80054cc:	4282      	cmp	r2, r0
 80054ce:	d1a3      	bne.n	8005418 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 80054d0:	2109      	movs	r1, #9
 80054d2:	7219      	strb	r1, [r3, #8]
 80054d4:	e7af      	b.n	8005436 <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d071      	beq.n	80055be <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80054da:	2b02      	cmp	r3, #2
 80054dc:	f000 808d 	beq.w	80055fa <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 80054e0:	494c      	ldr	r1, [pc, #304]	; (8005614 <Setup0_Process+0x288>)
 80054e2:	4630      	mov	r0, r6
 80054e4:	680a      	ldr	r2, [r1, #0]
 80054e6:	6953      	ldr	r3, [r2, #20]
 80054e8:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80054ea:	2803      	cmp	r0, #3
 80054ec:	f000 80c5 	beq.w	800567a <Setup0_Process+0x2ee>
 80054f0:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d0c8      	beq.n	8005488 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 80054f6:	2108      	movs	r1, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80054f8:	7221      	strb	r1, [r4, #8]
 80054fa:	e79c      	b.n	8005436 <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80054fc:	7826      	ldrb	r6, [r4, #0]
 80054fe:	0673      	lsls	r3, r6, #25
 8005500:	f47f af7b 	bne.w	80053fa <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8005504:	78a2      	ldrb	r2, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8005506:	4e43      	ldr	r6, [pc, #268]	; (8005614 <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 8005508:	2a01      	cmp	r2, #1
 800550a:	f000 80b0 	beq.w	800566e <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800550e:	2a02      	cmp	r2, #2
 8005510:	d05e      	beq.n	80055d0 <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8005512:	2a03      	cmp	r2, #3
 8005514:	f47f af72 	bne.w	80053fc <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8005518:	6830      	ldr	r0, [r6, #0]
 800551a:	6a42      	ldr	r2, [r0, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800551c:	2a00      	cmp	r2, #0
 800551e:	d1cd      	bne.n	80054bc <Setup0_Process+0x130>
 8005520:	e76c      	b.n	80053fc <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8005522:	6860      	ldr	r0, [r4, #4]
 8005524:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8005528:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800552c:	f47f af65 	bne.w	80053fa <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005530:	7823      	ldrb	r3, [r4, #0]
 8005532:	f013 007f 	ands.w	r0, r3, #127	; 0x7f
 8005536:	f040 80a4 	bne.w	8005682 <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 800553a:	88a3      	ldrh	r3, [r4, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f47f af5c 	bne.w	80053fa <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8005542:	4a3a      	ldr	r2, [pc, #232]	; (800562c <Setup0_Process+0x2a0>)
 8005544:	e7ba      	b.n	80054bc <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8005546:	290a      	cmp	r1, #10
 8005548:	f47f af57 	bne.w	80053fa <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800554c:	7826      	ldrb	r6, [r4, #0]
 800554e:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8005552:	2a01      	cmp	r2, #1
 8005554:	f47f af51 	bne.w	80053fa <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8005558:	7aa3      	ldrb	r3, [r4, #10]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f43f af4d 	beq.w	80053fa <Setup0_Process+0x6e>
 8005560:	8863      	ldrh	r3, [r4, #2]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f47f af49 	bne.w	80053fa <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8005568:	6860      	ldr	r0, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800556a:	4e2a      	ldr	r6, [pc, #168]	; (8005614 <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800556c:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8005570:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005574:	f47f af42 	bne.w	80053fc <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8005578:	6832      	ldr	r2, [r6, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	7960      	ldrb	r0, [r4, #5]
 800557e:	6993      	ldr	r3, [r2, #24]
 8005580:	4798      	blx	r3
 8005582:	2800      	cmp	r0, #0
 8005584:	f040 80b8 	bne.w	80056f8 <Setup0_Process+0x36c>
 8005588:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 800558a:	4a29      	ldr	r2, [pc, #164]	; (8005630 <Setup0_Process+0x2a4>)
 800558c:	e796      	b.n	80054bc <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 800558e:	88d9      	ldrh	r1, [r3, #6]
 8005590:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8005592:	9801      	ldr	r0, [sp, #4]
 8005594:	4282      	cmp	r2, r0
 8005596:	d817      	bhi.n	80055c8 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8005598:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800559a:	491e      	ldr	r1, [pc, #120]	; (8005614 <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800559c:	d208      	bcs.n	80055b0 <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800559e:	6808      	ldr	r0, [r1, #0]
 80055a0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80055a4:	4282      	cmp	r2, r0
 80055a6:	f080 808f 	bcs.w	80056c8 <Setup0_Process+0x33c>
      {
        Data_Mul_MaxPacketSize = FALSE;
 80055aa:	4a22      	ldr	r2, [pc, #136]	; (8005634 <Setup0_Process+0x2a8>)
 80055ac:	2000      	movs	r0, #0
 80055ae:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 80055b0:	6809      	ldr	r1, [r1, #0]
 80055b2:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 80055b6:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 80055b8:	4b1f      	ldr	r3, [pc, #124]	; (8005638 <Setup0_Process+0x2ac>)
 80055ba:	4798      	blx	r3
 80055bc:	e73b      	b.n	8005436 <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 80055be:	2e0b      	cmp	r6, #11
 80055c0:	d18e      	bne.n	80054e0 <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 80055c2:	481e      	ldr	r0, [pc, #120]	; (800563c <Setup0_Process+0x2b0>)
 80055c4:	4780      	blx	r0
 80055c6:	e75d      	b.n	8005484 <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 80055c8:	9801      	ldr	r0, [sp, #4]
 80055ca:	4912      	ldr	r1, [pc, #72]	; (8005614 <Setup0_Process+0x288>)
 80055cc:	8218      	strh	r0, [r3, #16]
 80055ce:	e7ef      	b.n	80055b0 <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 80055d0:	6833      	ldr	r3, [r6, #0]
 80055d2:	6a1a      	ldr	r2, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 80055d4:	2a00      	cmp	r2, #0
 80055d6:	f47f af71 	bne.w	80054bc <Setup0_Process+0x130>
 80055da:	e70f      	b.n	80053fc <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80055dc:	f994 0003 	ldrsb.w	r0, [r4, #3]
 80055e0:	2800      	cmp	r0, #0
 80055e2:	db88      	blt.n	80054f6 <Setup0_Process+0x16a>
 80055e4:	78a1      	ldrb	r1, [r4, #2]
 80055e6:	2900      	cmp	r1, #0
 80055e8:	d185      	bne.n	80054f6 <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 80055ea:	88a2      	ldrh	r2, [r4, #4]
 80055ec:	2a00      	cmp	r2, #0
 80055ee:	d182      	bne.n	80054f6 <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 80055f0:	7aa3      	ldrb	r3, [r4, #10]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f43f af48 	beq.w	8005488 <Setup0_Process+0xfc>
 80055f8:	e77d      	b.n	80054f6 <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 80055fa:	2e01      	cmp	r6, #1
 80055fc:	f43f af40 	beq.w	8005480 <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8005600:	2e03      	cmp	r6, #3
 8005602:	f47f af6d 	bne.w	80054e0 <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 8005606:	4c0e      	ldr	r4, [pc, #56]	; (8005640 <Setup0_Process+0x2b4>)
 8005608:	47a0      	blx	r4
 800560a:	e73b      	b.n	8005484 <Setup0_Process+0xf8>
 800560c:	20001634 	.word	0x20001634
 8005610:	08005ba9 	.word	0x08005ba9
 8005614:	2000160c 	.word	0x2000160c
 8005618:	2000163a 	.word	0x2000163a
 800561c:	08005255 	.word	0x08005255
 8005620:	080050a9 	.word	0x080050a9
 8005624:	2000163c 	.word	0x2000163c
 8005628:	08004e6d 	.word	0x08004e6d
 800562c:	08004ebd 	.word	0x08004ebd
 8005630:	08004e95 	.word	0x08004e95
 8005634:	200004bc 	.word	0x200004bc
 8005638:	08004f5d 	.word	0x08004f5d
 800563c:	08005059 	.word	0x08005059
 8005640:	080051a1 	.word	0x080051a1
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8005644:	78e2      	ldrb	r2, [r4, #3]
 8005646:	2a01      	cmp	r2, #1
 8005648:	f47f af4a 	bne.w	80054e0 <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 800564c:	88a3      	ldrh	r3, [r4, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f47f af46 	bne.w	80054e0 <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8005654:	7a60      	ldrb	r0, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8005656:	4a2a      	ldr	r2, [pc, #168]	; (8005700 <Setup0_Process+0x374>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8005658:	f040 0120 	orr.w	r1, r0, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 800565c:	6813      	ldr	r3, [r2, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 800565e:	7261      	strb	r1, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8005660:	69dc      	ldr	r4, [r3, #28]
 8005662:	47a0      	blx	r4
 8005664:	682c      	ldr	r4, [r5, #0]
 8005666:	e70f      	b.n	8005488 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8005668:	4c26      	ldr	r4, [pc, #152]	; (8005704 <Setup0_Process+0x378>)
 800566a:	47a0      	blx	r4
 800566c:	e70a      	b.n	8005484 <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800566e:	6832      	ldr	r2, [r6, #0]
 8005670:	69d2      	ldr	r2, [r2, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8005672:	2a00      	cmp	r2, #0
 8005674:	f47f af22 	bne.w	80054bc <Setup0_Process+0x130>
 8005678:	e6c0      	b.n	80053fc <Setup0_Process+0x70>
 800567a:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 800567c:	2109      	movs	r1, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800567e:	7221      	strb	r1, [r4, #8]
 8005680:	e6d9      	b.n	8005436 <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8005682:	2801      	cmp	r0, #1
 8005684:	d02b      	beq.n	80056de <Setup0_Process+0x352>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8005686:	2802      	cmp	r0, #2
 8005688:	f47f aeb7 	bne.w	80053fa <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800568c:	7963      	ldrb	r3, [r4, #5]
 800568e:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8005692:	0096      	lsls	r6, r2, #2
 8005694:	f106 4080 	add.w	r0, r6, #1073741824	; 0x40000000
 8005698:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 800569c:	061e      	lsls	r6, r3, #24
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800569e:	bf56      	itet	pl
 80056a0:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 80056a2:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 80056a4:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80056a8:	4817      	ldr	r0, [pc, #92]	; (8005708 <Setup0_Process+0x37c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 80056aa:	bf48      	it	mi
 80056ac:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80056b0:	7800      	ldrb	r0, [r0, #0]
 80056b2:	4282      	cmp	r2, r0
 80056b4:	f4bf aea1 	bcs.w	80053fa <Setup0_Process+0x6e>
 80056b8:	f013 0f70 	tst.w	r3, #112	; 0x70
 80056bc:	f47f ae9d 	bne.w	80053fa <Setup0_Process+0x6e>
          && (Status != 0))
 80056c0:	2e00      	cmp	r6, #0
 80056c2:	f47f af3e 	bne.w	8005542 <Setup0_Process+0x1b6>
 80056c6:	e698      	b.n	80053fa <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 80056c8:	fb92 f4f0 	sdiv	r4, r2, r0
 80056cc:	fb00 2214 	mls	r2, r0, r4, r2
 80056d0:	2a00      	cmp	r2, #0
 80056d2:	f47f af6d 	bne.w	80055b0 <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 80056d6:	4a0d      	ldr	r2, [pc, #52]	; (800570c <Setup0_Process+0x380>)
 80056d8:	2001      	movs	r0, #1
 80056da:	7010      	strb	r0, [r2, #0]
 80056dc:	e768      	b.n	80055b0 <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 80056de:	4e0c      	ldr	r6, [pc, #48]	; (8005710 <Setup0_Process+0x384>)
 80056e0:	7960      	ldrb	r0, [r4, #5]
 80056e2:	6833      	ldr	r3, [r6, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	4790      	blx	r2
 80056e8:	b930      	cbnz	r0, 80056f8 <Setup0_Process+0x36c>
          && (pInformation->Current_Configuration != 0))
 80056ea:	682c      	ldr	r4, [r5, #0]
 80056ec:	7aa0      	ldrb	r0, [r4, #10]
 80056ee:	2800      	cmp	r0, #0
 80056f0:	f47f af27 	bne.w	8005542 <Setup0_Process+0x1b6>
 80056f4:	7861      	ldrb	r1, [r4, #1]
 80056f6:	e681      	b.n	80053fc <Setup0_Process+0x70>
 80056f8:	6829      	ldr	r1, [r5, #0]
 80056fa:	7849      	ldrb	r1, [r1, #1]
 80056fc:	e67e      	b.n	80053fc <Setup0_Process+0x70>
 80056fe:	bf00      	nop
 8005700:	20001630 	.word	0x20001630
 8005704:	0800501d 	.word	0x0800501d
 8005708:	20000308 	.word	0x20000308
 800570c:	200004bc 	.word	0x200004bc
 8005710:	2000160c 	.word	0x2000160c

08005714 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8005714:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8005716:	4b28      	ldr	r3, [pc, #160]	; (80057b8 <SetDeviceAddress+0xa4>)
 8005718:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800571a:	2e00      	cmp	r6, #0
 800571c:	d043      	beq.n	80057a6 <SetDeviceAddress+0x92>
 800571e:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8005722:	f2c4 0200 	movt	r2, #16384	; 0x4000
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005726:	6814      	ldr	r4, [r2, #0]
 8005728:	f640 710f 	movw	r1, #3855	; 0xf0f
 800572c:	4021      	ands	r1, r4
 800572e:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8005732:	f043 0180 	orr.w	r1, r3, #128	; 0x80
 8005736:	6011      	str	r1, [r2, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005738:	2201      	movs	r2, #1
 800573a:	1e74      	subs	r4, r6, #1
 800573c:	f645 4304 	movw	r3, #23556	; 0x5c04
 8005740:	4296      	cmp	r6, r2
 8005742:	f004 0401 	and.w	r4, r4, #1
 8005746:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800574a:	d92c      	bls.n	80057a6 <SetDeviceAddress+0x92>
 800574c:	b17c      	cbz	r4, 800576e <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800574e:	6819      	ldr	r1, [r3, #0]
 8005750:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005754:	400a      	ands	r2, r1
 8005756:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 800575a:	f041 0281 	orr.w	r2, r1, #129	; 0x81
 800575e:	601a      	str	r2, [r3, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005760:	2202      	movs	r2, #2
 8005762:	f645 4308 	movw	r3, #23560	; 0x5c08
 8005766:	4296      	cmp	r6, r2
 8005768:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800576c:	d91b      	bls.n	80057a6 <SetDeviceAddress+0x92>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800576e:	681f      	ldr	r7, [r3, #0]
 8005770:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8005774:	f640 740f 	movw	r4, #3855	; 0xf0f
 8005778:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800577c:	403c      	ands	r4, r7
 800577e:	ea45 0704 	orr.w	r7, r5, r4
 8005782:	4619      	mov	r1, r3
 8005784:	f841 7b04 	str.w	r7, [r1], #4
 8005788:	685f      	ldr	r7, [r3, #4]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800578a:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800578c:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8005790:	f640 740f 	movw	r4, #3855	; 0xf0f
 8005794:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005798:	403c      	ands	r4, r7
 800579a:	432c      	orrs	r4, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800579c:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800579e:	605c      	str	r4, [r3, #4]
 80057a0:	1d0b      	adds	r3, r1, #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80057a2:	4296      	cmp	r6, r2
 80057a4:	d8e3      	bhi.n	800576e <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 80057a6:	f645 434c 	movw	r3, #23628	; 0x5c4c
 80057aa:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80057ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80057b2:	6018      	str	r0, [r3, #0]
}
 80057b4:	bcf0      	pop	{r4, r5, r6, r7}
 80057b6:	4770      	bx	lr
 80057b8:	20000308 	.word	0x20000308

080057bc <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 80057bc:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 80057be:	4c14      	ldr	r4, [pc, #80]	; (8005810 <In0_Process+0x54>)
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80057c4:	2a02      	cmp	r2, #2
 80057c6:	d012      	beq.n	80057ee <In0_Process+0x32>
 80057c8:	2a04      	cmp	r2, #4
 80057ca:	d010      	beq.n	80057ee <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 80057cc:	2a06      	cmp	r2, #6
 80057ce:	d004      	beq.n	80057da <In0_Process+0x1e>
 80057d0:	2008      	movs	r0, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80057d2:	7218      	strb	r0, [r3, #8]

  return Post0_Process();
 80057d4:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <In0_Process+0x58>)
 80057d6:	4798      	blx	r3
}
 80057d8:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80057da:	7859      	ldrb	r1, [r3, #1]
 80057dc:	2905      	cmp	r1, #5
 80057de:	d00b      	beq.n	80057f8 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 80057e0:	4b0d      	ldr	r3, [pc, #52]	; (8005818 <In0_Process+0x5c>)
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	6881      	ldr	r1, [r0, #8]
 80057e6:	4788      	blx	r1
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	2008      	movs	r0, #8
 80057ec:	e7f1      	b.n	80057d2 <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 80057ee:	4a0b      	ldr	r2, [pc, #44]	; (800581c <In0_Process+0x60>)
 80057f0:	4790      	blx	r2
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	7a18      	ldrb	r0, [r3, #8]
 80057f6:	e7ec      	b.n	80057d2 <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 80057f8:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80057fa:	0652      	lsls	r2, r2, #25
 80057fc:	d1f0      	bne.n	80057e0 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 80057fe:	78d8      	ldrb	r0, [r3, #3]
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <In0_Process+0x64>)
 8005802:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8005804:	4807      	ldr	r0, [pc, #28]	; (8005824 <In0_Process+0x68>)
 8005806:	6801      	ldr	r1, [r0, #0]
 8005808:	6a0a      	ldr	r2, [r1, #32]
 800580a:	4790      	blx	r2
 800580c:	e7e8      	b.n	80057e0 <In0_Process+0x24>
 800580e:	bf00      	nop
 8005810:	20001634 	.word	0x20001634
 8005814:	08005255 	.word	0x08005255
 8005818:	2000160c 	.word	0x2000160c
 800581c:	08004f5d 	.word	0x08004f5d
 8005820:	08005715 	.word	0x08005715
 8005824:	20001630 	.word	0x20001630

08005828 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop

0800582c <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800582c:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 800582e:	f241 6214 	movw	r2, #5652	; 0x1614
 8005832:	f241 6434 	movw	r4, #5684	; 0x1634
 8005836:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800583a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800583e:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 8005840:	2402      	movs	r4, #2
 8005842:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 8005844:	f241 600c 	movw	r0, #5644	; 0x160c
 8005848:	f240 2384 	movw	r3, #644	; 0x284
  pUser_Standard_Requests = &User_Standard_Requests;
 800584c:	f241 6130 	movw	r1, #5680	; 0x1630
 8005850:	f240 22b4 	movw	r2, #692	; 0x2b4
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8005854:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005858:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 800585c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005860:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8005864:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8005866:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	4780      	blx	r0
 800586c:	bd10      	pop	{r4, pc}
 800586e:	bf00      	nop

08005870 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8005870:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8005874:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8005878:	1c53      	adds	r3, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800587a:	004a      	lsls	r2, r1, #1
  for (i = n; i != 0; i--)
 800587c:	1059      	asrs	r1, r3, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800587e:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005880:	d02f      	beq.n	80058e2 <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005882:	7845      	ldrb	r5, [r0, #1]
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8005884:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005886:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 800588a:	3901      	subs	r1, #1
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800588c:	ea44 2305 	orr.w	r3, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8005890:	f822 3b04 	strh.w	r3, [r2], #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005894:	460b      	mov	r3, r1
 8005896:	3204      	adds	r2, #4
 8005898:	f001 0101 	and.w	r1, r1, #1
 800589c:	3002      	adds	r0, #2
 800589e:	b303      	cbz	r3, 80058e2 <UserToPMABufferCopy+0x72>
 80058a0:	b159      	cbz	r1, 80058ba <UserToPMABufferCopy+0x4a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80058a2:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80058a6:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 80058aa:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80058ac:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 80058b0:	f822 1c04 	strh.w	r1, [r2, #-4]
 80058b4:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80058b6:	3b01      	subs	r3, #1
 80058b8:	d013      	beq.n	80058e2 <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80058ba:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80058be:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 80058c2:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    *pdwVal++ = temp2;
 80058c6:	f822 4c04 	strh.w	r4, [r2, #-4]
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80058ca:	7844      	ldrb	r4, [r0, #1]
 80058cc:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80058ce:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 80058d2:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80058d4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 80058d8:	f822 1b04 	strh.w	r1, [r2], #4
 80058dc:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80058de:	3b02      	subs	r3, #2
 80058e0:	d1eb      	bne.n	80058ba <UserToPMABufferCopy+0x4a>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 80058e2:	bc30      	pop	{r4, r5}
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop

080058e8 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80058e8:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 80058ec:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 80058f0:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80058f2:	0059      	lsls	r1, r3, #1
  for (i = n; i != 0; i--)
 80058f4:	1052      	asrs	r2, r2, #1
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058f6:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80058f8:	d01c      	beq.n	8005934 <PMAToUserBufferCopy+0x4c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80058fa:	680b      	ldr	r3, [r1, #0]
 80058fc:	3a01      	subs	r2, #1
 80058fe:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005902:	4613      	mov	r3, r2
 8005904:	3002      	adds	r0, #2
 8005906:	f002 0201 	and.w	r2, r2, #1
 800590a:	b19b      	cbz	r3, 8005934 <PMAToUserBufferCopy+0x4c>
 800590c:	b132      	cbz	r2, 800591c <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800590e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8005912:	f820 2c02 	strh.w	r2, [r0, #-2]
 8005916:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005918:	3b01      	subs	r3, #1
 800591a:	d00b      	beq.n	8005934 <PMAToUserBufferCopy+0x4c>
 800591c:	1d0c      	adds	r4, r1, #4
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800591e:	684d      	ldr	r5, [r1, #4]
 8005920:	6889      	ldr	r1, [r1, #8]
 8005922:	4602      	mov	r2, r0
 8005924:	f820 5c02 	strh.w	r5, [r0, #-2]
 8005928:	f822 1b02 	strh.w	r1, [r2], #2
 800592c:	1c90      	adds	r0, r2, #2
 800592e:	1d21      	adds	r1, r4, #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005930:	3b02      	subs	r3, #2
 8005932:	d1f3      	bne.n	800591c <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8005934:	bc30      	pop	{r4, r5}
 8005936:	4770      	bx	lr

08005938 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8005938:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800593c:	f645 4250 	movw	r2, #23632	; 0x5c50
 8005940:	4003      	ands	r3, r0
 8005942:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop

0800594c <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800594c:	0080      	lsls	r0, r0, #2
 800594e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005952:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8005956:	6810      	ldr	r0, [r2, #0]
 8005958:	f648 138f 	movw	r3, #35215	; 0x898f
 800595c:	4003      	ands	r3, r0
 800595e:	4319      	orrs	r1, r3
 8005960:	6011      	str	r1, [r2, #0]
 8005962:	4770      	bx	lr

08005964 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8005964:	0080      	lsls	r0, r0, #2
 8005966:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800596a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 800596e:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8005970:	f001 0010 	and.w	r0, r1, #16
 8005974:	6814      	ldr	r4, [r2, #0]
 8005976:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800597a:	b280      	uxth	r0, r0
 800597c:	4023      	ands	r3, r4
 800597e:	b968      	cbnz	r0, 800599c <SetEPTxStatus+0x38>
 8005980:	b29b      	uxth	r3, r3
 8005982:	f001 0120 	and.w	r1, r1, #32
 8005986:	b288      	uxth	r0, r1
 8005988:	b108      	cbz	r0, 800598e <SetEPTxStatus+0x2a>
 800598a:	f083 0320 	eor.w	r3, r3, #32
 800598e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8005992:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8005996:	6010      	str	r0, [r2, #0]
}
 8005998:	bc10      	pop	{r4}
 800599a:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800599c:	f083 0310 	eor.w	r3, r3, #16
 80059a0:	e7ef      	b.n	8005982 <SetEPTxStatus+0x1e>
 80059a2:	bf00      	nop

080059a4 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 80059a4:	0080      	lsls	r0, r0, #2
 80059a6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80059aa:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 80059ae:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 80059b0:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 80059b4:	6814      	ldr	r4, [r2, #0]
 80059b6:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80059ba:	b280      	uxth	r0, r0
 80059bc:	4023      	ands	r3, r4
 80059be:	b968      	cbnz	r0, 80059dc <SetEPRxStatus+0x38>
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80059c6:	b288      	uxth	r0, r1
 80059c8:	b108      	cbz	r0, 80059ce <SetEPRxStatus+0x2a>
 80059ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059ce:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80059d2:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 80059d6:	6010      	str	r0, [r2, #0]
}
 80059d8:	bc10      	pop	{r4}
 80059da:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 80059dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059e0:	e7ef      	b.n	80059c2 <SetEPRxStatus+0x1e>
 80059e2:	bf00      	nop

080059e4 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 80059e4:	0080      	lsls	r0, r0, #2
 80059e6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80059ea:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 80059ee:	6801      	ldr	r1, [r0, #0]
 80059f0:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 80059f4:	400b      	ands	r3, r1
 80059f6:	f083 0230 	eor.w	r2, r3, #48	; 0x30
 80059fa:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 80059fe:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8005a02:	6003      	str	r3, [r0, #0]
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop

08005a08 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8005a08:	0080      	lsls	r0, r0, #2
 8005a0a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005a0e:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8005a12:	6801      	ldr	r1, [r0, #0]
 8005a14:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8005a18:	400b      	ands	r3, r1
 8005a1a:	f483 5240 	eor.w	r2, r3, #12288	; 0x3000
 8005a1e:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8005a22:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8005a26:	6003      	str	r3, [r0, #0]
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop

08005a2c <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8005a2c:	0080      	lsls	r0, r0, #2
 8005a2e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005a32:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8005a36:	6801      	ldr	r1, [r0, #0]
 8005a38:	f640 630f 	movw	r3, #3599	; 0xe0f
 8005a3c:	400b      	ands	r3, r1
 8005a3e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8005a42:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8005a46:	6001      	str	r1, [r0, #0]
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop

08005a4c <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8005a4c:	0080      	lsls	r0, r0, #2
 8005a4e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8005a52:	f503 40b8 	add.w	r0, r3, #23552	; 0x5c00
 8005a56:	6802      	ldr	r2, [r0, #0]
 8005a58:	0451      	lsls	r1, r2, #17
 8005a5a:	d508      	bpl.n	8005a6e <ClearDTOG_RX+0x22>
 8005a5c:	6801      	ldr	r1, [r0, #0]
 8005a5e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005a62:	400b      	ands	r3, r1
 8005a64:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8005a68:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8005a6c:	6001      	str	r1, [r0, #0]
 8005a6e:	4770      	bx	lr

08005a70 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8005a70:	0080      	lsls	r0, r0, #2
 8005a72:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8005a76:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	0650      	lsls	r0, r2, #25
 8005a7e:	d508      	bpl.n	8005a92 <ClearDTOG_TX+0x22>
 8005a80:	6819      	ldr	r1, [r3, #0]
 8005a82:	f640 700f 	movw	r0, #3855	; 0xf0f
 8005a86:	4008      	ands	r0, r1
 8005a88:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 8005a8c:	f042 01c0 	orr.w	r1, r2, #192	; 0xc0
 8005a90:	6019      	str	r1, [r3, #0]
 8005a92:	4770      	bx	lr

08005a94 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8005a94:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005a98:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005aa2:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8005aa4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005aa8:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8005aac:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 8005ab0:	0042      	lsls	r2, r0, #1
 8005ab2:	400b      	ands	r3, r1
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4770      	bx	lr

08005ab8 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8005ab8:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005abc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005ac6:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8005ac8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ad0:	18c3      	adds	r3, r0, r3
 8005ad2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005ad6:	0058      	lsls	r0, r3, #1
 8005ad8:	400a      	ands	r2, r1
 8005ada:	6002      	str	r2, [r0, #0]
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop

08005ae0 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8005ae0:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005ae4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005ae8:	6819      	ldr	r1, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005aea:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8005aec:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005af0:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8005af4:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 8005af8:	004a      	lsls	r2, r1, #1
}
 8005afa:	8810      	ldrh	r0, [r2, #0]
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop

08005b00 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8005b00:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005b04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	f243 0104 	movw	r1, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005b0e:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8005b10:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005b14:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005b18:	1842      	adds	r2, r0, r1
 8005b1a:	0051      	lsls	r1, r2, #1
}
 8005b1c:	8808      	ldrh	r0, [r1, #0]
 8005b1e:	4770      	bx	lr

08005b20 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8005b20:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005b24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005b2e:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8005b30:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b38:	18c3      	adds	r3, r0, r3
 8005b3a:	005a      	lsls	r2, r3, #1
 8005b3c:	6011      	str	r1, [r2, #0]
 8005b3e:	4770      	bx	lr

08005b40 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8005b40:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005b44:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005b4e:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8005b50:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b58:	18c3      	adds	r3, r0, r3
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	293e      	cmp	r1, #62	; 0x3e
 8005b5e:	d909      	bls.n	8005b74 <SetEPRxCount+0x34>
 8005b60:	094a      	lsrs	r2, r1, #5
 8005b62:	06c9      	lsls	r1, r1, #27
 8005b64:	d101      	bne.n	8005b6a <SetEPRxCount+0x2a>
 8005b66:	1e50      	subs	r0, r2, #1
 8005b68:	b282      	uxth	r2, r0
 8005b6a:	0291      	lsls	r1, r2, #10
 8005b6c:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8005b70:	6018      	str	r0, [r3, #0]
 8005b72:	4770      	bx	lr
 8005b74:	084a      	lsrs	r2, r1, #1
 8005b76:	07c8      	lsls	r0, r1, #31
 8005b78:	bf48      	it	mi
 8005b7a:	3201      	addmi	r2, #1
 8005b7c:	0291      	lsls	r1, r2, #10
 8005b7e:	6019      	str	r1, [r3, #0]
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop

08005b84 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8005b84:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005b88:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	f243 0106 	movw	r1, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005b92:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8005b94:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005b98:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005b9c:	1842      	adds	r2, r0, r1
 8005b9e:	0051      	lsls	r1, r2, #1
 8005ba0:	680b      	ldr	r3, [r1, #0]
}
 8005ba2:	0598      	lsls	r0, r3, #22
 8005ba4:	0d80      	lsrs	r0, r0, #22
 8005ba6:	4770      	bx	lr

08005ba8 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8005ba8:	b2c3      	uxtb	r3, r0
 8005baa:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8005bac:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop

08005bb4 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8005bb4:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8005bb6:	f241 6338 	movw	r3, #5688	; 0x1638
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8005bba:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8005bbe:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8005bc2:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 8005bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8005bd0:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8005bd4:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 8005bd6:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8005bd8:	6011      	str	r1, [r2, #0]
  return 0;
}
 8005bda:	bc10      	pop	{r4}
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop

08005be0 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8005be0:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8005be2:	f645 3385 	movw	r3, #23429	; 0x5b85
 8005be6:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8005bea:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005bee:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8005bf0:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8005bf2:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8005bf4:	f645 3101 	movw	r1, #23297	; 0x5b01
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8005bf8:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8005bfa:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005bfe:	4628      	mov	r0, r5
 8005c00:	4788      	blx	r1
 8005c02:	f645 03e9 	movw	r3, #22761	; 0x58e9
 8005c06:	4601      	mov	r1, r0
 8005c08:	4622      	mov	r2, r4
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005c10:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 8005c12:	4620      	mov	r0, r4
 8005c14:	bd70      	pop	{r4, r5, r6, pc}
 8005c16:	bf00      	nop

08005c18 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8005dcc <CTR_LP+0x1b4>
 8005c20:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8005c22:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8005c26:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8005c28:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8005dd0 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8005c2c:	4d62      	ldr	r5, [pc, #392]	; (8005db8 <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8005c2e:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8005c32:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 8005c36:	46d0      	mov	r8, sl
 8005c38:	f8db 0000 	ldr.w	r0, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8005c3c:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8005c40:	b282      	uxth	r2, r0
 8005c42:	0403      	lsls	r3, r0, #16
 8005c44:	f8aa 2000 	strh.w	r2, [sl]
 8005c48:	f140 80ab 	bpl.w	8005da2 <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8005c4c:	f8b8 3000 	ldrh.w	r3, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8005c50:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8005c54:	f003 020f 	and.w	r2, r3, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8005c58:	0090      	lsls	r0, r2, #2
 8005c5a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 8005c5e:	4e57      	ldr	r6, [pc, #348]	; (8005dbc <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8005c60:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8005c64:	4f54      	ldr	r7, [pc, #336]	; (8005db8 <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 8005c66:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8005c68:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8005c6c:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 8005c70:	2a00      	cmp	r2, #0
 8005c72:	d133      	bne.n	8005cdc <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8005c74:	6822      	ldr	r2, [r4, #0]
 8005c76:	b290      	uxth	r0, r2
 8005c78:	8028      	strh	r0, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8005c7a:	882b      	ldrh	r3, [r5, #0]
 8005c7c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005c80:	8032      	strh	r2, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 8005c82:	8828      	ldrh	r0, [r5, #0]
 8005c84:	f400 5340 	and.w	r3, r0, #12288	; 0x3000
 8005c88:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8005c8a:	6822      	ldr	r2, [r4, #0]
 8005c8c:	4011      	ands	r1, r2
 8005c8e:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8005c92:	f081 0020 	eor.w	r0, r1, #32
 8005c96:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8005c9a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c9e:	6022      	str	r2, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8005ca0:	f8b8 1000 	ldrh.w	r1, [r8]
 8005ca4:	f001 0010 	and.w	r0, r1, #16
 8005ca8:	b283      	uxth	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d049      	beq.n	8005d42 <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8005cae:	6822      	ldr	r2, [r4, #0]
 8005cb0:	b291      	uxth	r1, r2
 8005cb2:	f8ad 1006 	strh.w	r1, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8005cb6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8005cba:	f400 6300 	and.w	r3, r0, #2048	; 0x800
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	2a00      	cmp	r2, #0
 8005cc2:	d171      	bne.n	8005da8 <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8005cc4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8005cc8:	b208      	sxth	r0, r1
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	dab4      	bge.n	8005c38 <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 8005cce:	6822      	ldr	r2, [r4, #0]
 8005cd0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8005cd8:	4939      	ldr	r1, [pc, #228]	; (8005dc0 <CTR_LP+0x1a8>)
 8005cda:	e038      	b.n	8005d4e <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8005cdc:	6804      	ldr	r4, [r0, #0]
 8005cde:	b2a1      	uxth	r1, r4
 8005ce0:	f8ad 1006 	strh.w	r1, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8005ce4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005ce8:	b214      	sxth	r4, r2
 8005cea:	2c00      	cmp	r4, #0
 8005cec:	db1b      	blt.n	8005d26 <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8005cee:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8005cf2:	f001 0280 	and.w	r2, r1, #128	; 0x80
 8005cf6:	b293      	uxth	r3, r2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d09d      	beq.n	8005c38 <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8005cfc:	f899 4000 	ldrb.w	r4, [r9]
 8005d00:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8005d04:	00a0      	lsls	r0, r4, #2
 8005d06:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 8005d0a:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 8005d0e:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8005d10:	3c01      	subs	r4, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8005d12:	4003      	ands	r3, r0
 8005d14:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8005d16:	f240 2344 	movw	r3, #580	; 0x244
 8005d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d1e:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8005d22:	4788      	blx	r1
 8005d24:	e788      	b.n	8005c38 <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8005d26:	6801      	ldr	r1, [r0, #0]
 8005d28:	f640 728f 	movw	r2, #3983	; 0xf8f
 8005d2c:	400a      	ands	r2, r1
 8005d2e:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8005d30:	f240 2060 	movw	r0, #608	; 0x260
 8005d34:	3b01      	subs	r3, #1
 8005d36:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005d3a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8005d3e:	47a0      	blx	r4
 8005d40:	e7d5      	b.n	8005cee <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8005d42:	6821      	ldr	r1, [r4, #0]
 8005d44:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8005d48:	400b      	ands	r3, r1
        In0_Process();
 8005d4a:	491e      	ldr	r1, [pc, #120]	; (8005dc4 <CTR_LP+0x1ac>)
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8005d4c:	6023      	str	r3, [r4, #0]
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 8005d4e:	4788      	blx	r1
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8005d50:	6820      	ldr	r0, [r4, #0]
 8005d52:	883a      	ldrh	r2, [r7, #0]
 8005d54:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8005d58:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 8005d5c:	b28a      	uxth	r2, r1
 8005d5e:	4003      	ands	r3, r0
 8005d60:	b10a      	cbz	r2, 8005d66 <CTR_LP+0x14e>
 8005d62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d66:	8838      	ldrh	r0, [r7, #0]
 8005d68:	f400 5100 	and.w	r1, r0, #8192	; 0x2000
 8005d6c:	b28a      	uxth	r2, r1
 8005d6e:	b10a      	cbz	r2, 8005d74 <CTR_LP+0x15c>
 8005d70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d74:	8830      	ldrh	r0, [r6, #0]
 8005d76:	f000 0110 	and.w	r1, r0, #16
 8005d7a:	b28a      	uxth	r2, r1
 8005d7c:	b10a      	cbz	r2, 8005d82 <CTR_LP+0x16a>
 8005d7e:	f083 0310 	eor.w	r3, r3, #16
 8005d82:	8830      	ldrh	r0, [r6, #0]
 8005d84:	f000 0120 	and.w	r1, r0, #32
 8005d88:	b28a      	uxth	r2, r1
 8005d8a:	b10a      	cbz	r2, 8005d90 <CTR_LP+0x178>
 8005d8c:	f083 0320 	eor.w	r3, r3, #32
 8005d90:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8005d94:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8005d98:	f040 0280 	orr.w	r2, r0, #128	; 0x80
 8005d9c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8005da0:	600a      	str	r2, [r1, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8005da2:	b003      	add	sp, #12
 8005da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8005da8:	6820      	ldr	r0, [r4, #0]
 8005daa:	f640 728f 	movw	r2, #3983	; 0xf8f
 8005dae:	4002      	ands	r2, r0
 8005db0:	6022      	str	r2, [r4, #0]
          Setup0_Process();
 8005db2:	4905      	ldr	r1, [pc, #20]	; (8005dc8 <CTR_LP+0x1b0>)
 8005db4:	e7cb      	b.n	8005d4e <CTR_LP+0x136>
 8005db6:	bf00      	nop
 8005db8:	2000163a 	.word	0x2000163a
 8005dbc:	2000163c 	.word	0x2000163c
 8005dc0:	0800529d 	.word	0x0800529d
 8005dc4:	080057bd 	.word	0x080057bd
 8005dc8:	0800538d 	.word	0x0800538d
 8005dcc:	20000ddc 	.word	0x20000ddc
 8005dd0:	20001610 	.word	0x20001610

08005dd4 <atan2>:
 8005dd4:	f000 b800 	b.w	8005dd8 <__ieee754_atan2>

08005dd8 <__ieee754_atan2>:
 8005dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	e9cd 2300 	strd	r2, r3, [sp]
 8005de2:	e89d 1080 	ldmia.w	sp, {r7, ip}
 8005de6:	f1c7 0900 	rsb	r9, r7, #0
 8005dea:	2600      	movs	r6, #0
 8005dec:	f02c 4800 	bic.w	r8, ip, #2147483648	; 0x80000000
 8005df0:	ea49 0907 	orr.w	r9, r9, r7
 8005df4:	ea48 79d9 	orr.w	r9, r8, r9, lsr #31
 8005df8:	f6c7 76f0 	movt	r6, #32752	; 0x7ff0
 8005dfc:	45b1      	cmp	r9, r6
 8005dfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e02:	4604      	mov	r4, r0
 8005e04:	460d      	mov	r5, r1
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	d845      	bhi.n	8005e98 <__ieee754_atan2+0xc0>
 8005e0c:	f1c0 0a00 	rsb	sl, r0, #0
 8005e10:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8005e14:	ea4a 0a00 	orr.w	sl, sl, r0
 8005e18:	ea49 7ada 	orr.w	sl, r9, sl, lsr #31
 8005e1c:	45b2      	cmp	sl, r6
 8005e1e:	d83b      	bhi.n	8005e98 <__ieee754_atan2+0xc0>
 8005e20:	f10c 4c40 	add.w	ip, ip, #3221225472	; 0xc0000000
 8005e24:	f50c 1c80 	add.w	ip, ip, #1048576	; 0x100000
 8005e28:	ea5c 0c07 	orrs.w	ip, ip, r7
 8005e2c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8005e30:	d052      	beq.n	8005ed8 <__ieee754_atan2+0x100>
 8005e32:	ea4f 76aa 	mov.w	r6, sl, asr #30
 8005e36:	f006 0002 	and.w	r0, r6, #2
 8005e3a:	ea59 0202 	orrs.w	r2, r9, r2
 8005e3e:	ea40 76d1 	orr.w	r6, r0, r1, lsr #31
 8005e42:	d036      	beq.n	8005eb2 <__ieee754_atan2+0xda>
 8005e44:	ea58 0707 	orrs.w	r7, r8, r7
 8005e48:	d040      	beq.n	8005ecc <__ieee754_atan2+0xf4>
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 8005e50:	4588      	cmp	r8, r1
 8005e52:	d052      	beq.n	8005efa <__ieee754_atan2+0x122>
 8005e54:	2700      	movs	r7, #0
 8005e56:	f6c7 77f0 	movt	r7, #32752	; 0x7ff0
 8005e5a:	45b9      	cmp	r9, r7
 8005e5c:	d036      	beq.n	8005ecc <__ieee754_atan2+0xf4>
 8005e5e:	ebc8 0809 	rsb	r8, r8, r9
 8005e62:	ea4f 5828 	mov.w	r8, r8, asr #20
 8005e66:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
 8005e6a:	dc42      	bgt.n	8005ef2 <__ieee754_atan2+0x11a>
 8005e6c:	f1ba 0f00 	cmp.w	sl, #0
 8005e70:	db7d      	blt.n	8005f6e <__ieee754_atan2+0x196>
 8005e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e76:	4620      	mov	r0, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa fba7 	bl	80005cc <__aeabi_ddiv>
 8005e7e:	f000 fa6b 	bl	8006358 <fabs>
 8005e82:	f000 f8b5 	bl	8005ff0 <atan>
 8005e86:	2e01      	cmp	r6, #1
 8005e88:	d06d      	beq.n	8005f66 <__ieee754_atan2+0x18e>
 8005e8a:	2e02      	cmp	r6, #2
 8005e8c:	d05c      	beq.n	8005f48 <__ieee754_atan2+0x170>
 8005e8e:	2e00      	cmp	r6, #0
 8005e90:	d14d      	bne.n	8005f2e <__ieee754_atan2+0x156>
 8005e92:	4604      	mov	r4, r0
 8005e94:	460d      	mov	r5, r1
 8005e96:	e007      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005e98:	4620      	mov	r0, r4
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ea0:	f7fa f8b8 	bl	8000014 <__adddf3>
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	460d      	mov	r5, r1
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	4629      	mov	r1, r5
 8005eac:	b004      	add	sp, #16
 8005eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb2:	2e03      	cmp	r6, #3
 8005eb4:	d8c6      	bhi.n	8005e44 <__ieee754_atan2+0x6c>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <__ieee754_atan2+0xe4>)
 8005eb8:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8005ebc:	08005ea9 	.word	0x08005ea9
 8005ec0:	08005ea9 	.word	0x08005ea9
 8005ec4:	08005eeb 	.word	0x08005eeb
 8005ec8:	08005ee3 	.word	0x08005ee3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	db2a      	blt.n	8005f26 <__ieee754_atan2+0x14e>
 8005ed0:	a535      	add	r5, pc, #212	; (adr r5, 8005fa8 <__ieee754_atan2+0x1d0>)
 8005ed2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005ed6:	e7e7      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005ed8:	b004      	add	sp, #16
 8005eda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ede:	f000 b887 	b.w	8005ff0 <atan>
 8005ee2:	a533      	add	r5, pc, #204	; (adr r5, 8005fb0 <__ieee754_atan2+0x1d8>)
 8005ee4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005ee8:	e7de      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005eea:	a533      	add	r5, pc, #204	; (adr r5, 8005fb8 <__ieee754_atan2+0x1e0>)
 8005eec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005ef0:	e7da      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005ef2:	a12d      	add	r1, pc, #180	; (adr r1, 8005fa8 <__ieee754_atan2+0x1d0>)
 8005ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ef8:	e7c5      	b.n	8005e86 <__ieee754_atan2+0xae>
 8005efa:	45c1      	cmp	r9, r8
 8005efc:	d03e      	beq.n	8005f7c <__ieee754_atan2+0x1a4>
 8005efe:	2e03      	cmp	r6, #3
 8005f00:	d8a8      	bhi.n	8005e54 <__ieee754_atan2+0x7c>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <__ieee754_atan2+0x130>)
 8005f04:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8005f08:	08005f21 	.word	0x08005f21
 8005f0c:	08005f19 	.word	0x08005f19
 8005f10:	08005eeb 	.word	0x08005eeb
 8005f14:	08005ee3 	.word	0x08005ee3
 8005f18:	2400      	movs	r4, #0
 8005f1a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005f1e:	e7c3      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005f20:	2400      	movs	r4, #0
 8005f22:	2500      	movs	r5, #0
 8005f24:	e7c0      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005f26:	a526      	add	r5, pc, #152	; (adr r5, 8005fc0 <__ieee754_atan2+0x1e8>)
 8005f28:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005f2c:	e7bc      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005f2e:	a326      	add	r3, pc, #152	; (adr r3, 8005fc8 <__ieee754_atan2+0x1f0>)
 8005f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f34:	f7fa f86c 	bl	8000010 <__aeabi_dsub>
 8005f38:	a31f      	add	r3, pc, #124	; (adr r3, 8005fb8 <__ieee754_atan2+0x1e0>)
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f7fa f867 	bl	8000010 <__aeabi_dsub>
 8005f42:	4604      	mov	r4, r0
 8005f44:	460d      	mov	r5, r1
 8005f46:	e7af      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005f48:	a31f      	add	r3, pc, #124	; (adr r3, 8005fc8 <__ieee754_atan2+0x1f0>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa f85f 	bl	8000010 <__aeabi_dsub>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	a118      	add	r1, pc, #96	; (adr r1, 8005fb8 <__ieee754_atan2+0x1e0>)
 8005f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f5c:	f7fa f858 	bl	8000010 <__aeabi_dsub>
 8005f60:	4604      	mov	r4, r0
 8005f62:	460d      	mov	r5, r1
 8005f64:	e7a0      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005f66:	4604      	mov	r4, r0
 8005f68:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8005f6c:	e79c      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005f6e:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
 8005f72:	f6bf af7e 	bge.w	8005e72 <__ieee754_atan2+0x9a>
 8005f76:	2000      	movs	r0, #0
 8005f78:	2100      	movs	r1, #0
 8005f7a:	e784      	b.n	8005e86 <__ieee754_atan2+0xae>
 8005f7c:	2e03      	cmp	r6, #3
 8005f7e:	d8a5      	bhi.n	8005ecc <__ieee754_atan2+0xf4>
 8005f80:	e8df f006 	tbb	[pc, r6]
 8005f84:	02060a0e 	.word	0x02060a0e
 8005f88:	a511      	add	r5, pc, #68	; (adr r5, 8005fd0 <__ieee754_atan2+0x1f8>)
 8005f8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005f8e:	e78b      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005f90:	a511      	add	r5, pc, #68	; (adr r5, 8005fd8 <__ieee754_atan2+0x200>)
 8005f92:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005f96:	e787      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005f98:	a511      	add	r5, pc, #68	; (adr r5, 8005fe0 <__ieee754_atan2+0x208>)
 8005f9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005f9e:	e783      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005fa0:	a511      	add	r5, pc, #68	; (adr r5, 8005fe8 <__ieee754_atan2+0x210>)
 8005fa2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005fa6:	e77f      	b.n	8005ea8 <__ieee754_atan2+0xd0>
 8005fa8:	54442d18 	.word	0x54442d18
 8005fac:	3ff921fb 	.word	0x3ff921fb
 8005fb0:	54442d18 	.word	0x54442d18
 8005fb4:	c00921fb 	.word	0xc00921fb
 8005fb8:	54442d18 	.word	0x54442d18
 8005fbc:	400921fb 	.word	0x400921fb
 8005fc0:	54442d18 	.word	0x54442d18
 8005fc4:	bff921fb 	.word	0xbff921fb
 8005fc8:	33145c07 	.word	0x33145c07
 8005fcc:	3ca1a626 	.word	0x3ca1a626
 8005fd0:	7f3321d2 	.word	0x7f3321d2
 8005fd4:	c002d97c 	.word	0xc002d97c
 8005fd8:	7f3321d2 	.word	0x7f3321d2
 8005fdc:	4002d97c 	.word	0x4002d97c
 8005fe0:	54442d18 	.word	0x54442d18
 8005fe4:	bfe921fb 	.word	0xbfe921fb
 8005fe8:	54442d18 	.word	0x54442d18
 8005fec:	3fe921fb 	.word	0x3fe921fb

08005ff0 <atan>:
 8005ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ff8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005ffc:	f2c4 430f 	movt	r3, #17423	; 0x440f
 8006000:	429e      	cmp	r6, r3
 8006002:	4688      	mov	r8, r1
 8006004:	468a      	mov	sl, r1
 8006006:	4681      	mov	r9, r0
 8006008:	dd1b      	ble.n	8006042 <atan+0x52>
 800600a:	2000      	movs	r0, #0
 800600c:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 8006010:	4286      	cmp	r6, r0
 8006012:	464b      	mov	r3, r9
 8006014:	f300 80be 	bgt.w	8006194 <atan+0x1a4>
 8006018:	f000 80b9 	beq.w	800618e <atan+0x19e>
 800601c:	f242 18fb 	movw	r8, #8699	; 0x21fb
 8006020:	4641      	mov	r1, r8
 8006022:	f642 5918 	movw	r9, #11544	; 0x2d18
 8006026:	f6cb 78f9 	movt	r8, #49145	; 0xbff9
 800602a:	f6c3 71f9 	movt	r1, #16377	; 0x3ff9
 800602e:	f2c5 4944 	movt	r9, #21572	; 0x5444
 8006032:	f1ba 0f00 	cmp.w	sl, #0
 8006036:	bfc8      	it	gt
 8006038:	4688      	movgt	r8, r1
 800603a:	4648      	mov	r0, r9
 800603c:	4641      	mov	r1, r8
 800603e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006042:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006046:	f6c3 70db 	movt	r0, #16347	; 0x3fdb
 800604a:	4286      	cmp	r6, r0
 800604c:	f300 80bc 	bgt.w	80061c8 <atan+0x1d8>
 8006050:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006054:	f6c3 611f 	movt	r1, #15903	; 0x3e1f
 8006058:	428e      	cmp	r6, r1
 800605a:	f340 80a4 	ble.w	80061a6 <atan+0x1b6>
 800605e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006062:	464a      	mov	r2, r9
 8006064:	4643      	mov	r3, r8
 8006066:	4648      	mov	r0, r9
 8006068:	4641      	mov	r1, r8
 800606a:	f7fa f985 	bl	8000378 <__aeabi_dmul>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4606      	mov	r6, r0
 8006074:	460f      	mov	r7, r1
 8006076:	f7fa f97f 	bl	8000378 <__aeabi_dmul>
 800607a:	a39d      	add	r3, pc, #628	; (adr r3, 80062f0 <atan+0x300>)
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	4604      	mov	r4, r0
 8006082:	460d      	mov	r5, r1
 8006084:	f7fa f978 	bl	8000378 <__aeabi_dmul>
 8006088:	a39b      	add	r3, pc, #620	; (adr r3, 80062f8 <atan+0x308>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f7f9 ffc1 	bl	8000014 <__adddf3>
 8006092:	4622      	mov	r2, r4
 8006094:	462b      	mov	r3, r5
 8006096:	f7fa f96f 	bl	8000378 <__aeabi_dmul>
 800609a:	a399      	add	r3, pc, #612	; (adr r3, 8006300 <atan+0x310>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7f9 ffb8 	bl	8000014 <__adddf3>
 80060a4:	4622      	mov	r2, r4
 80060a6:	462b      	mov	r3, r5
 80060a8:	f7fa f966 	bl	8000378 <__aeabi_dmul>
 80060ac:	a396      	add	r3, pc, #600	; (adr r3, 8006308 <atan+0x318>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7f9 ffaf 	bl	8000014 <__adddf3>
 80060b6:	4622      	mov	r2, r4
 80060b8:	462b      	mov	r3, r5
 80060ba:	f7fa f95d 	bl	8000378 <__aeabi_dmul>
 80060be:	a394      	add	r3, pc, #592	; (adr r3, 8006310 <atan+0x320>)
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f7f9 ffa6 	bl	8000014 <__adddf3>
 80060c8:	4622      	mov	r2, r4
 80060ca:	462b      	mov	r3, r5
 80060cc:	f7fa f954 	bl	8000378 <__aeabi_dmul>
 80060d0:	a391      	add	r3, pc, #580	; (adr r3, 8006318 <atan+0x328>)
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	f7f9 ff9d 	bl	8000014 <__adddf3>
 80060da:	4632      	mov	r2, r6
 80060dc:	463b      	mov	r3, r7
 80060de:	f7fa f94b 	bl	8000378 <__aeabi_dmul>
 80060e2:	a38f      	add	r3, pc, #572	; (adr r3, 8006320 <atan+0x330>)
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	4606      	mov	r6, r0
 80060ea:	460f      	mov	r7, r1
 80060ec:	4620      	mov	r0, r4
 80060ee:	4629      	mov	r1, r5
 80060f0:	f7fa f942 	bl	8000378 <__aeabi_dmul>
 80060f4:	a38c      	add	r3, pc, #560	; (adr r3, 8006328 <atan+0x338>)
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	f7f9 ff89 	bl	8000010 <__aeabi_dsub>
 80060fe:	4622      	mov	r2, r4
 8006100:	462b      	mov	r3, r5
 8006102:	f7fa f939 	bl	8000378 <__aeabi_dmul>
 8006106:	a38a      	add	r3, pc, #552	; (adr r3, 8006330 <atan+0x340>)
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f7f9 ff80 	bl	8000010 <__aeabi_dsub>
 8006110:	4622      	mov	r2, r4
 8006112:	462b      	mov	r3, r5
 8006114:	f7fa f930 	bl	8000378 <__aeabi_dmul>
 8006118:	a387      	add	r3, pc, #540	; (adr r3, 8006338 <atan+0x348>)
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f7f9 ff77 	bl	8000010 <__aeabi_dsub>
 8006122:	4622      	mov	r2, r4
 8006124:	462b      	mov	r3, r5
 8006126:	f7fa f927 	bl	8000378 <__aeabi_dmul>
 800612a:	a385      	add	r3, pc, #532	; (adr r3, 8006340 <atan+0x350>)
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f7f9 ff6e 	bl	8000010 <__aeabi_dsub>
 8006134:	4622      	mov	r2, r4
 8006136:	462b      	mov	r3, r5
 8006138:	f7fa f91e 	bl	8000378 <__aeabi_dmul>
 800613c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	d06f      	beq.n	8006226 <atan+0x236>
 8006146:	4630      	mov	r0, r6
 8006148:	4639      	mov	r1, r7
 800614a:	f7f9 ff63 	bl	8000014 <__adddf3>
 800614e:	4643      	mov	r3, r8
 8006150:	464a      	mov	r2, r9
 8006152:	f7fa f911 	bl	8000378 <__aeabi_dmul>
 8006156:	4c7e      	ldr	r4, [pc, #504]	; (8006350 <atan+0x360>)
 8006158:	4a7e      	ldr	r2, [pc, #504]	; (8006354 <atan+0x364>)
 800615a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800615e:	445c      	add	r4, fp
 8006160:	4493      	add	fp, r2
 8006162:	e9db 2300 	ldrd	r2, r3, [fp]
 8006166:	f7f9 ff53 	bl	8000010 <__aeabi_dsub>
 800616a:	4643      	mov	r3, r8
 800616c:	464a      	mov	r2, r9
 800616e:	f7f9 ff4f 	bl	8000010 <__aeabi_dsub>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	e9d4 0100 	ldrd	r0, r1, [r4]
 800617a:	f7f9 ff49 	bl	8000010 <__aeabi_dsub>
 800617e:	f1ba 0f00 	cmp.w	sl, #0
 8006182:	4681      	mov	r9, r0
 8006184:	bfb4      	ite	lt
 8006186:	f101 4800 	addlt.w	r8, r1, #2147483648	; 0x80000000
 800618a:	4688      	movge	r8, r1
 800618c:	e755      	b.n	800603a <atan+0x4a>
 800618e:	2b00      	cmp	r3, #0
 8006190:	f43f af44 	beq.w	800601c <atan+0x2c>
 8006194:	4648      	mov	r0, r9
 8006196:	464a      	mov	r2, r9
 8006198:	4641      	mov	r1, r8
 800619a:	4643      	mov	r3, r8
 800619c:	f7f9 ff3a 	bl	8000014 <__adddf3>
 80061a0:	4681      	mov	r9, r0
 80061a2:	4688      	mov	r8, r1
 80061a4:	e749      	b.n	800603a <atan+0x4a>
 80061a6:	a368      	add	r3, pc, #416	; (adr r3, 8006348 <atan+0x358>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	4648      	mov	r0, r9
 80061ae:	4641      	mov	r1, r8
 80061b0:	f7f9 ff30 	bl	8000014 <__adddf3>
 80061b4:	2300      	movs	r3, #0
 80061b6:	2200      	movs	r2, #0
 80061b8:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80061bc:	f7fa fb6c 	bl	8000898 <__aeabi_dcmpgt>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	f47f af3a 	bne.w	800603a <atan+0x4a>
 80061c6:	e74a      	b.n	800605e <atan+0x6e>
 80061c8:	4648      	mov	r0, r9
 80061ca:	f000 f8c5 	bl	8006358 <fabs>
 80061ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061d2:	f6c3 72f2 	movt	r2, #16370	; 0x3ff2
 80061d6:	4296      	cmp	r6, r2
 80061d8:	4604      	mov	r4, r0
 80061da:	460d      	mov	r5, r1
 80061dc:	dc36      	bgt.n	800624c <atan+0x25c>
 80061de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061e2:	f6c3 73e5 	movt	r3, #16357	; 0x3fe5
 80061e6:	429e      	cmp	r6, r3
 80061e8:	dc64      	bgt.n	80062b4 <atan+0x2c4>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	f7f9 ff11 	bl	8000014 <__adddf3>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2200      	movs	r2, #0
 80061f6:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80061fa:	f7f9 ff09 	bl	8000010 <__aeabi_dsub>
 80061fe:	2200      	movs	r2, #0
 8006200:	4606      	mov	r6, r0
 8006202:	460f      	mov	r7, r1
 8006204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006208:	4620      	mov	r0, r4
 800620a:	4629      	mov	r1, r5
 800620c:	f7f9 ff02 	bl	8000014 <__adddf3>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4630      	mov	r0, r6
 8006216:	4639      	mov	r1, r7
 8006218:	f7fa f9d8 	bl	80005cc <__aeabi_ddiv>
 800621c:	f04f 0b00 	mov.w	fp, #0
 8006220:	4681      	mov	r9, r0
 8006222:	4688      	mov	r8, r1
 8006224:	e71d      	b.n	8006062 <atan+0x72>
 8006226:	4630      	mov	r0, r6
 8006228:	4639      	mov	r1, r7
 800622a:	f7f9 fef3 	bl	8000014 <__adddf3>
 800622e:	464a      	mov	r2, r9
 8006230:	4643      	mov	r3, r8
 8006232:	f7fa f8a1 	bl	8000378 <__aeabi_dmul>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4648      	mov	r0, r9
 800623c:	4641      	mov	r1, r8
 800623e:	f7f9 fee7 	bl	8000010 <__aeabi_dsub>
 8006242:	464c      	mov	r4, r9
 8006244:	4645      	mov	r5, r8
 8006246:	4681      	mov	r9, r0
 8006248:	4688      	mov	r8, r1
 800624a:	e6f6      	b.n	800603a <atan+0x4a>
 800624c:	f647 77ff 	movw	r7, #32767	; 0x7fff
 8006250:	f2c4 0703 	movt	r7, #16387	; 0x4003
 8006254:	42be      	cmp	r6, r7
 8006256:	dc20      	bgt.n	800629a <atan+0x2aa>
 8006258:	2300      	movs	r3, #0
 800625a:	2200      	movs	r2, #0
 800625c:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8006260:	f7f9 fed6 	bl	8000010 <__aeabi_dsub>
 8006264:	2300      	movs	r3, #0
 8006266:	4606      	mov	r6, r0
 8006268:	460f      	mov	r7, r1
 800626a:	2200      	movs	r2, #0
 800626c:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8006270:	4620      	mov	r0, r4
 8006272:	4629      	mov	r1, r5
 8006274:	f7fa f880 	bl	8000378 <__aeabi_dmul>
 8006278:	2300      	movs	r3, #0
 800627a:	2200      	movs	r2, #0
 800627c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8006280:	f7f9 fec8 	bl	8000014 <__adddf3>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4630      	mov	r0, r6
 800628a:	4639      	mov	r1, r7
 800628c:	f7fa f99e 	bl	80005cc <__aeabi_ddiv>
 8006290:	f04f 0b02 	mov.w	fp, #2
 8006294:	4681      	mov	r9, r0
 8006296:	4688      	mov	r8, r1
 8006298:	e6e3      	b.n	8006062 <atan+0x72>
 800629a:	2100      	movs	r1, #0
 800629c:	2000      	movs	r0, #0
 800629e:	f6cb 71f0 	movt	r1, #49136	; 0xbff0
 80062a2:	4622      	mov	r2, r4
 80062a4:	462b      	mov	r3, r5
 80062a6:	f7fa f991 	bl	80005cc <__aeabi_ddiv>
 80062aa:	f04f 0b03 	mov.w	fp, #3
 80062ae:	4681      	mov	r9, r0
 80062b0:	4688      	mov	r8, r1
 80062b2:	e6d6      	b.n	8006062 <atan+0x72>
 80062b4:	2300      	movs	r3, #0
 80062b6:	2200      	movs	r2, #0
 80062b8:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80062bc:	f7f9 fea8 	bl	8000010 <__aeabi_dsub>
 80062c0:	2300      	movs	r3, #0
 80062c2:	4606      	mov	r6, r0
 80062c4:	460f      	mov	r7, r1
 80062c6:	2200      	movs	r2, #0
 80062c8:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80062cc:	4620      	mov	r0, r4
 80062ce:	4629      	mov	r1, r5
 80062d0:	f7f9 fea0 	bl	8000014 <__adddf3>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4630      	mov	r0, r6
 80062da:	4639      	mov	r1, r7
 80062dc:	f7fa f976 	bl	80005cc <__aeabi_ddiv>
 80062e0:	f04f 0b01 	mov.w	fp, #1
 80062e4:	4681      	mov	r9, r0
 80062e6:	4688      	mov	r8, r1
 80062e8:	e6bb      	b.n	8006062 <atan+0x72>
 80062ea:	bf00      	nop
 80062ec:	f3af 8000 	nop.w
 80062f0:	e322da11 	.word	0xe322da11
 80062f4:	3f90ad3a 	.word	0x3f90ad3a
 80062f8:	24760deb 	.word	0x24760deb
 80062fc:	3fa97b4b 	.word	0x3fa97b4b
 8006300:	a0d03d51 	.word	0xa0d03d51
 8006304:	3fb10d66 	.word	0x3fb10d66
 8006308:	c54c206e 	.word	0xc54c206e
 800630c:	3fb745cd 	.word	0x3fb745cd
 8006310:	920083ff 	.word	0x920083ff
 8006314:	3fc24924 	.word	0x3fc24924
 8006318:	5555550d 	.word	0x5555550d
 800631c:	3fd55555 	.word	0x3fd55555
 8006320:	2c6a6c2f 	.word	0x2c6a6c2f
 8006324:	bfa2b444 	.word	0xbfa2b444
 8006328:	52defd9a 	.word	0x52defd9a
 800632c:	3fadde2d 	.word	0x3fadde2d
 8006330:	af749a6d 	.word	0xaf749a6d
 8006334:	3fb3b0f2 	.word	0x3fb3b0f2
 8006338:	fe231671 	.word	0xfe231671
 800633c:	3fbc71c6 	.word	0x3fbc71c6
 8006340:	9998ebc4 	.word	0x9998ebc4
 8006344:	3fc99999 	.word	0x3fc99999
 8006348:	8800759c 	.word	0x8800759c
 800634c:	7e37e43c 	.word	0x7e37e43c
 8006350:	08006890 	.word	0x08006890
 8006354:	08006870 	.word	0x08006870

08006358 <fabs>:
 8006358:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	00000a0a 	.word	0x00000a0a
 8006364:	2a2a2a2a 	.word	0x2a2a2a2a
 8006368:	2a2a2a2a 	.word	0x2a2a2a2a
 800636c:	2a2a2a2a 	.word	0x2a2a2a2a
 8006370:	2a2a2a2a 	.word	0x2a2a2a2a
 8006374:	2a2a2a2a 	.word	0x2a2a2a2a
 8006378:	2a2a2a2a 	.word	0x2a2a2a2a
 800637c:	2a2a2a2a 	.word	0x2a2a2a2a
 8006380:	2a2a2a2a 	.word	0x2a2a2a2a
 8006384:	2a2a2a2a 	.word	0x2a2a2a2a
 8006388:	2a2a2a2a 	.word	0x2a2a2a2a
 800638c:	2a2a2a2a 	.word	0x2a2a2a2a
 8006390:	2a2a2a2a 	.word	0x2a2a2a2a
 8006394:	2a2a2a2a 	.word	0x2a2a2a2a
 8006398:	0a2a2a2a 	.word	0x0a2a2a2a
 800639c:	00000000 	.word	0x00000000
 80063a0:	20202020 	.word	0x20202020
 80063a4:	20202020 	.word	0x20202020
 80063a8:	20202020 	.word	0x20202020
 80063ac:	20202020 	.word	0x20202020
 80063b0:	20202020 	.word	0x20202020
 80063b4:	504d2020 	.word	0x504d2020
 80063b8:	35303655 	.word	0x35303655
 80063bc:	20202030 	.word	0x20202030
 80063c0:	20202020 	.word	0x20202020
 80063c4:	20202020 	.word	0x20202020
 80063c8:	20202020 	.word	0x20202020
 80063cc:	20202020 	.word	0x20202020
 80063d0:	20202020 	.word	0x20202020
 80063d4:	0a202020 	.word	0x0a202020
 80063d8:	00000000 	.word	0x00000000
 80063dc:	2e31202a 	.word	0x2e31202a
 80063e0:	44434c20 	.word	0x44434c20
 80063e4:	656c4320 	.word	0x656c4320
 80063e8:	20207261 	.word	0x20207261
 80063ec:	20202020 	.word	0x20202020
 80063f0:	20202020 	.word	0x20202020
 80063f4:	20202020 	.word	0x20202020
 80063f8:	20202020 	.word	0x20202020
 80063fc:	20202020 	.word	0x20202020
 8006400:	20202020 	.word	0x20202020
 8006404:	20202020 	.word	0x20202020
 8006408:	20202020 	.word	0x20202020
 800640c:	20202020 	.word	0x20202020
 8006410:	0a2a2020 	.word	0x0a2a2020
 8006414:	00000000 	.word	0x00000000
 8006418:	2e32202a 	.word	0x2e32202a
 800641c:	6f685320 	.word	0x6f685320
 8006420:	63412077 	.word	0x63412077
 8006424:	20202063 	.word	0x20202063
 8006428:	20202020 	.word	0x20202020
 800642c:	20202020 	.word	0x20202020
 8006430:	20202020 	.word	0x20202020
 8006434:	20202020 	.word	0x20202020
 8006438:	20202020 	.word	0x20202020
 800643c:	20202020 	.word	0x20202020
 8006440:	20202020 	.word	0x20202020
 8006444:	20202020 	.word	0x20202020
 8006448:	20202020 	.word	0x20202020
 800644c:	0a2a2020 	.word	0x0a2a2020
 8006450:	00000000 	.word	0x00000000
 8006454:	2e33202a 	.word	0x2e33202a
 8006458:	6f685320 	.word	0x6f685320
 800645c:	504d2077 	.word	0x504d2077
 8006460:	35303655 	.word	0x35303655
 8006464:	65522030 	.word	0x65522030
 8006468:	20207367 	.word	0x20207367
 800646c:	20202020 	.word	0x20202020
 8006470:	20202020 	.word	0x20202020
 8006474:	20202020 	.word	0x20202020
 8006478:	20202020 	.word	0x20202020
 800647c:	20202020 	.word	0x20202020
 8006480:	20202020 	.word	0x20202020
 8006484:	20202020 	.word	0x20202020
 8006488:	0a2a2020 	.word	0x0a2a2020
 800648c:	00000000 	.word	0x00000000
 8006490:	2e34202a 	.word	0x2e34202a
 8006494:	6e6f5320 	.word	0x6e6f5320
 8006498:	20206369 	.word	0x20206369
 800649c:	20202020 	.word	0x20202020
 80064a0:	20202020 	.word	0x20202020
 80064a4:	20202020 	.word	0x20202020
 80064a8:	20202020 	.word	0x20202020
 80064ac:	20202020 	.word	0x20202020
 80064b0:	20202020 	.word	0x20202020
 80064b4:	20202020 	.word	0x20202020
 80064b8:	20202020 	.word	0x20202020
 80064bc:	20202020 	.word	0x20202020
 80064c0:	20202020 	.word	0x20202020
 80064c4:	0a2a2020 	.word	0x0a2a2020
 80064c8:	00000000 	.word	0x00000000
 80064cc:	2e35202a 	.word	0x2e35202a
 80064d0:	6f685320 	.word	0x6f685320
 80064d4:	6f432077 	.word	0x6f432077
 80064d8:	7361706d 	.word	0x7361706d
 80064dc:	20202073 	.word	0x20202073
 80064e0:	20202020 	.word	0x20202020
 80064e4:	20202020 	.word	0x20202020
 80064e8:	20202020 	.word	0x20202020
 80064ec:	20202020 	.word	0x20202020
 80064f0:	20202020 	.word	0x20202020
 80064f4:	20202020 	.word	0x20202020
 80064f8:	20202020 	.word	0x20202020
 80064fc:	20202020 	.word	0x20202020
 8006500:	0a2a2020 	.word	0x0a2a2020
 8006504:	00000000 	.word	0x00000000
 8006508:	2e36202a 	.word	0x2e36202a
 800650c:	6f685320 	.word	0x6f685320
 8006510:	4d482077 	.word	0x4d482077
 8006514:	38383543 	.word	0x38383543
 8006518:	65522033 	.word	0x65522033
 800651c:	20207367 	.word	0x20207367
 8006520:	20202020 	.word	0x20202020
 8006524:	20202020 	.word	0x20202020
 8006528:	20202020 	.word	0x20202020
 800652c:	20202020 	.word	0x20202020
 8006530:	20202020 	.word	0x20202020
 8006534:	20202020 	.word	0x20202020
 8006538:	20202020 	.word	0x20202020
 800653c:	0a2a2020 	.word	0x0a2a2020
 8006540:	00000000 	.word	0x00000000
 8006544:	2e37202a 	.word	0x2e37202a
 8006548:	6f685320 	.word	0x6f685320
 800654c:	4d492077 	.word	0x4d492077
 8006550:	20202055 	.word	0x20202055
 8006554:	20202020 	.word	0x20202020
 8006558:	20202020 	.word	0x20202020
 800655c:	20202020 	.word	0x20202020
 8006560:	20202020 	.word	0x20202020
 8006564:	20202020 	.word	0x20202020
 8006568:	20202020 	.word	0x20202020
 800656c:	20202020 	.word	0x20202020
 8006570:	20202020 	.word	0x20202020
 8006574:	20202020 	.word	0x20202020
 8006578:	0a2a2020 	.word	0x0a2a2020
 800657c:	00000000 	.word	0x00000000
 8006580:	2e38202a 	.word	0x2e38202a
 8006584:	20202020 	.word	0x20202020
 8006588:	20202020 	.word	0x20202020
 800658c:	20202020 	.word	0x20202020
 8006590:	20202020 	.word	0x20202020
 8006594:	20202020 	.word	0x20202020
 8006598:	20202020 	.word	0x20202020
 800659c:	20202020 	.word	0x20202020
 80065a0:	20202020 	.word	0x20202020
 80065a4:	20202020 	.word	0x20202020
 80065a8:	20202020 	.word	0x20202020
 80065ac:	20202020 	.word	0x20202020
 80065b0:	20202020 	.word	0x20202020
 80065b4:	0a2a2020 	.word	0x0a2a2020
 80065b8:	00000000 	.word	0x00000000
 80065bc:	2e39202a 	.word	0x2e39202a
 80065c0:	20202020 	.word	0x20202020
 80065c4:	20202020 	.word	0x20202020
 80065c8:	20202020 	.word	0x20202020
 80065cc:	20202020 	.word	0x20202020
 80065d0:	20202020 	.word	0x20202020
 80065d4:	20202020 	.word	0x20202020
 80065d8:	20202020 	.word	0x20202020
 80065dc:	20202020 	.word	0x20202020
 80065e0:	20202020 	.word	0x20202020
 80065e4:	20202020 	.word	0x20202020
 80065e8:	20202020 	.word	0x20202020
 80065ec:	20202020 	.word	0x20202020
 80065f0:	0a2a2020 	.word	0x0a2a2020
 80065f4:	00000000 	.word	0x00000000
 80065f8:	2e6d202a 	.word	0x2e6d202a
 80065fc:	654d2020 	.word	0x654d2020
 8006600:	2020756e 	.word	0x2020756e
 8006604:	20202020 	.word	0x20202020
 8006608:	20202020 	.word	0x20202020
 800660c:	20202020 	.word	0x20202020
 8006610:	20202020 	.word	0x20202020
 8006614:	20202020 	.word	0x20202020
 8006618:	20202020 	.word	0x20202020
 800661c:	20202020 	.word	0x20202020
 8006620:	20202020 	.word	0x20202020
 8006624:	20202020 	.word	0x20202020
 8006628:	20202020 	.word	0x20202020
 800662c:	0a2a2020 	.word	0x0a2a2020
 8006630:	00000000 	.word	0x00000000
 8006634:	00203e3e 	.word	0x00203e3e
 8006638:	72616d53 	.word	0x72616d53
 800663c:	626f5274 	.word	0x626f5274
 8006640:	4220746f 	.word	0x4220746f
 8006644:	00000044 	.word	0x00000044
 8006648:	2044434c 	.word	0x2044434c
 800664c:	61656c43 	.word	0x61656c43
 8006650:	000a2072 	.word	0x000a2072
 8006654:	656d6954 	.word	0x656d6954
 8006658:	20642520 	.word	0x20642520
 800665c:	00000000 	.word	0x00000000
 8006660:	25205841 	.word	0x25205841
 8006664:	00002064 	.word	0x00002064
 8006668:	25205941 	.word	0x25205941
 800666c:	00002064 	.word	0x00002064
 8006670:	25205a41 	.word	0x25205a41
 8006674:	00002064 	.word	0x00002064
 8006678:	64252054 	.word	0x64252054
 800667c:	00000a20 	.word	0x00000a20
 8006680:	7830200a 	.word	0x7830200a
 8006684:	78323025 	.word	0x78323025
 8006688:	0000203a 	.word	0x0000203a
 800668c:	78323025 	.word	0x78323025
 8006690:	00000020 	.word	0x00000020
 8006694:	6425204c 	.word	0x6425204c
 8006698:	20522020 	.word	0x20522020
 800669c:	000a6425 	.word	0x000a6425
 80066a0:	25205843 	.word	0x25205843
 80066a4:	00002064 	.word	0x00002064
 80066a8:	25205943 	.word	0x25205943
 80066ac:	00002064 	.word	0x00002064
 80066b0:	25205a43 	.word	0x25205a43
 80066b4:	000a2064 	.word	0x000a2064
 80066b8:	3a746552 	.word	0x3a746552
 80066bc:	41206425 	.word	0x41206425
 80066c0:	20726464 	.word	0x20726464
 80066c4:	30257830 	.word	0x30257830
 80066c8:	44207832 	.word	0x44207832
 80066cc:	20617461 	.word	0x20617461
 80066d0:	2578303a 	.word	0x2578303a
 80066d4:	0a783230 	.word	0x0a783230
 80066d8:	00000000 	.word	0x00000000
 80066dc:	25204e45 	.word	0x25204e45
 80066e0:	00002064 	.word	0x00002064
 80066e4:	25204554 	.word	0x25204554
 80066e8:	00002064 	.word	0x00002064
 80066ec:	25205a43 	.word	0x25205a43
 80066f0:	00000a64 	.word	0x00000a64
 80066f4:	656d6954 	.word	0x656d6954
 80066f8:	35302520 	.word	0x35302520
 80066fc:	00002064 	.word	0x00002064
 8006700:	58676e41 	.word	0x58676e41
 8006704:	33302520 	.word	0x33302520
 8006708:	30252064 	.word	0x30252064
 800670c:	20206433 	.word	0x20206433
 8006710:	00000000 	.word	0x00000000
 8006714:	59676e41 	.word	0x59676e41
 8006718:	33302520 	.word	0x33302520
 800671c:	30252064 	.word	0x30252064
 8006720:	000a6433 	.word	0x000a6433
 8006724:	276e6143 	.word	0x276e6143
 8006728:	69662074 	.word	0x69662074
 800672c:	4d20646e 	.word	0x4d20646e
 8006730:	30365550 	.word	0x30365550
 8006734:	0a203035 	.word	0x0a203035
 8006738:	00000000 	.word	0x00000000
 800673c:	20727245 	.word	0x20727245
 8006740:	74697277 	.word	0x74697277
 8006744:	504d2065 	.word	0x504d2065
 8006748:	35303655 	.word	0x35303655
 800674c:	41525f30 	.word	0x41525f30
 8006750:	5257505f 	.word	0x5257505f
 8006754:	4d474d5f 	.word	0x4d474d5f
 8006758:	20315f54 	.word	0x20315f54
 800675c:	6425203a 	.word	0x6425203a
 8006760:	0000000a 	.word	0x0000000a
 8006764:	35434d48 	.word	0x35434d48
 8006768:	20333838 	.word	0x20333838
 800676c:	6c696146 	.word	0x6c696146
 8006770:	206f7420 	.word	0x206f7420
 8006774:	64616572 	.word	0x64616572
 8006778:	20444920 	.word	0x20444920
 800677c:	0000000a 	.word	0x0000000a
 8006780:	4d5f7748 	.word	0x4d5f7748
 8006784:	30365550 	.word	0x30365550
 8006788:	495f3035 	.word	0x495f3035
 800678c:	2074696e 	.word	0x2074696e
 8006790:	20746552 	.word	0x20746552
 8006794:	7830203a 	.word	0x7830203a
 8006798:	000a7825 	.word	0x000a7825
 800679c:	485f7748 	.word	0x485f7748
 80067a0:	3835434d 	.word	0x3835434d
 80067a4:	495f3338 	.word	0x495f3338
 80067a8:	2074696e 	.word	0x2074696e
 80067ac:	20746552 	.word	0x20746552
 80067b0:	7830203a 	.word	0x7830203a
 80067b4:	000a7825 	.word	0x000a7825

080067b8 <Virtual_Com_Port_StringVendor>:
 80067b8:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 80067c8:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 80067d8:	00630069 00000073                       i.c.s...

080067e0 <Virtual_Com_Port_DeviceDescriptor>:
 80067e0:	02000112 40000002 57400483 02010200     .......@..@W....
 80067f0:	00000103                                ....

080067f4 <Virtual_Com_Port_StringLangID>:
 80067f4:	04090304                                ....

080067f8 <Virtual_Com_Port_StringProduct>:
 80067f8:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8006808:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8006818:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8006828:	00000020                                 ...

0800682c <Virtual_Com_Port_ConfigDescriptor>:
 800682c:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800683c:	24050001 05011000 01000124 02022404     ...$....$....$..
 800684c:	00062405 82050701 ff000803 00010409     .$..............
 800685c:	00000a02 03050700 00004002 02810507     .........@......
 800686c:	00000040                                @...

08006870 <atanlo>:
 8006870:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 8006880:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

08006890 <atanhi>:
 8006890:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 80068a0:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
