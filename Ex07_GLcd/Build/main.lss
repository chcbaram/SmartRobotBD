
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004698  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000030c  20000000  08004698  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000e44  20000400  08004a98  0001030c  2**9
                  ALLOC
  3 ._usrstack    00000100  20001244  20001244  0001030c  2**0
                  CONTENTS
  4 .debug_abbrev 0000284d  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000078e9  00000000  00000000  00012c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000036fb  00000000  00000000  0001a542  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000700f  00000000  00000000  0001dc3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c46  00000000  00000000  00024c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000a66  00000000  00000000  00026892  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b70  00000000  00000000  000272f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000013c8  00000000  00000000  00027e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000024d7  00000000  00000000  00029230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      0000002a  00000000  00000000  0002b707  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000031  00000000  00000000  0002b731  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001cec  00000000  00000000  0002b764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 01 10 00 08                             .P. ....

08000008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800000a:	2000      	movs	r0, #0
 800000c:	4b01      	ldr	r3, [pc, #4]	; (8000014 <LED_Tick+0xc>)
 800000e:	4798      	blx	r3
}
 8000010:	bd08      	pop	{r3, pc}
 8000012:	bf00      	nop
 8000014:	08001399 	.word	0x08001399

08000018 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000018:	b530      	push	{r4, r5, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001a:	4a0a      	ldr	r2, [pc, #40]	; (8000044 <main+0x2c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800001c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001e:	4790      	blx	r2
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000020:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000022:	4809      	ldr	r0, [pc, #36]	; (8000048 <main+0x30>)
 8000024:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000026:	4d09      	ldr	r5, [pc, #36]	; (800004c <main+0x34>)
 8000028:	4b09      	ldr	r3, [pc, #36]	; (8000050 <main+0x38>)
 800002a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800002e:	2202      	movs	r2, #2
 8000030:	4620      	mov	r0, r4
 8000032:	9400      	str	r4, [sp, #0]
 8000034:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );	
 8000036:	4620      	mov	r0, r4
 8000038:	4906      	ldr	r1, [pc, #24]	; (8000054 <main+0x3c>)
 800003a:	4788      	blx	r1
	Main_Init();

	//-- 명령어 처리
	//
	//Ap_RadioMenu_ExeCmd();    
	Ap_GLcdMenu_ExeCmd();    
 800003c:	4b06      	ldr	r3, [pc, #24]	; (8000058 <main+0x40>)
 800003e:	4798      	blx	r3
 8000040:	e7fe      	b.n	8000040 <main+0x28>
 8000042:	bf00      	nop
 8000044:	080010d9 	.word	0x080010d9
 8000048:	0800005d 	.word	0x0800005d
 800004c:	080017c9 	.word	0x080017c9
 8000050:	08000009 	.word	0x08000009
 8000054:	080017e5 	.word	0x080017e5
 8000058:	08000275 	.word	0x08000275

0800005c <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 800005c:	b508      	push	{r3, lr}
	if( Ap_Radio_Init() == ERR_NONE )
 800005e:	4b05      	ldr	r3, [pc, #20]	; (8000074 <Ap_Init+0x18>)
 8000060:	4798      	blx	r3
 8000062:	b118      	cbz	r0, 800006c <Ap_Init+0x10>
	{
		Lb_printf("Radio Init OK : FM Mode\n");
	}
	else
	{
		Lb_printf("Radio Init Fail\n");
 8000064:	4804      	ldr	r0, [pc, #16]	; (8000078 <Ap_Init+0x1c>)
 8000066:	4a05      	ldr	r2, [pc, #20]	; (800007c <Ap_Init+0x20>)
 8000068:	4790      	blx	r2
 800006a:	bd08      	pop	{r3, pc}
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
	if( Ap_Radio_Init() == ERR_NONE )
	{
		Lb_printf("Radio Init OK : FM Mode\n");
 800006c:	4804      	ldr	r0, [pc, #16]	; (8000080 <Ap_Init+0x24>)
 800006e:	4903      	ldr	r1, [pc, #12]	; (800007c <Ap_Init+0x20>)
 8000070:	4788      	blx	r1
 8000072:	bd08      	pop	{r3, pc}
 8000074:	08000179 	.word	0x08000179
 8000078:	080042b8 	.word	0x080042b8
 800007c:	08000bc9 	.word	0x08000bc9
 8000080:	0800429c 	.word	0x0800429c

08000084 <Ap_Radio_BandSetFM>:
     ARG     : void
     RET     : 
     			u16 - Error Code
---------------------------------------------------------------------------*/
u16 Ap_Radio_BandSetFM( void )
{
 8000084:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000086:	4c06      	ldr	r4, [pc, #24]	; (80000a0 <Ap_Radio_BandSetFM+0x1c>)
 8000088:	2000      	movs	r0, #0
 800008a:	82a0      	strh	r0, [r4, #20]
{
	u16 Ret = ERR_NONE;
	
	Ap_Radio_ApiStart();
	
	Ap_Radio_Log.Err_Hw = Hw_Si47xx_FM_Config();	
 800008c:	4b05      	ldr	r3, [pc, #20]	; (80000a4 <Ap_Radio_BandSetFM+0x20>)
 800008e:	4798      	blx	r3
 8000090:	82a0      	strh	r0, [r4, #20]
	
	if( Ap_Radio_Log.Err_Hw == ERR_NONE )
 8000092:	b910      	cbnz	r0, 800009a <Ap_Radio_BandSetFM+0x16>
	{
		Ap_Radio_Log.Band_Mode = MODE_RADIO_BAND_FM;
 8000094:	2101      	movs	r1, #1
 8000096:	8021      	strh	r1, [r4, #0]
 8000098:	bd10      	pop	{r4, pc}
	}
	else
	{
		Ret = ERR_RADIO_HW_ERR;
 800009a:	2002      	movs	r0, #2
	}
	
	return Ret;
}
 800009c:	bd10      	pop	{r4, pc}
 800009e:	bf00      	nop
 80000a0:	200004b8 	.word	0x200004b8
 80000a4:	0800240d 	.word	0x0800240d

080000a8 <Ap_Radio_FM_ChannelSet>:
     			u16 Channel - Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_FM_ChannelSet( u16 Channel )
{
 80000a8:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80000aa:	4c0f      	ldr	r4, [pc, #60]	; (80000e8 <Ap_Radio_FM_ChannelSet+0x40>)
 80000ac:	2100      	movs	r1, #0
 80000ae:	8922      	ldrh	r2, [r4, #8]


	if( Channel < Ap_Radio_Log.FM_Channel_Min ) Channel = Ap_Radio_Log.FM_Channel_Min;
	if( Channel > Ap_Radio_Log.FM_Channel_Max ) Channel = Ap_Radio_Log.FM_Channel_Max;

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
 80000b0:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80000b4:	4290      	cmp	r0, r2
 80000b6:	bf38      	it	cc
 80000b8:	4610      	movcc	r0, r2


	if( Channel < Ap_Radio_Log.FM_Channel_Min ) Channel = Ap_Radio_Log.FM_Channel_Min;
	if( Channel > Ap_Radio_Log.FM_Channel_Max ) Channel = Ap_Radio_Log.FM_Channel_Max;

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
 80000ba:	4560      	cmp	r0, ip
 80000bc:	bf28      	it	cs
 80000be:	4660      	movcs	r0, ip
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80000c0:	82a1      	strh	r1, [r4, #20]


	if( Channel < Ap_Radio_Log.FM_Channel_Min ) Channel = Ap_Radio_Log.FM_Channel_Min;
	if( Channel > Ap_Radio_Log.FM_Channel_Max ) Channel = Ap_Radio_Log.FM_Channel_Max;

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
 80000c2:	4b0a      	ldr	r3, [pc, #40]	; (80000ec <Ap_Radio_FM_ChannelSet+0x44>)
 80000c4:	4798      	blx	r3
		
	if( Ret == ERR_NONE )
 80000c6:	b110      	cbz	r0, 80000ce <Ap_Radio_FM_ChannelSet+0x26>
	}
	
	
	if( Ret != ERR_NONE )
	{
		Ap_Radio_Log.Err_Hw = Ret;
 80000c8:	82a0      	strh	r0, [r4, #20]
		
		Ret = ERR_RADIO_HW_ERR;		
 80000ca:	2002      	movs	r0, #2
	}
			
	return Ret;
}
 80000cc:	bd10      	pop	{r4, pc}

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
		
	if( Ret == ERR_NONE )
	{
		Ret = Hw_Si47xx_WaitForSTC( 500 );		if( Ret != ERR_NONE ) return Ret;
 80000ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80000d2:	4b07      	ldr	r3, [pc, #28]	; (80000f0 <Ap_Radio_FM_ChannelSet+0x48>)
 80000d4:	4798      	blx	r3
 80000d6:	2800      	cmp	r0, #0
 80000d8:	d1f8      	bne.n	80000cc <Ap_Radio_FM_ChannelSet+0x24>
		
		if( Ret == ERR_NONE )
		{
			Ret = Hw_Si47xx_FM_TUNE_STATUS(1);
 80000da:	2001      	movs	r0, #1
 80000dc:	4905      	ldr	r1, [pc, #20]	; (80000f4 <Ap_Radio_FM_ChannelSet+0x4c>)
 80000de:	4788      	blx	r1
			}
		}
	}
	
	
	if( Ret != ERR_NONE )
 80000e0:	2800      	cmp	r0, #0
 80000e2:	d0f3      	beq.n	80000cc <Ap_Radio_FM_ChannelSet+0x24>
 80000e4:	e7f0      	b.n	80000c8 <Ap_Radio_FM_ChannelSet+0x20>
 80000e6:	bf00      	nop
 80000e8:	200004b8 	.word	0x200004b8
 80000ec:	08002389 	.word	0x08002389
 80000f0:	08002311 	.word	0x08002311
 80000f4:	080022b9 	.word	0x080022b9

080000f8 <Ap_Radio_AM_ChannelSet>:
     			u16 Channel - Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_AM_ChannelSet( u16 Channel )
{
 80000f8:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80000fa:	4c0f      	ldr	r4, [pc, #60]	; (8000138 <Ap_Radio_AM_ChannelSet+0x40>)
 80000fc:	2100      	movs	r1, #0
 80000fe:	89a2      	ldrh	r2, [r4, #12]


	if( Channel < Ap_Radio_Log.AM_Channel_Min ) Channel = Ap_Radio_Log.AM_Channel_Min;
	if( Channel > Ap_Radio_Log.AM_Channel_Max ) Channel = Ap_Radio_Log.AM_Channel_Max;

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
 8000100:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000104:	4290      	cmp	r0, r2
 8000106:	bf38      	it	cc
 8000108:	4610      	movcc	r0, r2


	if( Channel < Ap_Radio_Log.AM_Channel_Min ) Channel = Ap_Radio_Log.AM_Channel_Min;
	if( Channel > Ap_Radio_Log.AM_Channel_Max ) Channel = Ap_Radio_Log.AM_Channel_Max;

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
 800010a:	4560      	cmp	r0, ip
 800010c:	bf28      	it	cs
 800010e:	4660      	movcs	r0, ip
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000110:	82a1      	strh	r1, [r4, #20]


	if( Channel < Ap_Radio_Log.AM_Channel_Min ) Channel = Ap_Radio_Log.AM_Channel_Min;
	if( Channel > Ap_Radio_Log.AM_Channel_Max ) Channel = Ap_Radio_Log.AM_Channel_Max;

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
 8000112:	4b0a      	ldr	r3, [pc, #40]	; (800013c <Ap_Radio_AM_ChannelSet+0x44>)
 8000114:	4798      	blx	r3
		
	if( Ret == ERR_NONE )
 8000116:	b110      	cbz	r0, 800011e <Ap_Radio_AM_ChannelSet+0x26>
	}
	
	
	if( Ret != ERR_NONE )
	{
		Ap_Radio_Log.Err_Hw = Ret;
 8000118:	82a0      	strh	r0, [r4, #20]
		
		Ret = ERR_RADIO_HW_ERR;		
 800011a:	2002      	movs	r0, #2
	}
			
	return Ret;
}
 800011c:	bd10      	pop	{r4, pc}

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
		
	if( Ret == ERR_NONE )
	{
		Ret = Hw_Si47xx_WaitForSTC( 500 );		if( Ret != ERR_NONE ) return Ret;
 800011e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000122:	4b07      	ldr	r3, [pc, #28]	; (8000140 <Ap_Radio_AM_ChannelSet+0x48>)
 8000124:	4798      	blx	r3
 8000126:	2800      	cmp	r0, #0
 8000128:	d1f8      	bne.n	800011c <Ap_Radio_AM_ChannelSet+0x24>
		
		if( Ret == ERR_NONE )
		{
			Ret = Hw_Si47xx_AM_TUNE_STATUS(1);
 800012a:	2001      	movs	r0, #1
 800012c:	4905      	ldr	r1, [pc, #20]	; (8000144 <Ap_Radio_AM_ChannelSet+0x4c>)
 800012e:	4788      	blx	r1
			}
		}
	}
	
	
	if( Ret != ERR_NONE )
 8000130:	2800      	cmp	r0, #0
 8000132:	d0f3      	beq.n	800011c <Ap_Radio_AM_ChannelSet+0x24>
 8000134:	e7f0      	b.n	8000118 <Ap_Radio_AM_ChannelSet+0x20>
 8000136:	bf00      	nop
 8000138:	200004b8 	.word	0x200004b8
 800013c:	08002349 	.word	0x08002349
 8000140:	08002311 	.word	0x08002311
 8000144:	08002291 	.word	0x08002291

08000148 <Ap_Radio_ChannelSetFirst>:
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelSetFirst( void )
{
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
 8000148:	4a08      	ldr	r2, [pc, #32]	; (800016c <Ap_Radio_ChannelSetFirst+0x24>)
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelSetFirst( void )
{
 800014a:	b508      	push	{r3, lr}
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
 800014c:	8813      	ldrh	r3, [r2, #0]
 800014e:	2b01      	cmp	r3, #1
 8000150:	d007      	beq.n	8000162 <Ap_Radio_ChannelSetFirst+0x1a>
	{
		Ret = Ap_Radio_FM_ChannelSet( Ap_Radio_Log.FM_Channel_Min );
	}
	else
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_AM )
 8000152:	2b02      	cmp	r3, #2
 8000154:	d001      	beq.n	800015a <Ap_Radio_ChannelSetFirst+0x12>
	{
		Ret = Ap_Radio_AM_ChannelSet( Ap_Radio_Log.AM_Channel_Min );
	}
	else
	{
		Ret = ERR_RADIO_BAND_ERR;
 8000156:	2003      	movs	r0, #3
	}	
	
	return Ret;
}
 8000158:	bd08      	pop	{r3, pc}
		Ret = Ap_Radio_FM_ChannelSet( Ap_Radio_Log.FM_Channel_Min );
	}
	else
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_AM )
	{
		Ret = Ap_Radio_AM_ChannelSet( Ap_Radio_Log.AM_Channel_Min );
 800015a:	8990      	ldrh	r0, [r2, #12]
 800015c:	4904      	ldr	r1, [pc, #16]	; (8000170 <Ap_Radio_ChannelSetFirst+0x28>)
 800015e:	4788      	blx	r1
 8000160:	bd08      	pop	{r3, pc}
{
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
	{
		Ret = Ap_Radio_FM_ChannelSet( Ap_Radio_Log.FM_Channel_Min );
 8000162:	8910      	ldrh	r0, [r2, #8]
 8000164:	4b03      	ldr	r3, [pc, #12]	; (8000174 <Ap_Radio_ChannelSetFirst+0x2c>)
 8000166:	4798      	blx	r3
 8000168:	bd08      	pop	{r3, pc}
 800016a:	bf00      	nop
 800016c:	200004b8 	.word	0x200004b8
 8000170:	080000f9 	.word	0x080000f9
 8000174:	080000a9 	.word	0x080000a9

08000178 <Ap_Radio_Init>:
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_Init(void)
{
 8000178:	b508      	push	{r3, lr}
	u16 Ret = ERR_NONE;
	
		
	Hw_Si47xx_Init();
 800017a:	480f      	ldr	r0, [pc, #60]	; (80001b8 <Ap_Radio_Init+0x40>)
 800017c:	4780      	blx	r0
	
	
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
 800017e:	480f      	ldr	r0, [pc, #60]	; (80001bc <Ap_Radio_Init+0x44>)
 8000180:	f641 53b0 	movw	r3, #7600	; 0x1db0
	Ap_Radio_Log.FM_Channel_Max = 10790;
 8000184:	f642 2126 	movw	r1, #10790	; 0x2a26
	Ap_Radio_Log.AM_Channel_Min = 520;
 8000188:	f44f 7202 	mov.w	r2, #520	; 0x208
	Hw_Si47xx_Init();
	
	
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
 800018c:	8103      	strh	r3, [r0, #8]
	Ap_Radio_Log.FM_Channel_Max = 10790;
 800018e:	8141      	strh	r1, [r0, #10]
	Ap_Radio_Log.AM_Channel_Min = 520;
	Ap_Radio_Log.AM_Channel_Max = 1710;
	
	Ap_Radio_Log.Volume_Min = 0;
 8000190:	2300      	movs	r3, #0
	
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
	Ap_Radio_Log.FM_Channel_Max = 10790;
	Ap_Radio_Log.AM_Channel_Min = 520;
 8000192:	8182      	strh	r2, [r0, #12]
	Ap_Radio_Log.AM_Channel_Max = 1710;
 8000194:	f240 6cae 	movw	ip, #1710	; 0x6ae
	
	Ap_Radio_Log.Volume_Min = 0;
	Ap_Radio_Log.Volume_Max = 63;	
	
	Ap_Radio_Log.Band_Mode = MODE_RADIO_BAND_NONE;
 8000198:	2200      	movs	r2, #0
	Ap_Radio_Log.FM_Channel_Max = 10790;
	Ap_Radio_Log.AM_Channel_Min = 520;
	Ap_Radio_Log.AM_Channel_Max = 1710;
	
	Ap_Radio_Log.Volume_Min = 0;
	Ap_Radio_Log.Volume_Max = 63;	
 800019a:	213f      	movs	r1, #63	; 0x3f
	Ap_Radio_Log.FM_Channel_Min = 7600;
	Ap_Radio_Log.FM_Channel_Max = 10790;
	Ap_Radio_Log.AM_Channel_Min = 520;
	Ap_Radio_Log.AM_Channel_Max = 1710;
	
	Ap_Radio_Log.Volume_Min = 0;
 800019c:	8083      	strh	r3, [r0, #4]
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
	Ap_Radio_Log.FM_Channel_Max = 10790;
	Ap_Radio_Log.AM_Channel_Min = 520;
	Ap_Radio_Log.AM_Channel_Max = 1710;
 800019e:	f8a0 c00e 	strh.w	ip, [r0, #14]
	
	Ap_Radio_Log.Volume_Min = 0;
	Ap_Radio_Log.Volume_Max = 63;	
 80001a2:	80c1      	strh	r1, [r0, #6]
	
	Ap_Radio_Log.Band_Mode = MODE_RADIO_BAND_NONE;
 80001a4:	8002      	strh	r2, [r0, #0]
	Ap_Radio_Log.Mute_Mode = 0;
 80001a6:	8042      	strh	r2, [r0, #2]
	
	Ap_Radio_Log.Err_Hw = 0;
 80001a8:	8282      	strh	r2, [r0, #20]
	
	
	Ret = Ap_Radio_BandSetFM();
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <Ap_Radio_Init+0x48>)
 80001ac:	4798      	blx	r3
	
	if( Ret == ERR_NONE )
 80001ae:	b908      	cbnz	r0, 80001b4 <Ap_Radio_Init+0x3c>
	{
		Ret = Ap_Radio_ChannelSetFirst();
 80001b0:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <Ap_Radio_Init+0x4c>)
 80001b2:	4790      	blx	r2
	}
	
	return Ret;
}
 80001b4:	bd08      	pop	{r3, pc}
 80001b6:	bf00      	nop
 80001b8:	0800211d 	.word	0x0800211d
 80001bc:	200004b8 	.word	0x200004b8
 80001c0:	08000085 	.word	0x08000085
 80001c4:	08000149 	.word	0x08000149

080001c8 <Ap_GLcdMenu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
	Lb_printf("*******************************************************\n");
 80001ca:	4d11      	ldr	r5, [pc, #68]	; (8000210 <Ap_GLcdMenu_ShowMenu+0x48>)
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 80001cc:	4c11      	ldr	r4, [pc, #68]	; (8000214 <Ap_GLcdMenu_ShowMenu+0x4c>)
 80001ce:	4812      	ldr	r0, [pc, #72]	; (8000218 <Ap_GLcdMenu_ShowMenu+0x50>)
 80001d0:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80001d2:	4628      	mov	r0, r5
 80001d4:	47a0      	blx	r4
	Lb_printf("                      GLcd V0.1                       \n");
 80001d6:	4811      	ldr	r0, [pc, #68]	; (800021c <Ap_GLcdMenu_ShowMenu+0x54>)
 80001d8:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80001da:	4628      	mov	r0, r5
 80001dc:	47a0      	blx	r4
	Lb_printf("* 1. LCD Clear                                        *\n");
 80001de:	4810      	ldr	r0, [pc, #64]	; (8000220 <Ap_GLcdMenu_ShowMenu+0x58>)
 80001e0:	47a0      	blx	r4
	Lb_printf("* 2. Count ++                                         *\n");
 80001e2:	4810      	ldr	r0, [pc, #64]	; (8000224 <Ap_GLcdMenu_ShowMenu+0x5c>)
 80001e4:	47a0      	blx	r4
	Lb_printf("* 3. Count --                                          *\n");
 80001e6:	4810      	ldr	r0, [pc, #64]	; (8000228 <Ap_GLcdMenu_ShowMenu+0x60>)
 80001e8:	47a0      	blx	r4
	Lb_printf("* 4.                                                  *\n");
 80001ea:	4810      	ldr	r0, [pc, #64]	; (800022c <Ap_GLcdMenu_ShowMenu+0x64>)
 80001ec:	47a0      	blx	r4
	Lb_printf("* 5.                                                  *\n");
 80001ee:	4810      	ldr	r0, [pc, #64]	; (8000230 <Ap_GLcdMenu_ShowMenu+0x68>)
 80001f0:	47a0      	blx	r4
	Lb_printf("* 6.                                                  *\n");
 80001f2:	4810      	ldr	r0, [pc, #64]	; (8000234 <Ap_GLcdMenu_ShowMenu+0x6c>)
 80001f4:	47a0      	blx	r4
	Lb_printf("* 7.                                                  *\n");
 80001f6:	4810      	ldr	r0, [pc, #64]	; (8000238 <Ap_GLcdMenu_ShowMenu+0x70>)
 80001f8:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 80001fa:	4810      	ldr	r0, [pc, #64]	; (800023c <Ap_GLcdMenu_ShowMenu+0x74>)
 80001fc:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 80001fe:	4810      	ldr	r0, [pc, #64]	; (8000240 <Ap_GLcdMenu_ShowMenu+0x78>)
 8000200:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 8000202:	4810      	ldr	r0, [pc, #64]	; (8000244 <Ap_GLcdMenu_ShowMenu+0x7c>)
 8000204:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000206:	4628      	mov	r0, r5
 8000208:	47a0      	blx	r4
	Lb_printf("\n");
 800020a:	480f      	ldr	r0, [pc, #60]	; (8000248 <Ap_GLcdMenu_ShowMenu+0x80>)
 800020c:	47a0      	blx	r4
}
 800020e:	bd38      	pop	{r3, r4, r5, pc}
 8000210:	080042d0 	.word	0x080042d0
 8000214:	08000bc9 	.word	0x08000bc9
 8000218:	080042cc 	.word	0x080042cc
 800021c:	0800430c 	.word	0x0800430c
 8000220:	08004344 	.word	0x08004344
 8000224:	08004380 	.word	0x08004380
 8000228:	080043bc 	.word	0x080043bc
 800022c:	080043f8 	.word	0x080043f8
 8000230:	08004434 	.word	0x08004434
 8000234:	08004470 	.word	0x08004470
 8000238:	080044ac 	.word	0x080044ac
 800023c:	080044e8 	.word	0x080044e8
 8000240:	08004524 	.word	0x08004524
 8000244:	08004560 	.word	0x08004560
 8000248:	080043f4 	.word	0x080043f4

0800024c <Ap_GLcdMenu_GetCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_GetCmd(void)
{
 800024c:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 800024e:	4805      	ldr	r0, [pc, #20]	; (8000264 <Ap_GLcdMenu_GetCmd+0x18>)
 8000250:	4c05      	ldr	r4, [pc, #20]	; (8000268 <Ap_GLcdMenu_GetCmd+0x1c>)
 8000252:	47a0      	blx	r4

    key=get_byte();
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <Ap_GLcdMenu_GetCmd+0x20>)
 8000256:	4798      	blx	r3
 8000258:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 800025a:	4805      	ldr	r0, [pc, #20]	; (8000270 <Ap_GLcdMenu_GetCmd+0x24>)
 800025c:	47a0      	blx	r4
	
    return key;
}
 800025e:	4628      	mov	r0, r5
 8000260:	bd38      	pop	{r3, r4, r5, pc}
 8000262:	bf00      	nop
 8000264:	0800459c 	.word	0x0800459c
 8000268:	08000bc9 	.word	0x08000bc9
 800026c:	080012bd 	.word	0x080012bd
 8000270:	080043f4 	.word	0x080043f4

08000274 <Ap_GLcdMenu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 8000274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16 Ret;
	static u8  Count = 0;			
	
	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();	
 8000278:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800032c <Ap_GLcdMenu_ExeCmd+0xb8>
 800027c:	47c0      	blx	r8
 800027e:	4c22      	ldr	r4, [pc, #136]	; (8000308 <Ap_GLcdMenu_ExeCmd+0x94>)
				Hw_N5110_Print(0,2,"Count : %4d", ++Count);							
           
               break;

           case '3':
           		Lb_printf("Count -- \n");
 8000280:	4f22      	ldr	r7, [pc, #136]	; (800030c <Ap_GLcdMenu_ExeCmd+0x98>)
           
           		Hw_N5110_Clear();
 8000282:	4e23      	ldr	r6, [pc, #140]	; (8000310 <Ap_GLcdMenu_ExeCmd+0x9c>)
				Hw_N5110_Print(0,0,"Smartrobot BD");								
 8000284:	4d23      	ldr	r5, [pc, #140]	; (8000314 <Ap_GLcdMenu_ExeCmd+0xa0>)
	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();	
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 8000286:	47a0      	blx	r4
 8000288:	4603      	mov	r3, r0
 800028a:	b300      	cbz	r0, 80002ce <Ap_GLcdMenu_ExeCmd+0x5a>
    {
        switch(key)
 800028c:	2b33      	cmp	r3, #51	; 0x33
 800028e:	d02a      	beq.n	80002e6 <Ap_GLcdMenu_ExeCmd+0x72>
 8000290:	d81f      	bhi.n	80002d2 <Ap_GLcdMenu_ExeCmd+0x5e>
 8000292:	2b31      	cmp	r3, #49	; 0x31
 8000294:	d023      	beq.n	80002de <Ap_GLcdMenu_ExeCmd+0x6a>
 8000296:	2b32      	cmp	r3, #50	; 0x32
 8000298:	d1f5      	bne.n	8000286 <Ap_GLcdMenu_ExeCmd+0x12>
           		Lb_printf("LCD Clear \n");
           		Hw_N5110_Clear();
               	break;

           case '2':
           		Lb_printf("Count ++ \n");
 800029a:	481f      	ldr	r0, [pc, #124]	; (8000318 <Ap_GLcdMenu_ExeCmd+0xa4>)
 800029c:	47b8      	blx	r7
           
           		Hw_N5110_Clear();
 800029e:	47b0      	blx	r6
				Hw_N5110_Print(0,0,"Smartrobot BD");								
 80002a0:	2000      	movs	r0, #0
 80002a2:	4601      	mov	r1, r0
 80002a4:	4a1d      	ldr	r2, [pc, #116]	; (800031c <Ap_GLcdMenu_ExeCmd+0xa8>)
 80002a6:	47a8      	blx	r5
				Hw_N5110_Print(0,2,"Count : %4d", ++Count);							
 80002a8:	f8df e084 	ldr.w	lr, [pc, #132]	; 8000330 <Ap_GLcdMenu_ExeCmd+0xbc>
 80002ac:	4a1c      	ldr	r2, [pc, #112]	; (8000320 <Ap_GLcdMenu_ExeCmd+0xac>)
 80002ae:	f89e c000 	ldrb.w	ip, [lr]
 80002b2:	2102      	movs	r1, #2
 80002b4:	f10c 0c01 	add.w	ip, ip, #1
           case '3':
           		Lb_printf("Count -- \n");
           
           		Hw_N5110_Clear();
				Hw_N5110_Print(0,0,"Smartrobot BD");								
				Hw_N5110_Print(0,2,"Count : %4d", --Count);							
 80002b8:	fa5f fc8c 	uxtb.w	ip, ip
 80002bc:	4663      	mov	r3, ip
 80002be:	f88e c000 	strb.w	ip, [lr]
 80002c2:	2000      	movs	r0, #0
 80002c4:	47a8      	blx	r5
	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();	
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 80002c6:	47a0      	blx	r4
 80002c8:	4603      	mov	r3, r0
 80002ca:	2800      	cmp	r0, #0
 80002cc:	d1de      	bne.n	800028c <Ap_GLcdMenu_ExeCmd+0x18>
               break;
        }
    }
    
    return key;
}
 80002ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Ap_GLcdMenu_ShowMenu();	
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
 80002d2:	2b4d      	cmp	r3, #77	; 0x4d
 80002d4:	d001      	beq.n	80002da <Ap_GLcdMenu_ExeCmd+0x66>
 80002d6:	2b6d      	cmp	r3, #109	; 0x6d
 80002d8:	d1d5      	bne.n	8000286 <Ap_GLcdMenu_ExeCmd+0x12>
           case '0':
               break;

			case 'm':
			case 'M':
				Ap_GLcdMenu_ShowMenu();
 80002da:	47c0      	blx	r8
 80002dc:	e7d3      	b.n	8000286 <Ap_GLcdMenu_ExeCmd+0x12>
    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		Lb_printf("LCD Clear \n");
 80002de:	4811      	ldr	r0, [pc, #68]	; (8000324 <Ap_GLcdMenu_ExeCmd+0xb0>)
 80002e0:	47b8      	blx	r7
           		Hw_N5110_Clear();
 80002e2:	47b0      	blx	r6
               	break;
 80002e4:	e7cf      	b.n	8000286 <Ap_GLcdMenu_ExeCmd+0x12>
				Hw_N5110_Print(0,2,"Count : %4d", ++Count);							
           
               break;

           case '3':
           		Lb_printf("Count -- \n");
 80002e6:	4810      	ldr	r0, [pc, #64]	; (8000328 <Ap_GLcdMenu_ExeCmd+0xb4>)
 80002e8:	47b8      	blx	r7
           
           		Hw_N5110_Clear();
 80002ea:	47b0      	blx	r6
				Hw_N5110_Print(0,0,"Smartrobot BD");								
 80002ec:	2000      	movs	r0, #0
 80002ee:	4601      	mov	r1, r0
 80002f0:	4a0a      	ldr	r2, [pc, #40]	; (800031c <Ap_GLcdMenu_ExeCmd+0xa8>)
 80002f2:	47a8      	blx	r5
				Hw_N5110_Print(0,2,"Count : %4d", --Count);							
 80002f4:	f8df e038 	ldr.w	lr, [pc, #56]	; 8000330 <Ap_GLcdMenu_ExeCmd+0xbc>
 80002f8:	2102      	movs	r1, #2
 80002fa:	f89e 0000 	ldrb.w	r0, [lr]
 80002fe:	4a08      	ldr	r2, [pc, #32]	; (8000320 <Ap_GLcdMenu_ExeCmd+0xac>)
 8000300:	f100 3cff 	add.w	ip, r0, #4294967295
 8000304:	e7d8      	b.n	80002b8 <Ap_GLcdMenu_ExeCmd+0x44>
 8000306:	bf00      	nop
 8000308:	0800024d 	.word	0x0800024d
 800030c:	08000bc9 	.word	0x08000bc9
 8000310:	08002699 	.word	0x08002699
 8000314:	08002771 	.word	0x08002771
 8000318:	080045ac 	.word	0x080045ac
 800031c:	080045b8 	.word	0x080045b8
 8000320:	080045c8 	.word	0x080045c8
 8000324:	080045a0 	.word	0x080045a0
 8000328:	080045d4 	.word	0x080045d4
 800032c:	080001c9 	.word	0x080001c9
 8000330:	20000400 	.word	0x20000400

08000334 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 8000334:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 8000336:	4909      	ldr	r1, [pc, #36]	; (800035c <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 8000338:	4602      	mov	r2, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800033a:	780b      	ldrb	r3, [r1, #0]
 800033c:	b153      	cbz	r3, 8000354 <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800033e:	4808      	ldr	r0, [pc, #32]	; (8000360 <print_byte_out+0x2c>)
 8000340:	4908      	ldr	r1, [pc, #32]	; (8000364 <print_byte_out+0x30>)
 8000342:	6805      	ldr	r5, [r0, #0]
 8000344:	680c      	ldr	r4, [r1, #0]
 8000346:	552a      	strb	r2, [r5, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8000348:	6802      	ldr	r2, [r0, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800034a:	1c63      	adds	r3, r4, #1
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800034c:	2000      	movs	r0, #0
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800034e:	600b      	str	r3, [r1, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8000350:	54d0      	strb	r0, [r2, r3]
 8000352:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 8000354:	4a04      	ldr	r2, [pc, #16]	; (8000368 <print_byte_out+0x34>)
 8000356:	4790      	blx	r2
 8000358:	bd38      	pop	{r3, r4, r5, pc}
 800035a:	bf00      	nop
 800035c:	20000408 	.word	0x20000408
 8000360:	200004d0 	.word	0x200004d0
 8000364:	20000404 	.word	0x20000404
 8000368:	0800128d 	.word	0x0800128d

0800036c <PrintString>:
        }
        return;
}

void PrintString(char *fmt, char *s)
{
 800036c:	b538      	push	{r3, r4, r5, lr}
        if (!fmt || !s) return;
 800036e:	b148      	cbz	r0, 8000384 <PrintString+0x18>
 8000370:	b141      	cbz	r1, 8000384 <PrintString+0x18>
        while (*s) print_byte_out(*s++);
 8000372:	7808      	ldrb	r0, [r1, #0]
 8000374:	b130      	cbz	r0, 8000384 <PrintString+0x18>
 8000376:	4d04      	ldr	r5, [pc, #16]	; (8000388 <PrintString+0x1c>)
 8000378:	460c      	mov	r4, r1
 800037a:	47a8      	blx	r5
 800037c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000380:	2800      	cmp	r0, #0
 8000382:	d1fa      	bne.n	800037a <PrintString+0xe>
 8000384:	bd38      	pop	{r3, r4, r5, pc}
 8000386:	bf00      	nop
 8000388:	08000335 	.word	0x08000335

0800038c <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 800038c:	b410      	push	{r4}
        long remainder;
        if (!s || !s[0]) return false;
 800038e:	b1e0      	cbz	r0, 80003ca <DecToLong+0x3e>
 8000390:	7802      	ldrb	r2, [r0, #0]
 8000392:	b1e2      	cbz	r2, 80003ce <DecToLong+0x42>


        for (*retval=0; *s; s++){
 8000394:	2200      	movs	r2, #0
 8000396:	600a      	str	r2, [r1, #0]
 8000398:	7803      	ldrb	r3, [r0, #0]
 800039a:	b1ab      	cbz	r3, 80003c8 <DecToLong+0x3c>
                if (*s < '0' || *s > '9') return false;
 800039c:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80003a0:	b2e4      	uxtb	r4, r4
 80003a2:	2c09      	cmp	r4, #9
 80003a4:	d902      	bls.n	80003ac <DecToLong+0x20>
 80003a6:	e012      	b.n	80003ce <DecToLong+0x42>
 80003a8:	2c09      	cmp	r4, #9
 80003aa:	d812      	bhi.n	80003d2 <DecToLong+0x46>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 80003ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
                remainder = *s - '0';
 80003b0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
                *retval = *retval * 10 + remainder;
 80003b4:	3a30      	subs	r2, #48	; 0x30
 80003b6:	600a      	str	r2, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80003b8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 80003bc:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80003c0:	fa5f f48c 	uxtb.w	r4, ip
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1ef      	bne.n	80003a8 <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 80003c8:	2001      	movs	r0, #1
}        // DecToLong.
 80003ca:	bc10      	pop	{r4}
 80003cc:	4770      	bx	lr
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 80003ce:	4610      	mov	r0, r2
 80003d0:	e7fb      	b.n	80003ca <DecToLong+0x3e>
 80003d2:	2000      	movs	r0, #0
 80003d4:	e7f9      	b.n	80003ca <DecToLong+0x3e>
 80003d6:	bf00      	nop

080003d8 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 80003d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80003dc:	7803      	ldrb	r3, [r0, #0]
        return;
}


void PrintDec(char *fmt, int l)
{
 80003de:	b085      	sub	sp, #20
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80003e0:	2600      	movs	r6, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 80003e2:	4605      	mov	r5, r0
 80003e4:	4689      	mov	r9, r1
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80003e6:	9603      	str	r6, [sp, #12]
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	f000 8092 	beq.w	8000512 <PrintDec+0x13a>
	{
		if (c=='d') break;
 80003ee:	2b64      	cmp	r3, #100	; 0x64
 80003f0:	f000 808f 	beq.w	8000512 <PrintDec+0x13a>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 80003f4:	4f9d      	ldr	r7, [pc, #628]	; (800066c <PrintDec+0x294>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 80003f6:	4634      	mov	r4, r6
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 80003f8:	46b0      	mov	r8, r6

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 80003fa:	f1a3 0031 	sub.w	r0, r3, #49	; 0x31
 80003fe:	b2c2      	uxtb	r2, r0
 8000400:	2a08      	cmp	r2, #8
 8000402:	f200 8082 	bhi.w	800050a <PrintDec+0x132>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000406:	5d2a      	ldrb	r2, [r5, r4]
 8000408:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800040c:	b2cb      	uxtb	r3, r1
 800040e:	2b09      	cmp	r3, #9
 8000410:	f200 812a 	bhi.w	8000668 <PrintDec+0x290>
 8000414:	2300      	movs	r3, #0
 8000416:	4668      	mov	r0, sp
			{
				tol[j] = s[i++];
 8000418:	3401      	adds	r4, #1
 800041a:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800041c:	5d2a      	ldrb	r2, [r5, r4]
 800041e:	3301      	adds	r3, #1
 8000420:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8000424:	fa5f fc8e 	uxtb.w	ip, lr
 8000428:	f1bc 0f09 	cmp.w	ip, #9
 800042c:	d9f4      	bls.n	8000418 <PrintDec+0x40>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800042e:	a804      	add	r0, sp, #16
 8000430:	18c2      	adds	r2, r0, r3
			i--;
			DecToLong(tol, &flagcnt);
 8000432:	a903      	add	r1, sp, #12
 8000434:	4668      	mov	r0, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8000436:	f802 8c10 	strb.w	r8, [r2, #-16]
			i--;
 800043a:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 800043c:	47b8      	blx	r7
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800043e:	3401      	adds	r4, #1
 8000440:	5d2b      	ldrb	r3, [r5, r4]
 8000442:	b10b      	cbz	r3, 8000448 <PrintDec+0x70>
	{
		if (c=='d') break;
 8000444:	2b64      	cmp	r3, #100	; 0x64
 8000446:	d1d8      	bne.n	80003fa <PrintDec+0x22>
		else if (c=='l') flagl=true;
		else continue;
	}

	// 위의 flag에 따라 출력.
	if (flagcnt)
 8000448:	9b03      	ldr	r3, [sp, #12]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d061      	beq.n	8000512 <PrintDec+0x13a>
	{
                if (flagcnt>9) flagcnt=9;
 800044e:	2b09      	cmp	r3, #9
 8000450:	f300 8100 	bgt.w	8000654 <PrintDec+0x27c>
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000454:	1e59      	subs	r1, r3, #1
 8000456:	f000 81b4 	beq.w	80007c2 <PrintDec+0x3ea>
 800045a:	3901      	subs	r1, #1
 800045c:	1e9c      	subs	r4, r3, #2
 800045e:	1ed8      	subs	r0, r3, #3
 8000460:	f001 0501 	and.w	r5, r1, #1
                retval *= num;
 8000464:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000466:	1e4a      	subs	r2, r1, #1
 8000468:	b181      	cbz	r1, 800048c <PrintDec+0xb4>
 800046a:	b12d      	cbz	r5, 8000478 <PrintDec+0xa0>
 800046c:	3a01      	subs	r2, #1
 800046e:	f1b2 3fff 	cmp.w	r2, #4294967295
                retval *= num;
 8000472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000476:	d009      	beq.n	800048c <PrintDec+0xb4>
                retval *= num;
 8000478:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800047c:	00d9      	lsls	r1, r3, #3
 800047e:	eb01 0543 	add.w	r5, r1, r3, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000482:	3a02      	subs	r2, #2
                retval *= num;
 8000484:	006b      	lsls	r3, r5, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000486:	f1b2 3fff 	cmp.w	r2, #4294967295
 800048a:	d1f5      	bne.n	8000478 <PrintDec+0xa0>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 800048c:	fb99 f8f3 	sdiv	r8, r9, r3
 8000490:	fb03 9918 	mls	r9, r3, r8, r9
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000494:	2c00      	cmp	r4, #0
 8000496:	f000 8198 	beq.w	80007ca <PrintDec+0x3f2>
 800049a:	f000 0201 	and.w	r2, r0, #1
                retval *= num;
 800049e:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 80004a0:	1e43      	subs	r3, r0, #1
 80004a2:	b180      	cbz	r0, 80004c6 <PrintDec+0xee>
 80004a4:	b12a      	cbz	r2, 80004b2 <PrintDec+0xda>
 80004a6:	3b01      	subs	r3, #1
 80004a8:	f1b3 3fff 	cmp.w	r3, #4294967295
                retval *= num;
 80004ac:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80004b0:	d009      	beq.n	80004c6 <PrintDec+0xee>
                retval *= num;
 80004b2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80004b6:	00c2      	lsls	r2, r0, #3
 80004b8:	eb02 0440 	add.w	r4, r2, r0, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80004bc:	3b02      	subs	r3, #2
                retval *= num;
 80004be:	0064      	lsls	r4, r4, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80004c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004c4:	d1f5      	bne.n	80004b2 <PrintDec+0xda>
 80004c6:	4f6a      	ldr	r7, [pc, #424]	; (8000670 <PrintDec+0x298>)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80004c8:	4d6a      	ldr	r5, [pc, #424]	; (8000674 <PrintDec+0x29c>)
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80004ca:	f04f 0801 	mov.w	r8, #1
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
 80004ce:	fb99 f3f4 	sdiv	r3, r9, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80004d2:	b2d8      	uxtb	r0, r3
 80004d4:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80004d6:	fb04 9913 	mls	r9, r4, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 80c0 	bne.w	8000660 <PrintDec+0x288>
 80004e0:	2c01      	cmp	r4, #1
 80004e2:	f000 80bd 	beq.w	8000660 <PrintDec+0x288>


                        if (leading_zero==true){
 80004e6:	f1b8 0f00 	cmp.w	r8, #0
 80004ea:	f000 80b9 	beq.w	8000660 <PrintDec+0x288>
                                if (flag0)        print_byte_out('0');
 80004ee:	2030      	movs	r0, #48	; 0x30
 80004f0:	b906      	cbnz	r6, 80004f4 <PrintDec+0x11c>
                                else                print_byte_out(' ');
 80004f2:	2020      	movs	r0, #32
 80004f4:	47b8      	blx	r7
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80004f6:	fb85 1c04 	smull	r1, ip, r5, r4
 80004fa:	17e1      	asrs	r1, r4, #31
 80004fc:	ebc1 04ac 	rsb	r4, r1, ip, asr #2
 8000500:	2c00      	cmp	r4, #0
 8000502:	dce4      	bgt.n	80004ce <PrintDec+0xf6>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 8000504:	b005      	add	sp, #20
 8000506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 800050a:	2b30      	cmp	r3, #48	; 0x30
 800050c:	bf08      	it	eq
 800050e:	2601      	moveq	r6, #1
 8000510:	e795      	b.n	800043e <PrintDec+0x66>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000512:	4959      	ldr	r1, [pc, #356]	; (8000678 <PrintDec+0x2a0>)
 8000514:	ea4f 75e9 	mov.w	r5, r9, asr #31
 8000518:	fb81 0309 	smull	r0, r3, r1, r9
                        remainder %= divisor;
 800051c:	4c57      	ldr	r4, [pc, #348]	; (800067c <PrintDec+0x2a4>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800051e:	ebc5 7323 	rsb	r3, r5, r3, asr #28
                        remainder %= divisor;
 8000522:	fb04 9913 	mls	r9, r4, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 8000526:	2b00      	cmp	r3, #0
 8000528:	f040 80c0 	bne.w	80006ac <PrintDec+0x2d4>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800052c:	4854      	ldr	r0, [pc, #336]	; (8000680 <PrintDec+0x2a8>)
 800052e:	ea4f 7ee9 	mov.w	lr, r9, asr #31
 8000532:	fb80 0509 	smull	r0, r5, r0, r9
                        remainder %= divisor;
 8000536:	4a53      	ldr	r2, [pc, #332]	; (8000684 <PrintDec+0x2ac>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000538:	ebce 6365 	rsb	r3, lr, r5, asr #25
 800053c:	4c4c      	ldr	r4, [pc, #304]	; (8000670 <PrintDec+0x298>)
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 800053e:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000540:	fb02 9513 	mls	r5, r2, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 8000544:	2b00      	cmp	r3, #0
 8000546:	f000 80c5 	beq.w	80006d4 <PrintDec+0x2fc>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800054a:	b2db      	uxtb	r3, r3
 800054c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000550:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000552:	484d      	ldr	r0, [pc, #308]	; (8000688 <PrintDec+0x2b0>)
 8000554:	17eb      	asrs	r3, r5, #31
 8000556:	fb80 0c05 	smull	r0, ip, r0, r5
                        remainder %= divisor;
 800055a:	4a4c      	ldr	r2, [pc, #304]	; (800068c <PrintDec+0x2b4>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800055c:	ebc3 53ac 	rsb	r3, r3, ip, asr #22
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000560:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000562:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000566:	2b00      	cmp	r3, #0
 8000568:	f000 80c4 	beq.w	80006f4 <PrintDec+0x31c>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800056c:	b2d9      	uxtb	r1, r3
 800056e:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000572:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000574:	4846      	ldr	r0, [pc, #280]	; (8000690 <PrintDec+0x2b8>)
 8000576:	17eb      	asrs	r3, r5, #31
 8000578:	fb80 0e05 	smull	r0, lr, r0, r5
                        remainder %= divisor;
 800057c:	4a45      	ldr	r2, [pc, #276]	; (8000694 <PrintDec+0x2bc>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800057e:	ebc3 43ae 	rsb	r3, r3, lr, asr #18
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000582:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000584:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000588:	2b00      	cmp	r3, #0
 800058a:	f000 80c3 	beq.w	8000714 <PrintDec+0x33c>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800058e:	fa5f fc83 	uxtb.w	ip, r3
 8000592:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 8000596:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000598:	483f      	ldr	r0, [pc, #252]	; (8000698 <PrintDec+0x2c0>)
 800059a:	17eb      	asrs	r3, r5, #31
 800059c:	fb80 0e05 	smull	r0, lr, r0, r5
                        remainder %= divisor;
 80005a0:	4a3e      	ldr	r2, [pc, #248]	; (800069c <PrintDec+0x2c4>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80005a2:	ebc3 336e 	rsb	r3, r3, lr, asr #13
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80005a6:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80005a8:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	f000 80c1 	beq.w	8000734 <PrintDec+0x35c>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80005b2:	b2d9      	uxtb	r1, r3
 80005b4:	f101 0030 	add.w	r0, r1, #48	; 0x30
 80005b8:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80005ba:	4839      	ldr	r0, [pc, #228]	; (80006a0 <PrintDec+0x2c8>)
 80005bc:	17eb      	asrs	r3, r5, #31
 80005be:	fb80 0205 	smull	r0, r2, r0, r5
                        remainder %= divisor;
 80005c2:	f242 7c10 	movw	ip, #10000	; 0x2710
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80005c6:	ebc3 3322 	rsb	r3, r3, r2, asr #12
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80005ca:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80005cc:	fb0c 5513 	mls	r5, ip, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	f000 80c0 	beq.w	8000756 <PrintDec+0x37e>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80005d6:	fa5f fe83 	uxtb.w	lr, r3
 80005da:	f10e 0030 	add.w	r0, lr, #48	; 0x30
 80005de:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80005e0:	4830      	ldr	r0, [pc, #192]	; (80006a4 <PrintDec+0x2cc>)
 80005e2:	17eb      	asrs	r3, r5, #31
 80005e4:	fb80 0205 	smull	r0, r2, r0, r5
                        remainder %= divisor;
 80005e8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80005ec:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80005f0:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80005f2:	fb0c 5513 	mls	r5, ip, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	f000 80be 	beq.w	8000778 <PrintDec+0x3a0>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80005fc:	b2d9      	uxtb	r1, r3
 80005fe:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000602:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000604:	4828      	ldr	r0, [pc, #160]	; (80006a8 <PrintDec+0x2d0>)
 8000606:	17eb      	asrs	r3, r5, #31
 8000608:	fb80 0e05 	smull	r0, lr, r0, r5
                        remainder %= divisor;
 800060c:	2264      	movs	r2, #100	; 0x64
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800060e:	ebc3 136e 	rsb	r3, r3, lr, asr #5
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000612:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000614:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000618:	2b00      	cmp	r3, #0
 800061a:	f000 80bd 	beq.w	8000798 <PrintDec+0x3c0>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800061e:	fa5f fc83 	uxtb.w	ip, r3
 8000622:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 8000626:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <PrintDec+0x29c>)
 800062a:	17eb      	asrs	r3, r5, #31
 800062c:	fb80 0e05 	smull	r0, lr, r0, r5
 8000630:	ebc3 03ae 	rsb	r3, r3, lr, asr #2
                        remainder %= divisor;
 8000634:	eb03 0283 	add.w	r2, r3, r3, lsl #2


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000638:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800063a:	eba5 0542 	sub.w	r5, r5, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 800063e:	2b00      	cmp	r3, #0
 8000640:	f000 80bb 	beq.w	80007ba <PrintDec+0x3e2>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000644:	b2d9      	uxtb	r1, r3
 8000646:	f101 0030 	add.w	r0, r1, #48	; 0x30
 800064a:	47a0      	blx	r4
 800064c:	b2e8      	uxtb	r0, r5
 800064e:	3030      	adds	r0, #48	; 0x30
 8000650:	47a0      	blx	r4
 8000652:	e757      	b.n	8000504 <PrintDec+0x12c>
	}

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 8000654:	2407      	movs	r4, #7
 8000656:	2709      	movs	r7, #9
 8000658:	9703      	str	r7, [sp, #12]
 800065a:	2006      	movs	r0, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 800065c:	4621      	mov	r1, r4
 800065e:	e6ff      	b.n	8000460 <PrintDec+0x88>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8000660:	47b8      	blx	r7
 8000662:	f04f 0800 	mov.w	r8, #0
 8000666:	e746      	b.n	80004f6 <PrintDec+0x11e>
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000668:	2300      	movs	r3, #0
 800066a:	e6e0      	b.n	800042e <PrintDec+0x56>
 800066c:	0800038d 	.word	0x0800038d
 8000670:	08000335 	.word	0x08000335
 8000674:	66666667 	.word	0x66666667
 8000678:	44b82fa1 	.word	0x44b82fa1
 800067c:	3b9aca00 	.word	0x3b9aca00
 8000680:	55e63b89 	.word	0x55e63b89
 8000684:	05f5e100 	.word	0x05f5e100
 8000688:	6b5fca6b 	.word	0x6b5fca6b
 800068c:	00989680 	.word	0x00989680
 8000690:	431bde83 	.word	0x431bde83
 8000694:	000f4240 	.word	0x000f4240
 8000698:	14f8b589 	.word	0x14f8b589
 800069c:	000186a0 	.word	0x000186a0
 80006a0:	68db8bad 	.word	0x68db8bad
 80006a4:	10624dd3 	.word	0x10624dd3
 80006a8:	51eb851f 	.word	0x51eb851f
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80006ac:	fa5f fc83 	uxtb.w	ip, r3
 80006b0:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 80006b4:	4c46      	ldr	r4, [pc, #280]	; (80007d0 <PrintDec+0x3f8>)
 80006b6:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006b8:	4846      	ldr	r0, [pc, #280]	; (80007d4 <PrintDec+0x3fc>)
 80006ba:	ea4f 7ee9 	mov.w	lr, r9, asr #31
 80006be:	fb80 0509 	smull	r0, r5, r0, r9
                        remainder %= divisor;
 80006c2:	4a45      	ldr	r2, [pc, #276]	; (80007d8 <PrintDec+0x400>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006c4:	ebce 6365 	rsb	r3, lr, r5, asr #25
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80006c8:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80006ca:	fb02 9513 	mls	r5, r2, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f47f af3b 	bne.w	800054a <PrintDec+0x172>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80006d4:	2900      	cmp	r1, #0
 80006d6:	f43f af38 	beq.w	800054a <PrintDec+0x172>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006da:	4840      	ldr	r0, [pc, #256]	; (80007dc <PrintDec+0x404>)
 80006dc:	17eb      	asrs	r3, r5, #31
 80006de:	fb80 0c05 	smull	r0, ip, r0, r5
                        remainder %= divisor;
 80006e2:	4a3f      	ldr	r2, [pc, #252]	; (80007e0 <PrintDec+0x408>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006e4:	ebc3 53ac 	rsb	r3, r3, ip, asr #22
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80006e8:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80006ea:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	f47f af3c 	bne.w	800056c <PrintDec+0x194>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80006f4:	2900      	cmp	r1, #0
 80006f6:	f43f af39 	beq.w	800056c <PrintDec+0x194>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80006fa:	483a      	ldr	r0, [pc, #232]	; (80007e4 <PrintDec+0x40c>)
 80006fc:	17eb      	asrs	r3, r5, #31
 80006fe:	fb80 0e05 	smull	r0, lr, r0, r5
                        remainder %= divisor;
 8000702:	4a39      	ldr	r2, [pc, #228]	; (80007e8 <PrintDec+0x410>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000704:	ebc3 43ae 	rsb	r3, r3, lr, asr #18
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000708:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800070a:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 800070e:	2b00      	cmp	r3, #0
 8000710:	f47f af3d 	bne.w	800058e <PrintDec+0x1b6>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000714:	2900      	cmp	r1, #0
 8000716:	f43f af3a 	beq.w	800058e <PrintDec+0x1b6>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800071a:	4834      	ldr	r0, [pc, #208]	; (80007ec <PrintDec+0x414>)
 800071c:	17eb      	asrs	r3, r5, #31
 800071e:	fb80 0e05 	smull	r0, lr, r0, r5
                        remainder %= divisor;
 8000722:	4a33      	ldr	r2, [pc, #204]	; (80007f0 <PrintDec+0x418>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000724:	ebc3 336e 	rsb	r3, r3, lr, asr #13
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000728:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800072a:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 800072e:	2b00      	cmp	r3, #0
 8000730:	f47f af3f 	bne.w	80005b2 <PrintDec+0x1da>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000734:	2900      	cmp	r1, #0
 8000736:	f43f af3c 	beq.w	80005b2 <PrintDec+0x1da>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800073a:	482e      	ldr	r0, [pc, #184]	; (80007f4 <PrintDec+0x41c>)
 800073c:	17eb      	asrs	r3, r5, #31
 800073e:	fb80 0205 	smull	r0, r2, r0, r5
                        remainder %= divisor;
 8000742:	f242 7c10 	movw	ip, #10000	; 0x2710
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000746:	ebc3 3322 	rsb	r3, r3, r2, asr #12
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800074a:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800074c:	fb0c 5513 	mls	r5, ip, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000750:	2b00      	cmp	r3, #0
 8000752:	f47f af40 	bne.w	80005d6 <PrintDec+0x1fe>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000756:	2900      	cmp	r1, #0
 8000758:	f43f af3d 	beq.w	80005d6 <PrintDec+0x1fe>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800075c:	4826      	ldr	r0, [pc, #152]	; (80007f8 <PrintDec+0x420>)
 800075e:	17eb      	asrs	r3, r5, #31
 8000760:	fb80 0205 	smull	r0, r2, r0, r5
                        remainder %= divisor;
 8000764:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000768:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800076c:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800076e:	fb0c 5513 	mls	r5, ip, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000772:	2b00      	cmp	r3, #0
 8000774:	f47f af42 	bne.w	80005fc <PrintDec+0x224>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000778:	2900      	cmp	r1, #0
 800077a:	f43f af3f 	beq.w	80005fc <PrintDec+0x224>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800077e:	481f      	ldr	r0, [pc, #124]	; (80007fc <PrintDec+0x424>)
 8000780:	17eb      	asrs	r3, r5, #31
 8000782:	fb80 0e05 	smull	r0, lr, r0, r5
                        remainder %= divisor;
 8000786:	2264      	movs	r2, #100	; 0x64
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000788:	ebc3 136e 	rsb	r3, r3, lr, asr #5
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800078c:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800078e:	fb02 5513 	mls	r5, r2, r3, r5


                        if (result!=0 || divisor==1) leading_zero = false;
 8000792:	2b00      	cmp	r3, #0
 8000794:	f47f af43 	bne.w	800061e <PrintDec+0x246>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000798:	2900      	cmp	r1, #0
 800079a:	f43f af40 	beq.w	800061e <PrintDec+0x246>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <PrintDec+0x428>)
 80007a0:	17eb      	asrs	r3, r5, #31
 80007a2:	fb80 0e05 	smull	r0, lr, r0, r5
 80007a6:	ebc3 03ae 	rsb	r3, r3, lr, asr #2
                        remainder %= divisor;
 80007aa:	eb03 0283 	add.w	r2, r3, r3, lsl #2


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80007ae:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80007b0:	eba5 0542 	sub.w	r5, r5, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f47f af45 	bne.w	8000644 <PrintDec+0x26c>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80007ba:	2900      	cmp	r1, #0
 80007bc:	f47f af46 	bne.w	800064c <PrintDec+0x274>
 80007c0:	e740      	b.n	8000644 <PrintDec+0x26c>
{
        long retval=num;
        cnt--;


        while (cnt--){
 80007c2:	1e9c      	subs	r4, r3, #2
 80007c4:	1ed8      	subs	r0, r3, #3
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80007c6:	230a      	movs	r3, #10
 80007c8:	e660      	b.n	800048c <PrintDec+0xb4>
 80007ca:	240a      	movs	r4, #10
 80007cc:	e67b      	b.n	80004c6 <PrintDec+0xee>
 80007ce:	bf00      	nop
 80007d0:	08000335 	.word	0x08000335
 80007d4:	55e63b89 	.word	0x55e63b89
 80007d8:	05f5e100 	.word	0x05f5e100
 80007dc:	6b5fca6b 	.word	0x6b5fca6b
 80007e0:	00989680 	.word	0x00989680
 80007e4:	431bde83 	.word	0x431bde83
 80007e8:	000f4240 	.word	0x000f4240
 80007ec:	14f8b589 	.word	0x14f8b589
 80007f0:	000186a0 	.word	0x000186a0
 80007f4:	68db8bad 	.word	0x68db8bad
 80007f8:	10624dd3 	.word	0x10624dd3
 80007fc:	51eb851f 	.word	0x51eb851f
 8000800:	66666667 	.word	0x66666667

08000804 <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000808:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800080a:	b086      	sub	sp, #24
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800080c:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800080e:	4605      	mov	r5, r0
 8000810:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000812:	9605      	str	r6, [sp, #20]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000814:	2b00      	cmp	r3, #0
 8000816:	f000 81ad 	beq.w	8000b74 <PrintHex+0x370>
                if (c=='x') break;
 800081a:	2b78      	cmp	r3, #120	; 0x78
 800081c:	d028      	beq.n	8000870 <PrintHex+0x6c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 800081e:	4fa8      	ldr	r7, [pc, #672]	; (8000ac0 <PrintHex+0x2bc>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 8000820:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000822:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 8000824:	f1a3 0031 	sub.w	r0, r3, #49	; 0x31
 8000828:	b2c2      	uxtb	r2, r0
 800082a:	2a08      	cmp	r2, #8
 800082c:	f200 80b8 	bhi.w	80009a0 <PrintHex+0x19c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000830:	5d2a      	ldrb	r2, [r5, r4]
 8000832:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000836:	b2cb      	uxtb	r3, r1
 8000838:	2b09      	cmp	r3, #9
 800083a:	f200 8174 	bhi.w	8000b26 <PrintHex+0x322>
 800083e:	2300      	movs	r3, #0
 8000840:	a802      	add	r0, sp, #8
                                tol[j] = s[i++];
 8000842:	3401      	adds	r4, #1
 8000844:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000846:	5d2a      	ldrb	r2, [r5, r4]
 8000848:	3301      	adds	r3, #1
 800084a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800084e:	fa5f fc8e 	uxtb.w	ip, lr
 8000852:	f1bc 0f09 	cmp.w	ip, #9
 8000856:	d9f4      	bls.n	8000842 <PrintHex+0x3e>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000858:	a906      	add	r1, sp, #24
 800085a:	18ca      	adds	r2, r1, r3
 800085c:	f802 8c10 	strb.w	r8, [r2, #-16]
                        i--;
                        DecToLong(tol, &flagcnt);
 8000860:	a905      	add	r1, sp, #20
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
 8000862:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 8000864:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000866:	3401      	adds	r4, #1
 8000868:	5d2b      	ldrb	r3, [r5, r4]
 800086a:	b10b      	cbz	r3, 8000870 <PrintHex+0x6c>
                if (c=='x') break;
 800086c:	2b78      	cmp	r3, #120	; 0x78
 800086e:	d1d9      	bne.n	8000824 <PrintHex+0x20>
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000870:	9b01      	ldr	r3, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000872:	9a05      	ldr	r2, [sp, #20]
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000874:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
 8000878:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 800087c:	1209      	asrs	r1, r1, #8
 800087e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8000882:	ea41 6c03 	orr.w	ip, r1, r3, lsl #24
 8000886:	ea4c 6013 	orr.w	r0, ip, r3, lsr #24
 800088a:	9001      	str	r0, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 800088c:	2a00      	cmp	r2, #0
 800088e:	f000 808b 	beq.w	80009a8 <PrintHex+0x1a4>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8000892:	f012 0f01 	tst.w	r2, #1
 8000896:	f040 8117 	bne.w	8000ac8 <PrintHex+0x2c4>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 800089a:	2701      	movs	r7, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800089c:	f1c2 0c08 	rsb	ip, r2, #8
 80008a0:	eb0c 70dc 	add.w	r0, ip, ip, lsr #31
 80008a4:	1043      	asrs	r3, r0, #1
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	dc77      	bgt.n	800099a <PrintHex+0x196>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80008aa:	ad01      	add	r5, sp, #4
 80008ac:	18e9      	adds	r1, r5, r3
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 80008ae:	460c      	mov	r4, r1
 80008b0:	f814 eb01 	ldrb.w	lr, [r4], #1
 80008b4:	43cb      	mvns	r3, r1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80008b6:	ea5f 121e 	movs.w	r2, lr, lsr #4
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80008ba:	f105 0904 	add.w	r9, r5, #4
 80008be:	f003 0a01 	and.w	sl, r3, #1
 80008c2:	4d80      	ldr	r5, [pc, #512]	; (8000ac4 <PrintHex+0x2c0>)
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80008c4:	f00e 080f 	and.w	r8, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80008c8:	f000 813a 	beq.w	8000b40 <PrintHex+0x33c>
                        if (uHex<10) uHex+='0';
 80008cc:	2a09      	cmp	r2, #9
 80008ce:	f240 8167 	bls.w	8000ba0 <PrintHex+0x39c>
                        else         uHex+='A'-10;
 80008d2:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 80008d6:	47a8      	blx	r5
 80008d8:	2700      	movs	r7, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80008da:	f1b8 0f00 	cmp.w	r8, #0
 80008de:	f000 8129 	beq.w	8000b34 <PrintHex+0x330>
                        if (lHex<10) lHex+='0';
 80008e2:	f1b8 0f09 	cmp.w	r8, #9
 80008e6:	f240 815e 	bls.w	8000ba6 <PrintHex+0x3a2>
                        else         lHex+='A'-10;
 80008ea:	f108 0037 	add.w	r0, r8, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80008ee:	47a8      	blx	r5
 80008f0:	2700      	movs	r7, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 80008f2:	454c      	cmp	r4, r9
 80008f4:	d051      	beq.n	800099a <PrintHex+0x196>
 80008f6:	f1ba 0f00 	cmp.w	sl, #0
 80008fa:	d019      	beq.n	8000930 <PrintHex+0x12c>
                        c = s[i];
 80008fc:	f814 1b01 	ldrb.w	r1, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000900:	090b      	lsrs	r3, r1, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000902:	f001 080f 	and.w	r8, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000906:	d033      	beq.n	8000970 <PrintHex+0x16c>
                        if (uHex<10) uHex+='0';
 8000908:	2b09      	cmp	r3, #9
 800090a:	f240 814f 	bls.w	8000bac <PrintHex+0x3a8>
                        else         uHex+='A'-10;
 800090e:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000912:	47a8      	blx	r5
 8000914:	2700      	movs	r7, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000916:	f1b8 0f00 	cmp.w	r8, #0
 800091a:	d034      	beq.n	8000986 <PrintHex+0x182>
                        if (lHex<10) lHex+='0';
 800091c:	f1b8 0f09 	cmp.w	r8, #9
 8000920:	f240 8147 	bls.w	8000bb2 <PrintHex+0x3ae>
                        else         lHex+='A'-10;
 8000924:	f108 0037 	add.w	r0, r8, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000928:	47a8      	blx	r5
 800092a:	2700      	movs	r7, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800092c:	454c      	cmp	r4, r9
 800092e:	d034      	beq.n	800099a <PrintHex+0x196>
                        c = s[i];
 8000930:	f814 2b01 	ldrb.w	r2, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000934:	0913      	lsrs	r3, r2, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000936:	f002 080f 	and.w	r8, r2, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800093a:	f000 80d9 	beq.w	8000af0 <PrintHex+0x2ec>
                        if (uHex<10) uHex+='0';
 800093e:	2b09      	cmp	r3, #9
 8000940:	f240 813a 	bls.w	8000bb8 <PrintHex+0x3b4>
                        else         uHex+='A'-10;
 8000944:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000948:	47a8      	blx	r5
 800094a:	2700      	movs	r7, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800094c:	f1b8 0f00 	cmp.w	r8, #0
 8000950:	f000 80d7 	beq.w	8000b02 <PrintHex+0x2fe>
                        if (lHex<10) lHex+='0';
 8000954:	f1b8 0f09 	cmp.w	r8, #9
 8000958:	f240 8110 	bls.w	8000b7c <PrintHex+0x378>
                        else         lHex+='A'-10;
 800095c:	f108 0037 	add.w	r0, r8, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000960:	47a8      	blx	r5
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000962:	f814 1b01 	ldrb.w	r1, [r4], #1
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000966:	2700      	movs	r7, #0
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000968:	090b      	lsrs	r3, r1, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800096a:	f001 080f 	and.w	r8, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800096e:	d1cb      	bne.n	8000908 <PrintHex+0x104>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000970:	2f00      	cmp	r7, #0
 8000972:	f000 811b 	beq.w	8000bac <PrintHex+0x3a8>
                                if (flag0) print_byte_out('0');
 8000976:	2e00      	cmp	r6, #0
 8000978:	f040 80cc 	bne.w	8000b14 <PrintHex+0x310>
                                else       print_byte_out(' ');
 800097c:	2020      	movs	r0, #32
 800097e:	47a8      	blx	r5
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000980:	f1b8 0f00 	cmp.w	r8, #0
 8000984:	d1ca      	bne.n	800091c <PrintHex+0x118>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000986:	2f00      	cmp	r7, #0
 8000988:	f000 8113 	beq.w	8000bb2 <PrintHex+0x3ae>
                                if (flag0) print_byte_out('0');
 800098c:	2e00      	cmp	r6, #0
 800098e:	f040 80be 	bne.w	8000b0e <PrintHex+0x30a>
                                else       print_byte_out(' ');
 8000992:	2020      	movs	r0, #32
 8000994:	47a8      	blx	r5
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000996:	454c      	cmp	r4, r9
 8000998:	d1ca      	bne.n	8000930 <PrintHex+0x12c>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
                }
        }
        return;
}
 800099a:	b006      	add	sp, #24
 800099c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 80009a0:	2b30      	cmp	r3, #48	; 0x30
 80009a2:	bf08      	it	eq
 80009a4:	2601      	moveq	r6, #1
 80009a6:	e75e      	b.n	8000866 <PrintHex+0x62>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80009a8:	f89d 0004 	ldrb.w	r0, [sp, #4]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80009ac:	0903      	lsrs	r3, r0, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80009ae:	f000 040f 	and.w	r4, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80009b2:	d048      	beq.n	8000a46 <PrintHex+0x242>
                        if (uHex<10) uHex+='0';
 80009b4:	2b09      	cmp	r3, #9
 80009b6:	f240 80f0 	bls.w	8000b9a <PrintHex+0x396>
                        else         uHex+='A'-10;
 80009ba:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 80009be:	4d41      	ldr	r5, [pc, #260]	; (8000ac4 <PrintHex+0x2c0>)
 80009c0:	47a8      	blx	r5
 80009c2:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80009c4:	2c00      	cmp	r4, #0
 80009c6:	d142      	bne.n	8000a4e <PrintHex+0x24a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f000 80f8 	beq.w	8000bbe <PrintHex+0x3ba>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80009ce:	f89d c005 	ldrb.w	ip, [sp, #5]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80009d2:	2201      	movs	r2, #1
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80009d4:	ea5f 131c 	movs.w	r3, ip, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80009d8:	f00c 040f 	and.w	r4, ip, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80009dc:	d045      	beq.n	8000a6a <PrintHex+0x266>
                        if (uHex<10) uHex+='0';
 80009de:	2b09      	cmp	r3, #9
 80009e0:	f240 80cf 	bls.w	8000b82 <PrintHex+0x37e>
                        else         uHex+='A'-10;
 80009e4:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 80009e8:	47a8      	blx	r5
 80009ea:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80009ec:	2c00      	cmp	r4, #0
 80009ee:	d142      	bne.n	8000a76 <PrintHex+0x272>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	f000 80c9 	beq.w	8000b88 <PrintHex+0x384>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80009f6:	f89d e006 	ldrb.w	lr, [sp, #6]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80009fa:	2201      	movs	r2, #1
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80009fc:	ea5f 131e 	movs.w	r3, lr, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a00:	f00e 040f 	and.w	r4, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a04:	d045      	beq.n	8000a92 <PrintHex+0x28e>
                        if (uHex<10) uHex+='0';
 8000a06:	2b09      	cmp	r3, #9
 8000a08:	f240 80c1 	bls.w	8000b8e <PrintHex+0x38a>
                        else         uHex+='A'-10;
 8000a0c:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000a10:	47a8      	blx	r5
 8000a12:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a14:	2c00      	cmp	r4, #0
 8000a16:	d141      	bne.n	8000a9c <PrintHex+0x298>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f000 80bb 	beq.w	8000b94 <PrintHex+0x390>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000a22:	2201      	movs	r2, #1
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a24:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a28:	091b      	lsrs	r3, r3, #4
 8000a2a:	d043      	beq.n	8000ab4 <PrintHex+0x2b0>
                        if (uHex<10) uHex+='0';
 8000a2c:	2b09      	cmp	r3, #9
 8000a2e:	d943      	bls.n	8000ab8 <PrintHex+0x2b4>
                        else         uHex+='A'-10;
 8000a30:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8000a34:	47a8      	blx	r5
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a36:	2c00      	cmp	r4, #0
 8000a38:	d078      	beq.n	8000b2c <PrintHex+0x328>
                        if (lHex<10) lHex+='0';
 8000a3a:	2c09      	cmp	r4, #9
 8000a3c:	d976      	bls.n	8000b2c <PrintHex+0x328>
                        else         lHex+='A'-10;
 8000a3e:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000a42:	47a8      	blx	r5
 8000a44:	e7a9      	b.n	800099a <PrintHex+0x196>
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a46:	2301      	movs	r3, #1
 8000a48:	4d1e      	ldr	r5, [pc, #120]	; (8000ac4 <PrintHex+0x2c0>)
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a4a:	2c00      	cmp	r4, #0
 8000a4c:	d0bc      	beq.n	80009c8 <PrintHex+0x1c4>
                        if (lHex<10) lHex+='0';
 8000a4e:	2c09      	cmp	r4, #9
 8000a50:	f240 80b5 	bls.w	8000bbe <PrintHex+0x3ba>
                        else         lHex+='A'-10;
 8000a54:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000a58:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a5a:	f89d c005 	ldrb.w	ip, [sp, #5]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000a5e:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a60:	ea5f 131c 	movs.w	r3, ip, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a64:	f00c 040f 	and.w	r4, ip, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a68:	d1b9      	bne.n	80009de <PrintHex+0x1da>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	f000 8089 	beq.w	8000b82 <PrintHex+0x37e>
 8000a70:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a72:	2c00      	cmp	r4, #0
 8000a74:	d0bc      	beq.n	80009f0 <PrintHex+0x1ec>
                        if (lHex<10) lHex+='0';
 8000a76:	2c09      	cmp	r4, #9
 8000a78:	f240 8086 	bls.w	8000b88 <PrintHex+0x384>
                        else         lHex+='A'-10;
 8000a7c:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000a80:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000a82:	f89d e006 	ldrb.w	lr, [sp, #6]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000a86:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a88:	ea5f 131e 	movs.w	r3, lr, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000a8c:	f00e 040f 	and.w	r4, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000a90:	d1b9      	bne.n	8000a06 <PrintHex+0x202>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d07b      	beq.n	8000b8e <PrintHex+0x38a>
 8000a96:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000a98:	2c00      	cmp	r4, #0
 8000a9a:	d0bd      	beq.n	8000a18 <PrintHex+0x214>
                        if (lHex<10) lHex+='0';
 8000a9c:	2c09      	cmp	r4, #9
 8000a9e:	d979      	bls.n	8000b94 <PrintHex+0x390>
                        else         lHex+='A'-10;
 8000aa0:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8000aa4:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000aa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000aaa:	2200      	movs	r2, #0
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000aac:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000ab0:	091b      	lsrs	r3, r3, #4
 8000ab2:	d1bb      	bne.n	8000a2c <PrintHex+0x228>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000ab4:	2a00      	cmp	r2, #0
 8000ab6:	d1be      	bne.n	8000a36 <PrintHex+0x232>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000ab8:	f103 0030 	add.w	r0, r3, #48	; 0x30
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000abc:	47a8      	blx	r5
 8000abe:	e7ba      	b.n	8000a36 <PrintHex+0x232>
 8000ac0:	0800038d 	.word	0x0800038d
 8000ac4:	08000335 	.word	0x08000335
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8000ac8:	43d0      	mvns	r0, r2
 8000aca:	3008      	adds	r0, #8
 8000acc:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 8000ad0:	1053      	asrs	r3, r2, #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 8000ad2:	f10d 0e04 	add.w	lr, sp, #4
 8000ad6:	f81e 7003 	ldrb.w	r7, [lr, r3]
                        if (lHex!=0) leading_zero=false;
 8000ada:	f017 030f 	ands.w	r3, r7, #15
 8000ade:	d03b      	beq.n	8000b58 <PrintHex+0x354>
                        if (lHex<10) lHex+='0';
 8000ae0:	2b09      	cmp	r3, #9
 8000ae2:	d949      	bls.n	8000b78 <PrintHex+0x374>
                        else         lHex+='A'-10;
 8000ae4:	3337      	adds	r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <PrintHex+0x3c0>)
 8000aea:	4798      	blx	r3
 8000aec:	2700      	movs	r7, #0
 8000aee:	e038      	b.n	8000b62 <PrintHex+0x35e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000af0:	2f00      	cmp	r7, #0
 8000af2:	d061      	beq.n	8000bb8 <PrintHex+0x3b4>
                                if (flag0) print_byte_out('0');
 8000af4:	b18e      	cbz	r6, 8000b1a <PrintHex+0x316>
 8000af6:	2030      	movs	r0, #48	; 0x30
 8000af8:	47a8      	blx	r5
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000afa:	f1b8 0f00 	cmp.w	r8, #0
 8000afe:	f47f af29 	bne.w	8000954 <PrintHex+0x150>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000b02:	2f00      	cmp	r7, #0
 8000b04:	d03a      	beq.n	8000b7c <PrintHex+0x378>
                                if (flag0) print_byte_out('0');
 8000b06:	b15e      	cbz	r6, 8000b20 <PrintHex+0x31c>
 8000b08:	2030      	movs	r0, #48	; 0x30
 8000b0a:	47a8      	blx	r5
 8000b0c:	e6f6      	b.n	80008fc <PrintHex+0xf8>
 8000b0e:	2030      	movs	r0, #48	; 0x30
 8000b10:	47a8      	blx	r5
 8000b12:	e70b      	b.n	800092c <PrintHex+0x128>
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000b14:	2030      	movs	r0, #48	; 0x30
 8000b16:	47a8      	blx	r5
 8000b18:	e6fd      	b.n	8000916 <PrintHex+0x112>
                                else       print_byte_out(' ');
 8000b1a:	2020      	movs	r0, #32
 8000b1c:	47a8      	blx	r5
 8000b1e:	e715      	b.n	800094c <PrintHex+0x148>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000b20:	2020      	movs	r0, #32
 8000b22:	47a8      	blx	r5
 8000b24:	e6ea      	b.n	80008fc <PrintHex+0xf8>

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000b26:	2300      	movs	r3, #0
 8000b28:	a802      	add	r0, sp, #8
 8000b2a:	e695      	b.n	8000858 <PrintHex+0x54>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000b2c:	f104 0030 	add.w	r0, r4, #48	; 0x30
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000b30:	47a8      	blx	r5
 8000b32:	e732      	b.n	800099a <PrintHex+0x196>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000b34:	2f00      	cmp	r7, #0
 8000b36:	d036      	beq.n	8000ba6 <PrintHex+0x3a2>
                                if (flag0) print_byte_out('0');
 8000b38:	b15e      	cbz	r6, 8000b52 <PrintHex+0x34e>
 8000b3a:	2030      	movs	r0, #48	; 0x30
 8000b3c:	47a8      	blx	r5
 8000b3e:	e6d8      	b.n	80008f2 <PrintHex+0xee>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000b40:	2f00      	cmp	r7, #0
 8000b42:	d02d      	beq.n	8000ba0 <PrintHex+0x39c>
                                if (flag0) print_byte_out('0');
 8000b44:	b116      	cbz	r6, 8000b4c <PrintHex+0x348>
 8000b46:	2030      	movs	r0, #48	; 0x30
 8000b48:	47a8      	blx	r5
 8000b4a:	e6c6      	b.n	80008da <PrintHex+0xd6>
                                else       print_byte_out(' ');
 8000b4c:	2020      	movs	r0, #32
 8000b4e:	47a8      	blx	r5
 8000b50:	e6c3      	b.n	80008da <PrintHex+0xd6>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000b52:	2020      	movs	r0, #32
 8000b54:	47a8      	blx	r5
 8000b56:	e6cc      	b.n	80008f2 <PrintHex+0xee>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000b58:	b13e      	cbz	r6, 8000b6a <PrintHex+0x366>
 8000b5a:	2030      	movs	r0, #48	; 0x30
 8000b5c:	4919      	ldr	r1, [pc, #100]	; (8000bc4 <PrintHex+0x3c0>)
 8000b5e:	4788      	blx	r1
 8000b60:	2701      	movs	r7, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 8000b62:	9a05      	ldr	r2, [sp, #20]
 8000b64:	3a01      	subs	r2, #1
 8000b66:	9205      	str	r2, [sp, #20]
 8000b68:	e698      	b.n	800089c <PrintHex+0x98>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000b6a:	4f16      	ldr	r7, [pc, #88]	; (8000bc4 <PrintHex+0x3c0>)
 8000b6c:	2020      	movs	r0, #32
 8000b6e:	47b8      	blx	r7
 8000b70:	2701      	movs	r7, #1
 8000b72:	e7f6      	b.n	8000b62 <PrintHex+0x35e>
}

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
 8000b74:	461e      	mov	r6, r3
 8000b76:	e67b      	b.n	8000870 <PrintHex+0x6c>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8000b78:	3330      	adds	r3, #48	; 0x30
 8000b7a:	e7b4      	b.n	8000ae6 <PrintHex+0x2e2>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000b7c:	f108 0030 	add.w	r0, r8, #48	; 0x30
 8000b80:	e6ee      	b.n	8000960 <PrintHex+0x15c>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000b82:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000b86:	e72f      	b.n	80009e8 <PrintHex+0x1e4>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000b88:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000b8c:	e778      	b.n	8000a80 <PrintHex+0x27c>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000b8e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000b92:	e73d      	b.n	8000a10 <PrintHex+0x20c>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000b94:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000b98:	e784      	b.n	8000aa4 <PrintHex+0x2a0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000b9a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000b9e:	e70e      	b.n	80009be <PrintHex+0x1ba>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000ba0:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8000ba4:	e697      	b.n	80008d6 <PrintHex+0xd2>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000ba6:	f108 0030 	add.w	r0, r8, #48	; 0x30
 8000baa:	e6a0      	b.n	80008ee <PrintHex+0xea>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000bac:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000bb0:	e6af      	b.n	8000912 <PrintHex+0x10e>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000bb2:	f108 0030 	add.w	r0, r8, #48	; 0x30
 8000bb6:	e6b7      	b.n	8000928 <PrintHex+0x124>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000bb8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000bbc:	e6c4      	b.n	8000948 <PrintHex+0x144>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000bbe:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000bc2:	e749      	b.n	8000a58 <PrintHex+0x254>
 8000bc4:	08000335 	.word	0x08000335

08000bc8 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 8000bc8:	b40f      	push	{r0, r1, r2, r3}
 8000bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bce:	b084      	sub	sp, #16
	int		i;
	va_list args;
	char	*s=fmt;
 8000bd0:	ad0a      	add	r5, sp, #40	; 0x28
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000bd2:	4b7e      	ldr	r3, [pc, #504]	; (8000dcc <Lb_printf+0x204>)
 8000bd4:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 8000bd6:	f855 4b04 	ldr.w	r4, [r5], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000bda:	4e7d      	ldr	r6, [pc, #500]	; (8000dd0 <Lb_printf+0x208>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000bdc:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8000ddc <Lb_printf+0x214>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000be0:	4f7c      	ldr	r7, [pc, #496]	; (8000dd4 <Lb_printf+0x20c>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000be2:	701a      	strb	r2, [r3, #0]
	
	while (*s)
 8000be4:	7820      	ldrb	r0, [r4, #0]
 8000be6:	2800      	cmp	r0, #0
 8000be8:	f000 80b8 	beq.w	8000d5c <Lb_printf+0x194>
	{
		if (*s=='%')
 8000bec:	2825      	cmp	r0, #37	; 0x25
 8000bee:	f040 80ba 	bne.w	8000d66 <Lb_printf+0x19e>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8000bf2:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000bf6:	7860      	ldrb	r0, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8000bf8:	3401      	adds	r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000bfa:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000bfe:	fa5f f18c 	uxtb.w	r1, ip
 8000c02:	2901      	cmp	r1, #1
 8000c04:	f240 80c9 	bls.w	8000d9a <Lb_printf+0x1d2>
 8000c08:	2873      	cmp	r0, #115	; 0x73
 8000c0a:	f000 80c6 	beq.w	8000d9a <Lb_printf+0x1d2>
 8000c0e:	2878      	cmp	r0, #120	; 0x78
 8000c10:	f000 80c3 	beq.w	8000d9a <Lb_printf+0x1d2>
 8000c14:	2825      	cmp	r0, #37	; 0x25
 8000c16:	f000 80c0 	beq.w	8000d9a <Lb_printf+0x1d2>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c1a:	f88d 0005 	strb.w	r0, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c1e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000c22:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	2a01      	cmp	r2, #1
 8000c2a:	f240 80bf 	bls.w	8000dac <Lb_printf+0x1e4>
 8000c2e:	2873      	cmp	r0, #115	; 0x73
 8000c30:	f000 80bc 	beq.w	8000dac <Lb_printf+0x1e4>
 8000c34:	2878      	cmp	r0, #120	; 0x78
 8000c36:	f000 80b9 	beq.w	8000dac <Lb_printf+0x1e4>
 8000c3a:	2825      	cmp	r0, #37	; 0x25
 8000c3c:	f000 80b6 	beq.w	8000dac <Lb_printf+0x1e4>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c40:	f88d 0006 	strb.w	r0, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c44:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000c48:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000c4c:	fa5f f18c 	uxtb.w	r1, ip
 8000c50:	2901      	cmp	r1, #1
 8000c52:	f240 80ad 	bls.w	8000db0 <Lb_printf+0x1e8>
 8000c56:	2873      	cmp	r0, #115	; 0x73
 8000c58:	f000 80aa 	beq.w	8000db0 <Lb_printf+0x1e8>
 8000c5c:	2878      	cmp	r0, #120	; 0x78
 8000c5e:	f000 80a7 	beq.w	8000db0 <Lb_printf+0x1e8>
 8000c62:	2825      	cmp	r0, #37	; 0x25
 8000c64:	f000 80a4 	beq.w	8000db0 <Lb_printf+0x1e8>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c68:	f88d 0007 	strb.w	r0, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c6c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000c70:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	2a01      	cmp	r2, #1
 8000c78:	f240 809c 	bls.w	8000db4 <Lb_printf+0x1ec>
 8000c7c:	2873      	cmp	r0, #115	; 0x73
 8000c7e:	f000 8099 	beq.w	8000db4 <Lb_printf+0x1ec>
 8000c82:	2878      	cmp	r0, #120	; 0x78
 8000c84:	f000 8096 	beq.w	8000db4 <Lb_printf+0x1ec>
 8000c88:	2825      	cmp	r0, #37	; 0x25
 8000c8a:	f000 8093 	beq.w	8000db4 <Lb_printf+0x1ec>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000c8e:	f88d 0008 	strb.w	r0, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000c92:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000c96:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000c9a:	fa5f f18c 	uxtb.w	r1, ip
 8000c9e:	2901      	cmp	r1, #1
 8000ca0:	f240 808a 	bls.w	8000db8 <Lb_printf+0x1f0>
 8000ca4:	2873      	cmp	r0, #115	; 0x73
 8000ca6:	f000 8087 	beq.w	8000db8 <Lb_printf+0x1f0>
 8000caa:	2878      	cmp	r0, #120	; 0x78
 8000cac:	f000 8084 	beq.w	8000db8 <Lb_printf+0x1f0>
 8000cb0:	2825      	cmp	r0, #37	; 0x25
 8000cb2:	f000 8081 	beq.w	8000db8 <Lb_printf+0x1f0>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000cb6:	f88d 0009 	strb.w	r0, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000cba:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000cbe:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	2a01      	cmp	r2, #1
 8000cc6:	d979      	bls.n	8000dbc <Lb_printf+0x1f4>
 8000cc8:	2873      	cmp	r0, #115	; 0x73
 8000cca:	d077      	beq.n	8000dbc <Lb_printf+0x1f4>
 8000ccc:	2878      	cmp	r0, #120	; 0x78
 8000cce:	d075      	beq.n	8000dbc <Lb_printf+0x1f4>
 8000cd0:	2825      	cmp	r0, #37	; 0x25
 8000cd2:	d073      	beq.n	8000dbc <Lb_printf+0x1f4>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000cd4:	f88d 000a 	strb.w	r0, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000cd8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000cdc:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000ce0:	fa5f f18c 	uxtb.w	r1, ip
 8000ce4:	2901      	cmp	r1, #1
 8000ce6:	d96b      	bls.n	8000dc0 <Lb_printf+0x1f8>
 8000ce8:	2873      	cmp	r0, #115	; 0x73
 8000cea:	d069      	beq.n	8000dc0 <Lb_printf+0x1f8>
 8000cec:	2878      	cmp	r0, #120	; 0x78
 8000cee:	d067      	beq.n	8000dc0 <Lb_printf+0x1f8>
 8000cf0:	2825      	cmp	r0, #37	; 0x25
 8000cf2:	d065      	beq.n	8000dc0 <Lb_printf+0x1f8>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000cf4:	f88d 000b 	strb.w	r0, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000cf8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000cfc:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	2a01      	cmp	r2, #1
 8000d04:	d95e      	bls.n	8000dc4 <Lb_printf+0x1fc>
 8000d06:	2873      	cmp	r0, #115	; 0x73
 8000d08:	d05c      	beq.n	8000dc4 <Lb_printf+0x1fc>
 8000d0a:	2878      	cmp	r0, #120	; 0x78
 8000d0c:	d05a      	beq.n	8000dc4 <Lb_printf+0x1fc>
 8000d0e:	2825      	cmp	r0, #37	; 0x25
 8000d10:	d058      	beq.n	8000dc4 <Lb_printf+0x1fc>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d12:	f88d 000c 	strb.w	r0, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000d16:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000d1a:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000d1e:	fa5f f18c 	uxtb.w	r1, ip
 8000d22:	2901      	cmp	r1, #1
 8000d24:	d950      	bls.n	8000dc8 <Lb_printf+0x200>
 8000d26:	2873      	cmp	r0, #115	; 0x73
 8000d28:	d04e      	beq.n	8000dc8 <Lb_printf+0x200>
 8000d2a:	2878      	cmp	r0, #120	; 0x78
 8000d2c:	d04c      	beq.n	8000dc8 <Lb_printf+0x200>
 8000d2e:	2825      	cmp	r0, #37	; 0x25
 8000d30:	d04a      	beq.n	8000dc8 <Lb_printf+0x200>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000d32:	f88d 000d 	strb.w	r0, [sp, #13]
 8000d36:	f814 0f01 	ldrb.w	r0, [r4, #1]!
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000d3a:	3401      	adds	r4, #1
 8000d3c:	2864      	cmp	r0, #100	; 0x64
 8000d3e:	d027      	beq.n	8000d90 <Lb_printf+0x1c8>
 8000d40:	d814      	bhi.n	8000d6c <Lb_printf+0x1a4>
 8000d42:	2825      	cmp	r0, #37	; 0x25
 8000d44:	d01d      	beq.n	8000d82 <Lb_printf+0x1ba>
 8000d46:	2863      	cmp	r0, #99	; 0x63
 8000d48:	f47f af4c 	bne.w	8000be4 <Lb_printf+0x1c>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000d4c:	f855 0b04 	ldr.w	r0, [r5], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000d50:	b2c0      	uxtb	r0, r0
 8000d52:	47b0      	blx	r6
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000d54:	7820      	ldrb	r0, [r4, #0]
 8000d56:	2800      	cmp	r0, #0
 8000d58:	f47f af48 	bne.w	8000bec <Lb_printf+0x24>
			s++;
		}
	}
	va_end(args);
	return;
}
 8000d5c:	b004      	add	sp, #16
 8000d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d62:	b004      	add	sp, #16
 8000d64:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000d66:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8000d68:	3401      	adds	r4, #1
 8000d6a:	e73b      	b.n	8000be4 <Lb_printf+0x1c>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000d6c:	2873      	cmp	r0, #115	; 0x73
 8000d6e:	d00a      	beq.n	8000d86 <Lb_printf+0x1be>
 8000d70:	2878      	cmp	r0, #120	; 0x78
 8000d72:	f47f af37 	bne.w	8000be4 <Lb_printf+0x1c>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000d76:	a801      	add	r0, sp, #4
 8000d78:	f855 1b04 	ldr.w	r1, [r5], #4
 8000d7c:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <Lb_printf+0x210>)
 8000d7e:	4790      	blx	r2
					break;
 8000d80:	e730      	b.n	8000be4 <Lb_printf+0x1c>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000d82:	47b0      	blx	r6
				case 's' :
					PrintString(format, va_arg(args, char *));
 					break;
				case '%' :
					PrintChar("%c", '%');
					break;
 8000d84:	e72e      	b.n	8000be4 <Lb_printf+0x1c>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000d86:	a801      	add	r0, sp, #4
 8000d88:	f855 1b04 	ldr.w	r1, [r5], #4
 8000d8c:	47b8      	blx	r7
 					break;
 8000d8e:	e729      	b.n	8000be4 <Lb_printf+0x1c>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000d90:	a801      	add	r0, sp, #4
 8000d92:	f855 1b04 	ldr.w	r1, [r5], #4
 8000d96:	47c0      	blx	r8
					break;
 8000d98:	e724      	b.n	8000be4 <Lb_printf+0x1c>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000d9a:	2301      	movs	r3, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000d9c:	a904      	add	r1, sp, #16
 8000d9e:	18cb      	adds	r3, r1, r3
					format[i] = '\0';
 8000da0:	2200      	movs	r2, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000da2:	f803 0c0c 	strb.w	r0, [r3, #-12]
					format[i] = '\0';
 8000da6:	f803 2c0b 	strb.w	r2, [r3, #-11]
                	break;
 8000daa:	e7c6      	b.n	8000d3a <Lb_printf+0x172>
				}
				else 
				{
					format[i++] = *s++;
 8000dac:	2302      	movs	r3, #2
 8000dae:	e7f5      	b.n	8000d9c <Lb_printf+0x1d4>
 8000db0:	2303      	movs	r3, #3
 8000db2:	e7f3      	b.n	8000d9c <Lb_printf+0x1d4>
 8000db4:	2304      	movs	r3, #4
 8000db6:	e7f1      	b.n	8000d9c <Lb_printf+0x1d4>
 8000db8:	2305      	movs	r3, #5
 8000dba:	e7ef      	b.n	8000d9c <Lb_printf+0x1d4>
 8000dbc:	2306      	movs	r3, #6
 8000dbe:	e7ed      	b.n	8000d9c <Lb_printf+0x1d4>
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	e7eb      	b.n	8000d9c <Lb_printf+0x1d4>
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	e7e9      	b.n	8000d9c <Lb_printf+0x1d4>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000dc8:	2309      	movs	r3, #9
 8000dca:	e7e7      	b.n	8000d9c <Lb_printf+0x1d4>
 8000dcc:	20000408 	.word	0x20000408
 8000dd0:	08000335 	.word	0x08000335
 8000dd4:	0800036d 	.word	0x0800036d
 8000dd8:	08000805 	.word	0x08000805
 8000ddc:	080003d9 	.word	0x080003d9

08000de0 <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8000de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8000de4:	4f7f      	ldr	r7, [pc, #508]	; (8000fe4 <Lb_vsprintf+0x204>)
 8000de6:	2501      	movs	r5, #1
	pStrPrintBuf = pStr;
 8000de8:	4c7f      	ldr	r4, [pc, #508]	; (8000fe8 <Lb_vsprintf+0x208>)
	StrPrintBufIndex = 0;
 8000dea:	4b80      	ldr	r3, [pc, #512]	; (8000fec <Lb_vsprintf+0x20c>)
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 8000dec:	703d      	strb	r5, [r7, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8000dee:	4616      	mov	r6, r2



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000df0:	4d7f      	ldr	r5, [pc, #508]	; (8000ff0 <Lb_vsprintf+0x210>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8000df2:	2200      	movs	r2, #0
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000df4:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8000ffc <Lb_vsprintf+0x21c>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000df8:	4f7e      	ldr	r7, [pc, #504]	; (8000ff4 <Lb_vsprintf+0x214>)
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8000dfa:	6020      	str	r0, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8000dfc:	b084      	sub	sp, #16
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8000dfe:	601a      	str	r2, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
	int		i;
	char	*s=fmt;
 8000e00:	460c      	mov	r4, r1
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8000e02:	7820      	ldrb	r0, [r4, #0]
 8000e04:	2800      	cmp	r0, #0
 8000e06:	f000 80b7 	beq.w	8000f78 <Lb_vsprintf+0x198>
	{
		if (*s=='%')
 8000e0a:	2825      	cmp	r0, #37	; 0x25
 8000e0c:	f040 80b7 	bne.w	8000f7e <Lb_vsprintf+0x19e>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8000e10:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e14:	7860      	ldrb	r0, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8000e16:	3401      	adds	r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e18:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000e1c:	fa5f f18c 	uxtb.w	r1, ip
 8000e20:	2901      	cmp	r1, #1
 8000e22:	f240 80c6 	bls.w	8000fb2 <Lb_vsprintf+0x1d2>
 8000e26:	2873      	cmp	r0, #115	; 0x73
 8000e28:	f000 80c3 	beq.w	8000fb2 <Lb_vsprintf+0x1d2>
 8000e2c:	2878      	cmp	r0, #120	; 0x78
 8000e2e:	f000 80c0 	beq.w	8000fb2 <Lb_vsprintf+0x1d2>
 8000e32:	2825      	cmp	r0, #37	; 0x25
 8000e34:	f000 80bd 	beq.w	8000fb2 <Lb_vsprintf+0x1d2>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e38:	f88d 0005 	strb.w	r0, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e3c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000e40:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	2a01      	cmp	r2, #1
 8000e48:	f240 80bc 	bls.w	8000fc4 <Lb_vsprintf+0x1e4>
 8000e4c:	2873      	cmp	r0, #115	; 0x73
 8000e4e:	f000 80b9 	beq.w	8000fc4 <Lb_vsprintf+0x1e4>
 8000e52:	2878      	cmp	r0, #120	; 0x78
 8000e54:	f000 80b6 	beq.w	8000fc4 <Lb_vsprintf+0x1e4>
 8000e58:	2825      	cmp	r0, #37	; 0x25
 8000e5a:	f000 80b3 	beq.w	8000fc4 <Lb_vsprintf+0x1e4>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e5e:	f88d 0006 	strb.w	r0, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e62:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000e66:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000e6a:	fa5f f18c 	uxtb.w	r1, ip
 8000e6e:	2901      	cmp	r1, #1
 8000e70:	f240 80aa 	bls.w	8000fc8 <Lb_vsprintf+0x1e8>
 8000e74:	2873      	cmp	r0, #115	; 0x73
 8000e76:	f000 80a7 	beq.w	8000fc8 <Lb_vsprintf+0x1e8>
 8000e7a:	2878      	cmp	r0, #120	; 0x78
 8000e7c:	f000 80a4 	beq.w	8000fc8 <Lb_vsprintf+0x1e8>
 8000e80:	2825      	cmp	r0, #37	; 0x25
 8000e82:	f000 80a1 	beq.w	8000fc8 <Lb_vsprintf+0x1e8>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000e86:	f88d 0007 	strb.w	r0, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000e8a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000e8e:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	2a01      	cmp	r2, #1
 8000e96:	f240 8099 	bls.w	8000fcc <Lb_vsprintf+0x1ec>
 8000e9a:	2873      	cmp	r0, #115	; 0x73
 8000e9c:	f000 8096 	beq.w	8000fcc <Lb_vsprintf+0x1ec>
 8000ea0:	2878      	cmp	r0, #120	; 0x78
 8000ea2:	f000 8093 	beq.w	8000fcc <Lb_vsprintf+0x1ec>
 8000ea6:	2825      	cmp	r0, #37	; 0x25
 8000ea8:	f000 8090 	beq.w	8000fcc <Lb_vsprintf+0x1ec>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000eac:	f88d 0008 	strb.w	r0, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000eb0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000eb4:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000eb8:	fa5f f18c 	uxtb.w	r1, ip
 8000ebc:	2901      	cmp	r1, #1
 8000ebe:	f240 8087 	bls.w	8000fd0 <Lb_vsprintf+0x1f0>
 8000ec2:	2873      	cmp	r0, #115	; 0x73
 8000ec4:	f000 8084 	beq.w	8000fd0 <Lb_vsprintf+0x1f0>
 8000ec8:	2878      	cmp	r0, #120	; 0x78
 8000eca:	f000 8081 	beq.w	8000fd0 <Lb_vsprintf+0x1f0>
 8000ece:	2825      	cmp	r0, #37	; 0x25
 8000ed0:	d07e      	beq.n	8000fd0 <Lb_vsprintf+0x1f0>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ed2:	f88d 0009 	strb.w	r0, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ed6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000eda:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	2a01      	cmp	r2, #1
 8000ee2:	d977      	bls.n	8000fd4 <Lb_vsprintf+0x1f4>
 8000ee4:	2873      	cmp	r0, #115	; 0x73
 8000ee6:	d075      	beq.n	8000fd4 <Lb_vsprintf+0x1f4>
 8000ee8:	2878      	cmp	r0, #120	; 0x78
 8000eea:	d073      	beq.n	8000fd4 <Lb_vsprintf+0x1f4>
 8000eec:	2825      	cmp	r0, #37	; 0x25
 8000eee:	d071      	beq.n	8000fd4 <Lb_vsprintf+0x1f4>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000ef0:	f88d 000a 	strb.w	r0, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000ef4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000ef8:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000efc:	fa5f f18c 	uxtb.w	r1, ip
 8000f00:	2901      	cmp	r1, #1
 8000f02:	d969      	bls.n	8000fd8 <Lb_vsprintf+0x1f8>
 8000f04:	2873      	cmp	r0, #115	; 0x73
 8000f06:	d067      	beq.n	8000fd8 <Lb_vsprintf+0x1f8>
 8000f08:	2878      	cmp	r0, #120	; 0x78
 8000f0a:	d065      	beq.n	8000fd8 <Lb_vsprintf+0x1f8>
 8000f0c:	2825      	cmp	r0, #37	; 0x25
 8000f0e:	d063      	beq.n	8000fd8 <Lb_vsprintf+0x1f8>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f10:	f88d 000b 	strb.w	r0, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f14:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000f18:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	2a01      	cmp	r2, #1
 8000f20:	d95c      	bls.n	8000fdc <Lb_vsprintf+0x1fc>
 8000f22:	2873      	cmp	r0, #115	; 0x73
 8000f24:	d05a      	beq.n	8000fdc <Lb_vsprintf+0x1fc>
 8000f26:	2878      	cmp	r0, #120	; 0x78
 8000f28:	d058      	beq.n	8000fdc <Lb_vsprintf+0x1fc>
 8000f2a:	2825      	cmp	r0, #37	; 0x25
 8000f2c:	d056      	beq.n	8000fdc <Lb_vsprintf+0x1fc>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f2e:	f88d 000c 	strb.w	r0, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000f32:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000f36:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000f3a:	fa5f f18c 	uxtb.w	r1, ip
 8000f3e:	2901      	cmp	r1, #1
 8000f40:	d94e      	bls.n	8000fe0 <Lb_vsprintf+0x200>
 8000f42:	2873      	cmp	r0, #115	; 0x73
 8000f44:	d04c      	beq.n	8000fe0 <Lb_vsprintf+0x200>
 8000f46:	2878      	cmp	r0, #120	; 0x78
 8000f48:	d04a      	beq.n	8000fe0 <Lb_vsprintf+0x200>
 8000f4a:	2825      	cmp	r0, #37	; 0x25
 8000f4c:	d048      	beq.n	8000fe0 <Lb_vsprintf+0x200>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000f4e:	f88d 000d 	strb.w	r0, [sp, #13]
 8000f52:	f814 0f01 	ldrb.w	r0, [r4, #1]!
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000f56:	3401      	adds	r4, #1
 8000f58:	2864      	cmp	r0, #100	; 0x64
 8000f5a:	d025      	beq.n	8000fa8 <Lb_vsprintf+0x1c8>
 8000f5c:	d812      	bhi.n	8000f84 <Lb_vsprintf+0x1a4>
 8000f5e:	2825      	cmp	r0, #37	; 0x25
 8000f60:	d01b      	beq.n	8000f9a <Lb_vsprintf+0x1ba>
 8000f62:	2863      	cmp	r0, #99	; 0x63
 8000f64:	f47f af4d 	bne.w	8000e02 <Lb_vsprintf+0x22>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000f68:	f856 0b04 	ldr.w	r0, [r6], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000f6c:	b2c0      	uxtb	r0, r0
 8000f6e:	47a8      	blx	r5
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8000f70:	7820      	ldrb	r0, [r4, #0]
 8000f72:	2800      	cmp	r0, #0
 8000f74:	f47f af49 	bne.w	8000e0a <Lb_vsprintf+0x2a>
			s++;
		}
	}
	
	return;
}
 8000f78:	b004      	add	sp, #16
 8000f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000f7e:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8000f80:	3401      	adds	r4, #1
 8000f82:	e73e      	b.n	8000e02 <Lb_vsprintf+0x22>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000f84:	2873      	cmp	r0, #115	; 0x73
 8000f86:	d00a      	beq.n	8000f9e <Lb_vsprintf+0x1be>
 8000f88:	2878      	cmp	r0, #120	; 0x78
 8000f8a:	f47f af3a 	bne.w	8000e02 <Lb_vsprintf+0x22>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000f8e:	a801      	add	r0, sp, #4
 8000f90:	f856 1b04 	ldr.w	r1, [r6], #4
 8000f94:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <Lb_vsprintf+0x218>)
 8000f96:	4790      	blx	r2
					break;
 8000f98:	e733      	b.n	8000e02 <Lb_vsprintf+0x22>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000f9a:	47a8      	blx	r5
				case 's' :
					PrintString(format, va_arg(args, char *));
 					break;
				case '%' :
					PrintChar("%c", '%');
					break;
 8000f9c:	e731      	b.n	8000e02 <Lb_vsprintf+0x22>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000f9e:	a801      	add	r0, sp, #4
 8000fa0:	f856 1b04 	ldr.w	r1, [r6], #4
 8000fa4:	47b8      	blx	r7
 					break;
 8000fa6:	e72c      	b.n	8000e02 <Lb_vsprintf+0x22>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000fa8:	a801      	add	r0, sp, #4
 8000faa:	f856 1b04 	ldr.w	r1, [r6], #4
 8000fae:	47c0      	blx	r8
					break;
 8000fb0:	e727      	b.n	8000e02 <Lb_vsprintf+0x22>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000fb2:	2301      	movs	r3, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000fb4:	a904      	add	r1, sp, #16
 8000fb6:	18cb      	adds	r3, r1, r3
					format[i] = '\0';
 8000fb8:	2200      	movs	r2, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000fba:	f803 0c0c 	strb.w	r0, [r3, #-12]
					format[i] = '\0';
 8000fbe:	f803 2c0b 	strb.w	r2, [r3, #-11]
                	break;
 8000fc2:	e7c8      	b.n	8000f56 <Lb_vsprintf+0x176>
				}
				else 
				{
					format[i++] = *s++;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e7f5      	b.n	8000fb4 <Lb_vsprintf+0x1d4>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e7f3      	b.n	8000fb4 <Lb_vsprintf+0x1d4>
 8000fcc:	2304      	movs	r3, #4
 8000fce:	e7f1      	b.n	8000fb4 <Lb_vsprintf+0x1d4>
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	e7ef      	b.n	8000fb4 <Lb_vsprintf+0x1d4>
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	e7ed      	b.n	8000fb4 <Lb_vsprintf+0x1d4>
 8000fd8:	2307      	movs	r3, #7
 8000fda:	e7eb      	b.n	8000fb4 <Lb_vsprintf+0x1d4>
 8000fdc:	2308      	movs	r3, #8
 8000fde:	e7e9      	b.n	8000fb4 <Lb_vsprintf+0x1d4>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000fe0:	2309      	movs	r3, #9
 8000fe2:	e7e7      	b.n	8000fb4 <Lb_vsprintf+0x1d4>
 8000fe4:	20000408 	.word	0x20000408
 8000fe8:	200004d0 	.word	0x200004d0
 8000fec:	20000404 	.word	0x20000404
 8000ff0:	08000335 	.word	0x08000335
 8000ff4:	0800036d 	.word	0x0800036d
 8000ff8:	08000805 	.word	0x08000805
 8000ffc:	080003d9 	.word	0x080003d9

08001000 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8001000:	4668      	mov	r0, sp
 8001002:	f020 0107 	bic.w	r1, r0, #7
 8001006:	468d      	mov	sp, r1
 8001008:	b579      	push	{r0, r3, r4, r5, r6, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800100a:	492b      	ldr	r1, [pc, #172]	; (80010b8 <zero_loop+0x5a>)
 800100c:	4c2b      	ldr	r4, [pc, #172]	; (80010bc <zero_loop+0x5e>)
 800100e:	42a1      	cmp	r1, r4
 8001010:	d221      	bcs.n	8001056 <Hw_StartUp_Init+0x56>
 8001012:	482b      	ldr	r0, [pc, #172]	; (80010c0 <zero_loop+0x62>)
	{
		*(pulDest++) = *(pulSrc++);
 8001014:	460b      	mov	r3, r1
 8001016:	4602      	mov	r2, r0
 8001018:	f852 6b04 	ldr.w	r6, [r2], #4
 800101c:	43cd      	mvns	r5, r1
 800101e:	f843 6b04 	str.w	r6, [r3], #4
 8001022:	1965      	adds	r5, r4, r5
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001024:	42a3      	cmp	r3, r4
 8001026:	f3c5 0580 	ubfx	r5, r5, #2, #1
 800102a:	d214      	bcs.n	8001056 <Hw_StartUp_Init+0x56>
 800102c:	b13d      	cbz	r5, 800103e <Hw_StartUp_Init+0x3e>
	{
		*(pulDest++) = *(pulSrc++);
 800102e:	6815      	ldr	r5, [r2, #0]
 8001030:	f100 0208 	add.w	r2, r0, #8
 8001034:	601d      	str	r5, [r3, #0]
 8001036:	f101 0308 	add.w	r3, r1, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800103a:	42a3      	cmp	r3, r4
 800103c:	d20b      	bcs.n	8001056 <Hw_StartUp_Init+0x56>
	{
		*(pulDest++) = *(pulSrc++);
 800103e:	4610      	mov	r0, r2
 8001040:	f850 5b04 	ldr.w	r5, [r0], #4
 8001044:	4619      	mov	r1, r3
 8001046:	f841 5b04 	str.w	r5, [r1], #4
 800104a:	6855      	ldr	r5, [r2, #4]
 800104c:	1d02      	adds	r2, r0, #4
 800104e:	605d      	str	r5, [r3, #4]
 8001050:	1d0b      	adds	r3, r1, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8001052:	42a3      	cmp	r3, r4
 8001054:	d3f3      	bcc.n	800103e <Hw_StartUp_Init+0x3e>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 8001056:	481e      	ldr	r0, [pc, #120]	; (80010d0 <zero_loop+0x72>)
 8001058:	491e      	ldr	r1, [pc, #120]	; (80010d4 <zero_loop+0x76>)
 800105a:	f04f 0200 	mov.w	r2, #0

0800105e <zero_loop>:
 800105e:	4288      	cmp	r0, r1
 8001060:	bfb8      	it	lt
 8001062:	f840 2b04 	strlt.w	r2, [r0], #4
 8001066:	dbfa      	blt.n	800105e <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8001068:	4916      	ldr	r1, [pc, #88]	; (80010c4 <zero_loop+0x66>)
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
	
	u32 TimeOutCnt  = 0;
 800106a:	2300      	movs	r3, #0
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 800106c:	6808      	ldr	r0, [r1, #0]
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 800106e:	460a      	mov	r2, r1
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8001070:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8001074:	6008      	str	r0, [r1, #0]
 8001076:	e006      	b.n	8001086 <zero_loop+0x28>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8001078:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800107a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 800107e:	d107      	bne.n	8001090 <zero_loop+0x32>
 8001080:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001084:	d004      	beq.n	8001090 <zero_loop+0x32>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8001086:	6811      	ldr	r1, [r2, #0]
		TimeOutCnt++;		
 8001088:	3302      	adds	r3, #2
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800108a:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 800108e:	d0f3      	beq.n	8001078 <zero_loop+0x1a>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8001090:	490d      	ldr	r1, [pc, #52]	; (80010c8 <zero_loop+0x6a>)
 8001092:	680b      	ldr	r3, [r1, #0]
 8001094:	f043 0010 	orr.w	r0, r3, #16
 8001098:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 800109a:	680a      	ldr	r2, [r1, #0]
 800109c:	f022 0303 	bic.w	r3, r2, #3
 80010a0:	600b      	str	r3, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 80010a2:	6808      	ldr	r0, [r1, #0]


    main();
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <zero_loop+0x6e>)

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 80010a6:	f040 0202 	orr.w	r2, r0, #2
 80010aa:	600a      	str	r2, [r1, #0]


    main();
 80010ac:	4798      	blx	r3

}
 80010ae:	e8bd 4079 	ldmia.w	sp!, {r0, r3, r4, r5, r6, lr}
 80010b2:	4685      	mov	sp, r0
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000
 80010bc:	2000030c 	.word	0x2000030c
 80010c0:	08004698 	.word	0x08004698
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40022000 	.word	0x40022000
 80010cc:	08000019 	.word	0x08000019
 80010d0:	20000400 	.word	0x20000400
 80010d4:	20001244 	.word	0x20001244

080010d8 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 80010d8:	b508      	push	{r3, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 80010da:	480f      	ldr	r0, [pc, #60]	; (8001118 <Hw_Init+0x40>)
 80010dc:	4780      	blx	r0
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <Hw_Init+0x44>)
 80010e0:	4790      	blx	r2
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <Hw_Init+0x48>)
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80010e4:	490f      	ldr	r1, [pc, #60]	; (8001124 <Hw_Init+0x4c>)
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80010e6:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 80010ea:	6003      	str	r3, [r0, #0]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <Hw_Init+0x50>)
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80010ee:	6041      	str	r1, [r0, #4]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80010f0:	490e      	ldr	r1, [pc, #56]	; (800112c <Hw_Init+0x54>)
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 80010f2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 80010f6:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80010fa:	6011      	str	r1, [r2, #0]
	
	Hw_Uart_Init();
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <Hw_Init+0x58>)
 80010fe:	4780      	blx	r0
	Hw_Led_Init();
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <Hw_Init+0x5c>)
 8001102:	4798      	blx	r3
	Hw_Timer_Init();
 8001104:	4a0c      	ldr	r2, [pc, #48]	; (8001138 <Hw_Init+0x60>)
 8001106:	4790      	blx	r2
	Hw_Si47xx_Init();
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <Hw_Init+0x64>)
 800110a:	4788      	blx	r1
	Hw_N5110_Init();
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <Hw_Init+0x68>)
 800110e:	4780      	blx	r0
	
	Hw_VCom_Init();
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <Hw_Init+0x6c>)
 8001112:	4798      	blx	r3
}
 8001114:	bd08      	pop	{r3, pc}
 8001116:	bf00      	nop
 8001118:	080012cd 	.word	0x080012cd
 800111c:	080014f9 	.word	0x080014f9
 8001120:	40010800 	.word	0x40010800
 8001124:	333334b3 	.word	0x333334b3
 8001128:	40011004 	.word	0x40011004
 800112c:	33444444 	.word	0x33444444
 8001130:	08001225 	.word	0x08001225
 8001134:	08001359 	.word	0x08001359
 8001138:	08001575 	.word	0x08001575
 800113c:	0800211d 	.word	0x0800211d
 8001140:	080026bd 	.word	0x080026bd
 8001144:	08001819 	.word	0x08001819

08001148 <Hw_Wait>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
 8001148:	b082      	sub	sp, #8
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 800114a:	2100      	movs	r1, #0
 800114c:	9101      	str	r1, [sp, #4]
 800114e:	9b01      	ldr	r3, [sp, #4]
 8001150:	4298      	cmp	r0, r3
 8001152:	d905      	bls.n	8001160 <Hw_Wait+0x18>
 8001154:	9901      	ldr	r1, [sp, #4]
 8001156:	1c4b      	adds	r3, r1, #1
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	9a01      	ldr	r2, [sp, #4]
 800115c:	4282      	cmp	r2, r0
 800115e:	d3f9      	bcc.n	8001154 <Hw_Wait+0xc>
}
 8001160:	b002      	add	sp, #8
 8001162:	4770      	bx	lr

08001164 <Hw_Wait_Usec>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
 8001164:	b082      	sub	sp, #8
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8001166:	2100      	movs	r1, #0
 8001168:	9101      	str	r1, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 800116a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 800116e:	9b01      	ldr	r3, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 8001170:	0042      	lsls	r2, r0, #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8001172:	429a      	cmp	r2, r3
 8001174:	d905      	bls.n	8001182 <Hw_Wait_Usec+0x1e>
 8001176:	9901      	ldr	r1, [sp, #4]
 8001178:	1c48      	adds	r0, r1, #1
 800117a:	9001      	str	r0, [sp, #4]
 800117c:	9b01      	ldr	r3, [sp, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	d8f9      	bhi.n	8001176 <Hw_Wait_Usec+0x12>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
}
 8001182:	b002      	add	sp, #8
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8001188:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <Hw_ISR_UART1_Handler+0x18>)


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 800118c:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 800118e:	6802      	ldr	r2, [r0, #0]
 8001190:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 8001192:	2000      	movs	r0, #0
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8001194:	f801 2d01 	strb.w	r2, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <Hw_ISR_UART1_Handler+0x1c>)
 800119a:	4798      	blx	r3
}
 800119c:	b003      	add	sp, #12
 800119e:	bd00      	pop	{pc}
 80011a0:	40013804 	.word	0x40013804
 80011a4:	0800140d 	.word	0x0800140d

080011a8 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 80011a8:	b570      	push	{r4, r5, r6, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80011aa:	4d12      	ldr	r5, [pc, #72]	; (80011f4 <Hw_Uart_Open_COM1+0x4c>)
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80011ac:	4c12      	ldr	r4, [pc, #72]	; (80011f8 <Hw_Uart_Open_COM1+0x50>)
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80011ae:	682b      	ldr	r3, [r5, #0]
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80011b0:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80011b2:	f443 4680 	orr.w	r6, r3, #16384	; 0x4000
 80011b6:	602e      	str	r6, [r5, #0]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80011b8:	250c      	movs	r5, #12
 80011ba:	6025      	str	r5, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80011bc:	4d0f      	ldr	r5, [pc, #60]	; (80011fc <Hw_Uart_Open_COM1+0x54>)
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <Hw_Uart_Open_COM1+0x58>)
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80011c0:	f240 2671 	movw	r6, #625	; 0x271
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80011c4:	602a      	str	r2, [r5, #0]
	REG_USART1_CR3  = 0;
 80011c6:	606a      	str	r2, [r5, #4]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80011c8:	f845 6c08 	str.w	r6, [r5, #-8]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80011cc:	681e      	ldr	r6, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 80011ce:	4d0d      	ldr	r5, [pc, #52]	; (8001204 <Hw_Uart_Open_COM1+0x5c>)
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80011d0:	f046 0620 	orr.w	r6, r6, #32
 80011d4:	601e      	str	r6, [r3, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 80011d6:	6823      	ldr	r3, [r4, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 80011d8:	6068      	str	r0, [r5, #4]
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 80011da:	f043 0320 	orr.w	r3, r3, #32
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 80011de:	60a9      	str	r1, [r5, #8]
	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 80011e0:	2025      	movs	r0, #37	; 0x25
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 80011e2:	6023      	str	r3, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 80011e4:	4908      	ldr	r1, [pc, #32]	; (8001208 <Hw_Uart_Open_COM1+0x60>)
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <Hw_Uart_Open_COM1+0x64>)
 80011e8:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 80011ea:	6820      	ldr	r0, [r4, #0]
 80011ec:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
 80011f0:	6023      	str	r3, [r4, #0]
}
 80011f2:	bd70      	pop	{r4, r5, r6, pc}
 80011f4:	40021018 	.word	0x40021018
 80011f8:	4001380c 	.word	0x4001380c
 80011fc:	40013810 	.word	0x40013810
 8001200:	e000e104 	.word	0xe000e104
 8001204:	200004d4 	.word	0x200004d4
 8001208:	08001189 	.word	0x08001189
 800120c:	08001509 	.word	0x08001509

08001210 <Hw_Uart_Open>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8001210:	b508      	push	{r3, lr}
	switch( Ch )
 8001212:	b918      	cbnz	r0, 800121c <Hw_Uart_Open+0xc>
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8001214:	4608      	mov	r0, r1
 8001216:	4b02      	ldr	r3, [pc, #8]	; (8001220 <Hw_Uart_Open+0x10>)
 8001218:	4611      	mov	r1, r2
 800121a:	4798      	blx	r3
 800121c:	bd08      	pop	{r3, pc}
 800121e:	bf00      	nop
 8001220:	080011a9 	.word	0x080011a9

08001224 <Hw_Uart_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8001224:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 8001226:	480a      	ldr	r0, [pc, #40]	; (8001250 <Hw_Uart_Init+0x2c>)
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001228:	4c0a      	ldr	r4, [pc, #40]	; (8001254 <Hw_Uart_Init+0x30>)
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 800122a:	4780      	blx	r0
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800122c:	2300      	movs	r3, #0
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
	}	
	
	
	Hw_Uart_Open( HW_UART_COM1, 115200, NULL );
 800122e:	4618      	mov	r0, r3
 8001230:	461a      	mov	r2, r3
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001232:	6063      	str	r3, [r4, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001234:	60a3      	str	r3, [r4, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001236:	6123      	str	r3, [r4, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001238:	6163      	str	r3, [r4, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800123a:	61e3      	str	r3, [r4, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800123c:	6223      	str	r3, [r4, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800123e:	62a3      	str	r3, [r4, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001240:	62e3      	str	r3, [r4, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8001242:	6363      	str	r3, [r4, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8001244:	63a3      	str	r3, [r4, #56]	; 0x38
	}	
	
	
	Hw_Uart_Open( HW_UART_COM1, 115200, NULL );
 8001246:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800124a:	4b03      	ldr	r3, [pc, #12]	; (8001258 <Hw_Uart_Init+0x34>)
 800124c:	4798      	blx	r3
}
 800124e:	bd10      	pop	{r4, pc}
 8001250:	080013ad 	.word	0x080013ad
 8001254:	200004d4 	.word	0x200004d4
 8001258:	08001211 	.word	0x08001211

0800125c <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 800125c:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 800125e:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8001260:	b083      	sub	sp, #12
 8001262:	4d08      	ldr	r5, [pc, #32]	; (8001284 <Hw_Uart_Getch+0x28>)
 8001264:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 8001266:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 800126a:	4620      	mov	r0, r4
 800126c:	47a8      	blx	r5
 800126e:	2800      	cmp	r0, #0
 8001270:	d0fb      	beq.n	800126a <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 8001272:	4620      	mov	r0, r4
 8001274:	f10d 0107 	add.w	r1, sp, #7
 8001278:	4a03      	ldr	r2, [pc, #12]	; (8001288 <Hw_Uart_Getch+0x2c>)
 800127a:	4790      	blx	r2

	return Uart_GetData;
}
 800127c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001280:	b003      	add	sp, #12
 8001282:	bd30      	pop	{r4, r5, pc}
 8001284:	080013d9 	.word	0x080013d9
 8001288:	08001485 	.word	0x08001485

0800128c <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 800128c:	280a      	cmp	r0, #10
 800128e:	d008      	beq.n	80012a2 <print_byte+0x16>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8001290:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <print_byte+0x28>)
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
    
    Hw_Uart_Putch(HW_UART_COM1, c);
 8001292:	b2c0      	uxtb	r0, r0
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8001294:	6813      	ldr	r3, [r2, #0]
 8001296:	f013 0f80 	tst.w	r3, #128	; 0x80
 800129a:	d0fb      	beq.n	8001294 <print_byte+0x8>
    
    REG_USART1_DR = Uart_PutData;
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <print_byte+0x2c>)
 800129e:	6010      	str	r0, [r2, #0]
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
    
    Hw_Uart_Putch(HW_UART_COM1, c);
#endif    
}
 80012a0:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <print_byte+0x28>)
 80012a4:	6813      	ldr	r3, [r2, #0]
 80012a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80012aa:	d0fb      	beq.n	80012a4 <print_byte+0x18>
    
    REG_USART1_DR = Uart_PutData;
 80012ac:	4902      	ldr	r1, [pc, #8]	; (80012b8 <print_byte+0x2c>)
 80012ae:	220d      	movs	r2, #13
 80012b0:	600a      	str	r2, [r1, #0]
 80012b2:	e7ed      	b.n	8001290 <print_byte+0x4>
 80012b4:	40013800 	.word	0x40013800
 80012b8:	40013804 	.word	0x40013804

080012bc <get_byte>:
#endif    
}


char get_byte(void)
{
 80012bc:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 80012be:	2000      	movs	r0, #0
 80012c0:	4b01      	ldr	r3, [pc, #4]	; (80012c8 <get_byte+0xc>)
 80012c2:	4798      	blx	r3
#endif
	
	return Ch;
}
 80012c4:	bd08      	pop	{r3, pc}
 80012c6:	bf00      	nop
 80012c8:	0800125d 	.word	0x0800125d

080012cc <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <Hw_PLL_Init+0x80>)
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 80012ce:	4920      	ldr	r1, [pc, #128]	; (8001350 <Hw_PLL_Init+0x84>)
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 80012d0:	6818      	ldr	r0, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 80012d2:	460a      	mov	r2, r1
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 80012d4:	f420 1c7c 	bic.w	ip, r0, #4128768	; 0x3f0000
 80012d8:	f02c 00f0 	bic.w	r0, ip, #240	; 0xf0
 80012dc:	6018      	str	r0, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	f440 10e8 	orr.w	r0, r0, #1900544	; 0x1d0000
 80012e4:	6018      	str	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 80012e6:	6808      	ldr	r0, [r1, #0]
 80012e8:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
 80012ec:	600b      	str	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 80012ee:	6811      	ldr	r1, [r2, #0]
 80012f0:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 80012f4:	d0fb      	beq.n	80012ee <Hw_PLL_Init+0x22>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <Hw_PLL_Init+0x80>)
 80012f8:	6818      	ldr	r0, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 80012fa:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 80012fc:	f020 0103 	bic.w	r1, r0, #3
 8001300:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	f040 0102 	orr.w	r1, r0, #2
 8001308:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 8001310:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 8001318:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 8001320:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 8001328:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	6018      	str	r0, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 800132e:	6813      	ldr	r3, [r2, #0]
 8001330:	f003 0c0c 	and.w	ip, r3, #12
 8001334:	f1bc 0f08 	cmp.w	ip, #8
 8001338:	d1f9      	bne.n	800132e <Hw_PLL_Init+0x62>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <Hw_PLL_Init+0x88>)
 800133c:	6813      	ldr	r3, [r2, #0]
 800133e:	f443 4080 	orr.w	r0, r3, #16384	; 0x4000
 8001342:	f040 011d 	orr.w	r1, r0, #29
 8001346:	6011      	str	r1, [r2, #0]
				0x1 <<  4 | // IOPC
				0x1 <<  3 | // IOPB
				0x1 <<  2 | // IOPA
				0x1 <<  0;  // AFIO
					
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021004 	.word	0x40021004
 8001350:	40021000 	.word	0x40021000
 8001354:	40021018 	.word	0x40021018

08001358 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8001358:	4a0c      	ldr	r2, [pc, #48]	; (800138c <Hw_Led_Init+0x34>)
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <Hw_Led_Init+0x38>)
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 800135c:	6810      	ldr	r0, [r2, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 800135e:	490d      	ldr	r1, [pc, #52]	; (8001394 <Hw_Led_Init+0x3c>)
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8001360:	f020 60e0 	bic.w	r0, r0, #117440512	; 0x7000000
 8001364:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 8001366:	6810      	ldr	r0, [r2, #0]
 8001368:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 800136c:	6010      	str	r0, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	f422 4070 	bic.w	r0, r2, #61440	; 0xf000
 8001374:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	f442 5040 	orr.w	r0, r2, #12288	; 0x3000
 800137c:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	601a      	str	r2, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8001382:	6808      	ldr	r0, [r1, #0]
 8001384:	f040 0308 	orr.w	r3, r0, #8
 8001388:	600b      	str	r3, [r1, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
	
		
	Hw_Led_Off(0);
}
 800138a:	4770      	bx	lr
 800138c:	40010004 	.word	0x40010004
 8001390:	40010c00 	.word	0x40010c00
 8001394:	40010c0c 	.word	0x40010c0c

08001398 <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 8001398:	b920      	cbnz	r0, 80013a4 <Hw_Led_Toggle+0xc>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 800139a:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <Hw_Led_Toggle+0x10>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f080 0208 	eor.w	r2, r0, #8
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40010c0c 	.word	0x40010c0c

080013ac <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 80013ac:	4908      	ldr	r1, [pc, #32]	; (80013d0 <Hw_Uart_Q_Init+0x24>)
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <Hw_Uart_Q_Init+0x28>)
 80013b0:	2300      	movs	r3, #0
 80013b2:	800b      	strh	r3, [r1, #0]
 80013b4:	8013      	strh	r3, [r2, #0]
 80013b6:	804b      	strh	r3, [r1, #2]
 80013b8:	8053      	strh	r3, [r2, #2]
 80013ba:	808b      	strh	r3, [r1, #4]
 80013bc:	8093      	strh	r3, [r2, #4]
 80013be:	80cb      	strh	r3, [r1, #6]
 80013c0:	80d3      	strh	r3, [r2, #6]
 80013c2:	810b      	strh	r3, [r1, #8]
 80013c4:	8113      	strh	r3, [r2, #8]
 80013c6:	814b      	strh	r3, [r1, #10]
 80013c8:	8153      	strh	r3, [r2, #10]
 80013ca:	818b      	strh	r3, [r1, #12]
 80013cc:	8193      	strh	r3, [r2, #12]
	}
}
 80013ce:	4770      	bx	lr
 80013d0:	20000608 	.word	0x20000608
 80013d4:	20000618 	.word	0x20000618

080013d8 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80013d8:	4909      	ldr	r1, [pc, #36]	; (8001400 <HW_UART_Q_VAILD+0x28>)
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HW_UART_Q_VAILD+0x2c>)
 80013dc:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 80013e0:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 80013e4:	3120      	adds	r1, #32
 80013e6:	4808      	ldr	r0, [pc, #32]	; (8001408 <HW_UART_Q_VAILD+0x30>)
 80013e8:	1a8b      	subs	r3, r1, r2
 80013ea:	ea03 0000 	and.w	r0, r3, r0
 80013ee:	2800      	cmp	r0, #0
 80013f0:	db00      	blt.n	80013f4 <HW_UART_Q_VAILD+0x1c>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 80013f2:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80013f4:	1e42      	subs	r2, r0, #1
 80013f6:	f062 001f 	orn	r0, r2, #31
 80013fa:	3001      	adds	r0, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000618 	.word	0x20000618
 8001404:	20000608 	.word	0x20000608
 8001408:	8000001f 	.word	0x8000001f

0800140c <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800140c:	4a19      	ldr	r2, [pc, #100]	; (8001474 <Hw_Uart_Q_Push+0x68>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 800140e:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001410:	4e19      	ldr	r6, [pc, #100]	; (8001478 <Hw_Uart_Q_Push+0x6c>)
 8001412:	f832 4010 	ldrh.w	r4, [r2, r0, lsl #1]
 8001416:	f936 5010 	ldrsh.w	r5, [r6, r0, lsl #1]
 800141a:	b222      	sxth	r2, r4
 800141c:	f102 0620 	add.w	r6, r2, #32
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <Hw_Uart_Q_Push+0x70>)
 8001422:	1b75      	subs	r5, r6, r5
 8001424:	ea05 0303 	and.w	r3, r5, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	db16      	blt.n	800145a <Hw_Uart_Q_Push+0x4e>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 800142c:	2b1f      	cmp	r3, #31
 800142e:	d01a      	beq.n	8001466 <Hw_Uart_Q_Push+0x5a>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8001430:	3401      	adds	r4, #1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <Hw_Uart_Q_Push+0x70>)
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8001434:	0145      	lsls	r5, r0, #5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8001436:	b224      	sxth	r4, r4
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8001438:	182e      	adds	r6, r5, r0
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800143a:	ea04 0303 	and.w	r3, r4, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800143e:	780d      	ldrb	r5, [r1, #0]
 8001440:	490f      	ldr	r1, [pc, #60]	; (8001480 <Hw_Uart_Q_Push+0x74>)
 8001442:	eb06 0c02 	add.w	ip, r6, r2
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8001446:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8001448:	f801 500c 	strb.w	r5, [r1, ip]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800144c:	db0d      	blt.n	800146a <Hw_Uart_Q_Push+0x5e>
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <Hw_Uart_Q_Push+0x68>)
 8001450:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]

	return TRUE;
 8001454:	2001      	movs	r0, #1
}
 8001456:	bc70      	pop	{r4, r5, r6}
 8001458:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800145a:	3b01      	subs	r3, #1
 800145c:	f063 031f 	orn	r3, r3, #31
 8001460:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8001462:	2b1f      	cmp	r3, #31
 8001464:	d1e4      	bne.n	8001430 <Hw_Uart_Q_Push+0x24>
 8001466:	2000      	movs	r0, #0
 8001468:	e7f5      	b.n	8001456 <Hw_Uart_Q_Push+0x4a>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800146a:	1e59      	subs	r1, r3, #1
 800146c:	f061 021f 	orn	r2, r1, #31
 8001470:	1c53      	adds	r3, r2, #1
 8001472:	e7ec      	b.n	800144e <Hw_Uart_Q_Push+0x42>
 8001474:	20000618 	.word	0x20000618
 8001478:	20000608 	.word	0x20000608
 800147c:	8000001f 	.word	0x8000001f
 8001480:	20000510 	.word	0x20000510

08001484 <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8001484:	b430      	push	{r4, r5}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <Hw_Uart_Q_Pop+0x64>)
 8001488:	4c18      	ldr	r4, [pc, #96]	; (80014ec <Hw_Uart_Q_Pop+0x68>)
 800148a:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800148e:	f934 5010 	ldrsh.w	r5, [r4, r0, lsl #1]
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <Hw_Uart_Q_Pop+0x6c>)
 8001494:	3520      	adds	r5, #32
 8001496:	b214      	sxth	r4, r2
 8001498:	1b2d      	subs	r5, r5, r4
 800149a:	ea05 0303 	and.w	r3, r5, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db14      	blt.n	80014cc <Hw_Uart_Q_Pop+0x48>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 80014a2:	b1cb      	cbz	r3, 80014d8 <Hw_Uart_Q_Pop+0x54>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80014a4:	0143      	lsls	r3, r0, #5
 80014a6:	181d      	adds	r5, r3, r0
 80014a8:	192c      	adds	r4, r5, r4
 80014aa:	3201      	adds	r2, #1

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <Hw_Uart_Q_Pop+0x6c>)
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80014ae:	4d11      	ldr	r5, [pc, #68]	; (80014f4 <Hw_Uart_Q_Pop+0x70>)

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80014b0:	fa0f fc82 	sxth.w	ip, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80014b4:	5d2c      	ldrb	r4, [r5, r4]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80014b6:	ea0c 0303 	and.w	r3, ip, r3
 80014ba:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 80014bc:	700c      	strb	r4, [r1, #0]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80014be:	db0d      	blt.n	80014dc <Hw_Uart_Q_Pop+0x58>
 80014c0:	4909      	ldr	r1, [pc, #36]	; (80014e8 <Hw_Uart_Q_Pop+0x64>)
 80014c2:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

    return TRUE;
 80014c6:	2001      	movs	r0, #1
}
 80014c8:	bc30      	pop	{r4, r5}
 80014ca:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80014cc:	3b01      	subs	r3, #1
 80014ce:	f063 031f 	orn	r3, r3, #31
 80014d2:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e5      	bne.n	80014a4 <Hw_Uart_Q_Pop+0x20>
 80014d8:	4618      	mov	r0, r3
 80014da:	e7f5      	b.n	80014c8 <Hw_Uart_Q_Pop+0x44>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 80014dc:	1e5a      	subs	r2, r3, #1
 80014de:	f062 011f 	orn	r1, r2, #31
 80014e2:	1c4b      	adds	r3, r1, #1
 80014e4:	e7ec      	b.n	80014c0 <Hw_Uart_Q_Pop+0x3c>
 80014e6:	bf00      	nop
 80014e8:	20000608 	.word	0x20000608
 80014ec:	20000618 	.word	0x20000618
 80014f0:	8000001f 	.word	0x8000001f
 80014f4:	20000510 	.word	0x20000510

080014f8 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 80014f8:	4b01      	ldr	r3, [pc, #4]	; (8001500 <Hw_ISR_Init+0x8>)
 80014fa:	4a02      	ldr	r2, [pc, #8]	; (8001504 <Hw_ISR_Init+0xc>)
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	4770      	bx	lr
 8001500:	e000ed08 	.word	0xe000ed08
 8001504:	20000800 	.word	0x20000800

08001508 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8001508:	4b02      	ldr	r3, [pc, #8]	; (8001514 <Hw_ISR_SetIRQFunc+0xc>)
 800150a:	3010      	adds	r0, #16
 800150c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000800 	.word	0x20000800

08001518 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8001518:	4b02      	ldr	r3, [pc, #8]	; (8001524 <Hw_ISR_SetIRQFuncByAddr+0xc>)
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 800151a:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 800151c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000800 	.word	0x20000800

08001528 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 8001528:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 800152a:	203c      	movs	r0, #60	; 0x3c
 800152c:	4902      	ldr	r1, [pc, #8]	; (8001538 <Hw_Timer_SetupISR+0x10>)
 800152e:	2200      	movs	r2, #0
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <Hw_Timer_SetupISR+0x14>)
 8001532:	4798      	blx	r3
}
 8001534:	bd08      	pop	{r3, pc}
 8001536:	bf00      	nop
 8001538:	080017bd 	.word	0x080017bd
 800153c:	08001519 	.word	0x08001519

08001540 <Hw_Timer_Setup>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8001540:	4a09      	ldr	r2, [pc, #36]	; (8001568 <Hw_Timer_Setup+0x28>)
 8001542:	490a      	ldr	r1, [pc, #40]	; (800156c <Hw_Timer_Setup+0x2c>)
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <Hw_Timer_Setup+0x30>)
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8001546:	2000      	movs	r0, #0
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8001548:	6011      	str	r1, [r2, #0]
	
	REG_STK_VAL  = 0;	
 800154a:	6050      	str	r0, [r2, #4]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	f041 0004 	orr.w	r0, r1, #4
 8001552:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	f042 0102 	orr.w	r1, r2, #2
 800155a:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	f040 0201 	orr.w	r2, r0, #1
 8001562:	601a      	str	r2, [r3, #0]
	
}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000e014 	.word	0xe000e014
 800156c:	0001193f 	.word	0x0001193f
 8001570:	e000e010 	.word	0xe000e010

08001574 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8001574:	b510      	push	{r4, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8001576:	4c1a      	ldr	r4, [pc, #104]	; (80015e0 <Hw_Timer_Init+0x6c>)
 8001578:	7823      	ldrb	r3, [r4, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d02e      	beq.n	80015dc <Hw_Timer_Init+0x68>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <Hw_Timer_Init+0x70>)
 8001580:	2000      	movs	r0, #0
 8001582:	7018      	strb	r0, [r3, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001584:	8058      	strh	r0, [r3, #2]
		Timer_Tbl[i].Timer_Init = 0;
 8001586:	8098      	strh	r0, [r3, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 8001588:	6098      	str	r0, [r3, #8]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800158a:	7418      	strb	r0, [r3, #16]
		Timer_Tbl[i].Timer_Ctn  = 0;
 800158c:	8258      	strh	r0, [r3, #18]
		Timer_Tbl[i].Timer_Init = 0;
 800158e:	8298      	strh	r0, [r3, #20]
		Timer_Tbl[i].TmrFnct    = NULL;
 8001590:	6198      	str	r0, [r3, #24]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001592:	f883 0020 	strb.w	r0, [r3, #32]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001596:	8458      	strh	r0, [r3, #34]	; 0x22
		Timer_Tbl[i].Timer_Init = 0;
 8001598:	8498      	strh	r0, [r3, #36]	; 0x24
		Timer_Tbl[i].TmrFnct    = NULL;
 800159a:	6298      	str	r0, [r3, #40]	; 0x28
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800159c:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
		Timer_Tbl[i].Timer_Ctn  = 0;
 80015a0:	8658      	strh	r0, [r3, #50]	; 0x32
		Timer_Tbl[i].Timer_Init = 0;
 80015a2:	8698      	strh	r0, [r3, #52]	; 0x34
		Timer_Tbl[i].TmrFnct    = NULL;
 80015a4:	6398      	str	r0, [r3, #56]	; 0x38
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80015a6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
		Timer_Tbl[i].Timer_Ctn  = 0;
 80015aa:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
		Timer_Tbl[i].Timer_Init = 0;
 80015ae:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		Timer_Tbl[i].TmrFnct    = NULL;
 80015b2:	6498      	str	r0, [r3, #72]	; 0x48
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80015b4:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
		Timer_Tbl[i].Timer_Ctn  = 0;
 80015b8:	f8a3 0052 	strh.w	r0, [r3, #82]	; 0x52
		Timer_Tbl[i].Timer_Init = 0;
 80015bc:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
		Timer_Tbl[i].TmrFnct    = NULL;
 80015c0:	6598      	str	r0, [r3, #88]	; 0x58
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80015c2:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
		Timer_Tbl[i].Timer_Ctn  = 0;
 80015c6:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
		Timer_Tbl[i].Timer_Init = 0;
 80015ca:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
		Timer_Tbl[i].TmrFnct    = NULL;
 80015ce:	6698      	str	r0, [r3, #104]	; 0x68
	}	                   
	
	
	Hw_Timer_SetupISR();
 80015d0:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <Hw_Timer_Init+0x74>)
 80015d2:	4790      	blx	r2
	Hw_Timer_Setup();	
 80015d4:	4905      	ldr	r1, [pc, #20]	; (80015ec <Hw_Timer_Init+0x78>)
 80015d6:	4788      	blx	r1

	Excute = 1;
 80015d8:	2001      	movs	r0, #1
 80015da:	7020      	strb	r0, [r4, #0]
 80015dc:	bd10      	pop	{r4, pc}
 80015de:	bf00      	nop
 80015e0:	20000409 	.word	0x20000409
 80015e4:	2000040c 	.word	0x2000040c
 80015e8:	08001529 	.word	0x08001529
 80015ec:	08001541 	.word	0x08001541

080015f0 <Hw_Timer_Tick>:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 80015f0:	b510      	push	{r4, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 80015f2:	4c6f      	ldr	r4, [pc, #444]	; (80017b0 <Hw_Timer_Tick+0x1c0>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 80015f4:	4a6f      	ldr	r2, [pc, #444]	; (80017b4 <Hw_Timer_Tick+0x1c4>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	1c59      	adds	r1, r3, #1
 80015fa:	6021      	str	r1, [r4, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 80015fc:	8810      	ldrh	r0, [r2, #0]
 80015fe:	b283      	uxth	r3, r0
 8001600:	b113      	cbz	r3, 8001608 <Hw_Timer_Tick+0x18>
 8001602:	8811      	ldrh	r1, [r2, #0]
 8001604:	1e48      	subs	r0, r1, #1
 8001606:	8010      	strh	r0, [r2, #0]
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001608:	4c6b      	ldr	r4, [pc, #428]	; (80017b8 <Hw_Timer_Tick+0x1c8>)
 800160a:	7822      	ldrb	r2, [r4, #0]
 800160c:	2a01      	cmp	r2, #1
 800160e:	d01e      	beq.n	800164e <Hw_Timer_Tick+0x5e>
 8001610:	7c23      	ldrb	r3, [r4, #16]
 8001612:	4a69      	ldr	r2, [pc, #420]	; (80017b8 <Hw_Timer_Tick+0x1c8>)
 8001614:	2b01      	cmp	r3, #1
 8001616:	d030      	beq.n	800167a <Hw_Timer_Tick+0x8a>
 8001618:	f894 3020 	ldrb.w	r3, [r4, #32]
 800161c:	4a66      	ldr	r2, [pc, #408]	; (80017b8 <Hw_Timer_Tick+0x1c8>)
 800161e:	2b01      	cmp	r3, #1
 8001620:	d041      	beq.n	80016a6 <Hw_Timer_Tick+0xb6>
 8001622:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001626:	4a64      	ldr	r2, [pc, #400]	; (80017b8 <Hw_Timer_Tick+0x1c8>)
 8001628:	2b01      	cmp	r3, #1
 800162a:	d052      	beq.n	80016d2 <Hw_Timer_Tick+0xe2>
 800162c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001630:	4a61      	ldr	r2, [pc, #388]	; (80017b8 <Hw_Timer_Tick+0x1c8>)
 8001632:	2b01      	cmp	r3, #1
 8001634:	d063      	beq.n	80016fe <Hw_Timer_Tick+0x10e>
 8001636:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800163a:	4a5f      	ldr	r2, [pc, #380]	; (80017b8 <Hw_Timer_Tick+0x1c8>)
 800163c:	2b01      	cmp	r3, #1
 800163e:	d076      	beq.n	800172e <Hw_Timer_Tick+0x13e>
 8001640:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8001644:	4a5c      	ldr	r2, [pc, #368]	; (80017b8 <Hw_Timer_Tick+0x1c8>)
 8001646:	2b01      	cmp	r3, #1
 8001648:	f000 808a 	beq.w	8001760 <Hw_Timer_Tick+0x170>
 800164c:	bd10      	pop	{r4, pc}
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800164e:	8860      	ldrh	r0, [r4, #2]
 8001650:	1e43      	subs	r3, r0, #1
 8001652:	b29b      	uxth	r3, r3
 8001654:	8063      	strh	r3, [r4, #2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1da      	bne.n	8001610 <Hw_Timer_Tick+0x20>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800165a:	f894 c001 	ldrb.w	ip, [r4, #1]
 800165e:	f1bc 0f01 	cmp.w	ip, #1
 8001662:	f000 8096 	beq.w	8001792 <Hw_Timer_Tick+0x1a2>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001666:	f8b4 e004 	ldrh.w	lr, [r4, #4]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800166a:	68a1      	ldr	r1, [r4, #8]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800166c:	f8a4 e002 	strh.w	lr, [r4, #2]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001670:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001672:	7c23      	ldrb	r3, [r4, #16]
 8001674:	4a50      	ldr	r2, [pc, #320]	; (80017b8 <Hw_Timer_Tick+0x1c8>)
 8001676:	2b01      	cmp	r3, #1
 8001678:	d1ce      	bne.n	8001618 <Hw_Timer_Tick+0x28>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800167a:	8a51      	ldrh	r1, [r2, #18]
 800167c:	1e48      	subs	r0, r1, #1
 800167e:	b283      	uxth	r3, r0
 8001680:	8253      	strh	r3, [r2, #18]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1c8      	bne.n	8001618 <Hw_Timer_Tick+0x28>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001686:	f892 c011 	ldrb.w	ip, [r2, #17]
 800168a:	f1bc 0f01 	cmp.w	ip, #1
 800168e:	d07e      	beq.n	800178e <Hw_Timer_Tick+0x19e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001690:	f8b4 e014 	ldrh.w	lr, [r4, #20]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001694:	69a2      	ldr	r2, [r4, #24]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001696:	f8a4 e012 	strh.w	lr, [r4, #18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800169a:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 800169c:	f894 3020 	ldrb.w	r3, [r4, #32]
 80016a0:	4a45      	ldr	r2, [pc, #276]	; (80017b8 <Hw_Timer_Tick+0x1c8>)
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d1bd      	bne.n	8001622 <Hw_Timer_Tick+0x32>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80016a6:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 80016a8:	1e48      	subs	r0, r1, #1
 80016aa:	b283      	uxth	r3, r0
 80016ac:	8453      	strh	r3, [r2, #34]	; 0x22

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1b7      	bne.n	8001622 <Hw_Timer_Tick+0x32>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80016b2:	f892 c021 	ldrb.w	ip, [r2, #33]	; 0x21
 80016b6:	f1bc 0f01 	cmp.w	ip, #1
 80016ba:	d075      	beq.n	80017a8 <Hw_Timer_Tick+0x1b8>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80016bc:	f8b4 e024 	ldrh.w	lr, [r4, #36]	; 0x24

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80016c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80016c2:	f8a4 e022 	strh.w	lr, [r4, #34]	; 0x22

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80016c6:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80016c8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80016cc:	4a3a      	ldr	r2, [pc, #232]	; (80017b8 <Hw_Timer_Tick+0x1c8>)
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d1ac      	bne.n	800162c <Hw_Timer_Tick+0x3c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80016d2:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 80016d4:	1e48      	subs	r0, r1, #1
 80016d6:	b283      	uxth	r3, r0
 80016d8:	8653      	strh	r3, [r2, #50]	; 0x32

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1a6      	bne.n	800162c <Hw_Timer_Tick+0x3c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80016de:	f892 c031 	ldrb.w	ip, [r2, #49]	; 0x31
 80016e2:	f1bc 0f01 	cmp.w	ip, #1
 80016e6:	d05c      	beq.n	80017a2 <Hw_Timer_Tick+0x1b2>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80016e8:	f8b4 e034 	ldrh.w	lr, [r4, #52]	; 0x34

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80016ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80016ee:	f8a4 e032 	strh.w	lr, [r4, #50]	; 0x32

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80016f2:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80016f4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80016f8:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <Hw_Timer_Tick+0x1c8>)
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d19b      	bne.n	8001636 <Hw_Timer_Tick+0x46>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80016fe:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
 8001702:	1e48      	subs	r0, r1, #1
 8001704:	b283      	uxth	r3, r0
 8001706:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800170a:	2b00      	cmp	r3, #0
 800170c:	d193      	bne.n	8001636 <Hw_Timer_Tick+0x46>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800170e:	f892 c041 	ldrb.w	ip, [r2, #65]	; 0x41
 8001712:	f1bc 0f01 	cmp.w	ip, #1
 8001716:	d041      	beq.n	800179c <Hw_Timer_Tick+0x1ac>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001718:	f8b4 e044 	ldrh.w	lr, [r4, #68]	; 0x44

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800171c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800171e:	f8a4 e042 	strh.w	lr, [r4, #66]	; 0x42

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001722:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001724:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001728:	4a23      	ldr	r2, [pc, #140]	; (80017b8 <Hw_Timer_Tick+0x1c8>)
 800172a:	2b01      	cmp	r3, #1
 800172c:	d188      	bne.n	8001640 <Hw_Timer_Tick+0x50>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800172e:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
 8001732:	1e48      	subs	r0, r1, #1
 8001734:	b283      	uxth	r3, r0
 8001736:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800173a:	2b00      	cmp	r3, #0
 800173c:	d180      	bne.n	8001640 <Hw_Timer_Tick+0x50>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800173e:	f892 c051 	ldrb.w	ip, [r2, #81]	; 0x51
 8001742:	f1bc 0f01 	cmp.w	ip, #1
 8001746:	d026      	beq.n	8001796 <Hw_Timer_Tick+0x1a6>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001748:	f8b4 e054 	ldrh.w	lr, [r4, #84]	; 0x54

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800174c:	6da2      	ldr	r2, [r4, #88]	; 0x58
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800174e:	f8a4 e052 	strh.w	lr, [r4, #82]	; 0x52

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001752:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001754:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8001758:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <Hw_Timer_Tick+0x1c8>)
 800175a:	2b01      	cmp	r3, #1
 800175c:	f47f af76 	bne.w	800164c <Hw_Timer_Tick+0x5c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001760:	f8b2 1062 	ldrh.w	r1, [r2, #98]	; 0x62
 8001764:	1e48      	subs	r0, r1, #1
 8001766:	b283      	uxth	r3, r0
 8001768:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800176c:	2b00      	cmp	r3, #0
 800176e:	f47f af6d 	bne.w	800164c <Hw_Timer_Tick+0x5c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001772:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001776:	f8b4 c064 	ldrh.w	ip, [r4, #100]	; 0x64
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800177a:	f1be 0f01 	cmp.w	lr, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 800177e:	bf08      	it	eq
 8001780:	f882 3060 	strbeq.w	r3, [r2, #96]	; 0x60

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001784:	f8a4 c062 	strh.w	ip, [r4, #98]	; 0x62

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001788:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800178a:	4790      	blx	r2
 800178c:	bd10      	pop	{r4, pc}

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 800178e:	7413      	strb	r3, [r2, #16]
 8001790:	e77e      	b.n	8001690 <Hw_Timer_Tick+0xa0>
 8001792:	7023      	strb	r3, [r4, #0]
 8001794:	e767      	b.n	8001666 <Hw_Timer_Tick+0x76>
 8001796:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 800179a:	e7d5      	b.n	8001748 <Hw_Timer_Tick+0x158>
 800179c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 80017a0:	e7ba      	b.n	8001718 <Hw_Timer_Tick+0x128>
 80017a2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
 80017a6:	e79f      	b.n	80016e8 <Hw_Timer_Tick+0xf8>
 80017a8:	f882 3020 	strb.w	r3, [r2, #32]
 80017ac:	e786      	b.n	80016bc <Hw_Timer_Tick+0xcc>
 80017ae:	bf00      	nop
 80017b0:	2000047c 	.word	0x2000047c
 80017b4:	20000480 	.word	0x20000480
 80017b8:	2000040c 	.word	0x2000040c

080017bc <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 80017bc:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 80017be:	4b01      	ldr	r3, [pc, #4]	; (80017c4 <Hw_Timer_ISR+0x8>)
 80017c0:	4798      	blx	r3

}
 80017c2:	bd08      	pop	{r3, pc}
 80017c4:	080015f1 	.word	0x080015f1

080017c8 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 80017c8:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 80017ca:	4c05      	ldr	r4, [pc, #20]	; (80017e0 <Hw_Timer_Set+0x18>)
 80017cc:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 80017d0:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 80017d2:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 80017d4:	9b01      	ldr	r3, [sp, #4]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 80017d6:	8041      	strh	r1, [r0, #2]
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 80017d8:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 80017da:	8081      	strh	r1, [r0, #4]
}
 80017dc:	bc10      	pop	{r4}
 80017de:	4770      	bx	lr
 80017e0:	2000040c 	.word	0x2000040c

080017e4 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 80017e4:	2806      	cmp	r0, #6
 80017e6:	d803      	bhi.n	80017f0 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 80017e8:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <Hw_Timer_Start+0x10>)
 80017ea:	0100      	lsls	r0, r0, #4
 80017ec:	2201      	movs	r2, #1
 80017ee:	541a      	strb	r2, [r3, r0]
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	2000040c 	.word	0x2000040c

080017f8 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <Hw_Timer_Delay_ms+0x10>)
 80017fa:	8018      	strh	r0, [r3, #0]
	
	while( Tmr_Ctn );
 80017fc:	8818      	ldrh	r0, [r3, #0]
 80017fe:	b282      	uxth	r2, r0
 8001800:	2a00      	cmp	r2, #0
 8001802:	d1fb      	bne.n	80017fc <Hw_Timer_Delay_ms+0x4>
}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000480 	.word	0x20000480

0800180c <Hw_Timer_Get_CountValue>:
     ARG
     RET
---------------------------------------------------------------------------*/
u32 Hw_Timer_Get_CountValue( void )
{
	return Hw_Timer_Counter;
 800180c:	4b01      	ldr	r3, [pc, #4]	; (8001814 <Hw_Timer_Get_CountValue+0x8>)
 800180e:	6818      	ldr	r0, [r3, #0]
}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2000047c 	.word	0x2000047c

08001818 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8001818:	b508      	push	{r3, lr}
	Set_System();
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <Hw_VCom_Init+0x14>)
 800181c:	4790      	blx	r2
	Set_USBClock();
 800181e:	4904      	ldr	r1, [pc, #16]	; (8001830 <Hw_VCom_Init+0x18>)
 8001820:	4788      	blx	r1
	USB_Interrupts_Config();
 8001822:	4804      	ldr	r0, [pc, #16]	; (8001834 <Hw_VCom_Init+0x1c>)
 8001824:	4780      	blx	r0
	USB_Init();	
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <Hw_VCom_Init+0x20>)
 8001828:	4798      	blx	r3
}
 800182a:	bd08      	pop	{r3, pc}
 800182c:	08003015 	.word	0x08003015
 8001830:	08003031 	.word	0x08003031
 8001834:	08003071 	.word	0x08003071
 8001838:	08003d05 	.word	0x08003d05

0800183c <Hw_I2C_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_Init( void )
{
 800183c:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	Hw_I2C_SW_Init();	
 800183e:	4b01      	ldr	r3, [pc, #4]	; (8001844 <Hw_I2C_Init+0x8>)
 8001840:	4798      	blx	r3
}
 8001842:	bd08      	pop	{r3, pc}
 8001844:	080018d5 	.word	0x080018d5

08001848 <Hw_I2C_Write>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_Write( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8001848:	b510      	push	{r4, lr}
	u16 Ret;
	
	#if HW_I2C_USE_SW_I2C == 1
	
	Ret = Hw_I2C_SW_Write( Ch, i2c_addr, pdata, len );
 800184a:	4c01      	ldr	r4, [pc, #4]	; (8001850 <Hw_I2C_Write+0x8>)
 800184c:	47a0      	blx	r4
	#else
	
	#endif

    return Ret;
}
 800184e:	bd10      	pop	{r4, pc}
 8001850:	0800204d 	.word	0x0800204d

08001854 <Hw_I2C_Read>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_Read( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8001854:	b510      	push	{r4, lr}
	u16 Ret;

	#if HW_I2C_USE_SW_I2C == 1
	
	Ret = Hw_I2C_SW_Read( Ch, i2c_addr, pdata, len );	
 8001856:	4c01      	ldr	r4, [pc, #4]	; (800185c <Hw_I2C_Read+0x8>)
 8001858:	47a0      	blx	r4
	#else
	
	#endif
	
    return Ret;
}
 800185a:	bd10      	pop	{r4, pc}
 800185c:	08001f2d 	.word	0x08001f2d

08001860 <Hw_I2C_SW_SCL_HIGH>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SCL_HIGH( u8 Ch )
{
 8001860:	b538      	push	{r3, r4, r5, lr}
 8001862:	4605      	mov	r5, r0
	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001864:	4c05      	ldr	r4, [pc, #20]	; (800187c <Hw_I2C_SW_SCL_HIGH+0x1c>)
 8001866:	200a      	movs	r0, #10
 8001868:	47a0      	blx	r4

	if( Ch == 0 )  
 800186a:	b925      	cbnz	r5, 8001876 <Hw_I2C_SW_SCL_HIGH+0x16>
	{
		SET_BIT( REG_GPIOB_ODR, 6 );
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <Hw_I2C_SW_SCL_HIGH+0x20>)
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 8001874:	601a      	str	r2, [r3, #0]
	}
	else           
	{
	}

	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001876:	200a      	movs	r0, #10
 8001878:	47a0      	blx	r4
}
 800187a:	bd38      	pop	{r3, r4, r5, pc}
 800187c:	08001165 	.word	0x08001165
 8001880:	40010c0c 	.word	0x40010c0c

08001884 <Hw_I2C_SW_IO_Setup>:
{
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <Hw_I2C_SW_IO_Setup+0x44>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_IO_Setup( void )
{
 8001886:	b510      	push	{r4, lr}
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 8001888:	6819      	ldr	r1, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 800188a:	2000      	movs	r0, #0
{
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 800188c:	f021 6270 	bic.w	r2, r1, #251658240	; 0xf000000
 8001890:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (24));	// MODE, PB.6 Output mode, max speed 50Mhz
 8001892:	6819      	ldr	r1, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001894:	4c0d      	ldr	r4, [pc, #52]	; (80018cc <Hw_I2C_SW_IO_Setup+0x48>)
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (24));	// MODE, PB.6 Output mode, max speed 50Mhz
 8001896:	f041 7240 	orr.w	r2, r1, #50331648	; 0x3000000
 800189a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (26));	// CNF,  PB.6 General purpose output push-pul	
 800189c:	6819      	ldr	r1, [r3, #0]
 800189e:	6019      	str	r1, [r3, #0]


	//-- SDA PB.7
	//
	REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 80018a6:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	f042 5140 	orr.w	r1, r2, #805306368	; 0x30000000
 80018ae:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	601a      	str	r2, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 80018b4:	47a0      	blx	r4
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <Hw_I2C_SW_IO_Setup+0x4c>)


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 80018b8:	2001      	movs	r0, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 80018ba:	6819      	ldr	r1, [r3, #0]
 80018bc:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 80018c0:	601a      	str	r2, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 80018c2:	47a0      	blx	r4
		Hw_I2C_SW_SDA_HIGH( i );
	}

}
 80018c4:	bd10      	pop	{r4, pc}
 80018c6:	bf00      	nop
 80018c8:	40010c00 	.word	0x40010c00
 80018cc:	08001861 	.word	0x08001861
 80018d0:	40010c0c 	.word	0x40010c0c

080018d4 <Hw_I2C_SW_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_Init( void )
{
 80018d4:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	Hw_I2C_SW_IO_Setup();	
 80018d6:	4b01      	ldr	r3, [pc, #4]	; (80018dc <Hw_I2C_SW_Init+0x8>)
 80018d8:	4798      	blx	r3
}
 80018da:	bd08      	pop	{r3, pc}
 80018dc:	08001885 	.word	0x08001885

080018e0 <Hw_I2C_SW_SCL_LOW>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SCL_LOW( u8 Ch )
{
 80018e0:	b538      	push	{r3, r4, r5, lr}
 80018e2:	4605      	mov	r5, r0
	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 80018e4:	4c05      	ldr	r4, [pc, #20]	; (80018fc <Hw_I2C_SW_SCL_LOW+0x1c>)
 80018e6:	200a      	movs	r0, #10
 80018e8:	47a0      	blx	r4

	if( Ch == 0 )  
 80018ea:	b925      	cbnz	r5, 80018f6 <Hw_I2C_SW_SCL_LOW+0x16>
	{
		CLR_BIT( REG_GPIOB_ODR, 6 );	
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <Hw_I2C_SW_SCL_LOW+0x20>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	f020 0240 	bic.w	r2, r0, #64	; 0x40
 80018f4:	601a      	str	r2, [r3, #0]
	}
	else           
	{
	}

	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 80018f6:	200a      	movs	r0, #10
 80018f8:	47a0      	blx	r4
}
 80018fa:	bd38      	pop	{r3, r4, r5, pc}
 80018fc:	08001165 	.word	0x08001165
 8001900:	40010c0c 	.word	0x40010c0c

08001904 <Hw_I2C_SW_EndTransmit>:
     ARG     : 
     			u8 Ch : I2C 채널
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_EndTransmit( u8 Ch )
{
 8001904:	b570      	push	{r4, r5, r6, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001906:	4605      	mov	r5, r0
 8001908:	b980      	cbnz	r0, 800192c <Hw_I2C_SW_EndTransmit+0x28>
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 800190a:	4e0c      	ldr	r6, [pc, #48]	; (800193c <Hw_I2C_SW_EndTransmit+0x38>)
{
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <Hw_I2C_SW_EndTransmit+0x3c>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 800190e:	6833      	ldr	r3, [r6, #0]
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
 8001910:	4c0c      	ldr	r4, [pc, #48]	; (8001944 <Hw_I2C_SW_EndTransmit+0x40>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001916:	6032      	str	r2, [r6, #0]
{
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001918:	4788      	blx	r1
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
 800191a:	4628      	mov	r0, r5
 800191c:	47a0      	blx	r4
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 800191e:	6830      	ldr	r0, [r6, #0]
 8001920:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 8001924:	6033      	str	r3, [r6, #0]
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
 8001926:	4628      	mov	r0, r5
 8001928:	47a0      	blx	r4
}
 800192a:	bd70      	pop	{r4, r5, r6, pc}
{
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 800192c:	4c04      	ldr	r4, [pc, #16]	; (8001940 <Hw_I2C_SW_EndTransmit+0x3c>)
 800192e:	47a0      	blx	r4
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
 8001930:	4628      	mov	r0, r5
 8001932:	4c04      	ldr	r4, [pc, #16]	; (8001944 <Hw_I2C_SW_EndTransmit+0x40>)
 8001934:	47a0      	blx	r4
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
 8001936:	4628      	mov	r0, r5
 8001938:	47a0      	blx	r4
}
 800193a:	bd70      	pop	{r4, r5, r6, pc}
 800193c:	40010c0c 	.word	0x40010c0c
 8001940:	080018e1 	.word	0x080018e1
 8001944:	08001861 	.word	0x08001861

08001948 <Hw_I2C_SW_StartTransmit>:
     ARG     : 
     			u8 Ch : I2C 채널
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_StartTransmit( u8 Ch )
{
 8001948:	b570      	push	{r4, r5, r6, lr}
 800194a:	4604      	mov	r4, r0
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
 800194c:	4d0b      	ldr	r5, [pc, #44]	; (800197c <Hw_I2C_SW_StartTransmit+0x34>)
 800194e:	47a8      	blx	r5
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8001950:	b974      	cbnz	r4, 8001970 <Hw_I2C_SW_StartTransmit+0x28>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001952:	4e0b      	ldr	r6, [pc, #44]	; (8001980 <Hw_I2C_SW_StartTransmit+0x38>)
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//	1    1
 8001954:	4620      	mov	r0, r4
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001956:	6832      	ldr	r2, [r6, #0]
 8001958:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 800195c:	6031      	str	r1, [r6, #0]
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//	1    1
 800195e:	47a8      	blx	r5
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001960:	6830      	ldr	r0, [r6, #0]
 8001962:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8001966:	6033      	str	r3, [r6, #0]
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//	1    1
	Hw_I2C_SW_SDA_LOW ( Ch );	//  1    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001968:	4620      	mov	r0, r4
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <Hw_I2C_SW_StartTransmit+0x3c>)
 800196c:	4798      	blx	r3
}
 800196e:	bd70      	pop	{r4, r5, r6, pc}
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//	1    1
 8001970:	4620      	mov	r0, r4
 8001972:	47a8      	blx	r5
	Hw_I2C_SW_SDA_LOW ( Ch );	//  1    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001974:	4620      	mov	r0, r4
 8001976:	4b03      	ldr	r3, [pc, #12]	; (8001984 <Hw_I2C_SW_StartTransmit+0x3c>)
 8001978:	4798      	blx	r3
}
 800197a:	bd70      	pop	{r4, r5, r6, pc}
 800197c:	08001861 	.word	0x08001861
 8001980:	40010c0c 	.word	0x40010c0c
 8001984:	080018e1 	.word	0x080018e1

08001988 <Hw_I2C_SW_SetDir_SDA_Input>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Input( u8 Ch )
{
	if( Ch == 0 )
 8001988:	b978      	cbnz	r0, 80019aa <Hw_I2C_SW_SetDir_SDA_Input+0x22>
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <Hw_I2C_SW_SetDir_SDA_Input+0x24>)
		REG_GPIOB_CRL |=  (0x00 << (28));	// MODE, PB.7 Input Mode
		//REG_GPIOB_CRL |=  (0x01 << (30));	// CNF,  PB.7 Floating input	
		REG_GPIOB_CRL |=  (0x02 << (30));	// CNF,  PB.7 input	pull-up/pull-down
		
		SET_BIT( REG_GPIOB_ODR, 7 );
 800198c:	4a08      	ldr	r2, [pc, #32]	; (80019b0 <Hw_I2C_SW_SetDir_SDA_Input+0x28>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Input( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 800198e:	6819      	ldr	r1, [r3, #0]
 8001990:	f021 4070 	bic.w	r0, r1, #4026531840	; 0xf0000000
 8001994:	6018      	str	r0, [r3, #0]
		REG_GPIOB_CRL |=  (0x00 << (28));	// MODE, PB.7 Input Mode
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	6019      	str	r1, [r3, #0]
		//REG_GPIOB_CRL |=  (0x01 << (30));	// CNF,  PB.7 Floating input	
		REG_GPIOB_CRL |=  (0x02 << (30));	// CNF,  PB.7 input	pull-up/pull-down
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	f040 4100 	orr.w	r1, r0, #2147483648	; 0x80000000
 80019a0:	6019      	str	r1, [r3, #0]
		
		SET_BIT( REG_GPIOB_ODR, 7 );
 80019a2:	6810      	ldr	r0, [r2, #0]
 80019a4:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4770      	bx	lr
 80019ac:	40010c00 	.word	0x40010c00
 80019b0:	40010c0c 	.word	0x40010c0c

080019b4 <Hw_I2C_SW_ReadByte_Ack>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_Ack( u8 Ch, u8 *pData )
{
 80019b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019b8:	4604      	mov	r4, r0
	u8 i;
	u8 Data = 0;
	u8 Ack = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 80019ba:	4b5d      	ldr	r3, [pc, #372]	; (8001b30 <Hw_I2C_SW_ReadByte_Ack+0x17c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_Ack( u8 Ch, u8 *pData )
{
 80019bc:	460f      	mov	r7, r1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80019be:	4d5d      	ldr	r5, [pc, #372]	; (8001b34 <Hw_I2C_SW_ReadByte_Ack+0x180>)
	u8 i;
	u8 Data = 0;
	u8 Ack = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 80019c0:	4798      	blx	r3

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80019c2:	4620      	mov	r0, r4
 80019c4:	47a8      	blx	r5
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_SDA( u8 Ch )
{
	u8 Data = 0;

	if( Ch == 0 )
 80019c6:	2c00      	cmp	r4, #0
 80019c8:	f040 8089 	bne.w	8001ade <Hw_I2C_SW_ReadByte_Ack+0x12a>
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 80019cc:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8001b3c <Hw_I2C_SW_ReadByte_Ack+0x188>

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 80019d0:	4620      	mov	r0, r4
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 80019d2:	f8d8 9000 	ldr.w	r9, [r8]

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 80019d6:	4e58      	ldr	r6, [pc, #352]	; (8001b38 <Hw_I2C_SW_ReadByte_Ack+0x184>)
 80019d8:	47b0      	blx	r6
     TITLE   : Hw_I2C_SW_ReadByte_Ack
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_Ack( u8 Ch, u8 *pData )
 80019da:	f3c9 11c0 	ubfx	r1, r9, #7, #1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80019de:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 80019e0:	ea4f 0941 	mov.w	r9, r1, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 80019e4:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 80019e6:	f8d8 0000 	ldr.w	r0, [r8]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 80019ea:	fa5f f989 	uxtb.w	r9, r9
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 80019ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80019f2:	d001      	beq.n	80019f8 <Hw_I2C_SW_ReadByte_Ack+0x44>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 80019f4:	f049 0901 	orr.w	r9, r9, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 80019f8:	2000      	movs	r0, #0
 80019fa:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80019fc:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 80019fe:	ea4f 0c49 	mov.w	ip, r9, lsl #1
 8001a02:	fa5f f88c 	uxtb.w	r8, ip

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001a06:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001a08:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <Hw_I2C_SW_ReadByte_Ack+0x188>)
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001a10:	d001      	beq.n	8001a16 <Hw_I2C_SW_ReadByte_Ack+0x62>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001a12:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001a16:	2000      	movs	r0, #0
 8001a18:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001a1e:	4a47      	ldr	r2, [pc, #284]	; (8001b3c <Hw_I2C_SW_ReadByte_Ack+0x188>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001a20:	ea4f 0848 	mov.w	r8, r8, lsl #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001a24:	6811      	ldr	r1, [r2, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001a26:	fa5f f888 	uxtb.w	r8, r8
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001a2a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001a2e:	d001      	beq.n	8001a34 <Hw_I2C_SW_ReadByte_Ack+0x80>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001a30:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001a34:	2000      	movs	r0, #0
 8001a36:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001a38:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001a3a:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 8001a3e:	fa5f f88c 	uxtb.w	r8, ip

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001a42:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001a44:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <Hw_I2C_SW_ReadByte_Ack+0x188>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001a4c:	d001      	beq.n	8001a52 <Hw_I2C_SW_ReadByte_Ack+0x9e>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001a4e:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001a52:	2000      	movs	r0, #0
 8001a54:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001a56:	2000      	movs	r0, #0
 8001a58:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001a5a:	4a38      	ldr	r2, [pc, #224]	; (8001b3c <Hw_I2C_SW_ReadByte_Ack+0x188>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001a5c:	ea4f 0848 	mov.w	r8, r8, lsl #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001a60:	6811      	ldr	r1, [r2, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001a62:	fa5f f888 	uxtb.w	r8, r8
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001a66:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001a6a:	d001      	beq.n	8001a70 <Hw_I2C_SW_ReadByte_Ack+0xbc>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001a6c:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001a70:	2000      	movs	r0, #0
 8001a72:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001a74:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001a76:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 8001a7a:	fa5f f88c 	uxtb.w	r8, ip

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001a7e:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <Hw_I2C_SW_ReadByte_Ack+0x188>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001a88:	d001      	beq.n	8001a8e <Hw_I2C_SW_ReadByte_Ack+0xda>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001a8a:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001a8e:	2000      	movs	r0, #0
 8001a90:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001a92:	2000      	movs	r0, #0
 8001a94:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001a96:	4a29      	ldr	r2, [pc, #164]	; (8001b3c <Hw_I2C_SW_ReadByte_Ack+0x188>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001a98:	ea4f 0848 	mov.w	r8, r8, lsl #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001a9c:	6811      	ldr	r1, [r2, #0]
 8001a9e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001aa2:	d001      	beq.n	8001aa8 <Hw_I2C_SW_ReadByte_Ack+0xf4>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001aa4:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	47b0      	blx	r6
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <Hw_I2C_SW_ReadByte_Ack+0x18c>)
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
	}

	*pData = Data;
 8001aae:	f887 8000 	strb.w	r8, [r7]
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001ab2:	681a      	ldr	r2, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001ab4:	4823      	ldr	r0, [pc, #140]	; (8001b44 <Hw_I2C_SW_ReadByte_Ack+0x190>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001ab6:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8001aba:	6019      	str	r1, [r3, #0]
		REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	f042 5140 	orr.w	r1, r2, #805306368	; 0x30000000
 8001ac2:	6019      	str	r1, [r3, #0]
		REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	601a      	str	r2, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001ac8:	6801      	ldr	r1, [r0, #0]
 8001aca:	f021 0380 	bic.w	r3, r1, #128	; 0x80
 8001ace:	6003      	str	r3, [r0, #0]

	// Ack 발생 
	//
	Hw_I2C_SW_SDA_LOW( Ch );

	Hw_I2C_SW_SCL_HIGH( Ch );
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	47a8      	blx	r5
	Hw_I2C_SW_SCL_LOW( Ch );
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	47b0      	blx	r6


	return Ack;
}
 8001ad8:	2000      	movs	r0, #0
 8001ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001ade:	4e16      	ldr	r6, [pc, #88]	; (8001b38 <Hw_I2C_SW_ReadByte_Ack+0x184>)
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001ae8:	4620      	mov	r0, r4
 8001aea:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001aec:	4620      	mov	r0, r4
 8001aee:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001af0:	4620      	mov	r0, r4
 8001af2:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001af4:	4620      	mov	r0, r4
 8001af6:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001af8:	4620      	mov	r0, r4
 8001afa:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001afc:	4620      	mov	r0, r4
 8001afe:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001b00:	4620      	mov	r0, r4
 8001b02:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001b04:	4620      	mov	r0, r4
 8001b06:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001b08:	4620      	mov	r0, r4
 8001b0a:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001b10:	4620      	mov	r0, r4
 8001b12:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001b14:	4620      	mov	r0, r4
 8001b16:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001b18:	4620      	mov	r0, r4
 8001b1a:	47b0      	blx	r6
	}

	*pData = Data;
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	703a      	strb	r2, [r7, #0]

	// Ack 발생 
	//
	Hw_I2C_SW_SDA_LOW( Ch );

	Hw_I2C_SW_SCL_HIGH( Ch );
 8001b20:	4620      	mov	r0, r4
 8001b22:	47a8      	blx	r5
	Hw_I2C_SW_SCL_LOW( Ch );
 8001b24:	4620      	mov	r0, r4
 8001b26:	47b0      	blx	r6


	return Ack;
}
 8001b28:	2000      	movs	r0, #0
 8001b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b2e:	bf00      	nop
 8001b30:	08001989 	.word	0x08001989
 8001b34:	08001861 	.word	0x08001861
 8001b38:	080018e1 	.word	0x080018e1
 8001b3c:	40010c08 	.word	0x40010c08
 8001b40:	40010c00 	.word	0x40010c00
 8001b44:	40010c0c 	.word	0x40010c0c

08001b48 <Hw_I2C_SW_ReadByte_NoAck>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_NoAck( u8 Ch, u8 *pData )
{
 8001b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b4c:	4604      	mov	r4, r0
	u8 i;
	u8 Data = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001b4e:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <Hw_I2C_SW_ReadByte_NoAck+0x154>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_NoAck( u8 Ch, u8 *pData )
{
 8001b50:	4688      	mov	r8, r1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001b52:	4d53      	ldr	r5, [pc, #332]	; (8001ca0 <Hw_I2C_SW_ReadByte_NoAck+0x158>)
{
	u8 i;
	u8 Data = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001b54:	4798      	blx	r3

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001b56:	4620      	mov	r0, r4
 8001b58:	47a8      	blx	r5
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_SDA( u8 Ch )
{
	u8 Data = 0;

	if( Ch == 0 )
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	d175      	bne.n	8001c4a <Hw_I2C_SW_ReadByte_NoAck+0x102>
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001b5e:	4f51      	ldr	r7, [pc, #324]	; (8001ca4 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001b60:	4620      	mov	r0, r4
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001b62:	f8d7 9000 	ldr.w	r9, [r7]

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001b66:	4e50      	ldr	r6, [pc, #320]	; (8001ca8 <Hw_I2C_SW_ReadByte_NoAck+0x160>)
 8001b68:	47b0      	blx	r6
     TITLE   : Hw_I2C_SW_ReadByte_NoAck
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_NoAck( u8 Ch, u8 *pData )
 8001b6a:	f3c9 11c0 	ubfx	r1, r9, #7, #1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001b6e:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001b70:	ea4f 0941 	mov.w	r9, r1, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001b74:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001b76:	6838      	ldr	r0, [r7, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001b78:	fa5f f989 	uxtb.w	r9, r9
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001b7c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001b80:	d001      	beq.n	8001b86 <Hw_I2C_SW_ReadByte_NoAck+0x3e>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001b82:	f049 0901 	orr.w	r9, r9, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001b86:	2000      	movs	r0, #0
 8001b88:	47b0      	blx	r6

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001b8a:	ea4f 0c49 	mov.w	ip, r9, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001b8e:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001b90:	fa5f f78c 	uxtb.w	r7, ip

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001b94:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001b96:	4943      	ldr	r1, [pc, #268]	; (8001ca4 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)
 8001b98:	680b      	ldr	r3, [r1, #0]
 8001b9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b9e:	d001      	beq.n	8001ba4 <Hw_I2C_SW_ReadByte_NoAck+0x5c>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001ba0:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ba8:	2000      	movs	r0, #0
 8001baa:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001bac:	483d      	ldr	r0, [pc, #244]	; (8001ca4 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001bae:	007f      	lsls	r7, r7, #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001bb0:	6802      	ldr	r2, [r0, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001bb2:	b2ff      	uxtb	r7, r7
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001bb4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001bb8:	d001      	beq.n	8001bbe <Hw_I2C_SW_ReadByte_NoAck+0x76>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001bba:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	47b0      	blx	r6

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001bc2:	007a      	lsls	r2, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001bc4:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001bc6:	b2d7      	uxtb	r7, r2

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001bc8:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001bca:	4936      	ldr	r1, [pc, #216]	; (8001ca4 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)
 8001bcc:	680b      	ldr	r3, [r1, #0]
 8001bce:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001bd2:	d001      	beq.n	8001bd8 <Hw_I2C_SW_ReadByte_NoAck+0x90>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001bd4:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001bd8:	2000      	movs	r0, #0
 8001bda:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001bdc:	2000      	movs	r0, #0
 8001bde:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001be0:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001be2:	007f      	lsls	r7, r7, #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001be4:	6818      	ldr	r0, [r3, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001be6:	b2ff      	uxtb	r7, r7
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001be8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001bec:	d001      	beq.n	8001bf2 <Hw_I2C_SW_ReadByte_NoAck+0xaa>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001bee:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	47b0      	blx	r6

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001bf6:	007b      	lsls	r3, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001bf8:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001bfa:	b2df      	uxtb	r7, r3

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001bfc:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001bfe:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)
 8001c00:	6811      	ldr	r1, [r2, #0]
 8001c02:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001c06:	d001      	beq.n	8001c0c <Hw_I2C_SW_ReadByte_NoAck+0xc4>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001c08:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c10:	2000      	movs	r0, #0
 8001c12:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001c14:	4923      	ldr	r1, [pc, #140]	; (8001ca4 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001c16:	007f      	lsls	r7, r7, #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001c18:	6808      	ldr	r0, [r1, #0]
 8001c1a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c1e:	d001      	beq.n	8001c24 <Hw_I2C_SW_ReadByte_NoAck+0xdc>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001c20:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c24:	2000      	movs	r0, #0
 8001c26:	47b0      	blx	r6
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001c28:	4a20      	ldr	r2, [pc, #128]	; (8001cac <Hw_I2C_SW_ReadByte_NoAck+0x164>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001c2a:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <Hw_I2C_SW_ReadByte_NoAck+0x168>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001c2c:	6810      	ldr	r0, [r2, #0]
 8001c2e:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 8001c32:	6011      	str	r1, [r2, #0]
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
 8001c3a:	601a      	str	r2, [r3, #0]
		REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8001c3c:	6819      	ldr	r1, [r3, #0]
 8001c3e:	f041 5040 	orr.w	r0, r1, #805306368	; 0x30000000
 8001c42:	6018      	str	r0, [r3, #0]
		REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e01f      	b.n	8001c8a <Hw_I2C_SW_ReadByte_NoAck+0x142>

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c4a:	4e17      	ldr	r6, [pc, #92]	; (8001ca8 <Hw_I2C_SW_ReadByte_NoAck+0x160>)
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c50:	4620      	mov	r0, r4
 8001c52:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c54:	4620      	mov	r0, r4
 8001c56:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c58:	4620      	mov	r0, r4
 8001c5a:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c60:	4620      	mov	r0, r4
 8001c62:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c64:	4620      	mov	r0, r4
 8001c66:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c68:	4620      	mov	r0, r4
 8001c6a:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c70:	4620      	mov	r0, r4
 8001c72:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c74:	4620      	mov	r0, r4
 8001c76:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c78:	4620      	mov	r0, r4
 8001c7a:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001c80:	4620      	mov	r0, r4
 8001c82:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001c84:	4620      	mov	r0, r4
 8001c86:	47b0      	blx	r6
 8001c88:	2700      	movs	r7, #0

	Hw_I2C_SW_SDA_HIGH( Ch );

	Hw_I2C_SW_SetDir_SDA_Output( Ch );

	Hw_I2C_SW_SCL_HIGH( Ch );
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	47a8      	blx	r5
	Hw_I2C_SW_SCL_LOW( Ch );
 8001c8e:	4620      	mov	r0, r4
 8001c90:	47b0      	blx	r6

	*pData = Data;
 8001c92:	f888 7000 	strb.w	r7, [r8]

	return 0;
}
 8001c96:	2000      	movs	r0, #0
 8001c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c9c:	08001989 	.word	0x08001989
 8001ca0:	08001861 	.word	0x08001861
 8001ca4:	40010c08 	.word	0x40010c08
 8001ca8:	080018e1 	.word	0x080018e1
 8001cac:	40010c0c 	.word	0x40010c0c
 8001cb0:	40010c00 	.word	0x40010c00

08001cb4 <Hw_I2C_SW_WriteByte_Ack>:
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001cb4:	f011 0f80 	tst.w	r1, #128	; 0x80
     			u8 Data : 전송할 바이트
     RET     : 
     			u8 : 0 -> Ack
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_WriteByte_Ack( u8 Ch, u8 Data )
{
 8001cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cba:	460f      	mov	r7, r1
 8001cbc:	4604      	mov	r4, r0
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001cbe:	f040 8111 	bne.w	8001ee4 <Hw_I2C_SW_WriteByte_Ack+0x230>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	f000 80ff 	beq.w	8001ec6 <Hw_I2C_SW_WriteByte_Ack+0x212>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001cc8:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001cca:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ccc:	4e91      	ldr	r6, [pc, #580]	; (8001f14 <Hw_I2C_SW_WriteByte_Ack+0x260>)
 8001cce:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8001cd0:	4d91      	ldr	r5, [pc, #580]	; (8001f18 <Hw_I2C_SW_WriteByte_Ack+0x264>)
 8001cd2:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001cd4:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8001cd6:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001cd8:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001cdc:	f040 80f9 	bne.w	8001ed2 <Hw_I2C_SW_WriteByte_Ack+0x21e>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001ce0:	2c00      	cmp	r4, #0
 8001ce2:	f000 80d8 	beq.w	8001e96 <Hw_I2C_SW_WriteByte_Ack+0x1e2>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ce6:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001ce8:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001cea:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001cec:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8001cee:	4620      	mov	r0, r4
 8001cf0:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001cf2:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001cf6:	f040 80dd 	bne.w	8001eb4 <Hw_I2C_SW_WriteByte_Ack+0x200>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001cfa:	2c00      	cmp	r4, #0
 8001cfc:	f000 80b3 	beq.w	8001e66 <Hw_I2C_SW_WriteByte_Ack+0x1b2>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d00:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001d02:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d04:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001d06:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8001d08:	4620      	mov	r0, r4
 8001d0a:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001d0c:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001d10:	f040 80b8 	bne.w	8001e84 <Hw_I2C_SW_WriteByte_Ack+0x1d0>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001d14:	2c00      	cmp	r4, #0
 8001d16:	f000 808e 	beq.w	8001e36 <Hw_I2C_SW_WriteByte_Ack+0x182>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d1a:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001d1c:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d1e:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001d20:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8001d22:	4620      	mov	r0, r4
 8001d24:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001d26:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001d2a:	f040 8093 	bne.w	8001e54 <Hw_I2C_SW_WriteByte_Ack+0x1a0>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001d2e:	2c00      	cmp	r4, #0
 8001d30:	d06b      	beq.n	8001e0a <Hw_I2C_SW_WriteByte_Ack+0x156>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d32:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001d34:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d36:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001d38:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001d3e:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001d42:	d170      	bne.n	8001e26 <Hw_I2C_SW_WriteByte_Ack+0x172>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001d44:	2c00      	cmp	r4, #0
 8001d46:	d04a      	beq.n	8001dde <Hw_I2C_SW_WriteByte_Ack+0x12a>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d48:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001d4a:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d4c:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001d4e:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8001d50:	4620      	mov	r0, r4
 8001d52:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001d54:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001d58:	d14f      	bne.n	8001dfa <Hw_I2C_SW_WriteByte_Ack+0x146>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001d5a:	2c00      	cmp	r4, #0
 8001d5c:	d02a      	beq.n	8001db4 <Hw_I2C_SW_WriteByte_Ack+0x100>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d5e:	4620      	mov	r0, r4
 8001d60:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8001d62:	4620      	mov	r0, r4
 8001d64:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001d66:	f017 0f40 	tst.w	r7, #64	; 0x40
 8001d6a:	d12f      	bne.n	8001dcc <Hw_I2C_SW_WriteByte_Ack+0x118>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001d6c:	2c00      	cmp	r4, #0
 8001d6e:	f040 80c2 	bne.w	8001ef6 <Hw_I2C_SW_WriteByte_Ack+0x242>
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001d72:	496a      	ldr	r1, [pc, #424]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8001d74:	680c      	ldr	r4, [r1, #0]
 8001d76:	f024 0080 	bic.w	r0, r4, #128	; 0x80
 8001d7a:	6008      	str	r0, [r1, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8001d80:	2000      	movs	r0, #0
 8001d82:	47a8      	blx	r5
	}


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001d84:	4a66      	ldr	r2, [pc, #408]	; (8001f20 <Hw_I2C_SW_WriteByte_Ack+0x26c>)
 8001d86:	2000      	movs	r0, #0
 8001d88:	4790      	blx	r2



	// Ack 검사 
	//
	Hw_I2C_SW_SCL_HIGH( Ch );
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	47b0      	blx	r6
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001d8e:	4b65      	ldr	r3, [pc, #404]	; (8001f24 <Hw_I2C_SW_WriteByte_Ack+0x270>)
	//
	Hw_I2C_SW_SCL_HIGH( Ch );

	if( Hw_I2C_SW_SDA( Ch ) == 0 ) Ack = 0;

	Hw_I2C_SW_SCL_LOW( Ch );
 8001d90:	2000      	movs	r0, #0
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001d92:	681c      	ldr	r4, [r3, #0]
	//
	Hw_I2C_SW_SCL_HIGH( Ch );

	if( Hw_I2C_SW_SDA( Ch ) == 0 ) Ack = 0;

	Hw_I2C_SW_SCL_LOW( Ch );
 8001d94:	47a8      	blx	r5
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001d96:	4864      	ldr	r0, [pc, #400]	; (8001f28 <Hw_I2C_SW_WriteByte_Ack+0x274>)
     			u8 : 0 -> Ack
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_WriteByte_Ack( u8 Ch, u8 Data )
{
	u8 i;
	u8 Ack = 1;
 8001d98:	f3c4 14c0 	ubfx	r4, r4, #7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001d9c:	6801      	ldr	r1, [r0, #0]
 8001d9e:	f021 4270 	bic.w	r2, r1, #4026531840	; 0xf0000000
 8001da2:	6002      	str	r2, [r0, #0]
		REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8001da4:	6803      	ldr	r3, [r0, #0]
 8001da6:	f043 5140 	orr.w	r1, r3, #805306368	; 0x30000000
 8001daa:	6001      	str	r1, [r0, #0]
		REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 8001dac:	6802      	ldr	r2, [r0, #0]
 8001dae:	6002      	str	r2, [r0, #0]


	Hw_I2C_SW_SetDir_SDA_Output( Ch );

	return Ack;
}
 8001db0:	4620      	mov	r0, r4
 8001db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001db4:	4959      	ldr	r1, [pc, #356]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8001db6:	680b      	ldr	r3, [r1, #0]
 8001db8:	f023 0080 	bic.w	r0, r3, #128	; 0x80
 8001dbc:	6008      	str	r0, [r1, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001dc6:	f017 0f40 	tst.w	r7, #64	; 0x40
 8001dca:	d0cf      	beq.n	8001d6c <Hw_I2C_SW_WriteByte_Ack+0xb8>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8001dcc:	2c00      	cmp	r4, #0
 8001dce:	f040 8092 	bne.w	8001ef6 <Hw_I2C_SW_WriteByte_Ack+0x242>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001dd2:	4b52      	ldr	r3, [pc, #328]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	f042 0480 	orr.w	r4, r2, #128	; 0x80
 8001dda:	601c      	str	r4, [r3, #0]
 8001ddc:	e7ce      	b.n	8001d7c <Hw_I2C_SW_WriteByte_Ack+0xc8>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001dde:	4b4f      	ldr	r3, [pc, #316]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001de0:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001de2:	6818      	ldr	r0, [r3, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001de4:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001de6:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 8001dea:	601a      	str	r2, [r3, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001dec:	4620      	mov	r0, r4
 8001dee:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8001df0:	4620      	mov	r0, r4
 8001df2:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001df4:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001df8:	d0af      	beq.n	8001d5a <Hw_I2C_SW_WriteByte_Ack+0xa6>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8001dfa:	2c00      	cmp	r4, #0
 8001dfc:	d1af      	bne.n	8001d5e <Hw_I2C_SW_WriteByte_Ack+0xaa>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001dfe:	4847      	ldr	r0, [pc, #284]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8001e00:	6801      	ldr	r1, [r0, #0]
 8001e02:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8001e06:	6002      	str	r2, [r0, #0]
 8001e08:	e7a9      	b.n	8001d5e <Hw_I2C_SW_WriteByte_Ack+0xaa>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e0a:	4944      	ldr	r1, [pc, #272]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001e0c:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e0e:	680b      	ldr	r3, [r1, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001e10:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e12:	f023 0080 	bic.w	r0, r3, #128	; 0x80
 8001e16:	6008      	str	r0, [r1, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e18:	4620      	mov	r0, r4
 8001e1a:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001e20:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001e24:	d08e      	beq.n	8001d44 <Hw_I2C_SW_WriteByte_Ack+0x90>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8001e26:	2c00      	cmp	r4, #0
 8001e28:	d18e      	bne.n	8001d48 <Hw_I2C_SW_WriteByte_Ack+0x94>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8001e32:	6019      	str	r1, [r3, #0]
 8001e34:	e788      	b.n	8001d48 <Hw_I2C_SW_WriteByte_Ack+0x94>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e36:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001e38:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e3a:	6818      	ldr	r0, [r3, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001e3c:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e3e:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 8001e42:	601a      	str	r2, [r3, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e44:	4620      	mov	r0, r4
 8001e46:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8001e48:	4620      	mov	r0, r4
 8001e4a:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001e4c:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001e50:	f43f af6d 	beq.w	8001d2e <Hw_I2C_SW_WriteByte_Ack+0x7a>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8001e54:	2c00      	cmp	r4, #0
 8001e56:	f47f af6c 	bne.w	8001d32 <Hw_I2C_SW_WriteByte_Ack+0x7e>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001e5a:	4830      	ldr	r0, [pc, #192]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8001e5c:	6801      	ldr	r1, [r0, #0]
 8001e5e:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8001e62:	6002      	str	r2, [r0, #0]
 8001e64:	e765      	b.n	8001d32 <Hw_I2C_SW_WriteByte_Ack+0x7e>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e66:	492d      	ldr	r1, [pc, #180]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001e68:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e6a:	680b      	ldr	r3, [r1, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001e6c:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e6e:	f023 0080 	bic.w	r0, r3, #128	; 0x80
 8001e72:	6008      	str	r0, [r1, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001e74:	4620      	mov	r0, r4
 8001e76:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8001e78:	4620      	mov	r0, r4
 8001e7a:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001e7c:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001e80:	f43f af48 	beq.w	8001d14 <Hw_I2C_SW_WriteByte_Ack+0x60>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8001e84:	2c00      	cmp	r4, #0
 8001e86:	f47f af48 	bne.w	8001d1a <Hw_I2C_SW_WriteByte_Ack+0x66>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8001e92:	6019      	str	r1, [r3, #0]
 8001e94:	e741      	b.n	8001d1a <Hw_I2C_SW_WriteByte_Ack+0x66>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e96:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001e98:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e9a:	6818      	ldr	r0, [r3, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8001e9c:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e9e:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 8001ea2:	601a      	str	r2, [r3, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8001eac:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001eb0:	f43f af23 	beq.w	8001cfa <Hw_I2C_SW_WriteByte_Ack+0x46>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8001eb4:	2c00      	cmp	r4, #0
 8001eb6:	f47f af23 	bne.w	8001d00 <Hw_I2C_SW_WriteByte_Ack+0x4c>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001eba:	4818      	ldr	r0, [pc, #96]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8001ebc:	6801      	ldr	r1, [r0, #0]
 8001ebe:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8001ec2:	6002      	str	r2, [r0, #0]
 8001ec4:	e71c      	b.n	8001d00 <Hw_I2C_SW_WriteByte_Ack+0x4c>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	e6fa      	b.n	8001cc8 <Hw_I2C_SW_WriteByte_Ack+0x14>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8001ed2:	2c00      	cmp	r4, #0
 8001ed4:	f47f af07 	bne.w	8001ce6 <Hw_I2C_SW_WriteByte_Ack+0x32>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8001ee0:	6019      	str	r1, [r3, #0]
 8001ee2:	e700      	b.n	8001ce6 <Hw_I2C_SW_WriteByte_Ack+0x32>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	f47f aeef 	bne.w	8001cc8 <Hw_I2C_SW_WriteByte_Ack+0x14>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001eea:	4d0c      	ldr	r5, [pc, #48]	; (8001f1c <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8001eec:	682e      	ldr	r6, [r5, #0]
 8001eee:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8001ef2:	6029      	str	r1, [r5, #0]
 8001ef4:	e6e8      	b.n	8001cc8 <Hw_I2C_SW_WriteByte_Ack+0x14>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8001efa:	4620      	mov	r0, r4
 8001efc:	47a8      	blx	r5
	}


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <Hw_I2C_SW_WriteByte_Ack+0x26c>)
 8001f00:	4620      	mov	r0, r4
 8001f02:	4798      	blx	r3



	// Ack 검사 
	//
	Hw_I2C_SW_SCL_HIGH( Ch );
 8001f04:	4620      	mov	r0, r4
 8001f06:	47b0      	blx	r6

	if( Hw_I2C_SW_SDA( Ch ) == 0 ) Ack = 0;

	Hw_I2C_SW_SCL_LOW( Ch );
 8001f08:	4620      	mov	r0, r4

	// Ack 검사 
	//
	Hw_I2C_SW_SCL_HIGH( Ch );

	if( Hw_I2C_SW_SDA( Ch ) == 0 ) Ack = 0;
 8001f0a:	2400      	movs	r4, #0

	Hw_I2C_SW_SCL_LOW( Ch );
 8001f0c:	47a8      	blx	r5


	Hw_I2C_SW_SetDir_SDA_Output( Ch );

	return Ack;
}
 8001f0e:	4620      	mov	r0, r4
 8001f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	08001861 	.word	0x08001861
 8001f18:	080018e1 	.word	0x080018e1
 8001f1c:	40010c0c 	.word	0x40010c0c
 8001f20:	08001989 	.word	0x08001989
 8001f24:	40010c08 	.word	0x40010c08
 8001f28:	40010c00 	.word	0x40010c00

08001f2c <Hw_I2C_SW_Read>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Read( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8001f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u16 Ret = 0;
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;
 8001f30:	461d      	mov	r5, r3
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Read( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8001f32:	b083      	sub	sp, #12
 8001f34:	4604      	mov	r4, r0
 8001f36:	460e      	mov	r6, r1
 8001f38:	4617      	mov	r7, r2
	u16 Ret = 0;
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d062      	beq.n	8002004 <Hw_I2C_SW_Read+0xd8>

	Hw_I2C_SW_StartTransmit(Ch);
 8001f3e:	4a3e      	ldr	r2, [pc, #248]	; (8002038 <Hw_I2C_SW_Read+0x10c>)
 8001f40:	4790      	blx	r2

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address
 8001f42:	0070      	lsls	r0, r6, #1
 8001f44:	f040 0101 	orr.w	r1, r0, #1
 8001f48:	b2c9      	uxtb	r1, r1
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	; (800203c <Hw_I2C_SW_Read+0x110>)
 8001f4e:	4798      	blx	r3
{
	u16 Ret = 0;
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;
 8001f50:	1e6e      	subs	r6, r5, #1
 8001f52:	fa5f f986 	uxtb.w	r9, r6
 8001f56:	f006 0601 	and.w	r6, r6, #1

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address
 8001f5a:	4680      	mov	r8, r0
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8001f5c:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8002044 <Hw_I2C_SW_Read+0x118>

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 8001f60:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002048 <Hw_I2C_SW_Read+0x11c>
 8001f64:	9601      	str	r6, [sp, #4]

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 8001f66:	f1b9 0f00 	cmp.w	r9, #0
 8001f6a:	d15c      	bne.n	8002026 <Hw_I2C_SW_Read+0xfa>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4639      	mov	r1, r7
 8001f70:	47d8      	blx	fp
 8001f72:	ea40 0808 	orr.w	r8, r0, r8
 8001f76:	fa1f f888 	uxth.w	r8, r8

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8001f7a:	2601      	movs	r6, #1
 8001f7c:	42b5      	cmp	r5, r6
 8001f7e:	d94b      	bls.n	8002018 <Hw_I2C_SW_Read+0xec>
 8001f80:	9a01      	ldr	r2, [sp, #4]
 8001f82:	b162      	cbz	r2, 8001f9e <Hw_I2C_SW_Read+0x72>
	{
		if( i < LastIndex )
 8001f84:	45b1      	cmp	r9, r6
 8001f86:	d835      	bhi.n	8001ff4 <Hw_I2C_SW_Read+0xc8>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8001f88:	19b9      	adds	r1, r7, r6
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	47d8      	blx	fp
 8001f8e:	ea40 0108 	orr.w	r1, r0, r8
 8001f92:	fa1f f881 	uxth.w	r8, r1

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8001f96:	3601      	adds	r6, #1
 8001f98:	b2f6      	uxtb	r6, r6
 8001f9a:	42b5      	cmp	r5, r6
 8001f9c:	d93c      	bls.n	8002018 <Hw_I2C_SW_Read+0xec>
	{
		if( i < LastIndex )
 8001f9e:	45b1      	cmp	r9, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8001fa0:	eb07 0106 	add.w	r1, r7, r6
 8001fa4:	4620      	mov	r0, r4

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 8001fa6:	d919      	bls.n	8001fdc <Hw_I2C_SW_Read+0xb0>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 8001fa8:	47d0      	blx	sl

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8001faa:	3601      	adds	r6, #1
 8001fac:	b2f6      	uxtb	r6, r6
	{
		if( i < LastIndex )
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 8001fae:	ea40 0808 	orr.w	r8, r0, r8

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 8001fb2:	45b1      	cmp	r9, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 8001fb4:	fa1f f888 	uxth.w	r8, r8
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8001fb8:	4620      	mov	r0, r4
 8001fba:	eb07 0106 	add.w	r1, r7, r6

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 8001fbe:	d819      	bhi.n	8001ff4 <Hw_I2C_SW_Read+0xc8>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8001fc0:	47d8      	blx	fp

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8001fc2:	3601      	adds	r6, #1
 8001fc4:	b2f6      	uxtb	r6, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8001fc6:	ea40 0008 	orr.w	r0, r0, r8

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8001fca:	42b5      	cmp	r5, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8001fcc:	fa1f f880 	uxth.w	r8, r0

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8001fd0:	d922      	bls.n	8002018 <Hw_I2C_SW_Read+0xec>
	{
		if( i < LastIndex )
 8001fd2:	45b1      	cmp	r9, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8001fd4:	eb07 0106 	add.w	r1, r7, r6
 8001fd8:	4620      	mov	r0, r4

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 8001fda:	d8e5      	bhi.n	8001fa8 <Hw_I2C_SW_Read+0x7c>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8001fdc:	47d8      	blx	fp

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8001fde:	3601      	adds	r6, #1
 8001fe0:	b2f6      	uxtb	r6, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8001fe2:	ea40 0c08 	orr.w	ip, r0, r8

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 8001fe6:	45b1      	cmp	r9, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8001fe8:	fa1f f88c 	uxth.w	r8, ip
 8001fec:	4620      	mov	r0, r4
 8001fee:	eb07 0106 	add.w	r1, r7, r6

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 8001ff2:	d9e5      	bls.n	8001fc0 <Hw_I2C_SW_Read+0x94>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	19b9      	adds	r1, r7, r6
 8001ff8:	47d0      	blx	sl
 8001ffa:	ea40 0308 	orr.w	r3, r0, r8
 8001ffe:	fa1f f883 	uxth.w	r8, r3
 8002002:	e7c8      	b.n	8001f96 <Hw_I2C_SW_Read+0x6a>
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;

	Hw_I2C_SW_StartTransmit(Ch);
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <Hw_I2C_SW_Read+0x10c>)
 8002006:	4798      	blx	r3

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address
 8002008:	0070      	lsls	r0, r6, #1
 800200a:	f040 0101 	orr.w	r1, r0, #1
 800200e:	b2c9      	uxtb	r1, r1
 8002010:	4620      	mov	r0, r4
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <Hw_I2C_SW_Read+0x110>)
 8002014:	4790      	blx	r2
 8002016:	4680      	mov	r8, r0
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
		}
	}
	
	Hw_I2C_SW_EndTransmit(Ch);
 8002018:	4620      	mov	r0, r4
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <Hw_I2C_SW_Read+0x114>)
 800201c:	4798      	blx	r3
	

    return Ret;
}
 800201e:	4640      	mov	r0, r8
 8002020:	b003      	add	sp, #12
 8002022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 8002026:	4620      	mov	r0, r4
 8002028:	4639      	mov	r1, r7
 800202a:	47d0      	blx	sl
 800202c:	ea40 0c08 	orr.w	ip, r0, r8
 8002030:	fa1f f88c 	uxth.w	r8, ip
 8002034:	e7a1      	b.n	8001f7a <Hw_I2C_SW_Read+0x4e>
 8002036:	bf00      	nop
 8002038:	08001949 	.word	0x08001949
 800203c:	08001cb5 	.word	0x08001cb5
 8002040:	08001905 	.word	0x08001905
 8002044:	08001b49 	.word	0x08001b49
 8002048:	080019b5 	.word	0x080019b5

0800204c <Hw_I2C_SW_Write>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Write( u8 Ch, u16 i2c_addr, u8* pdata, u16 len )
{
 800204c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002050:	460e      	mov	r6, r1
 8002052:	4699      	mov	r9, r3
    u16 Ret = 0;;
	u8  i;

	Hw_I2C_SW_StartTransmit(Ch);
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <Hw_I2C_SW_Write+0x88>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Write( u8 Ch, u16 i2c_addr, u8* pdata, u16 len )
{
 8002056:	4604      	mov	r4, r0
 8002058:	4615      	mov	r5, r2
    u16 Ret = 0;;
	u8  i;

	Hw_I2C_SW_StartTransmit(Ch);
 800205a:	4798      	blx	r3

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address
 800205c:	0071      	lsls	r1, r6, #1
 800205e:	4620      	mov	r0, r4
 8002060:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8002064:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80020dc <Hw_I2C_SW_Write+0x90>
 8002068:	47c0      	blx	r8
 800206a:	4607      	mov	r7, r0


	for( i=0; i<len; i++ )
 800206c:	f1b9 0f00 	cmp.w	r9, #0
 8002070:	d02a      	beq.n	80020c8 <Hw_I2C_SW_Write+0x7c>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 8002072:	4620      	mov	r0, r4
 8002074:	7829      	ldrb	r1, [r5, #0]
 8002076:	47c0      	blx	r8
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002078:	2601      	movs	r6, #1
 800207a:	f109 3aff 	add.w	sl, r9, #4294967295
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 800207e:	ea40 0707 	orr.w	r7, r0, r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002082:	454e      	cmp	r6, r9
 8002084:	f00a 0a01 	and.w	sl, sl, #1
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 8002088:	b2bf      	uxth	r7, r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 800208a:	d21d      	bcs.n	80020c8 <Hw_I2C_SW_Write+0x7c>
 800208c:	f1ba 0f00 	cmp.w	sl, #0
 8002090:	d009      	beq.n	80020a6 <Hw_I2C_SW_Write+0x5a>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 8002092:	4620      	mov	r0, r4
 8002094:	7869      	ldrb	r1, [r5, #1]
 8002096:	47c0      	blx	r8
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002098:	2602      	movs	r6, #2
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 800209a:	ea40 0c07 	orr.w	ip, r0, r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 800209e:	454e      	cmp	r6, r9
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80020a0:	fa1f f78c 	uxth.w	r7, ip
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80020a4:	d210      	bcs.n	80020c8 <Hw_I2C_SW_Write+0x7c>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80020a6:	5da9      	ldrb	r1, [r5, r6]
 80020a8:	4620      	mov	r0, r4
 80020aa:	47c0      	blx	r8
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80020ac:	1c71      	adds	r1, r6, #1
 80020ae:	b2ce      	uxtb	r6, r1
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80020b0:	ea40 0207 	orr.w	r2, r0, r7
 80020b4:	5da9      	ldrb	r1, [r5, r6]
 80020b6:	4620      	mov	r0, r4
 80020b8:	b297      	uxth	r7, r2
 80020ba:	47c0      	blx	r8
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80020bc:	3601      	adds	r6, #1
 80020be:	b2f6      	uxtb	r6, r6
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80020c0:	4338      	orrs	r0, r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80020c2:	454e      	cmp	r6, r9
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80020c4:	b287      	uxth	r7, r0
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80020c6:	d3ee      	bcc.n	80020a6 <Hw_I2C_SW_Write+0x5a>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
	}
	
	Hw_I2C_SW_EndTransmit(Ch);
 80020c8:	4620      	mov	r0, r4
 80020ca:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <Hw_I2C_SW_Write+0x8c>)
 80020cc:	4798      	blx	r3

    return Ret;
}
 80020ce:	4638      	mov	r0, r7
 80020d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020d4:	08001949 	.word	0x08001949
 80020d8:	08001905 	.word	0x08001905
 80020dc:	08001cb5 	.word	0x08001cb5

080020e0 <Hw_Si47xx_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
 80020e0:	b538      	push	{r3, r4, r5, lr}
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 80020e2:	4c0c      	ldr	r4, [pc, #48]	; (8002114 <Hw_Si47xx_Reset+0x34>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
 80020e4:	4d0c      	ldr	r5, [pc, #48]	; (8002118 <Hw_Si47xx_Reset+0x38>)
 80020e6:	2064      	movs	r0, #100	; 0x64
 80020e8:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 80020ea:	6822      	ldr	r2, [r4, #0]
	Hw_Wait(100);
 80020ec:	2064      	movs	r0, #100	; 0x64
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 80020ee:	f042 0120 	orr.w	r1, r2, #32
 80020f2:	6021      	str	r1, [r4, #0]
	Hw_Wait(100);
 80020f4:	47a8      	blx	r5
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 80020f6:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(500);	
 80020f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 80020fc:	f023 0220 	bic.w	r2, r3, #32
 8002100:	6022      	str	r2, [r4, #0]
	Hw_Wait(500);	
 8002102:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8002104:	6821      	ldr	r1, [r4, #0]
	Hw_Wait(100);
 8002106:	2064      	movs	r0, #100	; 0x64
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
	Hw_Wait(500);	
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8002108:	f041 0320 	orr.w	r3, r1, #32
 800210c:	6023      	str	r3, [r4, #0]
	Hw_Wait(100);
 800210e:	47a8      	blx	r5
}
 8002110:	bd38      	pop	{r3, r4, r5, pc}
 8002112:	bf00      	nop
 8002114:	40010c0c 	.word	0x40010c0c
 8002118:	08001149 	.word	0x08001149

0800211c <Hw_Si47xx_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Init( void )
{
 800211c:	b508      	push	{r3, lr}
	Hw_I2C_Init();
 800211e:	4808      	ldr	r0, [pc, #32]	; (8002140 <Hw_Si47xx_Init+0x24>)
 8002120:	4780      	blx	r0

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 8002122:	4808      	ldr	r0, [pc, #32]	; (8002144 <Hw_Si47xx_Init+0x28>)
 8002124:	6801      	ldr	r1, [r0, #0]
 8002126:	f421 0270 	bic.w	r2, r1, #15728640	; 0xf00000
 800212a:	6002      	str	r2, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 800212c:	6803      	ldr	r3, [r0, #0]
 800212e:	f443 1140 	orr.w	r1, r3, #3145728	; 0x300000
 8002132:	6001      	str	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 8002134:	6802      	ldr	r2, [r0, #0]
	

	Hw_Si47xx_Reset();
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <Hw_Si47xx_Init+0x2c>)
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 8002138:	6002      	str	r2, [r0, #0]
	

	Hw_Si47xx_Reset();
 800213a:	4798      	blx	r3
}
 800213c:	bd08      	pop	{r3, pc}
 800213e:	bf00      	nop
 8002140:	0800183d 	.word	0x0800183d
 8002144:	40010c00 	.word	0x40010c00
 8002148:	080020e1 	.word	0x080020e1

0800214c <Hw_Si47xx_SendCommand>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_SendCommand( u8 *pCmd, u16 Length )
{
 800214c:	b510      	push	{r4, lr}
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
	u16 Ret;
	
	Ret = Hw_I2C_Write( 0, HW_SI47XX_ADDR, pCmd, Length );
 8002152:	2000      	movs	r0, #0
 8002154:	2163      	movs	r1, #99	; 0x63
 8002156:	4c01      	ldr	r4, [pc, #4]	; (800215c <Hw_Si47xx_SendCommand+0x10>)
 8002158:	47a0      	blx	r4
	
	return Ret;	
}
 800215a:	bd10      	pop	{r4, pc}
 800215c:	08001849 	.word	0x08001849

08002160 <Hw_Si47xx_ReceiveResponse>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_ReceiveResponse( u8 *pResp, u16 Length, u32 TimeOut )
{
 8002160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u32 i;
	
	TimeStart = Hw_Timer_Get_CountValue();
 8002164:	4e1c      	ldr	r6, [pc, #112]	; (80021d8 <Hw_Si47xx_ReceiveResponse+0x78>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_ReceiveResponse( u8 *pResp, u16 Length, u32 TimeOut )
{
 8002166:	4604      	mov	r4, r0
 8002168:	460d      	mov	r5, r1
 800216a:	4690      	mov	r8, r2
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u32 i;
	
	TimeStart = Hw_Timer_Get_CountValue();
 800216c:	47b0      	blx	r6
 800216e:	4f1b      	ldr	r7, [pc, #108]	; (80021dc <Hw_Si47xx_ReceiveResponse+0x7c>)
 8002170:	4681      	mov	r9, r0
	
	while(1)
	{	
		Ret = Hw_I2C_Read( 0, HW_SI47XX_ADDR, pResp, Length );
 8002172:	2163      	movs	r1, #99	; 0x63
 8002174:	4622      	mov	r2, r4
 8002176:	462b      	mov	r3, r5
 8002178:	2000      	movs	r0, #0
 800217a:	47b8      	blx	r7
		
		if( Ret == ERR_NONE )
 800217c:	b918      	cbnz	r0, 8002186 <Hw_Si47xx_ReceiveResponse+0x26>
		{
			if( pResp[0] & (1<<7) )
 800217e:	f994 3000 	ldrsb.w	r3, [r4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db07      	blt.n	8002196 <Hw_Si47xx_ReceiveResponse+0x36>
			}
		}
	
		//-- 타임 아웃 처리
		//
		TimeEnd = Hw_Timer_Get_CountValue();
 8002186:	47b0      	blx	r6
		
		if( (TimeEnd - TimeStart) > TimeOut )
 8002188:	ebc9 0000 	rsb	r0, r9, r0
 800218c:	4540      	cmp	r0, r8
 800218e:	d9f0      	bls.n	8002172 <Hw_Si47xx_ReceiveResponse+0x12>
		{
			Ret = HW_SI47XX_ERR_TIME_OUT;
 8002190:	2002      	movs	r0, #2
			Hw_Si47xx_LastResp[i] = pResp[i];
		}
	}
	
	return Ret;	
}
 8002192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002196:	2d00      	cmp	r5, #0
 8002198:	d0fb      	beq.n	8002192 <Hw_Si47xx_ReceiveResponse+0x32>
 800219a:	2301      	movs	r3, #1
 800219c:	4910      	ldr	r1, [pc, #64]	; (80021e0 <Hw_Si47xx_ReceiveResponse+0x80>)
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 800219e:	7826      	ldrb	r6, [r4, #0]
 80021a0:	1e6a      	subs	r2, r5, #1
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 80021a2:	42ab      	cmp	r3, r5
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 80021a4:	700e      	strb	r6, [r1, #0]
 80021a6:	ea02 0203 	and.w	r2, r2, r3
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 80021aa:	d211      	bcs.n	80021d0 <Hw_Si47xx_ReceiveResponse+0x70>
 80021ac:	b132      	cbz	r2, 80021bc <Hw_Si47xx_ReceiveResponse+0x5c>
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 80021ae:	f894 c001 	ldrb.w	ip, [r4, #1]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 80021b2:	2302      	movs	r3, #2
 80021b4:	42ab      	cmp	r3, r5
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 80021b6:	f881 c001 	strb.w	ip, [r1, #1]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 80021ba:	d20b      	bcs.n	80021d4 <Hw_Si47xx_ReceiveResponse+0x74>
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 80021bc:	5ce6      	ldrb	r6, [r4, r3]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 80021be:	1c5a      	adds	r2, r3, #1
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 80021c0:	54ce      	strb	r6, [r1, r3]
 80021c2:	5ca6      	ldrb	r6, [r4, r2]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 80021c4:	3302      	adds	r3, #2
 80021c6:	42ab      	cmp	r3, r5
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 80021c8:	548e      	strb	r6, [r1, r2]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 80021ca:	d3f7      	bcc.n	80021bc <Hw_Si47xx_ReceiveResponse+0x5c>
 80021cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021d8:	0800180d 	.word	0x0800180d
 80021dc:	08001855 	.word	0x08001855
 80021e0:	20000990 	.word	0x20000990

080021e4 <Hw_Si47xx_POWER_UP>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_POWER_UP( u8 Mode )
{
 80021e4:	b510      	push	{r4, lr}
 80021e6:	4604      	mov	r4, r0
 80021e8:	b086      	sub	sp, #24
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];
	u16 i;

	//-- 보드 리셋
	//
	Hw_Si47xx_Reset();
 80021ea:	480e      	ldr	r0, [pc, #56]	; (8002224 <Hw_Si47xx_POWER_UP+0x40>)
 80021ec:	4780      	blx	r0


	Cmd[0] = 0x01;		// POWER_UP 명령
 80021ee:	2301      	movs	r3, #1
 80021f0:	f88d 3010 	strb.w	r3, [sp, #16]
	
	if( Mode == HW_SI47XX_BAND_MODE_FM )
 80021f4:	b994      	cbnz	r4, 800221c <Hw_Si47xx_POWER_UP+0x38>
	{
		Cmd[1] = 0			// FM
 80021f6:	2110      	movs	r1, #16
 80021f8:	f88d 1011 	strb.w	r1, [sp, #17]
				| (0<<7)	// CTS interrupt enabled 
				| (1<<4);	// Crystal Oscillator Enable
	}

	
	Cmd[2] = 0xB5;		// Analog Output
 80021fc:	22b5      	movs	r2, #181	; 0xb5



	
	Ret = Hw_Si47xx_SendCommand( Cmd, 3 );
 80021fe:	a804      	add	r0, sp, #16
 8002200:	2103      	movs	r1, #3
				| (0<<7)	// CTS interrupt enabled 
				| (1<<4);	// Crystal Oscillator Enable
	}

	
	Cmd[2] = 0xB5;		// Analog Output
 8002202:	f88d 2012 	strb.w	r2, [sp, #18]



	
	Ret = Hw_Si47xx_SendCommand( Cmd, 3 );
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <Hw_Si47xx_POWER_UP+0x44>)
 8002208:	4798      	blx	r3
		
	if( Ret == ERR_NONE )
 800220a:	b928      	cbnz	r0, 8002218 <Hw_Si47xx_POWER_UP+0x34>
	{
		Ret = Hw_Si47xx_ReceiveResponse( Resp, 0+1, 1000 );
 800220c:	4668      	mov	r0, sp
 800220e:	2101      	movs	r1, #1
 8002210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <Hw_Si47xx_POWER_UP+0x48>)
 8002216:	4798      	blx	r3
	#if HW_SI47XX_DEBUG_SHOW == 1
	Lb_printf("Ret : %x , St : %x \n", Ret, Resp[0] );
	#endif
	
	return Ret;	
}
 8002218:	b006      	add	sp, #24
 800221a:	bd10      	pop	{r4, pc}
				| (1<<4);	// Crystal Oscillator Enable
				
	}
	else
	{
		Cmd[1] = 1			// AM
 800221c:	2211      	movs	r2, #17
 800221e:	f88d 2011 	strb.w	r2, [sp, #17]
 8002222:	e7eb      	b.n	80021fc <Hw_Si47xx_POWER_UP+0x18>
 8002224:	080020e1 	.word	0x080020e1
 8002228:	0800214d 	.word	0x0800214d
 800222c:	08002161 	.word	0x08002161

08002230 <Hw_Si47xx_WaitForCTS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_WaitForCTS( void  )
{
 8002230:	b500      	push	{lr}
 8002232:	b083      	sub	sp, #12
	u16 Ret;
	u8  Resp[1];

	Ret = Hw_Si47xx_ReceiveResponse( Resp, 1, 1000 );	
 8002234:	a801      	add	r0, sp, #4
 8002236:	2101      	movs	r1, #1
 8002238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800223c:	4b01      	ldr	r3, [pc, #4]	; (8002244 <Hw_Si47xx_WaitForCTS+0x14>)
 800223e:	4798      	blx	r3
	
	return Ret;	
 8002240:	b003      	add	sp, #12
 8002242:	bd00      	pop	{pc}
 8002244:	08002161 	.word	0x08002161

08002248 <Hw_Si47xx_CommandResp>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_CommandResp( u8 *pCmd, u16 CmdLength, u8 *pResp, u16 RespLength, u32 TimeOut )
{
 8002248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224a:	461f      	mov	r7, r3
	u16 Ret;
	#if HW_SI47XX_DEBUG_SHOW_RESP == 1
	u32 i;
	#endif
	
	Ret = Hw_Si47xx_WaitForCTS();
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <Hw_Si47xx_CommandResp+0x3c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_CommandResp( u8 *pCmd, u16 CmdLength, u8 *pResp, u16 RespLength, u32 TimeOut )
{
 800224e:	4604      	mov	r4, r0
 8002250:	460e      	mov	r6, r1
 8002252:	4615      	mov	r5, r2
	u16 Ret;
	#if HW_SI47XX_DEBUG_SHOW_RESP == 1
	u32 i;
	#endif
	
	Ret = Hw_Si47xx_WaitForCTS();
 8002254:	4798      	blx	r3

	if( Ret == ERR_NONE )
 8002256:	b100      	cbz	r0, 800225a <Hw_Si47xx_CommandResp+0x12>
	}
	#endif
	
	
	return Ret;	
}
 8002258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	
	Ret = Hw_Si47xx_WaitForCTS();

	if( Ret == ERR_NONE )
	{
		Ret = Hw_Si47xx_SendCommand( pCmd, CmdLength );
 800225a:	4620      	mov	r0, r4
 800225c:	4631      	mov	r1, r6
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <Hw_Si47xx_CommandResp+0x40>)
 8002260:	4790      	blx	r2
		
		if( Ret == ERR_NONE )
 8002262:	2800      	cmp	r0, #0
 8002264:	d1f8      	bne.n	8002258 <Hw_Si47xx_CommandResp+0x10>
		{
			Ret = Hw_Si47xx_ReceiveResponse( pResp, RespLength+1, TimeOut );			
 8002266:	1c79      	adds	r1, r7, #1
 8002268:	4628      	mov	r0, r5
 800226a:	b289      	uxth	r1, r1
 800226c:	9a06      	ldr	r2, [sp, #24]
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <Hw_Si47xx_CommandResp+0x44>)
 8002270:	4798      	blx	r3
			
			if( Ret == ERR_NONE )
 8002272:	2800      	cmp	r0, #0
 8002274:	d1f0      	bne.n	8002258 <Hw_Si47xx_CommandResp+0x10>
			{
				if( pResp[0] & (1<<6) )
 8002276:	f895 c000 	ldrb.w	ip, [r5]
 800227a:	f01c 0f40 	tst.w	ip, #64	; 0x40
				{
					Ret = HW_SI47XX_ERR_RESP;
 800227e:	bf18      	it	ne
 8002280:	2003      	movne	r0, #3
 8002282:	e7e9      	b.n	8002258 <Hw_Si47xx_CommandResp+0x10>
 8002284:	08002231 	.word	0x08002231
 8002288:	0800214d 	.word	0x0800214d
 800228c:	08002161 	.word	0x08002161

08002290 <Hw_Si47xx_AM_TUNE_STATUS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_STATUS( u8 Option )
{
 8002290:	b510      	push	{r4, lr}
	HW_SI47XX_PRINTF("AM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x42;	
 8002292:	2442      	movs	r4, #66	; 0x42
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_STATUS( u8 Option )
{
 8002294:	b088      	sub	sp, #32
	HW_SI47XX_PRINTF("AM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x42;	
 8002296:	f88d 4018 	strb.w	r4, [sp, #24]
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 800229a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x42;	
	Cmd[Index++] = Option;	
 800229e:	f88d 0019 	strb.w	r0, [sp, #25]
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 80022a2:	9400      	str	r4, [sp, #0]
 80022a4:	a806      	add	r0, sp, #24
 80022a6:	2102      	movs	r1, #2
 80022a8:	aa02      	add	r2, sp, #8
 80022aa:	2307      	movs	r3, #7
 80022ac:	4c01      	ldr	r4, [pc, #4]	; (80022b4 <Hw_Si47xx_AM_TUNE_STATUS+0x24>)
 80022ae:	47a0      	blx	r4
		
	return Ret;	
}
 80022b0:	b008      	add	sp, #32
 80022b2:	bd10      	pop	{r4, pc}
 80022b4:	08002249 	.word	0x08002249

080022b8 <Hw_Si47xx_FM_TUNE_STATUS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_STATUS( u8 Option )
{
 80022b8:	b510      	push	{r4, lr}
	HW_SI47XX_PRINTF("FM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x22;	
 80022ba:	2422      	movs	r4, #34	; 0x22
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_STATUS( u8 Option )
{
 80022bc:	b088      	sub	sp, #32
	HW_SI47XX_PRINTF("FM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x22;	
 80022be:	f88d 4018 	strb.w	r4, [sp, #24]
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 80022c2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x22;	
	Cmd[Index++] = Option;	
 80022c6:	f88d 0019 	strb.w	r0, [sp, #25]
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 80022ca:	9400      	str	r4, [sp, #0]
 80022cc:	a806      	add	r0, sp, #24
 80022ce:	2102      	movs	r1, #2
 80022d0:	aa02      	add	r2, sp, #8
 80022d2:	2307      	movs	r3, #7
 80022d4:	4c01      	ldr	r4, [pc, #4]	; (80022dc <Hw_Si47xx_FM_TUNE_STATUS+0x24>)
 80022d6:	47a0      	blx	r4
		
	return Ret;	
}
 80022d8:	b008      	add	sp, #32
 80022da:	bd10      	pop	{r4, pc}
 80022dc:	08002249 	.word	0x08002249

080022e0 <Hw_Si47xx_GET_INT_STATUS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_GET_INT_STATUS( u8 *pStatus )
{
 80022e0:	b530      	push	{r4, r5, lr}
 80022e2:	b089      	sub	sp, #36	; 0x24
	HW_SI47XX_PRINTF("GET_INT_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x14;	
 80022e4:	a908      	add	r1, sp, #32
 80022e6:	2214      	movs	r2, #20
 80022e8:	f801 2d08 	strb.w	r2, [r1, #-8]!
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80022ec:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_GET_INT_STATUS( u8 *pStatus )
{
 80022f0:	4604      	mov	r4, r0
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x14;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80022f2:	2300      	movs	r3, #0
 80022f4:	9500      	str	r5, [sp, #0]
 80022f6:	4608      	mov	r0, r1
 80022f8:	aa02      	add	r2, sp, #8
 80022fa:	2101      	movs	r1, #1
 80022fc:	4d03      	ldr	r5, [pc, #12]	; (800230c <Hw_Si47xx_GET_INT_STATUS+0x2c>)
 80022fe:	47a8      	blx	r5
	
	*pStatus = Resp[0];
 8002300:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002304:	7023      	strb	r3, [r4, #0]
		
	return Ret;	
}
 8002306:	b009      	add	sp, #36	; 0x24
 8002308:	bd30      	pop	{r4, r5, pc}
 800230a:	bf00      	nop
 800230c:	08002249 	.word	0x08002249

08002310 <Hw_Si47xx_WaitForSTC>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_WaitForSTC( u32 TimeOut )
{
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u8  Status;
	
	TimeStart = Hw_Timer_Get_CountValue();
 8002312:	4c0b      	ldr	r4, [pc, #44]	; (8002340 <Hw_Si47xx_WaitForSTC+0x30>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_WaitForSTC( u32 TimeOut )
{
 8002314:	b083      	sub	sp, #12
 8002316:	4607      	mov	r7, r0
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u8  Status;
	
	TimeStart = Hw_Timer_Get_CountValue();
 8002318:	47a0      	blx	r4
 800231a:	4d0a      	ldr	r5, [pc, #40]	; (8002344 <Hw_Si47xx_WaitForSTC+0x34>)
 800231c:	4606      	mov	r6, r0
	
	while(1)
	{	
		Ret = Hw_Si47xx_GET_INT_STATUS( &Status );
 800231e:	f10d 0007 	add.w	r0, sp, #7
 8002322:	47a8      	blx	r5
		
		if( Ret == ERR_NONE )
 8002324:	b920      	cbnz	r0, 8002330 <Hw_Si47xx_WaitForSTC+0x20>
		{
			if( Status & (1<<0) )
 8002326:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800232a:	f013 0f01 	tst.w	r3, #1
 800232e:	d104      	bne.n	800233a <Hw_Si47xx_WaitForSTC+0x2a>
			}
		}
	
		//-- 타임 아웃 처리
		//
		TimeEnd = Hw_Timer_Get_CountValue();
 8002330:	47a0      	blx	r4
		
		if( (TimeEnd - TimeStart) > TimeOut )
 8002332:	1b80      	subs	r0, r0, r6
 8002334:	42b8      	cmp	r0, r7
 8002336:	d9f2      	bls.n	800231e <Hw_Si47xx_WaitForSTC+0xe>
		{
			Ret = HW_SI47XX_ERR_TIME_OUT;
 8002338:	2002      	movs	r0, #2
			break;
		}
	}
	
	return Ret;		
}
 800233a:	b003      	add	sp, #12
 800233c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233e:	bf00      	nop
 8002340:	0800180d 	.word	0x0800180d
 8002344:	080022e1 	.word	0x080022e1

08002348 <Hw_Si47xx_AM_TUNE_FREQ>:
     			520khz -> 1710khz
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_FREQ( u16 Frequency )
{
 8002348:	b5f0      	push	{r4, r5, r6, r7, lr}
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x40;
	Cmd[Index++] = 0x00;
 800234a:	2400      	movs	r4, #0
     			520khz -> 1710khz
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_FREQ( u16 Frequency )
{
 800234c:	b089      	sub	sp, #36	; 0x24
 800234e:	4605      	mov	r5, r0

	Index = 0;
	
	Cmd[Index++] = 0x40;
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 8002350:	0a06      	lsrs	r6, r0, #8
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002352:	4623      	mov	r3, r4
	HW_SI47XX_PRINTF("AM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x40;
 8002354:	2740      	movs	r7, #64	; 0x40
	Cmd[Index++] = 0x00;
 8002356:	f88d 4019 	strb.w	r4, [sp, #25]
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
 800235a:	f88d 401c 	strb.w	r4, [sp, #28]
	Cmd[Index++] = 0x00; 								// ANTCAP
 800235e:	f88d 401d 	strb.w	r4, [sp, #29]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002362:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002366:	9400      	str	r4, [sp, #0]
 8002368:	a806      	add	r0, sp, #24
 800236a:	2106      	movs	r1, #6
 800236c:	aa02      	add	r2, sp, #8
	HW_SI47XX_PRINTF("AM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x40;
 800236e:	f88d 7018 	strb.w	r7, [sp, #24]
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 8002372:	f88d 601a 	strb.w	r6, [sp, #26]
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
 8002376:	f88d 501b 	strb.w	r5, [sp, #27]
	Cmd[Index++] = 0x00; 								// ANTCAP
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 800237a:	4c02      	ldr	r4, [pc, #8]	; (8002384 <Hw_Si47xx_AM_TUNE_FREQ+0x3c>)
 800237c:	47a0      	blx	r4
		
	return Ret;	
}
 800237e:	b009      	add	sp, #36	; 0x24
 8002380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002382:	bf00      	nop
 8002384:	08002249 	.word	0x08002249

08002388 <Hw_Si47xx_FM_TUNE_FREQ>:
     			107.7Mhz -> 10770
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_FREQ( u16 Frequency )
{
 8002388:	b5f0      	push	{r4, r5, r6, r7, lr}
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x20;
	Cmd[Index++] = 0x00;
 800238a:	2400      	movs	r4, #0
     			107.7Mhz -> 10770
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_FREQ( u16 Frequency )
{
 800238c:	b089      	sub	sp, #36	; 0x24
 800238e:	4605      	mov	r5, r0

	Index = 0;
	
	Cmd[Index++] = 0x20;
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 8002390:	0a06      	lsrs	r6, r0, #8
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002392:	4623      	mov	r3, r4
	HW_SI47XX_PRINTF("FM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x20;
 8002394:	2720      	movs	r7, #32
	Cmd[Index++] = 0x00;
 8002396:	f88d 4019 	strb.w	r4, [sp, #25]
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
 800239a:	f88d 401c 	strb.w	r4, [sp, #28]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 800239e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80023a2:	9400      	str	r4, [sp, #0]
 80023a4:	a806      	add	r0, sp, #24
 80023a6:	2105      	movs	r1, #5
 80023a8:	aa02      	add	r2, sp, #8
	HW_SI47XX_PRINTF("FM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x20;
 80023aa:	f88d 7018 	strb.w	r7, [sp, #24]
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 80023ae:	f88d 601a 	strb.w	r6, [sp, #26]
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
 80023b2:	f88d 501b 	strb.w	r5, [sp, #27]
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80023b6:	4c02      	ldr	r4, [pc, #8]	; (80023c0 <Hw_Si47xx_FM_TUNE_FREQ+0x38>)
 80023b8:	47a0      	blx	r4
		
	return Ret;	
}
 80023ba:	b009      	add	sp, #36	; 0x24
 80023bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023be:	bf00      	nop
 80023c0:	08002249 	.word	0x08002249

080023c4 <Hw_Si47xx_SET_PROPERTY>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_SET_PROPERTY( u16 PropertyName, u16 PropertyValue )
{
 80023c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c6:	460c      	mov	r4, r1
 80023c8:	b089      	sub	sp, #36	; 0x24
 80023ca:	4605      	mov	r5, r0
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x12;
	Cmd[Index++] = 0x00;
 80023cc:	2600      	movs	r6, #0
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
 80023ce:	ea4f 2e10 	mov.w	lr, r0, lsr #8
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
 80023d2:	0a0f      	lsrs	r7, r1, #8
	HW_SI47XX_PRINTF("SET_PROPERTY : %x, %x\n", PropertyName, PropertyValue );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x12;
 80023d4:	f04f 0c12 	mov.w	ip, #18
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 0 ) & 0xFF;
 80023d8:	f88d 401d 	strb.w	r4, [sp, #29]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80023dc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80023e0:	9400      	str	r4, [sp, #0]
 80023e2:	a806      	add	r0, sp, #24
 80023e4:	2106      	movs	r1, #6
 80023e6:	aa02      	add	r2, sp, #8
 80023e8:	4633      	mov	r3, r6
	HW_SI47XX_PRINTF("SET_PROPERTY : %x, %x\n", PropertyName, PropertyValue );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x12;
 80023ea:	f88d c018 	strb.w	ip, [sp, #24]
	Cmd[Index++] = 0x00;
 80023ee:	f88d 6019 	strb.w	r6, [sp, #25]
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
 80023f2:	f88d e01a 	strb.w	lr, [sp, #26]
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
 80023f6:	f88d 501b 	strb.w	r5, [sp, #27]
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
 80023fa:	f88d 701c 	strb.w	r7, [sp, #28]
	Cmd[Index++] = ( PropertyValue >> 0 ) & 0xFF;
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80023fe:	4c02      	ldr	r4, [pc, #8]	; (8002408 <Hw_Si47xx_SET_PROPERTY+0x44>)
 8002400:	47a0      	blx	r4
	
	return Ret;	
}
 8002402:	b009      	add	sp, #36	; 0x24
 8002404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002406:	bf00      	nop
 8002408:	08002249 	.word	0x08002249

0800240c <Hw_Si47xx_FM_Config>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_Config( void )
{
 800240c:	b530      	push	{r4, r5, lr}
	u8  Cmd [HW_SI47XX_MAX_LENGTH_CMD];
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];	

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_FM)) != ERR_NONE )	return Ret;
 800240e:	2000      	movs	r0, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_Config( void )
{
 8002410:	b089      	sub	sp, #36	; 0x24
	u8  Cmd [HW_SI47XX_MAX_LENGTH_CMD];
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];	

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_FM)) != ERR_NONE )	return Ret;
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <Hw_Si47xx_FM_Config+0x94>)
 8002414:	4798      	blx	r3
 8002416:	4604      	mov	r4, r0
 8002418:	b110      	cbz	r0, 8002420 <Hw_Si47xx_FM_Config+0x14>
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4001, 0  );
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4000, 63 );				

	
	return Ret;
}
 800241a:	4620      	mov	r0, r4
 800241c:	b009      	add	sp, #36	; 0x24
 800241e:	bd30      	pop	{r4, r5, pc}

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_FM)) != ERR_NONE )	return Ret;
		
	Hw_Timer_Delay_ms(120);
 8002420:	2078      	movs	r0, #120	; 0x78
 8002422:	4a20      	ldr	r2, [pc, #128]	; (80024a4 <Hw_Si47xx_FM_Config+0x98>)
 8002424:	4790      	blx	r2
	#if HW_SI47XX_DEBUG_SHOW == 1
	HW_SI47XX_PRINTF("GET_REV\n");
	#endif

	Cmd[0] = 0x10;
	if( (Ret = Hw_Si47xx_CommandResp( Cmd, 1, Resp, 8, 1000 )) != ERR_NONE ) return Ret;
 8002426:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	//
	#if HW_SI47XX_DEBUG_SHOW == 1
	HW_SI47XX_PRINTF("GET_REV\n");
	#endif

	Cmd[0] = 0x10;
 800242a:	a808      	add	r0, sp, #32
 800242c:	2110      	movs	r1, #16
 800242e:	f800 1d08 	strb.w	r1, [r0, #-8]!
	if( (Ret = Hw_Si47xx_CommandResp( Cmd, 1, Resp, 8, 1000 )) != ERR_NONE ) return Ret;
 8002432:	aa02      	add	r2, sp, #8
 8002434:	9400      	str	r4, [sp, #0]
 8002436:	2101      	movs	r1, #1
 8002438:	4c1b      	ldr	r4, [pc, #108]	; (80024a8 <Hw_Si47xx_FM_Config+0x9c>)
 800243a:	2308      	movs	r3, #8
 800243c:	47a0      	blx	r4
 800243e:	4604      	mov	r4, r0
 8002440:	2800      	cmp	r0, #0
 8002442:	d1ea      	bne.n	800241a <Hw_Si47xx_FM_Config+0xe>
	
	
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0001, 0x0005 );		// Seek/Tune Complete Interrupt Enable
 8002444:	4d19      	ldr	r5, [pc, #100]	; (80024ac <Hw_Si47xx_FM_Config+0xa0>)
 8002446:	2105      	movs	r1, #5
 8002448:	2001      	movs	r0, #1
 800244a:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0201, 32768 );		// REFCLK_FREQ
 800244c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002450:	f240 2001 	movw	r0, #513	; 0x201
 8002454:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0202, 1     );		// PRESCALE
 8002456:	2101      	movs	r1, #1
 8002458:	f240 2002 	movw	r0, #514	; 0x202
 800245c:	47a8      	blx	r5

		
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1502, 0     );		// FM_RDS_CONFIG
 800245e:	4621      	mov	r1, r4
 8002460:	f241 5002 	movw	r0, #5378	; 0x1502
 8002464:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1100, 1     );		// FM_DEEMPHASIS
 8002466:	2101      	movs	r1, #1
 8002468:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800246c:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1400, 7600 );		// FM_SEEK_BAND_BOTTOM
 800246e:	f641 51b0 	movw	r1, #7600	; 0x1db0
 8002472:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002476:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1401, 10790 );		// FM_SEEK_BAND_TOP
 8002478:	f642 2126 	movw	r1, #10790	; 0x2a26
 800247c:	f241 4001 	movw	r0, #5121	; 0x1401
 8002480:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1402, 10    );		// FM_SEEK_FREQ_SPACING
 8002482:	210a      	movs	r1, #10
 8002484:	f241 4002 	movw	r0, #5122	; 0x1402
 8002488:	47a8      	blx	r5
	//Ret = Hw_Si47xx_SET_PROPERTY( 0x1403, 3     );		// FM_SEEK_TUNE_SNR_THRESHOLD   3
	//Ret = Hw_Si47xx_SET_PROPERTY( 0x1404, 20    );		// FM_SEEK_TUNE_RSSI_THRESHOLD


	Ret = Hw_Si47xx_SET_PROPERTY( 0x4001, 0  );
 800248a:	4621      	mov	r1, r4
 800248c:	f244 0001 	movw	r0, #16385	; 0x4001
 8002490:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4000, 63 );				
 8002492:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002496:	213f      	movs	r1, #63	; 0x3f
 8002498:	47a8      	blx	r5
 800249a:	4604      	mov	r4, r0

	
	return Ret;
 800249c:	e7bd      	b.n	800241a <Hw_Si47xx_FM_Config+0xe>
 800249e:	bf00      	nop
 80024a0:	080021e5 	.word	0x080021e5
 80024a4:	080017f9 	.word	0x080017f9
 80024a8:	08002249 	.word	0x08002249
 80024ac:	080023c5 	.word	0x080023c5

080024b0 <Hw_SPI_Enable>:
              
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Enable( u8 Ch )
{
	switch( Ch )
 80024b0:	2801      	cmp	r0, #1
 80024b2:	d104      	bne.n	80024be <Hw_SPI_Enable+0xe>
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR1, 6 );
 80024b4:	4b02      	ldr	r3, [pc, #8]	; (80024c0 <Hw_SPI_Enable+0x10>)
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	4770      	bx	lr
 80024c0:	40003800 	.word	0x40003800

080024c4 <Hw_SPI_Ch2_Init>:

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 80024c4:	4917      	ldr	r1, [pc, #92]	; (8002524 <Hw_SPI_Ch2_Init+0x60>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Ch2_Init(void)
{
 80024c6:	b508      	push	{r3, lr}

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 80024c8:	680b      	ldr	r3, [r1, #0]
 80024ca:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80024ce:	600a      	str	r2, [r1, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 80024d0:	6808      	ldr	r0, [r1, #0]
 80024d2:	f440 3340 	orr.w	r3, r0, #196608	; 0x30000
 80024d6:	600b      	str	r3, [r1, #0]
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 80024d8:	680a      	ldr	r2, [r1, #0]
 80024da:	f442 2000 	orr.w	r0, r2, #524288	; 0x80000
 80024de:	6008      	str	r0, [r1, #0]
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 80024e0:	680b      	ldr	r3, [r1, #0]
	REG_SPI2_CR2 = 0
        | ( 1 <<  2 );  // SSOE      - SS output enable
        				//             0 : Disabled
		                //             1 : Enabled

	Hw_SPI_Enable(HW_SPI_CH2);	
 80024e2:	2001      	movs	r0, #1
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 80024e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80024e8:	600a      	str	r2, [r1, #0]
	REG_GPIOB_CRH |=  (0x03 << (20));	// MODE   - Output mode, max speed 50Mhz
 80024ea:	680b      	ldr	r3, [r1, #0]
 80024ec:	f443 1240 	orr.w	r2, r3, #3145728	; 0x300000
 80024f0:	600a      	str	r2, [r1, #0]
	REG_GPIOB_CRH |=  (0x02 << (22));	// CNF    - Alternate function output Push-pull
 80024f2:	680b      	ldr	r3, [r1, #0]
 80024f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024f8:	600a      	str	r2, [r1, #0]

	// PB15 - SPI2_MOSI
	REG_GPIOB_CRH &= ~(0x0F << (28));	// Clear
 80024fa:	680b      	ldr	r3, [r1, #0]
 80024fc:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002500:	600a      	str	r2, [r1, #0]
	REG_GPIOB_CRH |=  (0x03 << (28));	// MODE   - Output mode, max speed 50Mhz
 8002502:	680b      	ldr	r3, [r1, #0]
 8002504:	f043 5240 	orr.w	r2, r3, #805306368	; 0x30000000
 8002508:	600a      	str	r2, [r1, #0]
	REG_GPIOB_CRH |=  (0x02 << (30));	// CNF    - Alternate function output Push-pull
 800250a:	680b      	ldr	r3, [r1, #0]
 800250c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002510:	600a      	str	r2, [r1, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8002512:	4905      	ldr	r1, [pc, #20]	; (8002528 <Hw_SPI_Ch2_Init+0x64>)
 8002514:	f244 031c 	movw	r3, #16412	; 0x401c
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8002518:	2204      	movs	r2, #4



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 800251a:	600b      	str	r3, [r1, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 800251c:	604a      	str	r2, [r1, #4]
        | ( 1 <<  2 );  // SSOE      - SS output enable
        				//             0 : Disabled
		                //             1 : Enabled

	Hw_SPI_Enable(HW_SPI_CH2);	
 800251e:	4b03      	ldr	r3, [pc, #12]	; (800252c <Hw_SPI_Ch2_Init+0x68>)
 8002520:	4798      	blx	r3
}
 8002522:	bd08      	pop	{r3, pc}
 8002524:	40010c04 	.word	0x40010c04
 8002528:	40003800 	.word	0x40003800
 800252c:	080024b1 	.word	0x080024b1

08002530 <Hw_SPI_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Init(void)
{
 8002530:	b510      	push	{r4, lr}
	static u8 Called = 0;


	if( Called == 1 ) return;
 8002532:	4c07      	ldr	r4, [pc, #28]	; (8002550 <Hw_SPI_Init+0x20>)
 8002534:	7823      	ldrb	r3, [r4, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d008      	beq.n	800254c <Hw_SPI_Init+0x1c>


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <Hw_SPI_Init+0x24>)
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 800253c:	4906      	ldr	r1, [pc, #24]	; (8002558 <Hw_SPI_Init+0x28>)
	if( Called == 1 ) return;


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	f440 4280 	orr.w	r2, r0, #16384	; 0x4000
 8002544:	601a      	str	r2, [r3, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 8002546:	4788      	blx	r1

	Called = 1;	
 8002548:	2001      	movs	r0, #1
 800254a:	7020      	strb	r0, [r4, #0]
 800254c:	bd10      	pop	{r4, pc}
 800254e:	bf00      	nop
 8002550:	20000482 	.word	0x20000482
 8002554:	4002101c 	.word	0x4002101c
 8002558:	080024c5 	.word	0x080024c5

0800255c <Hw_SPI_Write8Bit>:
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 800255c:	2801      	cmp	r0, #1
 800255e:	d001      	beq.n	8002564 <Hw_SPI_Write8Bit+0x8>
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8002560:	2000      	movs	r0, #0
 8002562:	4770      	bx	lr
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <Hw_SPI_Write8Bit+0x5c>)
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8002566:	f242 730f 	movw	r3, #9999	; 0x270f
 800256a:	e006      	b.n	800257a <Hw_SPI_Write8Bit+0x1e>
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 800256c:	6810      	ldr	r0, [r2, #0]
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 800256e:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8002570:	f010 0f02 	tst.w	r0, #2
 8002574:	d105      	bne.n	8002582 <Hw_SPI_Write8Bit+0x26>
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 8002576:	3b01      	subs	r3, #1
 8002578:	d306      	bcc.n	8002588 <Hw_SPI_Write8Bit+0x2c>
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 800257a:	6810      	ldr	r0, [r2, #0]
 800257c:	f010 0f02 	tst.w	r0, #2
 8002580:	d0f4      	beq.n	800256c <Hw_SPI_Write8Bit+0x10>
			}
			if( TimeOut == 0 ) return 1;
 8002582:	b90b      	cbnz	r3, 8002588 <Hw_SPI_Write8Bit+0x2c>
 8002584:	2001      	movs	r0, #1
 8002586:	4770      	bx	lr
			REG_SPI2_DR = WriteData;
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <Hw_SPI_Write8Bit+0x60>)

			
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <Hw_SPI_Write8Bit+0x5c>)
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
			}
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;
 800258c:	6019      	str	r1, [r3, #0]

			
			TimeOut = 10000;	
			while( TimeOut-- )
 800258e:	f242 730f 	movw	r3, #9999	; 0x270f
 8002592:	e006      	b.n	80025a2 <Hw_SPI_Write8Bit+0x46>
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8002594:	6810      	ldr	r0, [r2, #0]
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8002596:	3b01      	subs	r3, #1
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8002598:	f010 0f01 	tst.w	r0, #1
 800259c:	d105      	bne.n	80025aa <Hw_SPI_Write8Bit+0x4e>
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 800259e:	3b01      	subs	r3, #1
 80025a0:	d304      	bcc.n	80025ac <Hw_SPI_Write8Bit+0x50>
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 80025a2:	6811      	ldr	r1, [r2, #0]
 80025a4:	f011 0f01 	tst.w	r1, #1
 80025a8:	d0f4      	beq.n	8002594 <Hw_SPI_Write8Bit+0x38>
			}
			if( TimeOut == 0 ) return 1;
 80025aa:	b11b      	cbz	r3, 80025b4 <Hw_SPI_Write8Bit+0x58>
		
			ReadData = REG_SPI2_DR;
 80025ac:	4a03      	ldr	r2, [pc, #12]	; (80025bc <Hw_SPI_Write8Bit+0x60>)
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 80025ae:	2000      	movs	r0, #0
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
			}
			if( TimeOut == 0 ) return 1;
		
			ReadData = REG_SPI2_DR;
 80025b0:	6813      	ldr	r3, [r2, #0]
			
			break;
 80025b2:	4770      	bx	lr
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
			}
			if( TimeOut == 0 ) return 1;
 80025b4:	2001      	movs	r0, #1
			break;
	}
	

    return 0;
}
 80025b6:	4770      	bx	lr
 80025b8:	40003808 	.word	0x40003808
 80025bc:	4000380c 	.word	0x4000380c

080025c0 <Hw_N5110_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110_Reset(void)
{
 80025c0:	b510      	push	{r4, lr}
	HW_N5110_RESET_ON();
 80025c2:	4c06      	ldr	r4, [pc, #24]	; (80025dc <Hw_N5110_Reset+0x1c>)
	Hw_Timer_Delay_ms(10);
 80025c4:	200a      	movs	r0, #10
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110_Reset(void)
{
	HW_N5110_RESET_ON();
 80025c6:	6823      	ldr	r3, [r4, #0]
	Hw_Timer_Delay_ms(10);
 80025c8:	4905      	ldr	r1, [pc, #20]	; (80025e0 <Hw_N5110_Reset+0x20>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110_Reset(void)
{
	HW_N5110_RESET_ON();
 80025ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025ce:	6022      	str	r2, [r4, #0]
	Hw_Timer_Delay_ms(10);
 80025d0:	4788      	blx	r1
	HW_N5110_RESET_OFF();
 80025d2:	6820      	ldr	r0, [r4, #0]
 80025d4:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
 80025d8:	6023      	str	r3, [r4, #0]
}
 80025da:	bd10      	pop	{r4, pc}
 80025dc:	40010c0c 	.word	0x40010c0c
 80025e0:	080017f9 	.word	0x080017f9

080025e4 <Hw_N5110_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110_WriteCmd( u8 CmdData )
{
 80025e4:	b508      	push	{r3, lr}
	u16 Ret;
	
	HW_N5110_SEL_CMD();
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <Hw_N5110_WriteCmd+0x18>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110_WriteCmd( u8 CmdData )
{
 80025e8:	4601      	mov	r1, r0
	u16 Ret;
	
	HW_N5110_SEL_CMD();
 80025ea:	681a      	ldr	r2, [r3, #0]

	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 80025ec:	2001      	movs	r0, #1
---------------------------------------------------------------------------*/
u16 Hw_N5110_WriteCmd( u8 CmdData )
{
	u16 Ret;
	
	HW_N5110_SEL_CMD();
 80025ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025f2:	601a      	str	r2, [r3, #0]

	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 80025f4:	4b02      	ldr	r3, [pc, #8]	; (8002600 <Hw_N5110_WriteCmd+0x1c>)
 80025f6:	4798      	blx	r3
	
	return Ret;
}
 80025f8:	bd08      	pop	{r3, pc}
 80025fa:	bf00      	nop
 80025fc:	40010c0c 	.word	0x40010c0c
 8002600:	0800255d 	.word	0x0800255d

08002604 <Hw_N5110_WriteByte>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110_WriteByte( u8 ByteData )
{
 8002604:	b508      	push	{r3, lr}
	u16 Ret;
	
	HW_N5110_SEL_DATA();
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <Hw_N5110_WriteByte+0x18>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110_WriteByte( u8 ByteData )
{
 8002608:	4601      	mov	r1, r0
	u16 Ret;
	
	HW_N5110_SEL_DATA();
 800260a:	681a      	ldr	r2, [r3, #0]
	
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, ByteData );
 800260c:	2001      	movs	r0, #1
---------------------------------------------------------------------------*/
u16 Hw_N5110_WriteByte( u8 ByteData )
{
	u16 Ret;
	
	HW_N5110_SEL_DATA();
 800260e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002612:	601a      	str	r2, [r3, #0]
	
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, ByteData );
 8002614:	4b02      	ldr	r3, [pc, #8]	; (8002620 <Hw_N5110_WriteByte+0x1c>)
 8002616:	4798      	blx	r3
	
	return Ret;
}
 8002618:	bd08      	pop	{r3, pc}
 800261a:	bf00      	nop
 800261c:	40010c0c 	.word	0x40010c0c
 8002620:	0800255d 	.word	0x0800255d

08002624 <Hw_N5110_Goto>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110_Goto( u8 x, u8 y )
{
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110_WriteCmd( 0x40|y );
 8002628:	4c05      	ldr	r4, [pc, #20]	; (8002640 <Hw_N5110_Goto+0x1c>)
 800262a:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 800262e:	47a0      	blx	r4
 8002630:	4606      	mov	r6, r0
	Ret |= Hw_N5110_WriteCmd( 0x80|x );
 8002632:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 8002636:	47a0      	blx	r4
 8002638:	4330      	orrs	r0, r6
		
	return Ret;
}
 800263a:	b280      	uxth	r0, r0
 800263c:	bd70      	pop	{r4, r5, r6, pc}
 800263e:	bf00      	nop
 8002640:	080025e5 	.word	0x080025e5

08002644 <Hw_N5110_WriteChar>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110_WriteChar( u8 CharData )
{
 8002644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002648:	3820      	subs	r0, #32
	u16 i;
	u8  Ch;
	
	for( i=0; i<6; i++ )
	{
		Ch = Hw_N5110_Font6_8[CharData-32][i];
 800264a:	4a11      	ldr	r2, [pc, #68]	; (8002690 <Hw_N5110_WriteChar+0x4c>)
 800264c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002650:	004b      	lsls	r3, r1, #1
		Ret |= Hw_N5110_WriteByte(Ch);
 8002652:	4c10      	ldr	r4, [pc, #64]	; (8002694 <Hw_N5110_WriteChar+0x50>)
 8002654:	5cd0      	ldrb	r0, [r2, r3]
	u16 i;
	u8  Ch;
	
	for( i=0; i<6; i++ )
	{
		Ch = Hw_N5110_Font6_8[CharData-32][i];
 8002656:	18d5      	adds	r5, r2, r3
		Ret |= Hw_N5110_WriteByte(Ch);
 8002658:	47a0      	blx	r4
 800265a:	4606      	mov	r6, r0
 800265c:	7868      	ldrb	r0, [r5, #1]
 800265e:	47a0      	blx	r4
 8002660:	4680      	mov	r8, r0
 8002662:	78a8      	ldrb	r0, [r5, #2]
 8002664:	47a0      	blx	r4
 8002666:	4681      	mov	r9, r0
 8002668:	78e8      	ldrb	r0, [r5, #3]
 800266a:	47a0      	blx	r4
 800266c:	4607      	mov	r7, r0
 800266e:	7928      	ldrb	r0, [r5, #4]
 8002670:	47a0      	blx	r4
 8002672:	ea49 0808 	orr.w	r8, r9, r8
 8002676:	ea47 0708 	orr.w	r7, r7, r8
 800267a:	ea40 0707 	orr.w	r7, r0, r7
 800267e:	7968      	ldrb	r0, [r5, #5]
 8002680:	47a0      	blx	r4
 8002682:	433e      	orrs	r6, r7
 8002684:	b2b5      	uxth	r5, r6
 8002686:	4328      	orrs	r0, r5
	}	
	
	return Ret;
}
 8002688:	b280      	uxth	r0, r0
 800268a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800268e:	bf00      	nop
 8002690:	20000000 	.word	0x20000000
 8002694:	08002605 	.word	0x08002605

08002698 <Hw_N5110_Clear>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110_Clear( void )
{
 8002698:	b538      	push	{r3, r4, r5, lr}
 800269a:	4d07      	ldr	r5, [pc, #28]	; (80026b8 <Hw_N5110_Clear+0x20>)
 800269c:	f44f 74fc 	mov.w	r4, #504	; 0x1f8
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110_WriteByte(0);
 80026a0:	2000      	movs	r0, #0
 80026a2:	47a8      	blx	r5
 80026a4:	1e60      	subs	r0, r4, #1
 80026a6:	b284      	uxth	r4, r0
 80026a8:	3c01      	subs	r4, #1
 80026aa:	2000      	movs	r0, #0
 80026ac:	b2a4      	uxth	r4, r4
 80026ae:	47a8      	blx	r5
u16 Hw_N5110_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 80026b0:	2c00      	cmp	r4, #0
 80026b2:	d1f5      	bne.n	80026a0 <Hw_N5110_Clear+0x8>
	{
		Hw_N5110_WriteByte(0);
	}
	
	return Ret;
}
 80026b4:	2000      	movs	r0, #0
 80026b6:	bd38      	pop	{r3, r4, r5, pc}
 80026b8:	08002605 	.word	0x08002605

080026bc <Hw_N5110_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110_Init(void)
{
 80026bc:	b510      	push	{r4, lr}
	u8 i;
	char Str[100];
	
	Hw_SPI_Init();	
 80026be:	4a19      	ldr	r2, [pc, #100]	; (8002724 <Hw_N5110_Init+0x68>)
 80026c0:	4790      	blx	r2
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <Hw_N5110_Init+0x6c>)
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110_RESET_OFF();
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <Hw_N5110_Init+0x70>)
	
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	f420 6470 	bic.w	r4, r0, #3840	; 0xf00
 80026cc:	601c      	str	r4, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 80026ce:	6819      	ldr	r1, [r3, #0]
	HW_N5110_RESET_OFF();
	HW_N5110_SEL_CMD();
	
	Hw_N5110_Reset();
	
	Hw_N5110_WriteCmd(0x21);	// H = 1
 80026d0:	4c17      	ldr	r4, [pc, #92]	; (8002730 <Hw_N5110_Init+0x74>)
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 80026d2:	f441 7040 	orr.w	r0, r1, #768	; 0x300
 80026d6:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	6019      	str	r1, [r3, #0]

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	f420 4170 	bic.w	r1, r0, #61440	; 0xf000
 80026e2:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	f440 5140 	orr.w	r1, r0, #12288	; 0x3000
 80026ea:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	6018      	str	r0, [r3, #0]


	HW_N5110_RESET_OFF();
 80026f0:	6811      	ldr	r1, [r2, #0]
 80026f2:	f441 6080 	orr.w	r0, r1, #1024	; 0x400
 80026f6:	6010      	str	r0, [r2, #0]
	HW_N5110_SEL_CMD();
 80026f8:	6813      	ldr	r3, [r2, #0]
	
	Hw_N5110_Reset();
 80026fa:	480e      	ldr	r0, [pc, #56]	; (8002734 <Hw_N5110_Init+0x78>)
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110_RESET_OFF();
	HW_N5110_SEL_CMD();
 80026fc:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8002700:	6011      	str	r1, [r2, #0]
	
	Hw_N5110_Reset();
 8002702:	4780      	blx	r0
	
	Hw_N5110_WriteCmd(0x21);	// H = 1
 8002704:	2021      	movs	r0, #33	; 0x21
 8002706:	47a0      	blx	r4
	Hw_N5110_WriteCmd(0xC6);	// Write Vop
 8002708:	20c6      	movs	r0, #198	; 0xc6
 800270a:	47a0      	blx	r4
	Hw_N5110_WriteCmd(0x06);	// Set Temperature Coefficient
 800270c:	2006      	movs	r0, #6
 800270e:	47a0      	blx	r4
	Hw_N5110_WriteCmd(0x13);	// Set Bias System
 8002710:	2013      	movs	r0, #19
 8002712:	47a0      	blx	r4
	Hw_N5110_WriteCmd(0x20);	// H = 0
 8002714:	2020      	movs	r0, #32
 8002716:	47a0      	blx	r4
	Hw_N5110_WriteCmd(0x0C);	// Set display configuration
 8002718:	200c      	movs	r0, #12
 800271a:	47a0      	blx	r4
								//  - normal mode							
								
	Hw_N5110_Clear();
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <Hw_N5110_Init+0x7c>)
 800271e:	4798      	blx	r3
		
}
 8002720:	bd10      	pop	{r4, pc}
 8002722:	bf00      	nop
 8002724:	08002531 	.word	0x08002531
 8002728:	40010c04 	.word	0x40010c04
 800272c:	40010c0c 	.word	0x40010c0c
 8002730:	080025e5 	.word	0x080025e5
 8002734:	080025c1 	.word	0x080025c1
 8002738:	08002699 	.word	0x08002699

0800273c <Hw_N5110_WriteStr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110_WriteStr( char *pStr )
{
 800273c:	b570      	push	{r4, r5, r6, lr}
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 800273e:	7803      	ldrb	r3, [r0, #0]
 8002740:	b17b      	cbz	r3, 8002762 <Hw_N5110_WriteStr+0x26>
 8002742:	4e09      	ldr	r6, [pc, #36]	; (8002768 <Hw_N5110_WriteStr+0x2c>)
 8002744:	4605      	mov	r5, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
 8002746:	2400      	movs	r4, #0
		
	while( *pStr != '\0' )
	{
		Ret |= Hw_N5110_WriteChar( *pStr );
 8002748:	4618      	mov	r0, r3
 800274a:	47b0      	blx	r6
---------------------------------------------------------------------------*/
u16 Hw_N5110_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 800274c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
	{
		Ret |= Hw_N5110_WriteChar( *pStr );
 8002750:	4304      	orrs	r4, r0
 8002752:	b2a4      	uxth	r4, r4
---------------------------------------------------------------------------*/
u16 Hw_N5110_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f7      	bne.n	8002748 <Hw_N5110_WriteStr+0xc>
		pStr++;
	}
	
	// 일단 현재 버그때문에 마지막에 추가 데이터를 전송하는데 
	// 버그가 수정되면 삭제 필요 13.9.21
	Hw_N5110_WriteByte(0x00);
 8002758:	2000      	movs	r0, #0
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <Hw_N5110_WriteStr+0x30>)
 800275c:	4798      	blx	r3
	
	return Ret;
}
 800275e:	4620      	mov	r0, r4
 8002760:	bd70      	pop	{r4, r5, r6, pc}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
 8002762:	461c      	mov	r4, r3
 8002764:	e7f8      	b.n	8002758 <Hw_N5110_WriteStr+0x1c>
 8002766:	bf00      	nop
 8002768:	08002645 	.word	0x08002645
 800276c:	08002605 	.word	0x08002605

08002770 <Hw_N5110_Print>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 8002770:	b40c      	push	{r2, r3}
 8002772:	b530      	push	{r4, r5, lr}
 8002774:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8002776:	aa36      	add	r2, sp, #216	; 0xd8
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 8002778:	460d      	mov	r5, r1
 800277a:	4604      	mov	r4, r0
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 800277c:	f852 1b04 	ldr.w	r1, [r2], #4
 8002780:	4668      	mov	r0, sp
 8002782:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <Hw_N5110_Print+0x3c>)
 8002784:	4798      	blx	r3
		
	Ret |= Hw_N5110_Goto( x_str*6, y_str );	
 8002786:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800278a:	004c      	lsls	r4, r1, #1
 800278c:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <Hw_N5110_Print+0x40>)
 800278e:	4629      	mov	r1, r5
 8002790:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
 8002794:	4790      	blx	r2

	Ret |= Hw_N5110_WriteStr( Str );	
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <Hw_N5110_Print+0x44>)

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
		
	Ret |= Hw_N5110_Goto( x_str*6, y_str );	
 8002798:	4604      	mov	r4, r0

	Ret |= Hw_N5110_WriteStr( Str );	
 800279a:	4668      	mov	r0, sp
 800279c:	4798      	blx	r3
 800279e:	4320      	orrs	r0, r4

	Lb_va_end(ap);		
	
	return Ret;
}
 80027a0:	b280      	uxth	r0, r0
 80027a2:	b033      	add	sp, #204	; 0xcc
 80027a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80027a8:	b002      	add	sp, #8
 80027aa:	4770      	bx	lr
 80027ac:	08000de1 	.word	0x08000de1
 80027b0:	08002625 	.word	0x08002625
 80027b4:	0800273d 	.word	0x0800273d

080027b8 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 80027b8:	b510      	push	{r4, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <EP1_IN_Callback+0x5c>)
 80027bc:	781a      	ldrb	r2, [r3, #0]
 80027be:	2a01      	cmp	r2, #1
 80027c0:	d000      	beq.n	80027c4 <EP1_IN_Callback+0xc>
 80027c2:	bd10      	pop	{r4, pc}
  {
    if (USART_Rx_length == 0) 
 80027c4:	4914      	ldr	r1, [pc, #80]	; (8002818 <EP1_IN_Callback+0x60>)
 80027c6:	680a      	ldr	r2, [r1, #0]
 80027c8:	b30a      	cbz	r2, 800280e <EP1_IN_Callback+0x56>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 80027ca:	2a40      	cmp	r2, #64	; 0x40
 80027cc:	d815      	bhi.n	80027fa <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 80027ce:	4813      	ldr	r0, [pc, #76]	; (800281c <EP1_IN_Callback+0x64>)
        USB_Tx_length = USART_Rx_length;
 80027d0:	b294      	uxth	r4, r2
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 80027d2:	6803      	ldr	r3, [r0, #0]
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
 80027d4:	189a      	adds	r2, r3, r2
 80027d6:	6002      	str	r2, [r0, #0]
        USART_Rx_length = 0;
 80027d8:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 80027da:	b29b      	uxth	r3, r3
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 80027dc:	600a      	str	r2, [r1, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80027de:	4810      	ldr	r0, [pc, #64]	; (8002820 <EP1_IN_Callback+0x68>)
 80027e0:	21c0      	movs	r1, #192	; 0xc0
 80027e2:	18c0      	adds	r0, r0, r3
 80027e4:	4622      	mov	r2, r4
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <EP1_IN_Callback+0x6c>)
 80027e8:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 80027ea:	2001      	movs	r0, #1
 80027ec:	4621      	mov	r1, r4
 80027ee:	4a0e      	ldr	r2, [pc, #56]	; (8002828 <EP1_IN_Callback+0x70>)
 80027f0:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 80027f2:	2001      	movs	r0, #1
 80027f4:	490d      	ldr	r1, [pc, #52]	; (800282c <EP1_IN_Callback+0x74>)
 80027f6:	4788      	blx	r1
 80027f8:	bd10      	pop	{r4, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 80027fa:	4808      	ldr	r0, [pc, #32]	; (800281c <EP1_IN_Callback+0x64>)
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 80027fc:	3a40      	subs	r2, #64	; 0x40
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 80027fe:	6803      	ldr	r3, [r0, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8002800:	600a      	str	r2, [r1, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8002802:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002806:	6001      	str	r1, [r0, #0]
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002808:	b29b      	uxth	r3, r3
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800280a:	2440      	movs	r4, #64	; 0x40
 800280c:	e7e7      	b.n	80027de <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	bd10      	pop	{r4, pc}
 8002812:	bf00      	nop
 8002814:	200004a4 	.word	0x200004a4
 8002818:	200004b0 	.word	0x200004b0
 800281c:	200004ac 	.word	0x200004ac
 8002820:	20000a08 	.word	0x20000a08
 8002824:	08003d3d 	.word	0x08003d3d
 8002828:	08003fe9 	.word	0x08003fe9
 800282c:	08003ea5 	.word	0x08003ea5

08002830 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8002830:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8002832:	4c06      	ldr	r4, [pc, #24]	; (800284c <EP3_OUT_Callback+0x1c>)
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <EP3_OUT_Callback+0x20>)
 8002836:	4621      	mov	r1, r4
 8002838:	2003      	movs	r0, #3
 800283a:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 800283c:	4a05      	ldr	r2, [pc, #20]	; (8002854 <EP3_OUT_Callback+0x24>)
 800283e:	b2c1      	uxtb	r1, r0
 8002840:	4620      	mov	r0, r4
 8002842:	4790      	blx	r2
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 8002844:	2003      	movs	r0, #3
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <EP3_OUT_Callback+0x28>)
 8002848:	4798      	blx	r3
}
 800284a:	bd10      	pop	{r4, pc}
 800284c:	200009a0 	.word	0x200009a0
 8002850:	080040a1 	.word	0x080040a1
 8002854:	08003125 	.word	0x08003125
 8002858:	08003ec9 	.word	0x08003ec9

0800285c <SOF_Callback>:
*******************************************************************************/
void SOF_Callback(void)
{
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 800285c:	4808      	ldr	r0, [pc, #32]	; (8002880 <SOF_Callback+0x24>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 800285e:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8002860:	6803      	ldr	r3, [r0, #0]
 8002862:	2b05      	cmp	r3, #5
 8002864:	d000      	beq.n	8002868 <SOF_Callback+0xc>
 8002866:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <SOF_Callback+0x28>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	1c51      	adds	r1, r2, #1
 800286e:	2a05      	cmp	r2, #5
 8002870:	6019      	str	r1, [r3, #0]
 8002872:	d1f8      	bne.n	8002866 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8002874:	2000      	movs	r0, #0
 8002876:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <SOF_Callback+0x2c>)
 800287a:	4798      	blx	r3
 800287c:	e7f3      	b.n	8002866 <SOF_Callback+0xa>
 800287e:	bf00      	nop
 8002880:	20000498 	.word	0x20000498
 8002884:	20000484 	.word	0x20000484
 8002888:	0800319d 	.word	0x0800319d

0800288c <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800288c:	4a6f      	ldr	r2, [pc, #444]	; (8002a4c <USB_Istr+0x1c0>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800288e:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8002890:	6813      	ldr	r3, [r2, #0]
 8002892:	4c6f      	ldr	r4, [pc, #444]	; (8002a50 <USB_Istr+0x1c4>)

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8002894:	4d6f      	ldr	r5, [pc, #444]	; (8002a54 <USB_Istr+0x1c8>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8002896:	8023      	strh	r3, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8002898:	8820      	ldrh	r0, [r4, #0]
 800289a:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800289c:	b089      	sub	sp, #36	; 0x24
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800289e:	ea03 0100 	and.w	r1, r3, r0
 80028a2:	f411 7f00 	tst.w	r1, #512	; 0x200
 80028a6:	d15d      	bne.n	8002964 <USB_Istr+0xd8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 80028a8:	8822      	ldrh	r2, [r4, #0]
 80028aa:	f402 4c00 	and.w	ip, r2, #32768	; 0x8000
 80028ae:	ea1c 0f03 	tst.w	ip, r3
 80028b2:	d153      	bne.n	800295c <USB_Istr+0xd0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 80028b4:	f8b4 c000 	ldrh.w	ip, [r4]
 80028b8:	f40c 6180 	and.w	r1, ip, #1024	; 0x400
 80028bc:	4219      	tst	r1, r3
 80028be:	d144      	bne.n	800294a <USB_Istr+0xbe>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 80028c0:	8822      	ldrh	r2, [r4, #0]
 80028c2:	f402 5c00 	and.w	ip, r2, #8192	; 0x2000
 80028c6:	ea1c 0f03 	tst.w	ip, r3
 80028ca:	d003      	beq.n	80028d4 <USB_Istr+0x48>
  {
    _SetISTR((uint16_t)CLR_ERR);
 80028cc:	495f      	ldr	r1, [pc, #380]	; (8002a4c <USB_Istr+0x1c0>)
 80028ce:	f64d 70ff 	movw	r0, #57343	; 0xdfff
 80028d2:	6008      	str	r0, [r1, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 80028d4:	8822      	ldrh	r2, [r4, #0]
 80028d6:	f402 5c80 	and.w	ip, r2, #4096	; 0x1000
 80028da:	ea1c 0f03 	tst.w	ip, r3
 80028de:	d12b      	bne.n	8002938 <USB_Istr+0xac>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 80028e0:	f8b4 c000 	ldrh.w	ip, [r4]
 80028e4:	f40c 6000 	and.w	r0, ip, #2048	; 0x800
 80028e8:	4218      	tst	r0, r3
 80028ea:	d00b      	beq.n	8002904 <USB_Istr+0x78>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 80028ec:	495a      	ldr	r1, [pc, #360]	; (8002a58 <USB_Istr+0x1cc>)
 80028ee:	780b      	ldrb	r3, [r1, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d11e      	bne.n	8002932 <USB_Istr+0xa6>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 80028f4:	2002      	movs	r0, #2
 80028f6:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <USB_Istr+0x1d0>)
 80028f8:	4798      	blx	r3
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 80028fa:	4954      	ldr	r1, [pc, #336]	; (8002a4c <USB_Istr+0x1c0>)
 80028fc:	f24f 70ff 	movw	r0, #63487	; 0xf7ff
 8002900:	882b      	ldrh	r3, [r5, #0]
 8002902:	6008      	str	r0, [r1, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8002904:	8822      	ldrh	r2, [r4, #0]
 8002906:	f402 7c80 	and.w	ip, r2, #256	; 0x100
 800290a:	ea1c 0f03 	tst.w	ip, r3
 800290e:	d00e      	beq.n	800292e <USB_Istr+0xa2>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8002910:	4b4e      	ldr	r3, [pc, #312]	; (8002a4c <USB_Istr+0x1c0>)
 8002912:	f64f 62ff 	movw	r2, #65279	; 0xfeff
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8002916:	4952      	ldr	r1, [pc, #328]	; (8002a60 <USB_Istr+0x1d4>)

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8002918:	601a      	str	r2, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 800291a:	6808      	ldr	r0, [r1, #0]
 800291c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002920:	d12b      	bne.n	800297a <USB_Istr+0xee>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8002922:	4850      	ldr	r0, [pc, #320]	; (8002a64 <USB_Istr+0x1d8>)
 8002924:	2100      	movs	r1, #0
 8002926:	6001      	str	r1, [r0, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8002928:	2007      	movs	r0, #7
 800292a:	4b4c      	ldr	r3, [pc, #304]	; (8002a5c <USB_Istr+0x1d0>)
 800292c:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800292e:	b009      	add	sp, #36	; 0x24
 8002930:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 8002932:	4a4d      	ldr	r2, [pc, #308]	; (8002a68 <USB_Istr+0x1dc>)
 8002934:	4790      	blx	r2
 8002936:	e7e0      	b.n	80028fa <USB_Istr+0x6e>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8002938:	4a44      	ldr	r2, [pc, #272]	; (8002a4c <USB_Istr+0x1c0>)
 800293a:	f64e 71ff 	movw	r1, #61439	; 0xefff
    Resume(RESUME_EXTERNAL);
 800293e:	4b47      	ldr	r3, [pc, #284]	; (8002a5c <USB_Istr+0x1d0>)
 8002940:	2000      	movs	r0, #0
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8002942:	6011      	str	r1, [r2, #0]
    Resume(RESUME_EXTERNAL);
 8002944:	4798      	blx	r3
 8002946:	882b      	ldrh	r3, [r5, #0]
 8002948:	e7ca      	b.n	80028e0 <USB_Istr+0x54>
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 800294a:	4940      	ldr	r1, [pc, #256]	; (8002a4c <USB_Istr+0x1c0>)
    Device_Property.Reset();
 800294c:	4a47      	ldr	r2, [pc, #284]	; (8002a6c <USB_Istr+0x1e0>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 800294e:	f64f 30ff 	movw	r0, #64511	; 0xfbff
    Device_Property.Reset();
 8002952:	6853      	ldr	r3, [r2, #4]
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8002954:	6008      	str	r0, [r1, #0]
    Device_Property.Reset();
 8002956:	4798      	blx	r3
 8002958:	882b      	ldrh	r3, [r5, #0]
 800295a:	e7b1      	b.n	80028c0 <USB_Istr+0x34>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 800295c:	4844      	ldr	r0, [pc, #272]	; (8002a70 <USB_Istr+0x1e4>)
 800295e:	4780      	blx	r0
 8002960:	882b      	ldrh	r3, [r5, #0]
 8002962:	e7a7      	b.n	80028b4 <USB_Istr+0x28>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8002964:	4843      	ldr	r0, [pc, #268]	; (8002a74 <USB_Istr+0x1e8>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8002966:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 800296a:	6011      	str	r1, [r2, #0]
    bIntPackSOF++;
 800296c:	7803      	ldrb	r3, [r0, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 800296e:	4a42      	ldr	r2, [pc, #264]	; (8002a78 <USB_Istr+0x1ec>)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8002970:	1c59      	adds	r1, r3, #1
 8002972:	7001      	strb	r1, [r0, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8002974:	4790      	blx	r2
 8002976:	882b      	ldrh	r3, [r5, #0]
 8002978:	e796      	b.n	80028a8 <USB_Istr+0x1c>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 800297a:	493a      	ldr	r1, [pc, #232]	; (8002a64 <USB_Istr+0x1d8>)
 800297c:	6808      	ldr	r0, [r1, #0]
 800297e:	1c42      	adds	r2, r0, #1
 8002980:	600a      	str	r2, [r1, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8002982:	6808      	ldr	r0, [r1, #0]
 8002984:	2803      	cmp	r0, #3
 8002986:	d9cf      	bls.n	8002928 <USB_Istr+0x9c>
 8002988:	483c      	ldr	r0, [pc, #240]	; (8002a7c <USB_Istr+0x1f0>)
 800298a:	6802      	ldr	r2, [r0, #0]
 800298c:	f012 0f08 	tst.w	r2, #8
 8002990:	d1ca      	bne.n	8002928 <USB_Istr+0x9c>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8002992:	6804      	ldr	r4, [r0, #0]
 8002994:	4a3a      	ldr	r2, [pc, #232]	; (8002a80 <USB_Istr+0x1f4>)
 8002996:	b2a4      	uxth	r4, r4
 8002998:	6014      	str	r4, [r2, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800299a:	4c3a      	ldr	r4, [pc, #232]	; (8002a84 <USB_Istr+0x1f8>)
 800299c:	6824      	ldr	r4, [r4, #0]
 800299e:	b2a4      	uxth	r4, r4
 80029a0:	9400      	str	r4, [sp, #0]
 80029a2:	4c39      	ldr	r4, [pc, #228]	; (8002a88 <USB_Istr+0x1fc>)
 80029a4:	6824      	ldr	r4, [r4, #0]
 80029a6:	b2a4      	uxth	r4, r4
 80029a8:	9401      	str	r4, [sp, #4]
 80029aa:	4c38      	ldr	r4, [pc, #224]	; (8002a8c <USB_Istr+0x200>)
 80029ac:	6824      	ldr	r4, [r4, #0]
 80029ae:	b2a4      	uxth	r4, r4
 80029b0:	9402      	str	r4, [sp, #8]
 80029b2:	4c37      	ldr	r4, [pc, #220]	; (8002a90 <USB_Istr+0x204>)
 80029b4:	6824      	ldr	r4, [r4, #0]
 80029b6:	b2a4      	uxth	r4, r4
 80029b8:	9403      	str	r4, [sp, #12]
 80029ba:	4c36      	ldr	r4, [pc, #216]	; (8002a94 <USB_Istr+0x208>)
 80029bc:	6824      	ldr	r4, [r4, #0]
 80029be:	b2a4      	uxth	r4, r4
 80029c0:	9404      	str	r4, [sp, #16]
 80029c2:	4c35      	ldr	r4, [pc, #212]	; (8002a98 <USB_Istr+0x20c>)
 80029c4:	6824      	ldr	r4, [r4, #0]
 80029c6:	b2a4      	uxth	r4, r4
 80029c8:	9405      	str	r4, [sp, #20]
 80029ca:	4c34      	ldr	r4, [pc, #208]	; (8002a9c <USB_Istr+0x210>)
 80029cc:	6824      	ldr	r4, [r4, #0]
 80029ce:	b2a4      	uxth	r4, r4
 80029d0:	9406      	str	r4, [sp, #24]
 80029d2:	4c33      	ldr	r4, [pc, #204]	; (8002aa0 <USB_Istr+0x214>)
 80029d4:	6824      	ldr	r4, [r4, #0]
 80029d6:	b2a4      	uxth	r4, r4
 80029d8:	9407      	str	r4, [sp, #28]
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 80029da:	6814      	ldr	r4, [r2, #0]
 80029dc:	f044 0401 	orr.w	r4, r4, #1
 80029e0:	6014      	str	r4, [r2, #0]
        _SetCNTR(wCNTR);
 80029e2:	6814      	ldr	r4, [r2, #0]
 80029e4:	b2a4      	uxth	r4, r4
 80029e6:	6004      	str	r4, [r0, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 80029e8:	6814      	ldr	r4, [r2, #0]
 80029ea:	f024 0401 	bic.w	r4, r4, #1
 80029ee:	6014      	str	r4, [r2, #0]
        _SetCNTR(wCNTR);
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	b292      	uxth	r2, r2
 80029f4:	6002      	str	r2, [r0, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80029fc:	d0fb      	beq.n	80029f6 <USB_Istr+0x16a>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 80029fe:	4813      	ldr	r0, [pc, #76]	; (8002a4c <USB_Istr+0x1c0>)
 8002a00:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8002a04:	6002      	str	r2, [r0, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8002a06:	9b00      	ldr	r3, [sp, #0]
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	f840 2c44 	str.w	r2, [r0, #-68]
 8002a0e:	9b01      	ldr	r3, [sp, #4]
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	f840 2c40 	str.w	r2, [r0, #-64]
 8002a16:	9b02      	ldr	r3, [sp, #8]
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	f840 2c3c 	str.w	r2, [r0, #-60]
 8002a1e:	9b03      	ldr	r3, [sp, #12]
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	f840 2c38 	str.w	r2, [r0, #-56]
 8002a26:	9b04      	ldr	r3, [sp, #16]
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	f840 2c34 	str.w	r2, [r0, #-52]
 8002a2e:	9b05      	ldr	r3, [sp, #20]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	f840 2c30 	str.w	r2, [r0, #-48]
 8002a36:	9b06      	ldr	r3, [sp, #24]
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	f840 2c2c 	str.w	r2, [r0, #-44]
 8002a3e:	9b07      	ldr	r3, [sp, #28]
 8002a40:	b29a      	uxth	r2, r3
      
        esof_counter = 0;
 8002a42:	2300      	movs	r3, #0
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8002a44:	f840 2c28 	str.w	r2, [r0, #-40]
      
        esof_counter = 0;
 8002a48:	600b      	str	r3, [r1, #0]
 8002a4a:	e76d      	b.n	8002928 <USB_Istr+0x9c>
 8002a4c:	40005c44 	.word	0x40005c44
 8002a50:	200009e0 	.word	0x200009e0
 8002a54:	2000123c 	.word	0x2000123c
 8002a58:	2000049c 	.word	0x2000049c
 8002a5c:	08002ecd 	.word	0x08002ecd
 8002a60:	40005c48 	.word	0x40005c48
 8002a64:	20000490 	.word	0x20000490
 8002a68:	08002d5d 	.word	0x08002d5d
 8002a6c:	20000284 	.word	0x20000284
 8002a70:	080040d1 	.word	0x080040d1
 8002a74:	2000048c 	.word	0x2000048c
 8002a78:	0800285d 	.word	0x0800285d
 8002a7c:	40005c40 	.word	0x40005c40
 8002a80:	20000488 	.word	0x20000488
 8002a84:	40005c00 	.word	0x40005c00
 8002a88:	40005c04 	.word	0x40005c04
 8002a8c:	40005c08 	.word	0x40005c08
 8002a90:	40005c0c 	.word	0x40005c0c
 8002a94:	40005c10 	.word	0x40005c10
 8002a98:	40005c14 	.word	0x40005c14
 8002a9c:	40005c18 	.word	0x40005c18
 8002aa0:	40005c1c 	.word	0x40005c1c

08002aa4 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8002aa4:	4803      	ldr	r0, [pc, #12]	; (8002ab4 <Virtual_Com_Port_SetConfiguration+0x10>)
 8002aa6:	7a83      	ldrb	r3, [r0, #10]
 8002aa8:	b113      	cbz	r3, 8002ab0 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8002aaa:	4903      	ldr	r1, [pc, #12]	; (8002ab8 <Virtual_Com_Port_SetConfiguration+0x14>)
 8002aac:	2205      	movs	r2, #5
 8002aae:	600a      	str	r2, [r1, #0]
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20001218 	.word	0x20001218
 8002ab8:	20000498 	.word	0x20000498

08002abc <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8002abc:	4b01      	ldr	r3, [pc, #4]	; (8002ac4 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 8002abe:	2204      	movs	r2, #4
 8002ac0:	601a      	str	r2, [r3, #0]
}
 8002ac2:	4770      	bx	lr
 8002ac4:	20000498 	.word	0x20000498

08002ac8 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <Virtual_Com_Port_Status_In+0x10>)
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	2a20      	cmp	r2, #32
 8002ace:	d101      	bne.n	8002ad4 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	7018      	strb	r0, [r3, #0]
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000494 	.word	0x20000494

08002adc <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop

08002ae0 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8002ae0:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8002ae2:	b508      	push	{r3, lr}
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8002ae4:	d003      	beq.n	8002aee <Virtual_Com_Port_Data_Setup+0xe>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8002ae6:	2820      	cmp	r0, #32
 8002ae8:	d00a      	beq.n	8002b00 <Virtual_Com_Port_Data_Setup+0x20>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8002aea:	2002      	movs	r0, #2
 8002aec:	bd08      	pop	{r3, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002aee:	4a10      	ldr	r2, [pc, #64]	; (8002b30 <Virtual_Com_Port_Data_Setup+0x50>)
 8002af0:	6811      	ldr	r1, [r2, #0]
 8002af2:	7808      	ldrb	r0, [r1, #0]
 8002af4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8002af8:	2b21      	cmp	r3, #33	; 0x21
 8002afa:	d1f6      	bne.n	8002aea <Virtual_Com_Port_Data_Setup+0xa>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8002afc:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <Virtual_Com_Port_Data_Setup+0x54>)
 8002afe:	e00d      	b.n	8002b1c <Virtual_Com_Port_Data_Setup+0x3c>
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002b00:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <Virtual_Com_Port_Data_Setup+0x50>)
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8002b02:	490d      	ldr	r1, [pc, #52]	; (8002b38 <Virtual_Com_Port_Data_Setup+0x58>)
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002b04:	6813      	ldr	r3, [r2, #0]
 8002b06:	f893 c000 	ldrb.w	ip, [r3]
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <Virtual_Com_Port_Data_Setup+0x5c>)
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002b0c:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 8002b10:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
 8002b14:	bf18      	it	ne
 8002b16:	2300      	movne	r3, #0
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8002b18:	7008      	strb	r0, [r1, #0]
  }

  if (CopyRoutine == NULL)
 8002b1a:	b13b      	cbz	r3, 8002b2c <Virtual_Com_Port_Data_Setup+0x4c>
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002b1c:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8002b1e:	2100      	movs	r1, #0
  (*CopyRoutine)(0);
 8002b20:	2000      	movs	r0, #0
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002b22:	6193      	str	r3, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8002b24:	8251      	strh	r1, [r2, #18]
  (*CopyRoutine)(0);
 8002b26:	4798      	blx	r3
  return USB_SUCCESS;
 8002b28:	2000      	movs	r0, #0
 8002b2a:	bd08      	pop	{r3, pc}
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8002b2c:	2002      	movs	r0, #2

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8002b2e:	bd08      	pop	{r3, pc}
 8002b30:	20001238 	.word	0x20001238
 8002b34:	08002b79 	.word	0x08002b79
 8002b38:	20000494 	.word	0x20000494
 8002b3c:	08002b91 	.word	0x08002b91

08002b40 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <Virtual_Com_Port_NoData_Setup+0x24>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	7811      	ldrb	r1, [r2, #0]
 8002b46:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8002b4a:	2b21      	cmp	r3, #33	; 0x21
 8002b4c:	d001      	beq.n	8002b52 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8002b4e:	2002      	movs	r0, #2
 8002b50:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8002b52:	2802      	cmp	r0, #2
 8002b54:	d004      	beq.n	8002b60 <Virtual_Com_Port_NoData_Setup+0x20>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8002b56:	2822      	cmp	r0, #34	; 0x22
 8002b58:	bf14      	ite	ne
 8002b5a:	2002      	movne	r0, #2
 8002b5c:	2000      	moveq	r0, #0
 8002b5e:	4770      	bx	lr

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 8002b60:	2000      	movs	r0, #0
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
}
 8002b62:	4770      	bx	lr
 8002b64:	20001238 	.word	0x20001238

08002b68 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8002b68:	b921      	cbnz	r1, 8002b74 <Virtual_Com_Port_Get_Interface_Setting+0xc>
  {
    return USB_UNSUPPORT;
  }
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
 8002b6a:	2801      	cmp	r0, #1
 8002b6c:	bf8c      	ite	hi
 8002b6e:	2002      	movhi	r0, #2
 8002b70:	2000      	movls	r0, #0
 8002b72:	4770      	bx	lr
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
  {
    return USB_UNSUPPORT;
 8002b74:	2002      	movs	r0, #2
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
}
 8002b76:	4770      	bx	lr

08002b78 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002b78:	b108      	cbz	r0, 8002b7e <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8002b7a:	4803      	ldr	r0, [pc, #12]	; (8002b88 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8002b7c:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002b7e:	4903      	ldr	r1, [pc, #12]	; (8002b8c <Virtual_Com_Port_GetLineCoding+0x14>)
 8002b80:	2208      	movs	r2, #8
 8002b82:	680b      	ldr	r3, [r1, #0]
 8002b84:	821a      	strh	r2, [r3, #16]
    return NULL;
 8002b86:	4770      	bx	lr
 8002b88:	20000300 	.word	0x20000300
 8002b8c:	20001238 	.word	0x20001238

08002b90 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002b90:	b108      	cbz	r0, 8002b96 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8002b92:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8002b94:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002b96:	4903      	ldr	r1, [pc, #12]	; (8002ba4 <Virtual_Com_Port_SetLineCoding+0x14>)
 8002b98:	2208      	movs	r2, #8
 8002b9a:	680b      	ldr	r3, [r1, #0]
 8002b9c:	821a      	strh	r2, [r3, #16]
    return NULL;
 8002b9e:	4770      	bx	lr
 8002ba0:	20000300 	.word	0x20000300
 8002ba4:	20001238 	.word	0x20001238

08002ba8 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8002ba8:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8002baa:	4906      	ldr	r1, [pc, #24]	; (8002bc4 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8002bac:	680b      	ldr	r3, [r1, #0]
 8002bae:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d901      	bls.n	8002bb8 <Virtual_Com_Port_GetStringDescriptor+0x10>
  {
    return NULL;
 8002bb4:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 8002bb6:	bd08      	pop	{r3, pc}
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8002bb8:	4903      	ldr	r1, [pc, #12]	; (8002bc8 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8002bba:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8002bbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002bc0:	4790      	blx	r2
 8002bc2:	bd08      	pop	{r3, pc}
 8002bc4:	20001238 	.word	0x20001238
 8002bc8:	200002e0 	.word	0x200002e0
 8002bcc:	0800368d 	.word	0x0800368d

08002bd0 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8002bd0:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8002bd2:	4902      	ldr	r1, [pc, #8]	; (8002bdc <Virtual_Com_Port_GetConfigDescriptor+0xc>)
 8002bd4:	4b02      	ldr	r3, [pc, #8]	; (8002be0 <Virtual_Com_Port_GetConfigDescriptor+0x10>)
 8002bd6:	4798      	blx	r3
}
 8002bd8:	bd08      	pop	{r3, pc}
 8002bda:	bf00      	nop
 8002bdc:	2000027c 	.word	0x2000027c
 8002be0:	0800368d 	.word	0x0800368d

08002be4 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8002be4:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8002be6:	4902      	ldr	r1, [pc, #8]	; (8002bf0 <Virtual_Com_Port_GetDeviceDescriptor+0xc>)
 8002be8:	4b02      	ldr	r3, [pc, #8]	; (8002bf4 <Virtual_Com_Port_GetDeviceDescriptor+0x10>)
 8002bea:	4798      	blx	r3
}
 8002bec:	bd08      	pop	{r3, pc}
 8002bee:	bf00      	nop
 8002bf0:	200002d8 	.word	0x200002d8
 8002bf4:	0800368d 	.word	0x0800368d

08002bf8 <Virtual_Com_Port_Reset>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8002bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002bfc:	4b30      	ldr	r3, [pc, #192]	; (8002cc0 <Virtual_Com_Port_Reset+0xc8>)

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002bfe:	4c31      	ldr	r4, [pc, #196]	; (8002cc4 <Virtual_Com_Port_Reset+0xcc>)
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002c00:	681e      	ldr	r6, [r3, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002c02:	f894 8007 	ldrb.w	r8, [r4, #7]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002c06:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002c08:	f886 8009 	strb.w	r8, [r6, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002c0c:	72b4      	strb	r4, [r6, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8002c0e:	72f4      	strb	r4, [r6, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8002c10:	4620      	mov	r0, r4
 8002c12:	4d2d      	ldr	r5, [pc, #180]	; (8002cc8 <Virtual_Com_Port_Reset+0xd0>)
 8002c14:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8002c16:	4e2d      	ldr	r6, [pc, #180]	; (8002ccc <Virtual_Com_Port_Reset+0xd4>)
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c1e:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8002c20:	4d2b      	ldr	r5, [pc, #172]	; (8002cd0 <Virtual_Com_Port_Reset+0xd8>)
 8002c22:	2110      	movs	r1, #16
 8002c24:	4620      	mov	r0, r4
 8002c26:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8002c28:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8002cec <Virtual_Com_Port_Reset+0xf4>
 8002c2c:	2140      	movs	r1, #64	; 0x40
 8002c2e:	4620      	mov	r0, r4
 8002c30:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002c32:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8002cf0 <Virtual_Com_Port_Reset+0xf8>
 8002c36:	2180      	movs	r1, #128	; 0x80
 8002c38:	4620      	mov	r0, r4
 8002c3a:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8002c3c:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <Virtual_Com_Port_Reset+0xdc>)
 8002c3e:	4620      	mov	r0, r4
 8002c40:	4790      	blx	r2
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8002c42:	4825      	ldr	r0, [pc, #148]	; (8002cd8 <Virtual_Com_Port_Reset+0xe0>)
 8002c44:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8002cf4 <Virtual_Com_Port_Reset+0xfc>
 8002c48:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8002c50:	4f22      	ldr	r7, [pc, #136]	; (8002cdc <Virtual_Com_Port_Reset+0xe4>)
 8002c52:	4620      	mov	r0, r4
 8002c54:	47b8      	blx	r7

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8002c56:	2001      	movs	r0, #1
 8002c58:	4621      	mov	r1, r4
 8002c5a:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	21c0      	movs	r1, #192	; 0xc0
 8002c60:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8002c62:	2001      	movs	r0, #1
 8002c64:	2120      	movs	r1, #32
 8002c66:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8002c68:	4f1d      	ldr	r7, [pc, #116]	; (8002ce0 <Virtual_Com_Port_Reset+0xe8>)
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8002c70:	2002      	movs	r0, #2
 8002c72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002c76:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8002c78:	2002      	movs	r0, #2
 8002c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c7e:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8002c80:	2002      	movs	r0, #2
 8002c82:	4621      	mov	r1, r4
 8002c84:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8002c86:	2002      	movs	r0, #2
 8002c88:	2120      	movs	r1, #32
 8002c8a:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8002c8c:	2003      	movs	r0, #3
 8002c8e:	4621      	mov	r1, r4
 8002c90:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8002c92:	2003      	movs	r0, #3
 8002c94:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002c98:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8002c9a:	2003      	movs	r0, #3
 8002c9c:	2140      	movs	r1, #64	; 0x40
 8002c9e:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8002ca0:	2003      	movs	r0, #3
 8002ca2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002ca6:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8002ca8:	4621      	mov	r1, r4
 8002caa:	2003      	movs	r0, #3
 8002cac:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8002cae:	4620      	mov	r0, r4
 8002cb0:	490c      	ldr	r1, [pc, #48]	; (8002ce4 <Virtual_Com_Port_Reset+0xec>)
 8002cb2:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <Virtual_Com_Port_Reset+0xf0>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
  
  //printf(" Reset ");
}
 8002cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20001238 	.word	0x20001238
 8002cc4:	08004654 	.word	0x08004654
 8002cc8:	08003df5 	.word	0x08003df5
 8002ccc:	08003e09 	.word	0x08003e09
 8002cd0:	08003e25 	.word	0x08003e25
 8002cd4:	08003eed 	.word	0x08003eed
 8002cd8:	20000284 	.word	0x20000284
 8002cdc:	08003ec9 	.word	0x08003ec9
 8002ce0:	08003e65 	.word	0x08003e65
 8002ce4:	08003bcd 	.word	0x08003bcd
 8002ce8:	20000498 	.word	0x20000498
 8002cec:	08003f81 	.word	0x08003f81
 8002cf0:	08003f5d 	.word	0x08003f5d
 8002cf4:	08004009 	.word	0x08004009

08002cf8 <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8002cf8:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8002cfa:	4c06      	ldr	r4, [pc, #24]	; (8002d14 <Virtual_Com_Port_init+0x1c>)
 8002cfc:	47a0      	blx	r4

  pInformation->Current_Configuration = 0;
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <Virtual_Com_Port_init+0x20>)
 8002d00:	2400      	movs	r4, #0
 8002d02:	681a      	ldr	r2, [r3, #0]

  /* Connect the device */
  PowerOn();
 8002d04:	4905      	ldr	r1, [pc, #20]	; (8002d1c <Virtual_Com_Port_init+0x24>)

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8002d06:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 8002d08:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <Virtual_Com_Port_init+0x28>)
 8002d0c:	4780      	blx	r0

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <Virtual_Com_Port_init+0x2c>)
 8002d10:	601c      	str	r4, [r3, #0]
}
 8002d12:	bd10      	pop	{r4, pc}
 8002d14:	08003239 	.word	0x08003239
 8002d18:	20001238 	.word	0x20001238
 8002d1c:	08002d29 	.word	0x08002d29
 8002d20:	08004081 	.word	0x08004081
 8002d24:	20000498 	.word	0x20000498

08002d28 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8002d28:	b510      	push	{r4, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	4907      	ldr	r1, [pc, #28]	; (8002d4c <PowerOn+0x24>)
 8002d2e:	4788      	blx	r1

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <PowerOn+0x28>)
 8002d32:	2401      	movs	r4, #1
 8002d34:	601c      	str	r4, [r3, #0]
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002d36:	4807      	ldr	r0, [pc, #28]	; (8002d54 <PowerOn+0x2c>)

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8002d38:	4c07      	ldr	r4, [pc, #28]	; (8002d58 <PowerOn+0x30>)
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8002d3a:	2200      	movs	r2, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002d3c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002d40:	8001      	strh	r1, [r0, #0]
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8002d42:	601a      	str	r2, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 8002d44:	4610      	mov	r0, r2

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8002d46:	6022      	str	r2, [r4, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
 8002d48:	6019      	str	r1, [r3, #0]
  
  return USB_SUCCESS;
}
 8002d4a:	bd10      	pop	{r4, pc}
 8002d4c:	08003105 	.word	0x08003105
 8002d50:	40005c40 	.word	0x40005c40
 8002d54:	2000123c 	.word	0x2000123c
 8002d58:	40005c44 	.word	0x40005c44

08002d5c <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8002d5c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8002d5e:	4b45      	ldr	r3, [pc, #276]	; (8002e74 <Suspend+0x118>)
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8002d60:	2400      	movs	r4, #0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002d62:	4a45      	ldr	r2, [pc, #276]	; (8002e78 <Suspend+0x11c>)
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8002d64:	b082      	sub	sp, #8
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8002d66:	9401      	str	r4, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8002d68:	681c      	ldr	r4, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002d6a:	6810      	ldr	r0, [r2, #0]
 8002d6c:	4a43      	ldr	r2, [pc, #268]	; (8002e7c <Suspend+0x120>)
 8002d6e:	b285      	uxth	r5, r0
 8002d70:	4e43      	ldr	r6, [pc, #268]	; (8002e80 <Suspend+0x124>)
 8002d72:	6015      	str	r5, [r2, #0]
 8002d74:	6831      	ldr	r1, [r6, #0]
 8002d76:	4d43      	ldr	r5, [pc, #268]	; (8002e84 <Suspend+0x128>)
 8002d78:	b288      	uxth	r0, r1
 8002d7a:	6050      	str	r0, [r2, #4]
 8002d7c:	682e      	ldr	r6, [r5, #0]
 8002d7e:	4842      	ldr	r0, [pc, #264]	; (8002e88 <Suspend+0x12c>)
 8002d80:	b2b1      	uxth	r1, r6
 8002d82:	6091      	str	r1, [r2, #8]
 8002d84:	6805      	ldr	r5, [r0, #0]
 8002d86:	4941      	ldr	r1, [pc, #260]	; (8002e8c <Suspend+0x130>)
 8002d88:	b2ae      	uxth	r6, r5
 8002d8a:	60d6      	str	r6, [r2, #12]
 8002d8c:	6808      	ldr	r0, [r1, #0]
 8002d8e:	4e40      	ldr	r6, [pc, #256]	; (8002e90 <Suspend+0x134>)
 8002d90:	b285      	uxth	r5, r0
 8002d92:	6115      	str	r5, [r2, #16]
 8002d94:	6831      	ldr	r1, [r6, #0]
 8002d96:	4d3f      	ldr	r5, [pc, #252]	; (8002e94 <Suspend+0x138>)
 8002d98:	b288      	uxth	r0, r1
 8002d9a:	6150      	str	r0, [r2, #20]
 8002d9c:	682e      	ldr	r6, [r5, #0]
 8002d9e:	483e      	ldr	r0, [pc, #248]	; (8002e98 <Suspend+0x13c>)
 8002da0:	b2b1      	uxth	r1, r6
 8002da2:	6191      	str	r1, [r2, #24]
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8002da4:	b2a5      	uxth	r5, r4

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002da6:	6806      	ldr	r6, [r0, #0]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
 8002da8:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
 8002dac:	f045 0101 	orr.w	r1, r5, #1
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8002db0:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002db4:	b2b6      	uxth	r6, r6
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8002db6:	ea01 0404 	and.w	r4, r1, r4
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8002dba:	4838      	ldr	r0, [pc, #224]	; (8002e9c <Suspend+0x140>)
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002dbc:	61d6      	str	r6, [r2, #28]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8002dbe:	601d      	str	r5, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8002dc0:	6019      	str	r1, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8002dc2:	601c      	str	r4, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8002dc4:	6803      	ldr	r3, [r0, #0]
 8002dc6:	4935      	ldr	r1, [pc, #212]	; (8002e9c <Suspend+0x140>)
 8002dc8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002dcc:	d0fa      	beq.n	8002dc4 <Suspend+0x68>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8002dce:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8002dd2:	6008      	str	r0, [r1, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8002dd4:	6813      	ldr	r3, [r2, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8002dd6:	f044 0408 	orr.w	r4, r4, #8
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8002dda:	b298      	uxth	r0, r3
 8002ddc:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <Suspend+0x11c>)
 8002dde:	6018      	str	r0, [r3, #0]
 8002de0:	6850      	ldr	r0, [r2, #4]
 8002de2:	b280      	uxth	r0, r0
 8002de4:	6058      	str	r0, [r3, #4]
 8002de6:	6890      	ldr	r0, [r2, #8]
 8002de8:	b280      	uxth	r0, r0
 8002dea:	6098      	str	r0, [r3, #8]
 8002dec:	68d0      	ldr	r0, [r2, #12]
 8002dee:	b280      	uxth	r0, r0
 8002df0:	60d8      	str	r0, [r3, #12]
 8002df2:	6910      	ldr	r0, [r2, #16]
 8002df4:	b280      	uxth	r0, r0
 8002df6:	6118      	str	r0, [r3, #16]
 8002df8:	6950      	ldr	r0, [r2, #20]
 8002dfa:	b280      	uxth	r0, r0
 8002dfc:	6158      	str	r0, [r3, #20]
 8002dfe:	6990      	ldr	r0, [r2, #24]
 8002e00:	b280      	uxth	r0, r0
 8002e02:	6198      	str	r0, [r3, #24]
 8002e04:	69d2      	ldr	r2, [r2, #28]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8002e06:	3340      	adds	r3, #64	; 0x40
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8002e08:	b290      	uxth	r0, r2
 8002e0a:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <Suspend+0x13c>)
 8002e0c:	6010      	str	r0, [r2, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8002e0e:	601c      	str	r4, [r3, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 8002e10:	6818      	ldr	r0, [r3, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002e12:	f502 529e 	add.w	r2, r2, #5056	; 0x13c0
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 8002e16:	fa1f fc80 	uxth.w	ip, r0
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 8002e1a:	f04c 0404 	orr.w	r4, ip, #4
 8002e1e:	601c      	str	r4, [r3, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002e20:	3224      	adds	r2, #36	; 0x24
 8002e22:	6810      	ldr	r0, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8002e24:	4c1e      	ldr	r4, [pc, #120]	; (8002ea0 <Suspend+0x144>)
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002e26:	9001      	str	r0, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 8002e28:	6810      	ldr	r0, [r2, #0]
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 8002e2a:	f020 0c03 	bic.w	ip, r0, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 8002e2e:	f04c 0001 	orr.w	r0, ip, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 8002e32:	6010      	str	r0, [r2, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8002e34:	6820      	ldr	r0, [r4, #0]
 8002e36:	f040 0004 	orr.w	r0, r0, #4
 8002e3a:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8002e3c:	6808      	ldr	r0, [r1, #0]
 8002e3e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002e42:	d010      	beq.n	8002e66 <Suspend+0x10a>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 8002e44:	f64e 70ff 	movw	r0, #61439	; 0xefff
 8002e48:	6008      	str	r0, [r1, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 8002e4a:	6819      	ldr	r1, [r3, #0]
        wCNTR&=~CNTR_FSUSP;
        _SetCNTR(wCNTR);
 8002e4c:	f64f 7cf7 	movw	ip, #65527	; 0xfff7
 8002e50:	ea01 000c 	and.w	r0, r1, ip
 8002e54:	6018      	str	r0, [r3, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 8002e56:	9b01      	ldr	r3, [sp, #4]
 8002e58:	6013      	str	r3, [r2, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 8002e5a:	6821      	ldr	r1, [r4, #0]
 8002e5c:	f021 0004 	bic.w	r0, r1, #4
 8002e60:	6020      	str	r0, [r4, #0]
#endif
    }
}
 8002e62:	b002      	add	sp, #8
 8002e64:	bd70      	pop	{r4, r5, r6, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <Suspend+0x148>)
 8002e68:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 8002e6a:	6822      	ldr	r2, [r4, #0]
 8002e6c:	f022 0104 	bic.w	r1, r2, #4
 8002e70:	6021      	str	r1, [r4, #0]
 8002e72:	e7f6      	b.n	8002e62 <Suspend+0x106>
 8002e74:	40005c40 	.word	0x40005c40
 8002e78:	40005c00 	.word	0x40005c00
 8002e7c:	200009e8 	.word	0x200009e8
 8002e80:	40005c04 	.word	0x40005c04
 8002e84:	40005c08 	.word	0x40005c08
 8002e88:	40005c0c 	.word	0x40005c0c
 8002e8c:	40005c10 	.word	0x40005c10
 8002e90:	40005c14 	.word	0x40005c14
 8002e94:	40005c18 	.word	0x40005c18
 8002e98:	40005c1c 	.word	0x40005c1c
 8002e9c:	40005c44 	.word	0x40005c44
 8002ea0:	e000ed10 	.word	0xe000ed10
 8002ea4:	08003271 	.word	0x08003271

08002ea8 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8002ea8:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8002eaa:	4c06      	ldr	r4, [pc, #24]	; (8002ec4 <Resume_Init+0x1c>)
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8002eac:	f64f 7cfb 	movw	ip, #65531	; 0xfffb
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8002eb0:	6822      	ldr	r2, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8002eb2:	4805      	ldr	r0, [pc, #20]	; (8002ec8 <Resume_Init+0x20>)
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8002eb4:	ea02 010c 	and.w	r1, r2, ip
 8002eb8:	6021      	str	r1, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8002eba:	4780      	blx	r0

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8002ebc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002ec0:	6023      	str	r3, [r4, #0]

  /* reverse suspend preparation */
  /* ... */ 

}
 8002ec2:	bd10      	pop	{r4, pc}
 8002ec4:	40005c40 	.word	0x40005c40
 8002ec8:	08003051 	.word	0x08003051

08002ecc <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8002ecc:	b510      	push	{r4, lr}
 8002ece:	4c28      	ldr	r4, [pc, #160]	; (8002f70 <Resume+0xa4>)
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8002ed0:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 8002ed2:	bf18      	it	ne
 8002ed4:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 8002ed6:	7823      	ldrb	r3, [r4, #0]
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d816      	bhi.n	8002f0a <Resume+0x3e>
 8002edc:	e8df f003 	tbb	[pc, r3]
 8002ee0:	2c271f18 	.word	0x2c271f18
 8002ee4:	0336      	.short	0x0336
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8002ee6:	7862      	ldrb	r2, [r4, #1]
 8002ee8:	1e51      	subs	r1, r2, #1
 8002eea:	7061      	strb	r1, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8002eec:	7863      	ldrb	r3, [r4, #1]
 8002eee:	b973      	cbnz	r3, 8002f0e <Resume+0x42>
      {
        wCNTR = _GetCNTR();
 8002ef0:	4920      	ldr	r1, [pc, #128]	; (8002f74 <Resume+0xa8>)
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 8002ef2:	f64f 7cef 	movw	ip, #65519	; 0xffef
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
 8002ef6:	680a      	ldr	r2, [r1, #0]
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 8002ef8:	ea02 000c 	and.w	r0, r2, ip
 8002efc:	6008      	str	r0, [r1, #0]
        ResumeS.eState = RESUME_OFF;
 8002efe:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <Resume+0xa4>)
        remotewakeupon = 0;
 8002f00:	481d      	ldr	r0, [pc, #116]	; (8002f78 <Resume+0xac>)
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 8002f02:	2106      	movs	r1, #6
 8002f04:	7011      	strb	r1, [r2, #0]
        remotewakeupon = 0;
 8002f06:	6003      	str	r3, [r0, #0]
 8002f08:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	7023      	strb	r3, [r4, #0]
 8002f0e:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 8002f10:	4919      	ldr	r1, [pc, #100]	; (8002f78 <Resume+0xac>)
 8002f12:	6808      	ldr	r0, [r1, #0]
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d025      	beq.n	8002f64 <Resume+0x98>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8002f18:	2005      	movs	r0, #5
 8002f1a:	7020      	strb	r0, [r4, #0]
 8002f1c:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 8002f1e:	4817      	ldr	r0, [pc, #92]	; (8002f7c <Resume+0xb0>)
 8002f20:	4780      	blx	r0
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 8002f22:	4a15      	ldr	r2, [pc, #84]	; (8002f78 <Resume+0xac>)
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8002f24:	2304      	movs	r3, #4
      remotewakeupon = 1;
 8002f26:	2101      	movs	r1, #1
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8002f28:	7023      	strb	r3, [r4, #0]
      remotewakeupon = 1;
 8002f2a:	6011      	str	r1, [r2, #0]
      break;
 8002f2c:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8002f2e:	2202      	movs	r2, #2
      ResumeS.eState = RESUME_WAIT;
 8002f30:	2103      	movs	r1, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8002f32:	7062      	strb	r2, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8002f34:	7021      	strb	r1, [r4, #0]
      break;
 8002f36:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 8002f38:	7861      	ldrb	r1, [r4, #1]
 8002f3a:	1e48      	subs	r0, r1, #1
 8002f3c:	7060      	strb	r0, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8002f3e:	7863      	ldrb	r3, [r4, #1]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1e4      	bne.n	8002f0e <Resume+0x42>
        ResumeS.eState = RESUME_START;
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <Resume+0xa4>)
 8002f46:	2204      	movs	r2, #4
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <Resume+0xa8>)
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 8002f4e:	2105      	movs	r1, #5
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
        ResumeS.eState = RESUME_START;
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	fa1f fc80 	uxth.w	ip, r0
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8002f56:	f04c 0210 	orr.w	r2, ip, #16
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 8002f5a:	200a      	movs	r0, #10
        ResumeS.eState = RESUME_START;
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8002f5c:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 8002f5e:	7021      	strb	r1, [r4, #0]
      ResumeS.bESOFcnt = 10;
 8002f60:	7060      	strb	r0, [r4, #1]
      break;
 8002f62:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <Resume+0xb0>)
 8002f66:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 8002f68:	2206      	movs	r2, #6
 8002f6a:	7022      	strb	r2, [r4, #0]
 8002f6c:	bd10      	pop	{r4, pc}
 8002f6e:	bf00      	nop
 8002f70:	200009e4 	.word	0x200009e4
 8002f74:	40005c40 	.word	0x40005c40
 8002f78:	200004a0 	.word	0x200004a0
 8002f7c:	08002ea9 	.word	0x08002ea9

08002f80 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8002f80:	4b02      	ldr	r3, [pc, #8]	; (8002f8c <USBWakeUp_IRQHandler+0xc>)
 8002f82:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002f86:	601a      	str	r2, [r3, #0]
	
	//printf("wake");
}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010414 	.word	0x40010414

08002f90 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8002f90:	b470      	push	{r4, r5, r6}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	d030      	beq.n	8002ff8 <IntToUnicode+0x68>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8002f96:	1e53      	subs	r3, r2, #1
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	1c56      	adds	r6, r2, #1
 8002f9c:	0076      	lsls	r6, r6, #1
 8002f9e:	2400      	movs	r4, #0
 8002fa0:	f016 0f02 	tst.w	r6, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002fa4:	4623      	mov	r3, r4
 8002fa6:	d11b      	bne.n	8002fe0 <IntToUnicode+0x50>
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8002fa8:	0f03      	lsrs	r3, r0, #28
 8002faa:	2b09      	cmp	r3, #9
 8002fac:	d929      	bls.n	8003002 <IntToUnicode+0x72>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002fae:	3337      	adds	r3, #55	; 0x37
 8002fb0:	700b      	strb	r3, [r1, #0]
    }
    
    value = value << 4;
 8002fb2:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8002fb4:	0f02      	lsrs	r2, r0, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002fb6:	2302      	movs	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8002fb8:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002fba:	704c      	strb	r4, [r1, #1]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8002fbc:	d813      	bhi.n	8002fe6 <IntToUnicode+0x56>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002fbe:	3230      	adds	r2, #48	; 0x30
 8002fc0:	54ca      	strb	r2, [r1, r3]
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8002fc2:	0100      	lsls	r0, r0, #4
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8002fc4:	18cd      	adds	r5, r1, r3
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002fc6:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8002fc8:	0f02      	lsrs	r2, r0, #28
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002fca:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002fcc:	706c      	strb	r4, [r5, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002fce:	d013      	beq.n	8002ff8 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8002fd0:	2a09      	cmp	r2, #9
 8002fd2:	d813      	bhi.n	8002ffc <IntToUnicode+0x6c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002fd4:	3230      	adds	r2, #48	; 0x30
 8002fd6:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8002fd8:	18cd      	adds	r5, r1, r3
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002fda:	706c      	strb	r4, [r5, #1]
 8002fdc:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8002fde:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8002fe0:	0f02      	lsrs	r2, r0, #28
 8002fe2:	2a09      	cmp	r2, #9
 8002fe4:	d9eb      	bls.n	8002fbe <IntToUnicode+0x2e>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002fe6:	3237      	adds	r2, #55	; 0x37
 8002fe8:	54ca      	strb	r2, [r1, r3]
    }
    
    value = value << 4;
 8002fea:	0100      	lsls	r0, r0, #4
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8002fec:	18cd      	adds	r5, r1, r3
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002fee:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8002ff0:	0f02      	lsrs	r2, r0, #28
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002ff2:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002ff4:	706c      	strb	r4, [r5, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002ff6:	d1eb      	bne.n	8002fd0 <IntToUnicode+0x40>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8002ff8:	bc70      	pop	{r4, r5, r6}
 8002ffa:	4770      	bx	lr
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002ffc:	3237      	adds	r2, #55	; 0x37
 8002ffe:	54ca      	strb	r2, [r1, r3]
 8003000:	e7ea      	b.n	8002fd8 <IntToUnicode+0x48>
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8003002:	3330      	adds	r3, #48	; 0x30
 8003004:	700b      	strb	r3, [r1, #0]
 8003006:	e7d4      	b.n	8002fb2 <IntToUnicode+0x22>

08003008 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8003008:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 800300a:	4b01      	ldr	r3, [pc, #4]	; (8003010 <USB_LP_IRQHandler+0x8>)
 800300c:	4798      	blx	r3
}
 800300e:	bd08      	pop	{r3, pc}
 8003010:	0800288d 	.word	0x0800288d

08003014 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <Set_System+0x18>)
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	f420 0270 	bic.w	r2, r0, #15728640	; 0xf00000
 800301c:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 800301e:	6819      	ldr	r1, [r3, #0]
 8003020:	f441 1000 	orr.w	r0, r1, #2097152	; 0x200000
 8003024:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	601a      	str	r2, [r3, #0]
	//-- PC.2
	REG_GPIOC_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOC_CRL |=  (0x02 << ( 8));	// MODE, PC.2 Output mode, max speed 2Mhz
	REG_GPIOC_CRL |=  (0x00 << (10));	// CNF,  PC.2 General purpose output push-pul
	#endif
}
 800302a:	4770      	bx	lr
 800302c:	40011004 	.word	0x40011004

08003030 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8003030:	4a05      	ldr	r2, [pc, #20]	; (8003048 <Set_USBClock+0x18>)
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <Set_USBClock+0x1c>)
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8003034:	6810      	ldr	r0, [r2, #0]
 8003036:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 800303a:	6011      	str	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	f440 0200 	orr.w	r2, r0, #8388608	; 0x800000
 8003042:	601a      	str	r2, [r3, #0]
}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40021004 	.word	0x40021004
 800304c:	4002101c 	.word	0x4002101c

08003050 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8003050:	4805      	ldr	r0, [pc, #20]	; (8003068 <Leave_LowPowerMode+0x18>)
 8003052:	7a83      	ldrb	r3, [r0, #10]
 8003054:	b91b      	cbnz	r3, 800305e <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <Leave_LowPowerMode+0x1c>)
 8003058:	2001      	movs	r0, #1
 800305a:	6018      	str	r0, [r3, #0]
 800305c:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800305e:	4903      	ldr	r1, [pc, #12]	; (800306c <Leave_LowPowerMode+0x1c>)
 8003060:	2205      	movs	r2, #5
 8003062:	600a      	str	r2, [r1, #0]
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20001218 	.word	0x20001218
 800306c:	20000498 	.word	0x20000498

08003070 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8003070:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <USB_Interrupts_Config+0x70>)
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8003072:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <USB_Interrupts_Config+0x74>)
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8003076:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800307a:	6015      	str	r5, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800307c:	6819      	ldr	r1, [r3, #0]
 800307e:	f421 2480 	bic.w	r4, r1, #262144	; 0x40000
 8003082:	601c      	str	r4, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8003084:	f852 0c10 	ldr.w	r0, [r2, #-16]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8003088:	4c17      	ldr	r4, [pc, #92]	; (80030e8 <USB_Interrupts_Config+0x78>)
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 800308a:	f420 2580 	bic.w	r5, r0, #262144	; 0x40000
 800308e:	f842 5c10 	str.w	r5, [r2, #-16]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8003092:	6821      	ldr	r1, [r4, #0]
 8003094:	f441 2080 	orr.w	r0, r1, #262144	; 0x40000
 8003098:	6020      	str	r0, [r4, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800309a:	f852 5c08 	ldr.w	r5, [r2, #-8]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800309e:	2090      	movs	r0, #144	; 0x90
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 80030a0:	f425 2180 	bic.w	r1, r5, #262144	; 0x40000
 80030a4:	f842 1c08 	str.w	r1, [r2, #-8]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80030a8:	681c      	ldr	r4, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80030aa:	4910      	ldr	r1, [pc, #64]	; (80030ec <USB_Interrupts_Config+0x7c>)
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80030ac:	f444 2580 	orr.w	r5, r4, #262144	; 0x40000
 80030b0:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80030b2:	2200      	movs	r2, #0
 80030b4:	4c0e      	ldr	r4, [pc, #56]	; (80030f0 <USB_Interrupts_Config+0x80>)
 80030b6:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80030b8:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <USB_Interrupts_Config+0x84>)
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80030ba:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80030bc:	681d      	ldr	r5, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80030be:	490e      	ldr	r1, [pc, #56]	; (80030f8 <USB_Interrupts_Config+0x88>)
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80030c0:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80030c4:	2200      	movs	r2, #0
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80030c6:	601d      	str	r5, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80030c8:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80030ca:	4a0c      	ldr	r2, [pc, #48]	; (80030fc <USB_Interrupts_Config+0x8c>)

	SET_BIT( REG_EXTI_SWIER, 18 );
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <USB_Interrupts_Config+0x90>)
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80030ce:	6810      	ldr	r0, [r2, #0]
 80030d0:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 80030d4:	6011      	str	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	f440 2280 	orr.w	r2, r0, #262144	; 0x40000
 80030dc:	601a      	str	r2, [r3, #0]
		 
}
 80030de:	bd38      	pop	{r3, r4, r5, pc}
 80030e0:	40010414 	.word	0x40010414
 80030e4:	40010400 	.word	0x40010400
 80030e8:	40010408 	.word	0x40010408
 80030ec:	08003009 	.word	0x08003009
 80030f0:	08001519 	.word	0x08001519
 80030f4:	e000e100 	.word	0xe000e100
 80030f8:	08002f81 	.word	0x08002f81
 80030fc:	e000e104 	.word	0xe000e104
 8003100:	40010410 	.word	0x40010410

08003104 <USB_Cable_Config>:
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 8003104:	b928      	cbnz	r0, 8003112 <USB_Cable_Config+0xe>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <USB_Cable_Config+0x1c>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 800310e:	6019      	str	r1, [r3, #0]
 8003110:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8003112:	4b03      	ldr	r3, [pc, #12]	; (8003120 <USB_Cable_Config+0x1c>)
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	4001100c 	.word	0x4001100c

08003124 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8003124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003128:	460f      	mov	r7, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800312a:	b082      	sub	sp, #8
 800312c:	4605      	mov	r5, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800312e:	b379      	cbz	r1, 8003190 <USB_To_USART_Send_Data+0x6c>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003130:	7803      	ldrb	r3, [r0, #0]
 8003132:	f101 38ff 	add.w	r8, r1, #4294967295
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003136:	2005      	movs	r0, #5
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003138:	2401      	movs	r4, #1
 800313a:	4e17      	ldr	r6, [pc, #92]	; (8003198 <USB_To_USART_Send_Data+0x74>)
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 800313c:	f10d 0107 	add.w	r1, sp, #7
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003140:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003144:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003146:	42bc      	cmp	r4, r7
 8003148:	ea08 0804 	and.w	r8, r8, r4
 800314c:	d220      	bcs.n	8003190 <USB_To_USART_Send_Data+0x6c>
 800314e:	f1b8 0f00 	cmp.w	r8, #0
 8003152:	d00a      	beq.n	800316a <USB_To_USART_Send_Data+0x46>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003154:	f895 e001 	ldrb.w	lr, [r5, #1]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003158:	2005      	movs	r0, #5
 800315a:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800315e:	2402      	movs	r4, #2
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003160:	f88d e007 	strb.w	lr, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003164:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003166:	42bc      	cmp	r4, r7
 8003168:	d212      	bcs.n	8003190 <USB_To_USART_Send_Data+0x6c>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800316a:	f815 c004 	ldrb.w	ip, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800316e:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003172:	3401      	adds	r4, #1
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003174:	2005      	movs	r0, #5
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003176:	f88d c007 	strb.w	ip, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800317a:	47b0      	blx	r6
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800317c:	5d2a      	ldrb	r2, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800317e:	2005      	movs	r0, #5
 8003180:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003184:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003186:	f88d 2007 	strb.w	r2, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800318a:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800318c:	42bc      	cmp	r4, r7
 800318e:	d3ec      	bcc.n	800316a <USB_To_USART_Send_Data+0x46>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 8003190:	b002      	add	sp, #8
 8003192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003196:	bf00      	nop
 8003198:	0800140d 	.word	0x0800140d

0800319c <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 800319c:	b538      	push	{r3, r4, r5, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 800319e:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <Handle_USBAsynchXfer+0x7c>)
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	2a01      	cmp	r2, #1
 80031a4:	d026      	beq.n	80031f4 <Handle_USBAsynchXfer+0x58>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 80031a6:	4a1d      	ldr	r2, [pc, #116]	; (800321c <Handle_USBAsynchXfer+0x80>)
 80031a8:	6810      	ldr	r0, [r2, #0]
 80031aa:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80031ae:	d02a      	beq.n	8003206 <Handle_USBAsynchXfer+0x6a>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80031b0:	491b      	ldr	r1, [pc, #108]	; (8003220 <Handle_USBAsynchXfer+0x84>)
 80031b2:	680d      	ldr	r5, [r1, #0]
 80031b4:	4285      	cmp	r5, r0
 80031b6:	d02c      	beq.n	8003212 <Handle_USBAsynchXfer+0x76>
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 80031b8:	bf34      	ite	cc
 80031ba:	f5c0 6500 	rsbcc	r5, r0, #2048	; 0x800
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 80031be:	ebc0 0505 	rsbcs	r5, r0, r5
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 80031c2:	4918      	ldr	r1, [pc, #96]	; (8003224 <Handle_USBAsynchXfer+0x88>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80031c4:	2d40      	cmp	r5, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 80031c6:	600d      	str	r5, [r1, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80031c8:	d815      	bhi.n	80031f6 <Handle_USBAsynchXfer+0x5a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 80031ca:	182c      	adds	r4, r5, r0
 80031cc:	6014      	str	r4, [r2, #0]
      USART_Rx_length = 0;
 80031ce:	2200      	movs	r2, #0
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 80031d0:	b280      	uxth	r0, r0
      USB_Tx_length = USART_Rx_length;
 80031d2:	b2ad      	uxth	r5, r5
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 80031d4:	600a      	str	r2, [r1, #0]
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80031d6:	4914      	ldr	r1, [pc, #80]	; (8003228 <Handle_USBAsynchXfer+0x8c>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 80031d8:	2401      	movs	r4, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80031da:	1808      	adds	r0, r1, r0
 80031dc:	462a      	mov	r2, r5
 80031de:	21c0      	movs	r1, #192	; 0xc0
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 80031e0:	701c      	strb	r4, [r3, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <Handle_USBAsynchXfer+0x90>)
 80031e4:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 80031e6:	4620      	mov	r0, r4
 80031e8:	4629      	mov	r1, r5
 80031ea:	4a11      	ldr	r2, [pc, #68]	; (8003230 <Handle_USBAsynchXfer+0x94>)
 80031ec:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 80031ee:	4620      	mov	r0, r4
 80031f0:	4b10      	ldr	r3, [pc, #64]	; (8003234 <Handle_USBAsynchXfer+0x98>)
 80031f2:	4798      	blx	r3
 80031f4:	bd38      	pop	{r3, r4, r5, pc}
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 80031f6:	f100 0440 	add.w	r4, r0, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 80031fa:	3d40      	subs	r5, #64	; 0x40
 80031fc:	600d      	str	r5, [r1, #0]
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 80031fe:	b280      	uxth	r0, r0
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8003200:	6014      	str	r4, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8003202:	2540      	movs	r5, #64	; 0x40
 8003204:	e7e7      	b.n	80031d6 <Handle_USBAsynchXfer+0x3a>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8003206:	4906      	ldr	r1, [pc, #24]	; (8003220 <Handle_USBAsynchXfer+0x84>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8003208:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800320a:	680d      	ldr	r5, [r1, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 800320c:	6010      	str	r0, [r2, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800320e:	4285      	cmp	r5, r0
 8003210:	d1d2      	bne.n	80031b8 <Handle_USBAsynchXfer+0x1c>
    {
      USB_Tx_State = 0; 
 8003212:	2000      	movs	r0, #0
 8003214:	7018      	strb	r0, [r3, #0]
      return;
 8003216:	bd38      	pop	{r3, r4, r5, pc}
 8003218:	200004a4 	.word	0x200004a4
 800321c:	200004ac 	.word	0x200004ac
 8003220:	200004a8 	.word	0x200004a8
 8003224:	200004b0 	.word	0x200004b0
 8003228:	20000a08 	.word	0x20000a08
 800322c:	08003d3d 	.word	0x08003d3d
 8003230:	08003fe9 	.word	0x08003fe9
 8003234:	08003ea5 	.word	0x08003ea5

08003238 <Get_SerialNum>:
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8003238:	4908      	ldr	r1, [pc, #32]	; (800325c <Get_SerialNum+0x24>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 800323a:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800323c:	6808      	ldr	r0, [r1, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 800323e:	3108      	adds	r1, #8
 8003240:	680b      	ldr	r3, [r1, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8003242:	4a07      	ldr	r2, [pc, #28]	; (8003260 <Get_SerialNum+0x28>)
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8003244:	18c0      	adds	r0, r0, r3
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8003246:	6814      	ldr	r4, [r2, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8003248:	d007      	beq.n	800325a <Get_SerialNum+0x22>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 800324a:	4906      	ldr	r1, [pc, #24]	; (8003264 <Get_SerialNum+0x2c>)
 800324c:	2208      	movs	r2, #8
 800324e:	4d06      	ldr	r5, [pc, #24]	; (8003268 <Get_SerialNum+0x30>)
 8003250:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8003252:	4620      	mov	r0, r4
 8003254:	4905      	ldr	r1, [pc, #20]	; (800326c <Get_SerialNum+0x34>)
 8003256:	2204      	movs	r2, #4
 8003258:	47a8      	blx	r5
 800325a:	bd38      	pop	{r3, r4, r5, pc}
 800325c:	1ffff7e8 	.word	0x1ffff7e8
 8003260:	1ffff7ec 	.word	0x1ffff7ec
 8003264:	2000022a 	.word	0x2000022a
 8003268:	08002f91 	.word	0x08002f91
 800326c:	2000023a 	.word	0x2000023a

08003270 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8003270:	bf30      	wfi
}
 8003272:	4770      	bx	lr

08003274 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8003274:	b508      	push	{r3, lr}
  if (Length == 0)
 8003276:	b138      	cbz	r0, 8003288 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8003278:	4906      	ldr	r1, [pc, #24]	; (8003294 <Standard_GetConfiguration+0x20>)
 800327a:	680b      	ldr	r3, [r1, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4790      	blx	r2
  return (uint8_t *)&pInformation->Current_Configuration;
 8003280:	4805      	ldr	r0, [pc, #20]	; (8003298 <Standard_GetConfiguration+0x24>)
 8003282:	6800      	ldr	r0, [r0, #0]
 8003284:	300a      	adds	r0, #10
}
 8003286:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8003288:	4903      	ldr	r1, [pc, #12]	; (8003298 <Standard_GetConfiguration+0x24>)
 800328a:	2201      	movs	r2, #1
 800328c:	680b      	ldr	r3, [r1, #0]
 800328e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8003290:	bd08      	pop	{r3, pc}
 8003292:	bf00      	nop
 8003294:	20001234 	.word	0x20001234
 8003298:	20001238 	.word	0x20001238

0800329c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800329c:	b508      	push	{r3, lr}
  if (Length == 0)
 800329e:	b138      	cbz	r0, 80032b0 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 80032a0:	4906      	ldr	r1, [pc, #24]	; (80032bc <Standard_GetInterface+0x20>)
 80032a2:	680b      	ldr	r3, [r1, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	4790      	blx	r2
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 80032a8:	4805      	ldr	r0, [pc, #20]	; (80032c0 <Standard_GetInterface+0x24>)
 80032aa:	6800      	ldr	r0, [r0, #0]
 80032ac:	300c      	adds	r0, #12
}
 80032ae:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <Standard_GetInterface+0x24>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	680b      	ldr	r3, [r1, #0]
 80032b6:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 80032b8:	bd08      	pop	{r3, pc}
 80032ba:	bf00      	nop
 80032bc:	20001234 	.word	0x20001234
 80032c0:	20001238 	.word	0x20001238

080032c4 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 80032c4:	b508      	push	{r3, lr}
  if (Length == 0)
 80032c6:	2800      	cmp	r0, #0
 80032c8:	d029      	beq.n	800331e <Standard_GetStatus+0x5a>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80032ca:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <Standard_GetStatus+0xb0>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 80032cc:	482a      	ldr	r0, [pc, #168]	; (8003378 <Standard_GetStatus+0xb4>)
 80032ce:	2300      	movs	r3, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80032d0:	6812      	ldr	r2, [r2, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 80032d2:	8003      	strh	r3, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80032d4:	f892 c000 	ldrb.w	ip, [r2]
 80032d8:	f01c 037f 	ands.w	r3, ip, #127	; 0x7f
 80032dc:	d118      	bne.n	8003310 <Standard_GetStatus+0x4c>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 80032de:	7a51      	ldrb	r1, [r2, #9]
    {
      SetBit(StatusInfo0, 1);
 80032e0:	f890 e000 	ldrb.w	lr, [r0]
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 80032e4:	f011 0f20 	tst.w	r1, #32
    {
      SetBit(StatusInfo0, 1);
 80032e8:	bf14      	ite	ne
 80032ea:	f04e 0e02 	orrne.w	lr, lr, #2
    }
    else
    {
      ClrBit(StatusInfo0, 1);
 80032ee:	f00e 0efd 	andeq.w	lr, lr, #253	; 0xfd
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80032f2:	f011 0f40 	tst.w	r1, #64	; 0x40
    {
      SetBit(StatusInfo0, 0);
 80032f6:	bf14      	ite	ne
 80032f8:	f04e 0e01 	orrne.w	lr, lr, #1
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 80032fc:	f02e 0e01 	biceq.w	lr, lr, #1
 8003300:	f880 e000 	strb.w	lr, [r0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8003304:	4b1d      	ldr	r3, [pc, #116]	; (800337c <Standard_GetStatus+0xb8>)
 8003306:	6819      	ldr	r1, [r3, #0]
 8003308:	6908      	ldr	r0, [r1, #16]
 800330a:	4780      	blx	r0
  return (uint8_t *)&StatusInfo;
 800330c:	481a      	ldr	r0, [pc, #104]	; (8003378 <Standard_GetStatus+0xb4>)
 800330e:	bd08      	pop	{r3, pc}
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8003310:	2b01      	cmp	r3, #1
 8003312:	d100      	bne.n	8003316 <Standard_GetStatus+0x52>
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 8003314:	bd08      	pop	{r3, pc}
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8003316:	2b02      	cmp	r3, #2
 8003318:	d006      	beq.n	8003328 <Standard_GetStatus+0x64>
    }

  }
  else
  {
    return NULL;
 800331a:	2000      	movs	r0, #0
 800331c:	e7fa      	b.n	8003314 <Standard_GetStatus+0x50>
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800331e:	4915      	ldr	r1, [pc, #84]	; (8003374 <Standard_GetStatus+0xb0>)
 8003320:	2202      	movs	r2, #2
 8003322:	680b      	ldr	r3, [r1, #0]
 8003324:	821a      	strh	r2, [r3, #16]
    return 0;
 8003326:	bd08      	pop	{r3, pc}
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8003328:	f892 c005 	ldrb.w	ip, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800332c:	f01c 0f80 	tst.w	ip, #128	; 0x80
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
 8003330:	f00c 020f 	and.w	r2, ip, #15
    if (ValBit(wIndex0, 7))
 8003334:	d111      	bne.n	800335a <Standard_GetStatus+0x96>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8003336:	0093      	lsls	r3, r2, #2
 8003338:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 800333c:	f501 4eb8 	add.w	lr, r1, #23552	; 0x5c00
 8003340:	f8de 2000 	ldr.w	r2, [lr]
 8003344:	f402 5c40 	and.w	ip, r2, #12288	; 0x3000
 8003348:	f5bc 5f80 	cmp.w	ip, #4096	; 0x1000
 800334c:	d1da      	bne.n	8003304 <Standard_GetStatus+0x40>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 800334e:	7802      	ldrb	r2, [r0, #0]
 8003350:	f042 0c01 	orr.w	ip, r2, #1
 8003354:	f880 c000 	strb.w	ip, [r0]
 8003358:	e7d4      	b.n	8003304 <Standard_GetStatus+0x40>

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800335a:	0093      	lsls	r3, r2, #2
 800335c:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 8003360:	f501 4eb8 	add.w	lr, r1, #23552	; 0x5c00
 8003364:	f8de 2000 	ldr.w	r2, [lr]
 8003368:	f002 0330 	and.w	r3, r2, #48	; 0x30
 800336c:	2b10      	cmp	r3, #16
 800336e:	d1c9      	bne.n	8003304 <Standard_GetStatus+0x40>
 8003370:	e7ed      	b.n	800334e <Standard_GetStatus+0x8a>
 8003372:	bf00      	nop
 8003374:	20001238 	.word	0x20001238
 8003378:	20001208 	.word	0x20001208
 800337c:	20001234 	.word	0x20001234

08003380 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8003380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8003384:	4e25      	ldr	r6, [pc, #148]	; (800341c <DataStageIn+0x9c>)
 8003386:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8003388:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 800338a:	7a27      	ldrb	r7, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800338c:	b923      	cbnz	r3, 8003398 <DataStageIn+0x18>
 800338e:	2f04      	cmp	r7, #4
 8003390:	d02c      	beq.n	80033ec <DataStageIn+0x6c>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8003392:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8003394:	2704      	movs	r7, #4
 8003396:	e003      	b.n	80033a0 <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8003398:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800339a:	42ab      	cmp	r3, r5
 800339c:	d9fa      	bls.n	8003394 <DataStageIn+0x14>
 800339e:	2702      	movs	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80033a0:	429d      	cmp	r5, r3
 80033a2:	bf28      	it	cs
 80033a4:	461d      	movcs	r5, r3
 80033a6:	69a2      	ldr	r2, [r4, #24]
 80033a8:	4628      	mov	r0, r5
 80033aa:	4790      	blx	r2
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80033ac:	491c      	ldr	r1, [pc, #112]	; (8003420 <DataStageIn+0xa0>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80033ae:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80033b0:	2000      	movs	r0, #0
 80033b2:	4788      	blx	r1
 80033b4:	462a      	mov	r2, r5
 80033b6:	4601      	mov	r1, r0
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <DataStageIn+0xa4>)
 80033ba:	4640      	mov	r0, r8
 80033bc:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 80033be:	4629      	mov	r1, r5
 80033c0:	2000      	movs	r0, #0
 80033c2:	4a19      	ldr	r2, [pc, #100]	; (8003428 <DataStageIn+0xa8>)
 80033c4:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 80033c6:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 80033c8:	8a61      	ldrh	r1, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 80033ca:	ebc5 0c00 	rsb	ip, r5, r0
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 80033ce:	4b17      	ldr	r3, [pc, #92]	; (800342c <DataStageIn+0xac>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80033d0:	4817      	ldr	r0, [pc, #92]	; (8003430 <DataStageIn+0xb0>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 80033d2:	186d      	adds	r5, r5, r1
  vSetEPTxStatus(EP_TX_VALID);
 80033d4:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80033d6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 80033da:	f8a4 c010 	strh.w	ip, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 80033de:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 80033e0:	801a      	strh	r2, [r3, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80033e2:	6834      	ldr	r4, [r6, #0]
 80033e4:	8001      	strh	r1, [r0, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80033e6:	7227      	strb	r7, [r4, #8]
}
 80033e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 80033ec:	4a11      	ldr	r2, [pc, #68]	; (8003434 <DataStageIn+0xb4>)
 80033ee:	7811      	ldrb	r1, [r2, #0]
 80033f0:	2901      	cmp	r1, #1
 80033f2:	d006      	beq.n	8003402 <DataStageIn+0x82>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <DataStageIn+0xac>)
 80033f6:	2707      	movs	r7, #7
 80033f8:	2210      	movs	r2, #16
 80033fa:	801a      	strh	r2, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80033fc:	7227      	strb	r7, [r4, #8]
}
 80033fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8003402:	480d      	ldr	r0, [pc, #52]	; (8003438 <DataStageIn+0xb8>)
 8003404:	490d      	ldr	r1, [pc, #52]	; (800343c <DataStageIn+0xbc>)
 8003406:	6800      	ldr	r0, [r0, #0]
 8003408:	fa1f fc80 	uxth.w	ip, r0
 800340c:	4461      	add	r1, ip
 800340e:	0048      	lsls	r0, r1, #1
 8003410:	4906      	ldr	r1, [pc, #24]	; (800342c <DataStageIn+0xac>)
 8003412:	6003      	str	r3, [r0, #0]
 8003414:	2030      	movs	r0, #48	; 0x30
 8003416:	8008      	strh	r0, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8003418:	7013      	strb	r3, [r2, #0]
 800341a:	e7e4      	b.n	80033e6 <DataStageIn+0x66>
 800341c:	20001238 	.word	0x20001238
 8003420:	08003fa9 	.word	0x08003fa9
 8003424:	08003d3d 	.word	0x08003d3d
 8003428:	08003fe9 	.word	0x08003fe9
 800342c:	20001240 	.word	0x20001240
 8003430:	2000123e 	.word	0x2000123e
 8003434:	200004b4 	.word	0x200004b4
 8003438:	40005c50 	.word	0x40005c50
 800343c:	20003002 	.word	0x20003002

08003440 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8003440:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <Standard_SetConfiguration+0x30>)
 8003444:	4a0b      	ldr	r2, [pc, #44]	; (8003474 <Standard_SetConfiguration+0x34>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	7851      	ldrb	r1, [r2, #1]
 800344a:	78da      	ldrb	r2, [r3, #3]
 800344c:	4291      	cmp	r1, r2
 800344e:	d305      	bcc.n	800345c <Standard_SetConfiguration+0x1c>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8003450:	7898      	ldrb	r0, [r3, #2]
 8003452:	b918      	cbnz	r0, 800345c <Standard_SetConfiguration+0x1c>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8003454:	889c      	ldrh	r4, [r3, #4]
 8003456:	b11c      	cbz	r4, 8003460 <Standard_SetConfiguration+0x20>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 8003458:	2002      	movs	r0, #2
  }
}
 800345a:	bd10      	pop	{r4, pc}
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 800345c:	2002      	movs	r0, #2
 800345e:	bd10      	pop	{r4, pc}

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8003460:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <Standard_SetConfiguration+0x38>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	6851      	ldr	r1, [r2, #4]
 8003468:	4788      	blx	r1
    return USB_SUCCESS;
 800346a:	4620      	mov	r0, r4
 800346c:	bd10      	pop	{r4, pc}
 800346e:	bf00      	nop
 8003470:	20001238 	.word	0x20001238
 8003474:	20000308 	.word	0x20000308
 8003478:	20001234 	.word	0x20001234

0800347c <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 800347c:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800347e:	4810      	ldr	r0, [pc, #64]	; (80034c0 <Standard_SetInterface+0x44>)
 8003480:	4c10      	ldr	r4, [pc, #64]	; (80034c4 <Standard_SetInterface+0x48>)
 8003482:	6802      	ldr	r2, [r0, #0]
 8003484:	6821      	ldr	r1, [r4, #0]
 8003486:	6993      	ldr	r3, [r2, #24]
 8003488:	7948      	ldrb	r0, [r1, #5]
 800348a:	78c9      	ldrb	r1, [r1, #3]
 800348c:	4798      	blx	r3

  if (pInformation->Current_Configuration != 0)
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	7a9a      	ldrb	r2, [r3, #10]
 8003492:	b18a      	cbz	r2, 80034b8 <Standard_SetInterface+0x3c>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8003494:	b980      	cbnz	r0, 80034b8 <Standard_SetInterface+0x3c>
 8003496:	7919      	ldrb	r1, [r3, #4]
 8003498:	b971      	cbnz	r1, 80034b8 <Standard_SetInterface+0x3c>
        || (pInformation->USBwValue1 != 0))
 800349a:	789d      	ldrb	r5, [r3, #2]
 800349c:	b975      	cbnz	r5, 80034bc <Standard_SetInterface+0x40>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <Standard_SetInterface+0x4c>)
 80034a0:	6819      	ldr	r1, [r3, #0]
 80034a2:	68c8      	ldr	r0, [r1, #12]
 80034a4:	4780      	blx	r0
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80034a6:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 80034a8:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80034aa:	795a      	ldrb	r2, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80034ac:	f893 c003 	ldrb.w	ip, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80034b0:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80034b2:	f883 c00c 	strb.w	ip, [r3, #12]
      return USB_SUCCESS;
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
        || (pInformation->USBwValue1 != 0))
    {
      return  USB_UNSUPPORT;
 80034b8:	2002      	movs	r0, #2
 80034ba:	bd38      	pop	{r3, r4, r5, pc}
 80034bc:	2002      	movs	r0, #2
    }

  }

  return USB_UNSUPPORT;
}
 80034be:	bd38      	pop	{r3, r4, r5, pc}
 80034c0:	20001210 	.word	0x20001210
 80034c4:	20001238 	.word	0x20001238
 80034c8:	20001234 	.word	0x20001234

080034cc <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 80034cc:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 80034ce:	4b3a      	ldr	r3, [pc, #232]	; (80035b8 <Standard_ClearFeature+0xec>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80034d4:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80034d8:	d035      	beq.n	8003546 <Standard_ClearFeature+0x7a>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80034da:	2802      	cmp	r0, #2
 80034dc:	d001      	beq.n	80034e2 <Standard_ClearFeature+0x16>
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
        || (pInformation->Current_Configuration == 0))
    {
      return USB_UNSUPPORT;
 80034de:	2002      	movs	r0, #2
 80034e0:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80034e2:	885a      	ldrh	r2, [r3, #2]
 80034e4:	2a00      	cmp	r2, #0
 80034e6:	d12d      	bne.n	8003544 <Standard_ClearFeature+0x78>
        || (pInformation->USBwIndex1 != 0))
 80034e8:	7919      	ldrb	r1, [r3, #4]
 80034ea:	bb59      	cbnz	r1, 8003544 <Standard_ClearFeature+0x78>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 80034ec:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80034ee:	f012 0f80 	tst.w	r2, #128	; 0x80
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 80034f2:	f022 0080 	bic.w	r0, r2, #128	; 0x80
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80034f6:	d12b      	bne.n	8003550 <Standard_ClearFeature+0x84>
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80034f8:	0084      	lsls	r4, r0, #2
 80034fa:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 80034fe:	f501 4cb8 	add.w	ip, r1, #23552	; 0x5c00
 8003502:	f8dc 5000 	ldr.w	r5, [ip]
 8003506:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800350a:	492c      	ldr	r1, [pc, #176]	; (80035bc <Standard_ClearFeature+0xf0>)
 800350c:	f891 c000 	ldrb.w	ip, [r1]
 8003510:	4560      	cmp	r0, ip
 8003512:	d2e4      	bcs.n	80034de <Standard_ClearFeature+0x12>
 8003514:	2d00      	cmp	r5, #0
 8003516:	d0e2      	beq.n	80034de <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8003518:	7a9b      	ldrb	r3, [r3, #10]
 800351a:	b193      	cbz	r3, 8003542 <Standard_ClearFeature+0x76>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800351c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003520:	d020      	beq.n	8003564 <Standard_ClearFeature+0x98>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8003522:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003526:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 800352a:	6822      	ldr	r2, [r4, #0]
 800352c:	f002 0e30 	and.w	lr, r2, #48	; 0x30
 8003530:	f1be 0f10 	cmp.w	lr, #16
 8003534:	d033      	beq.n	800359e <Standard_ClearFeature+0xd2>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8003536:	4922      	ldr	r1, [pc, #136]	; (80035c0 <Standard_ClearFeature+0xf4>)
 8003538:	680b      	ldr	r3, [r1, #0]
 800353a:	6958      	ldr	r0, [r3, #20]
 800353c:	4780      	blx	r0
    return USB_SUCCESS;
 800353e:	2000      	movs	r0, #0
 8003540:	bd38      	pop	{r3, r4, r5, pc}
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
        || (pInformation->Current_Configuration == 0))
    {
      return USB_UNSUPPORT;
 8003542:	2002      	movs	r0, #2
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
}
 8003544:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8003546:	7a59      	ldrb	r1, [r3, #9]
 8003548:	f021 0220 	bic.w	r2, r1, #32
 800354c:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800354e:	bd38      	pop	{r3, r4, r5, pc}

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8003550:	0084      	lsls	r4, r0, #2
 8003552:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 8003556:	f501 4cb8 	add.w	ip, r1, #23552	; 0x5c00
 800355a:	f8dc 5000 	ldr.w	r5, [ip]
 800355e:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8003562:	e7d2      	b.n	800350a <Standard_ClearFeature+0x3e>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8003564:	f104 4e80 	add.w	lr, r4, #1073741824	; 0x40000000
 8003568:	f50e 44b8 	add.w	r4, lr, #23552	; 0x5c00
 800356c:	6822      	ldr	r2, [r4, #0]
 800356e:	f402 5c40 	and.w	ip, r2, #12288	; 0x3000
 8003572:	f5bc 5f80 	cmp.w	ip, #4096	; 0x1000
 8003576:	d1de      	bne.n	8003536 <Standard_ClearFeature+0x6a>
      {
        if (Related_Endpoint == ENDP0)
 8003578:	b9d0      	cbnz	r0, 80035b0 <Standard_ClearFeature+0xe4>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800357a:	4912      	ldr	r1, [pc, #72]	; (80035c4 <Standard_ClearFeature+0xf8>)
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <Standard_ClearFeature+0xfc>)
 800357e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8003582:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 800358a:	ea02 0301 	and.w	r3, r2, r1
 800358e:	f483 5e40 	eor.w	lr, r3, #12288	; 0x3000
 8003592:	f44e 4c00 	orr.w	ip, lr, #32768	; 0x8000
 8003596:	f04c 0080 	orr.w	r0, ip, #128	; 0x80
 800359a:	6020      	str	r0, [r4, #0]
 800359c:	e7cb      	b.n	8003536 <Standard_ClearFeature+0x6a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 800359e:	b2c4      	uxtb	r4, r0
 80035a0:	4620      	mov	r0, r4
 80035a2:	490a      	ldr	r1, [pc, #40]	; (80035cc <Standard_ClearFeature+0x100>)
 80035a4:	4788      	blx	r1
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 80035a6:	4620      	mov	r0, r4
 80035a8:	2130      	movs	r1, #48	; 0x30
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <Standard_ClearFeature+0x104>)
 80035ac:	4798      	blx	r3
 80035ae:	e7c2      	b.n	8003536 <Standard_ClearFeature+0x6a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 80035b0:	4a08      	ldr	r2, [pc, #32]	; (80035d4 <Standard_ClearFeature+0x108>)
 80035b2:	4790      	blx	r2
 80035b4:	e7e6      	b.n	8003584 <Standard_ClearFeature+0xb8>
 80035b6:	bf00      	nop
 80035b8:	20001238 	.word	0x20001238
 80035bc:	20000308 	.word	0x20000308
 80035c0:	20001234 	.word	0x20001234
 80035c4:	20000284 	.word	0x20000284
 80035c8:	08004009 	.word	0x08004009
 80035cc:	08003f35 	.word	0x08003f35
 80035d0:	08003e25 	.word	0x08003e25
 80035d4:	08003f0d 	.word	0x08003f0d

080035d8 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 80035d8:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 80035da:	4b29      	ldr	r3, [pc, #164]	; (8003680 <Standard_SetEndPointFeature+0xa8>)
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80035e0:	f013 0f80 	tst.w	r3, #128	; 0x80
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
 80035e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80035e8:	d12b      	bne.n	8003642 <Standard_SetEndPointFeature+0x6a>
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80035ea:	0090      	lsls	r0, r2, #2
 80035ec:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 80035f0:	f50c 44b8 	add.w	r4, ip, #23552	; 0x5c00
 80035f4:	6825      	ldr	r5, [r4, #0]
 80035f6:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80035fa:	4c22      	ldr	r4, [pc, #136]	; (8003684 <Standard_SetEndPointFeature+0xac>)
 80035fc:	7824      	ldrb	r4, [r4, #0]
 80035fe:	42a2      	cmp	r2, r4
 8003600:	d21d      	bcs.n	800363e <Standard_SetEndPointFeature+0x66>
      || pInformation->USBwValue != 0 || Status == 0
 8003602:	884a      	ldrh	r2, [r1, #2]
 8003604:	b9da      	cbnz	r2, 800363e <Standard_SetEndPointFeature+0x66>
 8003606:	b1d5      	cbz	r5, 800363e <Standard_SetEndPointFeature+0x66>
      || pInformation->Current_Configuration == 0)
 8003608:	7a89      	ldrb	r1, [r1, #10]
 800360a:	b319      	cbz	r1, 8003654 <Standard_SetEndPointFeature+0x7c>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800360c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003610:	d022      	beq.n	8003658 <Standard_SetEndPointFeature+0x80>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8003612:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003616:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800361a:	6803      	ldr	r3, [r0, #0]
 800361c:	f648 71bf 	movw	r1, #36799	; 0x8fbf
 8003620:	ea03 0201 	and.w	r2, r3, r1
 8003624:	f082 0c10 	eor.w	ip, r2, #16
 8003628:	f44c 4e00 	orr.w	lr, ip, #32768	; 0x8000
 800362c:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
 8003630:	6003      	str	r3, [r0, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8003632:	4815      	ldr	r0, [pc, #84]	; (8003688 <Standard_SetEndPointFeature+0xb0>)
 8003634:	6803      	ldr	r3, [r0, #0]
 8003636:	6999      	ldr	r1, [r3, #24]
 8003638:	4788      	blx	r1
  return USB_SUCCESS;
 800363a:	2000      	movs	r0, #0
 800363c:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 800363e:	2002      	movs	r0, #2
 8003640:	bd38      	pop	{r3, r4, r5, pc}

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8003642:	0090      	lsls	r0, r2, #2
 8003644:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 8003648:	f50c 44b8 	add.w	r4, ip, #23552	; 0x5c00
 800364c:	6825      	ldr	r5, [r4, #0]
 800364e:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8003652:	e7d2      	b.n	80035fa <Standard_SetEndPointFeature+0x22>

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8003654:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8003656:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8003658:	f100 4e80 	add.w	lr, r0, #1073741824	; 0x40000000
 800365c:	f50e 4eb8 	add.w	lr, lr, #23552	; 0x5c00
 8003660:	f8de 2000 	ldr.w	r2, [lr]
 8003664:	f64b 708f 	movw	r0, #49039	; 0xbf8f
 8003668:	ea02 0300 	and.w	r3, r2, r0
 800366c:	f483 5180 	eor.w	r1, r3, #4096	; 0x1000
 8003670:	f441 4c00 	orr.w	ip, r1, #32768	; 0x8000
 8003674:	f04c 0280 	orr.w	r2, ip, #128	; 0x80
 8003678:	f8ce 2000 	str.w	r2, [lr]
 800367c:	e7d9      	b.n	8003632 <Standard_SetEndPointFeature+0x5a>
 800367e:	bf00      	nop
 8003680:	20001238 	.word	0x20001238
 8003684:	20000308 	.word	0x20000308
 8003688:	20001234 	.word	0x20001234

0800368c <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <Standard_GetDescriptorData+0x18>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8003692:	b110      	cbz	r0, 800369a <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8003694:	6808      	ldr	r0, [r1, #0]
 8003696:	1880      	adds	r0, r0, r2
}
 8003698:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800369a:	8889      	ldrh	r1, [r1, #4]
 800369c:	1a8a      	subs	r2, r1, r2
 800369e:	821a      	strh	r2, [r3, #16]
    return 0;
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20001238 	.word	0x20001238

080036a8 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 80036a8:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80036aa:	490d      	ldr	r1, [pc, #52]	; (80036e0 <Post0_Process+0x38>)
 80036ac:	2000      	movs	r0, #0
 80036ae:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 80036b2:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <Post0_Process+0x3c>)
 80036b4:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 80036b6:	480c      	ldr	r0, [pc, #48]	; (80036e8 <Post0_Process+0x40>)
 80036b8:	6803      	ldr	r3, [r0, #0]
 80036ba:	7a18      	ldrb	r0, [r3, #8]
 80036bc:	2808      	cmp	r0, #8
 80036be:	d107      	bne.n	80036d0 <Post0_Process+0x28>
  {
    vSetEPRxStatus(EP_RX_STALL);
 80036c0:	490a      	ldr	r1, [pc, #40]	; (80036ec <Post0_Process+0x44>)
    vSetEPTxStatus(EP_TX_STALL);
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <Post0_Process+0x48>)
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);

  if (pInformation->ControlState == STALLED)
  {
    vSetEPRxStatus(EP_RX_STALL);
 80036c4:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 80036c8:	2210      	movs	r2, #16
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);

  if (pInformation->ControlState == STALLED)
  {
    vSetEPRxStatus(EP_RX_STALL);
 80036ca:	f8a1 c000 	strh.w	ip, [r1]
    vSetEPTxStatus(EP_TX_STALL);
 80036ce:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 80036d0:	f1a0 0009 	sub.w	r0, r0, #9
 80036d4:	f1d0 0e00 	rsbs	lr, r0, #0
 80036d8:	eb4e 0000 	adc.w	r0, lr, r0
 80036dc:	bd08      	pop	{r3, pc}
 80036de:	bf00      	nop
 80036e0:	20000284 	.word	0x20000284
 80036e4:	08004009 	.word	0x08004009
 80036e8:	20001238 	.word	0x20001238
 80036ec:	2000123e 	.word	0x2000123e
 80036f0:	20001240 	.word	0x20001240

080036f4 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 80036f6:	4d30      	ldr	r5, [pc, #192]	; (80037b8 <Out0_Process+0xc4>)
 80036f8:	682c      	ldr	r4, [r5, #0]
 80036fa:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d007      	beq.n	8003710 <Out0_Process+0x1c>
 8003700:	2b04      	cmp	r3, #4
 8003702:	d005      	beq.n	8003710 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8003704:	2b03      	cmp	r3, #3
 8003706:	d008      	beq.n	800371a <Out0_Process+0x26>
 8003708:	2b05      	cmp	r3, #5
 800370a:	d006      	beq.n	800371a <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 800370c:	2b07      	cmp	r3, #7
 800370e:	d043      	beq.n	8003798 <Out0_Process+0xa4>
 8003710:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8003712:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 8003714:	4929      	ldr	r1, [pc, #164]	; (80037bc <Out0_Process+0xc8>)
 8003716:	4788      	blx	r1
}
 8003718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 800371a:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 800371c:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 800371e:	b1c3      	cbz	r3, 8003752 <Out0_Process+0x5e>
 8003720:	b32a      	cbz	r2, 800376e <Out0_Process+0x7a>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8003722:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8003724:	4296      	cmp	r6, r2
 8003726:	bf28      	it	cs
 8003728:	4616      	movcs	r6, r2
 800372a:	4630      	mov	r0, r6
 800372c:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 800372e:	8a23      	ldrh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8003730:	f8b4 c012 	ldrh.w	ip, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8003734:	1b9a      	subs	r2, r3, r6
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8003736:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8003738:	eb06 000c 	add.w	r0, r6, ip
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 800373c:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800373e:	8260      	strh	r0, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8003740:	491f      	ldr	r1, [pc, #124]	; (80037c0 <Out0_Process+0xcc>)
 8003742:	2000      	movs	r0, #0
 8003744:	4788      	blx	r1
 8003746:	4632      	mov	r2, r6
 8003748:	4601      	mov	r1, r0
 800374a:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <Out0_Process+0xd0>)
 800374c:	4638      	mov	r0, r7
 800374e:	4798      	blx	r3
 8003750:	8a22      	ldrh	r2, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8003752:	b162      	cbz	r2, 800376e <Out0_Process+0x7a>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8003754:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <Out0_Process+0xd4>)
    SetEPTxCount(ENDP0, 0);
 8003756:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8003758:	f44f 5e40 	mov.w	lr, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 800375c:	4601      	mov	r1, r0
 800375e:	4a1b      	ldr	r2, [pc, #108]	; (80037cc <Out0_Process+0xd8>)

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8003760:	f8a3 e000 	strh.w	lr, [r3]
    SetEPTxCount(ENDP0, 0);
 8003764:	4790      	blx	r2
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8003766:	481a      	ldr	r0, [pc, #104]	; (80037d0 <Out0_Process+0xdc>)
 8003768:	2130      	movs	r1, #48	; 0x30
 800376a:	8a22      	ldrh	r2, [r4, #16]
 800376c:	8001      	strh	r1, [r0, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800376e:	8aa4      	ldrh	r4, [r4, #20]
 8003770:	4294      	cmp	r4, r2
 8003772:	d918      	bls.n	80037a6 <Out0_Process+0xb2>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8003774:	b9da      	cbnz	r2, 80037ae <Out0_Process+0xba>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8003776:	682c      	ldr	r4, [r5, #0]
 8003778:	2006      	movs	r0, #6
      USB_StatusIn();
 800377a:	4916      	ldr	r1, [pc, #88]	; (80037d4 <Out0_Process+0xe0>)
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800377c:	7220      	strb	r0, [r4, #8]
      USB_StatusIn();
 800377e:	680b      	ldr	r3, [r1, #0]
 8003780:	4815      	ldr	r0, [pc, #84]	; (80037d8 <Out0_Process+0xe4>)
 8003782:	fa1f fc83 	uxth.w	ip, r3
 8003786:	eb0c 0100 	add.w	r1, ip, r0
 800378a:	004b      	lsls	r3, r1, #1
 800378c:	4810      	ldr	r0, [pc, #64]	; (80037d0 <Out0_Process+0xdc>)
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	2130      	movs	r1, #48	; 0x30
 8003792:	7a23      	ldrb	r3, [r4, #8]
 8003794:	8001      	strh	r1, [r0, #0]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8003796:	e7bc      	b.n	8003712 <Out0_Process+0x1e>
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8003798:	4b10      	ldr	r3, [pc, #64]	; (80037dc <Out0_Process+0xe8>)
 800379a:	681c      	ldr	r4, [r3, #0]
 800379c:	68e2      	ldr	r2, [r4, #12]
 800379e:	4790      	blx	r2
 80037a0:	682c      	ldr	r4, [r5, #0]
 80037a2:	2308      	movs	r3, #8
 80037a4:	e7b5      	b.n	8003712 <Out0_Process+0x1e>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 80037a6:	682c      	ldr	r4, [r5, #0]
 80037a8:	2303      	movs	r3, #3
 80037aa:	7223      	strb	r3, [r4, #8]
 80037ac:	e7b1      	b.n	8003712 <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 80037ae:	682c      	ldr	r4, [r5, #0]
 80037b0:	2305      	movs	r3, #5
 80037b2:	7223      	strb	r3, [r4, #8]
 80037b4:	e7ad      	b.n	8003712 <Out0_Process+0x1e>
 80037b6:	bf00      	nop
 80037b8:	20001238 	.word	0x20001238
 80037bc:	080036a9 	.word	0x080036a9
 80037c0:	08003fc9 	.word	0x08003fc9
 80037c4:	08003da5 	.word	0x08003da5
 80037c8:	2000123e 	.word	0x2000123e
 80037cc:	08003fe9 	.word	0x08003fe9
 80037d0:	20001240 	.word	0x20001240
 80037d4:	40005c50 	.word	0x40005c50
 80037d8:	20003002 	.word	0x20003002
 80037dc:	20001210 	.word	0x20001210

080037e0 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 80037e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80037e4:	4e99      	ldr	r6, [pc, #612]	; (8003a4c <Setup0_Process+0x26c>)

  if (pInformation->ControlState != PAUSE)
 80037e6:	4c9a      	ldr	r4, [pc, #616]	; (8003a50 <Setup0_Process+0x270>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80037e8:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 80037ea:	6826      	ldr	r6, [r4, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80037ec:	4999      	ldr	r1, [pc, #612]	; (8003a54 <Setup0_Process+0x274>)
 80037ee:	fa1f fc82 	uxth.w	ip, r2

  if (pInformation->ControlState != PAUSE)
 80037f2:	7a32      	ldrb	r2, [r6, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80037f4:	eb0c 0001 	add.w	r0, ip, r1
 80037f8:	0043      	lsls	r3, r0, #1

  if (pInformation->ControlState != PAUSE)
 80037fa:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 80037fc:	b082      	sub	sp, #8
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80037fe:	681b      	ldr	r3, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8003800:	d04a      	beq.n	8003898 <Setup0_Process+0xb8>
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003802:	b298      	uxth	r0, r3
 8003804:	f100 5700 	add.w	r7, r0, #536870912	; 0x20000000
 8003808:	f507 5840 	add.w	r8, r7, #12288	; 0x3000
 800380c:	ea4f 0848 	mov.w	r8, r8, lsl #1

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8003810:	4645      	mov	r5, r8
 8003812:	f815 3b01 	ldrb.w	r3, [r5], #1
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8003816:	4f90      	ldr	r7, [pc, #576]	; (8003a58 <Setup0_Process+0x278>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8003818:	7033      	strb	r3, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800381a:	f898 e001 	ldrb.w	lr, [r8, #1]
 800381e:	f886 e001 	strb.w	lr, [r6, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8003822:	f8b5 0003 	ldrh.w	r0, [r5, #3]
 8003826:	47b8      	blx	r7
 8003828:	8070      	strh	r0, [r6, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800382a:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 800382e:	6825      	ldr	r5, [r4, #0]
 8003830:	47b8      	blx	r7
 8003832:	80a8      	strh	r0, [r5, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8003834:	6826      	ldr	r6, [r4, #0]
 8003836:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  }

  pInformation->ControlState = SETTING_UP;
 800383a:	2101      	movs	r1, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800383c:	80f3      	strh	r3, [r6, #6]
  }

  pInformation->ControlState = SETTING_UP;
 800383e:	7231      	strb	r1, [r6, #8]
  if (pInformation->USBwLength == 0)
 8003840:	2b00      	cmp	r3, #0
 8003842:	d02e      	beq.n	80038a2 <Setup0_Process+0xc2>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 8003844:	7871      	ldrb	r1, [r6, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8003846:	2906      	cmp	r1, #6
 8003848:	f000 808e 	beq.w	8003968 <Setup0_Process+0x188>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 800384c:	2900      	cmp	r1, #0
 800384e:	d149      	bne.n	80038e4 <Setup0_Process+0x104>
 8003850:	8872      	ldrh	r2, [r6, #2]
 8003852:	2a00      	cmp	r2, #0
 8003854:	f000 809f 	beq.w	8003996 <Setup0_Process+0x1b6>
 8003858:	4d80      	ldr	r5, [pc, #512]	; (8003a5c <Setup0_Process+0x27c>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 800385a:	682b      	ldr	r3, [r5, #0]
 800385c:	4608      	mov	r0, r1
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 8003862:	2803      	cmp	r0, #3
 8003864:	f000 8112 	beq.w	8003a8c <Setup0_Process+0x2ac>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800386e:	8a1a      	ldrh	r2, [r3, #16]
 8003870:	4562      	cmp	r2, ip
 8003872:	d04a      	beq.n	800390a <Setup0_Process+0x12a>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8003874:	2802      	cmp	r0, #2
 8003876:	d02e      	beq.n	80038d6 <Setup0_Process+0xf6>
 8003878:	2a00      	cmp	r2, #0
 800387a:	d02c      	beq.n	80038d6 <Setup0_Process+0xf6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 800387c:	f993 e000 	ldrsb.w	lr, [r3]
 8003880:	f1be 0f00 	cmp.w	lr, #0
 8003884:	f2c0 80bd 	blt.w	8003a02 <Setup0_Process+0x222>
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8003888:	4975      	ldr	r1, [pc, #468]	; (8003a60 <Setup0_Process+0x280>)
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 800388a:	2003      	movs	r0, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800388c:	f44f 5e40 	mov.w	lr, #12288	; 0x3000
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8003890:	7218      	strb	r0, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8003892:	f8a1 e000 	strh.w	lr, [r1]
 8003896:	e020      	b.n	80038da <Setup0_Process+0xfa>
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
 8003898:	88f3      	ldrh	r3, [r6, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 800389a:	2101      	movs	r1, #1
 800389c:	7231      	strb	r1, [r6, #8]
  if (pInformation->USBwLength == 0)
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1d0      	bne.n	8003844 <Setup0_Process+0x64>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80038a2:	f896 c000 	ldrb.w	ip, [r6]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 80038a6:	7875      	ldrb	r5, [r6, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80038a8:	f01c 037f 	ands.w	r3, ip, #127	; 0x7f
 80038ac:	d030      	beq.n	8003910 <Setup0_Process+0x130>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	f000 80bd 	beq.w	8003a2e <Setup0_Process+0x24e>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	f000 8101 	beq.w	8003abc <Setup0_Process+0x2dc>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 80038ba:	4b68      	ldr	r3, [pc, #416]	; (8003a5c <Setup0_Process+0x27c>)
 80038bc:	4628      	mov	r0, r5
 80038be:	681e      	ldr	r6, [r3, #0]
 80038c0:	6972      	ldr	r2, [r6, #20]
 80038c2:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 80038c4:	2803      	cmp	r0, #3
 80038c6:	f000 8123 	beq.w	8003b10 <Setup0_Process+0x330>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d03b      	beq.n	8003946 <Setup0_Process+0x166>
 80038ce:	6826      	ldr	r6, [r4, #0]
 80038d0:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80038d2:	7233      	strb	r3, [r6, #8]
 80038d4:	e001      	b.n	80038da <Setup0_Process+0xfa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80038d6:	2108      	movs	r1, #8
 80038d8:	7219      	strb	r1, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 80038da:	4a62      	ldr	r2, [pc, #392]	; (8003a64 <Setup0_Process+0x284>)
 80038dc:	4790      	blx	r2
}
 80038de:	b002      	add	sp, #8
 80038e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 80038e4:	2908      	cmp	r1, #8
 80038e6:	d169      	bne.n	80039bc <Setup0_Process+0x1dc>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80038e8:	7832      	ldrb	r2, [r6, #0]
 80038ea:	f012 0f7f 	tst.w	r2, #127	; 0x7f
 80038ee:	d1b3      	bne.n	8003858 <Setup0_Process+0x78>
    {
      CopyRoutine = Standard_GetConfiguration;
 80038f0:	4b5d      	ldr	r3, [pc, #372]	; (8003a68 <Setup0_Process+0x288>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80038f2:	2100      	movs	r1, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80038f4:	61b3      	str	r3, [r6, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 80038f6:	2000      	movs	r0, #0

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80038f8:	8271      	strh	r1, [r6, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 80038fa:	4798      	blx	r3
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8003902:	8a1a      	ldrh	r2, [r3, #16]
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
 8003904:	2000      	movs	r0, #0
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8003906:	4562      	cmp	r2, ip
 8003908:	d1b4      	bne.n	8003874 <Setup0_Process+0x94>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 800390a:	2209      	movs	r2, #9
 800390c:	721a      	strb	r2, [r3, #8]
 800390e:	e7e4      	b.n	80038da <Setup0_Process+0xfa>

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8003910:	2d09      	cmp	r5, #9
 8003912:	f000 80f3 	beq.w	8003afc <Setup0_Process+0x31c>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8003916:	2d05      	cmp	r5, #5
 8003918:	f000 80c0 	beq.w	8003a9c <Setup0_Process+0x2bc>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800391c:	2d03      	cmp	r5, #3
 800391e:	f000 80d9 	beq.w	8003ad4 <Setup0_Process+0x2f4>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8003922:	2d01      	cmp	r5, #1
 8003924:	d1c9      	bne.n	80038ba <Setup0_Process+0xda>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8003926:	f896 c003 	ldrb.w	ip, [r6, #3]
 800392a:	f1bc 0f01 	cmp.w	ip, #1
 800392e:	d1c4      	bne.n	80038ba <Setup0_Process+0xda>
          && pInformation->USBwIndex == 0
 8003930:	88b2      	ldrh	r2, [r6, #4]
 8003932:	2a00      	cmp	r2, #0
 8003934:	d1c1      	bne.n	80038ba <Setup0_Process+0xda>
          && ValBit(pInformation->Current_Feature, 5))
 8003936:	7a76      	ldrb	r6, [r6, #9]
 8003938:	f016 0f20 	tst.w	r6, #32
 800393c:	d0bd      	beq.n	80038ba <Setup0_Process+0xda>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 800393e:	484b      	ldr	r0, [pc, #300]	; (8003a6c <Setup0_Process+0x28c>)
 8003940:	4780      	blx	r0
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8003942:	2800      	cmp	r0, #0
 8003944:	d1b9      	bne.n	80038ba <Setup0_Process+0xda>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8003946:	4a41      	ldr	r2, [pc, #260]	; (8003a4c <Setup0_Process+0x26c>)
 8003948:	4849      	ldr	r0, [pc, #292]	; (8003a70 <Setup0_Process+0x290>)
 800394a:	6811      	ldr	r1, [r2, #0]
 800394c:	2200      	movs	r2, #0
 800394e:	fa1f fe81 	uxth.w	lr, r1
 8003952:	eb0e 0300 	add.w	r3, lr, r0
 8003956:	005e      	lsls	r6, r3, #1
 8003958:	6032      	str	r2, [r6, #0]
 800395a:	4946      	ldr	r1, [pc, #280]	; (8003a74 <Setup0_Process+0x294>)
 800395c:	6826      	ldr	r6, [r4, #0]
 800395e:	2030      	movs	r0, #48	; 0x30
 8003960:	2306      	movs	r3, #6
 8003962:	8008      	strh	r0, [r1, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8003964:	7233      	strb	r3, [r6, #8]
 8003966:	e7b8      	b.n	80038da <Setup0_Process+0xfa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003968:	7835      	ldrb	r5, [r6, #0]
 800396a:	f015 0f7f 	tst.w	r5, #127	; 0x7f
 800396e:	f47f af73 	bne.w	8003858 <Setup0_Process+0x78>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8003972:	78b3      	ldrb	r3, [r6, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
 8003974:	2b01      	cmp	r3, #1
 8003976:	f000 80c7 	beq.w	8003b08 <Setup0_Process+0x328>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800397a:	2b02      	cmp	r3, #2
 800397c:	f000 808a 	beq.w	8003a94 <Setup0_Process+0x2b4>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8003980:	2b03      	cmp	r3, #3
 8003982:	f47f af69 	bne.w	8003858 <Setup0_Process+0x78>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8003986:	4d35      	ldr	r5, [pc, #212]	; (8003a5c <Setup0_Process+0x27c>)
 8003988:	6829      	ldr	r1, [r5, #0]
 800398a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1b0      	bne.n	80038f2 <Setup0_Process+0x112>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8003990:	6820      	ldr	r0, [r4, #0]
 8003992:	7841      	ldrb	r1, [r0, #1]
 8003994:	e761      	b.n	800385a <Setup0_Process+0x7a>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8003996:	6873      	ldr	r3, [r6, #4]
 8003998:	f423 4c7f 	bic.w	ip, r3, #65280	; 0xff00
 800399c:	f5bc 3f00 	cmp.w	ip, #131072	; 0x20000
 80039a0:	f47f af5a 	bne.w	8003858 <Setup0_Process+0x78>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80039a4:	f896 e000 	ldrb.w	lr, [r6]
 80039a8:	f01e 037f 	ands.w	r3, lr, #127	; 0x7f
 80039ac:	f040 80b4 	bne.w	8003b18 <Setup0_Process+0x338>
        && (pInformation->USBwIndex == 0))
 80039b0:	88b0      	ldrh	r0, [r6, #4]
 80039b2:	2800      	cmp	r0, #0
 80039b4:	f47f af50 	bne.w	8003858 <Setup0_Process+0x78>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 80039b8:	4b2f      	ldr	r3, [pc, #188]	; (8003a78 <Setup0_Process+0x298>)
 80039ba:	e79a      	b.n	80038f2 <Setup0_Process+0x112>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 80039bc:	290a      	cmp	r1, #10
 80039be:	f47f af4b 	bne.w	8003858 <Setup0_Process+0x78>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80039c2:	7835      	ldrb	r5, [r6, #0]
 80039c4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	f47f af45 	bne.w	8003858 <Setup0_Process+0x78>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 80039ce:	7ab0      	ldrb	r0, [r6, #10]
 80039d0:	2800      	cmp	r0, #0
 80039d2:	f43f af41 	beq.w	8003858 <Setup0_Process+0x78>
 80039d6:	8872      	ldrh	r2, [r6, #2]
 80039d8:	2a00      	cmp	r2, #0
 80039da:	f47f af3d 	bne.w	8003858 <Setup0_Process+0x78>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 80039de:	6873      	ldr	r3, [r6, #4]
 80039e0:	f423 4e7f 	bic.w	lr, r3, #65280	; 0xff00
 80039e4:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
 80039e8:	f47f af36 	bne.w	8003858 <Setup0_Process+0x78>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 80039ec:	4d1b      	ldr	r5, [pc, #108]	; (8003a5c <Setup0_Process+0x27c>)
 80039ee:	4611      	mov	r1, r2
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	7970      	ldrb	r0, [r6, #5]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	4790      	blx	r2
 80039f8:	2800      	cmp	r0, #0
 80039fa:	d1c9      	bne.n	8003990 <Setup0_Process+0x1b0>
 80039fc:	6826      	ldr	r6, [r4, #0]
    {
      CopyRoutine = Standard_GetInterface;
 80039fe:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <Setup0_Process+0x29c>)
 8003a00:	e777      	b.n	80038f2 <Setup0_Process+0x112>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8003a02:	88d9      	ldrh	r1, [r3, #6]
 8003a04:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8003a06:	9801      	ldr	r0, [sp, #4]
 8003a08:	4282      	cmp	r2, r0
 8003a0a:	d818      	bhi.n	8003a3e <Setup0_Process+0x25e>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8003a0c:	428a      	cmp	r2, r1
 8003a0e:	f080 80a6 	bcs.w	8003b5e <Setup0_Process+0x37e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8003a12:	4912      	ldr	r1, [pc, #72]	; (8003a5c <Setup0_Process+0x27c>)
 8003a14:	6808      	ldr	r0, [r1, #0]
 8003a16:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 8003a1a:	428a      	cmp	r2, r1
 8003a1c:	f080 80a4 	bcs.w	8003b68 <Setup0_Process+0x388>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8003a20:	4a17      	ldr	r2, [pc, #92]	; (8003a80 <Setup0_Process+0x2a0>)
 8003a22:	2000      	movs	r0, #0
 8003a24:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8003a26:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 8003a28:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <Setup0_Process+0x2a4>)
 8003a2a:	4798      	blx	r3
 8003a2c:	e755      	b.n	80038da <Setup0_Process+0xfa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8003a2e:	2d0b      	cmp	r5, #11
 8003a30:	f47f af43 	bne.w	80038ba <Setup0_Process+0xda>
    {
      Result = Standard_SetInterface();
 8003a34:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <Setup0_Process+0x2a8>)
 8003a36:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d084      	beq.n	8003946 <Setup0_Process+0x166>
 8003a3c:	e73d      	b.n	80038ba <Setup0_Process+0xda>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8003a3e:	4807      	ldr	r0, [pc, #28]	; (8003a5c <Setup0_Process+0x27c>)
 8003a40:	9901      	ldr	r1, [sp, #4]
 8003a42:	6802      	ldr	r2, [r0, #0]
 8003a44:	8219      	strh	r1, [r3, #16]
 8003a46:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8003a4a:	e7ec      	b.n	8003a26 <Setup0_Process+0x246>
 8003a4c:	40005c50 	.word	0x40005c50
 8003a50:	20001238 	.word	0x20001238
 8003a54:	20003004 	.word	0x20003004
 8003a58:	08004075 	.word	0x08004075
 8003a5c:	20001210 	.word	0x20001210
 8003a60:	2000123e 	.word	0x2000123e
 8003a64:	080036a9 	.word	0x080036a9
 8003a68:	08003275 	.word	0x08003275
 8003a6c:	080034cd 	.word	0x080034cd
 8003a70:	20003002 	.word	0x20003002
 8003a74:	20001240 	.word	0x20001240
 8003a78:	080032c5 	.word	0x080032c5
 8003a7c:	0800329d 	.word	0x0800329d
 8003a80:	200004b4 	.word	0x200004b4
 8003a84:	08003381 	.word	0x08003381
 8003a88:	0800347d 	.word	0x0800347d
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
    {
      pInformation->ControlState = PAUSE;
 8003a8c:	6820      	ldr	r0, [r4, #0]
 8003a8e:	2109      	movs	r1, #9
 8003a90:	7201      	strb	r1, [r0, #8]
 8003a92:	e722      	b.n	80038da <Setup0_Process+0xfa>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8003a94:	4d46      	ldr	r5, [pc, #280]	; (8003bb0 <Setup0_Process+0x3d0>)
 8003a96:	6828      	ldr	r0, [r5, #0]
 8003a98:	6a03      	ldr	r3, [r0, #32]
 8003a9a:	e777      	b.n	800398c <Setup0_Process+0x1ac>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8003a9c:	f996 e003 	ldrsb.w	lr, [r6, #3]
 8003aa0:	f1be 0f00 	cmp.w	lr, #0
 8003aa4:	db07      	blt.n	8003ab6 <Setup0_Process+0x2d6>
 8003aa6:	78b3      	ldrb	r3, [r6, #2]
 8003aa8:	b92b      	cbnz	r3, 8003ab6 <Setup0_Process+0x2d6>
          || (pInformation->USBwIndex != 0)
 8003aaa:	88b0      	ldrh	r0, [r6, #4]
 8003aac:	b918      	cbnz	r0, 8003ab6 <Setup0_Process+0x2d6>
          || (pInformation->Current_Configuration != 0))
 8003aae:	7ab1      	ldrb	r1, [r6, #10]
 8003ab0:	2900      	cmp	r1, #0
 8003ab2:	f43f af48 	beq.w	8003946 <Setup0_Process+0x166>
 8003ab6:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8003ab8:	7233      	strb	r3, [r6, #8]
 8003aba:	e70e      	b.n	80038da <Setup0_Process+0xfa>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8003abc:	2d01      	cmp	r5, #1
 8003abe:	f43f af3e 	beq.w	800393e <Setup0_Process+0x15e>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8003ac2:	2d03      	cmp	r5, #3
 8003ac4:	f47f aef9 	bne.w	80038ba <Setup0_Process+0xda>
    {
      Result = Standard_SetEndPointFeature();
 8003ac8:	493a      	ldr	r1, [pc, #232]	; (8003bb4 <Setup0_Process+0x3d4>)
 8003aca:	4788      	blx	r1
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8003acc:	2800      	cmp	r0, #0
 8003ace:	f43f af3a 	beq.w	8003946 <Setup0_Process+0x166>
 8003ad2:	e6f2      	b.n	80038ba <Setup0_Process+0xda>
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8003ad4:	f896 c003 	ldrb.w	ip, [r6, #3]
 8003ad8:	f1bc 0f01 	cmp.w	ip, #1
 8003adc:	f47f aeed 	bne.w	80038ba <Setup0_Process+0xda>
          && (pInformation->USBwIndex == 0))
 8003ae0:	88b2      	ldrh	r2, [r6, #4]
 8003ae2:	2a00      	cmp	r2, #0
 8003ae4:	f47f aee9 	bne.w	80038ba <Setup0_Process+0xda>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8003ae8:	7a71      	ldrb	r1, [r6, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8003aea:	4833      	ldr	r0, [pc, #204]	; (8003bb8 <Setup0_Process+0x3d8>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8003aec:	f041 0e20 	orr.w	lr, r1, #32
 8003af0:	f886 e009 	strb.w	lr, [r6, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8003af4:	6803      	ldr	r3, [r0, #0]
 8003af6:	69de      	ldr	r6, [r3, #28]
 8003af8:	47b0      	blx	r6
 8003afa:	e724      	b.n	8003946 <Setup0_Process+0x166>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8003afc:	4a2f      	ldr	r2, [pc, #188]	; (8003bbc <Setup0_Process+0x3dc>)
 8003afe:	4790      	blx	r2
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8003b00:	2800      	cmp	r0, #0
 8003b02:	f43f af20 	beq.w	8003946 <Setup0_Process+0x166>
 8003b06:	e6d8      	b.n	80038ba <Setup0_Process+0xda>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8003b08:	4d29      	ldr	r5, [pc, #164]	; (8003bb0 <Setup0_Process+0x3d0>)
 8003b0a:	682b      	ldr	r3, [r5, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	e73d      	b.n	800398c <Setup0_Process+0x1ac>


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 8003b10:	6826      	ldr	r6, [r4, #0]
 8003b12:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8003b14:	7233      	strb	r3, [r6, #8]
 8003b16:	e6e0      	b.n	80038da <Setup0_Process+0xfa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d030      	beq.n	8003b7e <Setup0_Process+0x39e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	f47f ae9b 	bne.w	8003858 <Setup0_Process+0x78>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8003b22:	7973      	ldrb	r3, [r6, #5]
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8003b24:	f013 0f80 	tst.w	r3, #128	; 0x80
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8003b28:	f003 020f 	and.w	r2, r3, #15
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8003b2c:	d136      	bne.n	8003b9c <Setup0_Process+0x3bc>
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8003b2e:	0090      	lsls	r0, r2, #2
 8003b30:	f100 4e80 	add.w	lr, r0, #1073741824	; 0x40000000
 8003b34:	f50e 4cb8 	add.w	ip, lr, #23552	; 0x5c00
 8003b38:	f8dc 5000 	ldr.w	r5, [ip]
 8003b3c:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8003b40:	481f      	ldr	r0, [pc, #124]	; (8003bc0 <Setup0_Process+0x3e0>)
 8003b42:	f890 c000 	ldrb.w	ip, [r0]
 8003b46:	4562      	cmp	r2, ip
 8003b48:	f4bf ae86 	bcs.w	8003858 <Setup0_Process+0x78>
 8003b4c:	f013 0f70 	tst.w	r3, #112	; 0x70
 8003b50:	f47f ae82 	bne.w	8003858 <Setup0_Process+0x78>
          && (Status != 0))
 8003b54:	2d00      	cmp	r5, #0
 8003b56:	f43f ae7f 	beq.w	8003858 <Setup0_Process+0x78>
      {
        CopyRoutine = Standard_GetStatus;
 8003b5a:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <Setup0_Process+0x3e4>)
 8003b5c:	e6c9      	b.n	80038f2 <Setup0_Process+0x112>
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8003b5e:	4914      	ldr	r1, [pc, #80]	; (8003bb0 <Setup0_Process+0x3d0>)
 8003b60:	680a      	ldr	r2, [r1, #0]
 8003b62:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8003b66:	e75e      	b.n	8003a26 <Setup0_Process+0x246>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8003b68:	fb92 fcf1 	sdiv	ip, r2, r1
 8003b6c:	fb01 201c 	mls	r0, r1, ip, r2
 8003b70:	2800      	cmp	r0, #0
 8003b72:	f47f af58 	bne.w	8003a26 <Setup0_Process+0x246>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8003b76:	4a14      	ldr	r2, [pc, #80]	; (8003bc8 <Setup0_Process+0x3e8>)
 8003b78:	2001      	movs	r0, #1
 8003b7a:	7010      	strb	r0, [r2, #0]
 8003b7c:	e753      	b.n	8003a26 <Setup0_Process+0x246>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8003b7e:	4d0c      	ldr	r5, [pc, #48]	; (8003bb0 <Setup0_Process+0x3d0>)
 8003b80:	7970      	ldrb	r0, [r6, #5]
 8003b82:	682b      	ldr	r3, [r5, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	4790      	blx	r2
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	f47f af01 	bne.w	8003990 <Setup0_Process+0x1b0>
          && (pInformation->Current_Configuration != 0))
 8003b8e:	6826      	ldr	r6, [r4, #0]
 8003b90:	7ab1      	ldrb	r1, [r6, #10]
 8003b92:	2900      	cmp	r1, #0
 8003b94:	f47f af10 	bne.w	80039b8 <Setup0_Process+0x1d8>
 8003b98:	7871      	ldrb	r1, [r6, #1]
 8003b9a:	e65e      	b.n	800385a <Setup0_Process+0x7a>

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8003b9c:	0090      	lsls	r0, r2, #2
 8003b9e:	f100 4e80 	add.w	lr, r0, #1073741824	; 0x40000000
 8003ba2:	f50e 4cb8 	add.w	ip, lr, #23552	; 0x5c00
 8003ba6:	f8dc 5000 	ldr.w	r5, [ip]
 8003baa:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8003bae:	e7c7      	b.n	8003b40 <Setup0_Process+0x360>
 8003bb0:	20001210 	.word	0x20001210
 8003bb4:	080035d9 	.word	0x080035d9
 8003bb8:	20001234 	.word	0x20001234
 8003bbc:	08003441 	.word	0x08003441
 8003bc0:	20000308 	.word	0x20000308
 8003bc4:	080032c5 	.word	0x080032c5
 8003bc8:	200004b4 	.word	0x200004b4

08003bcc <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8003bcc:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8003bce:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <SetDeviceAddress+0xac>)
 8003bd0:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003bd2:	2e00      	cmp	r6, #0
 8003bd4:	d049      	beq.n	8003c6a <SetDeviceAddress+0x9e>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003bd6:	4a29      	ldr	r2, [pc, #164]	; (8003c7c <SetDeviceAddress+0xb0>)
 8003bd8:	f640 7c0f 	movw	ip, #3855	; 0xf0f
 8003bdc:	6814      	ldr	r4, [r2, #0]
 8003bde:	1e71      	subs	r1, r6, #1
 8003be0:	ea04 030c 	and.w	r3, r4, ip
 8003be4:	f443 4c00 	orr.w	ip, r3, #32768	; 0x8000
 8003be8:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 8003bec:	6013      	str	r3, [r2, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003bee:	2301      	movs	r3, #1
 8003bf0:	429e      	cmp	r6, r3
 8003bf2:	f001 0101 	and.w	r1, r1, #1
 8003bf6:	d938      	bls.n	8003c6a <SetDeviceAddress+0x9e>
 8003bf8:	b169      	cbz	r1, 8003c16 <SetDeviceAddress+0x4a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003bfa:	4921      	ldr	r1, [pc, #132]	; (8003c80 <SetDeviceAddress+0xb4>)
 8003bfc:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003c00:	680c      	ldr	r4, [r1, #0]
 8003c02:	f248 0c81 	movw	ip, #32897	; 0x8081
 8003c06:	ea04 0302 	and.w	r3, r4, r2
 8003c0a:	ea43 020c 	orr.w	r2, r3, ip
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003c0e:	2302      	movs	r3, #2
 8003c10:	429e      	cmp	r6, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003c12:	600a      	str	r2, [r1, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003c14:	d929      	bls.n	8003c6a <SetDeviceAddress+0x9e>
 8003c16:	b2dc      	uxtb	r4, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003c18:	00a2      	lsls	r2, r4, #2
 8003c1a:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 8003c1e:	f501 4cb8 	add.w	ip, r1, #23552	; 0x5c00
 8003c22:	f8dc 7000 	ldr.w	r7, [ip]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003c26:	3301      	adds	r3, #1
 8003c28:	b2d9      	uxtb	r1, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003c2a:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8003c2e:	f640 740f 	movw	r4, #3855	; 0xf0f
 8003c32:	ea07 0404 	and.w	r4, r7, r4
 8003c36:	f045 0280 	orr.w	r2, r5, #128	; 0x80
 8003c3a:	008f      	lsls	r7, r1, #2
 8003c3c:	ea42 0504 	orr.w	r5, r2, r4
 8003c40:	f107 4480 	add.w	r4, r7, #1073741824	; 0x40000000
 8003c44:	f8cc 5000 	str.w	r5, [ip]
 8003c48:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8003c4c:	6825      	ldr	r5, [r4, #0]
 8003c4e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003c52:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003c56:	f041 0c80 	orr.w	ip, r1, #128	; 0x80
 8003c5a:	ea05 0202 	and.w	r2, r5, r2
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003c5e:	3301      	adds	r3, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003c60:	ea4c 0102 	orr.w	r1, ip, r2
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003c64:	429e      	cmp	r6, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003c66:	6021      	str	r1, [r4, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003c68:	d8d5      	bhi.n	8003c16 <SetDeviceAddress+0x4a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <SetDeviceAddress+0xb8>)
 8003c6c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003c70:	6018      	str	r0, [r3, #0]
}
 8003c72:	bcf0      	pop	{r4, r5, r6, r7}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000308 	.word	0x20000308
 8003c7c:	40005c00 	.word	0x40005c00
 8003c80:	40005c04 	.word	0x40005c04
 8003c84:	40005c4c 	.word	0x40005c4c

08003c88 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8003c88:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8003c8a:	4c17      	ldr	r4, [pc, #92]	; (8003ce8 <In0_Process+0x60>)
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8003c90:	2a02      	cmp	r2, #2
 8003c92:	d015      	beq.n	8003cc0 <In0_Process+0x38>
 8003c94:	2a04      	cmp	r2, #4
 8003c96:	d013      	beq.n	8003cc0 <In0_Process+0x38>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8003c98:	2a06      	cmp	r2, #6
 8003c9a:	d004      	beq.n	8003ca6 <In0_Process+0x1e>
 8003c9c:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8003c9e:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8003ca0:	4912      	ldr	r1, [pc, #72]	; (8003cec <In0_Process+0x64>)
 8003ca2:	4788      	blx	r1
}
 8003ca4:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8003ca6:	785a      	ldrb	r2, [r3, #1]
 8003ca8:	2a05      	cmp	r2, #5
 8003caa:	d011      	beq.n	8003cd0 <In0_Process+0x48>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8003cac:	4a10      	ldr	r2, [pc, #64]	; (8003cf0 <In0_Process+0x68>)
 8003cae:	6813      	ldr	r3, [r2, #0]
 8003cb0:	6898      	ldr	r0, [r3, #8]
 8003cb2:	4780      	blx	r0
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8003cb8:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8003cba:	490c      	ldr	r1, [pc, #48]	; (8003cec <In0_Process+0x64>)
 8003cbc:	4788      	blx	r1
}
 8003cbe:	bd10      	pop	{r4, pc}
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <In0_Process+0x6c>)
 8003cc2:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8003cc4:	6823      	ldr	r3, [r4, #0]
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8003cc6:	4909      	ldr	r1, [pc, #36]	; (8003cec <In0_Process+0x64>)

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8003cc8:	7a1a      	ldrb	r2, [r3, #8]
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8003cca:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8003ccc:	4788      	blx	r1
}
 8003cce:	bd10      	pop	{r4, pc}
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8003cd0:	7818      	ldrb	r0, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8003cd2:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003cd6:	d1e9      	bne.n	8003cac <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8003cd8:	78d8      	ldrb	r0, [r3, #3]
 8003cda:	4907      	ldr	r1, [pc, #28]	; (8003cf8 <In0_Process+0x70>)
 8003cdc:	4788      	blx	r1
      pUser_Standard_Requests->User_SetDeviceAddress();
 8003cde:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <In0_Process+0x74>)
 8003ce0:	6813      	ldr	r3, [r2, #0]
 8003ce2:	6a19      	ldr	r1, [r3, #32]
 8003ce4:	4788      	blx	r1
 8003ce6:	e7e1      	b.n	8003cac <In0_Process+0x24>
 8003ce8:	20001238 	.word	0x20001238
 8003cec:	080036a9 	.word	0x080036a9
 8003cf0:	20001210 	.word	0x20001210
 8003cf4:	08003381 	.word	0x08003381
 8003cf8:	08003bcd 	.word	0x08003bcd
 8003cfc:	20001234 	.word	0x20001234

08003d00 <NOP_Process>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop

08003d04 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8003d04:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 8003d06:	4a07      	ldr	r2, [pc, #28]	; (8003d24 <USB_Init+0x20>)
 8003d08:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <USB_Init+0x24>)
  pInformation->ControlState = 2;
 8003d0a:	2102      	movs	r1, #2
  pProperty = &Device_Property;
 8003d0c:	4807      	ldr	r0, [pc, #28]	; (8003d2c <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8003d0e:	601a      	str	r2, [r3, #0]
  pInformation->ControlState = 2;
 8003d10:	7211      	strb	r1, [r2, #8]
  pProperty = &Device_Property;
 8003d12:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <USB_Init+0x2c>)
  pUser_Standard_Requests = &User_Standard_Requests;
 8003d14:	4907      	ldr	r1, [pc, #28]	; (8003d34 <USB_Init+0x30>)
 8003d16:	4a08      	ldr	r2, [pc, #32]	; (8003d38 <USB_Init+0x34>)
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8003d18:	6018      	str	r0, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8003d1a:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8003d1c:	6803      	ldr	r3, [r0, #0]
 8003d1e:	4798      	blx	r3
}
 8003d20:	bd08      	pop	{r3, pc}
 8003d22:	bf00      	nop
 8003d24:	20001218 	.word	0x20001218
 8003d28:	20001238 	.word	0x20001238
 8003d2c:	20000284 	.word	0x20000284
 8003d30:	20001210 	.word	0x20001210
 8003d34:	200002b4 	.word	0x200002b4
 8003d38:	20001234 	.word	0x20001234

08003d3c <UserToPMABufferCopy>:
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003d3c:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003d3e:	1052      	asrs	r2, r2, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003d40:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003d42:	d02d      	beq.n	8003da0 <UserToPMABufferCopy+0x64>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003d44:	4603      	mov	r3, r0
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003d46:	7844      	ldrb	r4, [r0, #1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003d48:	f813 cb02 	ldrb.w	ip, [r3], #2
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8003d4c:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8003d50:	3a01      	subs	r2, #1
 8003d52:	f501 5540 	add.w	r5, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003d56:	ea4c 2004 	orr.w	r0, ip, r4, lsl #8
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8003d5a:	006d      	lsls	r5, r5, #1
  for (i = n; i != 0; i--)
 8003d5c:	4611      	mov	r1, r2
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 8003d5e:	8028      	strh	r0, [r5, #0]
 8003d60:	f002 0201 	and.w	r2, r2, #1
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003d64:	2004      	movs	r0, #4
 8003d66:	b1d9      	cbz	r1, 8003da0 <UserToPMABufferCopy+0x64>
 8003d68:	b142      	cbz	r2, 8003d7c <UserToPMABufferCopy+0x40>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003d6a:	785c      	ldrb	r4, [r3, #1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003d6c:	f813 cb02 	ldrb.w	ip, [r3], #2
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003d70:	2008      	movs	r0, #8
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003d72:	ea4c 2204 	orr.w	r2, ip, r4, lsl #8
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003d76:	3901      	subs	r1, #1
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 8003d78:	80aa      	strh	r2, [r5, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003d7a:	d011      	beq.n	8003da0 <UserToPMABufferCopy+0x64>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f812 cb02 	ldrb.w	ip, [r2], #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003d82:	785f      	ldrb	r7, [r3, #1]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003d84:	1d04      	adds	r4, r0, #4
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003d86:	ea4c 2607 	orr.w	r6, ip, r7, lsl #8
    *pdwVal++ = temp2;
 8003d8a:	5346      	strh	r6, [r0, r5]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003d8c:	f893 c002 	ldrb.w	ip, [r3, #2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003d90:	7856      	ldrb	r6, [r2, #1]
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8003d92:	1c93      	adds	r3, r2, #2
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003d94:	ea4c 2006 	orr.w	r0, ip, r6, lsl #8
    *pdwVal++ = temp2;
 8003d98:	5360      	strh	r0, [r4, r5]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003d9a:	1d20      	adds	r0, r4, #4
 8003d9c:	3902      	subs	r1, #2
 8003d9e:	d1ed      	bne.n	8003d7c <UserToPMABufferCopy+0x40>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8003da0:	bcf0      	pop	{r4, r5, r6, r7}
 8003da2:	4770      	bx	lr

08003da4 <PMAToUserBufferCopy>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8003da4:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003da6:	1052      	asrs	r2, r2, #1
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003da8:	b470      	push	{r4, r5, r6}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003daa:	d020      	beq.n	8003dee <PMAToUserBufferCopy+0x4a>
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8003dac:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8003db0:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	3a01      	subs	r2, #1
 8003db8:	f853 4b04 	ldr.w	r4, [r3], #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003dbc:	4611      	mov	r1, r2
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003dbe:	f820 4b02 	strh.w	r4, [r0], #2
 8003dc2:	f002 0201 	and.w	r2, r2, #1
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003dc6:	b191      	cbz	r1, 8003dee <PMAToUserBufferCopy+0x4a>
 8003dc8:	b12a      	cbz	r2, 8003dd6 <PMAToUserBufferCopy+0x32>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003dca:	f853 2b04 	ldr.w	r2, [r3], #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003dce:	3901      	subs	r1, #1
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003dd0:	f820 2b02 	strh.w	r2, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003dd4:	d00b      	beq.n	8003dee <PMAToUserBufferCopy+0x4a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003dd6:	461c      	mov	r4, r3
 8003dd8:	f854 6b04 	ldr.w	r6, [r4], #4
 8003ddc:	685d      	ldr	r5, [r3, #4]
 8003dde:	4602      	mov	r2, r0
 8003de0:	f822 6b02 	strh.w	r6, [r2], #2
 8003de4:	1d23      	adds	r3, r4, #4
 8003de6:	8045      	strh	r5, [r0, #2]
*                  - wPMABufAddr = address into PMA.
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8003de8:	1c90      	adds	r0, r2, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003dea:	3902      	subs	r1, #2
 8003dec:	d1f3      	bne.n	8003dd6 <PMAToUserBufferCopy+0x32>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8003dee:	bc70      	pop	{r4, r5, r6}
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop

08003df4 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8003df4:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8003df8:	4a02      	ldr	r2, [pc, #8]	; (8003e04 <SetBTABLE+0x10>)
 8003dfa:	ea00 0301 	and.w	r3, r0, r1
 8003dfe:	6013      	str	r3, [r2, #0]
}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40005c50 	.word	0x40005c50

08003e08 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8003e08:	0080      	lsls	r0, r0, #2
 8003e0a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003e0e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8003e12:	6813      	ldr	r3, [r2, #0]
 8003e14:	f648 1c8f 	movw	ip, #35215	; 0x898f
 8003e18:	ea03 000c 	and.w	r0, r3, ip
 8003e1c:	ea40 0301 	orr.w	r3, r0, r1
 8003e20:	6013      	str	r3, [r2, #0]
}
 8003e22:	4770      	bx	lr

08003e24 <SetEPTxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8003e24:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8003e26:	0084      	lsls	r4, r0, #2
 8003e28:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 8003e2c:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8003e30:	6804      	ldr	r4, [r0, #0]
 8003e32:	f001 0c10 	and.w	ip, r1, #16
 8003e36:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8003e3a:	fa1f f28c 	uxth.w	r2, ip
 8003e3e:	ea04 0303 	and.w	r3, r4, r3
 8003e42:	b10a      	cbz	r2, 8003e48 <SetEPTxStatus+0x24>
 8003e44:	f083 0310 	eor.w	r3, r3, #16
 8003e48:	f001 0220 	and.w	r2, r1, #32
 8003e4c:	b291      	uxth	r1, r2
 8003e4e:	b109      	cbz	r1, 8003e54 <SetEPTxStatus+0x30>
 8003e50:	f083 0320 	eor.w	r3, r3, #32
 8003e54:	f443 4c00 	orr.w	ip, r3, #32768	; 0x8000
 8003e58:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 8003e5c:	6003      	str	r3, [r0, #0]
}
 8003e5e:	bc10      	pop	{r4}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop

08003e64 <SetEPRxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8003e64:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8003e66:	0084      	lsls	r4, r0, #2
 8003e68:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 8003e6c:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8003e70:	6804      	ldr	r4, [r0, #0]
 8003e72:	f401 5c80 	and.w	ip, r1, #4096	; 0x1000
 8003e76:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8003e7a:	fa1f f28c 	uxth.w	r2, ip
 8003e7e:	ea04 0303 	and.w	r3, r4, r3
 8003e82:	b10a      	cbz	r2, 8003e88 <SetEPRxStatus+0x24>
 8003e84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e88:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
 8003e8c:	b291      	uxth	r1, r2
 8003e8e:	b109      	cbz	r1, 8003e94 <SetEPRxStatus+0x30>
 8003e90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e94:	f443 4c00 	orr.w	ip, r3, #32768	; 0x8000
 8003e98:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 8003e9c:	6003      	str	r3, [r0, #0]
}
 8003e9e:	bc10      	pop	{r4}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop

08003ea4 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8003ea4:	0081      	lsls	r1, r0, #2
 8003ea6:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 8003eaa:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8003eae:	6810      	ldr	r0, [r2, #0]
 8003eb0:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8003eb4:	ea00 0c03 	and.w	ip, r0, r3
 8003eb8:	f08c 0130 	eor.w	r1, ip, #48	; 0x30
 8003ebc:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8003ec0:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 8003ec4:	6013      	str	r3, [r2, #0]
}
 8003ec6:	4770      	bx	lr

08003ec8 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8003ec8:	0081      	lsls	r1, r0, #2
 8003eca:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 8003ece:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8003ed2:	6810      	ldr	r0, [r2, #0]
 8003ed4:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8003ed8:	ea00 0c03 	and.w	ip, r0, r3
 8003edc:	f48c 5140 	eor.w	r1, ip, #12288	; 0x3000
 8003ee0:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8003ee4:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 8003ee8:	6013      	str	r3, [r2, #0]
}
 8003eea:	4770      	bx	lr

08003eec <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8003eec:	0080      	lsls	r0, r0, #2
 8003eee:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003ef2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8003ef6:	6813      	ldr	r3, [r2, #0]
 8003ef8:	f640 6c0f 	movw	ip, #3599	; 0xe0f
 8003efc:	ea03 010c 	and.w	r1, r3, ip
 8003f00:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8003f04:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 8003f08:	6013      	str	r3, [r2, #0]
}
 8003f0a:	4770      	bx	lr

08003f0c <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8003f0c:	0080      	lsls	r0, r0, #2
 8003f0e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8003f12:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003f1c:	d009      	beq.n	8003f32 <ClearDTOG_RX+0x26>
 8003f1e:	6819      	ldr	r1, [r3, #0]
 8003f20:	f640 700f 	movw	r0, #3855	; 0xf0f
 8003f24:	ea01 0200 	and.w	r2, r1, r0
 8003f28:	f442 4c40 	orr.w	ip, r2, #49152	; 0xc000
 8003f2c:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
 8003f30:	6019      	str	r1, [r3, #0]
 8003f32:	4770      	bx	lr

08003f34 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8003f34:	0080      	lsls	r0, r0, #2
 8003f36:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8003f3a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003f44:	d009      	beq.n	8003f5a <ClearDTOG_TX+0x26>
 8003f46:	6819      	ldr	r1, [r3, #0]
 8003f48:	f640 700f 	movw	r0, #3855	; 0xf0f
 8003f4c:	ea01 0200 	and.w	r2, r1, r0
 8003f50:	f442 4c00 	orr.w	ip, r2, #32768	; 0x8000
 8003f54:	f04c 01c0 	orr.w	r1, ip, #192	; 0xc0
 8003f58:	6019      	str	r1, [r3, #0]
 8003f5a:	4770      	bx	lr

08003f5c <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8003f5c:	4a07      	ldr	r2, [pc, #28]	; (8003f7c <SetEPTxAddr+0x20>)
 8003f5e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	ea01 0303 	and.w	r3, r1, r3
 8003f68:	b292      	uxth	r2, r2
 8003f6a:	eb02 0cc0 	add.w	ip, r2, r0, lsl #3
 8003f6e:	f10c 5100 	add.w	r1, ip, #536870912	; 0x20000000
 8003f72:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 8003f76:	0042      	lsls	r2, r0, #1
 8003f78:	6013      	str	r3, [r2, #0]
}
 8003f7a:	4770      	bx	lr
 8003f7c:	40005c50 	.word	0x40005c50

08003f80 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8003f80:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <SetEPRxAddr+0x20>)
*                  wAddr: new address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 8003f82:	b410      	push	{r4}
  _SetEPRxAddr(bEpNum, wAddr);
 8003f84:	681c      	ldr	r4, [r3, #0]
 8003f86:	4a07      	ldr	r2, [pc, #28]	; (8003fa4 <SetEPRxAddr+0x24>)
 8003f88:	b2a4      	uxth	r4, r4
 8003f8a:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
 8003f8e:	1898      	adds	r0, r3, r2
 8003f90:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
 8003f94:	0042      	lsls	r2, r0, #1
 8003f96:	ea01 030c 	and.w	r3, r1, ip
 8003f9a:	6013      	str	r3, [r2, #0]
}
 8003f9c:	bc10      	pop	{r4}
 8003f9e:	4770      	bx	lr
 8003fa0:	40005c50 	.word	0x40005c50
 8003fa4:	20003004 	.word	0x20003004

08003fa8 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8003fa8:	4906      	ldr	r1, [pc, #24]	; (8003fc4 <GetEPTxAddr+0x1c>)
 8003faa:	680b      	ldr	r3, [r1, #0]
 8003fac:	fa1f fc83 	uxth.w	ip, r3
 8003fb0:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 8003fb4:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8003fb8:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 8003fbc:	0043      	lsls	r3, r0, #1
}
 8003fbe:	8818      	ldrh	r0, [r3, #0]
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40005c50 	.word	0x40005c50

08003fc8 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8003fc8:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <GetEPRxAddr+0x18>)
 8003fca:	4906      	ldr	r1, [pc, #24]	; (8003fe4 <GetEPRxAddr+0x1c>)
 8003fcc:	6813      	ldr	r3, [r2, #0]
 8003fce:	fa1f fc83 	uxth.w	ip, r3
 8003fd2:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 8003fd6:	1850      	adds	r0, r2, r1
 8003fd8:	0043      	lsls	r3, r0, #1
}
 8003fda:	8818      	ldrh	r0, [r3, #0]
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40005c50 	.word	0x40005c50
 8003fe4:	20003004 	.word	0x20003004

08003fe8 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8003fe8:	4a05      	ldr	r2, [pc, #20]	; (8004000 <SetEPTxCount+0x18>)
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <SetEPTxCount+0x1c>)
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	fa1f fc82 	uxth.w	ip, r2
 8003ff2:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 8003ff6:	18d0      	adds	r0, r2, r3
 8003ff8:	0043      	lsls	r3, r0, #1
 8003ffa:	6019      	str	r1, [r3, #0]
}
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40005c50 	.word	0x40005c50
 8004004:	20003002 	.word	0x20003002

08004008 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8004008:	4a0f      	ldr	r2, [pc, #60]	; (8004048 <SetEPRxCount+0x40>)
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <SetEPRxCount+0x44>)
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	fa1f fc82 	uxth.w	ip, r2
 8004012:	eb0c 0203 	add.w	r2, ip, r3
 8004016:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	293e      	cmp	r1, #62	; 0x3e
 800401e:	d90a      	bls.n	8004036 <SetEPRxCount+0x2e>
 8004020:	094a      	lsrs	r2, r1, #5
 8004022:	f011 0f1f 	tst.w	r1, #31
 8004026:	d101      	bne.n	800402c <SetEPRxCount+0x24>
 8004028:	1e50      	subs	r0, r2, #1
 800402a:	b282      	uxth	r2, r0
 800402c:	0292      	lsls	r2, r2, #10
 800402e:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8004032:	6019      	str	r1, [r3, #0]
 8004034:	4770      	bx	lr
 8004036:	084a      	lsrs	r2, r1, #1
 8004038:	f011 0f01 	tst.w	r1, #1
 800403c:	bf18      	it	ne
 800403e:	3201      	addne	r2, #1
 8004040:	0290      	lsls	r0, r2, #10
 8004042:	6018      	str	r0, [r3, #0]
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40005c50 	.word	0x40005c50
 800404c:	20003006 	.word	0x20003006

08004050 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8004050:	4b06      	ldr	r3, [pc, #24]	; (800406c <GetEPRxCount+0x1c>)
 8004052:	4907      	ldr	r1, [pc, #28]	; (8004070 <GetEPRxCount+0x20>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	b293      	uxth	r3, r2
 8004058:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
 800405c:	eb0c 0201 	add.w	r2, ip, r1
 8004060:	0053      	lsls	r3, r2, #1
 8004062:	6819      	ldr	r1, [r3, #0]
}
 8004064:	0588      	lsls	r0, r1, #22
 8004066:	0d80      	lsrs	r0, r0, #22
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40005c50 	.word	0x40005c50
 8004070:	20003006 	.word	0x20003006

08004074 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8004074:	b2c3      	uxtb	r3, r0
 8004076:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8004078:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop

08004080 <USB_SIL_Init>:
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8004080:	4a04      	ldr	r2, [pc, #16]	; (8004094 <USB_SIL_Init+0x14>)
 8004082:	2000      	movs	r0, #0
 8004084:	6010      	str	r0, [r2, #0]
  wInterrupt_Mask = IMR_MSK;
 8004086:	4904      	ldr	r1, [pc, #16]	; (8004098 <USB_SIL_Init+0x18>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8004088:	4a04      	ldr	r2, [pc, #16]	; (800409c <USB_SIL_Init+0x1c>)
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800408a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800408e:	800b      	strh	r3, [r1, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8004090:	6013      	str	r3, [r2, #0]
  return 0;
}
 8004092:	4770      	bx	lr
 8004094:	40005c44 	.word	0x40005c44
 8004098:	2000123c 	.word	0x2000123c
 800409c:	40005c40 	.word	0x40005c40

080040a0 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 80040a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80040a2:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 80040a6:	4a07      	ldr	r2, [pc, #28]	; (80040c4 <USB_SIL_Read+0x24>)
 80040a8:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 80040aa:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80040ac:	4790      	blx	r2
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 80040ae:	4906      	ldr	r1, [pc, #24]	; (80040c8 <USB_SIL_Read+0x28>)
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80040b0:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 80040b2:	4628      	mov	r0, r5
 80040b4:	4788      	blx	r1
 80040b6:	4622      	mov	r2, r4
 80040b8:	4601      	mov	r1, r0
 80040ba:	4b04      	ldr	r3, [pc, #16]	; (80040cc <USB_SIL_Read+0x2c>)
 80040bc:	4630      	mov	r0, r6
 80040be:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 80040c0:	4620      	mov	r0, r4
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	08004051 	.word	0x08004051
 80040c8:	08003fc9 	.word	0x08003fc9
 80040cc:	08003da5 	.word	0x08003da5

080040d0 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 80040d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d4:	4f65      	ldr	r7, [pc, #404]	; (800426c <CTR_LP+0x19c>)
 80040d6:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
 80040d8:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80040da:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 8004284 <CTR_LP+0x1b4>
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80040de:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8004298 <CTR_LP+0x1c8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80040e2:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8004278 <CTR_LP+0x1a8>
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80040e6:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80040ea:	46b9      	mov	r9, r7
 80040ec:	f8db 0000 	ldr.w	r0, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80040f0:	4c5f      	ldr	r4, [pc, #380]	; (8004270 <CTR_LP+0x1a0>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80040f2:	8038      	strh	r0, [r7, #0]
 80040f4:	8839      	ldrh	r1, [r7, #0]

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 80040f6:	4d5f      	ldr	r5, [pc, #380]	; (8004274 <CTR_LP+0x1a4>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80040f8:	b20b      	sxth	r3, r1
 80040fa:	2b00      	cmp	r3, #0
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 80040fc:	f64b 72bf 	movw	r2, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8004100:	4e5d      	ldr	r6, [pc, #372]	; (8004278 <CTR_LP+0x1a8>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8004102:	f280 80a7 	bge.w	8004254 <CTR_LP+0x184>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8004106:	f8b9 c000 	ldrh.w	ip, [r9]
 800410a:	f00c 000f 	and.w	r0, ip, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800410e:	0083      	lsls	r3, r0, #2
 8004110:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 8004114:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8004118:	f88a 0000 	strb.w	r0, [sl]
    if (EPindex == 0)
 800411c:	2800      	cmp	r0, #0
 800411e:	d135      	bne.n	800418c <CTR_LP+0xbc>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8004120:	6821      	ldr	r1, [r4, #0]
 8004122:	f8a8 1000 	strh.w	r1, [r8]
	    SaveTState = SaveRState & EPTX_STAT;
 8004126:	f8b8 0000 	ldrh.w	r0, [r8]
 800412a:	f000 0c30 	and.w	ip, r0, #48	; 0x30
 800412e:	f8a5 c000 	strh.w	ip, [r5]
	    SaveRState &=  EPRX_STAT;	
 8004132:	f8b8 3000 	ldrh.w	r3, [r8]
 8004136:	f403 5140 	and.w	r1, r3, #12288	; 0x3000
 800413a:	f8a8 1000 	strh.w	r1, [r8]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800413e:	6820      	ldr	r0, [r4, #0]
 8004140:	ea00 0202 	and.w	r2, r0, r2
 8004144:	f482 5c00 	eor.w	ip, r2, #8192	; 0x2000
 8004148:	f08c 0320 	eor.w	r3, ip, #32
 800414c:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8004150:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8004154:	6020      	str	r0, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8004156:	f8b9 2000 	ldrh.w	r2, [r9]
 800415a:	f012 0f10 	tst.w	r2, #16
 800415e:	d045      	beq.n	80041ec <CTR_LP+0x11c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	f8ad 0006 	strh.w	r0, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8004166:	f8bd c006 	ldrh.w	ip, [sp, #6]
 800416a:	f41c 6f00 	tst.w	ip, #2048	; 0x800
 800416e:	d174      	bne.n	800425a <CTR_LP+0x18a>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8004170:	f8bd c006 	ldrh.w	ip, [sp, #6]
 8004174:	fa0f f38c 	sxth.w	r3, ip
 8004178:	2b00      	cmp	r3, #0
 800417a:	dab7      	bge.n	80040ec <CTR_LP+0x1c>
        {
          _ClearEP_CTR_RX(ENDP0);
 800417c:	6822      	ldr	r2, [r4, #0]
 800417e:	f640 718f 	movw	r1, #3983	; 0xf8f
 8004182:	ea02 0001 	and.w	r0, r2, r1
 8004186:	6020      	str	r0, [r4, #0]
          Out0_Process();
 8004188:	4b3c      	ldr	r3, [pc, #240]	; (800427c <CTR_LP+0x1ac>)
 800418a:	e036      	b.n	80041fa <CTR_LP+0x12a>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800418c:	680e      	ldr	r6, [r1, #0]
 800418e:	f8ad 6006 	strh.w	r6, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8004192:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8004196:	b22c      	sxth	r4, r5
 8004198:	2c00      	cmp	r4, #0
 800419a:	db19      	blt.n	80041d0 <CTR_LP+0x100>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 800419c:	f8bd c006 	ldrh.w	ip, [sp, #6]
 80041a0:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80041a4:	d0a2      	beq.n	80040ec <CTR_LP+0x1c>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80041a6:	f89a 0000 	ldrb.w	r0, [sl]
 80041aa:	f648 7e0f 	movw	lr, #36623	; 0x8f0f
 80041ae:	0082      	lsls	r2, r0, #2
 80041b0:	f102 4c80 	add.w	ip, r2, #1073741824	; 0x40000000
 80041b4:	f50c 44b8 	add.w	r4, ip, #23552	; 0x5c00
 80041b8:	6826      	ldr	r6, [r4, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80041ba:	4831      	ldr	r0, [pc, #196]	; (8004280 <CTR_LP+0x1b0>)
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80041bc:	ea06 050e 	and.w	r5, r6, lr
 80041c0:	6025      	str	r5, [r4, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80041c2:	f89a 1000 	ldrb.w	r1, [sl]
 80041c6:	1e4b      	subs	r3, r1, #1
 80041c8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80041cc:	4790      	blx	r2
 80041ce:	e78d      	b.n	80040ec <CTR_LP+0x1c>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 80041d0:	680e      	ldr	r6, [r1, #0]
 80041d2:	f640 7e8f 	movw	lr, #3983	; 0xf8f
 80041d6:	ea06 050e 	and.w	r5, r6, lr

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80041da:	4c2a      	ldr	r4, [pc, #168]	; (8004284 <CTR_LP+0x1b4>)
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 80041dc:	600d      	str	r5, [r1, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80041de:	7821      	ldrb	r1, [r4, #0]
 80041e0:	4829      	ldr	r0, [pc, #164]	; (8004288 <CTR_LP+0x1b8>)
 80041e2:	1e4b      	subs	r3, r1, #1
 80041e4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80041e8:	4790      	blx	r2
 80041ea:	e7d7      	b.n	800419c <CTR_LP+0xcc>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	f648 7e0f 	movw	lr, #36623	; 0x8f0f
 80041f2:	ea03 020e 	and.w	r2, r3, lr
        In0_Process();
 80041f6:	4b25      	ldr	r3, [pc, #148]	; (800428c <CTR_LP+0x1bc>)
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80041f8:	6022      	str	r2, [r4, #0]
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 80041fa:	4798      	blx	r3
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80041fc:	6821      	ldr	r1, [r4, #0]
 80041fe:	8832      	ldrh	r2, [r6, #0]
 8004200:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8004204:	f402 5c80 	and.w	ip, r2, #4096	; 0x1000
 8004208:	fa1f f08c 	uxth.w	r0, ip
 800420c:	ea01 0303 	and.w	r3, r1, r3
 8004210:	b108      	cbz	r0, 8004216 <CTR_LP+0x146>
 8004212:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004216:	8831      	ldrh	r1, [r6, #0]
 8004218:	f401 5e00 	and.w	lr, r1, #8192	; 0x2000
 800421c:	fa1f f08e 	uxth.w	r0, lr
 8004220:	b108      	cbz	r0, 8004226 <CTR_LP+0x156>
 8004222:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004226:	8828      	ldrh	r0, [r5, #0]
 8004228:	f000 0c10 	and.w	ip, r0, #16
 800422c:	fa1f f28c 	uxth.w	r2, ip
 8004230:	b10a      	cbz	r2, 8004236 <CTR_LP+0x166>
 8004232:	f083 0310 	eor.w	r3, r3, #16
 8004236:	882a      	ldrh	r2, [r5, #0]
 8004238:	f002 0e20 	and.w	lr, r2, #32
 800423c:	fa1f f18e 	uxth.w	r1, lr
 8004240:	b109      	cbz	r1, 8004246 <CTR_LP+0x176>
 8004242:	f083 0320 	eor.w	r3, r3, #32
 8004246:	4912      	ldr	r1, [pc, #72]	; (8004290 <CTR_LP+0x1c0>)
 8004248:	ea43 0c01 	orr.w	ip, r3, r1
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <CTR_LP+0x1a0>)
 800424e:	fa1f f08c 	uxth.w	r0, ip
 8004252:	6018      	str	r0, [r3, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8004254:	b003      	add	sp, #12
 8004256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800425a:	6822      	ldr	r2, [r4, #0]
 800425c:	f640 7e8f 	movw	lr, #3983	; 0xf8f
 8004260:	ea02 010e 	and.w	r1, r2, lr
 8004264:	6021      	str	r1, [r4, #0]
          Setup0_Process();
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <CTR_LP+0x1c4>)
 8004268:	e7c7      	b.n	80041fa <CTR_LP+0x12a>
 800426a:	bf00      	nop
 800426c:	200009e0 	.word	0x200009e0
 8004270:	40005c00 	.word	0x40005c00
 8004274:	20001240 	.word	0x20001240
 8004278:	2000123e 	.word	0x2000123e
 800427c:	080036f5 	.word	0x080036f5
 8004280:	20000244 	.word	0x20000244
 8004284:	20001214 	.word	0x20001214
 8004288:	20000260 	.word	0x20000260
 800428c:	08003c89 	.word	0x08003c89
 8004290:	ffff8080 	.word	0xffff8080
 8004294:	080037e1 	.word	0x080037e1
 8004298:	40005c44 	.word	0x40005c44
 800429c:	69646152 	.word	0x69646152
 80042a0:	6e49206f 	.word	0x6e49206f
 80042a4:	4f207469 	.word	0x4f207469
 80042a8:	203a204b 	.word	0x203a204b
 80042ac:	4d204d46 	.word	0x4d204d46
 80042b0:	0a65646f 	.word	0x0a65646f
 80042b4:	00000000 	.word	0x00000000
 80042b8:	69646152 	.word	0x69646152
 80042bc:	6e49206f 	.word	0x6e49206f
 80042c0:	46207469 	.word	0x46207469
 80042c4:	0a6c6961 	.word	0x0a6c6961
 80042c8:	00000000 	.word	0x00000000
 80042cc:	00000a0a 	.word	0x00000a0a
 80042d0:	2a2a2a2a 	.word	0x2a2a2a2a
 80042d4:	2a2a2a2a 	.word	0x2a2a2a2a
 80042d8:	2a2a2a2a 	.word	0x2a2a2a2a
 80042dc:	2a2a2a2a 	.word	0x2a2a2a2a
 80042e0:	2a2a2a2a 	.word	0x2a2a2a2a
 80042e4:	2a2a2a2a 	.word	0x2a2a2a2a
 80042e8:	2a2a2a2a 	.word	0x2a2a2a2a
 80042ec:	2a2a2a2a 	.word	0x2a2a2a2a
 80042f0:	2a2a2a2a 	.word	0x2a2a2a2a
 80042f4:	2a2a2a2a 	.word	0x2a2a2a2a
 80042f8:	2a2a2a2a 	.word	0x2a2a2a2a
 80042fc:	2a2a2a2a 	.word	0x2a2a2a2a
 8004300:	2a2a2a2a 	.word	0x2a2a2a2a
 8004304:	0a2a2a2a 	.word	0x0a2a2a2a
 8004308:	00000000 	.word	0x00000000
 800430c:	20202020 	.word	0x20202020
 8004310:	20202020 	.word	0x20202020
 8004314:	20202020 	.word	0x20202020
 8004318:	20202020 	.word	0x20202020
 800431c:	20202020 	.word	0x20202020
 8004320:	4c472020 	.word	0x4c472020
 8004324:	56206463 	.word	0x56206463
 8004328:	20312e30 	.word	0x20312e30
 800432c:	20202020 	.word	0x20202020
 8004330:	20202020 	.word	0x20202020
 8004334:	20202020 	.word	0x20202020
 8004338:	20202020 	.word	0x20202020
 800433c:	20202020 	.word	0x20202020
 8004340:	000a2020 	.word	0x000a2020
 8004344:	2e31202a 	.word	0x2e31202a
 8004348:	44434c20 	.word	0x44434c20
 800434c:	656c4320 	.word	0x656c4320
 8004350:	20207261 	.word	0x20207261
 8004354:	20202020 	.word	0x20202020
 8004358:	20202020 	.word	0x20202020
 800435c:	20202020 	.word	0x20202020
 8004360:	20202020 	.word	0x20202020
 8004364:	20202020 	.word	0x20202020
 8004368:	20202020 	.word	0x20202020
 800436c:	20202020 	.word	0x20202020
 8004370:	20202020 	.word	0x20202020
 8004374:	20202020 	.word	0x20202020
 8004378:	0a2a2020 	.word	0x0a2a2020
 800437c:	00000000 	.word	0x00000000
 8004380:	2e32202a 	.word	0x2e32202a
 8004384:	756f4320 	.word	0x756f4320
 8004388:	2b20746e 	.word	0x2b20746e
 800438c:	2020202b 	.word	0x2020202b
 8004390:	20202020 	.word	0x20202020
 8004394:	20202020 	.word	0x20202020
 8004398:	20202020 	.word	0x20202020
 800439c:	20202020 	.word	0x20202020
 80043a0:	20202020 	.word	0x20202020
 80043a4:	20202020 	.word	0x20202020
 80043a8:	20202020 	.word	0x20202020
 80043ac:	20202020 	.word	0x20202020
 80043b0:	20202020 	.word	0x20202020
 80043b4:	0a2a2020 	.word	0x0a2a2020
 80043b8:	00000000 	.word	0x00000000
 80043bc:	2e33202a 	.word	0x2e33202a
 80043c0:	756f4320 	.word	0x756f4320
 80043c4:	2d20746e 	.word	0x2d20746e
 80043c8:	2020202d 	.word	0x2020202d
 80043cc:	20202020 	.word	0x20202020
 80043d0:	20202020 	.word	0x20202020
 80043d4:	20202020 	.word	0x20202020
 80043d8:	20202020 	.word	0x20202020
 80043dc:	20202020 	.word	0x20202020
 80043e0:	20202020 	.word	0x20202020
 80043e4:	20202020 	.word	0x20202020
 80043e8:	20202020 	.word	0x20202020
 80043ec:	20202020 	.word	0x20202020
 80043f0:	2a202020 	.word	0x2a202020
 80043f4:	0000000a 	.word	0x0000000a
 80043f8:	2e34202a 	.word	0x2e34202a
 80043fc:	20202020 	.word	0x20202020
 8004400:	20202020 	.word	0x20202020
 8004404:	20202020 	.word	0x20202020
 8004408:	20202020 	.word	0x20202020
 800440c:	20202020 	.word	0x20202020
 8004410:	20202020 	.word	0x20202020
 8004414:	20202020 	.word	0x20202020
 8004418:	20202020 	.word	0x20202020
 800441c:	20202020 	.word	0x20202020
 8004420:	20202020 	.word	0x20202020
 8004424:	20202020 	.word	0x20202020
 8004428:	20202020 	.word	0x20202020
 800442c:	0a2a2020 	.word	0x0a2a2020
 8004430:	00000000 	.word	0x00000000
 8004434:	2e35202a 	.word	0x2e35202a
 8004438:	20202020 	.word	0x20202020
 800443c:	20202020 	.word	0x20202020
 8004440:	20202020 	.word	0x20202020
 8004444:	20202020 	.word	0x20202020
 8004448:	20202020 	.word	0x20202020
 800444c:	20202020 	.word	0x20202020
 8004450:	20202020 	.word	0x20202020
 8004454:	20202020 	.word	0x20202020
 8004458:	20202020 	.word	0x20202020
 800445c:	20202020 	.word	0x20202020
 8004460:	20202020 	.word	0x20202020
 8004464:	20202020 	.word	0x20202020
 8004468:	0a2a2020 	.word	0x0a2a2020
 800446c:	00000000 	.word	0x00000000
 8004470:	2e36202a 	.word	0x2e36202a
 8004474:	20202020 	.word	0x20202020
 8004478:	20202020 	.word	0x20202020
 800447c:	20202020 	.word	0x20202020
 8004480:	20202020 	.word	0x20202020
 8004484:	20202020 	.word	0x20202020
 8004488:	20202020 	.word	0x20202020
 800448c:	20202020 	.word	0x20202020
 8004490:	20202020 	.word	0x20202020
 8004494:	20202020 	.word	0x20202020
 8004498:	20202020 	.word	0x20202020
 800449c:	20202020 	.word	0x20202020
 80044a0:	20202020 	.word	0x20202020
 80044a4:	0a2a2020 	.word	0x0a2a2020
 80044a8:	00000000 	.word	0x00000000
 80044ac:	2e37202a 	.word	0x2e37202a
 80044b0:	20202020 	.word	0x20202020
 80044b4:	20202020 	.word	0x20202020
 80044b8:	20202020 	.word	0x20202020
 80044bc:	20202020 	.word	0x20202020
 80044c0:	20202020 	.word	0x20202020
 80044c4:	20202020 	.word	0x20202020
 80044c8:	20202020 	.word	0x20202020
 80044cc:	20202020 	.word	0x20202020
 80044d0:	20202020 	.word	0x20202020
 80044d4:	20202020 	.word	0x20202020
 80044d8:	20202020 	.word	0x20202020
 80044dc:	20202020 	.word	0x20202020
 80044e0:	0a2a2020 	.word	0x0a2a2020
 80044e4:	00000000 	.word	0x00000000
 80044e8:	2e38202a 	.word	0x2e38202a
 80044ec:	20202020 	.word	0x20202020
 80044f0:	20202020 	.word	0x20202020
 80044f4:	20202020 	.word	0x20202020
 80044f8:	20202020 	.word	0x20202020
 80044fc:	20202020 	.word	0x20202020
 8004500:	20202020 	.word	0x20202020
 8004504:	20202020 	.word	0x20202020
 8004508:	20202020 	.word	0x20202020
 800450c:	20202020 	.word	0x20202020
 8004510:	20202020 	.word	0x20202020
 8004514:	20202020 	.word	0x20202020
 8004518:	20202020 	.word	0x20202020
 800451c:	0a2a2020 	.word	0x0a2a2020
 8004520:	00000000 	.word	0x00000000
 8004524:	2e39202a 	.word	0x2e39202a
 8004528:	20202020 	.word	0x20202020
 800452c:	20202020 	.word	0x20202020
 8004530:	20202020 	.word	0x20202020
 8004534:	20202020 	.word	0x20202020
 8004538:	20202020 	.word	0x20202020
 800453c:	20202020 	.word	0x20202020
 8004540:	20202020 	.word	0x20202020
 8004544:	20202020 	.word	0x20202020
 8004548:	20202020 	.word	0x20202020
 800454c:	20202020 	.word	0x20202020
 8004550:	20202020 	.word	0x20202020
 8004554:	20202020 	.word	0x20202020
 8004558:	0a2a2020 	.word	0x0a2a2020
 800455c:	00000000 	.word	0x00000000
 8004560:	2e6d202a 	.word	0x2e6d202a
 8004564:	654d2020 	.word	0x654d2020
 8004568:	2020756e 	.word	0x2020756e
 800456c:	20202020 	.word	0x20202020
 8004570:	20202020 	.word	0x20202020
 8004574:	20202020 	.word	0x20202020
 8004578:	20202020 	.word	0x20202020
 800457c:	20202020 	.word	0x20202020
 8004580:	20202020 	.word	0x20202020
 8004584:	20202020 	.word	0x20202020
 8004588:	20202020 	.word	0x20202020
 800458c:	20202020 	.word	0x20202020
 8004590:	20202020 	.word	0x20202020
 8004594:	0a2a2020 	.word	0x0a2a2020
 8004598:	00000000 	.word	0x00000000
 800459c:	00203e3e 	.word	0x00203e3e
 80045a0:	2044434c 	.word	0x2044434c
 80045a4:	61656c43 	.word	0x61656c43
 80045a8:	000a2072 	.word	0x000a2072
 80045ac:	6e756f43 	.word	0x6e756f43
 80045b0:	2b2b2074 	.word	0x2b2b2074
 80045b4:	00000a20 	.word	0x00000a20
 80045b8:	72616d53 	.word	0x72616d53
 80045bc:	626f7274 	.word	0x626f7274
 80045c0:	4220746f 	.word	0x4220746f
 80045c4:	00000044 	.word	0x00000044
 80045c8:	6e756f43 	.word	0x6e756f43
 80045cc:	203a2074 	.word	0x203a2074
 80045d0:	00643425 	.word	0x00643425
 80045d4:	6e756f43 	.word	0x6e756f43
 80045d8:	2d2d2074 	.word	0x2d2d2074
 80045dc:	00000a20 	.word	0x00000a20

080045e0 <Virtual_Com_Port_StringVendor>:
 80045e0:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 80045f0:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8004600:	00630069 00000073                       i.c.s...

08004608 <Virtual_Com_Port_DeviceDescriptor>:
 8004608:	02000112 40000002 57400483 02010200     .......@..@W....
 8004618:	00000103                                ....

0800461c <Virtual_Com_Port_StringLangID>:
 800461c:	04090304                                ....

08004620 <Virtual_Com_Port_StringProduct>:
 8004620:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8004630:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8004640:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8004650:	00000020                                 ...

08004654 <Virtual_Com_Port_ConfigDescriptor>:
 8004654:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8004664:	24050001 05011000 01000124 02022404     ...$....$....$..
 8004674:	00062405 82050701 ff000803 00010409     .$..............
 8004684:	00000a02 03050700 00004002 02810507     .........@......
 8004694:	00000040                                @...
